###################################################################################################
###
###   Icron Technology Corporation - Copyright 2016
###
###
###   This source file and the information contained in it are confidential and
###   proprietary to Icron Technology Corporation. The reproduction or disclosure,
###   in whole or in part, to anyone outside of Icron without the written approval
###   of a Icron officer under a Non-Disclosure Agreement, or to any employee of
###   Icron who has not previously obtained written authorization for access from
###   the individual responsible for the source code, will have a significant
###   detrimental effect on Icron and is expressly prohibited.
###
###################################################################################################
##
##!   @file  - pycrc.py
##
##!   @brief - 8, 16, 32 bit CRC calculator, based on crcFast() of crc.c;
##
##!   @note  - Each crc8_table, crc16_table and crc32_table is the remainder of each possible byte
##             divided by the given polynomial; Tables were created by the crcInit() function
##             in crc.c in "p_bb_sw/components/crc/src"; the polynomials and other settings of each
##             crc is defined in crc.h
##
###################################################################################################

#CRC-8/WCDMA, Polynomial: 0x9B
crc8_table = [
          0, 155,  173,  54, 193,  90, 108, 247,  25, 130,  180,  47, 216,  67, 117, 238,  50, 169,
        159,   4,  243, 104,  94, 197,  43, 176, 134,  29,  234, 113,  71, 220, 100, 255, 201,  82,
        165,  62,    8, 147, 125, 230, 208,  75, 188,  39,   17, 138,  86, 205, 251,  96, 151,  12,
         58, 161,   79, 212, 226, 121, 142,  21,  35, 184,  200,  83, 101, 254,   9, 146, 164,  63,
        209,  74,  124, 231,  16, 139, 189,  38, 250,  97,   87, 204,  59, 160, 150,  13, 227, 120,
         78, 213,   34, 185, 143,  20, 172,  55,   1, 154,  109, 246, 192,  91, 181,  46,  24, 131,
        116, 239,  217,  66, 158,   5,  51, 168,  95, 196,  242, 105, 135,  28,  42, 177,  70, 221,
        235, 112,   11, 144, 166,  61, 202,  81, 103, 252,   18, 137, 191,  36, 211,  72, 126, 229,
         57, 162,  148,  15, 248,  99,  85, 206,  32, 187,  141,  22, 225, 122,  76, 215, 111, 244,
        194,  89,  174,  53,   3, 152, 118, 237, 219,  64,  183,  44,  26, 129,  93, 198, 240, 107,
        156,   7,   49, 170,  68, 223, 233, 114, 133,  30,   40, 179, 195,  88, 110, 245,   2, 153,
        175,  52,  218,  65, 119, 236,  27, 128, 182,  45,  241, 106,  92, 199,  48, 171, 157,   6,
        232, 115,   69, 222,  41, 178, 132,  31, 167,  60,   10, 145, 102, 253, 203,  80, 190,  37,
         19, 136,  127, 228, 210,  73, 149,  14,  56, 163,   84, 207, 249,  98, 140,  23,  33, 186,
         77, 214,  224, 123]

#CRC-16, Polynomial: 0x8005
crc16_table = [
          0, 32773, 32783,    10, 32795,    30,    20, 32785, 32819,    54,    60, 32825,    40,
      32813, 32807,    34, 32867,   102,   108, 32873,   120, 32893, 32887,   114,    80, 32853,
      32863,    90, 32843,    78,    68, 32833, 32963,   198,   204, 32969,   216, 32989, 32983,
        210,   240, 33013, 33023,   250, 33003,   238,   228, 32993,   160, 32933, 32943,   170,
      32955,   190,   180, 32945, 32915,   150,   156, 32921,   136, 32909, 32903,   130, 33155,
        390,   396, 33161,   408, 33181, 33175,   402,   432, 33205, 33215,   442, 33195,   430,
        420, 33185,   480, 33253, 33263,   490, 33275,   510,   500, 33265, 33235,   470,   476,
      33241,   456, 33229, 33223,   450,   320, 33093, 33103,   330, 33115,   350,   340, 33105,
      33139,   374,   380, 33145,   360, 33133, 33127,   354, 33059,   294,   300, 33065,   312,
      33085, 33079,   306,   272, 33045, 33055,   282, 33035,   270,   260, 33025, 33539,   774,
        780, 33545,   792, 33565, 33559,   786,   816, 33589, 33599,   826, 33579,   814,   804,
      33569,   864, 33637, 33647,   874, 33659,   894,   884, 33649, 33619,   854,   860, 33625,
        840, 33613, 33607,   834,   960, 33733, 33743,   970, 33755,   990,   980, 33745, 33779,
       1014,  1020, 33785,  1000, 33773, 33767,   994, 33699,   934,   940, 33705,   952, 33725,
      33719,   946,   912, 33685, 33695,   922, 33675,   910,   900, 33665,   640, 33413, 33423,
        650, 33435,   670,   660, 33425, 33459,   694,   700, 33465,   680, 33453, 33447,   674,
      33507,   742,   748, 33513,   760, 33533, 33527,   754,   720, 33493, 33503,   730, 33483,
        718,   708, 33473, 33347,   582,   588, 33353,   600, 33373, 33367,   594,   624, 33397,
      33407,   634, 33387,   622,   612, 33377,   544, 33317, 33327,   554, 33339,   574,   564,
      33329, 33299,   534,   540, 33305,   520, 33293, 33287,   514]

#CRC-32, Polynomial: 0x04C11DB7
crc32_table = [
                 0,    79764919,   159529838,   222504665,   319059676,   398814059,   445009330,
         507990021,   638119352,   583659535,   797628118,   726387553,   890018660,   835552979,
        1015980042,   944750013,  1276238704,  1221641927,  1167319070,  1095957929,  1595256236,
        1540665371,  1452775106,  1381403509,  1780037320,  1859660671,  1671105958,  1733955601,
        2031960084,  2111593891,  1889500026,  1952343757, -1742489888, -1662866601, -1851683442,
       -1788833735, -1960329156, -1880695413, -2103051438, -2040207643, -1104454824, -1159051537,
       -1213636554, -1284997759, -1389417084, -1444007885, -1532160278, -1603531939,  -734892656,
        -789352409,  -575645954,  -646886583,  -952755380, -1007220997,  -827056094,  -898286187,
        -231047128,  -151282273,   -71779514,    -8804623,  -515967244,  -436212925,  -390279782,
        -327299027,   881225847,   809987520,  1023691545,   969234094,   662832811,   591600412,
         771767749,   717299826,   311336399,   374308984,   453813921,   533576470,    25881363,
          88864420,   134795389,   214552010,  2023205639,  2086057648,  1897238633,  1976864222,
        1804852699,  1867694188,  1645340341,  1724971778,  1587496639,  1516133128,  1461550545,
        1406951526,  1302016099,  1230646740,  1142491917,  1087903418, -1398421865, -1469785312,
       -1524105735, -1578704818, -1079922613, -1151291908, -1239184603, -1293773166, -1968362705,
       -1905510760, -2094067647, -2014441994, -1716953613, -1654112188, -1876203875, -1796572374,
        -525066777,  -462094256,  -382327159,  -302564546,  -206542021,  -143559028,   -97365931,
         -17609246,  -960696225, -1031934488,  -817968335,  -872425850,  -709327229,  -780559564,
        -600130067,  -654598054,  1762451694,  1842216281,  1619975040,  1682949687,  2047383090,
        2127137669,  1938468188,  2001449195,  1325665622,  1271206113,  1183200824,  1111960463,
        1543535498,  1489069629,  1434599652,  1363369299,   622672798,   568075817,   748617968,
         677256519,   907627842,   853037301,  1067152940,   995781531,    51762726,   131386257,
         177728840,   240578815,   269590778,   349224269,   429104020,   491947555,  -248556018,
        -168932423,  -122852000,   -60002089,  -500490030,  -420856475,  -341238852,  -278395381,
        -685261898,  -739858943,  -559578920,  -630940305, -1004286614, -1058877219,  -845023740,
        -916395085, -1119974018, -1174433591, -1262701040, -1333941337, -1371866206, -1426332139,
       -1481064244, -1552294533, -1690935098, -1611170447, -1833673816, -1770699233, -2009983462,
       -1930228819, -2119160460, -2056179517,  1569362073,  1498123566,  1409854455,  1355396672,
        1317987909,  1246755826,  1192025387,  1137557660,  2072149281,  2135122070,  1912620623,
        1992383480,  1753615357,  1816598090,  1627664531,  1707420964,   295390185,   358241886,
         404320391,   483945776,    43990325,   106832002,   186451547,   266083308,   932423249,
         861060070,  1041341759,   986742920,   613929101,   542559546,   756411363,   701822548,
        -978770311, -1050133554,  -869589737,  -924188512,  -693284699,  -764654318,  -550540341,
        -605129092,  -475935807,  -413084042,  -366743377,  -287118056,  -257573603,  -194731862,
        -114850189,   -35218492, -1984365303, -1921392450, -2143631769, -2063868976, -1698919467,
       -1635936670, -1824608069, -1744851700, -1347415887, -1418654458, -1506661409, -1561119128,
       -1129027987, -1200260134, -1254728445, -1309196108]

byte_reflected_table = [
          0, 128,  64, 192,  32, 160,  96, 224,  16, 144,  80, 208,  48, 176, 112, 240,   8, 136,  72,
        200,  40, 168, 104, 232,  24, 152,  88, 216,  56, 184, 120, 248,   4, 132,  68, 196,  36, 164,
        100, 228,  20, 148,  84, 212,  52, 180, 116, 244,  12, 140,  76, 204,  44, 172, 108, 236,  28,
        156,  92, 220,  60, 188, 124, 252,   2, 130,  66, 194,  34, 162,  98, 226,  18, 146,  82, 210,
         50, 178, 114, 242,  10, 138,  74, 202,  42, 170, 106, 234,  26, 154,  90, 218,  58, 186, 122,
        250,   6, 134,  70, 198,  38, 166, 102, 230,  22, 150,  86, 214,  54, 182, 118, 246,  14, 142,
         78, 206,  46, 174, 110, 238,  30, 158,  94, 222,  62, 190, 126, 254,   1, 129,  65, 193,  33,
        161,  97, 225,  17, 145,  81, 209,  49, 177, 113, 241,   9, 137,  73, 201,  41, 169, 105, 233,
         25, 153,  89, 217,  57, 185, 121, 249,   5, 133,  69, 197,  37, 165, 101, 229,  21, 149,  85,
        213,  53, 181, 117, 245,  13, 141,  77, 205,  45, 173, 109, 237,  29, 157,  93, 221,  61, 189,
        125, 253,   3, 131,  67, 195,  35, 163,  99, 227,  19, 147,  83, 211,  51, 179, 115, 243,  11,
        139,  75, 203,  43, 171, 107, 235,  27, 155,  91, 219,  59, 187, 123, 251,   7, 135,  71, 199,
         39, 167, 103, 231,  23, 151,  87, 215,  55, 183, 119, 247,  15, 143,  79, 207,  47, 175, 111, 
        239,  31, 159,  95, 223,  63, 191, 127, 255]


def reflect (data, nBits):
    """To reverse the bit ordering of each byte within the message and/or the final remainder.
    The reason this is sometimes done is that a good number of the hardware CRC implementations
    operate on the "reflected" bit ordering of bytes that is common with some UARTs."""
    reflection = 0x00000000
    for bit in range(nBits):
        #if LSB set 
        if (data & 0x01):
            reflection = reflection | (1 << ((nBits-1)-bit))
        data = (data >> 1)
    return (reflection)

#32bit CRC
def crc32(message, reflect_remainder=False):
    """"message" is a list of each byte, each element of the list gets converted to an ACSCII
    value then computation is performed"""
    remainder = 0xFFFFFFFF
    final_xor_value = 0xFFFFFFFF
    width = 32
    for byte in message:
        data = byte_reflected_table[byte] ^ (remainder >> (width - 8))
        remainder = (crc32_table[data] ^ (remainder << 8)) & 0xFFFFFFFF

    remainder = reflect(remainder, width) if reflect_remainder else remainder
    return (remainder ^ final_xor_value)

#16bit CRC
def crc16(message, reflect_remainder=False):
    """"message" is a list of each byte, each element of the list gets converted to an ACSCII
    value then computation is performed"""
    remainder = 0x0000
    final_xor_value = 0x0000
    width = 16
    for byte in message:
        data =  byte_reflected_table[byte]^ (remainder >> (width - 8))
        remainder = (crc16_table[data] ^ (remainder << 8)) & 0xFFFF

    remainder = reflect(remainder, width) if reflect_remainder else remainder
    return (remainder ^ final_xor_value)

#8bit CRC
def crc8(message, reflect_remainder=False):
    """"message" is a list of each byte, each element of the list gets converted to an ACSCII
    value then computation is performed"""
    remainder = 0x00
    final_xor_value = 0x00
    width = 8
    for byte in message:
        data = byte_reflected_table[byte] ^ (remainder >> (width - 8))
        remainder = (crc8_table[data] ^ (remainder << 8)) & 0xFF

    remainder = reflect(remainder, width) if reflect_remainder else remainder
    return (remainder ^ final_xor_value)

