/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Terry Sosniak*/
/* generated by      : Terry.Sosniak*/
/* generated from    : C:\cygwin64\home\Terry.Sosniak\RTL\mca_release_parameter_change_20190801\m_mca_v2\regs\ids\mca_core_regs\mca_core_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/*block : core */

#ifndef _CORE_REGS_H_
#define _CORE_REGS_H_

#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x4 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} core_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t dp_rx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t dp_tx_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_rx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} core_control0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} core_status0;

/*section : link */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t rx_idl_en_min : 4;           /* 23:20 SW=rw HW=ro 0x1 */
            uint32_t tx_idl_min : 4;           /* 19:16 SW=rw HW=ro 0x8 */
            uint32_t rx_idl_min : 4;           /* 15:12 SW=rw HW=ro 0x4 */
            uint32_t rx_ts1_en_min : 4;           /* 11:8 SW=rw HW=ro 0x1 */
            uint32_t tx_ts1_min : 4;           /* 7:4 SW=rw HW=ro 0x8 */
            uint32_t rx_ts1_min : 4;           /* 3:0 SW=rw HW=ro 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_ts1_min : 4;           /* 0:3 SW=rw HW=ro 0x4 */
            uint32_t tx_ts1_min : 4;           /* 4:7 SW=rw HW=ro 0x8 */
            uint32_t rx_ts1_en_min : 4;           /* 8:11 SW=rw HW=ro 0x1 */
            uint32_t rx_idl_min : 4;           /* 12:15 SW=rw HW=ro 0x4 */
            uint32_t tx_idl_min : 4;           /* 16:19 SW=rw HW=ro 0x8 */
            uint32_t rx_idl_en_min : 4;           /* 20:23 SW=rw HW=ro 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} core_link_control0_ltssm_pkt_mngt_pol;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t rx_idl_en_max_lmt : 4;           /* 23:20 SW=rw HW=ro 0x1 */
            uint32_t tx_idl_max_lmt : 4;           /* 19:16 SW=rw HW=ro 0x4 */
            uint32_t rx_idl_max_lmt : 4;           /* 15:12 SW=rw HW=ro 0x1 */
            uint32_t rx_ts2_en_max_lmt : 4;           /* 11:8 SW=rw HW=ro 0x1 */
            uint32_t tx_ts2_max_lmt : 4;           /* 7:4 SW=rw HW=ro 0x4 */
            uint32_t rx_ts2_max_lmt : 4;           /* 3:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_ts2_max_lmt : 4;           /* 0:3 SW=rw HW=ro 0x1 */
            uint32_t tx_ts2_max_lmt : 4;           /* 4:7 SW=rw HW=ro 0x4 */
            uint32_t rx_ts2_en_max_lmt : 4;           /* 8:11 SW=rw HW=ro 0x1 */
            uint32_t rx_idl_max_lmt : 4;           /* 12:15 SW=rw HW=ro 0x1 */
            uint32_t tx_idl_max_lmt : 4;           /* 16:19 SW=rw HW=ro 0x4 */
            uint32_t rx_idl_en_max_lmt : 4;           /* 20:23 SW=rw HW=ro 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} core_link_control0_ltssm_pkt_mngt_rec;

/*section : ltssm_pol_tmr */

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x1D5 */
    } bf;
    uint32_t  dw;
} core_link_control0_ltssm_pol_tmr_act_rpt;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x1D5 */
    } bf;
    uint32_t  dw;
} core_link_control0_ltssm_pol_tmr_idle_rpt;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x2625A */
    } bf;
    uint32_t  dw;
} core_link_control0_ltssm_pol_tmr_idle;

typedef struct {
    core_link_control0_ltssm_pol_tmr_act_rpt  act_rpt;
    core_link_control0_ltssm_pol_tmr_idle_rpt  idle_rpt;
    core_link_control0_ltssm_pol_tmr_idle  idle;
    
    
    
} core_link_control0_ltssm_pol_tmr;


/*section : ltssm_rec_tmr */

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x28 */
    } bf;
    uint32_t  dw;
} core_link_control0_ltssm_rec_tmr_act_rpt;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x28 */
    } bf;
    uint32_t  dw;
} core_link_control0_ltssm_rec_tmr_idle_rpt;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x2625A */
    } bf;
    uint32_t  dw;
} core_link_control0_ltssm_rec_tmr_idle;

typedef struct {
    core_link_control0_ltssm_rec_tmr_act_rpt  act_rpt;
    core_link_control0_ltssm_rec_tmr_idle_rpt  idle_rpt;
    core_link_control0_ltssm_rec_tmr_idle  idle;
    
    
    
} core_link_control0_ltssm_rec_tmr;


/*section : ltssm_u0_tmr */

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x61B */
    } bf;
    uint32_t  dw;
} core_link_control0_ltssm_u0_tmr_u0ltimeout;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x3D09 */
    } bf;
    uint32_t  dw;
} core_link_control0_ltssm_u0_tmr_pnd;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x3D09 */
    } bf;
    uint32_t  dw;
} core_link_control0_ltssm_u0_tmr_crd;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x1312D */
    } bf;
    uint32_t  dw;
} core_link_control0_ltssm_u0_tmr_u0rectimeout;

typedef struct {
    core_link_control0_ltssm_u0_tmr_u0ltimeout  u0ltimeout;
    core_link_control0_ltssm_u0_tmr_pnd  pnd;
    core_link_control0_ltssm_u0_tmr_crd  crd;
    core_link_control0_ltssm_u0_tmr_u0rectimeout  u0rectimeout;
    
    
    
} core_link_control0_ltssm_u0_tmr;


/*section : test */

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x3D09 */
    } bf;
    uint32_t  dw;
} core_link_control0_test_latency;

typedef struct {
    core_link_control0_test_latency  latency;
    
    
    
} core_link_control0_test;


typedef struct {
    core_link_control0_ltssm_pkt_mngt_pol  ltssm_pkt_mngt_pol;
    core_link_control0_ltssm_pkt_mngt_rec  ltssm_pkt_mngt_rec;
    
    union {
        core_link_control0_ltssm_pol_tmr s;
        uint8_t filler[0xC];
    } ltssm_pol_tmr;
    
    union {
        core_link_control0_ltssm_rec_tmr s;
        uint8_t filler[0xC];
    } ltssm_rec_tmr;
    
    union {
        core_link_control0_ltssm_u0_tmr s;
        uint8_t filler[0x10];
    } ltssm_u0_tmr;
    
    union {
        core_link_control0_test s;
        uint8_t filler[0x4];
    } test;
    
    
    
} core_link_control0;


/*section : status0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t active_channels : 5;           /* 4:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t active_channels : 5;           /* 0:4 SW=ro HW=wo 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} core_link_status0_cfg;

typedef struct {
    core_link_status0_cfg  cfg;
    
    
    
} core_link_status0;


typedef struct {
    
    union {
        core_link_control0 s;
        uint8_t filler[0x34];
    } control0;
    
    union {
        core_link_status0 s;
        uint8_t filler[0x4];
    } status0;
    
    
    
} core_link;


/*section : tx */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t stats_chid_en : 16;           /* 23:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 4;
            uint32_t bw_pkt_type : 4;           /* 3:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t bw_pkt_type : 4;           /* 0:3 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 4;
            uint32_t stats_chid_en : 16;           /* 8:23 SW=rw HW=ro 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_control0_dp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=rw HW=ro 0xFF */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=rw HW=ro 0xFF */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_control0_bw_sample_timer;

typedef struct {
    core_tx_control0_dp  dp;
    core_tx_control0_bw_sample_timer  bw_sample_timer;
    
    
    
} core_tx_control0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t bandwidth : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t plu : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t lgood : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t lcrd : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lrtry : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lbad : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t ts1 : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t ts2 : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t idle : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_rtry : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_nrtry : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t cmd_fifo_dcount : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t nfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pfifo : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t nfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t cmd_fifo_dcount : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_nrtry : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_rtry : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t idle : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t ts2 : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t ts1 : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t lbad : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lrtry : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lcrd : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lgood : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t plu : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t bandwidth : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t cnt : 4;           /* 3:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 4;           /* 0:3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_pfifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t cnt : 4;           /* 3:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 4;           /* 0:3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_nfifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_cmd_fifo_dcount;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} core_tx_stats0_data_pkt_nrtry;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} core_tx_stats0_data_pkt_rtry;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_idle;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_ts2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_ts1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_lbad;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_lrtry;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_lcrd;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} core_tx_stats0_lgood;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_plu;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} core_tx_stats0_bandwidth;

typedef struct {
    core_tx_stats0_rd2clr_config  rd2clr_config;
    core_tx_stats0_pfifo  pfifo;
    core_tx_stats0_nfifo  nfifo;
    core_tx_stats0_cmd_fifo_dcount  cmd_fifo_dcount;
    core_tx_stats0_data_pkt_nrtry  data_pkt_nrtry;
    core_tx_stats0_data_pkt_rtry  data_pkt_rtry;
    core_tx_stats0_idle  idle;
    core_tx_stats0_ts2  ts2;
    core_tx_stats0_ts1  ts1;
    core_tx_stats0_lbad  lbad;
    core_tx_stats0_lrtry  lrtry;
    core_tx_stats0_lcrd  lcrd;
    core_tx_stats0_lgood  lgood;
    core_tx_stats0_plu  plu;
    core_tx_stats0_bandwidth  bandwidth;
    
    
    
} core_tx_stats0;


typedef struct {
    
    union {
        core_tx_control0 s;
        uint8_t filler[0x8];
    } control0;
    
    union {
        core_tx_stats0 s;
        uint8_t filler[0x3C];
    } stats0;
    
    
    
} core_tx;


/*section : rx */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t stats_chid_en : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t stats_chid_en : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_control0_dp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t hi : 16;           /* 31:16 SW=rw HW=ro 0x63 */
            uint32_t lo : 16;           /* 15:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lo : 16;           /* 0:15 SW=rw HW=ro 0x1 */
            uint32_t hi : 16;           /* 16:31 SW=rw HW=ro 0x63 */
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_control0_rx_cmd_fifo_flc;

typedef struct {
    core_rx_control0_dp  dp;
    core_rx_control0_rx_cmd_fifo_flc  rx_cmd_fifo_flc;
    
    
    
} core_rx_control0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t rx_cmd_fifo_flc : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t plu : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lgood : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lcrd : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lrtry : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t lbad : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t ts1 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t ts2 : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t idle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_rtry : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_nrtry : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t cmd_fifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cmd_fifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_nrtry : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_rtry : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t idle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t ts2 : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t ts1 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t lbad : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t lrtry : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t lcrd : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lgood : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t plu : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t rx_cmd_fifo_flc : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_stats0_cmd_fifo_dcount;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} core_rx_stats0_data_pkt_nrtry;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} core_rx_stats0_data_pkt_rtry;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_stats0_idle;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_stats0_ts2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_stats0_ts1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_stats0_lbad;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_stats0_lrtry;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_stats0_lcrd;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} core_rx_stats0_lgood;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_stats0_plu;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} core_rx_stats0_rx_cmd_fifo_flc;

typedef struct {
    core_rx_stats0_rd2clr_config  rd2clr_config;
    core_rx_stats0_cmd_fifo_dcount  cmd_fifo_dcount;
    core_rx_stats0_data_pkt_nrtry  data_pkt_nrtry;
    core_rx_stats0_data_pkt_rtry  data_pkt_rtry;
    core_rx_stats0_idle  idle;
    core_rx_stats0_ts2  ts2;
    core_rx_stats0_ts1  ts1;
    core_rx_stats0_lbad  lbad;
    core_rx_stats0_lrtry  lrtry;
    core_rx_stats0_lcrd  lcrd;
    core_rx_stats0_lgood  lgood;
    core_rx_stats0_plu  plu;
    core_rx_stats0_rx_cmd_fifo_flc  rx_cmd_fifo_flc;
    
    
    
} core_rx_stats0;


typedef struct {
    
    union {
        core_rx_control0 s;
        uint8_t filler[0x8];
    } control0;
    
    union {
        core_rx_stats0 s;
        uint8_t filler[0x34];
    } stats0;
    
    
    
} core_rx;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t dp_tx_ready : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_ready : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} core_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_tx_ready : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_ready : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} core_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} core_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} core_irq0_raw;

typedef struct {
    core_irq0_enable  enable;
    core_irq0_pending  pending;
    core_irq0_pending_irq  pending_irq;
    core_irq0_raw  raw;
    
    
    
} core_irq0;


typedef struct {
    core_version  version;
    core_control0  control0;
    core_status0  status0;
    
    union {
        core_link s;
        uint8_t filler[0x38];
    } link;
    
    union {
        core_tx s;
        uint8_t filler[0x44];
    } tx;
    
    union {
        core_rx s;
        uint8_t filler[0x3C];
    } rx;
    
    union {
        core_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
    
    uint8_t filler11[0x2C];
    
    
} core_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define core_version_READMASK 0xFFFFFF
#define core_version_WRITEMASK 0x0
#define core_version_VOLATILEMASK 0x0
#define core_version_RESETMASK 0xFFFFFF
#define core_version_DEFAULT 0x00010204

#define core_control0_READMASK 0x3
#define core_control0_WRITEMASK 0x3
#define core_control0_VOLATILEMASK 0x0
#define core_control0_RESETMASK 0x3
#define core_control0_DEFAULT 0x00000000

#define core_status0_READMASK 0x3
#define core_status0_WRITEMASK 0x0
#define core_status0_VOLATILEMASK 0x3
#define core_status0_RESETMASK 0x3
#define core_status0_DEFAULT 0x00000000

#define core_link_control0_ltssm_pkt_mngt_pol_READMASK 0xFFFFFF
#define core_link_control0_ltssm_pkt_mngt_pol_WRITEMASK 0xFFFFFF
#define core_link_control0_ltssm_pkt_mngt_pol_VOLATILEMASK 0x0
#define core_link_control0_ltssm_pkt_mngt_pol_RESETMASK 0xFFFFFF
#define core_link_control0_ltssm_pkt_mngt_pol_DEFAULT 0x00184184

#define core_link_control0_ltssm_pkt_mngt_rec_READMASK 0xFFFFFF
#define core_link_control0_ltssm_pkt_mngt_rec_WRITEMASK 0xFFFFFF
#define core_link_control0_ltssm_pkt_mngt_rec_VOLATILEMASK 0x0
#define core_link_control0_ltssm_pkt_mngt_rec_RESETMASK 0xFFFFFF
#define core_link_control0_ltssm_pkt_mngt_rec_DEFAULT 0x00141141

#define core_link_control0_ltssm_pol_tmr_act_rpt_READMASK 0xFFFFFFFF
#define core_link_control0_ltssm_pol_tmr_act_rpt_WRITEMASK 0xFFFFFFFF
#define core_link_control0_ltssm_pol_tmr_act_rpt_VOLATILEMASK 0x0
#define core_link_control0_ltssm_pol_tmr_act_rpt_RESETMASK 0xFFFFFFFF
#define core_link_control0_ltssm_pol_tmr_act_rpt_DEFAULT 0x000001D5

#define core_link_control0_ltssm_pol_tmr_idle_rpt_READMASK 0xFFFFFFFF
#define core_link_control0_ltssm_pol_tmr_idle_rpt_WRITEMASK 0xFFFFFFFF
#define core_link_control0_ltssm_pol_tmr_idle_rpt_VOLATILEMASK 0x0
#define core_link_control0_ltssm_pol_tmr_idle_rpt_RESETMASK 0xFFFFFFFF
#define core_link_control0_ltssm_pol_tmr_idle_rpt_DEFAULT 0x000001D5

#define core_link_control0_ltssm_pol_tmr_idle_READMASK 0xFFFFFFFF
#define core_link_control0_ltssm_pol_tmr_idle_WRITEMASK 0xFFFFFFFF
#define core_link_control0_ltssm_pol_tmr_idle_VOLATILEMASK 0x0
#define core_link_control0_ltssm_pol_tmr_idle_RESETMASK 0xFFFFFFFF
#define core_link_control0_ltssm_pol_tmr_idle_DEFAULT 0x0002625A

#define core_link_control0_ltssm_rec_tmr_act_rpt_READMASK 0xFFFFFFFF
#define core_link_control0_ltssm_rec_tmr_act_rpt_WRITEMASK 0xFFFFFFFF
#define core_link_control0_ltssm_rec_tmr_act_rpt_VOLATILEMASK 0x0
#define core_link_control0_ltssm_rec_tmr_act_rpt_RESETMASK 0xFFFFFFFF
#define core_link_control0_ltssm_rec_tmr_act_rpt_DEFAULT 0x00000028

#define core_link_control0_ltssm_rec_tmr_idle_rpt_READMASK 0xFFFFFFFF
#define core_link_control0_ltssm_rec_tmr_idle_rpt_WRITEMASK 0xFFFFFFFF
#define core_link_control0_ltssm_rec_tmr_idle_rpt_VOLATILEMASK 0x0
#define core_link_control0_ltssm_rec_tmr_idle_rpt_RESETMASK 0xFFFFFFFF
#define core_link_control0_ltssm_rec_tmr_idle_rpt_DEFAULT 0x00000028

#define core_link_control0_ltssm_rec_tmr_idle_READMASK 0xFFFFFFFF
#define core_link_control0_ltssm_rec_tmr_idle_WRITEMASK 0xFFFFFFFF
#define core_link_control0_ltssm_rec_tmr_idle_VOLATILEMASK 0x0
#define core_link_control0_ltssm_rec_tmr_idle_RESETMASK 0xFFFFFFFF
#define core_link_control0_ltssm_rec_tmr_idle_DEFAULT 0x0002625A

#define core_link_control0_ltssm_u0_tmr_u0ltimeout_READMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_u0ltimeout_WRITEMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_u0ltimeout_VOLATILEMASK 0x0
#define core_link_control0_ltssm_u0_tmr_u0ltimeout_RESETMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_u0ltimeout_DEFAULT 0x0000061B

#define core_link_control0_ltssm_u0_tmr_pnd_READMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_pnd_WRITEMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_pnd_VOLATILEMASK 0x0
#define core_link_control0_ltssm_u0_tmr_pnd_RESETMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_pnd_DEFAULT 0x00003D09

#define core_link_control0_ltssm_u0_tmr_crd_READMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_crd_WRITEMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_crd_VOLATILEMASK 0x0
#define core_link_control0_ltssm_u0_tmr_crd_RESETMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_crd_DEFAULT 0x00003D09

#define core_link_control0_ltssm_u0_tmr_u0rectimeout_READMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_u0rectimeout_WRITEMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_u0rectimeout_VOLATILEMASK 0x0
#define core_link_control0_ltssm_u0_tmr_u0rectimeout_RESETMASK 0xFFFFFFFF
#define core_link_control0_ltssm_u0_tmr_u0rectimeout_DEFAULT 0x0001312D

#define core_link_control0_test_latency_READMASK 0xFFFFFFFF
#define core_link_control0_test_latency_WRITEMASK 0xFFFFFFFF
#define core_link_control0_test_latency_VOLATILEMASK 0x0
#define core_link_control0_test_latency_RESETMASK 0xFFFFFFFF
#define core_link_control0_test_latency_DEFAULT 0x00003D09

#define core_link_status0_cfg_READMASK 0x1F
#define core_link_status0_cfg_WRITEMASK 0x0
#define core_link_status0_cfg_VOLATILEMASK 0x1F
#define core_link_status0_cfg_RESETMASK 0x1F
#define core_link_status0_cfg_DEFAULT 0x00000000

#define core_tx_control0_dp_READMASK 0xFFFF0F
#define core_tx_control0_dp_WRITEMASK 0xFFFF0F
#define core_tx_control0_dp_VOLATILEMASK 0x0
#define core_tx_control0_dp_RESETMASK 0xFFFF0F
#define core_tx_control0_dp_DEFAULT 0x00000000

#define core_tx_control0_bw_sample_timer_READMASK 0xFFFF
#define core_tx_control0_bw_sample_timer_WRITEMASK 0xFFFF
#define core_tx_control0_bw_sample_timer_VOLATILEMASK 0x0
#define core_tx_control0_bw_sample_timer_RESETMASK 0xFFFF
#define core_tx_control0_bw_sample_timer_DEFAULT 0x000000FF

#define core_tx_stats0_rd2clr_config_READMASK 0x3FFF
#define core_tx_stats0_rd2clr_config_WRITEMASK 0x3FFF
#define core_tx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define core_tx_stats0_rd2clr_config_RESETMASK 0x3FFF
#define core_tx_stats0_rd2clr_config_DEFAULT 0x00000000

#define core_tx_stats0_pfifo_READMASK 0xF
#define core_tx_stats0_pfifo_WRITEMASK 0x0
#define core_tx_stats0_pfifo_VOLATILEMASK 0xF
#define core_tx_stats0_pfifo_RESETMASK 0xF
#define core_tx_stats0_pfifo_DEFAULT 0x00000000

#define core_tx_stats0_nfifo_READMASK 0xF
#define core_tx_stats0_nfifo_WRITEMASK 0x0
#define core_tx_stats0_nfifo_VOLATILEMASK 0xF
#define core_tx_stats0_nfifo_RESETMASK 0xF
#define core_tx_stats0_nfifo_DEFAULT 0x00000000

#define core_tx_stats0_cmd_fifo_dcount_READMASK 0xFFFF
#define core_tx_stats0_cmd_fifo_dcount_WRITEMASK 0x0
#define core_tx_stats0_cmd_fifo_dcount_VOLATILEMASK 0xFFFF
#define core_tx_stats0_cmd_fifo_dcount_RESETMASK 0xFFFF
#define core_tx_stats0_cmd_fifo_dcount_DEFAULT 0x00000000

#define core_tx_stats0_data_pkt_nrtry_READMASK 0xFFFFFFFF
#define core_tx_stats0_data_pkt_nrtry_WRITEMASK 0x0
#define core_tx_stats0_data_pkt_nrtry_VOLATILEMASK 0xFFFFFFFF
#define core_tx_stats0_data_pkt_nrtry_RESETMASK 0xFFFFFFFF
#define core_tx_stats0_data_pkt_nrtry_DEFAULT 0x00000000

#define core_tx_stats0_data_pkt_rtry_READMASK 0xFFFFFFFF
#define core_tx_stats0_data_pkt_rtry_WRITEMASK 0x0
#define core_tx_stats0_data_pkt_rtry_VOLATILEMASK 0xFFFFFFFF
#define core_tx_stats0_data_pkt_rtry_RESETMASK 0xFFFFFFFF
#define core_tx_stats0_data_pkt_rtry_DEFAULT 0x00000000

#define core_tx_stats0_idle_READMASK 0xFF
#define core_tx_stats0_idle_WRITEMASK 0x0
#define core_tx_stats0_idle_VOLATILEMASK 0xFF
#define core_tx_stats0_idle_RESETMASK 0xFF
#define core_tx_stats0_idle_DEFAULT 0x00000000

#define core_tx_stats0_ts2_READMASK 0xFF
#define core_tx_stats0_ts2_WRITEMASK 0x0
#define core_tx_stats0_ts2_VOLATILEMASK 0xFF
#define core_tx_stats0_ts2_RESETMASK 0xFF
#define core_tx_stats0_ts2_DEFAULT 0x00000000

#define core_tx_stats0_ts1_READMASK 0xFF
#define core_tx_stats0_ts1_WRITEMASK 0x0
#define core_tx_stats0_ts1_VOLATILEMASK 0xFF
#define core_tx_stats0_ts1_RESETMASK 0xFF
#define core_tx_stats0_ts1_DEFAULT 0x00000000

#define core_tx_stats0_lbad_READMASK 0xFF
#define core_tx_stats0_lbad_WRITEMASK 0x0
#define core_tx_stats0_lbad_VOLATILEMASK 0xFF
#define core_tx_stats0_lbad_RESETMASK 0xFF
#define core_tx_stats0_lbad_DEFAULT 0x00000000

#define core_tx_stats0_lrtry_READMASK 0xFF
#define core_tx_stats0_lrtry_WRITEMASK 0x0
#define core_tx_stats0_lrtry_VOLATILEMASK 0xFF
#define core_tx_stats0_lrtry_RESETMASK 0xFF
#define core_tx_stats0_lrtry_DEFAULT 0x00000000

#define core_tx_stats0_lcrd_READMASK 0xFF
#define core_tx_stats0_lcrd_WRITEMASK 0x0
#define core_tx_stats0_lcrd_VOLATILEMASK 0xFF
#define core_tx_stats0_lcrd_RESETMASK 0xFF
#define core_tx_stats0_lcrd_DEFAULT 0x00000000

#define core_tx_stats0_lgood_READMASK 0xFFFFFFFF
#define core_tx_stats0_lgood_WRITEMASK 0x0
#define core_tx_stats0_lgood_VOLATILEMASK 0xFFFFFFFF
#define core_tx_stats0_lgood_RESETMASK 0xFFFFFFFF
#define core_tx_stats0_lgood_DEFAULT 0x00000000

#define core_tx_stats0_plu_READMASK 0xFF
#define core_tx_stats0_plu_WRITEMASK 0x0
#define core_tx_stats0_plu_VOLATILEMASK 0xFF
#define core_tx_stats0_plu_RESETMASK 0xFF
#define core_tx_stats0_plu_DEFAULT 0x00000000

#define core_tx_stats0_bandwidth_READMASK 0xFFFF
#define core_tx_stats0_bandwidth_WRITEMASK 0x0
#define core_tx_stats0_bandwidth_VOLATILEMASK 0xFFFF
#define core_tx_stats0_bandwidth_RESETMASK 0xFFFF
#define core_tx_stats0_bandwidth_DEFAULT 0x00000000

#define core_rx_control0_dp_READMASK 0xFFFF
#define core_rx_control0_dp_WRITEMASK 0xFFFF
#define core_rx_control0_dp_VOLATILEMASK 0x0
#define core_rx_control0_dp_RESETMASK 0xFFFF
#define core_rx_control0_dp_DEFAULT 0x00000000

#define core_rx_control0_rx_cmd_fifo_flc_READMASK 0xFFFFFFFF
#define core_rx_control0_rx_cmd_fifo_flc_WRITEMASK 0xFFFFFFFF
#define core_rx_control0_rx_cmd_fifo_flc_VOLATILEMASK 0x0
#define core_rx_control0_rx_cmd_fifo_flc_RESETMASK 0xFFFFFFFF
#define core_rx_control0_rx_cmd_fifo_flc_DEFAULT 0x00630001

#define core_rx_stats0_rd2clr_config_READMASK 0xFFF
#define core_rx_stats0_rd2clr_config_WRITEMASK 0xFFF
#define core_rx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define core_rx_stats0_rd2clr_config_RESETMASK 0xFFF
#define core_rx_stats0_rd2clr_config_DEFAULT 0x00000000

#define core_rx_stats0_cmd_fifo_dcount_READMASK 0xFFFF
#define core_rx_stats0_cmd_fifo_dcount_WRITEMASK 0x0
#define core_rx_stats0_cmd_fifo_dcount_VOLATILEMASK 0xFFFF
#define core_rx_stats0_cmd_fifo_dcount_RESETMASK 0xFFFF
#define core_rx_stats0_cmd_fifo_dcount_DEFAULT 0x00000000

#define core_rx_stats0_data_pkt_nrtry_READMASK 0xFFFFFFFF
#define core_rx_stats0_data_pkt_nrtry_WRITEMASK 0x0
#define core_rx_stats0_data_pkt_nrtry_VOLATILEMASK 0xFFFFFFFF
#define core_rx_stats0_data_pkt_nrtry_RESETMASK 0xFFFFFFFF
#define core_rx_stats0_data_pkt_nrtry_DEFAULT 0x00000000

#define core_rx_stats0_data_pkt_rtry_READMASK 0xFFFFFFFF
#define core_rx_stats0_data_pkt_rtry_WRITEMASK 0x0
#define core_rx_stats0_data_pkt_rtry_VOLATILEMASK 0xFFFFFFFF
#define core_rx_stats0_data_pkt_rtry_RESETMASK 0xFFFFFFFF
#define core_rx_stats0_data_pkt_rtry_DEFAULT 0x00000000

#define core_rx_stats0_idle_READMASK 0xFF
#define core_rx_stats0_idle_WRITEMASK 0x0
#define core_rx_stats0_idle_VOLATILEMASK 0xFF
#define core_rx_stats0_idle_RESETMASK 0xFF
#define core_rx_stats0_idle_DEFAULT 0x00000000

#define core_rx_stats0_ts2_READMASK 0xFF
#define core_rx_stats0_ts2_WRITEMASK 0x0
#define core_rx_stats0_ts2_VOLATILEMASK 0xFF
#define core_rx_stats0_ts2_RESETMASK 0xFF
#define core_rx_stats0_ts2_DEFAULT 0x00000000

#define core_rx_stats0_ts1_READMASK 0xFF
#define core_rx_stats0_ts1_WRITEMASK 0x0
#define core_rx_stats0_ts1_VOLATILEMASK 0xFF
#define core_rx_stats0_ts1_RESETMASK 0xFF
#define core_rx_stats0_ts1_DEFAULT 0x00000000

#define core_rx_stats0_lbad_READMASK 0xFF
#define core_rx_stats0_lbad_WRITEMASK 0x0
#define core_rx_stats0_lbad_VOLATILEMASK 0xFF
#define core_rx_stats0_lbad_RESETMASK 0xFF
#define core_rx_stats0_lbad_DEFAULT 0x00000000

#define core_rx_stats0_lrtry_READMASK 0xFF
#define core_rx_stats0_lrtry_WRITEMASK 0x0
#define core_rx_stats0_lrtry_VOLATILEMASK 0xFF
#define core_rx_stats0_lrtry_RESETMASK 0xFF
#define core_rx_stats0_lrtry_DEFAULT 0x00000000

#define core_rx_stats0_lcrd_READMASK 0xFF
#define core_rx_stats0_lcrd_WRITEMASK 0x0
#define core_rx_stats0_lcrd_VOLATILEMASK 0xFF
#define core_rx_stats0_lcrd_RESETMASK 0xFF
#define core_rx_stats0_lcrd_DEFAULT 0x00000000

#define core_rx_stats0_lgood_READMASK 0xFFFFFFFF
#define core_rx_stats0_lgood_WRITEMASK 0x0
#define core_rx_stats0_lgood_VOLATILEMASK 0xFFFFFFFF
#define core_rx_stats0_lgood_RESETMASK 0xFFFFFFFF
#define core_rx_stats0_lgood_DEFAULT 0x00000000

#define core_rx_stats0_plu_READMASK 0xFF
#define core_rx_stats0_plu_WRITEMASK 0x0
#define core_rx_stats0_plu_VOLATILEMASK 0xFF
#define core_rx_stats0_plu_RESETMASK 0xFF
#define core_rx_stats0_plu_DEFAULT 0x00000000

#define core_rx_stats0_rx_cmd_fifo_flc_READMASK 0xFF
#define core_rx_stats0_rx_cmd_fifo_flc_WRITEMASK 0x0
#define core_rx_stats0_rx_cmd_fifo_flc_VOLATILEMASK 0xFF
#define core_rx_stats0_rx_cmd_fifo_flc_RESETMASK 0xFF
#define core_rx_stats0_rx_cmd_fifo_flc_DEFAULT 0x00000000

#define core_irq0_enable_READMASK 0x3FFFF
#define core_irq0_enable_WRITEMASK 0x3FFFF
#define core_irq0_enable_VOLATILEMASK 0x0
#define core_irq0_enable_RESETMASK 0x3FFFF
#define core_irq0_enable_DEFAULT 0x00000000

#define core_irq0_pending_READMASK 0x3FFFF
#define core_irq0_pending_WRITEMASK 0x3FFFF
#define core_irq0_pending_VOLATILEMASK 0x3FFFF
#define core_irq0_pending_RESETMASK 0x3FFFF
#define core_irq0_pending_DEFAULT 0x00000000

#define core_irq0_pending_irq_READMASK 0x3FFFF
#define core_irq0_pending_irq_WRITEMASK 0x0
#define core_irq0_pending_irq_VOLATILEMASK 0x0
#define core_irq0_pending_irq_RESETMASK 0x3FFFF
#define core_irq0_pending_irq_DEFAULT 0x00000000

#define core_irq0_raw_READMASK 0x3FFFF
#define core_irq0_raw_WRITEMASK 0x0
#define core_irq0_raw_VOLATILEMASK 0x3FFFF
#define core_irq0_raw_RESETMASK 0x3FFFF
#define core_irq0_raw_DEFAULT 0x00000000

#define core_s_SIZE 0x100
#define core_version_SIZE 0x4
#define core_control0_SIZE 0x4
#define core_status0_SIZE 0x4
#define core_link_SIZE 0x38
#define core_link_control0_SIZE 0x34
#define core_link_control0_ltssm_pkt_mngt_pol_SIZE 0x4
#define core_link_control0_ltssm_pkt_mngt_rec_SIZE 0x4
#define core_link_control0_ltssm_pol_tmr_SIZE 0xC
#define core_link_control0_ltssm_pol_tmr_act_rpt_SIZE 0x4
#define core_link_control0_ltssm_pol_tmr_idle_rpt_SIZE 0x4
#define core_link_control0_ltssm_pol_tmr_idle_SIZE 0x4
#define core_link_control0_ltssm_rec_tmr_SIZE 0xC
#define core_link_control0_ltssm_rec_tmr_act_rpt_SIZE 0x4
#define core_link_control0_ltssm_rec_tmr_idle_rpt_SIZE 0x4
#define core_link_control0_ltssm_rec_tmr_idle_SIZE 0x4
#define core_link_control0_ltssm_u0_tmr_SIZE 0x10
#define core_link_control0_ltssm_u0_tmr_u0ltimeout_SIZE 0x4
#define core_link_control0_ltssm_u0_tmr_pnd_SIZE 0x4
#define core_link_control0_ltssm_u0_tmr_crd_SIZE 0x4
#define core_link_control0_ltssm_u0_tmr_u0rectimeout_SIZE 0x4
#define core_link_control0_test_SIZE 0x4
#define core_link_control0_test_latency_SIZE 0x4
#define core_link_status0_SIZE 0x4
#define core_link_status0_cfg_SIZE 0x4
#define core_tx_SIZE 0x44
#define core_tx_control0_SIZE 0x8
#define core_tx_control0_dp_SIZE 0x4
#define core_tx_control0_bw_sample_timer_SIZE 0x4
#define core_tx_stats0_SIZE 0x3C
#define core_tx_stats0_rd2clr_config_SIZE 0x4
#define core_tx_stats0_pfifo_SIZE 0x4
#define core_tx_stats0_nfifo_SIZE 0x4
#define core_tx_stats0_cmd_fifo_dcount_SIZE 0x4
#define core_tx_stats0_data_pkt_nrtry_SIZE 0x4
#define core_tx_stats0_data_pkt_rtry_SIZE 0x4
#define core_tx_stats0_idle_SIZE 0x4
#define core_tx_stats0_ts2_SIZE 0x4
#define core_tx_stats0_ts1_SIZE 0x4
#define core_tx_stats0_lbad_SIZE 0x4
#define core_tx_stats0_lrtry_SIZE 0x4
#define core_tx_stats0_lcrd_SIZE 0x4
#define core_tx_stats0_lgood_SIZE 0x4
#define core_tx_stats0_plu_SIZE 0x4
#define core_tx_stats0_bandwidth_SIZE 0x4
#define core_rx_SIZE 0x3C
#define core_rx_control0_SIZE 0x8
#define core_rx_control0_dp_SIZE 0x4
#define core_rx_control0_rx_cmd_fifo_flc_SIZE 0x4
#define core_rx_stats0_SIZE 0x34
#define core_rx_stats0_rd2clr_config_SIZE 0x4
#define core_rx_stats0_cmd_fifo_dcount_SIZE 0x4
#define core_rx_stats0_data_pkt_nrtry_SIZE 0x4
#define core_rx_stats0_data_pkt_rtry_SIZE 0x4
#define core_rx_stats0_idle_SIZE 0x4
#define core_rx_stats0_ts2_SIZE 0x4
#define core_rx_stats0_ts1_SIZE 0x4
#define core_rx_stats0_lbad_SIZE 0x4
#define core_rx_stats0_lrtry_SIZE 0x4
#define core_rx_stats0_lcrd_SIZE 0x4
#define core_rx_stats0_lgood_SIZE 0x4
#define core_rx_stats0_plu_SIZE 0x4
#define core_rx_stats0_rx_cmd_fifo_flc_SIZE 0x4
#define core_irq0_SIZE 0x10
#define core_irq0_enable_SIZE 0x4
#define core_irq0_pending_SIZE 0x4
#define core_irq0_pending_irq_SIZE 0x4
#define core_irq0_raw_SIZE 0x4

#define core_s_OFFSET 0x0
#define core_version_OFFSET 0x0
#define core_control0_OFFSET 0x4
#define core_status0_OFFSET 0x8
#define core_link_OFFSET 0xC
#define core_link_control0_OFFSET 0x0
#define core_link_control0_ltssm_pkt_mngt_pol_OFFSET 0x0
#define core_link_control0_ltssm_pkt_mngt_rec_OFFSET 0x4
#define core_link_control0_ltssm_pol_tmr_OFFSET 0x8
#define core_link_control0_ltssm_pol_tmr_act_rpt_OFFSET 0x0
#define core_link_control0_ltssm_pol_tmr_idle_rpt_OFFSET 0x4
#define core_link_control0_ltssm_pol_tmr_idle_OFFSET 0x8
#define core_link_control0_ltssm_rec_tmr_OFFSET 0x14
#define core_link_control0_ltssm_rec_tmr_act_rpt_OFFSET 0x0
#define core_link_control0_ltssm_rec_tmr_idle_rpt_OFFSET 0x4
#define core_link_control0_ltssm_rec_tmr_idle_OFFSET 0x8
#define core_link_control0_ltssm_u0_tmr_OFFSET 0x20
#define core_link_control0_ltssm_u0_tmr_u0ltimeout_OFFSET 0x0
#define core_link_control0_ltssm_u0_tmr_pnd_OFFSET 0x4
#define core_link_control0_ltssm_u0_tmr_crd_OFFSET 0x8
#define core_link_control0_ltssm_u0_tmr_u0rectimeout_OFFSET 0xC
#define core_link_control0_test_OFFSET 0x30
#define core_link_control0_test_latency_OFFSET 0x0
#define core_link_status0_OFFSET 0x34
#define core_link_status0_cfg_OFFSET 0x0
#define core_tx_OFFSET 0x44
#define core_tx_control0_OFFSET 0x0
#define core_tx_control0_dp_OFFSET 0x0
#define core_tx_control0_bw_sample_timer_OFFSET 0x4
#define core_tx_stats0_OFFSET 0x8
#define core_tx_stats0_rd2clr_config_OFFSET 0x0
#define core_tx_stats0_pfifo_OFFSET 0x4
#define core_tx_stats0_nfifo_OFFSET 0x8
#define core_tx_stats0_cmd_fifo_dcount_OFFSET 0xC
#define core_tx_stats0_data_pkt_nrtry_OFFSET 0x10
#define core_tx_stats0_data_pkt_rtry_OFFSET 0x14
#define core_tx_stats0_idle_OFFSET 0x18
#define core_tx_stats0_ts2_OFFSET 0x1C
#define core_tx_stats0_ts1_OFFSET 0x20
#define core_tx_stats0_lbad_OFFSET 0x24
#define core_tx_stats0_lrtry_OFFSET 0x28
#define core_tx_stats0_lcrd_OFFSET 0x2C
#define core_tx_stats0_lgood_OFFSET 0x30
#define core_tx_stats0_plu_OFFSET 0x34
#define core_tx_stats0_bandwidth_OFFSET 0x38
#define core_rx_OFFSET 0x88
#define core_rx_control0_OFFSET 0x0
#define core_rx_control0_dp_OFFSET 0x0
#define core_rx_control0_rx_cmd_fifo_flc_OFFSET 0x4
#define core_rx_stats0_OFFSET 0x8
#define core_rx_stats0_rd2clr_config_OFFSET 0x0
#define core_rx_stats0_cmd_fifo_dcount_OFFSET 0x4
#define core_rx_stats0_data_pkt_nrtry_OFFSET 0x8
#define core_rx_stats0_data_pkt_rtry_OFFSET 0xC
#define core_rx_stats0_idle_OFFSET 0x10
#define core_rx_stats0_ts2_OFFSET 0x14
#define core_rx_stats0_ts1_OFFSET 0x18
#define core_rx_stats0_lbad_OFFSET 0x1C
#define core_rx_stats0_lrtry_OFFSET 0x20
#define core_rx_stats0_lcrd_OFFSET 0x24
#define core_rx_stats0_lgood_OFFSET 0x28
#define core_rx_stats0_plu_OFFSET 0x2C
#define core_rx_stats0_rx_cmd_fifo_flc_OFFSET 0x30
#define core_irq0_OFFSET 0xC4
#define core_irq0_enable_OFFSET 0x0
#define core_irq0_pending_OFFSET 0x4
#define core_irq0_pending_irq_OFFSET 0x8
#define core_irq0_raw_OFFSET 0xC

#define core_s_ADDRESS 0x000
#define core_version_ADDRESS 0x000
#define core_control0_ADDRESS 0x004
#define core_status0_ADDRESS 0x008
#define core_link_ADDRESS 0x00C
#define core_link_control0_ADDRESS 0x00C
#define core_link_control0_ltssm_pkt_mngt_pol_ADDRESS 0x00C
#define core_link_control0_ltssm_pkt_mngt_rec_ADDRESS 0x010
#define core_link_control0_ltssm_pol_tmr_ADDRESS 0x014
#define core_link_control0_ltssm_pol_tmr_act_rpt_ADDRESS 0x014
#define core_link_control0_ltssm_pol_tmr_idle_rpt_ADDRESS 0x018
#define core_link_control0_ltssm_pol_tmr_idle_ADDRESS 0x01C
#define core_link_control0_ltssm_rec_tmr_ADDRESS 0x020
#define core_link_control0_ltssm_rec_tmr_act_rpt_ADDRESS 0x020
#define core_link_control0_ltssm_rec_tmr_idle_rpt_ADDRESS 0x024
#define core_link_control0_ltssm_rec_tmr_idle_ADDRESS 0x028
#define core_link_control0_ltssm_u0_tmr_ADDRESS 0x02C
#define core_link_control0_ltssm_u0_tmr_u0ltimeout_ADDRESS 0x02C
#define core_link_control0_ltssm_u0_tmr_pnd_ADDRESS 0x030
#define core_link_control0_ltssm_u0_tmr_crd_ADDRESS 0x034
#define core_link_control0_ltssm_u0_tmr_u0rectimeout_ADDRESS 0x038
#define core_link_control0_test_ADDRESS 0x03C
#define core_link_control0_test_latency_ADDRESS 0x03C
#define core_link_status0_ADDRESS 0x040
#define core_link_status0_cfg_ADDRESS 0x040
#define core_tx_ADDRESS 0x044
#define core_tx_control0_ADDRESS 0x044
#define core_tx_control0_dp_ADDRESS 0x044
#define core_tx_control0_bw_sample_timer_ADDRESS 0x048
#define core_tx_stats0_ADDRESS 0x04C
#define core_tx_stats0_rd2clr_config_ADDRESS 0x04C
#define core_tx_stats0_pfifo_ADDRESS 0x050
#define core_tx_stats0_nfifo_ADDRESS 0x054
#define core_tx_stats0_cmd_fifo_dcount_ADDRESS 0x058
#define core_tx_stats0_data_pkt_nrtry_ADDRESS 0x05C
#define core_tx_stats0_data_pkt_rtry_ADDRESS 0x060
#define core_tx_stats0_idle_ADDRESS 0x064
#define core_tx_stats0_ts2_ADDRESS 0x068
#define core_tx_stats0_ts1_ADDRESS 0x06C
#define core_tx_stats0_lbad_ADDRESS 0x070
#define core_tx_stats0_lrtry_ADDRESS 0x074
#define core_tx_stats0_lcrd_ADDRESS 0x078
#define core_tx_stats0_lgood_ADDRESS 0x07C
#define core_tx_stats0_plu_ADDRESS 0x080
#define core_tx_stats0_bandwidth_ADDRESS 0x084
#define core_rx_ADDRESS 0x088
#define core_rx_control0_ADDRESS 0x088
#define core_rx_control0_dp_ADDRESS 0x088
#define core_rx_control0_rx_cmd_fifo_flc_ADDRESS 0x08C
#define core_rx_stats0_ADDRESS 0x090
#define core_rx_stats0_rd2clr_config_ADDRESS 0x090
#define core_rx_stats0_cmd_fifo_dcount_ADDRESS 0x094
#define core_rx_stats0_data_pkt_nrtry_ADDRESS 0x098
#define core_rx_stats0_data_pkt_rtry_ADDRESS 0x09C
#define core_rx_stats0_idle_ADDRESS 0x0A0
#define core_rx_stats0_ts2_ADDRESS 0x0A4
#define core_rx_stats0_ts1_ADDRESS 0x0A8
#define core_rx_stats0_lbad_ADDRESS 0x0AC
#define core_rx_stats0_lrtry_ADDRESS 0x0B0
#define core_rx_stats0_lcrd_ADDRESS 0x0B4
#define core_rx_stats0_lgood_ADDRESS 0x0B8
#define core_rx_stats0_plu_ADDRESS 0x0BC
#define core_rx_stats0_rx_cmd_fifo_flc_ADDRESS 0x0C0
#define core_irq0_ADDRESS 0x0C4
#define core_irq0_enable_ADDRESS 0x0C4
#define core_irq0_pending_ADDRESS 0x0C8
#define core_irq0_pending_irq_ADDRESS 0x0CC
#define core_irq0_raw_ADDRESS 0x0D0
#define CORE_VERSION_MAJOR_OFFSET 16
#define CORE_VERSION_MAJOR_MASK 0xFF0000
#define CORE_VERSION_MINOR_OFFSET 8
#define CORE_VERSION_MINOR_MASK 0xFF00
#define CORE_VERSION_PATCH_OFFSET 0
#define CORE_VERSION_PATCH_MASK 0xFF
#define CORE_CONTROL0_DP_RX_EN_OFFSET 1
#define CORE_CONTROL0_DP_RX_EN_MASK 0x2
#define CORE_CONTROL0_DP_RX_EN 0x2
#define CORE_CONTROL0_DP_TX_EN_OFFSET 0
#define CORE_CONTROL0_DP_TX_EN_MASK 0x1
#define CORE_CONTROL0_DP_TX_EN 0x1
#define CORE_STATUS0_DP_RX_READY_OFFSET 1
#define CORE_STATUS0_DP_RX_READY_MASK 0x2
#define CORE_STATUS0_DP_RX_READY 0x2
#define CORE_STATUS0_DP_TX_READY_OFFSET 0
#define CORE_STATUS0_DP_TX_READY_MASK 0x1
#define CORE_STATUS0_DP_TX_READY 0x1
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_IDL_EN_MIN_OFFSET 20
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_IDL_EN_MIN_MASK 0xF00000
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_TX_IDL_MIN_OFFSET 16
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_TX_IDL_MIN_MASK 0xF0000
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_IDL_MIN_OFFSET 12
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_IDL_MIN_MASK 0xF000
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_TS1_EN_MIN_OFFSET 8
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_TS1_EN_MIN_MASK 0xF00
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_TX_TS1_MIN_OFFSET 4
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_TX_TS1_MIN_MASK 0xF0
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_TS1_MIN_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_TS1_MIN_MASK 0xF
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_IDL_EN_MAX_LMT_OFFSET 20
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_IDL_EN_MAX_LMT_MASK 0xF00000
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_TX_IDL_MAX_LMT_OFFSET 16
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_TX_IDL_MAX_LMT_MASK 0xF0000
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_IDL_MAX_LMT_OFFSET 12
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_IDL_MAX_LMT_MASK 0xF000
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_TS2_EN_MAX_LMT_OFFSET 8
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_TS2_EN_MAX_LMT_MASK 0xF00
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_TX_TS2_MAX_LMT_OFFSET 4
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_TX_TS2_MAX_LMT_MASK 0xF0
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_TS2_MAX_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_TS2_MAX_LMT_MASK 0xF
#define CORE_LINK_CONTROL0_LTSSM_POL_TMR_ACT_RPT_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_POL_TMR_ACT_RPT_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_CONTROL0_LTSSM_POL_TMR_IDLE_RPT_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_POL_TMR_IDLE_RPT_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_CONTROL0_LTSSM_POL_TMR_IDLE_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_POL_TMR_IDLE_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_CONTROL0_LTSSM_REC_TMR_ACT_RPT_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_REC_TMR_ACT_RPT_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_CONTROL0_LTSSM_REC_TMR_IDLE_RPT_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_REC_TMR_IDLE_RPT_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_CONTROL0_LTSSM_REC_TMR_IDLE_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_REC_TMR_IDLE_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_CONTROL0_LTSSM_U0_TMR_U0LTIMEOUT_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_U0_TMR_U0LTIMEOUT_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_CONTROL0_LTSSM_U0_TMR_PND_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_U0_TMR_PND_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_CONTROL0_LTSSM_U0_TMR_CRD_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_U0_TMR_CRD_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_CONTROL0_LTSSM_U0_TMR_U0RECTIMEOUT_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_LTSSM_U0_TMR_U0RECTIMEOUT_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_CONTROL0_TEST_LATENCY_LMT_OFFSET 0
#define CORE_LINK_CONTROL0_TEST_LATENCY_LMT_MASK 0xFFFFFFFF
#define CORE_LINK_STATUS0_CFG_ACTIVE_CHANNELS_OFFSET 0
#define CORE_LINK_STATUS0_CFG_ACTIVE_CHANNELS_MASK 0x1F
#define CORE_TX_CONTROL0_DP_STATS_CHID_EN_OFFSET 8
#define CORE_TX_CONTROL0_DP_STATS_CHID_EN_MASK 0xFFFF00
#define CORE_TX_CONTROL0_DP_BW_PKT_TYPE_OFFSET 0
#define CORE_TX_CONTROL0_DP_BW_PKT_TYPE_MASK 0xF
#define CORE_TX_CONTROL0_BW_SAMPLE_TIMER_CNT_OFFSET 0
#define CORE_TX_CONTROL0_BW_SAMPLE_TIMER_CNT_MASK 0xFFFF
#define CORE_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH_OFFSET 13
#define CORE_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH_MASK 0x2000
#define CORE_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH 0x2000
#define CORE_TX_STATS0_RD2CLR_CONFIG_PLU_OFFSET 12
#define CORE_TX_STATS0_RD2CLR_CONFIG_PLU_MASK 0x1000
#define CORE_TX_STATS0_RD2CLR_CONFIG_PLU 0x1000
#define CORE_TX_STATS0_RD2CLR_CONFIG_LGOOD_OFFSET 11
#define CORE_TX_STATS0_RD2CLR_CONFIG_LGOOD_MASK 0x800
#define CORE_TX_STATS0_RD2CLR_CONFIG_LGOOD 0x800
#define CORE_TX_STATS0_RD2CLR_CONFIG_LCRD_OFFSET 10
#define CORE_TX_STATS0_RD2CLR_CONFIG_LCRD_MASK 0x400
#define CORE_TX_STATS0_RD2CLR_CONFIG_LCRD 0x400
#define CORE_TX_STATS0_RD2CLR_CONFIG_LRTRY_OFFSET 9
#define CORE_TX_STATS0_RD2CLR_CONFIG_LRTRY_MASK 0x200
#define CORE_TX_STATS0_RD2CLR_CONFIG_LRTRY 0x200
#define CORE_TX_STATS0_RD2CLR_CONFIG_LBAD_OFFSET 8
#define CORE_TX_STATS0_RD2CLR_CONFIG_LBAD_MASK 0x100
#define CORE_TX_STATS0_RD2CLR_CONFIG_LBAD 0x100
#define CORE_TX_STATS0_RD2CLR_CONFIG_TS1_OFFSET 7
#define CORE_TX_STATS0_RD2CLR_CONFIG_TS1_MASK 0x80
#define CORE_TX_STATS0_RD2CLR_CONFIG_TS1 0x80
#define CORE_TX_STATS0_RD2CLR_CONFIG_TS2_OFFSET 6
#define CORE_TX_STATS0_RD2CLR_CONFIG_TS2_MASK 0x40
#define CORE_TX_STATS0_RD2CLR_CONFIG_TS2 0x40
#define CORE_TX_STATS0_RD2CLR_CONFIG_IDLE_OFFSET 5
#define CORE_TX_STATS0_RD2CLR_CONFIG_IDLE_MASK 0x20
#define CORE_TX_STATS0_RD2CLR_CONFIG_IDLE 0x20
#define CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY_OFFSET 4
#define CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY_MASK 0x10
#define CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY 0x10
#define CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY_OFFSET 3
#define CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY_MASK 0x8
#define CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY 0x8
#define CORE_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT_OFFSET 2
#define CORE_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT_MASK 0x4
#define CORE_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT 0x4
#define CORE_TX_STATS0_RD2CLR_CONFIG_NFIFO_OFFSET 1
#define CORE_TX_STATS0_RD2CLR_CONFIG_NFIFO_MASK 0x2
#define CORE_TX_STATS0_RD2CLR_CONFIG_NFIFO 0x2
#define CORE_TX_STATS0_RD2CLR_CONFIG_PFIFO_OFFSET 0
#define CORE_TX_STATS0_RD2CLR_CONFIG_PFIFO_MASK 0x1
#define CORE_TX_STATS0_RD2CLR_CONFIG_PFIFO 0x1
#define CORE_TX_STATS0_PFIFO_CNT_OFFSET 0
#define CORE_TX_STATS0_PFIFO_CNT_MASK 0xF
#define CORE_TX_STATS0_NFIFO_CNT_OFFSET 0
#define CORE_TX_STATS0_NFIFO_CNT_MASK 0xF
#define CORE_TX_STATS0_CMD_FIFO_DCOUNT_CNT_OFFSET 0
#define CORE_TX_STATS0_CMD_FIFO_DCOUNT_CNT_MASK 0xFFFF
#define CORE_TX_STATS0_DATA_PKT_NRTRY_CNT_OFFSET 0
#define CORE_TX_STATS0_DATA_PKT_NRTRY_CNT_MASK 0xFFFFFFFF
#define CORE_TX_STATS0_DATA_PKT_RTRY_CNT_OFFSET 0
#define CORE_TX_STATS0_DATA_PKT_RTRY_CNT_MASK 0xFFFFFFFF
#define CORE_TX_STATS0_IDLE_CNT_OFFSET 0
#define CORE_TX_STATS0_IDLE_CNT_MASK 0xFF
#define CORE_TX_STATS0_TS2_CNT_OFFSET 0
#define CORE_TX_STATS0_TS2_CNT_MASK 0xFF
#define CORE_TX_STATS0_TS1_CNT_OFFSET 0
#define CORE_TX_STATS0_TS1_CNT_MASK 0xFF
#define CORE_TX_STATS0_LBAD_CNT_OFFSET 0
#define CORE_TX_STATS0_LBAD_CNT_MASK 0xFF
#define CORE_TX_STATS0_LRTRY_CNT_OFFSET 0
#define CORE_TX_STATS0_LRTRY_CNT_MASK 0xFF
#define CORE_TX_STATS0_LCRD_CNT_OFFSET 0
#define CORE_TX_STATS0_LCRD_CNT_MASK 0xFF
#define CORE_TX_STATS0_LGOOD_CNT_OFFSET 0
#define CORE_TX_STATS0_LGOOD_CNT_MASK 0xFFFFFFFF
#define CORE_TX_STATS0_PLU_CNT_OFFSET 0
#define CORE_TX_STATS0_PLU_CNT_MASK 0xFF
#define CORE_TX_STATS0_BANDWIDTH_CNT_OFFSET 0
#define CORE_TX_STATS0_BANDWIDTH_CNT_MASK 0xFFFF
#define CORE_RX_CONTROL0_DP_STATS_CHID_EN_OFFSET 0
#define CORE_RX_CONTROL0_DP_STATS_CHID_EN_MASK 0xFFFF
#define CORE_RX_CONTROL0_RX_CMD_FIFO_FLC_HI_OFFSET 16
#define CORE_RX_CONTROL0_RX_CMD_FIFO_FLC_HI_MASK 0xFFFF0000
#define CORE_RX_CONTROL0_RX_CMD_FIFO_FLC_LO_OFFSET 0
#define CORE_RX_CONTROL0_RX_CMD_FIFO_FLC_LO_MASK 0xFFFF
#define CORE_RX_STATS0_RD2CLR_CONFIG_RX_CMD_FIFO_FLC_OFFSET 11
#define CORE_RX_STATS0_RD2CLR_CONFIG_RX_CMD_FIFO_FLC_MASK 0x800
#define CORE_RX_STATS0_RD2CLR_CONFIG_RX_CMD_FIFO_FLC 0x800
#define CORE_RX_STATS0_RD2CLR_CONFIG_PLU_OFFSET 10
#define CORE_RX_STATS0_RD2CLR_CONFIG_PLU_MASK 0x400
#define CORE_RX_STATS0_RD2CLR_CONFIG_PLU 0x400
#define CORE_RX_STATS0_RD2CLR_CONFIG_LGOOD_OFFSET 9
#define CORE_RX_STATS0_RD2CLR_CONFIG_LGOOD_MASK 0x200
#define CORE_RX_STATS0_RD2CLR_CONFIG_LGOOD 0x200
#define CORE_RX_STATS0_RD2CLR_CONFIG_LCRD_OFFSET 8
#define CORE_RX_STATS0_RD2CLR_CONFIG_LCRD_MASK 0x100
#define CORE_RX_STATS0_RD2CLR_CONFIG_LCRD 0x100
#define CORE_RX_STATS0_RD2CLR_CONFIG_LRTRY_OFFSET 7
#define CORE_RX_STATS0_RD2CLR_CONFIG_LRTRY_MASK 0x80
#define CORE_RX_STATS0_RD2CLR_CONFIG_LRTRY 0x80
#define CORE_RX_STATS0_RD2CLR_CONFIG_LBAD_OFFSET 6
#define CORE_RX_STATS0_RD2CLR_CONFIG_LBAD_MASK 0x40
#define CORE_RX_STATS0_RD2CLR_CONFIG_LBAD 0x40
#define CORE_RX_STATS0_RD2CLR_CONFIG_TS1_OFFSET 5
#define CORE_RX_STATS0_RD2CLR_CONFIG_TS1_MASK 0x20
#define CORE_RX_STATS0_RD2CLR_CONFIG_TS1 0x20
#define CORE_RX_STATS0_RD2CLR_CONFIG_TS2_OFFSET 4
#define CORE_RX_STATS0_RD2CLR_CONFIG_TS2_MASK 0x10
#define CORE_RX_STATS0_RD2CLR_CONFIG_TS2 0x10
#define CORE_RX_STATS0_RD2CLR_CONFIG_IDLE_OFFSET 3
#define CORE_RX_STATS0_RD2CLR_CONFIG_IDLE_MASK 0x8
#define CORE_RX_STATS0_RD2CLR_CONFIG_IDLE 0x8
#define CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY_OFFSET 2
#define CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY_MASK 0x4
#define CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY 0x4
#define CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY_OFFSET 1
#define CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY_MASK 0x2
#define CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY 0x2
#define CORE_RX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT_OFFSET 0
#define CORE_RX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT_MASK 0x1
#define CORE_RX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT 0x1
#define CORE_RX_STATS0_CMD_FIFO_DCOUNT_CNT_OFFSET 0
#define CORE_RX_STATS0_CMD_FIFO_DCOUNT_CNT_MASK 0xFFFF
#define CORE_RX_STATS0_DATA_PKT_NRTRY_CNT_OFFSET 0
#define CORE_RX_STATS0_DATA_PKT_NRTRY_CNT_MASK 0xFFFFFFFF
#define CORE_RX_STATS0_DATA_PKT_RTRY_CNT_OFFSET 0
#define CORE_RX_STATS0_DATA_PKT_RTRY_CNT_MASK 0xFFFFFFFF
#define CORE_RX_STATS0_IDLE_CNT_OFFSET 0
#define CORE_RX_STATS0_IDLE_CNT_MASK 0xFF
#define CORE_RX_STATS0_TS2_CNT_OFFSET 0
#define CORE_RX_STATS0_TS2_CNT_MASK 0xFF
#define CORE_RX_STATS0_TS1_CNT_OFFSET 0
#define CORE_RX_STATS0_TS1_CNT_MASK 0xFF
#define CORE_RX_STATS0_LBAD_CNT_OFFSET 0
#define CORE_RX_STATS0_LBAD_CNT_MASK 0xFF
#define CORE_RX_STATS0_LRTRY_CNT_OFFSET 0
#define CORE_RX_STATS0_LRTRY_CNT_MASK 0xFF
#define CORE_RX_STATS0_LCRD_CNT_OFFSET 0
#define CORE_RX_STATS0_LCRD_CNT_MASK 0xFF
#define CORE_RX_STATS0_LGOOD_CNT_OFFSET 0
#define CORE_RX_STATS0_LGOOD_CNT_MASK 0xFFFFFFFF
#define CORE_RX_STATS0_PLU_CNT_OFFSET 0
#define CORE_RX_STATS0_PLU_CNT_MASK 0xFF
#define CORE_RX_STATS0_RX_CMD_FIFO_FLC_CNT_OFFSET 0
#define CORE_RX_STATS0_RX_CMD_FIFO_FLC_CNT_MASK 0xFF
#define CORE_IRQ0_ENABLE_RX_DP_GRD_SOP_ERR_OFFSET 17
#define CORE_IRQ0_ENABLE_RX_DP_GRD_SOP_ERR_MASK 0x20000
#define CORE_IRQ0_ENABLE_RX_DP_GRD_SOP_ERR 0x20000
#define CORE_IRQ0_ENABLE_RX_DP_GRD_EOP_ERR_OFFSET 16
#define CORE_IRQ0_ENABLE_RX_DP_GRD_EOP_ERR_MASK 0x10000
#define CORE_IRQ0_ENABLE_RX_DP_GRD_EOP_ERR 0x10000
#define CORE_IRQ0_ENABLE_RX_DP_GRD_MAX_ERR_OFFSET 15
#define CORE_IRQ0_ENABLE_RX_DP_GRD_MAX_ERR_MASK 0x8000
#define CORE_IRQ0_ENABLE_RX_DP_GRD_MAX_ERR 0x8000
#define CORE_IRQ0_ENABLE_RX_LNK_CMD_FIFO_FULL_ERR_OFFSET 14
#define CORE_IRQ0_ENABLE_RX_LNK_CMD_FIFO_FULL_ERR_MASK 0x4000
#define CORE_IRQ0_ENABLE_RX_LNK_CMD_FIFO_FULL_ERR 0x4000
#define CORE_IRQ0_ENABLE_TX_LNK_CMD_FIFO_FULL_ERR_OFFSET 13
#define CORE_IRQ0_ENABLE_TX_LNK_CMD_FIFO_FULL_ERR_MASK 0x2000
#define CORE_IRQ0_ENABLE_TX_LNK_CMD_FIFO_FULL_ERR 0x2000
#define CORE_IRQ0_ENABLE_TX_DP_GRD_SOP_ERR_OFFSET 12
#define CORE_IRQ0_ENABLE_TX_DP_GRD_SOP_ERR_MASK 0x1000
#define CORE_IRQ0_ENABLE_TX_DP_GRD_SOP_ERR 0x1000
#define CORE_IRQ0_ENABLE_TX_DP_GRD_EOP_ERR_OFFSET 11
#define CORE_IRQ0_ENABLE_TX_DP_GRD_EOP_ERR_MASK 0x800
#define CORE_IRQ0_ENABLE_TX_DP_GRD_EOP_ERR 0x800
#define CORE_IRQ0_ENABLE_TX_DP_GRD_MAX_ERR_OFFSET 10
#define CORE_IRQ0_ENABLE_TX_DP_GRD_MAX_ERR_MASK 0x400
#define CORE_IRQ0_ENABLE_TX_DP_GRD_MAX_ERR 0x400
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_WR_OFFSET 9
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_WR_MASK 0x200
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_WR 0x200
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_RD_OFFSET 8
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_RD_MASK 0x100
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_RD 0x100
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_SOP_ERR_OFFSET 7
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_SOP_ERR_MASK 0x80
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_SOP_ERR 0x80
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_ERR_OFFSET 6
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_ERR_MASK 0x40
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_ERR 0x40
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_FULL_ERR_OFFSET 5
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_FULL_ERR_MASK 0x20
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_FULL_ERR 0x20
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_MAX_SZ_ERR_OFFSET 4
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_MAX_SZ_ERR_MASK 0x10
#define CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_MAX_SZ_ERR 0x10
#define CORE_IRQ0_ENABLE_FIFO_DRP_PKT_OFFSET 3
#define CORE_IRQ0_ENABLE_FIFO_DRP_PKT_MASK 0x8
#define CORE_IRQ0_ENABLE_FIFO_DRP_PKT 0x8
#define CORE_IRQ0_ENABLE_DP_READY_OFFSET 2
#define CORE_IRQ0_ENABLE_DP_READY_MASK 0x4
#define CORE_IRQ0_ENABLE_DP_READY 0x4
#define CORE_IRQ0_ENABLE_DP_RX_READY_OFFSET 1
#define CORE_IRQ0_ENABLE_DP_RX_READY_MASK 0x2
#define CORE_IRQ0_ENABLE_DP_RX_READY 0x2
#define CORE_IRQ0_ENABLE_DP_TX_READY_OFFSET 0
#define CORE_IRQ0_ENABLE_DP_TX_READY_MASK 0x1
#define CORE_IRQ0_ENABLE_DP_TX_READY 0x1
#define CORE_IRQ0_PENDING_RX_DP_GRD_SOP_ERR_OFFSET 17
#define CORE_IRQ0_PENDING_RX_DP_GRD_SOP_ERR_MASK 0x20000
#define CORE_IRQ0_PENDING_RX_DP_GRD_SOP_ERR 0x20000
#define CORE_IRQ0_PENDING_RX_DP_GRD_EOP_ERR_OFFSET 16
#define CORE_IRQ0_PENDING_RX_DP_GRD_EOP_ERR_MASK 0x10000
#define CORE_IRQ0_PENDING_RX_DP_GRD_EOP_ERR 0x10000
#define CORE_IRQ0_PENDING_RX_DP_GRD_MAX_ERR_OFFSET 15
#define CORE_IRQ0_PENDING_RX_DP_GRD_MAX_ERR_MASK 0x8000
#define CORE_IRQ0_PENDING_RX_DP_GRD_MAX_ERR 0x8000
#define CORE_IRQ0_PENDING_RX_LNK_CMD_FIFO_FULL_ERR_OFFSET 14
#define CORE_IRQ0_PENDING_RX_LNK_CMD_FIFO_FULL_ERR_MASK 0x4000
#define CORE_IRQ0_PENDING_RX_LNK_CMD_FIFO_FULL_ERR 0x4000
#define CORE_IRQ0_PENDING_TX_LNK_CMD_FIFO_FULL_ERR_OFFSET 13
#define CORE_IRQ0_PENDING_TX_LNK_CMD_FIFO_FULL_ERR_MASK 0x2000
#define CORE_IRQ0_PENDING_TX_LNK_CMD_FIFO_FULL_ERR 0x2000
#define CORE_IRQ0_PENDING_TX_DP_GRD_SOP_ERR_OFFSET 12
#define CORE_IRQ0_PENDING_TX_DP_GRD_SOP_ERR_MASK 0x1000
#define CORE_IRQ0_PENDING_TX_DP_GRD_SOP_ERR 0x1000
#define CORE_IRQ0_PENDING_TX_DP_GRD_EOP_ERR_OFFSET 11
#define CORE_IRQ0_PENDING_TX_DP_GRD_EOP_ERR_MASK 0x800
#define CORE_IRQ0_PENDING_TX_DP_GRD_EOP_ERR 0x800
#define CORE_IRQ0_PENDING_TX_DP_GRD_MAX_ERR_OFFSET 10
#define CORE_IRQ0_PENDING_TX_DP_GRD_MAX_ERR_MASK 0x400
#define CORE_IRQ0_PENDING_TX_DP_GRD_MAX_ERR 0x400
#define CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_WR_OFFSET 9
#define CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_WR_MASK 0x200
#define CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_WR 0x200
#define CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_RD_OFFSET 8
#define CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_RD_MASK 0x100
#define CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_RD 0x100
#define CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_SOP_ERR_OFFSET 7
#define CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_SOP_ERR_MASK 0x80
#define CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_SOP_ERR 0x80
#define CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_ERR_OFFSET 6
#define CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_ERR_MASK 0x40
#define CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_ERR 0x40
#define CORE_IRQ0_PENDING_TX_DP_FIFO_FULL_ERR_OFFSET 5
#define CORE_IRQ0_PENDING_TX_DP_FIFO_FULL_ERR_MASK 0x20
#define CORE_IRQ0_PENDING_TX_DP_FIFO_FULL_ERR 0x20
#define CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_MAX_SZ_ERR_OFFSET 4
#define CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_MAX_SZ_ERR_MASK 0x10
#define CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_MAX_SZ_ERR 0x10
#define CORE_IRQ0_PENDING_FIFO_DRP_PKT_OFFSET 3
#define CORE_IRQ0_PENDING_FIFO_DRP_PKT_MASK 0x8
#define CORE_IRQ0_PENDING_FIFO_DRP_PKT 0x8
#define CORE_IRQ0_PENDING_DP_READY_OFFSET 2
#define CORE_IRQ0_PENDING_DP_READY_MASK 0x4
#define CORE_IRQ0_PENDING_DP_READY 0x4
#define CORE_IRQ0_PENDING_DP_RX_READY_OFFSET 1
#define CORE_IRQ0_PENDING_DP_RX_READY_MASK 0x2
#define CORE_IRQ0_PENDING_DP_RX_READY 0x2
#define CORE_IRQ0_PENDING_DP_TX_READY_OFFSET 0
#define CORE_IRQ0_PENDING_DP_TX_READY_MASK 0x1
#define CORE_IRQ0_PENDING_DP_TX_READY 0x1
#define CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_SOP_ERR_OFFSET 17
#define CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_SOP_ERR_MASK 0x20000
#define CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_SOP_ERR 0x20000
#define CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_EOP_ERR_OFFSET 16
#define CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_EOP_ERR_MASK 0x10000
#define CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_EOP_ERR 0x10000
#define CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_MAX_ERR_OFFSET 15
#define CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_MAX_ERR_MASK 0x8000
#define CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_MAX_ERR 0x8000
#define CORE_IRQ0_PENDING_IRQ_RX_LNK_CMD_FIFO_FULL_ERR_OFFSET 14
#define CORE_IRQ0_PENDING_IRQ_RX_LNK_CMD_FIFO_FULL_ERR_MASK 0x4000
#define CORE_IRQ0_PENDING_IRQ_RX_LNK_CMD_FIFO_FULL_ERR 0x4000
#define CORE_IRQ0_PENDING_IRQ_TX_LNK_CMD_FIFO_FULL_ERR_OFFSET 13
#define CORE_IRQ0_PENDING_IRQ_TX_LNK_CMD_FIFO_FULL_ERR_MASK 0x2000
#define CORE_IRQ0_PENDING_IRQ_TX_LNK_CMD_FIFO_FULL_ERR 0x2000
#define CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_SOP_ERR_OFFSET 12
#define CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_SOP_ERR_MASK 0x1000
#define CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_SOP_ERR 0x1000
#define CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_EOP_ERR_OFFSET 11
#define CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_EOP_ERR_MASK 0x800
#define CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_EOP_ERR 0x800
#define CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_MAX_ERR_OFFSET 10
#define CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_MAX_ERR_MASK 0x400
#define CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_MAX_ERR 0x400
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_WR_OFFSET 9
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_WR_MASK 0x200
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_WR 0x200
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_RD_OFFSET 8
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_RD_MASK 0x100
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_RD 0x100
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_SOP_ERR_OFFSET 7
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_SOP_ERR_MASK 0x80
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_SOP_ERR 0x80
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_ERR_OFFSET 6
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_ERR_MASK 0x40
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_ERR 0x40
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_FULL_ERR_OFFSET 5
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_FULL_ERR_MASK 0x20
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_FULL_ERR 0x20
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_MAX_SZ_ERR_OFFSET 4
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_MAX_SZ_ERR_MASK 0x10
#define CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_MAX_SZ_ERR 0x10
#define CORE_IRQ0_PENDING_IRQ_FIFO_DRP_PKT_OFFSET 3
#define CORE_IRQ0_PENDING_IRQ_FIFO_DRP_PKT_MASK 0x8
#define CORE_IRQ0_PENDING_IRQ_FIFO_DRP_PKT 0x8
#define CORE_IRQ0_PENDING_IRQ_DP_READY_OFFSET 2
#define CORE_IRQ0_PENDING_IRQ_DP_READY_MASK 0x4
#define CORE_IRQ0_PENDING_IRQ_DP_READY 0x4
#define CORE_IRQ0_PENDING_IRQ_DP_RX_READY_OFFSET 1
#define CORE_IRQ0_PENDING_IRQ_DP_RX_READY_MASK 0x2
#define CORE_IRQ0_PENDING_IRQ_DP_RX_READY 0x2
#define CORE_IRQ0_PENDING_IRQ_DP_TX_READY_OFFSET 0
#define CORE_IRQ0_PENDING_IRQ_DP_TX_READY_MASK 0x1
#define CORE_IRQ0_PENDING_IRQ_DP_TX_READY 0x1
#define CORE_IRQ0_RAW_RX_DP_GRD_SOP_ERR_OFFSET 17
#define CORE_IRQ0_RAW_RX_DP_GRD_SOP_ERR_MASK 0x20000
#define CORE_IRQ0_RAW_RX_DP_GRD_SOP_ERR 0x20000
#define CORE_IRQ0_RAW_RX_DP_GRD_EOP_ERR_OFFSET 16
#define CORE_IRQ0_RAW_RX_DP_GRD_EOP_ERR_MASK 0x10000
#define CORE_IRQ0_RAW_RX_DP_GRD_EOP_ERR 0x10000
#define CORE_IRQ0_RAW_RX_DP_GRD_MAX_ERR_OFFSET 15
#define CORE_IRQ0_RAW_RX_DP_GRD_MAX_ERR_MASK 0x8000
#define CORE_IRQ0_RAW_RX_DP_GRD_MAX_ERR 0x8000
#define CORE_IRQ0_RAW_RX_LNK_CMD_FIFO_FULL_ERR_OFFSET 14
#define CORE_IRQ0_RAW_RX_LNK_CMD_FIFO_FULL_ERR_MASK 0x4000
#define CORE_IRQ0_RAW_RX_LNK_CMD_FIFO_FULL_ERR 0x4000
#define CORE_IRQ0_RAW_TX_LNK_CMD_FIFO_FULL_ERR_OFFSET 13
#define CORE_IRQ0_RAW_TX_LNK_CMD_FIFO_FULL_ERR_MASK 0x2000
#define CORE_IRQ0_RAW_TX_LNK_CMD_FIFO_FULL_ERR 0x2000
#define CORE_IRQ0_RAW_TX_DP_GRD_SOP_ERR_OFFSET 12
#define CORE_IRQ0_RAW_TX_DP_GRD_SOP_ERR_MASK 0x1000
#define CORE_IRQ0_RAW_TX_DP_GRD_SOP_ERR 0x1000
#define CORE_IRQ0_RAW_TX_DP_GRD_EOP_ERR_OFFSET 11
#define CORE_IRQ0_RAW_TX_DP_GRD_EOP_ERR_MASK 0x800
#define CORE_IRQ0_RAW_TX_DP_GRD_EOP_ERR 0x800
#define CORE_IRQ0_RAW_TX_DP_GRD_MAX_ERR_OFFSET 10
#define CORE_IRQ0_RAW_TX_DP_GRD_MAX_ERR_MASK 0x400
#define CORE_IRQ0_RAW_TX_DP_GRD_MAX_ERR 0x400
#define CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_WR_OFFSET 9
#define CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_WR_MASK 0x200
#define CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_WR 0x200
#define CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_RD_OFFSET 8
#define CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_RD_MASK 0x100
#define CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_RD 0x100
#define CORE_IRQ0_RAW_TX_DP_FIFO_PKT_SOP_ERR_OFFSET 7
#define CORE_IRQ0_RAW_TX_DP_FIFO_PKT_SOP_ERR_MASK 0x80
#define CORE_IRQ0_RAW_TX_DP_FIFO_PKT_SOP_ERR 0x80
#define CORE_IRQ0_RAW_TX_DP_FIFO_PKT_ERR_OFFSET 6
#define CORE_IRQ0_RAW_TX_DP_FIFO_PKT_ERR_MASK 0x40
#define CORE_IRQ0_RAW_TX_DP_FIFO_PKT_ERR 0x40
#define CORE_IRQ0_RAW_TX_DP_FIFO_FULL_ERR_OFFSET 5
#define CORE_IRQ0_RAW_TX_DP_FIFO_FULL_ERR_MASK 0x20
#define CORE_IRQ0_RAW_TX_DP_FIFO_FULL_ERR 0x20
#define CORE_IRQ0_RAW_TX_DP_FIFO_PKT_MAX_SZ_ERR_OFFSET 4
#define CORE_IRQ0_RAW_TX_DP_FIFO_PKT_MAX_SZ_ERR_MASK 0x10
#define CORE_IRQ0_RAW_TX_DP_FIFO_PKT_MAX_SZ_ERR 0x10
#define CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_OFFSET 3
#define CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_MASK 0x8
#define CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT 0x8
#define CORE_IRQ0_RAW_DP_READY_OFFSET 2
#define CORE_IRQ0_RAW_DP_READY_MASK 0x4
#define CORE_IRQ0_RAW_DP_READY 0x4
#define CORE_IRQ0_RAW_DP_RX_READY_OFFSET 1
#define CORE_IRQ0_RAW_DP_RX_READY_MASK 0x2
#define CORE_IRQ0_RAW_DP_RX_READY 0x2
#define CORE_IRQ0_RAW_DP_TX_READY_OFFSET 0
#define CORE_IRQ0_RAW_DP_TX_READY_MASK 0x1
#define CORE_IRQ0_RAW_DP_TX_READY 0x1
#endif /* _CORE_REGS_H_ */

/* end */
