/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Remco van Steeden*/
/* generated by      : Remco.vanSteeden*/
/* generated from    : C:\cygwin64\home\Remco.VanSteeden\blackbird_vc707\m_i2c_slave\regs\ids\i2c_slave_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/*block : i2c_slave */

#ifndef _I2C_SLAVE_REGS_H_
#define _I2C_SLAVE_REGS_H_

#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x4 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x1 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x4 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_in_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_out_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv31 : 1;
            uint32_t no_device_busy : 1;           /* 30 SW=rw HW=ro 0x0 */
            uint32_t no_reply_data_rdy : 1;           /* 29 SW=rw HW=ro 0x0 */
            uint32_t no_status : 1;           /* 28 SW=rw HW=ro 0x0 */
            uint32_t stop_clks : 4;           /* 27:24 SW=rw HW=ro 0x0 */
            uint32_t start_clks : 4;           /* 23:20 SW=rw HW=ro 0x0 */
            uint32_t sda_glitch : 4;           /* 19:16 SW=rw HW=ro 0x0 */
            uint32_t scl_glitch : 4;           /* 15:12 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 2;
            uint32_t clock_stretch_en : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t slave_addr_ack : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv7 : 1;
            uint32_t slave_addr : 7;           /* 6:0 SW=rw HW=ro 0x8 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t slave_addr : 7;           /* 0:6 SW=rw HW=ro 0x8 */
            
            uint32_t resv7 : 1;
            uint32_t slave_addr_ack : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t clock_stretch_en : 1;           /* 9 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 2;
            uint32_t scl_glitch : 4;           /* 12:15 SW=rw HW=ro 0x0 */
            uint32_t sda_glitch : 4;           /* 16:19 SW=rw HW=ro 0x0 */
            uint32_t start_clks : 4;           /* 20:23 SW=rw HW=ro 0x0 */
            uint32_t stop_clks : 4;           /* 24:27 SW=rw HW=ro 0x0 */
            uint32_t no_status : 1;           /* 28 SW=rw HW=ro 0x0 */
            uint32_t no_reply_data_rdy : 1;           /* 29 SW=rw HW=ro 0x0 */
            uint32_t no_device_busy : 1;           /* 30 SW=rw HW=ro 0x0 */
            uint32_t resv31 : 1;
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_slave_config;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} i2c_slave_timeout;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t device_busy : 1;           /* 7 SW=rw HW=rw 0x1 */
            uint32_t req_nak : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t rsvd5 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t rsvd4 : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t reply_data_rdy : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t reply_req : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rsvd1 : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rsvd0 : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rsvd0 : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rsvd1 : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t reply_req : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t reply_data_rdy : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rsvd4 : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t rsvd5 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t req_nak : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t device_busy : 1;           /* 7 SW=rw HW=rw 0x1 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wr_data : 8;           /* 7:0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wr_data : 8;           /* 0:7 SW=wo HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_wr_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rd_data : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rd_data : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_rd_data;

/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t reply_data_rdy : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t device_busy : 1;           /* 16 SW=rw HW=na 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t out_fifo_af : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t timeout : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t write : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t read : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t stop : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t start : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t stop : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t read : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t write : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t timeout : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t out_fifo_af : 1;           /* 11 SW=rw HW=na 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t device_busy : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t reply_data_rdy : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t reply_data_rdy : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t device_busy : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t out_fifo_af : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t timeout : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t write : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t read : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t stop : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t start : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t stop : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t read : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t write : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t timeout : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t out_fifo_af : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t device_busy : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t reply_data_rdy : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t reply_data_rdy : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t device_busy : 1;           /* 16 SW=ro HW=na 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t out_fifo_af : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t timeout : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t write : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t read : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t stop : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t start : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t stop : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t read : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t write : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t timeout : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t out_fifo_af : 1;           /* 11 SW=ro HW=na 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t device_busy : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t reply_data_rdy : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t reply_data_rdy : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t device_busy : 1;           /* 16 SW=ro HW=wo 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t out_fifo_af : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t timeout : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t write : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t read : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t stop : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t start : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t stop : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t read : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t write : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t timeout : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t out_fifo_af : 1;           /* 11 SW=ro HW=wo 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t device_busy : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t reply_data_rdy : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} i2c_slave_irq_raw;

typedef struct {
    i2c_slave_irq_enable  enable;
    i2c_slave_irq_pending  pending;
    i2c_slave_irq_pending_irq  pending_irq;
    i2c_slave_irq_raw  raw;
    
    
    
} i2c_slave_irq;


typedef struct {
    i2c_slave_version  version;
    i2c_slave_in_fifo  in_fifo;
    i2c_slave_out_fifo  out_fifo;
    i2c_slave_slave_config  slave_config;
    i2c_slave_timeout  timeout;
    i2c_slave_status  status;
    i2c_slave_wr_data  wr_data;
    i2c_slave_rd_data  rd_data;
    
    union {
        i2c_slave_irq s;
        uint8_t filler[0x10];
    } irq;
    
    
    uint8_t filler11[0xD0];
    
    
} i2c_slave_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define i2c_slave_version_READMASK 0xFFFFFF
#define i2c_slave_version_WRITEMASK 0x0
#define i2c_slave_version_VOLATILEMASK 0x0
#define i2c_slave_version_RESETMASK 0xFFFFFF
#define i2c_slave_version_DEFAULT 0x00040001

#define i2c_slave_in_fifo_READMASK 0x8FFFFFFF
#define i2c_slave_in_fifo_WRITEMASK 0x80FFFF00
#define i2c_slave_in_fifo_VOLATILEMASK 0xF0000FF
#define i2c_slave_in_fifo_RESETMASK 0x8FFFFFFF
#define i2c_slave_in_fifo_DEFAULT 0x00000000

#define i2c_slave_out_fifo_READMASK 0x8FFFFFFF
#define i2c_slave_out_fifo_WRITEMASK 0x80FFFF00
#define i2c_slave_out_fifo_VOLATILEMASK 0xF0000FF
#define i2c_slave_out_fifo_RESETMASK 0x8FFFFFFF
#define i2c_slave_out_fifo_DEFAULT 0x00000000

#define i2c_slave_slave_config_READMASK 0x7FFFF37F
#define i2c_slave_slave_config_WRITEMASK 0x7FFFF37F
#define i2c_slave_slave_config_VOLATILEMASK 0x0
#define i2c_slave_slave_config_RESETMASK 0x7FFFF37F
#define i2c_slave_slave_config_DEFAULT 0x00000008

#define i2c_slave_timeout_READMASK 0xFFFFFFFF
#define i2c_slave_timeout_WRITEMASK 0xFFFFFFFF
#define i2c_slave_timeout_VOLATILEMASK 0x0
#define i2c_slave_timeout_RESETMASK 0xFFFFFFFF
#define i2c_slave_timeout_DEFAULT 0x00000000

#define i2c_slave_status_READMASK 0xFF
#define i2c_slave_status_WRITEMASK 0xFF
#define i2c_slave_status_VOLATILEMASK 0x80
#define i2c_slave_status_RESETMASK 0xFF
#define i2c_slave_status_DEFAULT 0x00000080

#define i2c_slave_wr_data_READMASK 0x0
#define i2c_slave_wr_data_WRITEMASK 0xFF
#define i2c_slave_wr_data_VOLATILEMASK 0x0
#define i2c_slave_wr_data_RESETMASK 0xFF
#define i2c_slave_wr_data_DEFAULT 0x00000000

#define i2c_slave_rd_data_READMASK 0xFF
#define i2c_slave_rd_data_WRITEMASK 0x0
#define i2c_slave_rd_data_VOLATILEMASK 0xFF
#define i2c_slave_rd_data_RESETMASK 0xFF
#define i2c_slave_rd_data_DEFAULT 0x00000000

#define i2c_slave_irq_enable_READMASK 0x30FFF
#define i2c_slave_irq_enable_WRITEMASK 0x30FFF
#define i2c_slave_irq_enable_VOLATILEMASK 0x0
#define i2c_slave_irq_enable_RESETMASK 0x30FFF
#define i2c_slave_irq_enable_DEFAULT 0x00000000

#define i2c_slave_irq_pending_READMASK 0x30FFF
#define i2c_slave_irq_pending_WRITEMASK 0x30FFF
#define i2c_slave_irq_pending_VOLATILEMASK 0x30FFF
#define i2c_slave_irq_pending_RESETMASK 0x30FFF
#define i2c_slave_irq_pending_DEFAULT 0x00000000

#define i2c_slave_irq_pending_irq_READMASK 0x30FFF
#define i2c_slave_irq_pending_irq_WRITEMASK 0x0
#define i2c_slave_irq_pending_irq_VOLATILEMASK 0x0
#define i2c_slave_irq_pending_irq_RESETMASK 0x30FFF
#define i2c_slave_irq_pending_irq_DEFAULT 0x00000000

#define i2c_slave_irq_raw_READMASK 0x30FFF
#define i2c_slave_irq_raw_WRITEMASK 0x0
#define i2c_slave_irq_raw_VOLATILEMASK 0x30FFF
#define i2c_slave_irq_raw_RESETMASK 0x30FFF
#define i2c_slave_irq_raw_DEFAULT 0x00000000

#define i2c_slave_s_SIZE 0x100
#define i2c_slave_version_SIZE 0x4
#define i2c_slave_in_fifo_SIZE 0x4
#define i2c_slave_out_fifo_SIZE 0x4
#define i2c_slave_slave_config_SIZE 0x4
#define i2c_slave_timeout_SIZE 0x4
#define i2c_slave_status_SIZE 0x4
#define i2c_slave_wr_data_SIZE 0x4
#define i2c_slave_rd_data_SIZE 0x4
#define i2c_slave_irq_SIZE 0x10
#define i2c_slave_irq_enable_SIZE 0x4
#define i2c_slave_irq_pending_SIZE 0x4
#define i2c_slave_irq_pending_irq_SIZE 0x4
#define i2c_slave_irq_raw_SIZE 0x4

#define i2c_slave_s_OFFSET 0x0
#define i2c_slave_version_OFFSET 0x0
#define i2c_slave_in_fifo_OFFSET 0x4
#define i2c_slave_out_fifo_OFFSET 0x8
#define i2c_slave_slave_config_OFFSET 0xC
#define i2c_slave_timeout_OFFSET 0x10
#define i2c_slave_status_OFFSET 0x14
#define i2c_slave_wr_data_OFFSET 0x18
#define i2c_slave_rd_data_OFFSET 0x1C
#define i2c_slave_irq_OFFSET 0x20
#define i2c_slave_irq_enable_OFFSET 0x0
#define i2c_slave_irq_pending_OFFSET 0x4
#define i2c_slave_irq_pending_irq_OFFSET 0x8
#define i2c_slave_irq_raw_OFFSET 0xC

#define i2c_slave_s_ADDRESS 0x000
#define i2c_slave_version_ADDRESS 0x000
#define i2c_slave_in_fifo_ADDRESS 0x004
#define i2c_slave_out_fifo_ADDRESS 0x008
#define i2c_slave_slave_config_ADDRESS 0x00C
#define i2c_slave_timeout_ADDRESS 0x010
#define i2c_slave_status_ADDRESS 0x014
#define i2c_slave_wr_data_ADDRESS 0x018
#define i2c_slave_rd_data_ADDRESS 0x01C
#define i2c_slave_irq_ADDRESS 0x020
#define i2c_slave_irq_enable_ADDRESS 0x020
#define i2c_slave_irq_pending_ADDRESS 0x024
#define i2c_slave_irq_pending_irq_ADDRESS 0x028
#define i2c_slave_irq_raw_ADDRESS 0x02C
#define I2C_SLAVE_VERSION_MAJOR_OFFSET 16
#define I2C_SLAVE_VERSION_MAJOR_MASK 0xFF0000
#define I2C_SLAVE_VERSION_MINOR_OFFSET 8
#define I2C_SLAVE_VERSION_MINOR_MASK 0xFF00
#define I2C_SLAVE_VERSION_PATCH_OFFSET 0
#define I2C_SLAVE_VERSION_PATCH_MASK 0xFF
#define I2C_SLAVE_IN_FIFO_FIFO_CLEAR_OFFSET 31
#define I2C_SLAVE_IN_FIFO_FIFO_CLEAR_MASK 0x80000000
#define I2C_SLAVE_IN_FIFO_FIFO_CLEAR 0x80000000
#define I2C_SLAVE_IN_FIFO_FIFO_AF_OFFSET 27
#define I2C_SLAVE_IN_FIFO_FIFO_AF_MASK 0x8000000
#define I2C_SLAVE_IN_FIFO_FIFO_AF 0x8000000
#define I2C_SLAVE_IN_FIFO_FIFO_AE_OFFSET 26
#define I2C_SLAVE_IN_FIFO_FIFO_AE_MASK 0x4000000
#define I2C_SLAVE_IN_FIFO_FIFO_AE 0x4000000
#define I2C_SLAVE_IN_FIFO_FIFO_FULL_OFFSET 25
#define I2C_SLAVE_IN_FIFO_FIFO_FULL_MASK 0x2000000
#define I2C_SLAVE_IN_FIFO_FIFO_FULL 0x2000000
#define I2C_SLAVE_IN_FIFO_FIFO_EMPTY_OFFSET 24
#define I2C_SLAVE_IN_FIFO_FIFO_EMPTY_MASK 0x1000000
#define I2C_SLAVE_IN_FIFO_FIFO_EMPTY 0x1000000
#define I2C_SLAVE_IN_FIFO_FIFO_AFT_OFFSET 16
#define I2C_SLAVE_IN_FIFO_FIFO_AFT_MASK 0xFF0000
#define I2C_SLAVE_IN_FIFO_FIFO_AET_OFFSET 8
#define I2C_SLAVE_IN_FIFO_FIFO_AET_MASK 0xFF00
#define I2C_SLAVE_IN_FIFO_FIFO_DEPTH_OFFSET 0
#define I2C_SLAVE_IN_FIFO_FIFO_DEPTH_MASK 0xFF
#define I2C_SLAVE_OUT_FIFO_FIFO_CLEAR_OFFSET 31
#define I2C_SLAVE_OUT_FIFO_FIFO_CLEAR_MASK 0x80000000
#define I2C_SLAVE_OUT_FIFO_FIFO_CLEAR 0x80000000
#define I2C_SLAVE_OUT_FIFO_FIFO_AF_OFFSET 27
#define I2C_SLAVE_OUT_FIFO_FIFO_AF_MASK 0x8000000
#define I2C_SLAVE_OUT_FIFO_FIFO_AF 0x8000000
#define I2C_SLAVE_OUT_FIFO_FIFO_AE_OFFSET 26
#define I2C_SLAVE_OUT_FIFO_FIFO_AE_MASK 0x4000000
#define I2C_SLAVE_OUT_FIFO_FIFO_AE 0x4000000
#define I2C_SLAVE_OUT_FIFO_FIFO_FULL_OFFSET 25
#define I2C_SLAVE_OUT_FIFO_FIFO_FULL_MASK 0x2000000
#define I2C_SLAVE_OUT_FIFO_FIFO_FULL 0x2000000
#define I2C_SLAVE_OUT_FIFO_FIFO_EMPTY_OFFSET 24
#define I2C_SLAVE_OUT_FIFO_FIFO_EMPTY_MASK 0x1000000
#define I2C_SLAVE_OUT_FIFO_FIFO_EMPTY 0x1000000
#define I2C_SLAVE_OUT_FIFO_FIFO_AFT_OFFSET 16
#define I2C_SLAVE_OUT_FIFO_FIFO_AFT_MASK 0xFF0000
#define I2C_SLAVE_OUT_FIFO_FIFO_AET_OFFSET 8
#define I2C_SLAVE_OUT_FIFO_FIFO_AET_MASK 0xFF00
#define I2C_SLAVE_OUT_FIFO_FIFO_DEPTH_OFFSET 0
#define I2C_SLAVE_OUT_FIFO_FIFO_DEPTH_MASK 0xFF
#define I2C_SLAVE_SLAVE_CONFIG_NO_DEVICE_BUSY_OFFSET 30
#define I2C_SLAVE_SLAVE_CONFIG_NO_DEVICE_BUSY_MASK 0x40000000
#define I2C_SLAVE_SLAVE_CONFIG_NO_DEVICE_BUSY 0x40000000
#define I2C_SLAVE_SLAVE_CONFIG_NO_REPLY_DATA_RDY_OFFSET 29
#define I2C_SLAVE_SLAVE_CONFIG_NO_REPLY_DATA_RDY_MASK 0x20000000
#define I2C_SLAVE_SLAVE_CONFIG_NO_REPLY_DATA_RDY 0x20000000
#define I2C_SLAVE_SLAVE_CONFIG_NO_STATUS_OFFSET 28
#define I2C_SLAVE_SLAVE_CONFIG_NO_STATUS_MASK 0x10000000
#define I2C_SLAVE_SLAVE_CONFIG_NO_STATUS 0x10000000
#define I2C_SLAVE_SLAVE_CONFIG_STOP_CLKS_OFFSET 24
#define I2C_SLAVE_SLAVE_CONFIG_STOP_CLKS_MASK 0xF000000
#define I2C_SLAVE_SLAVE_CONFIG_START_CLKS_OFFSET 20
#define I2C_SLAVE_SLAVE_CONFIG_START_CLKS_MASK 0xF00000
#define I2C_SLAVE_SLAVE_CONFIG_SDA_GLITCH_OFFSET 16
#define I2C_SLAVE_SLAVE_CONFIG_SDA_GLITCH_MASK 0xF0000
#define I2C_SLAVE_SLAVE_CONFIG_SCL_GLITCH_OFFSET 12
#define I2C_SLAVE_SLAVE_CONFIG_SCL_GLITCH_MASK 0xF000
#define I2C_SLAVE_SLAVE_CONFIG_CLOCK_STRETCH_EN_OFFSET 9
#define I2C_SLAVE_SLAVE_CONFIG_CLOCK_STRETCH_EN_MASK 0x200
#define I2C_SLAVE_SLAVE_CONFIG_CLOCK_STRETCH_EN 0x200
#define I2C_SLAVE_SLAVE_CONFIG_SLAVE_ADDR_ACK_OFFSET 8
#define I2C_SLAVE_SLAVE_CONFIG_SLAVE_ADDR_ACK_MASK 0x100
#define I2C_SLAVE_SLAVE_CONFIG_SLAVE_ADDR_ACK 0x100
#define I2C_SLAVE_SLAVE_CONFIG_SLAVE_ADDR_OFFSET 0
#define I2C_SLAVE_SLAVE_CONFIG_SLAVE_ADDR_MASK 0x7F
#define I2C_SLAVE_TIMEOUT_VAL_OFFSET 0
#define I2C_SLAVE_TIMEOUT_VAL_MASK 0xFFFFFFFF
#define I2C_SLAVE_STATUS_DEVICE_BUSY_OFFSET 7
#define I2C_SLAVE_STATUS_DEVICE_BUSY_MASK 0x80
#define I2C_SLAVE_STATUS_DEVICE_BUSY 0x80
#define I2C_SLAVE_STATUS_REQ_NAK_OFFSET 6
#define I2C_SLAVE_STATUS_REQ_NAK_MASK 0x40
#define I2C_SLAVE_STATUS_REQ_NAK 0x40
#define I2C_SLAVE_STATUS_RSVD5_OFFSET 5
#define I2C_SLAVE_STATUS_RSVD5_MASK 0x20
#define I2C_SLAVE_STATUS_RSVD5 0x20
#define I2C_SLAVE_STATUS_RSVD4_OFFSET 4
#define I2C_SLAVE_STATUS_RSVD4_MASK 0x10
#define I2C_SLAVE_STATUS_RSVD4 0x10
#define I2C_SLAVE_STATUS_REPLY_DATA_RDY_OFFSET 3
#define I2C_SLAVE_STATUS_REPLY_DATA_RDY_MASK 0x8
#define I2C_SLAVE_STATUS_REPLY_DATA_RDY 0x8
#define I2C_SLAVE_STATUS_REPLY_REQ_OFFSET 2
#define I2C_SLAVE_STATUS_REPLY_REQ_MASK 0x4
#define I2C_SLAVE_STATUS_REPLY_REQ 0x4
#define I2C_SLAVE_STATUS_RSVD1_OFFSET 1
#define I2C_SLAVE_STATUS_RSVD1_MASK 0x2
#define I2C_SLAVE_STATUS_RSVD1 0x2
#define I2C_SLAVE_STATUS_RSVD0_OFFSET 0
#define I2C_SLAVE_STATUS_RSVD0_MASK 0x1
#define I2C_SLAVE_STATUS_RSVD0 0x1
#define I2C_SLAVE_WR_DATA_WR_DATA_OFFSET 0
#define I2C_SLAVE_WR_DATA_WR_DATA_MASK 0xFF
#define I2C_SLAVE_RD_DATA_RD_DATA_OFFSET 0
#define I2C_SLAVE_RD_DATA_RD_DATA_MASK 0xFF
#define I2C_SLAVE_IRQ_ENABLE_REPLY_DATA_RDY_OFFSET 17
#define I2C_SLAVE_IRQ_ENABLE_REPLY_DATA_RDY_MASK 0x20000
#define I2C_SLAVE_IRQ_ENABLE_REPLY_DATA_RDY 0x20000
#define I2C_SLAVE_IRQ_ENABLE_DEVICE_BUSY_OFFSET 16
#define I2C_SLAVE_IRQ_ENABLE_DEVICE_BUSY_MASK 0x10000
#define I2C_SLAVE_IRQ_ENABLE_DEVICE_BUSY 0x10000
#define I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AF_OFFSET 11
#define I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AF_MASK 0x800
#define I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AF 0x800
#define I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AE_OFFSET 10
#define I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AE_MASK 0x400
#define I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AE 0x400
#define I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AF_OFFSET 9
#define I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AF_MASK 0x200
#define I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AF 0x200
#define I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AE_OFFSET 8
#define I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AE_MASK 0x100
#define I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AE 0x100
#define I2C_SLAVE_IRQ_ENABLE_WRITE_NACK_OFFSET 7
#define I2C_SLAVE_IRQ_ENABLE_WRITE_NACK_MASK 0x80
#define I2C_SLAVE_IRQ_ENABLE_WRITE_NACK 0x80
#define I2C_SLAVE_IRQ_ENABLE_READ_NACK_OFFSET 6
#define I2C_SLAVE_IRQ_ENABLE_READ_NACK_MASK 0x40
#define I2C_SLAVE_IRQ_ENABLE_READ_NACK 0x40
#define I2C_SLAVE_IRQ_ENABLE_NO_READ_DATA_OFFSET 5
#define I2C_SLAVE_IRQ_ENABLE_NO_READ_DATA_MASK 0x20
#define I2C_SLAVE_IRQ_ENABLE_NO_READ_DATA 0x20
#define I2C_SLAVE_IRQ_ENABLE_TIMEOUT_OFFSET 4
#define I2C_SLAVE_IRQ_ENABLE_TIMEOUT_MASK 0x10
#define I2C_SLAVE_IRQ_ENABLE_TIMEOUT 0x10
#define I2C_SLAVE_IRQ_ENABLE_WRITE_OFFSET 3
#define I2C_SLAVE_IRQ_ENABLE_WRITE_MASK 0x8
#define I2C_SLAVE_IRQ_ENABLE_WRITE 0x8
#define I2C_SLAVE_IRQ_ENABLE_READ_OFFSET 2
#define I2C_SLAVE_IRQ_ENABLE_READ_MASK 0x4
#define I2C_SLAVE_IRQ_ENABLE_READ 0x4
#define I2C_SLAVE_IRQ_ENABLE_STOP_OFFSET 1
#define I2C_SLAVE_IRQ_ENABLE_STOP_MASK 0x2
#define I2C_SLAVE_IRQ_ENABLE_STOP 0x2
#define I2C_SLAVE_IRQ_ENABLE_START_OFFSET 0
#define I2C_SLAVE_IRQ_ENABLE_START_MASK 0x1
#define I2C_SLAVE_IRQ_ENABLE_START 0x1
#define I2C_SLAVE_IRQ_PENDING_REPLY_DATA_RDY_OFFSET 17
#define I2C_SLAVE_IRQ_PENDING_REPLY_DATA_RDY_MASK 0x20000
#define I2C_SLAVE_IRQ_PENDING_REPLY_DATA_RDY 0x20000
#define I2C_SLAVE_IRQ_PENDING_DEVICE_BUSY_OFFSET 16
#define I2C_SLAVE_IRQ_PENDING_DEVICE_BUSY_MASK 0x10000
#define I2C_SLAVE_IRQ_PENDING_DEVICE_BUSY 0x10000
#define I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AF_OFFSET 11
#define I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AF_MASK 0x800
#define I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AF 0x800
#define I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AE_OFFSET 10
#define I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AE_MASK 0x400
#define I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AE 0x400
#define I2C_SLAVE_IRQ_PENDING_IN_FIFO_AF_OFFSET 9
#define I2C_SLAVE_IRQ_PENDING_IN_FIFO_AF_MASK 0x200
#define I2C_SLAVE_IRQ_PENDING_IN_FIFO_AF 0x200
#define I2C_SLAVE_IRQ_PENDING_IN_FIFO_AE_OFFSET 8
#define I2C_SLAVE_IRQ_PENDING_IN_FIFO_AE_MASK 0x100
#define I2C_SLAVE_IRQ_PENDING_IN_FIFO_AE 0x100
#define I2C_SLAVE_IRQ_PENDING_WRITE_NACK_OFFSET 7
#define I2C_SLAVE_IRQ_PENDING_WRITE_NACK_MASK 0x80
#define I2C_SLAVE_IRQ_PENDING_WRITE_NACK 0x80
#define I2C_SLAVE_IRQ_PENDING_READ_NACK_OFFSET 6
#define I2C_SLAVE_IRQ_PENDING_READ_NACK_MASK 0x40
#define I2C_SLAVE_IRQ_PENDING_READ_NACK 0x40
#define I2C_SLAVE_IRQ_PENDING_NO_READ_DATA_OFFSET 5
#define I2C_SLAVE_IRQ_PENDING_NO_READ_DATA_MASK 0x20
#define I2C_SLAVE_IRQ_PENDING_NO_READ_DATA 0x20
#define I2C_SLAVE_IRQ_PENDING_TIMEOUT_OFFSET 4
#define I2C_SLAVE_IRQ_PENDING_TIMEOUT_MASK 0x10
#define I2C_SLAVE_IRQ_PENDING_TIMEOUT 0x10
#define I2C_SLAVE_IRQ_PENDING_WRITE_OFFSET 3
#define I2C_SLAVE_IRQ_PENDING_WRITE_MASK 0x8
#define I2C_SLAVE_IRQ_PENDING_WRITE 0x8
#define I2C_SLAVE_IRQ_PENDING_READ_OFFSET 2
#define I2C_SLAVE_IRQ_PENDING_READ_MASK 0x4
#define I2C_SLAVE_IRQ_PENDING_READ 0x4
#define I2C_SLAVE_IRQ_PENDING_STOP_OFFSET 1
#define I2C_SLAVE_IRQ_PENDING_STOP_MASK 0x2
#define I2C_SLAVE_IRQ_PENDING_STOP 0x2
#define I2C_SLAVE_IRQ_PENDING_START_OFFSET 0
#define I2C_SLAVE_IRQ_PENDING_START_MASK 0x1
#define I2C_SLAVE_IRQ_PENDING_START 0x1
#define I2C_SLAVE_IRQ_PENDING_IRQ_REPLY_DATA_RDY_OFFSET 17
#define I2C_SLAVE_IRQ_PENDING_IRQ_REPLY_DATA_RDY_MASK 0x20000
#define I2C_SLAVE_IRQ_PENDING_IRQ_REPLY_DATA_RDY 0x20000
#define I2C_SLAVE_IRQ_PENDING_IRQ_DEVICE_BUSY_OFFSET 16
#define I2C_SLAVE_IRQ_PENDING_IRQ_DEVICE_BUSY_MASK 0x10000
#define I2C_SLAVE_IRQ_PENDING_IRQ_DEVICE_BUSY 0x10000
#define I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AF_OFFSET 11
#define I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AF_MASK 0x800
#define I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AF 0x800
#define I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AE_OFFSET 10
#define I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AE_MASK 0x400
#define I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AE 0x400
#define I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AF_OFFSET 9
#define I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AF_MASK 0x200
#define I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AF 0x200
#define I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AE_OFFSET 8
#define I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AE_MASK 0x100
#define I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AE 0x100
#define I2C_SLAVE_IRQ_PENDING_IRQ_WRITE_NACK_OFFSET 7
#define I2C_SLAVE_IRQ_PENDING_IRQ_WRITE_NACK_MASK 0x80
#define I2C_SLAVE_IRQ_PENDING_IRQ_WRITE_NACK 0x80
#define I2C_SLAVE_IRQ_PENDING_IRQ_READ_NACK_OFFSET 6
#define I2C_SLAVE_IRQ_PENDING_IRQ_READ_NACK_MASK 0x40
#define I2C_SLAVE_IRQ_PENDING_IRQ_READ_NACK 0x40
#define I2C_SLAVE_IRQ_PENDING_IRQ_NO_READ_DATA_OFFSET 5
#define I2C_SLAVE_IRQ_PENDING_IRQ_NO_READ_DATA_MASK 0x20
#define I2C_SLAVE_IRQ_PENDING_IRQ_NO_READ_DATA 0x20
#define I2C_SLAVE_IRQ_PENDING_IRQ_TIMEOUT_OFFSET 4
#define I2C_SLAVE_IRQ_PENDING_IRQ_TIMEOUT_MASK 0x10
#define I2C_SLAVE_IRQ_PENDING_IRQ_TIMEOUT 0x10
#define I2C_SLAVE_IRQ_PENDING_IRQ_WRITE_OFFSET 3
#define I2C_SLAVE_IRQ_PENDING_IRQ_WRITE_MASK 0x8
#define I2C_SLAVE_IRQ_PENDING_IRQ_WRITE 0x8
#define I2C_SLAVE_IRQ_PENDING_IRQ_READ_OFFSET 2
#define I2C_SLAVE_IRQ_PENDING_IRQ_READ_MASK 0x4
#define I2C_SLAVE_IRQ_PENDING_IRQ_READ 0x4
#define I2C_SLAVE_IRQ_PENDING_IRQ_STOP_OFFSET 1
#define I2C_SLAVE_IRQ_PENDING_IRQ_STOP_MASK 0x2
#define I2C_SLAVE_IRQ_PENDING_IRQ_STOP 0x2
#define I2C_SLAVE_IRQ_PENDING_IRQ_START_OFFSET 0
#define I2C_SLAVE_IRQ_PENDING_IRQ_START_MASK 0x1
#define I2C_SLAVE_IRQ_PENDING_IRQ_START 0x1
#define I2C_SLAVE_IRQ_RAW_REPLY_DATA_RDY_OFFSET 17
#define I2C_SLAVE_IRQ_RAW_REPLY_DATA_RDY_MASK 0x20000
#define I2C_SLAVE_IRQ_RAW_REPLY_DATA_RDY 0x20000
#define I2C_SLAVE_IRQ_RAW_DEVICE_BUSY_OFFSET 16
#define I2C_SLAVE_IRQ_RAW_DEVICE_BUSY_MASK 0x10000
#define I2C_SLAVE_IRQ_RAW_DEVICE_BUSY 0x10000
#define I2C_SLAVE_IRQ_RAW_OUT_FIFO_AF_OFFSET 11
#define I2C_SLAVE_IRQ_RAW_OUT_FIFO_AF_MASK 0x800
#define I2C_SLAVE_IRQ_RAW_OUT_FIFO_AF 0x800
#define I2C_SLAVE_IRQ_RAW_OUT_FIFO_AE_OFFSET 10
#define I2C_SLAVE_IRQ_RAW_OUT_FIFO_AE_MASK 0x400
#define I2C_SLAVE_IRQ_RAW_OUT_FIFO_AE 0x400
#define I2C_SLAVE_IRQ_RAW_IN_FIFO_AF_OFFSET 9
#define I2C_SLAVE_IRQ_RAW_IN_FIFO_AF_MASK 0x200
#define I2C_SLAVE_IRQ_RAW_IN_FIFO_AF 0x200
#define I2C_SLAVE_IRQ_RAW_IN_FIFO_AE_OFFSET 8
#define I2C_SLAVE_IRQ_RAW_IN_FIFO_AE_MASK 0x100
#define I2C_SLAVE_IRQ_RAW_IN_FIFO_AE 0x100
#define I2C_SLAVE_IRQ_RAW_WRITE_NACK_OFFSET 7
#define I2C_SLAVE_IRQ_RAW_WRITE_NACK_MASK 0x80
#define I2C_SLAVE_IRQ_RAW_WRITE_NACK 0x80
#define I2C_SLAVE_IRQ_RAW_READ_NACK_OFFSET 6
#define I2C_SLAVE_IRQ_RAW_READ_NACK_MASK 0x40
#define I2C_SLAVE_IRQ_RAW_READ_NACK 0x40
#define I2C_SLAVE_IRQ_RAW_NO_READ_DATA_OFFSET 5
#define I2C_SLAVE_IRQ_RAW_NO_READ_DATA_MASK 0x20
#define I2C_SLAVE_IRQ_RAW_NO_READ_DATA 0x20
#define I2C_SLAVE_IRQ_RAW_TIMEOUT_OFFSET 4
#define I2C_SLAVE_IRQ_RAW_TIMEOUT_MASK 0x10
#define I2C_SLAVE_IRQ_RAW_TIMEOUT 0x10
#define I2C_SLAVE_IRQ_RAW_WRITE_OFFSET 3
#define I2C_SLAVE_IRQ_RAW_WRITE_MASK 0x8
#define I2C_SLAVE_IRQ_RAW_WRITE 0x8
#define I2C_SLAVE_IRQ_RAW_READ_OFFSET 2
#define I2C_SLAVE_IRQ_RAW_READ_MASK 0x4
#define I2C_SLAVE_IRQ_RAW_READ 0x4
#define I2C_SLAVE_IRQ_RAW_STOP_OFFSET 1
#define I2C_SLAVE_IRQ_RAW_STOP_MASK 0x2
#define I2C_SLAVE_IRQ_RAW_STOP 0x2
#define I2C_SLAVE_IRQ_RAW_START_OFFSET 0
#define I2C_SLAVE_IRQ_RAW_START_MASK 0x1
#define I2C_SLAVE_IRQ_RAW_START 0x1
#endif /* _I2C_SLAVE_REGS_H_ */

/* end */
