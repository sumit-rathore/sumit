/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Ardeshir Saghafi*/
/* generated by      : Ardeshir.Saghafi*/
/* generated from    : C:\cygwin64\home\Ardeshir.Saghafi\BLACKBIRD_20190627T175843\m_dp_sink\regs\ids\dp_sink_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/*block : dp_sink */

#ifndef _DP_SINK_REGS_H_
#define _DP_SINK_REGS_H_

#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x8 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x9 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x9 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x8 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t debug_msa_en : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv18 : 13;
            uint32_t tu_measured : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t tico_ctrl_rst : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t vid_color_format : 2;           /* 15:14 SW=ro HW=wo 0x0 */
            
            uint32_t resv11 : 3;
            uint32_t vid_bit_per_component : 3;           /* 10:8 SW=ro HW=wo 0x0 */
            uint32_t vid_stream_extractor_en : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t stream_extractor_en : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t apb_to_axi_mode_select : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t enh_frm_en : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t lane_bit_rate : 2;           /* 3:2 SW=rw HW=ro 0x2 */
            uint32_t lane_num : 2;           /* 1:0 SW=rw HW=ro 0x3 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lane_num : 2;           /* 0:1 SW=rw HW=ro 0x3 */
            uint32_t lane_bit_rate : 2;           /* 2:3 SW=rw HW=ro 0x2 */
            uint32_t enh_frm_en : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t apb_to_axi_mode_select : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t stream_extractor_en : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t vid_stream_extractor_en : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t vid_bit_per_component : 3;           /* 8:10 SW=ro HW=wo 0x0 */
            
            uint32_t resv11 : 3;
            uint32_t vid_color_format : 2;           /* 14:15 SW=ro HW=wo 0x0 */
            uint32_t tico_ctrl_rst : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t tu_measured : 1;           /* 17 SW=ro HW=wo 0x0 */
            
            uint32_t resv18 : 13;
            uint32_t debug_msa_en : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_configuration;

/*section : aligner */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t tps3_n_tps2 : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t align_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t align_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t tps3_n_tps2 : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_aligner_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t lanes_not_aligned : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t bond_align_done : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t bond_align_done : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t lanes_not_aligned : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_aligner_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t lanes_not_aligned_cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t lanes_not_aligned_cnt_rst : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t lanes_align_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lanes_align_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t lanes_not_aligned_cnt_rst : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t lanes_not_aligned_cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_aligner_stats;

/*section : debug */

typedef union {
    struct {
        uint32_t state_dbg : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} dp_sink_aligner_debug_stats1;

typedef union {
    struct {
        uint32_t fifo_rd_en_dbg : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} dp_sink_aligner_debug_stats2;

typedef union {
    struct {
        uint32_t com_det_dbg : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} dp_sink_aligner_debug_stats3;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t bond_align_debug_stats : 24;           /* 23:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t bond_align_debug_stats : 24;           /* 0:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_aligner_debug_stats4;

typedef struct {
    dp_sink_aligner_debug_stats1  stats1;
    dp_sink_aligner_debug_stats2  stats2;
    dp_sink_aligner_debug_stats3  stats3;
    dp_sink_aligner_debug_stats4  stats4;
    
    
    
} dp_sink_aligner_debug;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t overflow : 4;           /* 15:12 SW=ro HW=wo 0x0 */
            uint32_t underflow : 4;           /* 11:8 SW=ro HW=wo 0x0 */
            uint32_t full : 4;           /* 7:4 SW=ro HW=wo 0x0 */
            uint32_t empty : 4;           /* 3:0 SW=ro HW=wo 0xF */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t empty : 4;           /* 0:3 SW=ro HW=wo 0xF */
            uint32_t full : 4;           /* 4:7 SW=ro HW=wo 0x0 */
            uint32_t underflow : 4;           /* 8:11 SW=ro HW=wo 0x0 */
            uint32_t overflow : 4;           /* 12:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_aligner_fifo_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_aligner_fifo_config;

typedef struct {
    dp_sink_aligner_control  control;
    dp_sink_aligner_status  status;
    dp_sink_aligner_stats  stats;
    
    union {
        dp_sink_aligner_debug s;
        uint8_t filler[0x10];
    } debug;
    dp_sink_aligner_fifo_status  fifo_status;
    dp_sink_aligner_fifo_config  fifo_config;
    
    
    
} dp_sink_aligner;


/*section : stats */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t lanes_with_8b10b_nit_err_post_cr : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t lanes_with_8b10b_dis_err_post_cr : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lanes_with_8b10b_dis_err_post_cr : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t lanes_with_8b10b_nit_err_post_cr : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats_flag_8b10b;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t lane3_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t lane2_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lane1_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lane0_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t lanes_8b10b_dis_err_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lanes_8b10b_dis_err_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t lane0_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lane1_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lane2_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lane3_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats_cnt_en_rst_8b10b_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t lane3_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t lane2_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lane1_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lane0_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t lanes_8b10b_nit_err_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lanes_8b10b_nit_err_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t lane0_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lane1_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lane2_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lane3_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats_cnt_en_rst_8b10b_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t lane3_8b10b_dis_err_post_cr_cnt : 8;           /* 31:24 SW=ro HW=wo 0x0 */
            uint32_t lane2_8b10b_dis_err_post_cr_cnt : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t lane1_8b10b_dis_err_post_cr_cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t lane0_8b10b_dis_err_post_cr_cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lane0_8b10b_dis_err_post_cr_cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t lane1_8b10b_dis_err_post_cr_cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t lane2_8b10b_dis_err_post_cr_cnt : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t lane3_8b10b_dis_err_post_cr_cnt : 8;           /* 24:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats_cnt_8b10b_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t lane3_8b10b_nit_err_post_cr_cnt : 8;           /* 31:24 SW=ro HW=wo 0x0 */
            uint32_t lane2_8b10b_nit_err_post_cr_cnt : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t lane1_8b10b_nit_err_post_cr_cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t lane0_8b10b_nit_err_post_cr_cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lane0_8b10b_nit_err_post_cr_cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t lane1_8b10b_nit_err_post_cr_cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t lane2_8b10b_nit_err_post_cr_cnt : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t lane3_8b10b_nit_err_post_cr_cnt : 8;           /* 24:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats_cnt_8b10b_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t dp_gt_rxbyterealign_cnt_rst : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t dp_gt_rxbyterealign_cnt_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_gt_rxbyterealign_cnt_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_gt_rxbyterealign_cnt_rst : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats_cnt_en_rst_gtp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t dp_gt3_rxbyterealign_cnt : 8;           /* 31:24 SW=ro HW=wo 0x0 */
            uint32_t dp_gt2_rxbyterealign_cnt : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t dp_gt1_rxbyterealign_cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t dp_gt0_rxbyterealign_cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_gt0_rxbyterealign_cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t dp_gt1_rxbyterealign_cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t dp_gt2_rxbyterealign_cnt : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t dp_gt3_rxbyterealign_cnt : 8;           /* 24:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats_cnt_gtp;

typedef struct {
    dp_sink_stats_flag_8b10b  flag_8b10b;
    dp_sink_stats_cnt_en_rst_8b10b_0  cnt_en_rst_8b10b_0;
    dp_sink_stats_cnt_en_rst_8b10b_1  cnt_en_rst_8b10b_1;
    dp_sink_stats_cnt_8b10b_0  cnt_8b10b_0;
    dp_sink_stats_cnt_8b10b_1  cnt_8b10b_1;
    dp_sink_stats_cnt_en_rst_gtp  cnt_en_rst_gtp;
    dp_sink_stats_cnt_gtp  cnt_gtp;
    
    
    
} dp_sink_stats;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_descrambler;

/*section : stream_extractor */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv25 : 7;
            uint32_t sdp_en : 1;           /* 24 SW=rw HW=ro 0x0 */
            
            uint32_t resv18 : 6;
            uint32_t drop_sdp_ptp_pkt : 1;           /* 17 SW=rw HW=ro 0x1 */
            uint32_t drop_cs_ptp_pkt : 1;           /* 16 SW=rw HW=ro 0x1 */
            
            uint32_t resv12 : 4;
            uint32_t cs_pkt_length : 12;           /* 11:0 SW=rw HW=ro 0x168 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cs_pkt_length : 12;           /* 0:11 SW=rw HW=ro 0x168 */
            
            uint32_t resv12 : 4;
            uint32_t drop_cs_ptp_pkt : 1;           /* 16 SW=rw HW=ro 0x1 */
            uint32_t drop_sdp_ptp_pkt : 1;           /* 17 SW=rw HW=ro 0x1 */
            
            uint32_t resv18 : 6;
            uint32_t sdp_en : 1;           /* 24 SW=rw HW=ro 0x0 */
            uint32_t resv25 : 7;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_cfg;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t encoder_program_done : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t tu_size : 8;           /* 7:0 SW=ro HW=wo 0x40 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tu_size : 8;           /* 0:7 SW=ro HW=wo 0x40 */
            uint32_t encoder_program_done : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_alu;

/*section : msa */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t mvid : 24;           /* 23:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mvid : 24;           /* 0:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_msa_mvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t nvid : 24;           /* 23:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nvid : 24;           /* 0:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_msa_nvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t total : 16;           /* 31:16 SW=ro HW=wo 0x0 */
            uint32_t start : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t total : 16;           /* 16:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_msa_horizontal_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t width : 16;           /* 31:16 SW=ro HW=wo 0x0 */
            uint32_t polarity : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t sync_width : 15;           /* 14:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sync_width : 15;           /* 0:14 SW=ro HW=wo 0x0 */
            uint32_t polarity : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t width : 16;           /* 16:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_msa_horizontal_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t total : 16;           /* 31:16 SW=ro HW=wo 0x0 */
            uint32_t start : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t total : 16;           /* 16:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_msa_vertical_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t height : 16;           /* 31:16 SW=ro HW=wo 0x0 */
            uint32_t polarity : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t sync_width : 15;           /* 14:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sync_width : 15;           /* 0:14 SW=ro HW=wo 0x0 */
            uint32_t polarity : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t height : 16;           /* 16:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_msa_vertical_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t y_only : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t stereo : 2;           /* 10:9 SW=ro HW=wo 0x0 */
            uint32_t int_total : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t color : 7;           /* 7:1 SW=ro HW=wo 0x0 */
            uint32_t clk_sync : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t clk_sync : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t color : 7;           /* 1:7 SW=ro HW=wo 0x0 */
            uint32_t int_total : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t stereo : 2;           /* 9:10 SW=ro HW=wo 0x0 */
            uint32_t y_only : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_msa_misc;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t msa_majority_fail : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t msa_majority_fail : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_msa_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t count : 24;           /* 31:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t count_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t count_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t count : 24;           /* 8:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_msa_fps;

typedef struct {
    dp_sink_stream_extractor_msa_mvid  mvid;
    dp_sink_stream_extractor_msa_nvid  nvid;
    dp_sink_stream_extractor_msa_horizontal_0  horizontal_0;
    dp_sink_stream_extractor_msa_horizontal_1  horizontal_1;
    dp_sink_stream_extractor_msa_vertical_0  vertical_0;
    dp_sink_stream_extractor_msa_vertical_1  vertical_1;
    dp_sink_stream_extractor_msa_misc  misc;
    dp_sink_stream_extractor_msa_status  status;
    dp_sink_stream_extractor_msa_fps  fps;
    
    
    
} dp_sink_stream_extractor_msa;


/*section : debug_msa */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t mvid : 24;           /* 23:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mvid : 24;           /* 0:23 SW=rw HW=ro 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_debug_msa_mvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t nvid : 24;           /* 23:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nvid : 24;           /* 0:23 SW=rw HW=ro 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_debug_msa_nvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t total : 16;           /* 31:16 SW=rw HW=ro 0xFA0 */
            uint32_t start : 16;           /* 15:0 SW=rw HW=ro 0x36 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 16;           /* 0:15 SW=rw HW=ro 0x36 */
            uint32_t total : 16;           /* 16:31 SW=rw HW=ro 0xFA0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_debug_msa_horizontal_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t width : 16;           /* 31:16 SW=rw HW=ro 0xF00 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t sync_width : 15;           /* 14:0 SW=rw HW=ro 0x20 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sync_width : 15;           /* 0:14 SW=rw HW=ro 0x20 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t width : 16;           /* 16:31 SW=rw HW=ro 0xF00 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_debug_msa_horizontal_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t total : 16;           /* 31:16 SW=rw HW=ro 0x8AE */
            uint32_t start : 16;           /* 15:0 SW=rw HW=ro 0x50 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 16;           /* 0:15 SW=rw HW=ro 0x50 */
            uint32_t total : 16;           /* 16:31 SW=rw HW=ro 0x8AE */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_debug_msa_vertical_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t height : 16;           /* 31:16 SW=rw HW=ro 0x870 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t sync_width : 15;           /* 14:0 SW=rw HW=ro 0x5 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sync_width : 15;           /* 0:14 SW=rw HW=ro 0x5 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t height : 16;           /* 16:31 SW=rw HW=ro 0x870 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_debug_msa_vertical_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t y_only : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t stereo : 2;           /* 10:9 SW=rw HW=ro 0x0 */
            uint32_t int_total : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t color : 7;           /* 7:1 SW=rw HW=ro 0x10 */
            uint32_t clk_sync : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t clk_sync : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t color : 7;           /* 1:7 SW=rw HW=ro 0x10 */
            uint32_t int_total : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t stereo : 2;           /* 9:10 SW=rw HW=ro 0x0 */
            uint32_t y_only : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_debug_msa_misc;

typedef struct {
    dp_sink_stream_extractor_debug_msa_mvid  mvid;
    dp_sink_stream_extractor_debug_msa_nvid  nvid;
    dp_sink_stream_extractor_debug_msa_horizontal_0  horizontal_0;
    dp_sink_stream_extractor_debug_msa_horizontal_1  horizontal_1;
    dp_sink_stream_extractor_debug_msa_vertical_0  vertical_0;
    dp_sink_stream_extractor_debug_msa_vertical_1  vertical_1;
    dp_sink_stream_extractor_debug_msa_misc  misc;
    
    
    
} dp_sink_stream_extractor_debug_msa;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t state_vid_status : 3;           /* 10:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t state_ptp : 2;           /* 1:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t state_ptp : 2;           /* 0:1 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t state_vid_status : 3;           /* 8:10 SW=ro HW=wo 0x0 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_fsm_status;

/*section : vbd */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t vbid : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t maud : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t mvid : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mvid : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t maud : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t vbid : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_vbd_vbid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t vbd_majority_fail : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vbd_majority_fail : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_vbd_status;

typedef struct {
    dp_sink_stream_extractor_vbd_vbid  vbid;
    dp_sink_stream_extractor_vbd_status  status;
    
    
    
} dp_sink_stream_extractor_vbd;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_vid_fifo_config;

/*section : sdp */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_sdp_fifo_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_sdp_tag_fifo_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t depth : 9;           /* 8:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 9;           /* 0:8 SW=ro HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_sdp_fifo_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t depth : 7;           /* 6:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 7;           /* 0:6 SW=ro HW=wo 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_sdp_tag_fifo_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t ss_se_same_cycle_byte_num : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ss_se_same_cycle_byte_num : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_sdp_debug;

typedef struct {
    dp_sink_stream_extractor_sdp_fifo_status  fifo_status;
    dp_sink_stream_extractor_sdp_tag_fifo_status  tag_fifo_status;
    dp_sink_stream_extractor_sdp_fifo_config  fifo_config;
    dp_sink_stream_extractor_sdp_tag_fifo_config  tag_fifo_config;
    dp_sink_stream_extractor_sdp_debug  debug;
    
    
    
} dp_sink_stream_extractor_sdp;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t en : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv24 : 7;
            uint32_t blue : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t green : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t red : 8;           /* 7:0 SW=rw HW=ro 0xFF */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t red : 8;           /* 0:7 SW=rw HW=ro 0xFF */
            uint32_t green : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t blue : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            
            uint32_t resv24 : 7;
            uint32_t en : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_pixgen;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t idle_pattern_cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t idle_pattern_cnt_rst : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t idle_pattern_cnt_rst : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t idle_pattern_cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stream_extractor_debug;

typedef struct {
    dp_sink_stream_extractor_cfg  cfg;
    dp_sink_stream_extractor_alu  alu;
    
    union {
        dp_sink_stream_extractor_msa s;
        uint8_t filler[0x24];
    } msa;
    
    union {
        dp_sink_stream_extractor_debug_msa s;
        uint8_t filler[0x1C];
    } debug_msa;
    dp_sink_stream_extractor_fsm_status  fsm_status;
    
    union {
        dp_sink_stream_extractor_vbd s;
        uint8_t filler[0x8];
    } vbd;
    dp_sink_stream_extractor_vid_fifo_config  vid_fifo_config;
    
    union {
        dp_sink_stream_extractor_sdp s;
        uint8_t filler[0x14];
    } sdp;
    dp_sink_stream_extractor_pixgen  pixgen;
    dp_sink_stream_extractor_debug  debug;
    
    
    
} dp_sink_stream_extractor;


/*section : encoder_vfr */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t handshake : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t handshake : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_encoder_vfr_handshake;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t last_early : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t last_late : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t first : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t first : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t last_late : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t last_early : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_encoder_vfr_pixel;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t last_early : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t last_late : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t first : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t first : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t last_late : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t last_early : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_encoder_vfr_line;

typedef struct {
    dp_sink_encoder_vfr_handshake  handshake;
    dp_sink_encoder_vfr_pixel  pixel;
    dp_sink_encoder_vfr_line  line;
    
    
    
} dp_sink_encoder_vfr;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv23 : 9;
            uint32_t msa_majority_fail : 1;           /* 22 SW=rw HW=ro 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_sr_full : 1;           /* 20 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_level_watermark : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_level : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_underflow : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_overflow : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_empty : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_full : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_sr_full : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_level_watermark : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_level : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_underflow : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_overflow : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_empty : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_full : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_sr_full : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_level_watermark : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_level : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_underflow : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_overflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_empty : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_full : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_full : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_empty : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_overflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_underflow : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_level : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_level_watermark : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_sr_full : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_full : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_empty : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_overflow : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_underflow : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_level : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_level_watermark : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_sr_full : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_full : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_empty : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_overflow : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_underflow : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_level : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_level_watermark : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_sr_full : 1;           /* 20 SW=rw HW=ro 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t msa_majority_fail : 1;           /* 22 SW=rw HW=ro 0x0 */
            uint32_t resv23 : 9;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c0_fifo_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c0_fifo_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c0_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c0_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_level : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_level : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c0_fifo_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_level_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_level_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c0_fifo_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_sr_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_sr_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c0_sr_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c1_fifo_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c1_fifo_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c1_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c1_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_level : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_level : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c1_fifo_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_level_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_level_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c1_fifo_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_sr_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_sr_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c1_sr_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c2_fifo_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c2_fifo_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c2_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c2_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_level : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_level : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c2_fifo_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_level_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_level_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c2_fifo_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_sr_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_sr_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vid_c2_sr_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vbd_majority_fail : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vbd_majority_fail : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_vbd_majority_fail;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t msa_majority_fail : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t msa_majority_fail : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats0_msa_majority_fail;

typedef struct {
    dp_sink_stats0_rd2clr_config  rd2clr_config;
    dp_sink_stats0_vid_c0_fifo_full  vid_c0_fifo_full;
    dp_sink_stats0_vid_c0_fifo_empty  vid_c0_fifo_empty;
    dp_sink_stats0_vid_c0_fifo_overflow  vid_c0_fifo_overflow;
    dp_sink_stats0_vid_c0_fifo_underflow  vid_c0_fifo_underflow;
    dp_sink_stats0_vid_c0_fifo_level  vid_c0_fifo_level;
    dp_sink_stats0_vid_c0_fifo_level_watermark  vid_c0_fifo_level_watermark;
    dp_sink_stats0_vid_c0_sr_full  vid_c0_sr_full;
    dp_sink_stats0_vid_c1_fifo_full  vid_c1_fifo_full;
    dp_sink_stats0_vid_c1_fifo_empty  vid_c1_fifo_empty;
    dp_sink_stats0_vid_c1_fifo_overflow  vid_c1_fifo_overflow;
    dp_sink_stats0_vid_c1_fifo_underflow  vid_c1_fifo_underflow;
    dp_sink_stats0_vid_c1_fifo_level  vid_c1_fifo_level;
    dp_sink_stats0_vid_c1_fifo_level_watermark  vid_c1_fifo_level_watermark;
    dp_sink_stats0_vid_c1_sr_full  vid_c1_sr_full;
    dp_sink_stats0_vid_c2_fifo_full  vid_c2_fifo_full;
    dp_sink_stats0_vid_c2_fifo_empty  vid_c2_fifo_empty;
    dp_sink_stats0_vid_c2_fifo_overflow  vid_c2_fifo_overflow;
    dp_sink_stats0_vid_c2_fifo_underflow  vid_c2_fifo_underflow;
    dp_sink_stats0_vid_c2_fifo_level  vid_c2_fifo_level;
    dp_sink_stats0_vid_c2_fifo_level_watermark  vid_c2_fifo_level_watermark;
    dp_sink_stats0_vid_c2_sr_full  vid_c2_sr_full;
    dp_sink_stats0_vbd_majority_fail  vbd_majority_fail;
    dp_sink_stats0_msa_majority_fail  msa_majority_fail;
    
    
    
} dp_sink_stats0;


/*section : stats1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv15 : 17;
            uint32_t sdp_tag_fifo_level_watermark : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_level : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_empty : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_full : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_level_watermark : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_level : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_empty : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_full : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t sdp_ss_se_same_cycle : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t sdp_pkt_sent_cnt_watermark : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t sdp_pkt_sent_cnt : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_pkt_sent_cnt : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t sdp_pkt_sent_cnt_watermark : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t sdp_ss_se_same_cycle : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_full : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_empty : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_level : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_level_watermark : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_full : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_empty : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_level : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_level_watermark : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t resv15 : 17;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_pkt_sent_cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_pkt_sent_cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_pkt_sent_cnt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_pkt_sent_cnt_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_pkt_sent_cnt_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_pkt_sent_cnt_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_ss_se_same_cycle : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_ss_se_same_cycle : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_ss_se_same_cycle;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_fifo_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_fifo_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_fifo_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_fifo_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t sdp_fifo_level : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_level : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_fifo_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t sdp_fifo_level_watermark : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_level_watermark : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_fifo_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_tag_fifo_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_tag_fifo_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_tag_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_tag_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_level : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_level : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_tag_fifo_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_level_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_level_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_stats1_sdp_tag_fifo_level_watermark;

typedef struct {
    dp_sink_stats1_rd2clr_config  rd2clr_config;
    dp_sink_stats1_sdp_pkt_sent_cnt  sdp_pkt_sent_cnt;
    dp_sink_stats1_sdp_pkt_sent_cnt_watermark  sdp_pkt_sent_cnt_watermark;
    dp_sink_stats1_sdp_ss_se_same_cycle  sdp_ss_se_same_cycle;
    dp_sink_stats1_sdp_fifo_full  sdp_fifo_full;
    dp_sink_stats1_sdp_fifo_empty  sdp_fifo_empty;
    dp_sink_stats1_sdp_fifo_overflow  sdp_fifo_overflow;
    dp_sink_stats1_sdp_fifo_underflow  sdp_fifo_underflow;
    dp_sink_stats1_sdp_fifo_level  sdp_fifo_level;
    dp_sink_stats1_sdp_fifo_level_watermark  sdp_fifo_level_watermark;
    dp_sink_stats1_sdp_tag_fifo_full  sdp_tag_fifo_full;
    dp_sink_stats1_sdp_tag_fifo_empty  sdp_tag_fifo_empty;
    dp_sink_stats1_sdp_tag_fifo_overflow  sdp_tag_fifo_overflow;
    dp_sink_stats1_sdp_tag_fifo_underflow  sdp_tag_fifo_underflow;
    dp_sink_stats1_sdp_tag_fifo_level  sdp_tag_fifo_level;
    dp_sink_stats1_sdp_tag_fifo_level_watermark  sdp_tag_fifo_level_watermark;
    
    
    
} dp_sink_stats1;


/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t audiomute : 1;           /* 31 SW=rw HW=na 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=rw HW=na 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=rw HW=na 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=rw HW=na 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_not_aligned : 1;           /* 25 SW=rw HW=na 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=rw HW=na 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t msa_majority_fail : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t tu_size_rdy : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tu_size_rdy : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t msa_majority_fail : 1;           /* 2 SW=rw HW=na 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t lanes_not_aligned : 1;           /* 25 SW=rw HW=na 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=rw HW=na 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=rw HW=na 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=rw HW=na 0x0 */
            uint32_t audiomute : 1;           /* 31 SW=rw HW=na 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t audiomute : 1;           /* 31 SW=r/w1c HW=wo 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=r/w1c HW=wo 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_not_aligned : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t msa_majority_fail : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t tu_size_rdy : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tu_size_rdy : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t msa_majority_fail : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t lanes_not_aligned : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=r/w1c HW=wo 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=r/w1c HW=wo 0x0 */
            uint32_t audiomute : 1;           /* 31 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t audiomute : 1;           /* 31 SW=ro HW=na 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=ro HW=na 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=ro HW=na 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=ro HW=na 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_not_aligned : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=ro HW=na 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t msa_majority_fail : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t tu_size_rdy : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tu_size_rdy : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t msa_majority_fail : 1;           /* 2 SW=ro HW=na 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t lanes_not_aligned : 1;           /* 25 SW=ro HW=na 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=ro HW=na 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=ro HW=na 0x0 */
            uint32_t audiomute : 1;           /* 31 SW=ro HW=na 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t audiomute : 1;           /* 31 SW=ro HW=wo 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=ro HW=wo 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_not_aligned : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t msa_majority_fail : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t tu_size_rdy : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tu_size_rdy : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t msa_majority_fail : 1;           /* 2 SW=ro HW=wo 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=ro HW=wo 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t lanes_not_aligned : 1;           /* 25 SW=ro HW=wo 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=ro HW=wo 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t audiomute : 1;           /* 31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_sink_irq_raw;

typedef struct {
    dp_sink_irq_enable  enable;
    dp_sink_irq_pending  pending;
    dp_sink_irq_pending_irq  pending_irq;
    dp_sink_irq_raw  raw;
    
    
    
} dp_sink_irq;


typedef struct {
    dp_sink_version  version;
    dp_sink_configuration  configuration;
    
    union {
        dp_sink_aligner s;
        uint8_t filler[0x24];
    } aligner;
    
    union {
        dp_sink_stats s;
        uint8_t filler[0x1C];
    } stats;
    dp_sink_descrambler  descrambler;
    
    union {
        dp_sink_stream_extractor s;
        uint8_t filler[0x74];
    } stream_extractor;
    
    union {
        dp_sink_encoder_vfr s;
        uint8_t filler[0xC];
    } encoder_vfr;
    
    union {
        dp_sink_stats0 s;
        uint8_t filler[0x60];
    } stats0;
    
    union {
        dp_sink_stats1 s;
        uint8_t filler[0x40];
    } stats1;
    
    union {
        dp_sink_irq s;
        uint8_t filler[0x10];
    } irq;
    
    
    uint8_t filler11[0x84];
    
    
} dp_sink_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define dp_sink_version_READMASK 0xFFFFFF
#define dp_sink_version_WRITEMASK 0x0
#define dp_sink_version_VOLATILEMASK 0x0
#define dp_sink_version_RESETMASK 0xFFFFFF
#define dp_sink_version_DEFAULT 0x00080900

#define dp_sink_configuration_READMASK 0x8003C7FF
#define dp_sink_configuration_WRITEMASK 0x800000FF
#define dp_sink_configuration_VOLATILEMASK 0x3C700
#define dp_sink_configuration_RESETMASK 0x8003C7FF
#define dp_sink_configuration_DEFAULT 0x0000003B

#define dp_sink_aligner_control_READMASK 0x3
#define dp_sink_aligner_control_WRITEMASK 0x3
#define dp_sink_aligner_control_VOLATILEMASK 0x0
#define dp_sink_aligner_control_RESETMASK 0x3
#define dp_sink_aligner_control_DEFAULT 0x00000000

#define dp_sink_aligner_status_READMASK 0x3
#define dp_sink_aligner_status_WRITEMASK 0x0
#define dp_sink_aligner_status_VOLATILEMASK 0x3
#define dp_sink_aligner_status_RESETMASK 0x3
#define dp_sink_aligner_status_DEFAULT 0x00000000

#define dp_sink_aligner_stats_READMASK 0xFF03
#define dp_sink_aligner_stats_WRITEMASK 0x3
#define dp_sink_aligner_stats_VOLATILEMASK 0xFF00
#define dp_sink_aligner_stats_RESETMASK 0xFF03
#define dp_sink_aligner_stats_DEFAULT 0x00000000

#define dp_sink_aligner_debug_stats1_READMASK 0xFFFFFFFF
#define dp_sink_aligner_debug_stats1_WRITEMASK 0x0
#define dp_sink_aligner_debug_stats1_VOLATILEMASK 0xFFFFFFFF
#define dp_sink_aligner_debug_stats1_RESETMASK 0xFFFFFFFF
#define dp_sink_aligner_debug_stats1_DEFAULT 0x00000000

#define dp_sink_aligner_debug_stats2_READMASK 0xFFFFFFFF
#define dp_sink_aligner_debug_stats2_WRITEMASK 0x0
#define dp_sink_aligner_debug_stats2_VOLATILEMASK 0xFFFFFFFF
#define dp_sink_aligner_debug_stats2_RESETMASK 0xFFFFFFFF
#define dp_sink_aligner_debug_stats2_DEFAULT 0x00000000

#define dp_sink_aligner_debug_stats3_READMASK 0xFFFFFFFF
#define dp_sink_aligner_debug_stats3_WRITEMASK 0x0
#define dp_sink_aligner_debug_stats3_VOLATILEMASK 0xFFFFFFFF
#define dp_sink_aligner_debug_stats3_RESETMASK 0xFFFFFFFF
#define dp_sink_aligner_debug_stats3_DEFAULT 0x00000000

#define dp_sink_aligner_debug_stats4_READMASK 0xFFFFFF
#define dp_sink_aligner_debug_stats4_WRITEMASK 0x0
#define dp_sink_aligner_debug_stats4_VOLATILEMASK 0xFFFFFF
#define dp_sink_aligner_debug_stats4_RESETMASK 0xFFFFFF
#define dp_sink_aligner_debug_stats4_DEFAULT 0x00000000

#define dp_sink_aligner_fifo_status_READMASK 0xFFFF
#define dp_sink_aligner_fifo_status_WRITEMASK 0x0
#define dp_sink_aligner_fifo_status_VOLATILEMASK 0xFFFF
#define dp_sink_aligner_fifo_status_RESETMASK 0xFFFF
#define dp_sink_aligner_fifo_status_DEFAULT 0x0000000F

#define dp_sink_aligner_fifo_config_READMASK 0xFF
#define dp_sink_aligner_fifo_config_WRITEMASK 0x0
#define dp_sink_aligner_fifo_config_VOLATILEMASK 0xFF
#define dp_sink_aligner_fifo_config_RESETMASK 0xFF
#define dp_sink_aligner_fifo_config_DEFAULT 0x00000000

#define dp_sink_stats_flag_8b10b_READMASK 0x3
#define dp_sink_stats_flag_8b10b_WRITEMASK 0x0
#define dp_sink_stats_flag_8b10b_VOLATILEMASK 0x3
#define dp_sink_stats_flag_8b10b_RESETMASK 0x3
#define dp_sink_stats_flag_8b10b_DEFAULT 0x00000000

#define dp_sink_stats_cnt_en_rst_8b10b_0_READMASK 0xF01
#define dp_sink_stats_cnt_en_rst_8b10b_0_WRITEMASK 0xF01
#define dp_sink_stats_cnt_en_rst_8b10b_0_VOLATILEMASK 0x0
#define dp_sink_stats_cnt_en_rst_8b10b_0_RESETMASK 0xF01
#define dp_sink_stats_cnt_en_rst_8b10b_0_DEFAULT 0x00000000

#define dp_sink_stats_cnt_en_rst_8b10b_1_READMASK 0xF01
#define dp_sink_stats_cnt_en_rst_8b10b_1_WRITEMASK 0xF01
#define dp_sink_stats_cnt_en_rst_8b10b_1_VOLATILEMASK 0x0
#define dp_sink_stats_cnt_en_rst_8b10b_1_RESETMASK 0xF01
#define dp_sink_stats_cnt_en_rst_8b10b_1_DEFAULT 0x00000000

#define dp_sink_stats_cnt_8b10b_0_READMASK 0xFFFFFFFF
#define dp_sink_stats_cnt_8b10b_0_WRITEMASK 0x0
#define dp_sink_stats_cnt_8b10b_0_VOLATILEMASK 0xFFFFFFFF
#define dp_sink_stats_cnt_8b10b_0_RESETMASK 0xFFFFFFFF
#define dp_sink_stats_cnt_8b10b_0_DEFAULT 0x00000000

#define dp_sink_stats_cnt_8b10b_1_READMASK 0xFFFFFFFF
#define dp_sink_stats_cnt_8b10b_1_WRITEMASK 0x0
#define dp_sink_stats_cnt_8b10b_1_VOLATILEMASK 0xFFFFFFFF
#define dp_sink_stats_cnt_8b10b_1_RESETMASK 0xFFFFFFFF
#define dp_sink_stats_cnt_8b10b_1_DEFAULT 0x00000000

#define dp_sink_stats_cnt_en_rst_gtp_READMASK 0x3
#define dp_sink_stats_cnt_en_rst_gtp_WRITEMASK 0x3
#define dp_sink_stats_cnt_en_rst_gtp_VOLATILEMASK 0x0
#define dp_sink_stats_cnt_en_rst_gtp_RESETMASK 0x3
#define dp_sink_stats_cnt_en_rst_gtp_DEFAULT 0x00000000

#define dp_sink_stats_cnt_gtp_READMASK 0xFFFFFFFF
#define dp_sink_stats_cnt_gtp_WRITEMASK 0x0
#define dp_sink_stats_cnt_gtp_VOLATILEMASK 0xFFFFFFFF
#define dp_sink_stats_cnt_gtp_RESETMASK 0xFFFFFFFF
#define dp_sink_stats_cnt_gtp_DEFAULT 0x00000000

#define dp_sink_descrambler_READMASK 0x1
#define dp_sink_descrambler_WRITEMASK 0x1
#define dp_sink_descrambler_VOLATILEMASK 0x0
#define dp_sink_descrambler_RESETMASK 0x1
#define dp_sink_descrambler_DEFAULT 0x00000000

#define dp_sink_stream_extractor_cfg_READMASK 0x1030FFF
#define dp_sink_stream_extractor_cfg_WRITEMASK 0x1030FFF
#define dp_sink_stream_extractor_cfg_VOLATILEMASK 0x0
#define dp_sink_stream_extractor_cfg_RESETMASK 0x1030FFF
#define dp_sink_stream_extractor_cfg_DEFAULT 0x00030168

#define dp_sink_stream_extractor_alu_READMASK 0x1FF
#define dp_sink_stream_extractor_alu_WRITEMASK 0x100
#define dp_sink_stream_extractor_alu_VOLATILEMASK 0xFF
#define dp_sink_stream_extractor_alu_RESETMASK 0x1FF
#define dp_sink_stream_extractor_alu_DEFAULT 0x00000040

#define dp_sink_stream_extractor_msa_mvid_READMASK 0xFFFFFF
#define dp_sink_stream_extractor_msa_mvid_WRITEMASK 0x0
#define dp_sink_stream_extractor_msa_mvid_VOLATILEMASK 0xFFFFFF
#define dp_sink_stream_extractor_msa_mvid_RESETMASK 0xFFFFFF
#define dp_sink_stream_extractor_msa_mvid_DEFAULT 0x00000000

#define dp_sink_stream_extractor_msa_nvid_READMASK 0xFFFFFF
#define dp_sink_stream_extractor_msa_nvid_WRITEMASK 0x0
#define dp_sink_stream_extractor_msa_nvid_VOLATILEMASK 0xFFFFFF
#define dp_sink_stream_extractor_msa_nvid_RESETMASK 0xFFFFFF
#define dp_sink_stream_extractor_msa_nvid_DEFAULT 0x00000000

#define dp_sink_stream_extractor_msa_horizontal_0_READMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_horizontal_0_WRITEMASK 0x0
#define dp_sink_stream_extractor_msa_horizontal_0_VOLATILEMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_horizontal_0_RESETMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_horizontal_0_DEFAULT 0x00000000

#define dp_sink_stream_extractor_msa_horizontal_1_READMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_horizontal_1_WRITEMASK 0x0
#define dp_sink_stream_extractor_msa_horizontal_1_VOLATILEMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_horizontal_1_RESETMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_horizontal_1_DEFAULT 0x00000000

#define dp_sink_stream_extractor_msa_vertical_0_READMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_vertical_0_WRITEMASK 0x0
#define dp_sink_stream_extractor_msa_vertical_0_VOLATILEMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_vertical_0_RESETMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_vertical_0_DEFAULT 0x00000000

#define dp_sink_stream_extractor_msa_vertical_1_READMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_vertical_1_WRITEMASK 0x0
#define dp_sink_stream_extractor_msa_vertical_1_VOLATILEMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_vertical_1_RESETMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_msa_vertical_1_DEFAULT 0x00000000

#define dp_sink_stream_extractor_msa_misc_READMASK 0xFFF
#define dp_sink_stream_extractor_msa_misc_WRITEMASK 0x0
#define dp_sink_stream_extractor_msa_misc_VOLATILEMASK 0xFFF
#define dp_sink_stream_extractor_msa_misc_RESETMASK 0xFFF
#define dp_sink_stream_extractor_msa_misc_DEFAULT 0x00000000

#define dp_sink_stream_extractor_msa_status_READMASK 0x1
#define dp_sink_stream_extractor_msa_status_WRITEMASK 0x0
#define dp_sink_stream_extractor_msa_status_VOLATILEMASK 0x1
#define dp_sink_stream_extractor_msa_status_RESETMASK 0x1
#define dp_sink_stream_extractor_msa_status_DEFAULT 0x00000000

#define dp_sink_stream_extractor_msa_fps_READMASK 0xFFFFFF01
#define dp_sink_stream_extractor_msa_fps_WRITEMASK 0x1
#define dp_sink_stream_extractor_msa_fps_VOLATILEMASK 0xFFFFFF00
#define dp_sink_stream_extractor_msa_fps_RESETMASK 0xFFFFFF01
#define dp_sink_stream_extractor_msa_fps_DEFAULT 0x00000000

#define dp_sink_stream_extractor_debug_msa_mvid_READMASK 0xFFFFFF
#define dp_sink_stream_extractor_debug_msa_mvid_WRITEMASK 0xFFFFFF
#define dp_sink_stream_extractor_debug_msa_mvid_VOLATILEMASK 0x0
#define dp_sink_stream_extractor_debug_msa_mvid_RESETMASK 0xFFFFFF
#define dp_sink_stream_extractor_debug_msa_mvid_DEFAULT 0x00000000

#define dp_sink_stream_extractor_debug_msa_nvid_READMASK 0xFFFFFF
#define dp_sink_stream_extractor_debug_msa_nvid_WRITEMASK 0xFFFFFF
#define dp_sink_stream_extractor_debug_msa_nvid_VOLATILEMASK 0x0
#define dp_sink_stream_extractor_debug_msa_nvid_RESETMASK 0xFFFFFF
#define dp_sink_stream_extractor_debug_msa_nvid_DEFAULT 0x00000000

#define dp_sink_stream_extractor_debug_msa_horizontal_0_READMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_horizontal_0_WRITEMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_horizontal_0_VOLATILEMASK 0x0
#define dp_sink_stream_extractor_debug_msa_horizontal_0_RESETMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_horizontal_0_DEFAULT 0x0FA00036

#define dp_sink_stream_extractor_debug_msa_horizontal_1_READMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_horizontal_1_WRITEMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_horizontal_1_VOLATILEMASK 0x0
#define dp_sink_stream_extractor_debug_msa_horizontal_1_RESETMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_horizontal_1_DEFAULT 0x0F000020

#define dp_sink_stream_extractor_debug_msa_vertical_0_READMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_vertical_0_WRITEMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_vertical_0_VOLATILEMASK 0x0
#define dp_sink_stream_extractor_debug_msa_vertical_0_RESETMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_vertical_0_DEFAULT 0x08AE0050

#define dp_sink_stream_extractor_debug_msa_vertical_1_READMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_vertical_1_WRITEMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_vertical_1_VOLATILEMASK 0x0
#define dp_sink_stream_extractor_debug_msa_vertical_1_RESETMASK 0xFFFFFFFF
#define dp_sink_stream_extractor_debug_msa_vertical_1_DEFAULT 0x08700005

#define dp_sink_stream_extractor_debug_msa_misc_READMASK 0xFFF
#define dp_sink_stream_extractor_debug_msa_misc_WRITEMASK 0xFFF
#define dp_sink_stream_extractor_debug_msa_misc_VOLATILEMASK 0x0
#define dp_sink_stream_extractor_debug_msa_misc_RESETMASK 0xFFF
#define dp_sink_stream_extractor_debug_msa_misc_DEFAULT 0x00000020

#define dp_sink_stream_extractor_fsm_status_READMASK 0x703
#define dp_sink_stream_extractor_fsm_status_WRITEMASK 0x0
#define dp_sink_stream_extractor_fsm_status_VOLATILEMASK 0x703
#define dp_sink_stream_extractor_fsm_status_RESETMASK 0x703
#define dp_sink_stream_extractor_fsm_status_DEFAULT 0x00000000

#define dp_sink_stream_extractor_vbd_vbid_READMASK 0xFFFFFF
#define dp_sink_stream_extractor_vbd_vbid_WRITEMASK 0x0
#define dp_sink_stream_extractor_vbd_vbid_VOLATILEMASK 0xFFFFFF
#define dp_sink_stream_extractor_vbd_vbid_RESETMASK 0xFFFFFF
#define dp_sink_stream_extractor_vbd_vbid_DEFAULT 0x00000000

#define dp_sink_stream_extractor_vbd_status_READMASK 0x1
#define dp_sink_stream_extractor_vbd_status_WRITEMASK 0x0
#define dp_sink_stream_extractor_vbd_status_VOLATILEMASK 0x1
#define dp_sink_stream_extractor_vbd_status_RESETMASK 0x1
#define dp_sink_stream_extractor_vbd_status_DEFAULT 0x00000000

#define dp_sink_stream_extractor_vid_fifo_config_READMASK 0xFF
#define dp_sink_stream_extractor_vid_fifo_config_WRITEMASK 0x0
#define dp_sink_stream_extractor_vid_fifo_config_VOLATILEMASK 0xFF
#define dp_sink_stream_extractor_vid_fifo_config_RESETMASK 0xFF
#define dp_sink_stream_extractor_vid_fifo_config_DEFAULT 0x00000000

#define dp_sink_stream_extractor_sdp_fifo_status_READMASK 0xF
#define dp_sink_stream_extractor_sdp_fifo_status_WRITEMASK 0x0
#define dp_sink_stream_extractor_sdp_fifo_status_VOLATILEMASK 0xF
#define dp_sink_stream_extractor_sdp_fifo_status_RESETMASK 0xF
#define dp_sink_stream_extractor_sdp_fifo_status_DEFAULT 0x00000000

#define dp_sink_stream_extractor_sdp_tag_fifo_status_READMASK 0xF
#define dp_sink_stream_extractor_sdp_tag_fifo_status_WRITEMASK 0x0
#define dp_sink_stream_extractor_sdp_tag_fifo_status_VOLATILEMASK 0xF
#define dp_sink_stream_extractor_sdp_tag_fifo_status_RESETMASK 0xF
#define dp_sink_stream_extractor_sdp_tag_fifo_status_DEFAULT 0x00000000

#define dp_sink_stream_extractor_sdp_fifo_config_READMASK 0x1FF
#define dp_sink_stream_extractor_sdp_fifo_config_WRITEMASK 0x0
#define dp_sink_stream_extractor_sdp_fifo_config_VOLATILEMASK 0x1FF
#define dp_sink_stream_extractor_sdp_fifo_config_RESETMASK 0x1FF
#define dp_sink_stream_extractor_sdp_fifo_config_DEFAULT 0x00000000

#define dp_sink_stream_extractor_sdp_tag_fifo_config_READMASK 0x7F
#define dp_sink_stream_extractor_sdp_tag_fifo_config_WRITEMASK 0x0
#define dp_sink_stream_extractor_sdp_tag_fifo_config_VOLATILEMASK 0x7F
#define dp_sink_stream_extractor_sdp_tag_fifo_config_RESETMASK 0x7F
#define dp_sink_stream_extractor_sdp_tag_fifo_config_DEFAULT 0x00000000

#define dp_sink_stream_extractor_sdp_debug_READMASK 0xFF
#define dp_sink_stream_extractor_sdp_debug_WRITEMASK 0x0
#define dp_sink_stream_extractor_sdp_debug_VOLATILEMASK 0xFF
#define dp_sink_stream_extractor_sdp_debug_RESETMASK 0xFF
#define dp_sink_stream_extractor_sdp_debug_DEFAULT 0x00000000

#define dp_sink_stream_extractor_pixgen_READMASK 0x80FFFFFF
#define dp_sink_stream_extractor_pixgen_WRITEMASK 0x80FFFFFF
#define dp_sink_stream_extractor_pixgen_VOLATILEMASK 0x0
#define dp_sink_stream_extractor_pixgen_RESETMASK 0x80FFFFFF
#define dp_sink_stream_extractor_pixgen_DEFAULT 0x000000FF

#define dp_sink_stream_extractor_debug_READMASK 0xFF01
#define dp_sink_stream_extractor_debug_WRITEMASK 0x1
#define dp_sink_stream_extractor_debug_VOLATILEMASK 0xFF00
#define dp_sink_stream_extractor_debug_RESETMASK 0xFF01
#define dp_sink_stream_extractor_debug_DEFAULT 0x00000000

#define dp_sink_encoder_vfr_handshake_READMASK 0xFF
#define dp_sink_encoder_vfr_handshake_WRITEMASK 0x0
#define dp_sink_encoder_vfr_handshake_VOLATILEMASK 0xFF
#define dp_sink_encoder_vfr_handshake_RESETMASK 0xFF
#define dp_sink_encoder_vfr_handshake_DEFAULT 0x00000000

#define dp_sink_encoder_vfr_pixel_READMASK 0xFFFFFF
#define dp_sink_encoder_vfr_pixel_WRITEMASK 0x0
#define dp_sink_encoder_vfr_pixel_VOLATILEMASK 0xFFFFFF
#define dp_sink_encoder_vfr_pixel_RESETMASK 0xFFFFFF
#define dp_sink_encoder_vfr_pixel_DEFAULT 0x00000000

#define dp_sink_encoder_vfr_line_READMASK 0xFFFFFF
#define dp_sink_encoder_vfr_line_WRITEMASK 0x0
#define dp_sink_encoder_vfr_line_VOLATILEMASK 0xFFFFFF
#define dp_sink_encoder_vfr_line_RESETMASK 0xFFFFFF
#define dp_sink_encoder_vfr_line_DEFAULT 0x00000000

#define dp_sink_stats0_rd2clr_config_READMASK 0x7FFFFF
#define dp_sink_stats0_rd2clr_config_WRITEMASK 0x7FFFFF
#define dp_sink_stats0_rd2clr_config_VOLATILEMASK 0x0
#define dp_sink_stats0_rd2clr_config_RESETMASK 0x7FFFFF
#define dp_sink_stats0_rd2clr_config_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c0_fifo_full_READMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_full_WRITEMASK 0x0
#define dp_sink_stats0_vid_c0_fifo_full_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_full_RESETMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_full_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c0_fifo_empty_READMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_empty_WRITEMASK 0x0
#define dp_sink_stats0_vid_c0_fifo_empty_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_empty_RESETMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_empty_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c0_fifo_overflow_READMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_overflow_WRITEMASK 0x0
#define dp_sink_stats0_vid_c0_fifo_overflow_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_overflow_RESETMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_overflow_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c0_fifo_underflow_READMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_underflow_WRITEMASK 0x0
#define dp_sink_stats0_vid_c0_fifo_underflow_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_underflow_RESETMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_underflow_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c0_fifo_level_READMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_level_WRITEMASK 0x0
#define dp_sink_stats0_vid_c0_fifo_level_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_level_RESETMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_level_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c0_fifo_level_watermark_READMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_level_watermark_WRITEMASK 0x0
#define dp_sink_stats0_vid_c0_fifo_level_watermark_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_level_watermark_RESETMASK 0xFF
#define dp_sink_stats0_vid_c0_fifo_level_watermark_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c0_sr_full_READMASK 0xFF
#define dp_sink_stats0_vid_c0_sr_full_WRITEMASK 0x0
#define dp_sink_stats0_vid_c0_sr_full_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c0_sr_full_RESETMASK 0xFF
#define dp_sink_stats0_vid_c0_sr_full_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c1_fifo_full_READMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_full_WRITEMASK 0x0
#define dp_sink_stats0_vid_c1_fifo_full_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_full_RESETMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_full_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c1_fifo_empty_READMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_empty_WRITEMASK 0x0
#define dp_sink_stats0_vid_c1_fifo_empty_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_empty_RESETMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_empty_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c1_fifo_overflow_READMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_overflow_WRITEMASK 0x0
#define dp_sink_stats0_vid_c1_fifo_overflow_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_overflow_RESETMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_overflow_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c1_fifo_underflow_READMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_underflow_WRITEMASK 0x0
#define dp_sink_stats0_vid_c1_fifo_underflow_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_underflow_RESETMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_underflow_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c1_fifo_level_READMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_level_WRITEMASK 0x0
#define dp_sink_stats0_vid_c1_fifo_level_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_level_RESETMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_level_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c1_fifo_level_watermark_READMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_level_watermark_WRITEMASK 0x0
#define dp_sink_stats0_vid_c1_fifo_level_watermark_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_level_watermark_RESETMASK 0xFF
#define dp_sink_stats0_vid_c1_fifo_level_watermark_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c1_sr_full_READMASK 0xFF
#define dp_sink_stats0_vid_c1_sr_full_WRITEMASK 0x0
#define dp_sink_stats0_vid_c1_sr_full_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c1_sr_full_RESETMASK 0xFF
#define dp_sink_stats0_vid_c1_sr_full_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c2_fifo_full_READMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_full_WRITEMASK 0x0
#define dp_sink_stats0_vid_c2_fifo_full_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_full_RESETMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_full_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c2_fifo_empty_READMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_empty_WRITEMASK 0x0
#define dp_sink_stats0_vid_c2_fifo_empty_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_empty_RESETMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_empty_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c2_fifo_overflow_READMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_overflow_WRITEMASK 0x0
#define dp_sink_stats0_vid_c2_fifo_overflow_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_overflow_RESETMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_overflow_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c2_fifo_underflow_READMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_underflow_WRITEMASK 0x0
#define dp_sink_stats0_vid_c2_fifo_underflow_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_underflow_RESETMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_underflow_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c2_fifo_level_READMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_level_WRITEMASK 0x0
#define dp_sink_stats0_vid_c2_fifo_level_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_level_RESETMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_level_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c2_fifo_level_watermark_READMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_level_watermark_WRITEMASK 0x0
#define dp_sink_stats0_vid_c2_fifo_level_watermark_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_level_watermark_RESETMASK 0xFF
#define dp_sink_stats0_vid_c2_fifo_level_watermark_DEFAULT 0x00000000

#define dp_sink_stats0_vid_c2_sr_full_READMASK 0xFF
#define dp_sink_stats0_vid_c2_sr_full_WRITEMASK 0x0
#define dp_sink_stats0_vid_c2_sr_full_VOLATILEMASK 0xFF
#define dp_sink_stats0_vid_c2_sr_full_RESETMASK 0xFF
#define dp_sink_stats0_vid_c2_sr_full_DEFAULT 0x00000000

#define dp_sink_stats0_vbd_majority_fail_READMASK 0xFF
#define dp_sink_stats0_vbd_majority_fail_WRITEMASK 0x0
#define dp_sink_stats0_vbd_majority_fail_VOLATILEMASK 0xFF
#define dp_sink_stats0_vbd_majority_fail_RESETMASK 0xFF
#define dp_sink_stats0_vbd_majority_fail_DEFAULT 0x00000000

#define dp_sink_stats0_msa_majority_fail_READMASK 0xFF
#define dp_sink_stats0_msa_majority_fail_WRITEMASK 0x0
#define dp_sink_stats0_msa_majority_fail_VOLATILEMASK 0xFF
#define dp_sink_stats0_msa_majority_fail_RESETMASK 0xFF
#define dp_sink_stats0_msa_majority_fail_DEFAULT 0x00000000

#define dp_sink_stats1_rd2clr_config_READMASK 0x7FFF
#define dp_sink_stats1_rd2clr_config_WRITEMASK 0x7FFF
#define dp_sink_stats1_rd2clr_config_VOLATILEMASK 0x0
#define dp_sink_stats1_rd2clr_config_RESETMASK 0x7FFF
#define dp_sink_stats1_rd2clr_config_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_pkt_sent_cnt_READMASK 0xFF
#define dp_sink_stats1_sdp_pkt_sent_cnt_WRITEMASK 0x0
#define dp_sink_stats1_sdp_pkt_sent_cnt_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_pkt_sent_cnt_RESETMASK 0xFF
#define dp_sink_stats1_sdp_pkt_sent_cnt_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_pkt_sent_cnt_watermark_READMASK 0xFF
#define dp_sink_stats1_sdp_pkt_sent_cnt_watermark_WRITEMASK 0x0
#define dp_sink_stats1_sdp_pkt_sent_cnt_watermark_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_pkt_sent_cnt_watermark_RESETMASK 0xFF
#define dp_sink_stats1_sdp_pkt_sent_cnt_watermark_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_ss_se_same_cycle_READMASK 0xFF
#define dp_sink_stats1_sdp_ss_se_same_cycle_WRITEMASK 0x0
#define dp_sink_stats1_sdp_ss_se_same_cycle_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_ss_se_same_cycle_RESETMASK 0xFF
#define dp_sink_stats1_sdp_ss_se_same_cycle_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_fifo_full_READMASK 0xFF
#define dp_sink_stats1_sdp_fifo_full_WRITEMASK 0x0
#define dp_sink_stats1_sdp_fifo_full_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_fifo_full_RESETMASK 0xFF
#define dp_sink_stats1_sdp_fifo_full_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_fifo_empty_READMASK 0xFF
#define dp_sink_stats1_sdp_fifo_empty_WRITEMASK 0x0
#define dp_sink_stats1_sdp_fifo_empty_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_fifo_empty_RESETMASK 0xFF
#define dp_sink_stats1_sdp_fifo_empty_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_fifo_overflow_READMASK 0xFF
#define dp_sink_stats1_sdp_fifo_overflow_WRITEMASK 0x0
#define dp_sink_stats1_sdp_fifo_overflow_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_fifo_overflow_RESETMASK 0xFF
#define dp_sink_stats1_sdp_fifo_overflow_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_fifo_underflow_READMASK 0xFF
#define dp_sink_stats1_sdp_fifo_underflow_WRITEMASK 0x0
#define dp_sink_stats1_sdp_fifo_underflow_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_fifo_underflow_RESETMASK 0xFF
#define dp_sink_stats1_sdp_fifo_underflow_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_fifo_level_READMASK 0xFFFF
#define dp_sink_stats1_sdp_fifo_level_WRITEMASK 0x0
#define dp_sink_stats1_sdp_fifo_level_VOLATILEMASK 0xFFFF
#define dp_sink_stats1_sdp_fifo_level_RESETMASK 0xFFFF
#define dp_sink_stats1_sdp_fifo_level_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_fifo_level_watermark_READMASK 0xFFFF
#define dp_sink_stats1_sdp_fifo_level_watermark_WRITEMASK 0x0
#define dp_sink_stats1_sdp_fifo_level_watermark_VOLATILEMASK 0xFFFF
#define dp_sink_stats1_sdp_fifo_level_watermark_RESETMASK 0xFFFF
#define dp_sink_stats1_sdp_fifo_level_watermark_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_tag_fifo_full_READMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_full_WRITEMASK 0x0
#define dp_sink_stats1_sdp_tag_fifo_full_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_full_RESETMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_full_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_tag_fifo_empty_READMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_empty_WRITEMASK 0x0
#define dp_sink_stats1_sdp_tag_fifo_empty_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_empty_RESETMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_empty_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_tag_fifo_overflow_READMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_overflow_WRITEMASK 0x0
#define dp_sink_stats1_sdp_tag_fifo_overflow_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_overflow_RESETMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_overflow_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_tag_fifo_underflow_READMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_underflow_WRITEMASK 0x0
#define dp_sink_stats1_sdp_tag_fifo_underflow_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_underflow_RESETMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_underflow_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_tag_fifo_level_READMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_level_WRITEMASK 0x0
#define dp_sink_stats1_sdp_tag_fifo_level_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_level_RESETMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_level_DEFAULT 0x00000000

#define dp_sink_stats1_sdp_tag_fifo_level_watermark_READMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_level_watermark_WRITEMASK 0x0
#define dp_sink_stats1_sdp_tag_fifo_level_watermark_VOLATILEMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_level_watermark_RESETMASK 0xFF
#define dp_sink_stats1_sdp_tag_fifo_level_watermark_DEFAULT 0x00000000

#define dp_sink_irq_enable_READMASK 0xFBFFFFF7
#define dp_sink_irq_enable_WRITEMASK 0xFBFFFFF7
#define dp_sink_irq_enable_VOLATILEMASK 0x0
#define dp_sink_irq_enable_RESETMASK 0xFBFFFFF7
#define dp_sink_irq_enable_DEFAULT 0x00000000

#define dp_sink_irq_pending_READMASK 0xFBFFFFF7
#define dp_sink_irq_pending_WRITEMASK 0xFBFFFFF7
#define dp_sink_irq_pending_VOLATILEMASK 0xFBFFFFF7
#define dp_sink_irq_pending_RESETMASK 0xFBFFFFF7
#define dp_sink_irq_pending_DEFAULT 0x00000000

#define dp_sink_irq_pending_irq_READMASK 0xFBFFFFF7
#define dp_sink_irq_pending_irq_WRITEMASK 0x0
#define dp_sink_irq_pending_irq_VOLATILEMASK 0x0
#define dp_sink_irq_pending_irq_RESETMASK 0xFBFFFFF7
#define dp_sink_irq_pending_irq_DEFAULT 0x00000000

#define dp_sink_irq_raw_READMASK 0xFBFFFFF7
#define dp_sink_irq_raw_WRITEMASK 0x0
#define dp_sink_irq_raw_VOLATILEMASK 0xFBFFFFF7
#define dp_sink_irq_raw_RESETMASK 0xFBFFFFF7
#define dp_sink_irq_raw_DEFAULT 0x00000000

#define dp_sink_s_SIZE 0x200
#define dp_sink_version_SIZE 0x4
#define dp_sink_configuration_SIZE 0x4
#define dp_sink_aligner_SIZE 0x24
#define dp_sink_aligner_control_SIZE 0x4
#define dp_sink_aligner_status_SIZE 0x4
#define dp_sink_aligner_stats_SIZE 0x4
#define dp_sink_aligner_debug_SIZE 0x10
#define dp_sink_aligner_debug_stats1_SIZE 0x4
#define dp_sink_aligner_debug_stats2_SIZE 0x4
#define dp_sink_aligner_debug_stats3_SIZE 0x4
#define dp_sink_aligner_debug_stats4_SIZE 0x4
#define dp_sink_aligner_fifo_status_SIZE 0x4
#define dp_sink_aligner_fifo_config_SIZE 0x4
#define dp_sink_stats_SIZE 0x1C
#define dp_sink_stats_flag_8b10b_SIZE 0x4
#define dp_sink_stats_cnt_en_rst_8b10b_0_SIZE 0x4
#define dp_sink_stats_cnt_en_rst_8b10b_1_SIZE 0x4
#define dp_sink_stats_cnt_8b10b_0_SIZE 0x4
#define dp_sink_stats_cnt_8b10b_1_SIZE 0x4
#define dp_sink_stats_cnt_en_rst_gtp_SIZE 0x4
#define dp_sink_stats_cnt_gtp_SIZE 0x4
#define dp_sink_descrambler_SIZE 0x4
#define dp_sink_stream_extractor_SIZE 0x74
#define dp_sink_stream_extractor_cfg_SIZE 0x4
#define dp_sink_stream_extractor_alu_SIZE 0x4
#define dp_sink_stream_extractor_msa_SIZE 0x24
#define dp_sink_stream_extractor_msa_mvid_SIZE 0x4
#define dp_sink_stream_extractor_msa_nvid_SIZE 0x4
#define dp_sink_stream_extractor_msa_horizontal_0_SIZE 0x4
#define dp_sink_stream_extractor_msa_horizontal_1_SIZE 0x4
#define dp_sink_stream_extractor_msa_vertical_0_SIZE 0x4
#define dp_sink_stream_extractor_msa_vertical_1_SIZE 0x4
#define dp_sink_stream_extractor_msa_misc_SIZE 0x4
#define dp_sink_stream_extractor_msa_status_SIZE 0x4
#define dp_sink_stream_extractor_msa_fps_SIZE 0x4
#define dp_sink_stream_extractor_debug_msa_SIZE 0x1C
#define dp_sink_stream_extractor_debug_msa_mvid_SIZE 0x4
#define dp_sink_stream_extractor_debug_msa_nvid_SIZE 0x4
#define dp_sink_stream_extractor_debug_msa_horizontal_0_SIZE 0x4
#define dp_sink_stream_extractor_debug_msa_horizontal_1_SIZE 0x4
#define dp_sink_stream_extractor_debug_msa_vertical_0_SIZE 0x4
#define dp_sink_stream_extractor_debug_msa_vertical_1_SIZE 0x4
#define dp_sink_stream_extractor_debug_msa_misc_SIZE 0x4
#define dp_sink_stream_extractor_fsm_status_SIZE 0x4
#define dp_sink_stream_extractor_vbd_SIZE 0x8
#define dp_sink_stream_extractor_vbd_vbid_SIZE 0x4
#define dp_sink_stream_extractor_vbd_status_SIZE 0x4
#define dp_sink_stream_extractor_vid_fifo_config_SIZE 0x4
#define dp_sink_stream_extractor_sdp_SIZE 0x14
#define dp_sink_stream_extractor_sdp_fifo_status_SIZE 0x4
#define dp_sink_stream_extractor_sdp_tag_fifo_status_SIZE 0x4
#define dp_sink_stream_extractor_sdp_fifo_config_SIZE 0x4
#define dp_sink_stream_extractor_sdp_tag_fifo_config_SIZE 0x4
#define dp_sink_stream_extractor_sdp_debug_SIZE 0x4
#define dp_sink_stream_extractor_pixgen_SIZE 0x4
#define dp_sink_stream_extractor_debug_SIZE 0x4
#define dp_sink_encoder_vfr_SIZE 0xC
#define dp_sink_encoder_vfr_handshake_SIZE 0x4
#define dp_sink_encoder_vfr_pixel_SIZE 0x4
#define dp_sink_encoder_vfr_line_SIZE 0x4
#define dp_sink_stats0_SIZE 0x60
#define dp_sink_stats0_rd2clr_config_SIZE 0x4
#define dp_sink_stats0_vid_c0_fifo_full_SIZE 0x4
#define dp_sink_stats0_vid_c0_fifo_empty_SIZE 0x4
#define dp_sink_stats0_vid_c0_fifo_overflow_SIZE 0x4
#define dp_sink_stats0_vid_c0_fifo_underflow_SIZE 0x4
#define dp_sink_stats0_vid_c0_fifo_level_SIZE 0x4
#define dp_sink_stats0_vid_c0_fifo_level_watermark_SIZE 0x4
#define dp_sink_stats0_vid_c0_sr_full_SIZE 0x4
#define dp_sink_stats0_vid_c1_fifo_full_SIZE 0x4
#define dp_sink_stats0_vid_c1_fifo_empty_SIZE 0x4
#define dp_sink_stats0_vid_c1_fifo_overflow_SIZE 0x4
#define dp_sink_stats0_vid_c1_fifo_underflow_SIZE 0x4
#define dp_sink_stats0_vid_c1_fifo_level_SIZE 0x4
#define dp_sink_stats0_vid_c1_fifo_level_watermark_SIZE 0x4
#define dp_sink_stats0_vid_c1_sr_full_SIZE 0x4
#define dp_sink_stats0_vid_c2_fifo_full_SIZE 0x4
#define dp_sink_stats0_vid_c2_fifo_empty_SIZE 0x4
#define dp_sink_stats0_vid_c2_fifo_overflow_SIZE 0x4
#define dp_sink_stats0_vid_c2_fifo_underflow_SIZE 0x4
#define dp_sink_stats0_vid_c2_fifo_level_SIZE 0x4
#define dp_sink_stats0_vid_c2_fifo_level_watermark_SIZE 0x4
#define dp_sink_stats0_vid_c2_sr_full_SIZE 0x4
#define dp_sink_stats0_vbd_majority_fail_SIZE 0x4
#define dp_sink_stats0_msa_majority_fail_SIZE 0x4
#define dp_sink_stats1_SIZE 0x40
#define dp_sink_stats1_rd2clr_config_SIZE 0x4
#define dp_sink_stats1_sdp_pkt_sent_cnt_SIZE 0x4
#define dp_sink_stats1_sdp_pkt_sent_cnt_watermark_SIZE 0x4
#define dp_sink_stats1_sdp_ss_se_same_cycle_SIZE 0x4
#define dp_sink_stats1_sdp_fifo_full_SIZE 0x4
#define dp_sink_stats1_sdp_fifo_empty_SIZE 0x4
#define dp_sink_stats1_sdp_fifo_overflow_SIZE 0x4
#define dp_sink_stats1_sdp_fifo_underflow_SIZE 0x4
#define dp_sink_stats1_sdp_fifo_level_SIZE 0x4
#define dp_sink_stats1_sdp_fifo_level_watermark_SIZE 0x4
#define dp_sink_stats1_sdp_tag_fifo_full_SIZE 0x4
#define dp_sink_stats1_sdp_tag_fifo_empty_SIZE 0x4
#define dp_sink_stats1_sdp_tag_fifo_overflow_SIZE 0x4
#define dp_sink_stats1_sdp_tag_fifo_underflow_SIZE 0x4
#define dp_sink_stats1_sdp_tag_fifo_level_SIZE 0x4
#define dp_sink_stats1_sdp_tag_fifo_level_watermark_SIZE 0x4
#define dp_sink_irq_SIZE 0x10
#define dp_sink_irq_enable_SIZE 0x4
#define dp_sink_irq_pending_SIZE 0x4
#define dp_sink_irq_pending_irq_SIZE 0x4
#define dp_sink_irq_raw_SIZE 0x4

#define dp_sink_s_OFFSET 0x0
#define dp_sink_version_OFFSET 0x0
#define dp_sink_configuration_OFFSET 0x4
#define dp_sink_aligner_OFFSET 0x8
#define dp_sink_aligner_control_OFFSET 0x0
#define dp_sink_aligner_status_OFFSET 0x4
#define dp_sink_aligner_stats_OFFSET 0x8
#define dp_sink_aligner_debug_OFFSET 0xC
#define dp_sink_aligner_debug_stats1_OFFSET 0x0
#define dp_sink_aligner_debug_stats2_OFFSET 0x4
#define dp_sink_aligner_debug_stats3_OFFSET 0x8
#define dp_sink_aligner_debug_stats4_OFFSET 0xC
#define dp_sink_aligner_fifo_status_OFFSET 0x1C
#define dp_sink_aligner_fifo_config_OFFSET 0x20
#define dp_sink_stats_OFFSET 0x2C
#define dp_sink_stats_flag_8b10b_OFFSET 0x0
#define dp_sink_stats_cnt_en_rst_8b10b_0_OFFSET 0x4
#define dp_sink_stats_cnt_en_rst_8b10b_1_OFFSET 0x8
#define dp_sink_stats_cnt_8b10b_0_OFFSET 0xC
#define dp_sink_stats_cnt_8b10b_1_OFFSET 0x10
#define dp_sink_stats_cnt_en_rst_gtp_OFFSET 0x14
#define dp_sink_stats_cnt_gtp_OFFSET 0x18
#define dp_sink_descrambler_OFFSET 0x48
#define dp_sink_stream_extractor_OFFSET 0x4C
#define dp_sink_stream_extractor_cfg_OFFSET 0x0
#define dp_sink_stream_extractor_alu_OFFSET 0x4
#define dp_sink_stream_extractor_msa_OFFSET 0x8
#define dp_sink_stream_extractor_msa_mvid_OFFSET 0x0
#define dp_sink_stream_extractor_msa_nvid_OFFSET 0x4
#define dp_sink_stream_extractor_msa_horizontal_0_OFFSET 0x8
#define dp_sink_stream_extractor_msa_horizontal_1_OFFSET 0xC
#define dp_sink_stream_extractor_msa_vertical_0_OFFSET 0x10
#define dp_sink_stream_extractor_msa_vertical_1_OFFSET 0x14
#define dp_sink_stream_extractor_msa_misc_OFFSET 0x18
#define dp_sink_stream_extractor_msa_status_OFFSET 0x1C
#define dp_sink_stream_extractor_msa_fps_OFFSET 0x20
#define dp_sink_stream_extractor_debug_msa_OFFSET 0x2C
#define dp_sink_stream_extractor_debug_msa_mvid_OFFSET 0x0
#define dp_sink_stream_extractor_debug_msa_nvid_OFFSET 0x4
#define dp_sink_stream_extractor_debug_msa_horizontal_0_OFFSET 0x8
#define dp_sink_stream_extractor_debug_msa_horizontal_1_OFFSET 0xC
#define dp_sink_stream_extractor_debug_msa_vertical_0_OFFSET 0x10
#define dp_sink_stream_extractor_debug_msa_vertical_1_OFFSET 0x14
#define dp_sink_stream_extractor_debug_msa_misc_OFFSET 0x18
#define dp_sink_stream_extractor_fsm_status_OFFSET 0x48
#define dp_sink_stream_extractor_vbd_OFFSET 0x4C
#define dp_sink_stream_extractor_vbd_vbid_OFFSET 0x0
#define dp_sink_stream_extractor_vbd_status_OFFSET 0x4
#define dp_sink_stream_extractor_vid_fifo_config_OFFSET 0x54
#define dp_sink_stream_extractor_sdp_OFFSET 0x58
#define dp_sink_stream_extractor_sdp_fifo_status_OFFSET 0x0
#define dp_sink_stream_extractor_sdp_tag_fifo_status_OFFSET 0x4
#define dp_sink_stream_extractor_sdp_fifo_config_OFFSET 0x8
#define dp_sink_stream_extractor_sdp_tag_fifo_config_OFFSET 0xC
#define dp_sink_stream_extractor_sdp_debug_OFFSET 0x10
#define dp_sink_stream_extractor_pixgen_OFFSET 0x6C
#define dp_sink_stream_extractor_debug_OFFSET 0x70
#define dp_sink_encoder_vfr_OFFSET 0xC0
#define dp_sink_encoder_vfr_handshake_OFFSET 0x0
#define dp_sink_encoder_vfr_pixel_OFFSET 0x4
#define dp_sink_encoder_vfr_line_OFFSET 0x8
#define dp_sink_stats0_OFFSET 0xCC
#define dp_sink_stats0_rd2clr_config_OFFSET 0x0
#define dp_sink_stats0_vid_c0_fifo_full_OFFSET 0x4
#define dp_sink_stats0_vid_c0_fifo_empty_OFFSET 0x8
#define dp_sink_stats0_vid_c0_fifo_overflow_OFFSET 0xC
#define dp_sink_stats0_vid_c0_fifo_underflow_OFFSET 0x10
#define dp_sink_stats0_vid_c0_fifo_level_OFFSET 0x14
#define dp_sink_stats0_vid_c0_fifo_level_watermark_OFFSET 0x18
#define dp_sink_stats0_vid_c0_sr_full_OFFSET 0x1C
#define dp_sink_stats0_vid_c1_fifo_full_OFFSET 0x20
#define dp_sink_stats0_vid_c1_fifo_empty_OFFSET 0x24
#define dp_sink_stats0_vid_c1_fifo_overflow_OFFSET 0x28
#define dp_sink_stats0_vid_c1_fifo_underflow_OFFSET 0x2C
#define dp_sink_stats0_vid_c1_fifo_level_OFFSET 0x30
#define dp_sink_stats0_vid_c1_fifo_level_watermark_OFFSET 0x34
#define dp_sink_stats0_vid_c1_sr_full_OFFSET 0x38
#define dp_sink_stats0_vid_c2_fifo_full_OFFSET 0x3C
#define dp_sink_stats0_vid_c2_fifo_empty_OFFSET 0x40
#define dp_sink_stats0_vid_c2_fifo_overflow_OFFSET 0x44
#define dp_sink_stats0_vid_c2_fifo_underflow_OFFSET 0x48
#define dp_sink_stats0_vid_c2_fifo_level_OFFSET 0x4C
#define dp_sink_stats0_vid_c2_fifo_level_watermark_OFFSET 0x50
#define dp_sink_stats0_vid_c2_sr_full_OFFSET 0x54
#define dp_sink_stats0_vbd_majority_fail_OFFSET 0x58
#define dp_sink_stats0_msa_majority_fail_OFFSET 0x5C
#define dp_sink_stats1_OFFSET 0x12C
#define dp_sink_stats1_rd2clr_config_OFFSET 0x0
#define dp_sink_stats1_sdp_pkt_sent_cnt_OFFSET 0x4
#define dp_sink_stats1_sdp_pkt_sent_cnt_watermark_OFFSET 0x8
#define dp_sink_stats1_sdp_ss_se_same_cycle_OFFSET 0xC
#define dp_sink_stats1_sdp_fifo_full_OFFSET 0x10
#define dp_sink_stats1_sdp_fifo_empty_OFFSET 0x14
#define dp_sink_stats1_sdp_fifo_overflow_OFFSET 0x18
#define dp_sink_stats1_sdp_fifo_underflow_OFFSET 0x1C
#define dp_sink_stats1_sdp_fifo_level_OFFSET 0x20
#define dp_sink_stats1_sdp_fifo_level_watermark_OFFSET 0x24
#define dp_sink_stats1_sdp_tag_fifo_full_OFFSET 0x28
#define dp_sink_stats1_sdp_tag_fifo_empty_OFFSET 0x2C
#define dp_sink_stats1_sdp_tag_fifo_overflow_OFFSET 0x30
#define dp_sink_stats1_sdp_tag_fifo_underflow_OFFSET 0x34
#define dp_sink_stats1_sdp_tag_fifo_level_OFFSET 0x38
#define dp_sink_stats1_sdp_tag_fifo_level_watermark_OFFSET 0x3C
#define dp_sink_irq_OFFSET 0x16C
#define dp_sink_irq_enable_OFFSET 0x0
#define dp_sink_irq_pending_OFFSET 0x4
#define dp_sink_irq_pending_irq_OFFSET 0x8
#define dp_sink_irq_raw_OFFSET 0xC

#define dp_sink_s_ADDRESS 0x000
#define dp_sink_version_ADDRESS 0x000
#define dp_sink_configuration_ADDRESS 0x004
#define dp_sink_aligner_ADDRESS 0x008
#define dp_sink_aligner_control_ADDRESS 0x008
#define dp_sink_aligner_status_ADDRESS 0x00C
#define dp_sink_aligner_stats_ADDRESS 0x010
#define dp_sink_aligner_debug_ADDRESS 0x014
#define dp_sink_aligner_debug_stats1_ADDRESS 0x014
#define dp_sink_aligner_debug_stats2_ADDRESS 0x018
#define dp_sink_aligner_debug_stats3_ADDRESS 0x01C
#define dp_sink_aligner_debug_stats4_ADDRESS 0x020
#define dp_sink_aligner_fifo_status_ADDRESS 0x024
#define dp_sink_aligner_fifo_config_ADDRESS 0x028
#define dp_sink_stats_ADDRESS 0x02C
#define dp_sink_stats_flag_8b10b_ADDRESS 0x02C
#define dp_sink_stats_cnt_en_rst_8b10b_0_ADDRESS 0x030
#define dp_sink_stats_cnt_en_rst_8b10b_1_ADDRESS 0x034
#define dp_sink_stats_cnt_8b10b_0_ADDRESS 0x038
#define dp_sink_stats_cnt_8b10b_1_ADDRESS 0x03C
#define dp_sink_stats_cnt_en_rst_gtp_ADDRESS 0x040
#define dp_sink_stats_cnt_gtp_ADDRESS 0x044
#define dp_sink_descrambler_ADDRESS 0x048
#define dp_sink_stream_extractor_ADDRESS 0x04C
#define dp_sink_stream_extractor_cfg_ADDRESS 0x04C
#define dp_sink_stream_extractor_alu_ADDRESS 0x050
#define dp_sink_stream_extractor_msa_ADDRESS 0x054
#define dp_sink_stream_extractor_msa_mvid_ADDRESS 0x054
#define dp_sink_stream_extractor_msa_nvid_ADDRESS 0x058
#define dp_sink_stream_extractor_msa_horizontal_0_ADDRESS 0x05C
#define dp_sink_stream_extractor_msa_horizontal_1_ADDRESS 0x060
#define dp_sink_stream_extractor_msa_vertical_0_ADDRESS 0x064
#define dp_sink_stream_extractor_msa_vertical_1_ADDRESS 0x068
#define dp_sink_stream_extractor_msa_misc_ADDRESS 0x06C
#define dp_sink_stream_extractor_msa_status_ADDRESS 0x070
#define dp_sink_stream_extractor_msa_fps_ADDRESS 0x074
#define dp_sink_stream_extractor_debug_msa_ADDRESS 0x078
#define dp_sink_stream_extractor_debug_msa_mvid_ADDRESS 0x078
#define dp_sink_stream_extractor_debug_msa_nvid_ADDRESS 0x07C
#define dp_sink_stream_extractor_debug_msa_horizontal_0_ADDRESS 0x080
#define dp_sink_stream_extractor_debug_msa_horizontal_1_ADDRESS 0x084
#define dp_sink_stream_extractor_debug_msa_vertical_0_ADDRESS 0x088
#define dp_sink_stream_extractor_debug_msa_vertical_1_ADDRESS 0x08C
#define dp_sink_stream_extractor_debug_msa_misc_ADDRESS 0x090
#define dp_sink_stream_extractor_fsm_status_ADDRESS 0x094
#define dp_sink_stream_extractor_vbd_ADDRESS 0x098
#define dp_sink_stream_extractor_vbd_vbid_ADDRESS 0x098
#define dp_sink_stream_extractor_vbd_status_ADDRESS 0x09C
#define dp_sink_stream_extractor_vid_fifo_config_ADDRESS 0x0A0
#define dp_sink_stream_extractor_sdp_ADDRESS 0x0A4
#define dp_sink_stream_extractor_sdp_fifo_status_ADDRESS 0x0A4
#define dp_sink_stream_extractor_sdp_tag_fifo_status_ADDRESS 0x0A8
#define dp_sink_stream_extractor_sdp_fifo_config_ADDRESS 0x0AC
#define dp_sink_stream_extractor_sdp_tag_fifo_config_ADDRESS 0x0B0
#define dp_sink_stream_extractor_sdp_debug_ADDRESS 0x0B4
#define dp_sink_stream_extractor_pixgen_ADDRESS 0x0B8
#define dp_sink_stream_extractor_debug_ADDRESS 0x0BC
#define dp_sink_encoder_vfr_ADDRESS 0x0C0
#define dp_sink_encoder_vfr_handshake_ADDRESS 0x0C0
#define dp_sink_encoder_vfr_pixel_ADDRESS 0x0C4
#define dp_sink_encoder_vfr_line_ADDRESS 0x0C8
#define dp_sink_stats0_ADDRESS 0x0CC
#define dp_sink_stats0_rd2clr_config_ADDRESS 0x0CC
#define dp_sink_stats0_vid_c0_fifo_full_ADDRESS 0x0D0
#define dp_sink_stats0_vid_c0_fifo_empty_ADDRESS 0x0D4
#define dp_sink_stats0_vid_c0_fifo_overflow_ADDRESS 0x0D8
#define dp_sink_stats0_vid_c0_fifo_underflow_ADDRESS 0x0DC
#define dp_sink_stats0_vid_c0_fifo_level_ADDRESS 0x0E0
#define dp_sink_stats0_vid_c0_fifo_level_watermark_ADDRESS 0x0E4
#define dp_sink_stats0_vid_c0_sr_full_ADDRESS 0x0E8
#define dp_sink_stats0_vid_c1_fifo_full_ADDRESS 0x0EC
#define dp_sink_stats0_vid_c1_fifo_empty_ADDRESS 0x0F0
#define dp_sink_stats0_vid_c1_fifo_overflow_ADDRESS 0x0F4
#define dp_sink_stats0_vid_c1_fifo_underflow_ADDRESS 0x0F8
#define dp_sink_stats0_vid_c1_fifo_level_ADDRESS 0x0FC
#define dp_sink_stats0_vid_c1_fifo_level_watermark_ADDRESS 0x100
#define dp_sink_stats0_vid_c1_sr_full_ADDRESS 0x104
#define dp_sink_stats0_vid_c2_fifo_full_ADDRESS 0x108
#define dp_sink_stats0_vid_c2_fifo_empty_ADDRESS 0x10C
#define dp_sink_stats0_vid_c2_fifo_overflow_ADDRESS 0x110
#define dp_sink_stats0_vid_c2_fifo_underflow_ADDRESS 0x114
#define dp_sink_stats0_vid_c2_fifo_level_ADDRESS 0x118
#define dp_sink_stats0_vid_c2_fifo_level_watermark_ADDRESS 0x11C
#define dp_sink_stats0_vid_c2_sr_full_ADDRESS 0x120
#define dp_sink_stats0_vbd_majority_fail_ADDRESS 0x124
#define dp_sink_stats0_msa_majority_fail_ADDRESS 0x128
#define dp_sink_stats1_ADDRESS 0x12C
#define dp_sink_stats1_rd2clr_config_ADDRESS 0x12C
#define dp_sink_stats1_sdp_pkt_sent_cnt_ADDRESS 0x130
#define dp_sink_stats1_sdp_pkt_sent_cnt_watermark_ADDRESS 0x134
#define dp_sink_stats1_sdp_ss_se_same_cycle_ADDRESS 0x138
#define dp_sink_stats1_sdp_fifo_full_ADDRESS 0x13C
#define dp_sink_stats1_sdp_fifo_empty_ADDRESS 0x140
#define dp_sink_stats1_sdp_fifo_overflow_ADDRESS 0x144
#define dp_sink_stats1_sdp_fifo_underflow_ADDRESS 0x148
#define dp_sink_stats1_sdp_fifo_level_ADDRESS 0x14C
#define dp_sink_stats1_sdp_fifo_level_watermark_ADDRESS 0x150
#define dp_sink_stats1_sdp_tag_fifo_full_ADDRESS 0x154
#define dp_sink_stats1_sdp_tag_fifo_empty_ADDRESS 0x158
#define dp_sink_stats1_sdp_tag_fifo_overflow_ADDRESS 0x15C
#define dp_sink_stats1_sdp_tag_fifo_underflow_ADDRESS 0x160
#define dp_sink_stats1_sdp_tag_fifo_level_ADDRESS 0x164
#define dp_sink_stats1_sdp_tag_fifo_level_watermark_ADDRESS 0x168
#define dp_sink_irq_ADDRESS 0x16C
#define dp_sink_irq_enable_ADDRESS 0x16C
#define dp_sink_irq_pending_ADDRESS 0x170
#define dp_sink_irq_pending_irq_ADDRESS 0x174
#define dp_sink_irq_raw_ADDRESS 0x178
#define DP_SINK_VERSION_MAJOR_OFFSET 16
#define DP_SINK_VERSION_MAJOR_MASK 0xFF0000
#define DP_SINK_VERSION_MINOR_OFFSET 8
#define DP_SINK_VERSION_MINOR_MASK 0xFF00
#define DP_SINK_VERSION_PATCH_OFFSET 0
#define DP_SINK_VERSION_PATCH_MASK 0xFF
#define DP_SINK_CONFIGURATION_DEBUG_MSA_EN_OFFSET 31
#define DP_SINK_CONFIGURATION_DEBUG_MSA_EN_MASK 0x80000000
#define DP_SINK_CONFIGURATION_DEBUG_MSA_EN 0x80000000
#define DP_SINK_CONFIGURATION_TU_MEASURED_OFFSET 17
#define DP_SINK_CONFIGURATION_TU_MEASURED_MASK 0x20000
#define DP_SINK_CONFIGURATION_TU_MEASURED 0x20000
#define DP_SINK_CONFIGURATION_TICO_CTRL_RST_OFFSET 16
#define DP_SINK_CONFIGURATION_TICO_CTRL_RST_MASK 0x10000
#define DP_SINK_CONFIGURATION_TICO_CTRL_RST 0x10000
#define DP_SINK_CONFIGURATION_VID_COLOR_FORMAT_OFFSET 14
#define DP_SINK_CONFIGURATION_VID_COLOR_FORMAT_MASK 0xC000
#define DP_SINK_CONFIGURATION_VID_BIT_PER_COMPONENT_OFFSET 8
#define DP_SINK_CONFIGURATION_VID_BIT_PER_COMPONENT_MASK 0x700
#define DP_SINK_CONFIGURATION_VID_STREAM_EXTRACTOR_EN_OFFSET 7
#define DP_SINK_CONFIGURATION_VID_STREAM_EXTRACTOR_EN_MASK 0x80
#define DP_SINK_CONFIGURATION_VID_STREAM_EXTRACTOR_EN 0x80
#define DP_SINK_CONFIGURATION_STREAM_EXTRACTOR_EN_OFFSET 6
#define DP_SINK_CONFIGURATION_STREAM_EXTRACTOR_EN_MASK 0x40
#define DP_SINK_CONFIGURATION_STREAM_EXTRACTOR_EN 0x40
#define DP_SINK_CONFIGURATION_APB_TO_AXI_MODE_SELECT_OFFSET 5
#define DP_SINK_CONFIGURATION_APB_TO_AXI_MODE_SELECT_MASK 0x20
#define DP_SINK_CONFIGURATION_APB_TO_AXI_MODE_SELECT 0x20
#define DP_SINK_CONFIGURATION_ENH_FRM_EN_OFFSET 4
#define DP_SINK_CONFIGURATION_ENH_FRM_EN_MASK 0x10
#define DP_SINK_CONFIGURATION_ENH_FRM_EN 0x10
#define DP_SINK_CONFIGURATION_LANE_BIT_RATE_OFFSET 2
#define DP_SINK_CONFIGURATION_LANE_BIT_RATE_MASK 0xC
#define DP_SINK_CONFIGURATION_LANE_NUM_OFFSET 0
#define DP_SINK_CONFIGURATION_LANE_NUM_MASK 0x3
#define DP_SINK_ALIGNER_CONTROL_TPS3_N_TPS2_OFFSET 1
#define DP_SINK_ALIGNER_CONTROL_TPS3_N_TPS2_MASK 0x2
#define DP_SINK_ALIGNER_CONTROL_TPS3_N_TPS2 0x2
#define DP_SINK_ALIGNER_CONTROL_ALIGN_EN_OFFSET 0
#define DP_SINK_ALIGNER_CONTROL_ALIGN_EN_MASK 0x1
#define DP_SINK_ALIGNER_CONTROL_ALIGN_EN 0x1
#define DP_SINK_ALIGNER_STATUS_LANES_NOT_ALIGNED_OFFSET 1
#define DP_SINK_ALIGNER_STATUS_LANES_NOT_ALIGNED_MASK 0x2
#define DP_SINK_ALIGNER_STATUS_LANES_NOT_ALIGNED 0x2
#define DP_SINK_ALIGNER_STATUS_BOND_ALIGN_DONE_OFFSET 0
#define DP_SINK_ALIGNER_STATUS_BOND_ALIGN_DONE_MASK 0x1
#define DP_SINK_ALIGNER_STATUS_BOND_ALIGN_DONE 0x1
#define DP_SINK_ALIGNER_STATS_LANES_NOT_ALIGNED_CNT_OFFSET 8
#define DP_SINK_ALIGNER_STATS_LANES_NOT_ALIGNED_CNT_MASK 0xFF00
#define DP_SINK_ALIGNER_STATS_LANES_NOT_ALIGNED_CNT_RST_OFFSET 1
#define DP_SINK_ALIGNER_STATS_LANES_NOT_ALIGNED_CNT_RST_MASK 0x2
#define DP_SINK_ALIGNER_STATS_LANES_NOT_ALIGNED_CNT_RST 0x2
#define DP_SINK_ALIGNER_STATS_LANES_ALIGN_DET_EN_OFFSET 0
#define DP_SINK_ALIGNER_STATS_LANES_ALIGN_DET_EN_MASK 0x1
#define DP_SINK_ALIGNER_STATS_LANES_ALIGN_DET_EN 0x1
#define DP_SINK_ALIGNER_DEBUG_STATS1_STATE_DBG_OFFSET 0
#define DP_SINK_ALIGNER_DEBUG_STATS1_STATE_DBG_MASK 0xFFFFFFFF
#define DP_SINK_ALIGNER_DEBUG_STATS2_FIFO_RD_EN_DBG_OFFSET 0
#define DP_SINK_ALIGNER_DEBUG_STATS2_FIFO_RD_EN_DBG_MASK 0xFFFFFFFF
#define DP_SINK_ALIGNER_DEBUG_STATS3_COM_DET_DBG_OFFSET 0
#define DP_SINK_ALIGNER_DEBUG_STATS3_COM_DET_DBG_MASK 0xFFFFFFFF
#define DP_SINK_ALIGNER_DEBUG_STATS4_BOND_ALIGN_DEBUG_STATS_OFFSET 0
#define DP_SINK_ALIGNER_DEBUG_STATS4_BOND_ALIGN_DEBUG_STATS_MASK 0xFFFFFF
#define DP_SINK_ALIGNER_FIFO_STATUS_OVERFLOW_OFFSET 12
#define DP_SINK_ALIGNER_FIFO_STATUS_OVERFLOW_MASK 0xF000
#define DP_SINK_ALIGNER_FIFO_STATUS_UNDERFLOW_OFFSET 8
#define DP_SINK_ALIGNER_FIFO_STATUS_UNDERFLOW_MASK 0xF00
#define DP_SINK_ALIGNER_FIFO_STATUS_FULL_OFFSET 4
#define DP_SINK_ALIGNER_FIFO_STATUS_FULL_MASK 0xF0
#define DP_SINK_ALIGNER_FIFO_STATUS_EMPTY_OFFSET 0
#define DP_SINK_ALIGNER_FIFO_STATUS_EMPTY_MASK 0xF
#define DP_SINK_ALIGNER_FIFO_CONFIG_DEPTH_OFFSET 0
#define DP_SINK_ALIGNER_FIFO_CONFIG_DEPTH_MASK 0xFF
#define DP_SINK_STATS_FLAG_8B10B_LANES_WITH_8B10B_NIT_ERR_POST_CR_OFFSET 1
#define DP_SINK_STATS_FLAG_8B10B_LANES_WITH_8B10B_NIT_ERR_POST_CR_MASK 0x2
#define DP_SINK_STATS_FLAG_8B10B_LANES_WITH_8B10B_NIT_ERR_POST_CR 0x2
#define DP_SINK_STATS_FLAG_8B10B_LANES_WITH_8B10B_DIS_ERR_POST_CR_OFFSET 0
#define DP_SINK_STATS_FLAG_8B10B_LANES_WITH_8B10B_DIS_ERR_POST_CR_MASK 0x1
#define DP_SINK_STATS_FLAG_8B10B_LANES_WITH_8B10B_DIS_ERR_POST_CR 0x1
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE3_8B10B_DIS_ERR_POST_CR_CNT_RST_OFFSET 11
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE3_8B10B_DIS_ERR_POST_CR_CNT_RST_MASK 0x800
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE3_8B10B_DIS_ERR_POST_CR_CNT_RST 0x800
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE2_8B10B_DIS_ERR_POST_CR_CNT_RST_OFFSET 10
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE2_8B10B_DIS_ERR_POST_CR_CNT_RST_MASK 0x400
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE2_8B10B_DIS_ERR_POST_CR_CNT_RST 0x400
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE1_8B10B_DIS_ERR_POST_CR_CNT_RST_OFFSET 9
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE1_8B10B_DIS_ERR_POST_CR_CNT_RST_MASK 0x200
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE1_8B10B_DIS_ERR_POST_CR_CNT_RST 0x200
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE0_8B10B_DIS_ERR_POST_CR_CNT_RST_OFFSET 8
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE0_8B10B_DIS_ERR_POST_CR_CNT_RST_MASK 0x100
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANE0_8B10B_DIS_ERR_POST_CR_CNT_RST 0x100
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANES_8B10B_DIS_ERR_DET_EN_OFFSET 0
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANES_8B10B_DIS_ERR_DET_EN_MASK 0x1
#define DP_SINK_STATS_CNT_EN_RST_8B10B_0_LANES_8B10B_DIS_ERR_DET_EN 0x1
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE3_8B10B_NIT_ERR_POST_CR_CNT_RST_OFFSET 11
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE3_8B10B_NIT_ERR_POST_CR_CNT_RST_MASK 0x800
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE3_8B10B_NIT_ERR_POST_CR_CNT_RST 0x800
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE2_8B10B_NIT_ERR_POST_CR_CNT_RST_OFFSET 10
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE2_8B10B_NIT_ERR_POST_CR_CNT_RST_MASK 0x400
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE2_8B10B_NIT_ERR_POST_CR_CNT_RST 0x400
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE1_8B10B_NIT_ERR_POST_CR_CNT_RST_OFFSET 9
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE1_8B10B_NIT_ERR_POST_CR_CNT_RST_MASK 0x200
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE1_8B10B_NIT_ERR_POST_CR_CNT_RST 0x200
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE0_8B10B_NIT_ERR_POST_CR_CNT_RST_OFFSET 8
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE0_8B10B_NIT_ERR_POST_CR_CNT_RST_MASK 0x100
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANE0_8B10B_NIT_ERR_POST_CR_CNT_RST 0x100
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANES_8B10B_NIT_ERR_DET_EN_OFFSET 0
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANES_8B10B_NIT_ERR_DET_EN_MASK 0x1
#define DP_SINK_STATS_CNT_EN_RST_8B10B_1_LANES_8B10B_NIT_ERR_DET_EN 0x1
#define DP_SINK_STATS_CNT_8B10B_0_LANE3_8B10B_DIS_ERR_POST_CR_CNT_OFFSET 24
#define DP_SINK_STATS_CNT_8B10B_0_LANE3_8B10B_DIS_ERR_POST_CR_CNT_MASK 0xFF000000
#define DP_SINK_STATS_CNT_8B10B_0_LANE2_8B10B_DIS_ERR_POST_CR_CNT_OFFSET 16
#define DP_SINK_STATS_CNT_8B10B_0_LANE2_8B10B_DIS_ERR_POST_CR_CNT_MASK 0xFF0000
#define DP_SINK_STATS_CNT_8B10B_0_LANE1_8B10B_DIS_ERR_POST_CR_CNT_OFFSET 8
#define DP_SINK_STATS_CNT_8B10B_0_LANE1_8B10B_DIS_ERR_POST_CR_CNT_MASK 0xFF00
#define DP_SINK_STATS_CNT_8B10B_0_LANE0_8B10B_DIS_ERR_POST_CR_CNT_OFFSET 0
#define DP_SINK_STATS_CNT_8B10B_0_LANE0_8B10B_DIS_ERR_POST_CR_CNT_MASK 0xFF
#define DP_SINK_STATS_CNT_8B10B_1_LANE3_8B10B_NIT_ERR_POST_CR_CNT_OFFSET 24
#define DP_SINK_STATS_CNT_8B10B_1_LANE3_8B10B_NIT_ERR_POST_CR_CNT_MASK 0xFF000000
#define DP_SINK_STATS_CNT_8B10B_1_LANE2_8B10B_NIT_ERR_POST_CR_CNT_OFFSET 16
#define DP_SINK_STATS_CNT_8B10B_1_LANE2_8B10B_NIT_ERR_POST_CR_CNT_MASK 0xFF0000
#define DP_SINK_STATS_CNT_8B10B_1_LANE1_8B10B_NIT_ERR_POST_CR_CNT_OFFSET 8
#define DP_SINK_STATS_CNT_8B10B_1_LANE1_8B10B_NIT_ERR_POST_CR_CNT_MASK 0xFF00
#define DP_SINK_STATS_CNT_8B10B_1_LANE0_8B10B_NIT_ERR_POST_CR_CNT_OFFSET 0
#define DP_SINK_STATS_CNT_8B10B_1_LANE0_8B10B_NIT_ERR_POST_CR_CNT_MASK 0xFF
#define DP_SINK_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_RST_OFFSET 1
#define DP_SINK_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_RST_MASK 0x2
#define DP_SINK_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_RST 0x2
#define DP_SINK_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_EN_OFFSET 0
#define DP_SINK_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_EN_MASK 0x1
#define DP_SINK_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_EN 0x1
#define DP_SINK_STATS_CNT_GTP_DP_GT3_RXBYTEREALIGN_CNT_OFFSET 24
#define DP_SINK_STATS_CNT_GTP_DP_GT3_RXBYTEREALIGN_CNT_MASK 0xFF000000
#define DP_SINK_STATS_CNT_GTP_DP_GT2_RXBYTEREALIGN_CNT_OFFSET 16
#define DP_SINK_STATS_CNT_GTP_DP_GT2_RXBYTEREALIGN_CNT_MASK 0xFF0000
#define DP_SINK_STATS_CNT_GTP_DP_GT1_RXBYTEREALIGN_CNT_OFFSET 8
#define DP_SINK_STATS_CNT_GTP_DP_GT1_RXBYTEREALIGN_CNT_MASK 0xFF00
#define DP_SINK_STATS_CNT_GTP_DP_GT0_RXBYTEREALIGN_CNT_OFFSET 0
#define DP_SINK_STATS_CNT_GTP_DP_GT0_RXBYTEREALIGN_CNT_MASK 0xFF
#define DP_SINK_DESCRAMBLER_ENABLE_OFFSET 0
#define DP_SINK_DESCRAMBLER_ENABLE_MASK 0x1
#define DP_SINK_DESCRAMBLER_ENABLE 0x1
#define DP_SINK_STREAM_EXTRACTOR_CFG_SDP_EN_OFFSET 24
#define DP_SINK_STREAM_EXTRACTOR_CFG_SDP_EN_MASK 0x1000000
#define DP_SINK_STREAM_EXTRACTOR_CFG_SDP_EN 0x1000000
#define DP_SINK_STREAM_EXTRACTOR_CFG_DROP_SDP_PTP_PKT_OFFSET 17
#define DP_SINK_STREAM_EXTRACTOR_CFG_DROP_SDP_PTP_PKT_MASK 0x20000
#define DP_SINK_STREAM_EXTRACTOR_CFG_DROP_SDP_PTP_PKT 0x20000
#define DP_SINK_STREAM_EXTRACTOR_CFG_DROP_CS_PTP_PKT_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_CFG_DROP_CS_PTP_PKT_MASK 0x10000
#define DP_SINK_STREAM_EXTRACTOR_CFG_DROP_CS_PTP_PKT 0x10000
#define DP_SINK_STREAM_EXTRACTOR_CFG_CS_PKT_LENGTH_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_CFG_CS_PKT_LENGTH_MASK 0xFFF
#define DP_SINK_STREAM_EXTRACTOR_ALU_ENCODER_PROGRAM_DONE_OFFSET 8
#define DP_SINK_STREAM_EXTRACTOR_ALU_ENCODER_PROGRAM_DONE_MASK 0x100
#define DP_SINK_STREAM_EXTRACTOR_ALU_ENCODER_PROGRAM_DONE 0x100
#define DP_SINK_STREAM_EXTRACTOR_ALU_TU_SIZE_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_ALU_TU_SIZE_MASK 0xFF
#define DP_SINK_STREAM_EXTRACTOR_MSA_MVID_MVID_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_MSA_MVID_MVID_MASK 0xFFFFFF
#define DP_SINK_STREAM_EXTRACTOR_MSA_NVID_NVID_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_MSA_NVID_NVID_MASK 0xFFFFFF
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_0_TOTAL_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_0_TOTAL_MASK 0xFFFF0000
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_0_START_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_0_START_MASK 0xFFFF
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_WIDTH_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_WIDTH_MASK 0xFFFF0000
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_POLARITY_OFFSET 15
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_POLARITY_MASK 0x8000
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_POLARITY 0x8000
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_SYNC_WIDTH_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_SYNC_WIDTH_MASK 0x7FFF
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_0_TOTAL_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_0_TOTAL_MASK 0xFFFF0000
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_0_START_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_0_START_MASK 0xFFFF
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_1_HEIGHT_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_1_HEIGHT_MASK 0xFFFF0000
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_1_POLARITY_OFFSET 15
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_1_POLARITY_MASK 0x8000
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_1_POLARITY 0x8000
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_1_SYNC_WIDTH_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_MSA_VERTICAL_1_SYNC_WIDTH_MASK 0x7FFF
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_Y_ONLY_OFFSET 11
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_Y_ONLY_MASK 0x800
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_Y_ONLY 0x800
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_STEREO_OFFSET 9
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_STEREO_MASK 0x600
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_INT_TOTAL_OFFSET 8
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_INT_TOTAL_MASK 0x100
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_INT_TOTAL 0x100
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_COLOR_OFFSET 1
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_COLOR_MASK 0xFE
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_CLK_SYNC_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_CLK_SYNC_MASK 0x1
#define DP_SINK_STREAM_EXTRACTOR_MSA_MISC_CLK_SYNC 0x1
#define DP_SINK_STREAM_EXTRACTOR_MSA_STATUS_MSA_MAJORITY_FAIL_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_MSA_STATUS_MSA_MAJORITY_FAIL_MASK 0x1
#define DP_SINK_STREAM_EXTRACTOR_MSA_STATUS_MSA_MAJORITY_FAIL 0x1
#define DP_SINK_STREAM_EXTRACTOR_MSA_FPS_COUNT_OFFSET 8
#define DP_SINK_STREAM_EXTRACTOR_MSA_FPS_COUNT_MASK 0xFFFFFF00
#define DP_SINK_STREAM_EXTRACTOR_MSA_FPS_COUNT_EN_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_MSA_FPS_COUNT_EN_MASK 0x1
#define DP_SINK_STREAM_EXTRACTOR_MSA_FPS_COUNT_EN 0x1
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MVID_MVID_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MVID_MVID_MASK 0xFFFFFF
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_NVID_NVID_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_NVID_NVID_MASK 0xFFFFFF
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_0_TOTAL_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_0_TOTAL_MASK 0xFFFF0000
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_0_START_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_0_START_MASK 0xFFFF
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_WIDTH_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_WIDTH_MASK 0xFFFF0000
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_POLARITY_OFFSET 15
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_POLARITY_MASK 0x8000
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_POLARITY 0x8000
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_SYNC_WIDTH_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_SYNC_WIDTH_MASK 0x7FFF
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_0_TOTAL_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_0_TOTAL_MASK 0xFFFF0000
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_0_START_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_0_START_MASK 0xFFFF
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_HEIGHT_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_HEIGHT_MASK 0xFFFF0000
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_POLARITY_OFFSET 15
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_POLARITY_MASK 0x8000
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_POLARITY 0x8000
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_SYNC_WIDTH_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_SYNC_WIDTH_MASK 0x7FFF
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_Y_ONLY_OFFSET 11
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_Y_ONLY_MASK 0x800
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_Y_ONLY 0x800
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_STEREO_OFFSET 9
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_STEREO_MASK 0x600
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_INT_TOTAL_OFFSET 8
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_INT_TOTAL_MASK 0x100
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_INT_TOTAL 0x100
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_COLOR_OFFSET 1
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_COLOR_MASK 0xFE
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_CLK_SYNC_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_CLK_SYNC_MASK 0x1
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_MSA_MISC_CLK_SYNC 0x1
#define DP_SINK_STREAM_EXTRACTOR_FSM_STATUS_STATE_VID_STATUS_OFFSET 8
#define DP_SINK_STREAM_EXTRACTOR_FSM_STATUS_STATE_VID_STATUS_MASK 0x700
#define DP_SINK_STREAM_EXTRACTOR_FSM_STATUS_STATE_PTP_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_FSM_STATUS_STATE_PTP_MASK 0x3
#define DP_SINK_STREAM_EXTRACTOR_VBD_VBID_VBID_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_VBD_VBID_VBID_MASK 0xFF0000
#define DP_SINK_STREAM_EXTRACTOR_VBD_VBID_MAUD_OFFSET 8
#define DP_SINK_STREAM_EXTRACTOR_VBD_VBID_MAUD_MASK 0xFF00
#define DP_SINK_STREAM_EXTRACTOR_VBD_VBID_MVID_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_VBD_VBID_MVID_MASK 0xFF
#define DP_SINK_STREAM_EXTRACTOR_VBD_STATUS_VBD_MAJORITY_FAIL_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_VBD_STATUS_VBD_MAJORITY_FAIL_MASK 0x1
#define DP_SINK_STREAM_EXTRACTOR_VBD_STATUS_VBD_MAJORITY_FAIL 0x1
#define DP_SINK_STREAM_EXTRACTOR_VID_FIFO_CONFIG_DEPTH_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_VID_FIFO_CONFIG_DEPTH_MASK 0xFF
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_OVERFLOW_OFFSET 3
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_OVERFLOW_MASK 0x8
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_OVERFLOW 0x8
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_UNDERFLOW_OFFSET 2
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_UNDERFLOW_MASK 0x4
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_UNDERFLOW 0x4
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_FULL_OFFSET 1
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_FULL_MASK 0x2
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_FULL 0x2
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_EMPTY_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_EMPTY_MASK 0x1
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_STATUS_EMPTY 0x1
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_OVERFLOW_OFFSET 3
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_OVERFLOW_MASK 0x8
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_OVERFLOW 0x8
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_UNDERFLOW_OFFSET 2
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_UNDERFLOW_MASK 0x4
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_UNDERFLOW 0x4
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_FULL_OFFSET 1
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_FULL_MASK 0x2
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_FULL 0x2
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_EMPTY_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_EMPTY_MASK 0x1
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_EMPTY 0x1
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_CONFIG_DEPTH_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_SDP_FIFO_CONFIG_DEPTH_MASK 0x1FF
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_CONFIG_DEPTH_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_SDP_TAG_FIFO_CONFIG_DEPTH_MASK 0x7F
#define DP_SINK_STREAM_EXTRACTOR_SDP_DEBUG_SS_SE_SAME_CYCLE_BYTE_NUM_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_SDP_DEBUG_SS_SE_SAME_CYCLE_BYTE_NUM_MASK 0xFF
#define DP_SINK_STREAM_EXTRACTOR_PIXGEN_EN_OFFSET 31
#define DP_SINK_STREAM_EXTRACTOR_PIXGEN_EN_MASK 0x80000000
#define DP_SINK_STREAM_EXTRACTOR_PIXGEN_EN 0x80000000
#define DP_SINK_STREAM_EXTRACTOR_PIXGEN_BLUE_OFFSET 16
#define DP_SINK_STREAM_EXTRACTOR_PIXGEN_BLUE_MASK 0xFF0000
#define DP_SINK_STREAM_EXTRACTOR_PIXGEN_GREEN_OFFSET 8
#define DP_SINK_STREAM_EXTRACTOR_PIXGEN_GREEN_MASK 0xFF00
#define DP_SINK_STREAM_EXTRACTOR_PIXGEN_RED_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_PIXGEN_RED_MASK 0xFF
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_IDLE_PATTERN_CNT_OFFSET 8
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_IDLE_PATTERN_CNT_MASK 0xFF00
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_IDLE_PATTERN_CNT_RST_OFFSET 0
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_IDLE_PATTERN_CNT_RST_MASK 0x1
#define DP_SINK_STREAM_EXTRACTOR_DEBUG_IDLE_PATTERN_CNT_RST 0x1
#define DP_SINK_ENCODER_VFR_HANDSHAKE_HANDSHAKE_OFFSET 0
#define DP_SINK_ENCODER_VFR_HANDSHAKE_HANDSHAKE_MASK 0xFF
#define DP_SINK_ENCODER_VFR_PIXEL_LAST_EARLY_OFFSET 16
#define DP_SINK_ENCODER_VFR_PIXEL_LAST_EARLY_MASK 0xFF0000
#define DP_SINK_ENCODER_VFR_PIXEL_LAST_LATE_OFFSET 8
#define DP_SINK_ENCODER_VFR_PIXEL_LAST_LATE_MASK 0xFF00
#define DP_SINK_ENCODER_VFR_PIXEL_FIRST_OFFSET 0
#define DP_SINK_ENCODER_VFR_PIXEL_FIRST_MASK 0xFF
#define DP_SINK_ENCODER_VFR_LINE_LAST_EARLY_OFFSET 16
#define DP_SINK_ENCODER_VFR_LINE_LAST_EARLY_MASK 0xFF0000
#define DP_SINK_ENCODER_VFR_LINE_LAST_LATE_OFFSET 8
#define DP_SINK_ENCODER_VFR_LINE_LAST_LATE_MASK 0xFF00
#define DP_SINK_ENCODER_VFR_LINE_FIRST_OFFSET 0
#define DP_SINK_ENCODER_VFR_LINE_FIRST_MASK 0xFF
#define DP_SINK_STATS0_RD2CLR_CONFIG_MSA_MAJORITY_FAIL_OFFSET 22
#define DP_SINK_STATS0_RD2CLR_CONFIG_MSA_MAJORITY_FAIL_MASK 0x400000
#define DP_SINK_STATS0_RD2CLR_CONFIG_MSA_MAJORITY_FAIL 0x400000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VBD_MAJORITY_FAIL_OFFSET 21
#define DP_SINK_STATS0_RD2CLR_CONFIG_VBD_MAJORITY_FAIL_MASK 0x200000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VBD_MAJORITY_FAIL 0x200000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_SR_FULL_OFFSET 20
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_SR_FULL_MASK 0x100000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_SR_FULL 0x100000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL_WATERMARK_OFFSET 19
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL_WATERMARK_MASK 0x80000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL_WATERMARK 0x80000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL_OFFSET 18
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL_MASK 0x40000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL 0x40000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_UNDERFLOW_OFFSET 17
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_UNDERFLOW_MASK 0x20000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_UNDERFLOW 0x20000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_OVERFLOW_OFFSET 16
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_OVERFLOW_MASK 0x10000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_OVERFLOW 0x10000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_EMPTY_OFFSET 15
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_EMPTY_MASK 0x8000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_EMPTY 0x8000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_FULL_OFFSET 14
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_FULL_MASK 0x4000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_FULL 0x4000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_SR_FULL_OFFSET 13
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_SR_FULL_MASK 0x2000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_SR_FULL 0x2000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL_WATERMARK_OFFSET 12
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL_WATERMARK_MASK 0x1000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL_WATERMARK 0x1000
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL_OFFSET 11
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL_MASK 0x800
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL 0x800
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_UNDERFLOW_OFFSET 10
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_UNDERFLOW_MASK 0x400
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_UNDERFLOW 0x400
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_OVERFLOW_OFFSET 9
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_OVERFLOW_MASK 0x200
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_OVERFLOW 0x200
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_EMPTY_OFFSET 8
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_EMPTY_MASK 0x100
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_EMPTY 0x100
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_FULL_OFFSET 7
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_FULL_MASK 0x80
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_FULL 0x80
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_SR_FULL_OFFSET 6
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_SR_FULL_MASK 0x40
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_SR_FULL 0x40
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL_WATERMARK_OFFSET 5
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL_WATERMARK_MASK 0x20
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL_WATERMARK 0x20
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL_OFFSET 4
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL_MASK 0x10
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL 0x10
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_UNDERFLOW_OFFSET 3
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_UNDERFLOW_MASK 0x8
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_UNDERFLOW 0x8
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_OVERFLOW_OFFSET 2
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_OVERFLOW_MASK 0x4
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_OVERFLOW 0x4
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_EMPTY_OFFSET 1
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_EMPTY_MASK 0x2
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_EMPTY 0x2
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_FULL_OFFSET 0
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_FULL_MASK 0x1
#define DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_FULL 0x1
#define DP_SINK_STATS0_VID_C0_FIFO_FULL_VID_C0_FIFO_FULL_OFFSET 0
#define DP_SINK_STATS0_VID_C0_FIFO_FULL_VID_C0_FIFO_FULL_MASK 0xFF
#define DP_SINK_STATS0_VID_C0_FIFO_EMPTY_VID_C0_FIFO_EMPTY_OFFSET 0
#define DP_SINK_STATS0_VID_C0_FIFO_EMPTY_VID_C0_FIFO_EMPTY_MASK 0xFF
#define DP_SINK_STATS0_VID_C0_FIFO_OVERFLOW_VID_C0_FIFO_OVERFLOW_OFFSET 0
#define DP_SINK_STATS0_VID_C0_FIFO_OVERFLOW_VID_C0_FIFO_OVERFLOW_MASK 0xFF
#define DP_SINK_STATS0_VID_C0_FIFO_UNDERFLOW_VID_C0_FIFO_UNDERFLOW_OFFSET 0
#define DP_SINK_STATS0_VID_C0_FIFO_UNDERFLOW_VID_C0_FIFO_UNDERFLOW_MASK 0xFF
#define DP_SINK_STATS0_VID_C0_FIFO_LEVEL_VID_C0_FIFO_LEVEL_OFFSET 0
#define DP_SINK_STATS0_VID_C0_FIFO_LEVEL_VID_C0_FIFO_LEVEL_MASK 0xFF
#define DP_SINK_STATS0_VID_C0_FIFO_LEVEL_WATERMARK_VID_C0_FIFO_LEVEL_WATERMARK_OFFSET 0
#define DP_SINK_STATS0_VID_C0_FIFO_LEVEL_WATERMARK_VID_C0_FIFO_LEVEL_WATERMARK_MASK 0xFF
#define DP_SINK_STATS0_VID_C0_SR_FULL_VID_C0_SR_FULL_OFFSET 0
#define DP_SINK_STATS0_VID_C0_SR_FULL_VID_C0_SR_FULL_MASK 0xFF
#define DP_SINK_STATS0_VID_C1_FIFO_FULL_VID_C1_FIFO_FULL_OFFSET 0
#define DP_SINK_STATS0_VID_C1_FIFO_FULL_VID_C1_FIFO_FULL_MASK 0xFF
#define DP_SINK_STATS0_VID_C1_FIFO_EMPTY_VID_C1_FIFO_EMPTY_OFFSET 0
#define DP_SINK_STATS0_VID_C1_FIFO_EMPTY_VID_C1_FIFO_EMPTY_MASK 0xFF
#define DP_SINK_STATS0_VID_C1_FIFO_OVERFLOW_VID_C1_FIFO_OVERFLOW_OFFSET 0
#define DP_SINK_STATS0_VID_C1_FIFO_OVERFLOW_VID_C1_FIFO_OVERFLOW_MASK 0xFF
#define DP_SINK_STATS0_VID_C1_FIFO_UNDERFLOW_VID_C1_FIFO_UNDERFLOW_OFFSET 0
#define DP_SINK_STATS0_VID_C1_FIFO_UNDERFLOW_VID_C1_FIFO_UNDERFLOW_MASK 0xFF
#define DP_SINK_STATS0_VID_C1_FIFO_LEVEL_VID_C1_FIFO_LEVEL_OFFSET 0
#define DP_SINK_STATS0_VID_C1_FIFO_LEVEL_VID_C1_FIFO_LEVEL_MASK 0xFF
#define DP_SINK_STATS0_VID_C1_FIFO_LEVEL_WATERMARK_VID_C1_FIFO_LEVEL_WATERMARK_OFFSET 0
#define DP_SINK_STATS0_VID_C1_FIFO_LEVEL_WATERMARK_VID_C1_FIFO_LEVEL_WATERMARK_MASK 0xFF
#define DP_SINK_STATS0_VID_C1_SR_FULL_VID_C1_SR_FULL_OFFSET 0
#define DP_SINK_STATS0_VID_C1_SR_FULL_VID_C1_SR_FULL_MASK 0xFF
#define DP_SINK_STATS0_VID_C2_FIFO_FULL_VID_C2_FIFO_FULL_OFFSET 0
#define DP_SINK_STATS0_VID_C2_FIFO_FULL_VID_C2_FIFO_FULL_MASK 0xFF
#define DP_SINK_STATS0_VID_C2_FIFO_EMPTY_VID_C2_FIFO_EMPTY_OFFSET 0
#define DP_SINK_STATS0_VID_C2_FIFO_EMPTY_VID_C2_FIFO_EMPTY_MASK 0xFF
#define DP_SINK_STATS0_VID_C2_FIFO_OVERFLOW_VID_C2_FIFO_OVERFLOW_OFFSET 0
#define DP_SINK_STATS0_VID_C2_FIFO_OVERFLOW_VID_C2_FIFO_OVERFLOW_MASK 0xFF
#define DP_SINK_STATS0_VID_C2_FIFO_UNDERFLOW_VID_C2_FIFO_UNDERFLOW_OFFSET 0
#define DP_SINK_STATS0_VID_C2_FIFO_UNDERFLOW_VID_C2_FIFO_UNDERFLOW_MASK 0xFF
#define DP_SINK_STATS0_VID_C2_FIFO_LEVEL_VID_C2_FIFO_LEVEL_OFFSET 0
#define DP_SINK_STATS0_VID_C2_FIFO_LEVEL_VID_C2_FIFO_LEVEL_MASK 0xFF
#define DP_SINK_STATS0_VID_C2_FIFO_LEVEL_WATERMARK_VID_C2_FIFO_LEVEL_WATERMARK_OFFSET 0
#define DP_SINK_STATS0_VID_C2_FIFO_LEVEL_WATERMARK_VID_C2_FIFO_LEVEL_WATERMARK_MASK 0xFF
#define DP_SINK_STATS0_VID_C2_SR_FULL_VID_C2_SR_FULL_OFFSET 0
#define DP_SINK_STATS0_VID_C2_SR_FULL_VID_C2_SR_FULL_MASK 0xFF
#define DP_SINK_STATS0_VBD_MAJORITY_FAIL_VBD_MAJORITY_FAIL_OFFSET 0
#define DP_SINK_STATS0_VBD_MAJORITY_FAIL_VBD_MAJORITY_FAIL_MASK 0xFF
#define DP_SINK_STATS0_MSA_MAJORITY_FAIL_MSA_MAJORITY_FAIL_OFFSET 0
#define DP_SINK_STATS0_MSA_MAJORITY_FAIL_MSA_MAJORITY_FAIL_MASK 0xFF
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL_WATERMARK_OFFSET 14
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL_WATERMARK_MASK 0x4000
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL_WATERMARK 0x4000
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL_OFFSET 13
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL_MASK 0x2000
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL 0x2000
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_UNDERFLOW_OFFSET 12
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_UNDERFLOW_MASK 0x1000
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_UNDERFLOW 0x1000
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_OVERFLOW_OFFSET 11
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_OVERFLOW_MASK 0x800
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_OVERFLOW 0x800
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_EMPTY_OFFSET 10
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_EMPTY_MASK 0x400
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_EMPTY 0x400
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_FULL_OFFSET 9
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_FULL_MASK 0x200
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_FULL 0x200
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL_WATERMARK_OFFSET 8
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL_WATERMARK_MASK 0x100
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL_WATERMARK 0x100
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL_OFFSET 7
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL_MASK 0x80
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL 0x80
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_UNDERFLOW_OFFSET 6
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_UNDERFLOW_MASK 0x40
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_UNDERFLOW 0x40
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_OVERFLOW_OFFSET 5
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_OVERFLOW_MASK 0x20
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_OVERFLOW 0x20
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_EMPTY_OFFSET 4
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_EMPTY_MASK 0x10
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_EMPTY 0x10
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_FULL_OFFSET 3
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_FULL_MASK 0x8
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_FULL 0x8
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_SS_SE_SAME_CYCLE_OFFSET 2
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_SS_SE_SAME_CYCLE_MASK 0x4
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_SS_SE_SAME_CYCLE 0x4
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT_WATERMARK_OFFSET 1
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT_WATERMARK_MASK 0x2
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT_WATERMARK 0x2
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT_OFFSET 0
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT_MASK 0x1
#define DP_SINK_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT 0x1
#define DP_SINK_STATS1_SDP_PKT_SENT_CNT_SDP_PKT_SENT_CNT_OFFSET 0
#define DP_SINK_STATS1_SDP_PKT_SENT_CNT_SDP_PKT_SENT_CNT_MASK 0xFF
#define DP_SINK_STATS1_SDP_PKT_SENT_CNT_WATERMARK_SDP_PKT_SENT_CNT_WATERMARK_OFFSET 0
#define DP_SINK_STATS1_SDP_PKT_SENT_CNT_WATERMARK_SDP_PKT_SENT_CNT_WATERMARK_MASK 0xFF
#define DP_SINK_STATS1_SDP_SS_SE_SAME_CYCLE_SDP_SS_SE_SAME_CYCLE_OFFSET 0
#define DP_SINK_STATS1_SDP_SS_SE_SAME_CYCLE_SDP_SS_SE_SAME_CYCLE_MASK 0xFF
#define DP_SINK_STATS1_SDP_FIFO_FULL_SDP_FIFO_FULL_OFFSET 0
#define DP_SINK_STATS1_SDP_FIFO_FULL_SDP_FIFO_FULL_MASK 0xFF
#define DP_SINK_STATS1_SDP_FIFO_EMPTY_SDP_FIFO_EMPTY_OFFSET 0
#define DP_SINK_STATS1_SDP_FIFO_EMPTY_SDP_FIFO_EMPTY_MASK 0xFF
#define DP_SINK_STATS1_SDP_FIFO_OVERFLOW_SDP_FIFO_OVERFLOW_OFFSET 0
#define DP_SINK_STATS1_SDP_FIFO_OVERFLOW_SDP_FIFO_OVERFLOW_MASK 0xFF
#define DP_SINK_STATS1_SDP_FIFO_UNDERFLOW_SDP_FIFO_UNDERFLOW_OFFSET 0
#define DP_SINK_STATS1_SDP_FIFO_UNDERFLOW_SDP_FIFO_UNDERFLOW_MASK 0xFF
#define DP_SINK_STATS1_SDP_FIFO_LEVEL_SDP_FIFO_LEVEL_OFFSET 0
#define DP_SINK_STATS1_SDP_FIFO_LEVEL_SDP_FIFO_LEVEL_MASK 0xFFFF
#define DP_SINK_STATS1_SDP_FIFO_LEVEL_WATERMARK_SDP_FIFO_LEVEL_WATERMARK_OFFSET 0
#define DP_SINK_STATS1_SDP_FIFO_LEVEL_WATERMARK_SDP_FIFO_LEVEL_WATERMARK_MASK 0xFFFF
#define DP_SINK_STATS1_SDP_TAG_FIFO_FULL_SDP_TAG_FIFO_FULL_OFFSET 0
#define DP_SINK_STATS1_SDP_TAG_FIFO_FULL_SDP_TAG_FIFO_FULL_MASK 0xFF
#define DP_SINK_STATS1_SDP_TAG_FIFO_EMPTY_SDP_TAG_FIFO_EMPTY_OFFSET 0
#define DP_SINK_STATS1_SDP_TAG_FIFO_EMPTY_SDP_TAG_FIFO_EMPTY_MASK 0xFF
#define DP_SINK_STATS1_SDP_TAG_FIFO_OVERFLOW_SDP_TAG_FIFO_OVERFLOW_OFFSET 0
#define DP_SINK_STATS1_SDP_TAG_FIFO_OVERFLOW_SDP_TAG_FIFO_OVERFLOW_MASK 0xFF
#define DP_SINK_STATS1_SDP_TAG_FIFO_UNDERFLOW_SDP_TAG_FIFO_UNDERFLOW_OFFSET 0
#define DP_SINK_STATS1_SDP_TAG_FIFO_UNDERFLOW_SDP_TAG_FIFO_UNDERFLOW_MASK 0xFF
#define DP_SINK_STATS1_SDP_TAG_FIFO_LEVEL_SDP_TAG_FIFO_LEVEL_OFFSET 0
#define DP_SINK_STATS1_SDP_TAG_FIFO_LEVEL_SDP_TAG_FIFO_LEVEL_MASK 0xFF
#define DP_SINK_STATS1_SDP_TAG_FIFO_LEVEL_WATERMARK_SDP_TAG_FIFO_LEVEL_WATERMARK_OFFSET 0
#define DP_SINK_STATS1_SDP_TAG_FIFO_LEVEL_WATERMARK_SDP_TAG_FIFO_LEVEL_WATERMARK_MASK 0xFF
#define DP_SINK_IRQ_ENABLE_AUDIOMUTE_OFFSET 31
#define DP_SINK_IRQ_ENABLE_AUDIOMUTE_MASK 0x80000000
#define DP_SINK_IRQ_ENABLE_AUDIOMUTE 0x80000000
#define DP_SINK_IRQ_ENABLE_NOVIDEOSTREAM_OFFSET 30
#define DP_SINK_IRQ_ENABLE_NOVIDEOSTREAM_MASK 0x40000000
#define DP_SINK_IRQ_ENABLE_NOVIDEOSTREAM 0x40000000
#define DP_SINK_IRQ_ENABLE_DP_GT_RXBYTEREALIGN_OFFSET 29
#define DP_SINK_IRQ_ENABLE_DP_GT_RXBYTEREALIGN_MASK 0x20000000
#define DP_SINK_IRQ_ENABLE_DP_GT_RXBYTEREALIGN 0x20000000
#define DP_SINK_IRQ_ENABLE_FIRST_IDLE_PATTERN_OFFSET 28
#define DP_SINK_IRQ_ENABLE_FIRST_IDLE_PATTERN_MASK 0x10000000
#define DP_SINK_IRQ_ENABLE_FIRST_IDLE_PATTERN 0x10000000
#define DP_SINK_IRQ_ENABLE_LANES_WITH_8B10B_ERR_POST_CR_OFFSET 27
#define DP_SINK_IRQ_ENABLE_LANES_WITH_8B10B_ERR_POST_CR_MASK 0x8000000
#define DP_SINK_IRQ_ENABLE_LANES_WITH_8B10B_ERR_POST_CR 0x8000000
#define DP_SINK_IRQ_ENABLE_LANES_NOT_ALIGNED_OFFSET 25
#define DP_SINK_IRQ_ENABLE_LANES_NOT_ALIGNED_MASK 0x2000000
#define DP_SINK_IRQ_ENABLE_LANES_NOT_ALIGNED 0x2000000
#define DP_SINK_IRQ_ENABLE_BOND_ALIGN_DONE_OFFSET 24
#define DP_SINK_IRQ_ENABLE_BOND_ALIGN_DONE_MASK 0x1000000
#define DP_SINK_IRQ_ENABLE_BOND_ALIGN_DONE 0x1000000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_OFFSET 23
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_MASK 0x800000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3 0x800000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_OFFSET 22
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_MASK 0x400000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2 0x400000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_OFFSET 21
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_MASK 0x200000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1 0x200000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_OFFSET 20
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK 0x100000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0 0x100000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_OFFSET 19
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_MASK 0x80000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3 0x80000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_OFFSET 18
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_MASK 0x40000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2 0x40000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_OFFSET 17
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_MASK 0x20000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1 0x20000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_OFFSET 16
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK 0x10000
#define DP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0 0x10000
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW3_OFFSET 15
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW3_MASK 0x8000
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW3 0x8000
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW2_OFFSET 14
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW2_MASK 0x4000
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW2 0x4000
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW1_OFFSET 13
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW1_MASK 0x2000
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW1 0x2000
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW0_OFFSET 12
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW0_MASK 0x1000
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW0 0x1000
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW3_OFFSET 11
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW3_MASK 0x800
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW3 0x800
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW2_OFFSET 10
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW2_MASK 0x400
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW2 0x400
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW1_OFFSET 9
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW1_MASK 0x200
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW1 0x200
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW0_OFFSET 8
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW0_MASK 0x100
#define DP_SINK_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW0 0x100
#define DP_SINK_IRQ_ENABLE_SDP_TAG_FIFO_UNDERFLOW_OFFSET 7
#define DP_SINK_IRQ_ENABLE_SDP_TAG_FIFO_UNDERFLOW_MASK 0x80
#define DP_SINK_IRQ_ENABLE_SDP_TAG_FIFO_UNDERFLOW 0x80
#define DP_SINK_IRQ_ENABLE_SDP_TAG_FIFO_OVERFLOW_OFFSET 6
#define DP_SINK_IRQ_ENABLE_SDP_TAG_FIFO_OVERFLOW_MASK 0x40
#define DP_SINK_IRQ_ENABLE_SDP_TAG_FIFO_OVERFLOW 0x40
#define DP_SINK_IRQ_ENABLE_SDP_FIFO_UNDERFLOW_OFFSET 5
#define DP_SINK_IRQ_ENABLE_SDP_FIFO_UNDERFLOW_MASK 0x20
#define DP_SINK_IRQ_ENABLE_SDP_FIFO_UNDERFLOW 0x20
#define DP_SINK_IRQ_ENABLE_SDP_FIFO_OVERFLOW_OFFSET 4
#define DP_SINK_IRQ_ENABLE_SDP_FIFO_OVERFLOW_MASK 0x10
#define DP_SINK_IRQ_ENABLE_SDP_FIFO_OVERFLOW 0x10
#define DP_SINK_IRQ_ENABLE_MSA_MAJORITY_FAIL_OFFSET 2
#define DP_SINK_IRQ_ENABLE_MSA_MAJORITY_FAIL_MASK 0x4
#define DP_SINK_IRQ_ENABLE_MSA_MAJORITY_FAIL 0x4
#define DP_SINK_IRQ_ENABLE_VBD_MAJORITY_FAIL_OFFSET 1
#define DP_SINK_IRQ_ENABLE_VBD_MAJORITY_FAIL_MASK 0x2
#define DP_SINK_IRQ_ENABLE_VBD_MAJORITY_FAIL 0x2
#define DP_SINK_IRQ_ENABLE_TU_SIZE_RDY_OFFSET 0
#define DP_SINK_IRQ_ENABLE_TU_SIZE_RDY_MASK 0x1
#define DP_SINK_IRQ_ENABLE_TU_SIZE_RDY 0x1
#define DP_SINK_IRQ_PENDING_AUDIOMUTE_OFFSET 31
#define DP_SINK_IRQ_PENDING_AUDIOMUTE_MASK 0x80000000
#define DP_SINK_IRQ_PENDING_AUDIOMUTE 0x80000000
#define DP_SINK_IRQ_PENDING_NOVIDEOSTREAM_OFFSET 30
#define DP_SINK_IRQ_PENDING_NOVIDEOSTREAM_MASK 0x40000000
#define DP_SINK_IRQ_PENDING_NOVIDEOSTREAM 0x40000000
#define DP_SINK_IRQ_PENDING_DP_GT_RXBYTEREALIGN_OFFSET 29
#define DP_SINK_IRQ_PENDING_DP_GT_RXBYTEREALIGN_MASK 0x20000000
#define DP_SINK_IRQ_PENDING_DP_GT_RXBYTEREALIGN 0x20000000
#define DP_SINK_IRQ_PENDING_FIRST_IDLE_PATTERN_OFFSET 28
#define DP_SINK_IRQ_PENDING_FIRST_IDLE_PATTERN_MASK 0x10000000
#define DP_SINK_IRQ_PENDING_FIRST_IDLE_PATTERN 0x10000000
#define DP_SINK_IRQ_PENDING_LANES_WITH_8B10B_ERR_POST_CR_OFFSET 27
#define DP_SINK_IRQ_PENDING_LANES_WITH_8B10B_ERR_POST_CR_MASK 0x8000000
#define DP_SINK_IRQ_PENDING_LANES_WITH_8B10B_ERR_POST_CR 0x8000000
#define DP_SINK_IRQ_PENDING_LANES_NOT_ALIGNED_OFFSET 25
#define DP_SINK_IRQ_PENDING_LANES_NOT_ALIGNED_MASK 0x2000000
#define DP_SINK_IRQ_PENDING_LANES_NOT_ALIGNED 0x2000000
#define DP_SINK_IRQ_PENDING_BOND_ALIGN_DONE_OFFSET 24
#define DP_SINK_IRQ_PENDING_BOND_ALIGN_DONE_MASK 0x1000000
#define DP_SINK_IRQ_PENDING_BOND_ALIGN_DONE 0x1000000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_OFFSET 23
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_MASK 0x800000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3 0x800000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_OFFSET 22
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_MASK 0x400000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2 0x400000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_OFFSET 21
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_MASK 0x200000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1 0x200000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_OFFSET 20
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK 0x100000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0 0x100000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_OFFSET 19
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_MASK 0x80000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3 0x80000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_OFFSET 18
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_MASK 0x40000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2 0x40000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_OFFSET 17
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_MASK 0x20000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1 0x20000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_OFFSET 16
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK 0x10000
#define DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0 0x10000
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW3_OFFSET 15
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW3_MASK 0x8000
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW3 0x8000
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW2_OFFSET 14
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW2_MASK 0x4000
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW2 0x4000
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW1_OFFSET 13
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW1_MASK 0x2000
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW1 0x2000
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW0_OFFSET 12
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW0_MASK 0x1000
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW0 0x1000
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW3_OFFSET 11
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW3_MASK 0x800
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW3 0x800
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW2_OFFSET 10
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW2_MASK 0x400
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW2 0x400
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW1_OFFSET 9
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW1_MASK 0x200
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW1 0x200
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW0_OFFSET 8
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW0_MASK 0x100
#define DP_SINK_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW0 0x100
#define DP_SINK_IRQ_PENDING_SDP_TAG_FIFO_UNDERFLOW_OFFSET 7
#define DP_SINK_IRQ_PENDING_SDP_TAG_FIFO_UNDERFLOW_MASK 0x80
#define DP_SINK_IRQ_PENDING_SDP_TAG_FIFO_UNDERFLOW 0x80
#define DP_SINK_IRQ_PENDING_SDP_TAG_FIFO_OVERFLOW_OFFSET 6
#define DP_SINK_IRQ_PENDING_SDP_TAG_FIFO_OVERFLOW_MASK 0x40
#define DP_SINK_IRQ_PENDING_SDP_TAG_FIFO_OVERFLOW 0x40
#define DP_SINK_IRQ_PENDING_SDP_FIFO_UNDERFLOW_OFFSET 5
#define DP_SINK_IRQ_PENDING_SDP_FIFO_UNDERFLOW_MASK 0x20
#define DP_SINK_IRQ_PENDING_SDP_FIFO_UNDERFLOW 0x20
#define DP_SINK_IRQ_PENDING_SDP_FIFO_OVERFLOW_OFFSET 4
#define DP_SINK_IRQ_PENDING_SDP_FIFO_OVERFLOW_MASK 0x10
#define DP_SINK_IRQ_PENDING_SDP_FIFO_OVERFLOW 0x10
#define DP_SINK_IRQ_PENDING_MSA_MAJORITY_FAIL_OFFSET 2
#define DP_SINK_IRQ_PENDING_MSA_MAJORITY_FAIL_MASK 0x4
#define DP_SINK_IRQ_PENDING_MSA_MAJORITY_FAIL 0x4
#define DP_SINK_IRQ_PENDING_VBD_MAJORITY_FAIL_OFFSET 1
#define DP_SINK_IRQ_PENDING_VBD_MAJORITY_FAIL_MASK 0x2
#define DP_SINK_IRQ_PENDING_VBD_MAJORITY_FAIL 0x2
#define DP_SINK_IRQ_PENDING_TU_SIZE_RDY_OFFSET 0
#define DP_SINK_IRQ_PENDING_TU_SIZE_RDY_MASK 0x1
#define DP_SINK_IRQ_PENDING_TU_SIZE_RDY 0x1
#define DP_SINK_IRQ_PENDING_IRQ_AUDIOMUTE_OFFSET 31
#define DP_SINK_IRQ_PENDING_IRQ_AUDIOMUTE_MASK 0x80000000
#define DP_SINK_IRQ_PENDING_IRQ_AUDIOMUTE 0x80000000
#define DP_SINK_IRQ_PENDING_IRQ_NOVIDEOSTREAM_OFFSET 30
#define DP_SINK_IRQ_PENDING_IRQ_NOVIDEOSTREAM_MASK 0x40000000
#define DP_SINK_IRQ_PENDING_IRQ_NOVIDEOSTREAM 0x40000000
#define DP_SINK_IRQ_PENDING_IRQ_DP_GT_RXBYTEREALIGN_OFFSET 29
#define DP_SINK_IRQ_PENDING_IRQ_DP_GT_RXBYTEREALIGN_MASK 0x20000000
#define DP_SINK_IRQ_PENDING_IRQ_DP_GT_RXBYTEREALIGN 0x20000000
#define DP_SINK_IRQ_PENDING_IRQ_FIRST_IDLE_PATTERN_OFFSET 28
#define DP_SINK_IRQ_PENDING_IRQ_FIRST_IDLE_PATTERN_MASK 0x10000000
#define DP_SINK_IRQ_PENDING_IRQ_FIRST_IDLE_PATTERN 0x10000000
#define DP_SINK_IRQ_PENDING_IRQ_LANES_WITH_8B10B_ERR_POST_CR_OFFSET 27
#define DP_SINK_IRQ_PENDING_IRQ_LANES_WITH_8B10B_ERR_POST_CR_MASK 0x8000000
#define DP_SINK_IRQ_PENDING_IRQ_LANES_WITH_8B10B_ERR_POST_CR 0x8000000
#define DP_SINK_IRQ_PENDING_IRQ_LANES_NOT_ALIGNED_OFFSET 25
#define DP_SINK_IRQ_PENDING_IRQ_LANES_NOT_ALIGNED_MASK 0x2000000
#define DP_SINK_IRQ_PENDING_IRQ_LANES_NOT_ALIGNED 0x2000000
#define DP_SINK_IRQ_PENDING_IRQ_BOND_ALIGN_DONE_OFFSET 24
#define DP_SINK_IRQ_PENDING_IRQ_BOND_ALIGN_DONE_MASK 0x1000000
#define DP_SINK_IRQ_PENDING_IRQ_BOND_ALIGN_DONE 0x1000000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_OFFSET 23
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_MASK 0x800000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3 0x800000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_OFFSET 22
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_MASK 0x400000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2 0x400000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_OFFSET 21
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_MASK 0x200000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1 0x200000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_OFFSET 20
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK 0x100000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0 0x100000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_OFFSET 19
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_MASK 0x80000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3 0x80000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_OFFSET 18
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_MASK 0x40000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2 0x40000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_OFFSET 17
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_MASK 0x20000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1 0x20000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_OFFSET 16
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK 0x10000
#define DP_SINK_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0 0x10000
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW3_OFFSET 15
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW3_MASK 0x8000
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW3 0x8000
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW2_OFFSET 14
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW2_MASK 0x4000
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW2 0x4000
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW1_OFFSET 13
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW1_MASK 0x2000
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW1 0x2000
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW0_OFFSET 12
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW0_MASK 0x1000
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW0 0x1000
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW3_OFFSET 11
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW3_MASK 0x800
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW3 0x800
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW2_OFFSET 10
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW2_MASK 0x400
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW2 0x400
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW1_OFFSET 9
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW1_MASK 0x200
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW1 0x200
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW0_OFFSET 8
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW0_MASK 0x100
#define DP_SINK_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW0 0x100
#define DP_SINK_IRQ_PENDING_IRQ_SDP_TAG_FIFO_UNDERFLOW_OFFSET 7
#define DP_SINK_IRQ_PENDING_IRQ_SDP_TAG_FIFO_UNDERFLOW_MASK 0x80
#define DP_SINK_IRQ_PENDING_IRQ_SDP_TAG_FIFO_UNDERFLOW 0x80
#define DP_SINK_IRQ_PENDING_IRQ_SDP_TAG_FIFO_OVERFLOW_OFFSET 6
#define DP_SINK_IRQ_PENDING_IRQ_SDP_TAG_FIFO_OVERFLOW_MASK 0x40
#define DP_SINK_IRQ_PENDING_IRQ_SDP_TAG_FIFO_OVERFLOW 0x40
#define DP_SINK_IRQ_PENDING_IRQ_SDP_FIFO_UNDERFLOW_OFFSET 5
#define DP_SINK_IRQ_PENDING_IRQ_SDP_FIFO_UNDERFLOW_MASK 0x20
#define DP_SINK_IRQ_PENDING_IRQ_SDP_FIFO_UNDERFLOW 0x20
#define DP_SINK_IRQ_PENDING_IRQ_SDP_FIFO_OVERFLOW_OFFSET 4
#define DP_SINK_IRQ_PENDING_IRQ_SDP_FIFO_OVERFLOW_MASK 0x10
#define DP_SINK_IRQ_PENDING_IRQ_SDP_FIFO_OVERFLOW 0x10
#define DP_SINK_IRQ_PENDING_IRQ_MSA_MAJORITY_FAIL_OFFSET 2
#define DP_SINK_IRQ_PENDING_IRQ_MSA_MAJORITY_FAIL_MASK 0x4
#define DP_SINK_IRQ_PENDING_IRQ_MSA_MAJORITY_FAIL 0x4
#define DP_SINK_IRQ_PENDING_IRQ_VBD_MAJORITY_FAIL_OFFSET 1
#define DP_SINK_IRQ_PENDING_IRQ_VBD_MAJORITY_FAIL_MASK 0x2
#define DP_SINK_IRQ_PENDING_IRQ_VBD_MAJORITY_FAIL 0x2
#define DP_SINK_IRQ_PENDING_IRQ_TU_SIZE_RDY_OFFSET 0
#define DP_SINK_IRQ_PENDING_IRQ_TU_SIZE_RDY_MASK 0x1
#define DP_SINK_IRQ_PENDING_IRQ_TU_SIZE_RDY 0x1
#define DP_SINK_IRQ_RAW_AUDIOMUTE_OFFSET 31
#define DP_SINK_IRQ_RAW_AUDIOMUTE_MASK 0x80000000
#define DP_SINK_IRQ_RAW_AUDIOMUTE 0x80000000
#define DP_SINK_IRQ_RAW_NOVIDEOSTREAM_OFFSET 30
#define DP_SINK_IRQ_RAW_NOVIDEOSTREAM_MASK 0x40000000
#define DP_SINK_IRQ_RAW_NOVIDEOSTREAM 0x40000000
#define DP_SINK_IRQ_RAW_DP_GT_RXBYTEREALIGN_OFFSET 29
#define DP_SINK_IRQ_RAW_DP_GT_RXBYTEREALIGN_MASK 0x20000000
#define DP_SINK_IRQ_RAW_DP_GT_RXBYTEREALIGN 0x20000000
#define DP_SINK_IRQ_RAW_FIRST_IDLE_PATTERN_OFFSET 28
#define DP_SINK_IRQ_RAW_FIRST_IDLE_PATTERN_MASK 0x10000000
#define DP_SINK_IRQ_RAW_FIRST_IDLE_PATTERN 0x10000000
#define DP_SINK_IRQ_RAW_LANES_WITH_8B10B_ERR_POST_CR_OFFSET 27
#define DP_SINK_IRQ_RAW_LANES_WITH_8B10B_ERR_POST_CR_MASK 0x8000000
#define DP_SINK_IRQ_RAW_LANES_WITH_8B10B_ERR_POST_CR 0x8000000
#define DP_SINK_IRQ_RAW_LANES_NOT_ALIGNED_OFFSET 25
#define DP_SINK_IRQ_RAW_LANES_NOT_ALIGNED_MASK 0x2000000
#define DP_SINK_IRQ_RAW_LANES_NOT_ALIGNED 0x2000000
#define DP_SINK_IRQ_RAW_BOND_ALIGN_DONE_OFFSET 24
#define DP_SINK_IRQ_RAW_BOND_ALIGN_DONE_MASK 0x1000000
#define DP_SINK_IRQ_RAW_BOND_ALIGN_DONE 0x1000000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_OFFSET 23
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_MASK 0x800000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3 0x800000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_OFFSET 22
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_MASK 0x400000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2 0x400000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_OFFSET 21
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_MASK 0x200000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1 0x200000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_OFFSET 20
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK 0x100000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0 0x100000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_OFFSET 19
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_MASK 0x80000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3 0x80000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_OFFSET 18
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_MASK 0x40000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2 0x40000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_OFFSET 17
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_MASK 0x20000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1 0x20000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_OFFSET 16
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK 0x10000
#define DP_SINK_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0 0x10000
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW3_OFFSET 15
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW3_MASK 0x8000
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW3 0x8000
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW2_OFFSET 14
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW2_MASK 0x4000
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW2 0x4000
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW1_OFFSET 13
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW1_MASK 0x2000
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW1 0x2000
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW0_OFFSET 12
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW0_MASK 0x1000
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW0 0x1000
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW3_OFFSET 11
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW3_MASK 0x800
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW3 0x800
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW2_OFFSET 10
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW2_MASK 0x400
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW2 0x400
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW1_OFFSET 9
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW1_MASK 0x200
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW1 0x200
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW0_OFFSET 8
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW0_MASK 0x100
#define DP_SINK_IRQ_RAW_ALIGNER_FIFO_OVERFLOW0 0x100
#define DP_SINK_IRQ_RAW_SDP_TAG_FIFO_UNDERFLOW_OFFSET 7
#define DP_SINK_IRQ_RAW_SDP_TAG_FIFO_UNDERFLOW_MASK 0x80
#define DP_SINK_IRQ_RAW_SDP_TAG_FIFO_UNDERFLOW 0x80
#define DP_SINK_IRQ_RAW_SDP_TAG_FIFO_OVERFLOW_OFFSET 6
#define DP_SINK_IRQ_RAW_SDP_TAG_FIFO_OVERFLOW_MASK 0x40
#define DP_SINK_IRQ_RAW_SDP_TAG_FIFO_OVERFLOW 0x40
#define DP_SINK_IRQ_RAW_SDP_FIFO_UNDERFLOW_OFFSET 5
#define DP_SINK_IRQ_RAW_SDP_FIFO_UNDERFLOW_MASK 0x20
#define DP_SINK_IRQ_RAW_SDP_FIFO_UNDERFLOW 0x20
#define DP_SINK_IRQ_RAW_SDP_FIFO_OVERFLOW_OFFSET 4
#define DP_SINK_IRQ_RAW_SDP_FIFO_OVERFLOW_MASK 0x10
#define DP_SINK_IRQ_RAW_SDP_FIFO_OVERFLOW 0x10
#define DP_SINK_IRQ_RAW_MSA_MAJORITY_FAIL_OFFSET 2
#define DP_SINK_IRQ_RAW_MSA_MAJORITY_FAIL_MASK 0x4
#define DP_SINK_IRQ_RAW_MSA_MAJORITY_FAIL 0x4
#define DP_SINK_IRQ_RAW_VBD_MAJORITY_FAIL_OFFSET 1
#define DP_SINK_IRQ_RAW_VBD_MAJORITY_FAIL_MASK 0x2
#define DP_SINK_IRQ_RAW_VBD_MAJORITY_FAIL 0x2
#define DP_SINK_IRQ_RAW_TU_SIZE_RDY_OFFSET 0
#define DP_SINK_IRQ_RAW_TU_SIZE_RDY_MASK 0x1
#define DP_SINK_IRQ_RAW_TU_SIZE_RDY 0x1
#endif /* _DP_SINK_REGS_H_ */

/* end */
