/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Remco van Steeden*/
/* generated by      : Remco.vanSteeden*/
/* generated from    : C:\cygwin64\home\Remco.VanSteeden\blackbird_rls_20191024\m_blackbird\regs\ids\bb_core_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/*block : bb_core */

#ifndef _BB_CORE_REGS_H_
#define _BB_CORE_REGS_H_

#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0xC */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x7 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x7 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0xC */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_version;

typedef union {
    struct {
        uint32_t value : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_core_cpu_freq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t link_rate : 4;           /* 19:16 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t link_mode : 5;           /* 12:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t boot_sel : 2;           /* 5:4 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rex_lex_n : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rex_lex_n : 1;           /* 0 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t boot_sel : 2;           /* 4:5 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t link_mode : 5;           /* 8:12 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t link_rate : 4;           /* 16:19 SW=ro HW=wo 0x0 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_sys_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv17 : 15;
            uint32_t xgmii_rx_idle_counter : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rs232_extender : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t ge_uart : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t ge_adapter : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t xmii_adapter : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t dp_source : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t dp_sink : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t xusb3 : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t mca : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t layer3 : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t link_layer : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t gpio_ctrl : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t spi_flash_ctrl : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t mdio_master : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t i2c_slave : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t i2c_master : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t bb_uart : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t bb_uart : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t i2c_master : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t i2c_slave : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t mdio_master : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t spi_flash_ctrl : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t gpio_ctrl : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t link_layer : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t layer3 : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t mca : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t xusb3 : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t dp_sink : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t dp_source : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t xmii_adapter : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t ge_adapter : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t ge_uart : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t rs232_extender : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t xgmii_rx_idle_counter : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t resv17 : 15;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_feature;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t version_sel : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t module_sel : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t module_sel : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t version_sel : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_module_version_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_module_version;

/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t rs232_underrun_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t rs232_underrun_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t rs232_underrun_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t rs232_underrun_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t rs232_underrun_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t rs232_underrun_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t rs232_underrun_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t rs232_underrun_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_irq_raw;

typedef struct {
    bb_core_irq_enable  enable;
    bb_core_irq_pending  pending;
    bb_core_irq_pending_irq  pending_irq;
    bb_core_irq_raw  raw;
    
    
    
} bb_core_irq;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t eop : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t sop : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t data : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t data : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t sop : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t eop : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_cpu_comm_tx;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t eop : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t sop : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t data : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t data : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t sop : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t eop : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_cpu_comm_rx;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t ipg_m1 : 8;           /* 15:8 SW=rw HW=ro 0xB */
            
            uint32_t resv2 : 6;
            uint32_t mode : 2;           /* 1:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mode : 2;           /* 0:1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t ipg_m1 : 8;           /* 8:15 SW=rw HW=ro 0xB */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_xmii_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t clk_down_scale : 16;           /* 31:16 SW=rw HW=ro 0x1 */
            
            uint32_t resv1 : 15;
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 15;
            uint32_t clk_down_scale : 16;           /* 16:31 SW=rw HW=ro 0x1 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_rs232_ctrl;

/*section : xgmii_idle_counter */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t num_xgmii_clks : 31;           /* 31:1 SW=rw HW=ro 0xFFFF */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t num_xgmii_clks : 31;           /* 1:31 SW=rw HW=ro 0xFFFF */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_xgmii_idle_counter_control;

typedef union {
    struct {
        uint32_t idle_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_core_xgmii_idle_counter_status;

typedef struct {
    bb_core_xgmii_idle_counter_control  control;
    bb_core_xgmii_idle_counter_status  status;
    
    
    
} bb_core_xgmii_idle_counter;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t timeout_hresp : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t timeout_hresp : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_ahb_to_apb_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t clei_tx : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t clei_rx : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t clei_rx : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t clei_tx : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_core_ge_ctrl;

/*section : scratchpad */

typedef union {
    struct {
        uint32_t value : 32;           /* 31:0 SW=rw HW=na 0x0 */
    } bf;
    uint32_t  dw;
} bb_core_scratchpad_spr;

typedef struct {
    bb_core_scratchpad_spr  spr[0x4];
    
    
    
} bb_core_scratchpad;


typedef struct {
    bb_core_version  version;
    bb_core_cpu_freq  cpu_freq;
    bb_core_sys_config  sys_config;
    bb_core_feature  feature;
    bb_core_module_version_ctrl  module_version_ctrl;
    bb_core_module_version  module_version;
    
    union {
        bb_core_irq s;
        uint8_t filler[0x10];
    } irq;
    bb_core_cpu_comm_tx  cpu_comm_tx;
    bb_core_cpu_comm_rx  cpu_comm_rx;
    bb_core_xmii_ctrl  xmii_ctrl;
    bb_core_rs232_ctrl  rs232_ctrl;
    
    union {
        bb_core_xgmii_idle_counter s;
        uint8_t filler[0x8];
    } xgmii_idle_counter;
    bb_core_ahb_to_apb_ctrl  ahb_to_apb_ctrl;
    bb_core_ge_ctrl  ge_ctrl;
    
    union {
        bb_core_scratchpad s;
        uint8_t filler[0x10];
    } scratchpad;
    
    
    uint8_t filler11[0xA8];
    
    
} bb_core_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_core_version_READMASK 0xFFFFFF
#define bb_core_version_WRITEMASK 0x0
#define bb_core_version_VOLATILEMASK 0x0
#define bb_core_version_RESETMASK 0xFFFFFF
#define bb_core_version_DEFAULT 0x000C0701

#define bb_core_cpu_freq_READMASK 0xFFFFFFFF
#define bb_core_cpu_freq_WRITEMASK 0x0
#define bb_core_cpu_freq_VOLATILEMASK 0xFFFFFFFF
#define bb_core_cpu_freq_RESETMASK 0xFFFFFFFF
#define bb_core_cpu_freq_DEFAULT 0x00000000

#define bb_core_sys_config_READMASK 0xF1F31
#define bb_core_sys_config_WRITEMASK 0x0
#define bb_core_sys_config_VOLATILEMASK 0xF1F31
#define bb_core_sys_config_RESETMASK 0xF1F31
#define bb_core_sys_config_DEFAULT 0x00000000

#define bb_core_feature_READMASK 0x1FFFF
#define bb_core_feature_WRITEMASK 0x0
#define bb_core_feature_VOLATILEMASK 0x1FFFF
#define bb_core_feature_RESETMASK 0x1FFFF
#define bb_core_feature_DEFAULT 0x00000000

#define bb_core_module_version_ctrl_READMASK 0xFFFF
#define bb_core_module_version_ctrl_WRITEMASK 0xFFFF
#define bb_core_module_version_ctrl_VOLATILEMASK 0x0
#define bb_core_module_version_ctrl_RESETMASK 0xFFFF
#define bb_core_module_version_ctrl_DEFAULT 0x00000000

#define bb_core_module_version_READMASK 0xFFFFFF
#define bb_core_module_version_WRITEMASK 0x0
#define bb_core_module_version_VOLATILEMASK 0xFFFFFF
#define bb_core_module_version_RESETMASK 0xFFFFFF
#define bb_core_module_version_DEFAULT 0x00000000

#define bb_core_irq_enable_READMASK 0x3
#define bb_core_irq_enable_WRITEMASK 0x3
#define bb_core_irq_enable_VOLATILEMASK 0x0
#define bb_core_irq_enable_RESETMASK 0x3
#define bb_core_irq_enable_DEFAULT 0x00000000

#define bb_core_irq_pending_READMASK 0x3
#define bb_core_irq_pending_WRITEMASK 0x3
#define bb_core_irq_pending_VOLATILEMASK 0x3
#define bb_core_irq_pending_RESETMASK 0x3
#define bb_core_irq_pending_DEFAULT 0x00000000

#define bb_core_irq_pending_irq_READMASK 0x3
#define bb_core_irq_pending_irq_WRITEMASK 0x0
#define bb_core_irq_pending_irq_VOLATILEMASK 0x0
#define bb_core_irq_pending_irq_RESETMASK 0x3
#define bb_core_irq_pending_irq_DEFAULT 0x00000000

#define bb_core_irq_raw_READMASK 0x3
#define bb_core_irq_raw_WRITEMASK 0x0
#define bb_core_irq_raw_VOLATILEMASK 0x3
#define bb_core_irq_raw_RESETMASK 0x3
#define bb_core_irq_raw_DEFAULT 0x00000000

#define bb_core_cpu_comm_tx_READMASK 0x3FF
#define bb_core_cpu_comm_tx_WRITEMASK 0x3FF
#define bb_core_cpu_comm_tx_VOLATILEMASK 0x0
#define bb_core_cpu_comm_tx_RESETMASK 0x3FF
#define bb_core_cpu_comm_tx_DEFAULT 0x00000000

#define bb_core_cpu_comm_rx_READMASK 0x3FF
#define bb_core_cpu_comm_rx_WRITEMASK 0x0
#define bb_core_cpu_comm_rx_VOLATILEMASK 0x3FF
#define bb_core_cpu_comm_rx_RESETMASK 0x3FF
#define bb_core_cpu_comm_rx_DEFAULT 0x00000000

#define bb_core_xmii_ctrl_READMASK 0xFF03
#define bb_core_xmii_ctrl_WRITEMASK 0xFF03
#define bb_core_xmii_ctrl_VOLATILEMASK 0x0
#define bb_core_xmii_ctrl_RESETMASK 0xFF03
#define bb_core_xmii_ctrl_DEFAULT 0x00000B00

#define bb_core_rs232_ctrl_READMASK 0xFFFF0001
#define bb_core_rs232_ctrl_WRITEMASK 0xFFFF0001
#define bb_core_rs232_ctrl_VOLATILEMASK 0x0
#define bb_core_rs232_ctrl_RESETMASK 0xFFFF0001
#define bb_core_rs232_ctrl_DEFAULT 0x00010000

#define bb_core_xgmii_idle_counter_control_READMASK 0xFFFFFFFF
#define bb_core_xgmii_idle_counter_control_WRITEMASK 0xFFFFFFFF
#define bb_core_xgmii_idle_counter_control_VOLATILEMASK 0x0
#define bb_core_xgmii_idle_counter_control_RESETMASK 0xFFFFFFFF
#define bb_core_xgmii_idle_counter_control_DEFAULT 0x0001FFFE

#define bb_core_xgmii_idle_counter_status_READMASK 0xFFFFFFFF
#define bb_core_xgmii_idle_counter_status_WRITEMASK 0x0
#define bb_core_xgmii_idle_counter_status_VOLATILEMASK 0xFFFFFFFF
#define bb_core_xgmii_idle_counter_status_RESETMASK 0xFFFFFFFF
#define bb_core_xgmii_idle_counter_status_DEFAULT 0x00000000

#define bb_core_ahb_to_apb_ctrl_READMASK 0x1
#define bb_core_ahb_to_apb_ctrl_WRITEMASK 0x1
#define bb_core_ahb_to_apb_ctrl_VOLATILEMASK 0x0
#define bb_core_ahb_to_apb_ctrl_RESETMASK 0x1
#define bb_core_ahb_to_apb_ctrl_DEFAULT 0x00000000

#define bb_core_ge_ctrl_READMASK 0x3
#define bb_core_ge_ctrl_WRITEMASK 0x3
#define bb_core_ge_ctrl_VOLATILEMASK 0x0
#define bb_core_ge_ctrl_RESETMASK 0x3
#define bb_core_ge_ctrl_DEFAULT 0x00000000

#define bb_core_scratchpad_spr_READMASK 0xFFFFFFFF
#define bb_core_scratchpad_spr_WRITEMASK 0xFFFFFFFF
#define bb_core_scratchpad_spr_VOLATILEMASK 0x0
#define bb_core_scratchpad_spr_RESETMASK 0xFFFFFFFF
#define bb_core_scratchpad_spr_DEFAULT 0x00000000

#define bb_core_s_SIZE 0x100
#define bb_core_version_SIZE 0x4
#define bb_core_cpu_freq_SIZE 0x4
#define bb_core_sys_config_SIZE 0x4
#define bb_core_feature_SIZE 0x4
#define bb_core_module_version_ctrl_SIZE 0x4
#define bb_core_module_version_SIZE 0x4
#define bb_core_irq_SIZE 0x10
#define bb_core_irq_enable_SIZE 0x4
#define bb_core_irq_pending_SIZE 0x4
#define bb_core_irq_pending_irq_SIZE 0x4
#define bb_core_irq_raw_SIZE 0x4
#define bb_core_cpu_comm_tx_SIZE 0x4
#define bb_core_cpu_comm_rx_SIZE 0x4
#define bb_core_xmii_ctrl_SIZE 0x4
#define bb_core_rs232_ctrl_SIZE 0x4
#define bb_core_xgmii_idle_counter_SIZE 0x8
#define bb_core_xgmii_idle_counter_control_SIZE 0x4
#define bb_core_xgmii_idle_counter_status_SIZE 0x4
#define bb_core_ahb_to_apb_ctrl_SIZE 0x4
#define bb_core_ge_ctrl_SIZE 0x4
#define bb_core_scratchpad_SIZE 0x10
#define bb_core_scratchpad_spr_SIZE 0x10

#define bb_core_s_OFFSET 0x0
#define bb_core_version_OFFSET 0x0
#define bb_core_cpu_freq_OFFSET 0x4
#define bb_core_sys_config_OFFSET 0x8
#define bb_core_feature_OFFSET 0xC
#define bb_core_module_version_ctrl_OFFSET 0x10
#define bb_core_module_version_OFFSET 0x14
#define bb_core_irq_OFFSET 0x18
#define bb_core_irq_enable_OFFSET 0x0
#define bb_core_irq_pending_OFFSET 0x4
#define bb_core_irq_pending_irq_OFFSET 0x8
#define bb_core_irq_raw_OFFSET 0xC
#define bb_core_cpu_comm_tx_OFFSET 0x28
#define bb_core_cpu_comm_rx_OFFSET 0x2C
#define bb_core_xmii_ctrl_OFFSET 0x30
#define bb_core_rs232_ctrl_OFFSET 0x34
#define bb_core_xgmii_idle_counter_OFFSET 0x38
#define bb_core_xgmii_idle_counter_control_OFFSET 0x0
#define bb_core_xgmii_idle_counter_status_OFFSET 0x4
#define bb_core_ahb_to_apb_ctrl_OFFSET 0x40
#define bb_core_ge_ctrl_OFFSET 0x44
#define bb_core_scratchpad_OFFSET 0x48
#define bb_core_scratchpad_spr_OFFSET 0x0

#define bb_core_s_ADDRESS 0x000
#define bb_core_version_ADDRESS 0x000
#define bb_core_cpu_freq_ADDRESS 0x004
#define bb_core_sys_config_ADDRESS 0x008
#define bb_core_feature_ADDRESS 0x00C
#define bb_core_module_version_ctrl_ADDRESS 0x010
#define bb_core_module_version_ADDRESS 0x014
#define bb_core_irq_ADDRESS 0x018
#define bb_core_irq_enable_ADDRESS 0x018
#define bb_core_irq_pending_ADDRESS 0x01C
#define bb_core_irq_pending_irq_ADDRESS 0x020
#define bb_core_irq_raw_ADDRESS 0x024
#define bb_core_cpu_comm_tx_ADDRESS 0x028
#define bb_core_cpu_comm_rx_ADDRESS 0x02C
#define bb_core_xmii_ctrl_ADDRESS 0x030
#define bb_core_rs232_ctrl_ADDRESS 0x034
#define bb_core_xgmii_idle_counter_ADDRESS 0x038
#define bb_core_xgmii_idle_counter_control_ADDRESS 0x038
#define bb_core_xgmii_idle_counter_status_ADDRESS 0x03C
#define bb_core_ahb_to_apb_ctrl_ADDRESS 0x040
#define bb_core_ge_ctrl_ADDRESS 0x044
#define bb_core_scratchpad_ADDRESS 0x048
#define bb_core_scratchpad_spr_ADDRESS 0x048
#define BB_CORE_VERSION_MAJOR_OFFSET 16
#define BB_CORE_VERSION_MAJOR_MASK 0xFF0000
#define BB_CORE_VERSION_MINOR_OFFSET 8
#define BB_CORE_VERSION_MINOR_MASK 0xFF00
#define BB_CORE_VERSION_PATCH_OFFSET 0
#define BB_CORE_VERSION_PATCH_MASK 0xFF
#define BB_CORE_CPU_FREQ_VALUE_OFFSET 0
#define BB_CORE_CPU_FREQ_VALUE_MASK 0xFFFFFFFF
#define BB_CORE_SYS_CONFIG_LINK_RATE_OFFSET 16
#define BB_CORE_SYS_CONFIG_LINK_RATE_MASK 0xF0000
#define BB_CORE_SYS_CONFIG_LINK_MODE_OFFSET 8
#define BB_CORE_SYS_CONFIG_LINK_MODE_MASK 0x1F00
#define BB_CORE_SYS_CONFIG_BOOT_SEL_OFFSET 4
#define BB_CORE_SYS_CONFIG_BOOT_SEL_MASK 0x30
#define BB_CORE_SYS_CONFIG_REX_LEX_N_OFFSET 0
#define BB_CORE_SYS_CONFIG_REX_LEX_N_MASK 0x1
#define BB_CORE_SYS_CONFIG_REX_LEX_N 0x1
#define BB_CORE_FEATURE_XGMII_RX_IDLE_COUNTER_OFFSET 16
#define BB_CORE_FEATURE_XGMII_RX_IDLE_COUNTER_MASK 0x10000
#define BB_CORE_FEATURE_XGMII_RX_IDLE_COUNTER 0x10000
#define BB_CORE_FEATURE_RS232_EXTENDER_OFFSET 15
#define BB_CORE_FEATURE_RS232_EXTENDER_MASK 0x8000
#define BB_CORE_FEATURE_RS232_EXTENDER 0x8000
#define BB_CORE_FEATURE_GE_UART_OFFSET 14
#define BB_CORE_FEATURE_GE_UART_MASK 0x4000
#define BB_CORE_FEATURE_GE_UART 0x4000
#define BB_CORE_FEATURE_GE_ADAPTER_OFFSET 13
#define BB_CORE_FEATURE_GE_ADAPTER_MASK 0x2000
#define BB_CORE_FEATURE_GE_ADAPTER 0x2000
#define BB_CORE_FEATURE_XMII_ADAPTER_OFFSET 12
#define BB_CORE_FEATURE_XMII_ADAPTER_MASK 0x1000
#define BB_CORE_FEATURE_XMII_ADAPTER 0x1000
#define BB_CORE_FEATURE_DP_SOURCE_OFFSET 11
#define BB_CORE_FEATURE_DP_SOURCE_MASK 0x800
#define BB_CORE_FEATURE_DP_SOURCE 0x800
#define BB_CORE_FEATURE_DP_SINK_OFFSET 10
#define BB_CORE_FEATURE_DP_SINK_MASK 0x400
#define BB_CORE_FEATURE_DP_SINK 0x400
#define BB_CORE_FEATURE_XUSB3_OFFSET 9
#define BB_CORE_FEATURE_XUSB3_MASK 0x200
#define BB_CORE_FEATURE_XUSB3 0x200
#define BB_CORE_FEATURE_MCA_OFFSET 8
#define BB_CORE_FEATURE_MCA_MASK 0x100
#define BB_CORE_FEATURE_MCA 0x100
#define BB_CORE_FEATURE_LAYER3_OFFSET 7
#define BB_CORE_FEATURE_LAYER3_MASK 0x80
#define BB_CORE_FEATURE_LAYER3 0x80
#define BB_CORE_FEATURE_LINK_LAYER_OFFSET 6
#define BB_CORE_FEATURE_LINK_LAYER_MASK 0x40
#define BB_CORE_FEATURE_LINK_LAYER 0x40
#define BB_CORE_FEATURE_GPIO_CTRL_OFFSET 5
#define BB_CORE_FEATURE_GPIO_CTRL_MASK 0x20
#define BB_CORE_FEATURE_GPIO_CTRL 0x20
#define BB_CORE_FEATURE_SPI_FLASH_CTRL_OFFSET 4
#define BB_CORE_FEATURE_SPI_FLASH_CTRL_MASK 0x10
#define BB_CORE_FEATURE_SPI_FLASH_CTRL 0x10
#define BB_CORE_FEATURE_MDIO_MASTER_OFFSET 3
#define BB_CORE_FEATURE_MDIO_MASTER_MASK 0x8
#define BB_CORE_FEATURE_MDIO_MASTER 0x8
#define BB_CORE_FEATURE_I2C_SLAVE_OFFSET 2
#define BB_CORE_FEATURE_I2C_SLAVE_MASK 0x4
#define BB_CORE_FEATURE_I2C_SLAVE 0x4
#define BB_CORE_FEATURE_I2C_MASTER_OFFSET 1
#define BB_CORE_FEATURE_I2C_MASTER_MASK 0x2
#define BB_CORE_FEATURE_I2C_MASTER 0x2
#define BB_CORE_FEATURE_BB_UART_OFFSET 0
#define BB_CORE_FEATURE_BB_UART_MASK 0x1
#define BB_CORE_FEATURE_BB_UART 0x1
#define BB_CORE_MODULE_VERSION_CTRL_VERSION_SEL_OFFSET 8
#define BB_CORE_MODULE_VERSION_CTRL_VERSION_SEL_MASK 0xFF00
#define BB_CORE_MODULE_VERSION_CTRL_MODULE_SEL_OFFSET 0
#define BB_CORE_MODULE_VERSION_CTRL_MODULE_SEL_MASK 0xFF
#define BB_CORE_MODULE_VERSION_MAJOR_OFFSET 16
#define BB_CORE_MODULE_VERSION_MAJOR_MASK 0xFF0000
#define BB_CORE_MODULE_VERSION_MINOR_OFFSET 8
#define BB_CORE_MODULE_VERSION_MINOR_MASK 0xFF00
#define BB_CORE_MODULE_VERSION_PATCH_OFFSET 0
#define BB_CORE_MODULE_VERSION_PATCH_MASK 0xFF
#define BB_CORE_IRQ_ENABLE_RS232_UNDERRUN_ERR_OFFSET 1
#define BB_CORE_IRQ_ENABLE_RS232_UNDERRUN_ERR_MASK 0x2
#define BB_CORE_IRQ_ENABLE_RS232_UNDERRUN_ERR 0x2
#define BB_CORE_IRQ_ENABLE_MCA_RX_CPU_SRDY_OFFSET 0
#define BB_CORE_IRQ_ENABLE_MCA_RX_CPU_SRDY_MASK 0x1
#define BB_CORE_IRQ_ENABLE_MCA_RX_CPU_SRDY 0x1
#define BB_CORE_IRQ_PENDING_RS232_UNDERRUN_ERR_OFFSET 1
#define BB_CORE_IRQ_PENDING_RS232_UNDERRUN_ERR_MASK 0x2
#define BB_CORE_IRQ_PENDING_RS232_UNDERRUN_ERR 0x2
#define BB_CORE_IRQ_PENDING_MCA_RX_CPU_SRDY_OFFSET 0
#define BB_CORE_IRQ_PENDING_MCA_RX_CPU_SRDY_MASK 0x1
#define BB_CORE_IRQ_PENDING_MCA_RX_CPU_SRDY 0x1
#define BB_CORE_IRQ_PENDING_IRQ_RS232_UNDERRUN_ERR_OFFSET 1
#define BB_CORE_IRQ_PENDING_IRQ_RS232_UNDERRUN_ERR_MASK 0x2
#define BB_CORE_IRQ_PENDING_IRQ_RS232_UNDERRUN_ERR 0x2
#define BB_CORE_IRQ_PENDING_IRQ_MCA_RX_CPU_SRDY_OFFSET 0
#define BB_CORE_IRQ_PENDING_IRQ_MCA_RX_CPU_SRDY_MASK 0x1
#define BB_CORE_IRQ_PENDING_IRQ_MCA_RX_CPU_SRDY 0x1
#define BB_CORE_IRQ_RAW_RS232_UNDERRUN_ERR_OFFSET 1
#define BB_CORE_IRQ_RAW_RS232_UNDERRUN_ERR_MASK 0x2
#define BB_CORE_IRQ_RAW_RS232_UNDERRUN_ERR 0x2
#define BB_CORE_IRQ_RAW_MCA_RX_CPU_SRDY_OFFSET 0
#define BB_CORE_IRQ_RAW_MCA_RX_CPU_SRDY_MASK 0x1
#define BB_CORE_IRQ_RAW_MCA_RX_CPU_SRDY 0x1
#define BB_CORE_CPU_COMM_TX_EOP_OFFSET 9
#define BB_CORE_CPU_COMM_TX_EOP_MASK 0x200
#define BB_CORE_CPU_COMM_TX_EOP 0x200
#define BB_CORE_CPU_COMM_TX_SOP_OFFSET 8
#define BB_CORE_CPU_COMM_TX_SOP_MASK 0x100
#define BB_CORE_CPU_COMM_TX_SOP 0x100
#define BB_CORE_CPU_COMM_TX_DATA_OFFSET 0
#define BB_CORE_CPU_COMM_TX_DATA_MASK 0xFF
#define BB_CORE_CPU_COMM_RX_EOP_OFFSET 9
#define BB_CORE_CPU_COMM_RX_EOP_MASK 0x200
#define BB_CORE_CPU_COMM_RX_EOP 0x200
#define BB_CORE_CPU_COMM_RX_SOP_OFFSET 8
#define BB_CORE_CPU_COMM_RX_SOP_MASK 0x100
#define BB_CORE_CPU_COMM_RX_SOP 0x100
#define BB_CORE_CPU_COMM_RX_DATA_OFFSET 0
#define BB_CORE_CPU_COMM_RX_DATA_MASK 0xFF
#define BB_CORE_XMII_CTRL_IPG_M1_OFFSET 8
#define BB_CORE_XMII_CTRL_IPG_M1_MASK 0xFF00
#define BB_CORE_XMII_CTRL_MODE_OFFSET 0
#define BB_CORE_XMII_CTRL_MODE_MASK 0x3
#define BB_CORE_RS232_CTRL_CLK_DOWN_SCALE_OFFSET 16
#define BB_CORE_RS232_CTRL_CLK_DOWN_SCALE_MASK 0xFFFF0000
#define BB_CORE_RS232_CTRL_ENABLE_OFFSET 0
#define BB_CORE_RS232_CTRL_ENABLE_MASK 0x1
#define BB_CORE_RS232_CTRL_ENABLE 0x1
#define BB_CORE_XGMII_IDLE_COUNTER_CONTROL_NUM_XGMII_CLKS_OFFSET 1
#define BB_CORE_XGMII_IDLE_COUNTER_CONTROL_NUM_XGMII_CLKS_MASK 0xFFFFFFFE
#define BB_CORE_XGMII_IDLE_COUNTER_CONTROL_GO_OFFSET 0
#define BB_CORE_XGMII_IDLE_COUNTER_CONTROL_GO_MASK 0x1
#define BB_CORE_XGMII_IDLE_COUNTER_CONTROL_GO 0x1
#define BB_CORE_XGMII_IDLE_COUNTER_STATUS_IDLE_COUNT_OFFSET 0
#define BB_CORE_XGMII_IDLE_COUNTER_STATUS_IDLE_COUNT_MASK 0xFFFFFFFF
#define BB_CORE_AHB_TO_APB_CTRL_TIMEOUT_HRESP_OFFSET 0
#define BB_CORE_AHB_TO_APB_CTRL_TIMEOUT_HRESP_MASK 0x1
#define BB_CORE_AHB_TO_APB_CTRL_TIMEOUT_HRESP 0x1
#define BB_CORE_GE_CTRL_CLEI_TX_OFFSET 1
#define BB_CORE_GE_CTRL_CLEI_TX_MASK 0x2
#define BB_CORE_GE_CTRL_CLEI_TX 0x2
#define BB_CORE_GE_CTRL_CLEI_RX_OFFSET 0
#define BB_CORE_GE_CTRL_CLEI_RX_MASK 0x1
#define BB_CORE_GE_CTRL_CLEI_RX 0x1
#define BB_CORE_SCRATCHPAD_SPR_VALUE_OFFSET 0
#define BB_CORE_SCRATCHPAD_SPR_VALUE_MASK 0xFFFFFFFF
#endif /* _BB_CORE_REGS_H_ */

/* end */
