/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Mohsen Nahvi*/
/* generated by      : Mohsen.Nahvi*/
/* generated from    : C:\cygwin64\home\Mohsen.Nahvi\blackbird_iso_develop_2\m_link_layer\regs\ids\link_layer_tx\link_layer_tx_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/*block : link_layer_tx */

#ifndef _LINK_LAYER_TX_REGS_H_
#define _LINK_LAYER_TX_REGS_H_

#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x5 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x4 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x4 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x5 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_version;

/*section : mac */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x2 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x2 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t inject_crc32_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t disable_crc32 : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t crc32_implmntd : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t dbg_seq_num_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dbg_seq_num_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t crc32_implmntd : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t disable_crc32 : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t inject_crc32_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_mac_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t pa_word1 : 24;           /* 23:0 SW=rw HW=ro 0x555555 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pa_word1 : 24;           /* 0:23 SW=rw HW=ro 0x555555 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_pa_word1;

typedef union {
    struct {
        uint32_t pa_word0 : 32;           /* 31:0 SW=rw HW=ro 0x55555555 */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_pa_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sfd : 8;           /* 7:0 SW=rw HW=ro 0xD5 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sfd : 8;           /* 0:7 SW=rw HW=ro 0xD5 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_sfd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t da_w1 : 16;           /* 15:0 SW=rw HW=ro 0xDADA */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t da_w1 : 16;           /* 0:15 SW=rw HW=ro 0xDADA */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_da_word1;

typedef union {
    struct {
        uint32_t da_w0 : 32;           /* 31:0 SW=rw HW=ro 0xDADADADA */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_da_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t sa_w1 : 16;           /* 15:0 SW=rw HW=ro 0x5A5A */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sa_w1 : 16;           /* 0:15 SW=rw HW=ro 0x5A5A */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_sa__word1;

typedef union {
    struct {
        uint32_t sa_w0 : 32;           /* 31:0 SW=rw HW=ro 0x5A5A5A5A */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_sa_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv17 : 15;
            uint32_t lt_mode : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t lt : 16;           /* 15:0 SW=rw HW=ro 0x1717 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lt : 16;           /* 0:15 SW=rw HW=ro 0x1717 */
            uint32_t lt_mode : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t resv17 : 15;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_lt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t idle : 8;           /* 7:0 SW=rw HW=ro 0x1E */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t idle : 8;           /* 0:7 SW=rw HW=ro 0x1E */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_idle;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t frm_rate : 12;           /* 11:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t frm_rate : 12;           /* 0:11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_frm_rate;

typedef union {
    struct {
        uint32_t bandwidth_gap : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_bandwidth_gap;

typedef union {
    struct {
        uint32_t bandwidth_limit : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_bandwidth_limit;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fsm_rollover : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t fsm_count_beyond_ptp : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t in_sop : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t in_eop : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t stall_ptp_in : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t out_eop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pause_frame : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pause_frame : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t out_eop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t stall_ptp_in : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t in_eop : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t in_sop : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t fsm_count_beyond_ptp : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t fsm_rollover : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t pause_frame : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_stats0_pause_frame;

typedef union {
    struct {
        uint32_t out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_stats0_out_eop;

typedef union {
    struct {
        uint32_t out_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_stats0_out_sop;

typedef union {
    struct {
        uint32_t stall_ptp_in : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_stats0_stall_ptp_in;

typedef union {
    struct {
        uint32_t in_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_stats0_in_eop;

typedef union {
    struct {
        uint32_t in_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_mac_stats0_in_sop;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fsm_count_beyond_ptp : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fsm_count_beyond_ptp : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_stats0_fsm_count_beyond_ptp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fsm_rollover : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fsm_rollover : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_mac_stats0_fsm_rollover;

typedef struct {
    link_layer_tx_mac_stats0_rd2clr_config  rd2clr_config;
    link_layer_tx_mac_stats0_pause_frame  pause_frame;
    link_layer_tx_mac_stats0_out_eop  out_eop;
    link_layer_tx_mac_stats0_out_sop  out_sop;
    link_layer_tx_mac_stats0_stall_ptp_in  stall_ptp_in;
    link_layer_tx_mac_stats0_in_eop  in_eop;
    link_layer_tx_mac_stats0_in_sop  in_sop;
    link_layer_tx_mac_stats0_fsm_count_beyond_ptp  fsm_count_beyond_ptp;
    link_layer_tx_mac_stats0_fsm_rollover  fsm_rollover;
    
} link_layer_tx_mac_stats0;


typedef struct {
    link_layer_tx_mac_version  version;
    link_layer_tx_mac_mac_config  mac_config;
    link_layer_tx_mac_pa_word1  pa_word1;
    link_layer_tx_mac_pa_word0  pa_word0;
    link_layer_tx_mac_sfd  sfd;
    link_layer_tx_mac_da_word1  da_word1;
    link_layer_tx_mac_da_word0  da_word0;
    link_layer_tx_mac_sa__word1  sa__word1;
    link_layer_tx_mac_sa_word0  sa_word0;
    link_layer_tx_mac_lt  lt;
    link_layer_tx_mac_idle  idle;
    link_layer_tx_mac_frm_rate  frm_rate;
    link_layer_tx_mac_bandwidth_gap  bandwidth_gap;
    link_layer_tx_mac_bandwidth_limit  bandwidth_limit;
    
    union {
        link_layer_tx_mac_stats0 s;
        uint8_t filler[0x24];
    } stats0;
    
} link_layer_tx_mac;


/*section : media_rs */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t tx_xgmii_en : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t tx_gmii_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_gmii_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            
            uint32_t resv1 : 3;
            uint32_t tx_xgmii_en : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_enable;

/*section : pfifo */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit;

typedef struct {
    link_layer_tx_media_rs_pfifo_write_engine_config0_clear  clear;
    link_layer_tx_media_rs_pfifo_write_engine_config0_mode  mode;
    link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit  notify_limit;
    
} link_layer_tx_media_rs_pfifo_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl;

typedef struct {
    link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config  rd2clr_config;
    link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err  fifo_full_err;
    link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err  pkt_err;
    link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act  wflush_act;
    link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} link_layer_tx_media_rs_pfifo_write_engine_stats0;


typedef struct {
    
    union {
        link_layer_tx_media_rs_pfifo_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        link_layer_tx_media_rs_pfifo_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} link_layer_tx_media_rs_pfifo_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_read_engine_config0_clear;

typedef struct {
    link_layer_tx_media_rs_pfifo_read_engine_config0_clear  clear;
    
} link_layer_tx_media_rs_pfifo_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl;

typedef struct {
    link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config  rd2clr_config;
    link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act  rflush_act;
    link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt  drp_pkt;
    link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} link_layer_tx_media_rs_pfifo_read_engine_stats0;


typedef struct {
    
    union {
        link_layer_tx_media_rs_pfifo_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        link_layer_tx_media_rs_pfifo_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} link_layer_tx_media_rs_pfifo_read_engine;


typedef struct {
    link_layer_tx_media_rs_pfifo_version  version;
    
    union {
        link_layer_tx_media_rs_pfifo_write_engine s;
        uint8_t filler[0x38];
    } write_engine;
    
    union {
        link_layer_tx_media_rs_pfifo_read_engine s;
        uint8_t filler[0x14];
    } read_engine;
    
} link_layer_tx_media_rs_pfifo;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t inbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t inbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t inbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t inbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t inbuff_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_stats0_inbuff_eop;

typedef union {
    struct {
        uint32_t inbuff_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_stats0_inbuff_sop;

typedef struct {
    link_layer_tx_media_rs_stats0_rd2clr_config  rd2clr_config;
    link_layer_tx_media_rs_stats0_inbuff_eop  inbuff_eop;
    link_layer_tx_media_rs_stats0_inbuff_sop  inbuff_sop;
    
} link_layer_tx_media_rs_stats0;


/*section : stats1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t gmii_start : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gmii_done : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gmii_outbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gmii_outbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gmii_outbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gmii_outbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gmii_done : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gmii_start : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_stats1_rd2clr_config;

typedef union {
    struct {
        uint32_t gmii_out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_stats1_gmii_outbuff_eop;

typedef union {
    struct {
        uint32_t gmii_outbuff_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_stats1_gmii_outbuff_sop;

typedef union {
    struct {
        uint32_t gmii_done : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_stats1_gmii_done;

typedef union {
    struct {
        uint32_t gmii_start : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_stats1_gmii_start;

typedef struct {
    link_layer_tx_media_rs_stats1_rd2clr_config  rd2clr_config;
    link_layer_tx_media_rs_stats1_gmii_outbuff_eop  gmii_outbuff_eop;
    link_layer_tx_media_rs_stats1_gmii_outbuff_sop  gmii_outbuff_sop;
    link_layer_tx_media_rs_stats1_gmii_done  gmii_done;
    link_layer_tx_media_rs_stats1_gmii_start  gmii_start;
    
} link_layer_tx_media_rs_stats1;


/*section : stats2 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t xgmii_start : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t xgmii_done : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t xgmii_outbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t xgmii_outbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_outbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t xgmii_outbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t xgmii_done : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t xgmii_start : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_media_rs_stats2_rd2clr_config;

typedef union {
    struct {
        uint32_t xgmii_out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_stats2_xgmii_outbuff_eop;

typedef union {
    struct {
        uint32_t xgmii_outbuff_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_stats2_xgmii_outbuff_sop;

typedef union {
    struct {
        uint32_t xgmii_done : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_stats2_xgmii_done;

typedef union {
    struct {
        uint32_t xgmii_start : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} link_layer_tx_media_rs_stats2_xgmii_start;

typedef struct {
    link_layer_tx_media_rs_stats2_rd2clr_config  rd2clr_config;
    link_layer_tx_media_rs_stats2_xgmii_outbuff_eop  xgmii_outbuff_eop;
    link_layer_tx_media_rs_stats2_xgmii_outbuff_sop  xgmii_outbuff_sop;
    link_layer_tx_media_rs_stats2_xgmii_done  xgmii_done;
    link_layer_tx_media_rs_stats2_xgmii_start  xgmii_start;
    
} link_layer_tx_media_rs_stats2;


typedef struct {
    link_layer_tx_media_rs_version  version;
    link_layer_tx_media_rs_enable  enable;
    
    union {
        link_layer_tx_media_rs_pfifo s;
        uint8_t filler[0x50];
    } pfifo;
    
    union {
        link_layer_tx_media_rs_stats0 s;
        uint8_t filler[0xC];
    } stats0;
    
    union {
        link_layer_tx_media_rs_stats1 s;
        uint8_t filler[0x14];
    } stats1;
    
    union {
        link_layer_tx_media_rs_stats2 s;
        uint8_t filler[0x14];
    } stats2;
    
} link_layer_tx_media_rs;


/*section : ptp_guard */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x3 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x3 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_config0_fix_ptp_violations;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t max_cycle_mode : 4;           /* 19:16 SW=rw HW=ro 0x3 */
            uint32_t max_cycles : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycles : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_mode : 4;           /* 16:19 SW=rw HW=ro 0x3 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_config0_max_cycles;

typedef struct {
    link_layer_tx_ptp_guard_config0_fix_ptp_violations  fix_ptp_violations;
    link_layer_tx_ptp_guard_config0_max_cycles  max_cycles;
    
} link_layer_tx_ptp_guard_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_sop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_stats0_missing_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_eop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_eop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_stats0_missing_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t max_cycle_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycle_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_stats0_max_cycle_err;

typedef struct {
    link_layer_tx_ptp_guard_stats0_rd2clr_config  rd2clr_config;
    link_layer_tx_ptp_guard_stats0_missing_sop_err  missing_sop_err;
    link_layer_tx_ptp_guard_stats0_missing_eop_err  missing_eop_err;
    link_layer_tx_ptp_guard_stats0_max_cycle_err  max_cycle_err;
    
} link_layer_tx_ptp_guard_stats0;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_ptp_guard_irq0_raw;

typedef struct {
    link_layer_tx_ptp_guard_irq0_enable  enable;
    link_layer_tx_ptp_guard_irq0_pending  pending;
    link_layer_tx_ptp_guard_irq0_pending_irq  pending_irq;
    link_layer_tx_ptp_guard_irq0_raw  raw;
    
} link_layer_tx_ptp_guard_irq0;


typedef struct {
    link_layer_tx_ptp_guard_version  version;
    
    union {
        link_layer_tx_ptp_guard_config0 s;
        uint8_t filler[0x8];
    } config0;
    
    union {
        link_layer_tx_ptp_guard_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
    union {
        link_layer_tx_ptp_guard_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} link_layer_tx_ptp_guard;


/*section : self_test_support */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_self_test_support_set_up;

/*section : media_gen */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_self_test_support_media_gen_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t iwg_cnt : 2;           /* 11:10 SW=rw HW=ro 0x0 */
            uint32_t ifg_cnt : 2;           /* 9:8 SW=rw HW=ro 0x1 */
            uint32_t pkt_cnt : 2;           /* 7:6 SW=rw HW=ro 0x2 */
            uint32_t pkt_size : 2;           /* 5:4 SW=rw HW=ro 0x1 */
            uint32_t throttle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t throttle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_size : 2;           /* 4:5 SW=rw HW=ro 0x1 */
            uint32_t pkt_cnt : 2;           /* 6:7 SW=rw HW=ro 0x2 */
            uint32_t ifg_cnt : 2;           /* 8:9 SW=rw HW=ro 0x1 */
            uint32_t iwg_cnt : 2;           /* 10:11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_self_test_support_media_gen_mca_mgen;

typedef struct {
    link_layer_tx_self_test_support_media_gen_version  version;
    link_layer_tx_self_test_support_media_gen_mca_mgen  mca_mgen;
    
} link_layer_tx_self_test_support_media_gen;


/*section : framer */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t max_byte : 14;           /* 13:0 SW=rw HW=ro 0x80 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_byte : 14;           /* 0:13 SW=rw HW=ro 0x80 */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_self_test_support_framer_max_byte;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t mac_dg_type : 8;           /* 7:0 SW=rw HW=ro 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mac_dg_type : 8;           /* 0:7 SW=rw HW=ro 0x4 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_self_test_support_framer_mac_dg_type;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t timer_wait : 12;           /* 11:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t timer_wait : 12;           /* 0:11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_self_test_support_framer_timer_wait;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t mtu_size : 14;           /* 13:0 SW=rw HW=ro 0x5DC */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mtu_size : 14;           /* 0:13 SW=rw HW=ro 0x5DC */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_self_test_support_framer_mtu_size;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t max_mtu_size : 14;           /* 13:0 SW=ro HW=wo 0x5DC */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_mtu_size : 14;           /* 0:13 SW=ro HW=wo 0x5DC */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_self_test_support_framer_max_mtu_size;

typedef struct {
    link_layer_tx_self_test_support_framer_max_byte  max_byte;
    link_layer_tx_self_test_support_framer_mac_dg_type  mac_dg_type;
    link_layer_tx_self_test_support_framer_timer_wait  timer_wait;
    link_layer_tx_self_test_support_framer_mtu_size  mtu_size;
    link_layer_tx_self_test_support_framer_max_mtu_size  max_mtu_size;
    
} link_layer_tx_self_test_support_framer;


typedef struct {
    link_layer_tx_self_test_support_set_up  set_up;
    
    union {
        link_layer_tx_self_test_support_media_gen s;
        uint8_t filler[0x8];
    } media_gen;
    
    union {
        link_layer_tx_self_test_support_framer s;
        uint8_t filler[0x14];
    } framer;
    
    
    
} link_layer_tx_self_test_support;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t force_xgmii_rf : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t force_xgmii_idle : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t force_xgmii_idle : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t force_xgmii_rf : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_control;

/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=rw HW=na 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=rw HW=na 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=rw HW=na 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=rw HW=na 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=rw HW=na 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=rw HW=na 0x0 */
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=ro HW=na 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=ro HW=na 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=ro HW=wo 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=ro HW=wo 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=ro HW=wo 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=ro HW=wo 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=ro HW=wo 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=ro HW=wo 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} link_layer_tx_irq0_raw;

typedef struct {
    link_layer_tx_irq0_enable  enable;
    link_layer_tx_irq0_pending  pending;
    link_layer_tx_irq0_pending_irq  pending_irq;
    link_layer_tx_irq0_raw  raw;
    
    
    
} link_layer_tx_irq0;


typedef struct {
    link_layer_tx_version  version;
    
    union {
        link_layer_tx_mac s;
        uint8_t filler[0x5C];
    } mac;
    
    union {
        link_layer_tx_media_rs s;
        uint8_t filler[0x8C];
    } media_rs;
    
    union {
        link_layer_tx_ptp_guard s;
        uint8_t filler[0x2C];
    } ptp_guard;
    
    union {
        link_layer_tx_self_test_support s;
        uint8_t filler[0x20];
    } self_test_support;
    link_layer_tx_control  control;
    
    union {
        link_layer_tx_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
    
    uint8_t filler11[0xB4];
    
    
} link_layer_tx_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define link_layer_tx_version_READMASK 0xFFFFFF
#define link_layer_tx_version_WRITEMASK 0x0
#define link_layer_tx_version_VOLATILEMASK 0x0
#define link_layer_tx_version_RESETMASK 0xFFFFFF
#define link_layer_tx_version_DEFAULT 0x00050400

#define link_layer_tx_mac_version_READMASK 0xFFFFFF
#define link_layer_tx_mac_version_WRITEMASK 0x0
#define link_layer_tx_mac_version_VOLATILEMASK 0x0
#define link_layer_tx_mac_version_RESETMASK 0xFFFFFF
#define link_layer_tx_mac_version_DEFAULT 0x00020100

#define link_layer_tx_mac_mac_config_READMASK 0x1F
#define link_layer_tx_mac_mac_config_WRITEMASK 0x1B
#define link_layer_tx_mac_mac_config_VOLATILEMASK 0x4
#define link_layer_tx_mac_mac_config_RESETMASK 0x1F
#define link_layer_tx_mac_mac_config_DEFAULT 0x00000000

#define link_layer_tx_mac_pa_word1_READMASK 0xFFFFFF
#define link_layer_tx_mac_pa_word1_WRITEMASK 0xFFFFFF
#define link_layer_tx_mac_pa_word1_VOLATILEMASK 0x0
#define link_layer_tx_mac_pa_word1_RESETMASK 0xFFFFFF
#define link_layer_tx_mac_pa_word1_DEFAULT 0x00555555

#define link_layer_tx_mac_pa_word0_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_pa_word0_WRITEMASK 0xFFFFFFFF
#define link_layer_tx_mac_pa_word0_VOLATILEMASK 0x0
#define link_layer_tx_mac_pa_word0_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_pa_word0_DEFAULT 0x55555555

#define link_layer_tx_mac_sfd_READMASK 0xFF
#define link_layer_tx_mac_sfd_WRITEMASK 0xFF
#define link_layer_tx_mac_sfd_VOLATILEMASK 0x0
#define link_layer_tx_mac_sfd_RESETMASK 0xFF
#define link_layer_tx_mac_sfd_DEFAULT 0x000000D5

#define link_layer_tx_mac_da_word1_READMASK 0xFFFF
#define link_layer_tx_mac_da_word1_WRITEMASK 0xFFFF
#define link_layer_tx_mac_da_word1_VOLATILEMASK 0x0
#define link_layer_tx_mac_da_word1_RESETMASK 0xFFFF
#define link_layer_tx_mac_da_word1_DEFAULT 0x0000DADA

#define link_layer_tx_mac_da_word0_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_da_word0_WRITEMASK 0xFFFFFFFF
#define link_layer_tx_mac_da_word0_VOLATILEMASK 0x0
#define link_layer_tx_mac_da_word0_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_da_word0_DEFAULT 0xDADADADA

#define link_layer_tx_mac_sa__word1_READMASK 0xFFFF
#define link_layer_tx_mac_sa__word1_WRITEMASK 0xFFFF
#define link_layer_tx_mac_sa__word1_VOLATILEMASK 0x0
#define link_layer_tx_mac_sa__word1_RESETMASK 0xFFFF
#define link_layer_tx_mac_sa__word1_DEFAULT 0x00005A5A

#define link_layer_tx_mac_sa_word0_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_sa_word0_WRITEMASK 0xFFFFFFFF
#define link_layer_tx_mac_sa_word0_VOLATILEMASK 0x0
#define link_layer_tx_mac_sa_word0_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_sa_word0_DEFAULT 0x5A5A5A5A

#define link_layer_tx_mac_lt_READMASK 0x1FFFF
#define link_layer_tx_mac_lt_WRITEMASK 0x1FFFF
#define link_layer_tx_mac_lt_VOLATILEMASK 0x0
#define link_layer_tx_mac_lt_RESETMASK 0x1FFFF
#define link_layer_tx_mac_lt_DEFAULT 0x00001717

#define link_layer_tx_mac_idle_READMASK 0xFF
#define link_layer_tx_mac_idle_WRITEMASK 0xFF
#define link_layer_tx_mac_idle_VOLATILEMASK 0x0
#define link_layer_tx_mac_idle_RESETMASK 0xFF
#define link_layer_tx_mac_idle_DEFAULT 0x0000001E

#define link_layer_tx_mac_frm_rate_READMASK 0xFFF
#define link_layer_tx_mac_frm_rate_WRITEMASK 0xFFF
#define link_layer_tx_mac_frm_rate_VOLATILEMASK 0x0
#define link_layer_tx_mac_frm_rate_RESETMASK 0xFFF
#define link_layer_tx_mac_frm_rate_DEFAULT 0x00000000

#define link_layer_tx_mac_bandwidth_gap_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_bandwidth_gap_WRITEMASK 0xFFFFFFFF
#define link_layer_tx_mac_bandwidth_gap_VOLATILEMASK 0x0
#define link_layer_tx_mac_bandwidth_gap_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_bandwidth_gap_DEFAULT 0x00000000

#define link_layer_tx_mac_bandwidth_limit_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_bandwidth_limit_WRITEMASK 0xFFFFFFFF
#define link_layer_tx_mac_bandwidth_limit_VOLATILEMASK 0x0
#define link_layer_tx_mac_bandwidth_limit_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_bandwidth_limit_DEFAULT 0x00000000

#define link_layer_tx_mac_stats0_rd2clr_config_READMASK 0xFF
#define link_layer_tx_mac_stats0_rd2clr_config_WRITEMASK 0xFF
#define link_layer_tx_mac_stats0_rd2clr_config_VOLATILEMASK 0x0
#define link_layer_tx_mac_stats0_rd2clr_config_RESETMASK 0xFF
#define link_layer_tx_mac_stats0_rd2clr_config_DEFAULT 0x00000000

#define link_layer_tx_mac_stats0_pause_frame_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_pause_frame_WRITEMASK 0x0
#define link_layer_tx_mac_stats0_pause_frame_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_pause_frame_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_pause_frame_DEFAULT 0x00000000

#define link_layer_tx_mac_stats0_out_eop_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_out_eop_WRITEMASK 0x0
#define link_layer_tx_mac_stats0_out_eop_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_out_eop_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_out_eop_DEFAULT 0x00000000

#define link_layer_tx_mac_stats0_out_sop_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_out_sop_WRITEMASK 0x0
#define link_layer_tx_mac_stats0_out_sop_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_out_sop_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_out_sop_DEFAULT 0x00000000

#define link_layer_tx_mac_stats0_stall_ptp_in_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_stall_ptp_in_WRITEMASK 0x0
#define link_layer_tx_mac_stats0_stall_ptp_in_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_stall_ptp_in_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_stall_ptp_in_DEFAULT 0x00000000

#define link_layer_tx_mac_stats0_in_eop_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_in_eop_WRITEMASK 0x0
#define link_layer_tx_mac_stats0_in_eop_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_in_eop_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_in_eop_DEFAULT 0x00000000

#define link_layer_tx_mac_stats0_in_sop_READMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_in_sop_WRITEMASK 0x0
#define link_layer_tx_mac_stats0_in_sop_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_in_sop_RESETMASK 0xFFFFFFFF
#define link_layer_tx_mac_stats0_in_sop_DEFAULT 0x00000000

#define link_layer_tx_mac_stats0_fsm_count_beyond_ptp_READMASK 0xFF
#define link_layer_tx_mac_stats0_fsm_count_beyond_ptp_WRITEMASK 0x0
#define link_layer_tx_mac_stats0_fsm_count_beyond_ptp_VOLATILEMASK 0xFF
#define link_layer_tx_mac_stats0_fsm_count_beyond_ptp_RESETMASK 0xFF
#define link_layer_tx_mac_stats0_fsm_count_beyond_ptp_DEFAULT 0x00000000

#define link_layer_tx_mac_stats0_fsm_rollover_READMASK 0xFF
#define link_layer_tx_mac_stats0_fsm_rollover_WRITEMASK 0x0
#define link_layer_tx_mac_stats0_fsm_rollover_VOLATILEMASK 0xFF
#define link_layer_tx_mac_stats0_fsm_rollover_RESETMASK 0xFF
#define link_layer_tx_mac_stats0_fsm_rollover_DEFAULT 0x00000000

#define link_layer_tx_media_rs_version_READMASK 0xFFFFFF
#define link_layer_tx_media_rs_version_WRITEMASK 0x0
#define link_layer_tx_media_rs_version_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_version_RESETMASK 0xFFFFFF
#define link_layer_tx_media_rs_version_DEFAULT 0x00010000

#define link_layer_tx_media_rs_enable_READMASK 0x11
#define link_layer_tx_media_rs_enable_WRITEMASK 0x11
#define link_layer_tx_media_rs_enable_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_enable_RESETMASK 0x11
#define link_layer_tx_media_rs_enable_DEFAULT 0x00000001

#define link_layer_tx_media_rs_pfifo_version_READMASK 0xFFFFFF
#define link_layer_tx_media_rs_pfifo_version_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_version_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_pfifo_version_RESETMASK 0xFFFFFF
#define link_layer_tx_media_rs_pfifo_version_DEFAULT 0x00010100

#define link_layer_tx_media_rs_pfifo_write_engine_config0_clear_READMASK 0x1
#define link_layer_tx_media_rs_pfifo_write_engine_config0_clear_WRITEMASK 0x1
#define link_layer_tx_media_rs_pfifo_write_engine_config0_clear_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_config0_clear_RESETMASK 0x1
#define link_layer_tx_media_rs_pfifo_write_engine_config0_clear_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_config0_mode_READMASK 0xF
#define link_layer_tx_media_rs_pfifo_write_engine_config0_mode_WRITEMASK 0xF
#define link_layer_tx_media_rs_pfifo_write_engine_config0_mode_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_config0_mode_RESETMASK 0xF
#define link_layer_tx_media_rs_pfifo_write_engine_config0_mode_DEFAULT 0x00000005

#define link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_READMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_READMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_read_engine_config0_clear_READMASK 0x1
#define link_layer_tx_media_rs_pfifo_read_engine_config0_clear_WRITEMASK 0x1
#define link_layer_tx_media_rs_pfifo_read_engine_config0_clear_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_pfifo_read_engine_config0_clear_RESETMASK 0x1
#define link_layer_tx_media_rs_pfifo_read_engine_config0_clear_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_READMASK 0x7
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_READMASK 0xFF
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_READMASK 0xFF
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats0_rd2clr_config_READMASK 0x3
#define link_layer_tx_media_rs_stats0_rd2clr_config_WRITEMASK 0x3
#define link_layer_tx_media_rs_stats0_rd2clr_config_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_stats0_rd2clr_config_RESETMASK 0x3
#define link_layer_tx_media_rs_stats0_rd2clr_config_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats0_inbuff_eop_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats0_inbuff_eop_WRITEMASK 0x0
#define link_layer_tx_media_rs_stats0_inbuff_eop_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats0_inbuff_eop_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats0_inbuff_eop_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats0_inbuff_sop_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats0_inbuff_sop_WRITEMASK 0x0
#define link_layer_tx_media_rs_stats0_inbuff_sop_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats0_inbuff_sop_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats0_inbuff_sop_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats1_rd2clr_config_READMASK 0xF
#define link_layer_tx_media_rs_stats1_rd2clr_config_WRITEMASK 0xF
#define link_layer_tx_media_rs_stats1_rd2clr_config_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_stats1_rd2clr_config_RESETMASK 0xF
#define link_layer_tx_media_rs_stats1_rd2clr_config_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats1_gmii_outbuff_eop_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_outbuff_eop_WRITEMASK 0x0
#define link_layer_tx_media_rs_stats1_gmii_outbuff_eop_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_outbuff_eop_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_outbuff_eop_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats1_gmii_outbuff_sop_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_outbuff_sop_WRITEMASK 0x0
#define link_layer_tx_media_rs_stats1_gmii_outbuff_sop_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_outbuff_sop_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_outbuff_sop_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats1_gmii_done_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_done_WRITEMASK 0x0
#define link_layer_tx_media_rs_stats1_gmii_done_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_done_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_done_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats1_gmii_start_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_start_WRITEMASK 0x0
#define link_layer_tx_media_rs_stats1_gmii_start_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_start_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats1_gmii_start_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats2_rd2clr_config_READMASK 0xF
#define link_layer_tx_media_rs_stats2_rd2clr_config_WRITEMASK 0xF
#define link_layer_tx_media_rs_stats2_rd2clr_config_VOLATILEMASK 0x0
#define link_layer_tx_media_rs_stats2_rd2clr_config_RESETMASK 0xF
#define link_layer_tx_media_rs_stats2_rd2clr_config_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_WRITEMASK 0x0
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_WRITEMASK 0x0
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats2_xgmii_done_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_done_WRITEMASK 0x0
#define link_layer_tx_media_rs_stats2_xgmii_done_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_done_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_done_DEFAULT 0x00000000

#define link_layer_tx_media_rs_stats2_xgmii_start_READMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_start_WRITEMASK 0x0
#define link_layer_tx_media_rs_stats2_xgmii_start_VOLATILEMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_start_RESETMASK 0xFFFFFFFF
#define link_layer_tx_media_rs_stats2_xgmii_start_DEFAULT 0x00000000

#define link_layer_tx_ptp_guard_version_READMASK 0xFFFFFF
#define link_layer_tx_ptp_guard_version_WRITEMASK 0x0
#define link_layer_tx_ptp_guard_version_VOLATILEMASK 0x0
#define link_layer_tx_ptp_guard_version_RESETMASK 0xFFFFFF
#define link_layer_tx_ptp_guard_version_DEFAULT 0x00030300

#define link_layer_tx_ptp_guard_config0_fix_ptp_violations_READMASK 0x3
#define link_layer_tx_ptp_guard_config0_fix_ptp_violations_WRITEMASK 0x1
#define link_layer_tx_ptp_guard_config0_fix_ptp_violations_VOLATILEMASK 0x2
#define link_layer_tx_ptp_guard_config0_fix_ptp_violations_RESETMASK 0x3
#define link_layer_tx_ptp_guard_config0_fix_ptp_violations_DEFAULT 0x00000001

#define link_layer_tx_ptp_guard_config0_max_cycles_READMASK 0xFFFFF
#define link_layer_tx_ptp_guard_config0_max_cycles_WRITEMASK 0xFFFFF
#define link_layer_tx_ptp_guard_config0_max_cycles_VOLATILEMASK 0x0
#define link_layer_tx_ptp_guard_config0_max_cycles_RESETMASK 0xFFFFF
#define link_layer_tx_ptp_guard_config0_max_cycles_DEFAULT 0x00030000

#define link_layer_tx_ptp_guard_stats0_rd2clr_config_READMASK 0x7
#define link_layer_tx_ptp_guard_stats0_rd2clr_config_WRITEMASK 0x7
#define link_layer_tx_ptp_guard_stats0_rd2clr_config_VOLATILEMASK 0x0
#define link_layer_tx_ptp_guard_stats0_rd2clr_config_RESETMASK 0x7
#define link_layer_tx_ptp_guard_stats0_rd2clr_config_DEFAULT 0x00000000

#define link_layer_tx_ptp_guard_stats0_missing_sop_err_READMASK 0xFFFF
#define link_layer_tx_ptp_guard_stats0_missing_sop_err_WRITEMASK 0x0
#define link_layer_tx_ptp_guard_stats0_missing_sop_err_VOLATILEMASK 0xFFFF
#define link_layer_tx_ptp_guard_stats0_missing_sop_err_RESETMASK 0xFFFF
#define link_layer_tx_ptp_guard_stats0_missing_sop_err_DEFAULT 0x00000000

#define link_layer_tx_ptp_guard_stats0_missing_eop_err_READMASK 0xFFFF
#define link_layer_tx_ptp_guard_stats0_missing_eop_err_WRITEMASK 0x0
#define link_layer_tx_ptp_guard_stats0_missing_eop_err_VOLATILEMASK 0xFFFF
#define link_layer_tx_ptp_guard_stats0_missing_eop_err_RESETMASK 0xFFFF
#define link_layer_tx_ptp_guard_stats0_missing_eop_err_DEFAULT 0x00000000

#define link_layer_tx_ptp_guard_stats0_max_cycle_err_READMASK 0xFFFF
#define link_layer_tx_ptp_guard_stats0_max_cycle_err_WRITEMASK 0x0
#define link_layer_tx_ptp_guard_stats0_max_cycle_err_VOLATILEMASK 0xFFFF
#define link_layer_tx_ptp_guard_stats0_max_cycle_err_RESETMASK 0xFFFF
#define link_layer_tx_ptp_guard_stats0_max_cycle_err_DEFAULT 0x00000000

#define link_layer_tx_ptp_guard_irq0_enable_READMASK 0x7
#define link_layer_tx_ptp_guard_irq0_enable_WRITEMASK 0x7
#define link_layer_tx_ptp_guard_irq0_enable_VOLATILEMASK 0x0
#define link_layer_tx_ptp_guard_irq0_enable_RESETMASK 0x7
#define link_layer_tx_ptp_guard_irq0_enable_DEFAULT 0x00000000

#define link_layer_tx_ptp_guard_irq0_pending_READMASK 0x7
#define link_layer_tx_ptp_guard_irq0_pending_WRITEMASK 0x7
#define link_layer_tx_ptp_guard_irq0_pending_VOLATILEMASK 0x7
#define link_layer_tx_ptp_guard_irq0_pending_RESETMASK 0x7
#define link_layer_tx_ptp_guard_irq0_pending_DEFAULT 0x00000000

#define link_layer_tx_ptp_guard_irq0_pending_irq_READMASK 0x7
#define link_layer_tx_ptp_guard_irq0_pending_irq_WRITEMASK 0x0
#define link_layer_tx_ptp_guard_irq0_pending_irq_VOLATILEMASK 0x0
#define link_layer_tx_ptp_guard_irq0_pending_irq_RESETMASK 0x7
#define link_layer_tx_ptp_guard_irq0_pending_irq_DEFAULT 0x00000000

#define link_layer_tx_ptp_guard_irq0_raw_READMASK 0x7
#define link_layer_tx_ptp_guard_irq0_raw_WRITEMASK 0x0
#define link_layer_tx_ptp_guard_irq0_raw_VOLATILEMASK 0x7
#define link_layer_tx_ptp_guard_irq0_raw_RESETMASK 0x7
#define link_layer_tx_ptp_guard_irq0_raw_DEFAULT 0x00000000

#define link_layer_tx_self_test_support_set_up_READMASK 0x1
#define link_layer_tx_self_test_support_set_up_WRITEMASK 0x1
#define link_layer_tx_self_test_support_set_up_VOLATILEMASK 0x0
#define link_layer_tx_self_test_support_set_up_RESETMASK 0x1
#define link_layer_tx_self_test_support_set_up_DEFAULT 0x00000001

#define link_layer_tx_self_test_support_media_gen_version_READMASK 0xFFFFFF
#define link_layer_tx_self_test_support_media_gen_version_WRITEMASK 0x0
#define link_layer_tx_self_test_support_media_gen_version_VOLATILEMASK 0x0
#define link_layer_tx_self_test_support_media_gen_version_RESETMASK 0xFFFFFF
#define link_layer_tx_self_test_support_media_gen_version_DEFAULT 0x00010000

#define link_layer_tx_self_test_support_media_gen_mca_mgen_READMASK 0xFFF
#define link_layer_tx_self_test_support_media_gen_mca_mgen_WRITEMASK 0xFFF
#define link_layer_tx_self_test_support_media_gen_mca_mgen_VOLATILEMASK 0x0
#define link_layer_tx_self_test_support_media_gen_mca_mgen_RESETMASK 0xFFF
#define link_layer_tx_self_test_support_media_gen_mca_mgen_DEFAULT 0x00000190

#define link_layer_tx_self_test_support_framer_max_byte_READMASK 0x3FFF
#define link_layer_tx_self_test_support_framer_max_byte_WRITEMASK 0x3FFF
#define link_layer_tx_self_test_support_framer_max_byte_VOLATILEMASK 0x0
#define link_layer_tx_self_test_support_framer_max_byte_RESETMASK 0x3FFF
#define link_layer_tx_self_test_support_framer_max_byte_DEFAULT 0x00000080

#define link_layer_tx_self_test_support_framer_mac_dg_type_READMASK 0xFF
#define link_layer_tx_self_test_support_framer_mac_dg_type_WRITEMASK 0xFF
#define link_layer_tx_self_test_support_framer_mac_dg_type_VOLATILEMASK 0x0
#define link_layer_tx_self_test_support_framer_mac_dg_type_RESETMASK 0xFF
#define link_layer_tx_self_test_support_framer_mac_dg_type_DEFAULT 0x00000004

#define link_layer_tx_self_test_support_framer_timer_wait_READMASK 0xFFF
#define link_layer_tx_self_test_support_framer_timer_wait_WRITEMASK 0xFFF
#define link_layer_tx_self_test_support_framer_timer_wait_VOLATILEMASK 0x0
#define link_layer_tx_self_test_support_framer_timer_wait_RESETMASK 0xFFF
#define link_layer_tx_self_test_support_framer_timer_wait_DEFAULT 0x00000000

#define link_layer_tx_self_test_support_framer_mtu_size_READMASK 0x3FFF
#define link_layer_tx_self_test_support_framer_mtu_size_WRITEMASK 0x3FFF
#define link_layer_tx_self_test_support_framer_mtu_size_VOLATILEMASK 0x0
#define link_layer_tx_self_test_support_framer_mtu_size_RESETMASK 0x3FFF
#define link_layer_tx_self_test_support_framer_mtu_size_DEFAULT 0x000005DC

#define link_layer_tx_self_test_support_framer_max_mtu_size_READMASK 0x3FFF
#define link_layer_tx_self_test_support_framer_max_mtu_size_WRITEMASK 0x0
#define link_layer_tx_self_test_support_framer_max_mtu_size_VOLATILEMASK 0x3FFF
#define link_layer_tx_self_test_support_framer_max_mtu_size_RESETMASK 0x3FFF
#define link_layer_tx_self_test_support_framer_max_mtu_size_DEFAULT 0x000005DC

#define link_layer_tx_control_READMASK 0x3
#define link_layer_tx_control_WRITEMASK 0x3
#define link_layer_tx_control_VOLATILEMASK 0x0
#define link_layer_tx_control_RESETMASK 0x3
#define link_layer_tx_control_DEFAULT 0x00000000

#define link_layer_tx_irq0_enable_READMASK 0x1FFFFFFF
#define link_layer_tx_irq0_enable_WRITEMASK 0x1FFFFFFF
#define link_layer_tx_irq0_enable_VOLATILEMASK 0x0
#define link_layer_tx_irq0_enable_RESETMASK 0x1FFFFFFF
#define link_layer_tx_irq0_enable_DEFAULT 0x00000000

#define link_layer_tx_irq0_pending_READMASK 0x1FFFFFFF
#define link_layer_tx_irq0_pending_WRITEMASK 0x1FFFFFFF
#define link_layer_tx_irq0_pending_VOLATILEMASK 0x1FFFFFFF
#define link_layer_tx_irq0_pending_RESETMASK 0x1FFFFFFF
#define link_layer_tx_irq0_pending_DEFAULT 0x00000000

#define link_layer_tx_irq0_pending_irq_READMASK 0x1FFFFFFF
#define link_layer_tx_irq0_pending_irq_WRITEMASK 0x0
#define link_layer_tx_irq0_pending_irq_VOLATILEMASK 0x0
#define link_layer_tx_irq0_pending_irq_RESETMASK 0x1FFFFFFF
#define link_layer_tx_irq0_pending_irq_DEFAULT 0x00000000

#define link_layer_tx_irq0_raw_READMASK 0x1FFFFFFF
#define link_layer_tx_irq0_raw_WRITEMASK 0x0
#define link_layer_tx_irq0_raw_VOLATILEMASK 0x1FFFFFFF
#define link_layer_tx_irq0_raw_RESETMASK 0x1FFFFFFF
#define link_layer_tx_irq0_raw_DEFAULT 0x00000000

#define link_layer_tx_s_SIZE 0x200
#define link_layer_tx_version_SIZE 0x4
#define link_layer_tx_mac_SIZE 0x5C
#define link_layer_tx_mac_version_SIZE 0x4
#define link_layer_tx_mac_mac_config_SIZE 0x4
#define link_layer_tx_mac_pa_word1_SIZE 0x4
#define link_layer_tx_mac_pa_word0_SIZE 0x4
#define link_layer_tx_mac_sfd_SIZE 0x4
#define link_layer_tx_mac_da_word1_SIZE 0x4
#define link_layer_tx_mac_da_word0_SIZE 0x4
#define link_layer_tx_mac_sa__word1_SIZE 0x4
#define link_layer_tx_mac_sa_word0_SIZE 0x4
#define link_layer_tx_mac_lt_SIZE 0x4
#define link_layer_tx_mac_idle_SIZE 0x4
#define link_layer_tx_mac_frm_rate_SIZE 0x4
#define link_layer_tx_mac_bandwidth_gap_SIZE 0x4
#define link_layer_tx_mac_bandwidth_limit_SIZE 0x4
#define link_layer_tx_mac_stats0_SIZE 0x24
#define link_layer_tx_mac_stats0_rd2clr_config_SIZE 0x4
#define link_layer_tx_mac_stats0_pause_frame_SIZE 0x4
#define link_layer_tx_mac_stats0_out_eop_SIZE 0x4
#define link_layer_tx_mac_stats0_out_sop_SIZE 0x4
#define link_layer_tx_mac_stats0_stall_ptp_in_SIZE 0x4
#define link_layer_tx_mac_stats0_in_eop_SIZE 0x4
#define link_layer_tx_mac_stats0_in_sop_SIZE 0x4
#define link_layer_tx_mac_stats0_fsm_count_beyond_ptp_SIZE 0x4
#define link_layer_tx_mac_stats0_fsm_rollover_SIZE 0x4
#define link_layer_tx_media_rs_SIZE 0x8C
#define link_layer_tx_media_rs_version_SIZE 0x4
#define link_layer_tx_media_rs_enable_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_SIZE 0x50
#define link_layer_tx_media_rs_pfifo_version_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_SIZE 0x38
#define link_layer_tx_media_rs_pfifo_write_engine_config0_SIZE 0xC
#define link_layer_tx_media_rs_pfifo_write_engine_config0_clear_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_config0_mode_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_SIZE 0x2C
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_read_engine_SIZE 0x14
#define link_layer_tx_media_rs_pfifo_read_engine_config0_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_read_engine_config0_clear_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_SIZE 0x10
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_SIZE 0x4
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_SIZE 0x4
#define link_layer_tx_media_rs_stats0_SIZE 0xC
#define link_layer_tx_media_rs_stats0_rd2clr_config_SIZE 0x4
#define link_layer_tx_media_rs_stats0_inbuff_eop_SIZE 0x4
#define link_layer_tx_media_rs_stats0_inbuff_sop_SIZE 0x4
#define link_layer_tx_media_rs_stats1_SIZE 0x14
#define link_layer_tx_media_rs_stats1_rd2clr_config_SIZE 0x4
#define link_layer_tx_media_rs_stats1_gmii_outbuff_eop_SIZE 0x4
#define link_layer_tx_media_rs_stats1_gmii_outbuff_sop_SIZE 0x4
#define link_layer_tx_media_rs_stats1_gmii_done_SIZE 0x4
#define link_layer_tx_media_rs_stats1_gmii_start_SIZE 0x4
#define link_layer_tx_media_rs_stats2_SIZE 0x14
#define link_layer_tx_media_rs_stats2_rd2clr_config_SIZE 0x4
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_SIZE 0x4
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_SIZE 0x4
#define link_layer_tx_media_rs_stats2_xgmii_done_SIZE 0x4
#define link_layer_tx_media_rs_stats2_xgmii_start_SIZE 0x4
#define link_layer_tx_ptp_guard_SIZE 0x2C
#define link_layer_tx_ptp_guard_version_SIZE 0x4
#define link_layer_tx_ptp_guard_config0_SIZE 0x8
#define link_layer_tx_ptp_guard_config0_fix_ptp_violations_SIZE 0x4
#define link_layer_tx_ptp_guard_config0_max_cycles_SIZE 0x4
#define link_layer_tx_ptp_guard_stats0_SIZE 0x10
#define link_layer_tx_ptp_guard_stats0_rd2clr_config_SIZE 0x4
#define link_layer_tx_ptp_guard_stats0_missing_sop_err_SIZE 0x4
#define link_layer_tx_ptp_guard_stats0_missing_eop_err_SIZE 0x4
#define link_layer_tx_ptp_guard_stats0_max_cycle_err_SIZE 0x4
#define link_layer_tx_ptp_guard_irq0_SIZE 0x10
#define link_layer_tx_ptp_guard_irq0_enable_SIZE 0x4
#define link_layer_tx_ptp_guard_irq0_pending_SIZE 0x4
#define link_layer_tx_ptp_guard_irq0_pending_irq_SIZE 0x4
#define link_layer_tx_ptp_guard_irq0_raw_SIZE 0x4
#define link_layer_tx_self_test_support_SIZE 0x20
#define link_layer_tx_self_test_support_set_up_SIZE 0x4
#define link_layer_tx_self_test_support_media_gen_SIZE 0x8
#define link_layer_tx_self_test_support_media_gen_version_SIZE 0x4
#define link_layer_tx_self_test_support_media_gen_mca_mgen_SIZE 0x4
#define link_layer_tx_self_test_support_framer_SIZE 0x14
#define link_layer_tx_self_test_support_framer_max_byte_SIZE 0x4
#define link_layer_tx_self_test_support_framer_mac_dg_type_SIZE 0x4
#define link_layer_tx_self_test_support_framer_timer_wait_SIZE 0x4
#define link_layer_tx_self_test_support_framer_mtu_size_SIZE 0x4
#define link_layer_tx_self_test_support_framer_max_mtu_size_SIZE 0x4
#define link_layer_tx_control_SIZE 0x4
#define link_layer_tx_irq0_SIZE 0x10
#define link_layer_tx_irq0_enable_SIZE 0x4
#define link_layer_tx_irq0_pending_SIZE 0x4
#define link_layer_tx_irq0_pending_irq_SIZE 0x4
#define link_layer_tx_irq0_raw_SIZE 0x4

#define link_layer_tx_s_OFFSET 0x0
#define link_layer_tx_version_OFFSET 0x0
#define link_layer_tx_mac_OFFSET 0x4
#define link_layer_tx_mac_version_OFFSET 0x0
#define link_layer_tx_mac_mac_config_OFFSET 0x4
#define link_layer_tx_mac_pa_word1_OFFSET 0x8
#define link_layer_tx_mac_pa_word0_OFFSET 0xC
#define link_layer_tx_mac_sfd_OFFSET 0x10
#define link_layer_tx_mac_da_word1_OFFSET 0x14
#define link_layer_tx_mac_da_word0_OFFSET 0x18
#define link_layer_tx_mac_sa__word1_OFFSET 0x1C
#define link_layer_tx_mac_sa_word0_OFFSET 0x20
#define link_layer_tx_mac_lt_OFFSET 0x24
#define link_layer_tx_mac_idle_OFFSET 0x28
#define link_layer_tx_mac_frm_rate_OFFSET 0x2C
#define link_layer_tx_mac_bandwidth_gap_OFFSET 0x30
#define link_layer_tx_mac_bandwidth_limit_OFFSET 0x34
#define link_layer_tx_mac_stats0_OFFSET 0x38
#define link_layer_tx_mac_stats0_rd2clr_config_OFFSET 0x0
#define link_layer_tx_mac_stats0_pause_frame_OFFSET 0x4
#define link_layer_tx_mac_stats0_out_eop_OFFSET 0x8
#define link_layer_tx_mac_stats0_out_sop_OFFSET 0xC
#define link_layer_tx_mac_stats0_stall_ptp_in_OFFSET 0x10
#define link_layer_tx_mac_stats0_in_eop_OFFSET 0x14
#define link_layer_tx_mac_stats0_in_sop_OFFSET 0x18
#define link_layer_tx_mac_stats0_fsm_count_beyond_ptp_OFFSET 0x1C
#define link_layer_tx_mac_stats0_fsm_rollover_OFFSET 0x20
#define link_layer_tx_media_rs_OFFSET 0x60
#define link_layer_tx_media_rs_version_OFFSET 0x0
#define link_layer_tx_media_rs_enable_OFFSET 0x4
#define link_layer_tx_media_rs_pfifo_OFFSET 0x8
#define link_layer_tx_media_rs_pfifo_version_OFFSET 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_OFFSET 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_config0_OFFSET 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_config0_clear_OFFSET 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_config0_mode_OFFSET 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_OFFSET 0x8
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_OFFSET 0xC
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_OFFSET 0x14
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_OFFSET 0x1C
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define link_layer_tx_media_rs_pfifo_read_engine_OFFSET 0x3C
#define link_layer_tx_media_rs_pfifo_read_engine_config0_OFFSET 0x0
#define link_layer_tx_media_rs_pfifo_read_engine_config0_clear_OFFSET 0x0
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_OFFSET 0x4
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_OFFSET 0x4
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_OFFSET 0x8
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define link_layer_tx_media_rs_stats0_OFFSET 0x58
#define link_layer_tx_media_rs_stats0_rd2clr_config_OFFSET 0x0
#define link_layer_tx_media_rs_stats0_inbuff_eop_OFFSET 0x4
#define link_layer_tx_media_rs_stats0_inbuff_sop_OFFSET 0x8
#define link_layer_tx_media_rs_stats1_OFFSET 0x64
#define link_layer_tx_media_rs_stats1_rd2clr_config_OFFSET 0x0
#define link_layer_tx_media_rs_stats1_gmii_outbuff_eop_OFFSET 0x4
#define link_layer_tx_media_rs_stats1_gmii_outbuff_sop_OFFSET 0x8
#define link_layer_tx_media_rs_stats1_gmii_done_OFFSET 0xC
#define link_layer_tx_media_rs_stats1_gmii_start_OFFSET 0x10
#define link_layer_tx_media_rs_stats2_OFFSET 0x78
#define link_layer_tx_media_rs_stats2_rd2clr_config_OFFSET 0x0
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_OFFSET 0x4
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_OFFSET 0x8
#define link_layer_tx_media_rs_stats2_xgmii_done_OFFSET 0xC
#define link_layer_tx_media_rs_stats2_xgmii_start_OFFSET 0x10
#define link_layer_tx_ptp_guard_OFFSET 0xEC
#define link_layer_tx_ptp_guard_version_OFFSET 0x0
#define link_layer_tx_ptp_guard_config0_OFFSET 0x4
#define link_layer_tx_ptp_guard_config0_fix_ptp_violations_OFFSET 0x0
#define link_layer_tx_ptp_guard_config0_max_cycles_OFFSET 0x4
#define link_layer_tx_ptp_guard_stats0_OFFSET 0xC
#define link_layer_tx_ptp_guard_stats0_rd2clr_config_OFFSET 0x0
#define link_layer_tx_ptp_guard_stats0_missing_sop_err_OFFSET 0x4
#define link_layer_tx_ptp_guard_stats0_missing_eop_err_OFFSET 0x8
#define link_layer_tx_ptp_guard_stats0_max_cycle_err_OFFSET 0xC
#define link_layer_tx_ptp_guard_irq0_OFFSET 0x1C
#define link_layer_tx_ptp_guard_irq0_enable_OFFSET 0x0
#define link_layer_tx_ptp_guard_irq0_pending_OFFSET 0x4
#define link_layer_tx_ptp_guard_irq0_pending_irq_OFFSET 0x8
#define link_layer_tx_ptp_guard_irq0_raw_OFFSET 0xC
#define link_layer_tx_self_test_support_OFFSET 0x118
#define link_layer_tx_self_test_support_set_up_OFFSET 0x0
#define link_layer_tx_self_test_support_media_gen_OFFSET 0x4
#define link_layer_tx_self_test_support_media_gen_version_OFFSET 0x0
#define link_layer_tx_self_test_support_media_gen_mca_mgen_OFFSET 0x4
#define link_layer_tx_self_test_support_framer_OFFSET 0xC
#define link_layer_tx_self_test_support_framer_max_byte_OFFSET 0x0
#define link_layer_tx_self_test_support_framer_mac_dg_type_OFFSET 0x4
#define link_layer_tx_self_test_support_framer_timer_wait_OFFSET 0x8
#define link_layer_tx_self_test_support_framer_mtu_size_OFFSET 0xC
#define link_layer_tx_self_test_support_framer_max_mtu_size_OFFSET 0x10
#define link_layer_tx_control_OFFSET 0x138
#define link_layer_tx_irq0_OFFSET 0x13C
#define link_layer_tx_irq0_enable_OFFSET 0x0
#define link_layer_tx_irq0_pending_OFFSET 0x4
#define link_layer_tx_irq0_pending_irq_OFFSET 0x8
#define link_layer_tx_irq0_raw_OFFSET 0xC

#define link_layer_tx_s_ADDRESS 0x000
#define link_layer_tx_version_ADDRESS 0x000
#define link_layer_tx_mac_ADDRESS 0x004
#define link_layer_tx_mac_version_ADDRESS 0x004
#define link_layer_tx_mac_mac_config_ADDRESS 0x008
#define link_layer_tx_mac_pa_word1_ADDRESS 0x00C
#define link_layer_tx_mac_pa_word0_ADDRESS 0x010
#define link_layer_tx_mac_sfd_ADDRESS 0x014
#define link_layer_tx_mac_da_word1_ADDRESS 0x018
#define link_layer_tx_mac_da_word0_ADDRESS 0x01C
#define link_layer_tx_mac_sa__word1_ADDRESS 0x020
#define link_layer_tx_mac_sa_word0_ADDRESS 0x024
#define link_layer_tx_mac_lt_ADDRESS 0x028
#define link_layer_tx_mac_idle_ADDRESS 0x02C
#define link_layer_tx_mac_frm_rate_ADDRESS 0x030
#define link_layer_tx_mac_bandwidth_gap_ADDRESS 0x034
#define link_layer_tx_mac_bandwidth_limit_ADDRESS 0x038
#define link_layer_tx_mac_stats0_ADDRESS 0x03C
#define link_layer_tx_mac_stats0_rd2clr_config_ADDRESS 0x03C
#define link_layer_tx_mac_stats0_pause_frame_ADDRESS 0x040
#define link_layer_tx_mac_stats0_out_eop_ADDRESS 0x044
#define link_layer_tx_mac_stats0_out_sop_ADDRESS 0x048
#define link_layer_tx_mac_stats0_stall_ptp_in_ADDRESS 0x04C
#define link_layer_tx_mac_stats0_in_eop_ADDRESS 0x050
#define link_layer_tx_mac_stats0_in_sop_ADDRESS 0x054
#define link_layer_tx_mac_stats0_fsm_count_beyond_ptp_ADDRESS 0x058
#define link_layer_tx_mac_stats0_fsm_rollover_ADDRESS 0x05C
#define link_layer_tx_media_rs_ADDRESS 0x060
#define link_layer_tx_media_rs_version_ADDRESS 0x060
#define link_layer_tx_media_rs_enable_ADDRESS 0x064
#define link_layer_tx_media_rs_pfifo_ADDRESS 0x068
#define link_layer_tx_media_rs_pfifo_version_ADDRESS 0x068
#define link_layer_tx_media_rs_pfifo_write_engine_ADDRESS 0x06C
#define link_layer_tx_media_rs_pfifo_write_engine_config0_ADDRESS 0x06C
#define link_layer_tx_media_rs_pfifo_write_engine_config0_clear_ADDRESS 0x06C
#define link_layer_tx_media_rs_pfifo_write_engine_config0_mode_ADDRESS 0x070
#define link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_ADDRESS 0x074
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_ADDRESS 0x078
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_ADDRESS 0x078
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_ADDRESS 0x07C
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_ADDRESS 0x080
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x084
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_ADDRESS 0x088
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_ADDRESS 0x08C
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_ADDRESS 0x090
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_ADDRESS 0x094
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_ADDRESS 0x098
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_ADDRESS 0x09C
#define link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_ADDRESS 0x0A0
#define link_layer_tx_media_rs_pfifo_read_engine_ADDRESS 0x0A4
#define link_layer_tx_media_rs_pfifo_read_engine_config0_ADDRESS 0x0A4
#define link_layer_tx_media_rs_pfifo_read_engine_config0_clear_ADDRESS 0x0A4
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_ADDRESS 0x0A8
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_ADDRESS 0x0A8
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_ADDRESS 0x0AC
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_ADDRESS 0x0B0
#define link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_ADDRESS 0x0B4
#define link_layer_tx_media_rs_stats0_ADDRESS 0x0B8
#define link_layer_tx_media_rs_stats0_rd2clr_config_ADDRESS 0x0B8
#define link_layer_tx_media_rs_stats0_inbuff_eop_ADDRESS 0x0BC
#define link_layer_tx_media_rs_stats0_inbuff_sop_ADDRESS 0x0C0
#define link_layer_tx_media_rs_stats1_ADDRESS 0x0C4
#define link_layer_tx_media_rs_stats1_rd2clr_config_ADDRESS 0x0C4
#define link_layer_tx_media_rs_stats1_gmii_outbuff_eop_ADDRESS 0x0C8
#define link_layer_tx_media_rs_stats1_gmii_outbuff_sop_ADDRESS 0x0CC
#define link_layer_tx_media_rs_stats1_gmii_done_ADDRESS 0x0D0
#define link_layer_tx_media_rs_stats1_gmii_start_ADDRESS 0x0D4
#define link_layer_tx_media_rs_stats2_ADDRESS 0x0D8
#define link_layer_tx_media_rs_stats2_rd2clr_config_ADDRESS 0x0D8
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_ADDRESS 0x0DC
#define link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_ADDRESS 0x0E0
#define link_layer_tx_media_rs_stats2_xgmii_done_ADDRESS 0x0E4
#define link_layer_tx_media_rs_stats2_xgmii_start_ADDRESS 0x0E8
#define link_layer_tx_ptp_guard_ADDRESS 0x0EC
#define link_layer_tx_ptp_guard_version_ADDRESS 0x0EC
#define link_layer_tx_ptp_guard_config0_ADDRESS 0x0F0
#define link_layer_tx_ptp_guard_config0_fix_ptp_violations_ADDRESS 0x0F0
#define link_layer_tx_ptp_guard_config0_max_cycles_ADDRESS 0x0F4
#define link_layer_tx_ptp_guard_stats0_ADDRESS 0x0F8
#define link_layer_tx_ptp_guard_stats0_rd2clr_config_ADDRESS 0x0F8
#define link_layer_tx_ptp_guard_stats0_missing_sop_err_ADDRESS 0x0FC
#define link_layer_tx_ptp_guard_stats0_missing_eop_err_ADDRESS 0x100
#define link_layer_tx_ptp_guard_stats0_max_cycle_err_ADDRESS 0x104
#define link_layer_tx_ptp_guard_irq0_ADDRESS 0x108
#define link_layer_tx_ptp_guard_irq0_enable_ADDRESS 0x108
#define link_layer_tx_ptp_guard_irq0_pending_ADDRESS 0x10C
#define link_layer_tx_ptp_guard_irq0_pending_irq_ADDRESS 0x110
#define link_layer_tx_ptp_guard_irq0_raw_ADDRESS 0x114
#define link_layer_tx_self_test_support_ADDRESS 0x118
#define link_layer_tx_self_test_support_set_up_ADDRESS 0x118
#define link_layer_tx_self_test_support_media_gen_ADDRESS 0x11C
#define link_layer_tx_self_test_support_media_gen_version_ADDRESS 0x11C
#define link_layer_tx_self_test_support_media_gen_mca_mgen_ADDRESS 0x120
#define link_layer_tx_self_test_support_framer_ADDRESS 0x124
#define link_layer_tx_self_test_support_framer_max_byte_ADDRESS 0x124
#define link_layer_tx_self_test_support_framer_mac_dg_type_ADDRESS 0x128
#define link_layer_tx_self_test_support_framer_timer_wait_ADDRESS 0x12C
#define link_layer_tx_self_test_support_framer_mtu_size_ADDRESS 0x130
#define link_layer_tx_self_test_support_framer_max_mtu_size_ADDRESS 0x134
#define link_layer_tx_control_ADDRESS 0x138
#define link_layer_tx_irq0_ADDRESS 0x13C
#define link_layer_tx_irq0_enable_ADDRESS 0x13C
#define link_layer_tx_irq0_pending_ADDRESS 0x140
#define link_layer_tx_irq0_pending_irq_ADDRESS 0x144
#define link_layer_tx_irq0_raw_ADDRESS 0x148
#define LINK_LAYER_TX_VERSION_MAJOR_OFFSET 16
#define LINK_LAYER_TX_VERSION_MAJOR_MASK 0xFF0000
#define LINK_LAYER_TX_VERSION_MINOR_OFFSET 8
#define LINK_LAYER_TX_VERSION_MINOR_MASK 0xFF00
#define LINK_LAYER_TX_VERSION_PATCH_OFFSET 0
#define LINK_LAYER_TX_VERSION_PATCH_MASK 0xFF
#define LINK_LAYER_TX_MAC_VERSION_MAJOR_OFFSET 16
#define LINK_LAYER_TX_MAC_VERSION_MAJOR_MASK 0xFF0000
#define LINK_LAYER_TX_MAC_VERSION_MINOR_OFFSET 8
#define LINK_LAYER_TX_MAC_VERSION_MINOR_MASK 0xFF00
#define LINK_LAYER_TX_MAC_VERSION_PATCH_OFFSET 0
#define LINK_LAYER_TX_MAC_VERSION_PATCH_MASK 0xFF
#define LINK_LAYER_TX_MAC_MAC_CONFIG_INJECT_CRC32_ERR_OFFSET 4
#define LINK_LAYER_TX_MAC_MAC_CONFIG_INJECT_CRC32_ERR_MASK 0x10
#define LINK_LAYER_TX_MAC_MAC_CONFIG_INJECT_CRC32_ERR 0x10
#define LINK_LAYER_TX_MAC_MAC_CONFIG_DISABLE_CRC32_OFFSET 3
#define LINK_LAYER_TX_MAC_MAC_CONFIG_DISABLE_CRC32_MASK 0x8
#define LINK_LAYER_TX_MAC_MAC_CONFIG_DISABLE_CRC32 0x8
#define LINK_LAYER_TX_MAC_MAC_CONFIG_CRC32_IMPLMNTD_OFFSET 2
#define LINK_LAYER_TX_MAC_MAC_CONFIG_CRC32_IMPLMNTD_MASK 0x4
#define LINK_LAYER_TX_MAC_MAC_CONFIG_CRC32_IMPLMNTD 0x4
#define LINK_LAYER_TX_MAC_MAC_CONFIG_DBG_SEQ_NUM_EN_OFFSET 1
#define LINK_LAYER_TX_MAC_MAC_CONFIG_DBG_SEQ_NUM_EN_MASK 0x2
#define LINK_LAYER_TX_MAC_MAC_CONFIG_DBG_SEQ_NUM_EN 0x2
#define LINK_LAYER_TX_MAC_MAC_CONFIG_EN_OFFSET 0
#define LINK_LAYER_TX_MAC_MAC_CONFIG_EN_MASK 0x1
#define LINK_LAYER_TX_MAC_MAC_CONFIG_EN 0x1
#define LINK_LAYER_TX_MAC_PA_WORD1_PA_WORD1_OFFSET 0
#define LINK_LAYER_TX_MAC_PA_WORD1_PA_WORD1_MASK 0xFFFFFF
#define LINK_LAYER_TX_MAC_PA_WORD0_PA_WORD0_OFFSET 0
#define LINK_LAYER_TX_MAC_PA_WORD0_PA_WORD0_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_SFD_SFD_OFFSET 0
#define LINK_LAYER_TX_MAC_SFD_SFD_MASK 0xFF
#define LINK_LAYER_TX_MAC_DA_WORD1_DA_W1_OFFSET 0
#define LINK_LAYER_TX_MAC_DA_WORD1_DA_W1_MASK 0xFFFF
#define LINK_LAYER_TX_MAC_DA_WORD0_DA_W0_OFFSET 0
#define LINK_LAYER_TX_MAC_DA_WORD0_DA_W0_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_SA__WORD1_SA_W1_OFFSET 0
#define LINK_LAYER_TX_MAC_SA__WORD1_SA_W1_MASK 0xFFFF
#define LINK_LAYER_TX_MAC_SA_WORD0_SA_W0_OFFSET 0
#define LINK_LAYER_TX_MAC_SA_WORD0_SA_W0_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_LT_LT_MODE_OFFSET 16
#define LINK_LAYER_TX_MAC_LT_LT_MODE_MASK 0x10000
#define LINK_LAYER_TX_MAC_LT_LT_MODE 0x10000
#define LINK_LAYER_TX_MAC_LT_LT_OFFSET 0
#define LINK_LAYER_TX_MAC_LT_LT_MASK 0xFFFF
#define LINK_LAYER_TX_MAC_IDLE_IDLE_OFFSET 0
#define LINK_LAYER_TX_MAC_IDLE_IDLE_MASK 0xFF
#define LINK_LAYER_TX_MAC_FRM_RATE_FRM_RATE_OFFSET 0
#define LINK_LAYER_TX_MAC_FRM_RATE_FRM_RATE_MASK 0xFFF
#define LINK_LAYER_TX_MAC_BANDWIDTH_GAP_BANDWIDTH_GAP_OFFSET 0
#define LINK_LAYER_TX_MAC_BANDWIDTH_GAP_BANDWIDTH_GAP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_BANDWIDTH_LIMIT_BANDWIDTH_LIMIT_OFFSET 0
#define LINK_LAYER_TX_MAC_BANDWIDTH_LIMIT_BANDWIDTH_LIMIT_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_ROLLOVER_OFFSET 7
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_ROLLOVER_MASK 0x80
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_ROLLOVER 0x80
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_COUNT_BEYOND_PTP_OFFSET 6
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_COUNT_BEYOND_PTP_MASK 0x40
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_COUNT_BEYOND_PTP 0x40
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_SOP_OFFSET 5
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_SOP_MASK 0x20
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_SOP 0x20
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_EOP_OFFSET 4
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_EOP_MASK 0x10
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_EOP 0x10
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_STALL_PTP_IN_OFFSET 3
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_STALL_PTP_IN_MASK 0x8
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_STALL_PTP_IN 0x8
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_SOP_OFFSET 2
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_SOP_MASK 0x4
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_SOP 0x4
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_EOP_OFFSET 1
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_EOP_MASK 0x2
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_EOP 0x2
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_PAUSE_FRAME_OFFSET 0
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_PAUSE_FRAME_MASK 0x1
#define LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_PAUSE_FRAME 0x1
#define LINK_LAYER_TX_MAC_STATS0_PAUSE_FRAME_PAUSE_FRAME_OFFSET 0
#define LINK_LAYER_TX_MAC_STATS0_PAUSE_FRAME_PAUSE_FRAME_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_STATS0_OUT_EOP_OUT_EOP_OFFSET 0
#define LINK_LAYER_TX_MAC_STATS0_OUT_EOP_OUT_EOP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_STATS0_OUT_SOP_OUT_SOP_OFFSET 0
#define LINK_LAYER_TX_MAC_STATS0_OUT_SOP_OUT_SOP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_STATS0_STALL_PTP_IN_STALL_PTP_IN_OFFSET 0
#define LINK_LAYER_TX_MAC_STATS0_STALL_PTP_IN_STALL_PTP_IN_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_STATS0_IN_EOP_IN_EOP_OFFSET 0
#define LINK_LAYER_TX_MAC_STATS0_IN_EOP_IN_EOP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_STATS0_IN_SOP_IN_SOP_OFFSET 0
#define LINK_LAYER_TX_MAC_STATS0_IN_SOP_IN_SOP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MAC_STATS0_FSM_COUNT_BEYOND_PTP_FSM_COUNT_BEYOND_PTP_OFFSET 0
#define LINK_LAYER_TX_MAC_STATS0_FSM_COUNT_BEYOND_PTP_FSM_COUNT_BEYOND_PTP_MASK 0xFF
#define LINK_LAYER_TX_MAC_STATS0_FSM_ROLLOVER_FSM_ROLLOVER_OFFSET 0
#define LINK_LAYER_TX_MAC_STATS0_FSM_ROLLOVER_FSM_ROLLOVER_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_VERSION_MAJOR_OFFSET 16
#define LINK_LAYER_TX_MEDIA_RS_VERSION_MAJOR_MASK 0xFF0000
#define LINK_LAYER_TX_MEDIA_RS_VERSION_MINOR_OFFSET 8
#define LINK_LAYER_TX_MEDIA_RS_VERSION_MINOR_MASK 0xFF00
#define LINK_LAYER_TX_MEDIA_RS_VERSION_PATCH_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_VERSION_PATCH_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_XGMII_EN_OFFSET 4
#define LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_XGMII_EN_MASK 0x10
#define LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_XGMII_EN 0x10
#define LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_GMII_EN_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_GMII_EN_MASK 0x1
#define LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_GMII_EN 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_MAJOR_OFFSET 16
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_MAJOR_MASK 0xFF0000
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_MINOR_OFFSET 8
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_MINOR_MASK 0xFF00
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_PATCH_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_PATCH_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_SOP_OFFSET 1
#define LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_SOP_MASK 0x2
#define LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_SOP 0x2
#define LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_EOP_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_EOP_MASK 0x1
#define LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_EOP 0x1
#define LINK_LAYER_TX_MEDIA_RS_STATS0_INBUFF_EOP_INBUFF_EOP_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS0_INBUFF_EOP_INBUFF_EOP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MEDIA_RS_STATS0_INBUFF_SOP_INBUFF_SOP_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS0_INBUFF_SOP_INBUFF_SOP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_START_OFFSET 3
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_START_MASK 0x8
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_START 0x8
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_DONE_OFFSET 2
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_DONE_MASK 0x4
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_DONE 0x4
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_SOP_OFFSET 1
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_SOP_MASK 0x2
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_SOP 0x2
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_EOP_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_EOP_MASK 0x1
#define LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_EOP 0x1
#define LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_OUTBUFF_EOP_GMII_OUT_EOP_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_OUTBUFF_EOP_GMII_OUT_EOP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_OUTBUFF_SOP_GMII_OUTBUFF_SOP_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_OUTBUFF_SOP_GMII_OUTBUFF_SOP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_DONE_GMII_DONE_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_DONE_GMII_DONE_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_START_GMII_START_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_START_GMII_START_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_START_OFFSET 3
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_START_MASK 0x8
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_START 0x8
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_DONE_OFFSET 2
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_DONE_MASK 0x4
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_DONE 0x4
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_SOP_OFFSET 1
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_SOP_MASK 0x2
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_SOP 0x2
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_EOP_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_EOP_MASK 0x1
#define LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_EOP 0x1
#define LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_OUTBUFF_EOP_XGMII_OUT_EOP_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_OUTBUFF_EOP_XGMII_OUT_EOP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_OUTBUFF_SOP_XGMII_OUTBUFF_SOP_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_OUTBUFF_SOP_XGMII_OUTBUFF_SOP_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_DONE_XGMII_DONE_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_DONE_XGMII_DONE_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_START_XGMII_START_OFFSET 0
#define LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_START_XGMII_START_MASK 0xFFFFFFFF
#define LINK_LAYER_TX_PTP_GUARD_VERSION_MAJOR_OFFSET 16
#define LINK_LAYER_TX_PTP_GUARD_VERSION_MAJOR_MASK 0xFF0000
#define LINK_LAYER_TX_PTP_GUARD_VERSION_MINOR_OFFSET 8
#define LINK_LAYER_TX_PTP_GUARD_VERSION_MINOR_MASK 0xFF00
#define LINK_LAYER_TX_PTP_GUARD_VERSION_PATCH_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_VERSION_PATCH_MASK 0xFF
#define LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_OFFSET 1
#define LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_MASK 0x2
#define LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED 0x2
#define LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_MASK 0x1
#define LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE 0x1
#define LINK_LAYER_TX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_OFFSET 16
#define LINK_LAYER_TX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_MASK 0xF0000
#define LINK_LAYER_TX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLES_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLES_MASK 0xFFFF
#define LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_OFFSET 2
#define LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_MASK 0x4
#define LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR 0x4
#define LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_OFFSET 1
#define LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_MASK 0x2
#define LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR 0x2
#define LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_MASK 0x1
#define LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR 0x1
#define LINK_LAYER_TX_PTP_GUARD_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_MASK 0xFFFF
#define LINK_LAYER_TX_PTP_GUARD_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_MASK 0xFFFF
#define LINK_LAYER_TX_PTP_GUARD_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_MASK 0xFFFF
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR_OFFSET 2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR_MASK 0x4
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR 0x4
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR_OFFSET 1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR_MASK 0x2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR 0x2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR_MASK 0x1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR 0x1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR_OFFSET 2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR_MASK 0x4
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR 0x4
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR_OFFSET 1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR_MASK 0x2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR 0x2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR_MASK 0x1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR 0x1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_OFFSET 2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_MASK 0x4
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR 0x4
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_OFFSET 1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_MASK 0x2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR 0x2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_MASK 0x1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR 0x1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR_OFFSET 2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR_MASK 0x4
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR 0x4
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR_OFFSET 1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR_MASK 0x2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR 0x2
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR_OFFSET 0
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR_MASK 0x1
#define LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR 0x1
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_SET_UP_ENABLE_OFFSET 0
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_SET_UP_ENABLE_MASK 0x1
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_SET_UP_ENABLE 0x1
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_MAJOR_OFFSET 16
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_MAJOR_MASK 0xFF0000
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_MINOR_OFFSET 8
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_MINOR_MASK 0xFF00
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_PATCH_OFFSET 0
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_PATCH_MASK 0xFF
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_IWG_CNT_OFFSET 10
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_IWG_CNT_MASK 0xC00
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_IFG_CNT_OFFSET 8
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_IFG_CNT_MASK 0x300
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_PKT_CNT_OFFSET 6
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_PKT_CNT_MASK 0xC0
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_PKT_SIZE_OFFSET 4
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_PKT_SIZE_MASK 0x30
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_THROTTLE_OFFSET 3
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_THROTTLE_MASK 0x8
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_THROTTLE 0x8
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_MODE_OFFSET 2
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_MODE_MASK 0x4
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_MODE 0x4
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_ENABLE_OFFSET 1
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_ENABLE_MASK 0x2
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_ENABLE 0x2
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_GO_OFFSET 0
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_GO_MASK 0x1
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_GO 0x1
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAX_BYTE_MAX_BYTE_OFFSET 0
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAX_BYTE_MAX_BYTE_MASK 0x3FFF
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAC_DG_TYPE_MAC_DG_TYPE_OFFSET 0
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAC_DG_TYPE_MAC_DG_TYPE_MASK 0xFF
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_TIMER_WAIT_TIMER_WAIT_OFFSET 0
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_TIMER_WAIT_TIMER_WAIT_MASK 0xFFF
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MTU_SIZE_MTU_SIZE_OFFSET 0
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MTU_SIZE_MTU_SIZE_MASK 0x3FFF
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAX_MTU_SIZE_MAX_MTU_SIZE_OFFSET 0
#define LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAX_MTU_SIZE_MAX_MTU_SIZE_MASK 0x3FFF
#define LINK_LAYER_TX_CONTROL_FORCE_XGMII_RF_OFFSET 1
#define LINK_LAYER_TX_CONTROL_FORCE_XGMII_RF_MASK 0x2
#define LINK_LAYER_TX_CONTROL_FORCE_XGMII_RF 0x2
#define LINK_LAYER_TX_CONTROL_FORCE_XGMII_IDLE_OFFSET 0
#define LINK_LAYER_TX_CONTROL_FORCE_XGMII_IDLE_MASK 0x1
#define LINK_LAYER_TX_CONTROL_FORCE_XGMII_IDLE 0x1
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_PAUSE_FRAME_IRQ_ROLLOVER_OFFSET 28
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_PAUSE_FRAME_IRQ_ROLLOVER_MASK 0x10000000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_PAUSE_FRAME_IRQ_ROLLOVER 0x10000000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_EOP_IRQ_ROLLOVER_OFFSET 27
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_EOP_IRQ_ROLLOVER_MASK 0x8000000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_EOP_IRQ_ROLLOVER 0x8000000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_SOP_IRQ_ROLLOVER_OFFSET 26
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_SOP_IRQ_ROLLOVER_MASK 0x4000000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_SOP_IRQ_ROLLOVER 0x4000000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_STALL_PTP_IN_IRQ_ROLLOVER_OFFSET 25
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_STALL_PTP_IN_IRQ_ROLLOVER_MASK 0x2000000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_STALL_PTP_IN_IRQ_ROLLOVER 0x2000000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_EOP_IRQ_ROLLOVER_OFFSET 24
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_EOP_IRQ_ROLLOVER_MASK 0x1000000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_EOP_IRQ_ROLLOVER 0x1000000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_SOP_IRQ_ROLLOVER_OFFSET 23
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_SOP_IRQ_ROLLOVER_MASK 0x800000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_SOP_IRQ_ROLLOVER 0x800000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_OFFSET 22
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_MASK 0x400000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER 0x400000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_OFFSET 21
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_MASK 0x200000
#define LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_ROLLOVER_IRQ_ROLLOVER 0x200000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 20
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x100000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_NFIFO_DCOUNT_IRQ_ROLLOVER 0x100000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 19
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x80000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PFIFO_DCOUNT_IRQ_ROLLOVER 0x80000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 18
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x40000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x40000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 17
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x20000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_FIFO_FULL_ERR_IRQ_ROLLOVER 0x20000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_ERR_IRQ_ROLLOVER_OFFSET 16
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_ERR_IRQ_ROLLOVER_MASK 0x10000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_ERR_IRQ_ROLLOVER 0x10000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 15
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x8000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_SOP_ERR_IRQ_ROLLOVER 0x8000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 14
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_WFLUSH_ACT_IRQ_ROLLOVER 0x4000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 13
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x2000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_RD_IRQ_ROLLOVER 0x2000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 12
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x1000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_WR_IRQ_ROLLOVER 0x1000
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 11
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x800
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_RFLUSH_ACT_IRQ_ROLLOVER 0x800
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_IRQ_ROLLOVER_OFFSET 10
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_IRQ_ROLLOVER_MASK 0x400
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_IRQ_ROLLOVER 0x400
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 9
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x200
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_EOP_IRQ_ROLLOVER 0x200
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 8
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x100
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_SOP_IRQ_ROLLOVER 0x100
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 7
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x80
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x80
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 6
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x40
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x40
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_DONE_IRQ_ROLLOVER_OFFSET 5
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_DONE_IRQ_ROLLOVER_MASK 0x20
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_DONE_IRQ_ROLLOVER 0x20
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_START_IRQ_ROLLOVER_OFFSET 4
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_START_IRQ_ROLLOVER_MASK 0x10
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_START_IRQ_ROLLOVER 0x10
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 3
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x8
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x8
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 2
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x4
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x4
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_DONE_IRQ_ROLLOVER_OFFSET 1
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_DONE_IRQ_ROLLOVER_MASK 0x2
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_DONE_IRQ_ROLLOVER 0x2
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_START_IRQ_ROLLOVER_OFFSET 0
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_START_IRQ_ROLLOVER_MASK 0x1
#define LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_START_IRQ_ROLLOVER 0x1
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_PAUSE_FRAME_IRQ_ROLLOVER_OFFSET 28
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_PAUSE_FRAME_IRQ_ROLLOVER_MASK 0x10000000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_PAUSE_FRAME_IRQ_ROLLOVER 0x10000000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_EOP_IRQ_ROLLOVER_OFFSET 27
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_EOP_IRQ_ROLLOVER_MASK 0x8000000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_EOP_IRQ_ROLLOVER 0x8000000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_SOP_IRQ_ROLLOVER_OFFSET 26
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_SOP_IRQ_ROLLOVER_MASK 0x4000000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_SOP_IRQ_ROLLOVER 0x4000000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_STALL_PTP_IN_IRQ_ROLLOVER_OFFSET 25
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_STALL_PTP_IN_IRQ_ROLLOVER_MASK 0x2000000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_STALL_PTP_IN_IRQ_ROLLOVER 0x2000000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_EOP_IRQ_ROLLOVER_OFFSET 24
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_EOP_IRQ_ROLLOVER_MASK 0x1000000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_EOP_IRQ_ROLLOVER 0x1000000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_SOP_IRQ_ROLLOVER_OFFSET 23
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_SOP_IRQ_ROLLOVER_MASK 0x800000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_SOP_IRQ_ROLLOVER 0x800000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_OFFSET 22
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_MASK 0x400000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER 0x400000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_OFFSET 21
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_MASK 0x200000
#define LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_ROLLOVER_IRQ_ROLLOVER 0x200000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 20
#define LINK_LAYER_TX_IRQ0_PENDING_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x100000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_NFIFO_DCOUNT_IRQ_ROLLOVER 0x100000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 19
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x80000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PFIFO_DCOUNT_IRQ_ROLLOVER 0x80000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 18
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x40000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x40000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 17
#define LINK_LAYER_TX_IRQ0_PENDING_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x20000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_FIFO_FULL_ERR_IRQ_ROLLOVER 0x20000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_ERR_IRQ_ROLLOVER_OFFSET 16
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_ERR_IRQ_ROLLOVER_MASK 0x10000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_ERR_IRQ_ROLLOVER 0x10000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 15
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x8000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_SOP_ERR_IRQ_ROLLOVER 0x8000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 14
#define LINK_LAYER_TX_IRQ0_PENDING_RS_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_WFLUSH_ACT_IRQ_ROLLOVER 0x4000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 13
#define LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x2000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_RD_IRQ_ROLLOVER 0x2000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 12
#define LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x1000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_WR_IRQ_ROLLOVER 0x1000
#define LINK_LAYER_TX_IRQ0_PENDING_RS_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 11
#define LINK_LAYER_TX_IRQ0_PENDING_RS_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x800
#define LINK_LAYER_TX_IRQ0_PENDING_RS_RFLUSH_ACT_IRQ_ROLLOVER 0x800
#define LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_IRQ_ROLLOVER_OFFSET 10
#define LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_IRQ_ROLLOVER_MASK 0x400
#define LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_IRQ_ROLLOVER 0x400
#define LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 9
#define LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x200
#define LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_EOP_IRQ_ROLLOVER 0x200
#define LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 8
#define LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x100
#define LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_SOP_IRQ_ROLLOVER 0x100
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 7
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x80
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x80
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 6
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x40
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x40
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_DONE_IRQ_ROLLOVER_OFFSET 5
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_DONE_IRQ_ROLLOVER_MASK 0x20
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_DONE_IRQ_ROLLOVER 0x20
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_START_IRQ_ROLLOVER_OFFSET 4
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_START_IRQ_ROLLOVER_MASK 0x10
#define LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_START_IRQ_ROLLOVER 0x10
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 3
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x8
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x8
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 2
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x4
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x4
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_DONE_IRQ_ROLLOVER_OFFSET 1
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_DONE_IRQ_ROLLOVER_MASK 0x2
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_DONE_IRQ_ROLLOVER 0x2
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_START_IRQ_ROLLOVER_OFFSET 0
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_START_IRQ_ROLLOVER_MASK 0x1
#define LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_START_IRQ_ROLLOVER 0x1
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_PAUSE_FRAME_IRQ_ROLLOVER_OFFSET 28
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_PAUSE_FRAME_IRQ_ROLLOVER_MASK 0x10000000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_PAUSE_FRAME_IRQ_ROLLOVER 0x10000000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_EOP_IRQ_ROLLOVER_OFFSET 27
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_EOP_IRQ_ROLLOVER_MASK 0x8000000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_EOP_IRQ_ROLLOVER 0x8000000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_SOP_IRQ_ROLLOVER_OFFSET 26
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_SOP_IRQ_ROLLOVER_MASK 0x4000000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_SOP_IRQ_ROLLOVER 0x4000000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_STALL_PTP_IN_IRQ_ROLLOVER_OFFSET 25
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_STALL_PTP_IN_IRQ_ROLLOVER_MASK 0x2000000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_STALL_PTP_IN_IRQ_ROLLOVER 0x2000000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_EOP_IRQ_ROLLOVER_OFFSET 24
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_EOP_IRQ_ROLLOVER_MASK 0x1000000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_EOP_IRQ_ROLLOVER 0x1000000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_SOP_IRQ_ROLLOVER_OFFSET 23
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_SOP_IRQ_ROLLOVER_MASK 0x800000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_SOP_IRQ_ROLLOVER 0x800000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_OFFSET 22
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_MASK 0x400000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER 0x400000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_OFFSET 21
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_MASK 0x200000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_ROLLOVER_IRQ_ROLLOVER 0x200000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 20
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x100000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_NFIFO_DCOUNT_IRQ_ROLLOVER 0x100000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 19
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x80000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PFIFO_DCOUNT_IRQ_ROLLOVER 0x80000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 18
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x40000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x40000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 17
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x20000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_FIFO_FULL_ERR_IRQ_ROLLOVER 0x20000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_ERR_IRQ_ROLLOVER_OFFSET 16
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_ERR_IRQ_ROLLOVER_MASK 0x10000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_ERR_IRQ_ROLLOVER 0x10000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 15
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x8000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_SOP_ERR_IRQ_ROLLOVER 0x8000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 14
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_WFLUSH_ACT_IRQ_ROLLOVER 0x4000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 13
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x2000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_RD_IRQ_ROLLOVER 0x2000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 12
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x1000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_WR_IRQ_ROLLOVER 0x1000
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 11
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x800
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_RFLUSH_ACT_IRQ_ROLLOVER 0x800
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_IRQ_ROLLOVER_OFFSET 10
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_IRQ_ROLLOVER_MASK 0x400
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_IRQ_ROLLOVER 0x400
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 9
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x200
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_EOP_IRQ_ROLLOVER 0x200
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 8
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x100
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_SOP_IRQ_ROLLOVER 0x100
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 7
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x80
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x80
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 6
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x40
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x40
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_DONE_IRQ_ROLLOVER_OFFSET 5
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_DONE_IRQ_ROLLOVER_MASK 0x20
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_DONE_IRQ_ROLLOVER 0x20
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_START_IRQ_ROLLOVER_OFFSET 4
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_START_IRQ_ROLLOVER_MASK 0x10
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_START_IRQ_ROLLOVER 0x10
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 3
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x8
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x8
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 2
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x4
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x4
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_DONE_IRQ_ROLLOVER_OFFSET 1
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_DONE_IRQ_ROLLOVER_MASK 0x2
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_DONE_IRQ_ROLLOVER 0x2
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_START_IRQ_ROLLOVER_OFFSET 0
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_START_IRQ_ROLLOVER_MASK 0x1
#define LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_START_IRQ_ROLLOVER 0x1
#define LINK_LAYER_TX_IRQ0_RAW_MAC_PAUSE_FRAME_IRQ_ROLLOVER_OFFSET 28
#define LINK_LAYER_TX_IRQ0_RAW_MAC_PAUSE_FRAME_IRQ_ROLLOVER_MASK 0x10000000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_PAUSE_FRAME_IRQ_ROLLOVER 0x10000000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_EOP_IRQ_ROLLOVER_OFFSET 27
#define LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_EOP_IRQ_ROLLOVER_MASK 0x8000000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_EOP_IRQ_ROLLOVER 0x8000000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_SOP_IRQ_ROLLOVER_OFFSET 26
#define LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_SOP_IRQ_ROLLOVER_MASK 0x4000000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_SOP_IRQ_ROLLOVER 0x4000000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_STALL_PTP_IN_IRQ_ROLLOVER_OFFSET 25
#define LINK_LAYER_TX_IRQ0_RAW_MAC_STALL_PTP_IN_IRQ_ROLLOVER_MASK 0x2000000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_STALL_PTP_IN_IRQ_ROLLOVER 0x2000000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_IN_EOP_IRQ_ROLLOVER_OFFSET 24
#define LINK_LAYER_TX_IRQ0_RAW_MAC_IN_EOP_IRQ_ROLLOVER_MASK 0x1000000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_IN_EOP_IRQ_ROLLOVER 0x1000000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_IN_SOP_IRQ_ROLLOVER_OFFSET 23
#define LINK_LAYER_TX_IRQ0_RAW_MAC_IN_SOP_IRQ_ROLLOVER_MASK 0x800000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_IN_SOP_IRQ_ROLLOVER 0x800000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_OFFSET 22
#define LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_MASK 0x400000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER 0x400000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_OFFSET 21
#define LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_MASK 0x200000
#define LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_ROLLOVER_IRQ_ROLLOVER 0x200000
#define LINK_LAYER_TX_IRQ0_RAW_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 20
#define LINK_LAYER_TX_IRQ0_RAW_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x100000
#define LINK_LAYER_TX_IRQ0_RAW_RS_NFIFO_DCOUNT_IRQ_ROLLOVER 0x100000
#define LINK_LAYER_TX_IRQ0_RAW_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 19
#define LINK_LAYER_TX_IRQ0_RAW_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x80000
#define LINK_LAYER_TX_IRQ0_RAW_RS_PFIFO_DCOUNT_IRQ_ROLLOVER 0x80000
#define LINK_LAYER_TX_IRQ0_RAW_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 18
#define LINK_LAYER_TX_IRQ0_RAW_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x40000
#define LINK_LAYER_TX_IRQ0_RAW_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x40000
#define LINK_LAYER_TX_IRQ0_RAW_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 17
#define LINK_LAYER_TX_IRQ0_RAW_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x20000
#define LINK_LAYER_TX_IRQ0_RAW_RS_FIFO_FULL_ERR_IRQ_ROLLOVER 0x20000
#define LINK_LAYER_TX_IRQ0_RAW_RS_PKT_ERR_IRQ_ROLLOVER_OFFSET 16
#define LINK_LAYER_TX_IRQ0_RAW_RS_PKT_ERR_IRQ_ROLLOVER_MASK 0x10000
#define LINK_LAYER_TX_IRQ0_RAW_RS_PKT_ERR_IRQ_ROLLOVER 0x10000
#define LINK_LAYER_TX_IRQ0_RAW_RS_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 15
#define LINK_LAYER_TX_IRQ0_RAW_RS_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x8000
#define LINK_LAYER_TX_IRQ0_RAW_RS_PKT_SOP_ERR_IRQ_ROLLOVER 0x8000
#define LINK_LAYER_TX_IRQ0_RAW_RS_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 14
#define LINK_LAYER_TX_IRQ0_RAW_RS_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4000
#define LINK_LAYER_TX_IRQ0_RAW_RS_WFLUSH_ACT_IRQ_ROLLOVER 0x4000
#define LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 13
#define LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x2000
#define LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_RD_IRQ_ROLLOVER 0x2000
#define LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 12
#define LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x1000
#define LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_WR_IRQ_ROLLOVER 0x1000
#define LINK_LAYER_TX_IRQ0_RAW_RS_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 11
#define LINK_LAYER_TX_IRQ0_RAW_RS_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x800
#define LINK_LAYER_TX_IRQ0_RAW_RS_RFLUSH_ACT_IRQ_ROLLOVER 0x800
#define LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_IRQ_ROLLOVER_OFFSET 10
#define LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_IRQ_ROLLOVER_MASK 0x400
#define LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_IRQ_ROLLOVER 0x400
#define LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 9
#define LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x200
#define LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_EOP_IRQ_ROLLOVER 0x200
#define LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 8
#define LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x100
#define LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_SOP_IRQ_ROLLOVER 0x100
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 7
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x80
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x80
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 6
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x40
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x40
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_DONE_IRQ_ROLLOVER_OFFSET 5
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_DONE_IRQ_ROLLOVER_MASK 0x20
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_DONE_IRQ_ROLLOVER 0x20
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_START_IRQ_ROLLOVER_OFFSET 4
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_START_IRQ_ROLLOVER_MASK 0x10
#define LINK_LAYER_TX_IRQ0_RAW_RS_GMII_START_IRQ_ROLLOVER 0x10
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 3
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x8
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x8
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 2
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x4
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x4
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_DONE_IRQ_ROLLOVER_OFFSET 1
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_DONE_IRQ_ROLLOVER_MASK 0x2
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_DONE_IRQ_ROLLOVER 0x2
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_START_IRQ_ROLLOVER_OFFSET 0
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_START_IRQ_ROLLOVER_MASK 0x1
#define LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_START_IRQ_ROLLOVER 0x1
#endif /* _LINK_LAYER_TX_REGS_H_ */

/* end */
