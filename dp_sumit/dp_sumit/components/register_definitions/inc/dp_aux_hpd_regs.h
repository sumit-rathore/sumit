/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Ardeshir Saghafi*/
/* generated by      : Ardeshir.Saghafi*/
/* generated from    : C:\cygwin64\home\Ardeshir.Saghafi\BLACKBIRD_20190205T080000\m_aux\regs\ids\dp_aux_hpd_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/*block : dp_aux_hpd */

#ifndef _DP_AUX_HPD_REGS_H_
#define _DP_AUX_HPD_REGS_H_

#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x4 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x4 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x4 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x4 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t aux_sense_p_in_debounce : 1;           /* 31 SW=ro HW=wo 0x1 */
            uint32_t aux_sense_n_in_debounce : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t aux_sense_p_in : 1;           /* 29 SW=ro HW=wo 0x1 */
            uint32_t aux_sense_n_in : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t sent_defer_cnt : 4;           /* 27:24 SW=ro HW=wo 0x0 */
            
            uint32_t resv17 : 7;
            uint32_t response_timeout_cnt : 17;           /* 16:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t response_timeout_cnt : 17;           /* 0:16 SW=ro HW=wo 0x0 */
            
            uint32_t resv17 : 7;
            uint32_t sent_defer_cnt : 4;           /* 24:27 SW=ro HW=wo 0x0 */
            uint32_t aux_sense_n_in : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t aux_sense_p_in : 1;           /* 29 SW=ro HW=wo 0x1 */
            uint32_t aux_sense_n_in_debounce : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t aux_sense_p_in_debounce : 1;           /* 31 SW=ro HW=wo 0x1 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_aux_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t reply_timer : 13;           /* 31:19 SW=rw HW=ro 0x1900 */
            
            uint32_t resv16 : 3;
            uint32_t response_timer : 13;           /* 15:3 SW=rw HW=ro 0x12C0 */
            uint32_t resv0 : 3;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 3;
            uint32_t response_timer : 13;           /* 3:15 SW=rw HW=ro 0x12C0 */
            
            uint32_t resv16 : 3;
            uint32_t reply_timer : 13;           /* 19:31 SW=rw HW=ro 0x1900 */
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_aux_ctrl1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t pre_charge_length : 5;           /* 20:16 SW=rw HW=ro 0x1F */
            uint32_t resv0 : 16;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 16;
            uint32_t pre_charge_length : 5;           /* 16:20 SW=rw HW=ro 0x1F */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_aux_ctrl2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t dp_aux_hpd_clk_freq : 8;           /* 7:0 SW=rw HW=ro 0x4B */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_aux_hpd_clk_freq : 8;           /* 0:7 SW=rw HW=ro 0x4B */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_aux_ctrl3;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t rx_flag : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t rx_data : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_data : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t rx_flag : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_aux_rx;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t go_bit : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t tx_flag : 1;           /* 8 SW=wo HW=ro 0x0 */
            uint32_t tx_data : 8;           /* 7:0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_data : 8;           /* 0:7 SW=wo HW=ro 0x0 */
            uint32_t tx_flag : 1;           /* 8 SW=wo HW=ro 0x0 */
            uint32_t go_bit : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_aux_tx;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t hpd_line_out : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t hpd_line_in_debounce : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t hpd_line_in : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hpd_line_in : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t hpd_line_in_debounce : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t hpd_line_out : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_hpd_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t hpd_low : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t hpd_high : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t hpd_replug : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t hpd_irq : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hpd_irq : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t hpd_replug : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t hpd_high : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t hpd_low : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_hpd_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t hpd_irq_to_irq_min_gap : 6;           /* 13:8 SW=rw HW=ro 0x20 */
            
            uint32_t resv4 : 4;
            uint32_t hpd_irq_pulse_width : 4;           /* 3:0 SW=rw HW=ro 0xC */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hpd_irq_pulse_width : 4;           /* 0:3 SW=rw HW=ro 0xC */
            
            uint32_t resv4 : 4;
            uint32_t hpd_irq_to_irq_min_gap : 6;           /* 8:13 SW=rw HW=ro 0x20 */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_hpd_timer1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t hpd_replug_pulse_width : 8;           /* 7:0 SW=rw HW=ro 0x9C */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hpd_replug_pulse_width : 8;           /* 0:7 SW=rw HW=ro 0x9C */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_hpd_timer2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv22 : 10;
            uint32_t hpd_irq_rising_detect : 6;           /* 21:16 SW=rw HW=ro 0x1F */
            uint32_t hpd_irq_falling_detect : 4;           /* 15:12 SW=rw HW=ro 0x4 */
            
            uint32_t resv11 : 1;
            uint32_t hpd_aux_debounce_period : 11;           /* 10:0 SW=rw HW=ro 0x61A */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hpd_aux_debounce_period : 11;           /* 0:10 SW=rw HW=ro 0x61A */
            
            uint32_t resv11 : 1;
            uint32_t hpd_irq_falling_detect : 4;           /* 12:15 SW=rw HW=ro 0x4 */
            uint32_t hpd_irq_rising_detect : 6;           /* 16:21 SW=rw HW=ro 0x1F */
            uint32_t resv22 : 10;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_hpd_timer3;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_hpd_rise_det;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_hpd_fall_det;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_dp_source_connect_det;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_dp_source_disconnect_det;

/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t dp_source_connect_det : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=rw HW=na 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t reply_timeout : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t reply_timeout : 1;           /* 3 SW=rw HW=na 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t dp_source_connect_det : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t dp_source_connect_det : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t reply_timeout : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t reply_timeout : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_connect_det : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t dp_source_connect_det : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=ro HW=na 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t reply_timeout : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t reply_timeout : 1;           /* 3 SW=ro HW=na 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t dp_source_connect_det : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t dp_source_connect_det : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t reply_timeout : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t reply_timeout : 1;           /* 3 SW=ro HW=wo 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t dp_source_connect_det : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} dp_aux_hpd_irq_raw;

typedef struct {
    dp_aux_hpd_irq_enable  enable;
    dp_aux_hpd_irq_pending  pending;
    dp_aux_hpd_irq_pending_irq  pending_irq;
    dp_aux_hpd_irq_raw  raw;
    
    
    
} dp_aux_hpd_irq;


typedef struct {
    dp_aux_hpd_version  version;
    dp_aux_hpd_aux_status  aux_status;
    dp_aux_hpd_aux_ctrl1  aux_ctrl1;
    dp_aux_hpd_aux_ctrl2  aux_ctrl2;
    dp_aux_hpd_aux_ctrl3  aux_ctrl3;
    dp_aux_hpd_aux_rx  aux_rx;
    dp_aux_hpd_aux_tx  aux_tx;
    dp_aux_hpd_hpd_status  hpd_status;
    dp_aux_hpd_hpd_ctrl  hpd_ctrl;
    dp_aux_hpd_hpd_timer1  hpd_timer1;
    dp_aux_hpd_hpd_timer2  hpd_timer2;
    dp_aux_hpd_hpd_timer3  hpd_timer3;
    dp_aux_hpd_hpd_rise_det  hpd_rise_det;
    dp_aux_hpd_hpd_fall_det  hpd_fall_det;
    dp_aux_hpd_dp_source_connect_det  dp_source_connect_det;
    dp_aux_hpd_dp_source_disconnect_det  dp_source_disconnect_det;
    
    union {
        dp_aux_hpd_irq s;
        uint8_t filler[0x10];
    } irq;
    
    
    uint8_t filler11[0xB0];
    
    
} dp_aux_hpd_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define dp_aux_hpd_version_READMASK 0xFFFFFF
#define dp_aux_hpd_version_WRITEMASK 0x0
#define dp_aux_hpd_version_VOLATILEMASK 0x0
#define dp_aux_hpd_version_RESETMASK 0xFFFFFF
#define dp_aux_hpd_version_DEFAULT 0x00040400

#define dp_aux_hpd_aux_status_READMASK 0xFF01FFFF
#define dp_aux_hpd_aux_status_WRITEMASK 0x0
#define dp_aux_hpd_aux_status_VOLATILEMASK 0xFF01FFFF
#define dp_aux_hpd_aux_status_RESETMASK 0xFF01FFFF
#define dp_aux_hpd_aux_status_DEFAULT 0xA0000000

#define dp_aux_hpd_aux_ctrl1_READMASK 0xFFF8FFF8
#define dp_aux_hpd_aux_ctrl1_WRITEMASK 0xFFF8FFF8
#define dp_aux_hpd_aux_ctrl1_VOLATILEMASK 0x0
#define dp_aux_hpd_aux_ctrl1_RESETMASK 0xFFF8FFF8
#define dp_aux_hpd_aux_ctrl1_DEFAULT 0xC8009600

#define dp_aux_hpd_aux_ctrl2_READMASK 0x1F0000
#define dp_aux_hpd_aux_ctrl2_WRITEMASK 0x1F0000
#define dp_aux_hpd_aux_ctrl2_VOLATILEMASK 0x0
#define dp_aux_hpd_aux_ctrl2_RESETMASK 0x1F0000
#define dp_aux_hpd_aux_ctrl2_DEFAULT 0x001F0000

#define dp_aux_hpd_aux_ctrl3_READMASK 0xFF
#define dp_aux_hpd_aux_ctrl3_WRITEMASK 0xFF
#define dp_aux_hpd_aux_ctrl3_VOLATILEMASK 0x0
#define dp_aux_hpd_aux_ctrl3_RESETMASK 0xFF
#define dp_aux_hpd_aux_ctrl3_DEFAULT 0x0000004B

#define dp_aux_hpd_aux_rx_READMASK 0x1FF
#define dp_aux_hpd_aux_rx_WRITEMASK 0x0
#define dp_aux_hpd_aux_rx_VOLATILEMASK 0x1FF
#define dp_aux_hpd_aux_rx_RESETMASK 0x1FF
#define dp_aux_hpd_aux_rx_DEFAULT 0x00000000

#define dp_aux_hpd_aux_tx_READMASK 0x200
#define dp_aux_hpd_aux_tx_WRITEMASK 0x3FF
#define dp_aux_hpd_aux_tx_VOLATILEMASK 0x0
#define dp_aux_hpd_aux_tx_RESETMASK 0x3FF
#define dp_aux_hpd_aux_tx_DEFAULT 0x00000000

#define dp_aux_hpd_hpd_status_READMASK 0x7
#define dp_aux_hpd_hpd_status_WRITEMASK 0x0
#define dp_aux_hpd_hpd_status_VOLATILEMASK 0x7
#define dp_aux_hpd_hpd_status_RESETMASK 0x7
#define dp_aux_hpd_hpd_status_DEFAULT 0x00000000

#define dp_aux_hpd_hpd_ctrl_READMASK 0xF
#define dp_aux_hpd_hpd_ctrl_WRITEMASK 0xF
#define dp_aux_hpd_hpd_ctrl_VOLATILEMASK 0x0
#define dp_aux_hpd_hpd_ctrl_RESETMASK 0xF
#define dp_aux_hpd_hpd_ctrl_DEFAULT 0x00000000

#define dp_aux_hpd_hpd_timer1_READMASK 0x3F0F
#define dp_aux_hpd_hpd_timer1_WRITEMASK 0x3F0F
#define dp_aux_hpd_hpd_timer1_VOLATILEMASK 0x0
#define dp_aux_hpd_hpd_timer1_RESETMASK 0x3F0F
#define dp_aux_hpd_hpd_timer1_DEFAULT 0x0000200C

#define dp_aux_hpd_hpd_timer2_READMASK 0xFF
#define dp_aux_hpd_hpd_timer2_WRITEMASK 0xFF
#define dp_aux_hpd_hpd_timer2_VOLATILEMASK 0x0
#define dp_aux_hpd_hpd_timer2_RESETMASK 0xFF
#define dp_aux_hpd_hpd_timer2_DEFAULT 0x0000009C

#define dp_aux_hpd_hpd_timer3_READMASK 0x3FF7FF
#define dp_aux_hpd_hpd_timer3_WRITEMASK 0x3FF7FF
#define dp_aux_hpd_hpd_timer3_VOLATILEMASK 0x0
#define dp_aux_hpd_hpd_timer3_RESETMASK 0x3FF7FF
#define dp_aux_hpd_hpd_timer3_DEFAULT 0x001F461A

#define dp_aux_hpd_hpd_rise_det_READMASK 0xFF11
#define dp_aux_hpd_hpd_rise_det_WRITEMASK 0x11
#define dp_aux_hpd_hpd_rise_det_VOLATILEMASK 0xFF00
#define dp_aux_hpd_hpd_rise_det_RESETMASK 0xFF11
#define dp_aux_hpd_hpd_rise_det_DEFAULT 0x00000000

#define dp_aux_hpd_hpd_fall_det_READMASK 0xFF11
#define dp_aux_hpd_hpd_fall_det_WRITEMASK 0x11
#define dp_aux_hpd_hpd_fall_det_VOLATILEMASK 0xFF00
#define dp_aux_hpd_hpd_fall_det_RESETMASK 0xFF11
#define dp_aux_hpd_hpd_fall_det_DEFAULT 0x00000000

#define dp_aux_hpd_dp_source_connect_det_READMASK 0xFF11
#define dp_aux_hpd_dp_source_connect_det_WRITEMASK 0x11
#define dp_aux_hpd_dp_source_connect_det_VOLATILEMASK 0xFF00
#define dp_aux_hpd_dp_source_connect_det_RESETMASK 0xFF11
#define dp_aux_hpd_dp_source_connect_det_DEFAULT 0x00000000

#define dp_aux_hpd_dp_source_disconnect_det_READMASK 0xFF11
#define dp_aux_hpd_dp_source_disconnect_det_WRITEMASK 0x11
#define dp_aux_hpd_dp_source_disconnect_det_VOLATILEMASK 0xFF00
#define dp_aux_hpd_dp_source_disconnect_det_RESETMASK 0xFF11
#define dp_aux_hpd_dp_source_disconnect_det_DEFAULT 0x00000000

#define dp_aux_hpd_irq_enable_READMASK 0x3FF8F
#define dp_aux_hpd_irq_enable_WRITEMASK 0x3FF8F
#define dp_aux_hpd_irq_enable_VOLATILEMASK 0x0
#define dp_aux_hpd_irq_enable_RESETMASK 0x3FF8F
#define dp_aux_hpd_irq_enable_DEFAULT 0x00000000

#define dp_aux_hpd_irq_pending_READMASK 0x3FF8F
#define dp_aux_hpd_irq_pending_WRITEMASK 0x3FF8F
#define dp_aux_hpd_irq_pending_VOLATILEMASK 0x3FF8F
#define dp_aux_hpd_irq_pending_RESETMASK 0x3FF8F
#define dp_aux_hpd_irq_pending_DEFAULT 0x00000000

#define dp_aux_hpd_irq_pending_irq_READMASK 0x3FF8F
#define dp_aux_hpd_irq_pending_irq_WRITEMASK 0x0
#define dp_aux_hpd_irq_pending_irq_VOLATILEMASK 0x0
#define dp_aux_hpd_irq_pending_irq_RESETMASK 0x3FF8F
#define dp_aux_hpd_irq_pending_irq_DEFAULT 0x00000000

#define dp_aux_hpd_irq_raw_READMASK 0x3FF8F
#define dp_aux_hpd_irq_raw_WRITEMASK 0x0
#define dp_aux_hpd_irq_raw_VOLATILEMASK 0x3FF8F
#define dp_aux_hpd_irq_raw_RESETMASK 0x3FF8F
#define dp_aux_hpd_irq_raw_DEFAULT 0x00000000

#define dp_aux_hpd_s_SIZE 0x100
#define dp_aux_hpd_version_SIZE 0x4
#define dp_aux_hpd_aux_status_SIZE 0x4
#define dp_aux_hpd_aux_ctrl1_SIZE 0x4
#define dp_aux_hpd_aux_ctrl2_SIZE 0x4
#define dp_aux_hpd_aux_ctrl3_SIZE 0x4
#define dp_aux_hpd_aux_rx_SIZE 0x4
#define dp_aux_hpd_aux_tx_SIZE 0x4
#define dp_aux_hpd_hpd_status_SIZE 0x4
#define dp_aux_hpd_hpd_ctrl_SIZE 0x4
#define dp_aux_hpd_hpd_timer1_SIZE 0x4
#define dp_aux_hpd_hpd_timer2_SIZE 0x4
#define dp_aux_hpd_hpd_timer3_SIZE 0x4
#define dp_aux_hpd_hpd_rise_det_SIZE 0x4
#define dp_aux_hpd_hpd_fall_det_SIZE 0x4
#define dp_aux_hpd_dp_source_connect_det_SIZE 0x4
#define dp_aux_hpd_dp_source_disconnect_det_SIZE 0x4
#define dp_aux_hpd_irq_SIZE 0x10
#define dp_aux_hpd_irq_enable_SIZE 0x4
#define dp_aux_hpd_irq_pending_SIZE 0x4
#define dp_aux_hpd_irq_pending_irq_SIZE 0x4
#define dp_aux_hpd_irq_raw_SIZE 0x4

#define dp_aux_hpd_s_OFFSET 0x0
#define dp_aux_hpd_version_OFFSET 0x0
#define dp_aux_hpd_aux_status_OFFSET 0x4
#define dp_aux_hpd_aux_ctrl1_OFFSET 0x8
#define dp_aux_hpd_aux_ctrl2_OFFSET 0xC
#define dp_aux_hpd_aux_ctrl3_OFFSET 0x10
#define dp_aux_hpd_aux_rx_OFFSET 0x14
#define dp_aux_hpd_aux_tx_OFFSET 0x18
#define dp_aux_hpd_hpd_status_OFFSET 0x1C
#define dp_aux_hpd_hpd_ctrl_OFFSET 0x20
#define dp_aux_hpd_hpd_timer1_OFFSET 0x24
#define dp_aux_hpd_hpd_timer2_OFFSET 0x28
#define dp_aux_hpd_hpd_timer3_OFFSET 0x2C
#define dp_aux_hpd_hpd_rise_det_OFFSET 0x30
#define dp_aux_hpd_hpd_fall_det_OFFSET 0x34
#define dp_aux_hpd_dp_source_connect_det_OFFSET 0x38
#define dp_aux_hpd_dp_source_disconnect_det_OFFSET 0x3C
#define dp_aux_hpd_irq_OFFSET 0x40
#define dp_aux_hpd_irq_enable_OFFSET 0x0
#define dp_aux_hpd_irq_pending_OFFSET 0x4
#define dp_aux_hpd_irq_pending_irq_OFFSET 0x8
#define dp_aux_hpd_irq_raw_OFFSET 0xC

#define dp_aux_hpd_s_ADDRESS 0x000
#define dp_aux_hpd_version_ADDRESS 0x000
#define dp_aux_hpd_aux_status_ADDRESS 0x004
#define dp_aux_hpd_aux_ctrl1_ADDRESS 0x008
#define dp_aux_hpd_aux_ctrl2_ADDRESS 0x00C
#define dp_aux_hpd_aux_ctrl3_ADDRESS 0x010
#define dp_aux_hpd_aux_rx_ADDRESS 0x014
#define dp_aux_hpd_aux_tx_ADDRESS 0x018
#define dp_aux_hpd_hpd_status_ADDRESS 0x01C
#define dp_aux_hpd_hpd_ctrl_ADDRESS 0x020
#define dp_aux_hpd_hpd_timer1_ADDRESS 0x024
#define dp_aux_hpd_hpd_timer2_ADDRESS 0x028
#define dp_aux_hpd_hpd_timer3_ADDRESS 0x02C
#define dp_aux_hpd_hpd_rise_det_ADDRESS 0x030
#define dp_aux_hpd_hpd_fall_det_ADDRESS 0x034
#define dp_aux_hpd_dp_source_connect_det_ADDRESS 0x038
#define dp_aux_hpd_dp_source_disconnect_det_ADDRESS 0x03C
#define dp_aux_hpd_irq_ADDRESS 0x040
#define dp_aux_hpd_irq_enable_ADDRESS 0x040
#define dp_aux_hpd_irq_pending_ADDRESS 0x044
#define dp_aux_hpd_irq_pending_irq_ADDRESS 0x048
#define dp_aux_hpd_irq_raw_ADDRESS 0x04C
#define DP_AUX_HPD_VERSION_MAJOR_OFFSET 16
#define DP_AUX_HPD_VERSION_MAJOR_MASK 0xFF0000
#define DP_AUX_HPD_VERSION_MINOR_OFFSET 8
#define DP_AUX_HPD_VERSION_MINOR_MASK 0xFF00
#define DP_AUX_HPD_VERSION_PATCH_OFFSET 0
#define DP_AUX_HPD_VERSION_PATCH_MASK 0xFF
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_DEBOUNCE_OFFSET 31
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_DEBOUNCE_MASK 0x80000000
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_DEBOUNCE 0x80000000
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_DEBOUNCE_OFFSET 30
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_DEBOUNCE_MASK 0x40000000
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_DEBOUNCE 0x40000000
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_OFFSET 29
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_MASK 0x20000000
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN 0x20000000
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_OFFSET 28
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_MASK 0x10000000
#define DP_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN 0x10000000
#define DP_AUX_HPD_AUX_STATUS_SENT_DEFER_CNT_OFFSET 24
#define DP_AUX_HPD_AUX_STATUS_SENT_DEFER_CNT_MASK 0xF000000
#define DP_AUX_HPD_AUX_STATUS_RESPONSE_TIMEOUT_CNT_OFFSET 0
#define DP_AUX_HPD_AUX_STATUS_RESPONSE_TIMEOUT_CNT_MASK 0x1FFFF
#define DP_AUX_HPD_AUX_CTRL1_REPLY_TIMER_OFFSET 19
#define DP_AUX_HPD_AUX_CTRL1_REPLY_TIMER_MASK 0xFFF80000
#define DP_AUX_HPD_AUX_CTRL1_RESPONSE_TIMER_OFFSET 3
#define DP_AUX_HPD_AUX_CTRL1_RESPONSE_TIMER_MASK 0xFFF8
#define DP_AUX_HPD_AUX_CTRL2_PRE_CHARGE_LENGTH_OFFSET 16
#define DP_AUX_HPD_AUX_CTRL2_PRE_CHARGE_LENGTH_MASK 0x1F0000
#define DP_AUX_HPD_AUX_CTRL3_DP_AUX_HPD_CLK_FREQ_OFFSET 0
#define DP_AUX_HPD_AUX_CTRL3_DP_AUX_HPD_CLK_FREQ_MASK 0xFF
#define DP_AUX_HPD_AUX_RX_RX_FLAG_OFFSET 8
#define DP_AUX_HPD_AUX_RX_RX_FLAG_MASK 0x100
#define DP_AUX_HPD_AUX_RX_RX_FLAG 0x100
#define DP_AUX_HPD_AUX_RX_RX_DATA_OFFSET 0
#define DP_AUX_HPD_AUX_RX_RX_DATA_MASK 0xFF
#define DP_AUX_HPD_AUX_TX_GO_BIT_OFFSET 9
#define DP_AUX_HPD_AUX_TX_GO_BIT_MASK 0x200
#define DP_AUX_HPD_AUX_TX_GO_BIT 0x200
#define DP_AUX_HPD_AUX_TX_TX_FLAG_OFFSET 8
#define DP_AUX_HPD_AUX_TX_TX_FLAG_MASK 0x100
#define DP_AUX_HPD_AUX_TX_TX_FLAG 0x100
#define DP_AUX_HPD_AUX_TX_TX_DATA_OFFSET 0
#define DP_AUX_HPD_AUX_TX_TX_DATA_MASK 0xFF
#define DP_AUX_HPD_HPD_STATUS_HPD_LINE_OUT_OFFSET 2
#define DP_AUX_HPD_HPD_STATUS_HPD_LINE_OUT_MASK 0x4
#define DP_AUX_HPD_HPD_STATUS_HPD_LINE_OUT 0x4
#define DP_AUX_HPD_HPD_STATUS_HPD_LINE_IN_DEBOUNCE_OFFSET 1
#define DP_AUX_HPD_HPD_STATUS_HPD_LINE_IN_DEBOUNCE_MASK 0x2
#define DP_AUX_HPD_HPD_STATUS_HPD_LINE_IN_DEBOUNCE 0x2
#define DP_AUX_HPD_HPD_STATUS_HPD_LINE_IN_OFFSET 0
#define DP_AUX_HPD_HPD_STATUS_HPD_LINE_IN_MASK 0x1
#define DP_AUX_HPD_HPD_STATUS_HPD_LINE_IN 0x1
#define DP_AUX_HPD_HPD_CTRL_HPD_LOW_OFFSET 3
#define DP_AUX_HPD_HPD_CTRL_HPD_LOW_MASK 0x8
#define DP_AUX_HPD_HPD_CTRL_HPD_LOW 0x8
#define DP_AUX_HPD_HPD_CTRL_HPD_HIGH_OFFSET 2
#define DP_AUX_HPD_HPD_CTRL_HPD_HIGH_MASK 0x4
#define DP_AUX_HPD_HPD_CTRL_HPD_HIGH 0x4
#define DP_AUX_HPD_HPD_CTRL_HPD_REPLUG_OFFSET 1
#define DP_AUX_HPD_HPD_CTRL_HPD_REPLUG_MASK 0x2
#define DP_AUX_HPD_HPD_CTRL_HPD_REPLUG 0x2
#define DP_AUX_HPD_HPD_CTRL_HPD_IRQ_OFFSET 0
#define DP_AUX_HPD_HPD_CTRL_HPD_IRQ_MASK 0x1
#define DP_AUX_HPD_HPD_CTRL_HPD_IRQ 0x1
#define DP_AUX_HPD_HPD_TIMER1_HPD_IRQ_TO_IRQ_MIN_GAP_OFFSET 8
#define DP_AUX_HPD_HPD_TIMER1_HPD_IRQ_TO_IRQ_MIN_GAP_MASK 0x3F00
#define DP_AUX_HPD_HPD_TIMER1_HPD_IRQ_PULSE_WIDTH_OFFSET 0
#define DP_AUX_HPD_HPD_TIMER1_HPD_IRQ_PULSE_WIDTH_MASK 0xF
#define DP_AUX_HPD_HPD_TIMER2_HPD_REPLUG_PULSE_WIDTH_OFFSET 0
#define DP_AUX_HPD_HPD_TIMER2_HPD_REPLUG_PULSE_WIDTH_MASK 0xFF
#define DP_AUX_HPD_HPD_TIMER3_HPD_IRQ_RISING_DETECT_OFFSET 16
#define DP_AUX_HPD_HPD_TIMER3_HPD_IRQ_RISING_DETECT_MASK 0x3F0000
#define DP_AUX_HPD_HPD_TIMER3_HPD_IRQ_FALLING_DETECT_OFFSET 12
#define DP_AUX_HPD_HPD_TIMER3_HPD_IRQ_FALLING_DETECT_MASK 0xF000
#define DP_AUX_HPD_HPD_TIMER3_HPD_AUX_DEBOUNCE_PERIOD_OFFSET 0
#define DP_AUX_HPD_HPD_TIMER3_HPD_AUX_DEBOUNCE_PERIOD_MASK 0x7FF
#define DP_AUX_HPD_HPD_RISE_DET_CNT_OFFSET 8
#define DP_AUX_HPD_HPD_RISE_DET_CNT_MASK 0xFF00
#define DP_AUX_HPD_HPD_RISE_DET_RST_OFFSET 4
#define DP_AUX_HPD_HPD_RISE_DET_RST_MASK 0x10
#define DP_AUX_HPD_HPD_RISE_DET_RST 0x10
#define DP_AUX_HPD_HPD_RISE_DET_CTRL_OFFSET 0
#define DP_AUX_HPD_HPD_RISE_DET_CTRL_MASK 0x1
#define DP_AUX_HPD_HPD_RISE_DET_CTRL 0x1
#define DP_AUX_HPD_HPD_FALL_DET_CNT_OFFSET 8
#define DP_AUX_HPD_HPD_FALL_DET_CNT_MASK 0xFF00
#define DP_AUX_HPD_HPD_FALL_DET_RST_OFFSET 4
#define DP_AUX_HPD_HPD_FALL_DET_RST_MASK 0x10
#define DP_AUX_HPD_HPD_FALL_DET_RST 0x10
#define DP_AUX_HPD_HPD_FALL_DET_CTRL_OFFSET 0
#define DP_AUX_HPD_HPD_FALL_DET_CTRL_MASK 0x1
#define DP_AUX_HPD_HPD_FALL_DET_CTRL 0x1
#define DP_AUX_HPD_DP_SOURCE_CONNECT_DET_CNT_OFFSET 8
#define DP_AUX_HPD_DP_SOURCE_CONNECT_DET_CNT_MASK 0xFF00
#define DP_AUX_HPD_DP_SOURCE_CONNECT_DET_RST_OFFSET 4
#define DP_AUX_HPD_DP_SOURCE_CONNECT_DET_RST_MASK 0x10
#define DP_AUX_HPD_DP_SOURCE_CONNECT_DET_RST 0x10
#define DP_AUX_HPD_DP_SOURCE_CONNECT_DET_CTRL_OFFSET 0
#define DP_AUX_HPD_DP_SOURCE_CONNECT_DET_CTRL_MASK 0x1
#define DP_AUX_HPD_DP_SOURCE_CONNECT_DET_CTRL 0x1
#define DP_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CNT_OFFSET 8
#define DP_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CNT_MASK 0xFF00
#define DP_AUX_HPD_DP_SOURCE_DISCONNECT_DET_RST_OFFSET 4
#define DP_AUX_HPD_DP_SOURCE_DISCONNECT_DET_RST_MASK 0x10
#define DP_AUX_HPD_DP_SOURCE_DISCONNECT_DET_RST 0x10
#define DP_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CTRL_OFFSET 0
#define DP_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CTRL_MASK 0x1
#define DP_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CTRL 0x1
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET_OFFSET 17
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET 0x20000
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET 0x10000
#define DP_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET_OFFSET 15
#define DP_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET_MASK 0x8000
#define DP_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET 0x8000
#define DP_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET_OFFSET 14
#define DP_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET_MASK 0x4000
#define DP_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET 0x4000
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED_OFFSET 13
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED_MASK 0x2000
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED 0x2000
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_OFFSET 12
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_MASK 0x1000
#define DP_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED 0x1000
#define DP_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT_OFFSET 11
#define DP_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT_MASK 0x800
#define DP_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT 0x800
#define DP_AUX_HPD_IRQ_ENABLE_HPD_CONNECT_OFFSET 10
#define DP_AUX_HPD_IRQ_ENABLE_HPD_CONNECT_MASK 0x400
#define DP_AUX_HPD_IRQ_ENABLE_HPD_CONNECT 0x400
#define DP_AUX_HPD_IRQ_ENABLE_HPD_IRQ_OFFSET 9
#define DP_AUX_HPD_IRQ_ENABLE_HPD_IRQ_MASK 0x200
#define DP_AUX_HPD_IRQ_ENABLE_HPD_IRQ 0x200
#define DP_AUX_HPD_IRQ_ENABLE_HPD_REPLUG_OFFSET 8
#define DP_AUX_HPD_IRQ_ENABLE_HPD_REPLUG_MASK 0x100
#define DP_AUX_HPD_IRQ_ENABLE_HPD_REPLUG 0x100
#define DP_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW_OFFSET 7
#define DP_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW_MASK 0x80
#define DP_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW 0x80
#define DP_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT_OFFSET 3
#define DP_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT_MASK 0x8
#define DP_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT 0x8
#define DP_AUX_HPD_IRQ_ENABLE_DEFER_SENT_OFFSET 2
#define DP_AUX_HPD_IRQ_ENABLE_DEFER_SENT_MASK 0x4
#define DP_AUX_HPD_IRQ_ENABLE_DEFER_SENT 0x4
#define DP_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR_OFFSET 1
#define DP_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR_MASK 0x2
#define DP_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR 0x2
#define DP_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define DP_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define DP_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED 0x1
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_CONNECT_DET_OFFSET 17
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_CONNECT_DET 0x20000
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_DISCONNECT_DET 0x10000
#define DP_AUX_HPD_IRQ_PENDING_HPD_RISE_DET_OFFSET 15
#define DP_AUX_HPD_IRQ_PENDING_HPD_RISE_DET_MASK 0x8000
#define DP_AUX_HPD_IRQ_PENDING_HPD_RISE_DET 0x8000
#define DP_AUX_HPD_IRQ_PENDING_HPD_FALL_DET_OFFSET 14
#define DP_AUX_HPD_IRQ_PENDING_HPD_FALL_DET_MASK 0x4000
#define DP_AUX_HPD_IRQ_PENDING_HPD_FALL_DET 0x4000
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_POWERED_OFFSET 13
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_POWERED_MASK 0x2000
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_POWERED 0x2000
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_DETECTED_OFFSET 12
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_DETECTED_MASK 0x1000
#define DP_AUX_HPD_IRQ_PENDING_DP_SOURCE_DETECTED 0x1000
#define DP_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT_OFFSET 11
#define DP_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT_MASK 0x800
#define DP_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT 0x800
#define DP_AUX_HPD_IRQ_PENDING_HPD_CONNECT_OFFSET 10
#define DP_AUX_HPD_IRQ_PENDING_HPD_CONNECT_MASK 0x400
#define DP_AUX_HPD_IRQ_PENDING_HPD_CONNECT 0x400
#define DP_AUX_HPD_IRQ_PENDING_HPD_IRQ_OFFSET 9
#define DP_AUX_HPD_IRQ_PENDING_HPD_IRQ_MASK 0x200
#define DP_AUX_HPD_IRQ_PENDING_HPD_IRQ 0x200
#define DP_AUX_HPD_IRQ_PENDING_HPD_REPLUG_OFFSET 8
#define DP_AUX_HPD_IRQ_PENDING_HPD_REPLUG_MASK 0x100
#define DP_AUX_HPD_IRQ_PENDING_HPD_REPLUG 0x100
#define DP_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW_OFFSET 7
#define DP_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW_MASK 0x80
#define DP_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW 0x80
#define DP_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT_OFFSET 3
#define DP_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT_MASK 0x8
#define DP_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT 0x8
#define DP_AUX_HPD_IRQ_PENDING_DEFER_SENT_OFFSET 2
#define DP_AUX_HPD_IRQ_PENDING_DEFER_SENT_MASK 0x4
#define DP_AUX_HPD_IRQ_PENDING_DEFER_SENT 0x4
#define DP_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR_OFFSET 1
#define DP_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR_MASK 0x2
#define DP_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR 0x2
#define DP_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define DP_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define DP_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED 0x1
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_CONNECT_DET_OFFSET 17
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_CONNECT_DET 0x20000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DISCONNECT_DET 0x10000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_RISE_DET_OFFSET 15
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_RISE_DET_MASK 0x8000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_RISE_DET 0x8000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_FALL_DET_OFFSET 14
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_FALL_DET_MASK 0x4000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_FALL_DET 0x4000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_POWERED_OFFSET 13
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_POWERED_MASK 0x2000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_POWERED 0x2000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DETECTED_OFFSET 12
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DETECTED_MASK 0x1000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DETECTED 0x1000
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_DISCONNECT_OFFSET 11
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_DISCONNECT_MASK 0x800
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_DISCONNECT 0x800
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_CONNECT_OFFSET 10
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_CONNECT_MASK 0x400
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_CONNECT 0x400
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_IRQ_OFFSET 9
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_IRQ_MASK 0x200
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_IRQ 0x200
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_REPLUG_OFFSET 8
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_REPLUG_MASK 0x100
#define DP_AUX_HPD_IRQ_PENDING_IRQ_HPD_REPLUG 0x100
#define DP_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_OVERFLOW_OFFSET 7
#define DP_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_OVERFLOW_MASK 0x80
#define DP_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_OVERFLOW 0x80
#define DP_AUX_HPD_IRQ_PENDING_IRQ_REPLY_TIMEOUT_OFFSET 3
#define DP_AUX_HPD_IRQ_PENDING_IRQ_REPLY_TIMEOUT_MASK 0x8
#define DP_AUX_HPD_IRQ_PENDING_IRQ_REPLY_TIMEOUT 0x8
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DEFER_SENT_OFFSET 2
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DEFER_SENT_MASK 0x4
#define DP_AUX_HPD_IRQ_PENDING_IRQ_DEFER_SENT 0x4
#define DP_AUX_HPD_IRQ_PENDING_IRQ_GO_BIT_CLEAR_OFFSET 1
#define DP_AUX_HPD_IRQ_PENDING_IRQ_GO_BIT_CLEAR_MASK 0x2
#define DP_AUX_HPD_IRQ_PENDING_IRQ_GO_BIT_CLEAR 0x2
#define DP_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define DP_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define DP_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_PKT_RECEIVED 0x1
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_CONNECT_DET_OFFSET 17
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_CONNECT_DET 0x20000
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_DISCONNECT_DET 0x10000
#define DP_AUX_HPD_IRQ_RAW_HPD_RISE_DET_OFFSET 15
#define DP_AUX_HPD_IRQ_RAW_HPD_RISE_DET_MASK 0x8000
#define DP_AUX_HPD_IRQ_RAW_HPD_RISE_DET 0x8000
#define DP_AUX_HPD_IRQ_RAW_HPD_FALL_DET_OFFSET 14
#define DP_AUX_HPD_IRQ_RAW_HPD_FALL_DET_MASK 0x4000
#define DP_AUX_HPD_IRQ_RAW_HPD_FALL_DET 0x4000
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_POWERED_OFFSET 13
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_POWERED_MASK 0x2000
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_POWERED 0x2000
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_DETECTED_OFFSET 12
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_DETECTED_MASK 0x1000
#define DP_AUX_HPD_IRQ_RAW_DP_SOURCE_DETECTED 0x1000
#define DP_AUX_HPD_IRQ_RAW_HPD_DISCONNECT_OFFSET 11
#define DP_AUX_HPD_IRQ_RAW_HPD_DISCONNECT_MASK 0x800
#define DP_AUX_HPD_IRQ_RAW_HPD_DISCONNECT 0x800
#define DP_AUX_HPD_IRQ_RAW_HPD_CONNECT_OFFSET 10
#define DP_AUX_HPD_IRQ_RAW_HPD_CONNECT_MASK 0x400
#define DP_AUX_HPD_IRQ_RAW_HPD_CONNECT 0x400
#define DP_AUX_HPD_IRQ_RAW_HPD_IRQ_OFFSET 9
#define DP_AUX_HPD_IRQ_RAW_HPD_IRQ_MASK 0x200
#define DP_AUX_HPD_IRQ_RAW_HPD_IRQ 0x200
#define DP_AUX_HPD_IRQ_RAW_HPD_REPLUG_OFFSET 8
#define DP_AUX_HPD_IRQ_RAW_HPD_REPLUG_MASK 0x100
#define DP_AUX_HPD_IRQ_RAW_HPD_REPLUG 0x100
#define DP_AUX_HPD_IRQ_RAW_RX_FIFO_OVERFLOW_OFFSET 7
#define DP_AUX_HPD_IRQ_RAW_RX_FIFO_OVERFLOW_MASK 0x80
#define DP_AUX_HPD_IRQ_RAW_RX_FIFO_OVERFLOW 0x80
#define DP_AUX_HPD_IRQ_RAW_REPLY_TIMEOUT_OFFSET 3
#define DP_AUX_HPD_IRQ_RAW_REPLY_TIMEOUT_MASK 0x8
#define DP_AUX_HPD_IRQ_RAW_REPLY_TIMEOUT 0x8
#define DP_AUX_HPD_IRQ_RAW_DEFER_SENT_OFFSET 2
#define DP_AUX_HPD_IRQ_RAW_DEFER_SENT_MASK 0x4
#define DP_AUX_HPD_IRQ_RAW_DEFER_SENT 0x4
#define DP_AUX_HPD_IRQ_RAW_GO_BIT_CLEAR_OFFSET 1
#define DP_AUX_HPD_IRQ_RAW_GO_BIT_CLEAR_MASK 0x2
#define DP_AUX_HPD_IRQ_RAW_GO_BIT_CLEAR 0x2
#define DP_AUX_HPD_IRQ_RAW_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define DP_AUX_HPD_IRQ_RAW_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define DP_AUX_HPD_IRQ_RAW_RX_FIFO_PKT_RECEIVED 0x1
#endif /* _DP_AUX_HPD_REGS_H_ */

/* end */
