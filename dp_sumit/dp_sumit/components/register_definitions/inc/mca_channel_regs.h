/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Terry Sosniak*/
/* generated by      : Terry.Sosniak*/
/* generated from    : C:\cygwin64\home\Terry.Sosniak\RTL\mca_release_parameter_change_20190801\m_mca_v2\regs\ids\mca_channel_regs\mca_channel_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/*block : channel */

#ifndef _CHANNEL_REGS_H_
#define _CHANNEL_REGS_H_

#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x4 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t auto_reconnect : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t tx_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t lnk_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lnk_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t tx_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t auto_reconnect : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_control0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t rx_rdy : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t tx_rdy : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t lnk_rdy : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t ch_rdy : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ch_rdy : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t lnk_rdy : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t tx_rdy : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t rx_rdy : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_status0;

/*section : link */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t crd_lmt_en : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t pnd_lmt_en : 1;           /* 10 SW=rw HW=ro 0x1 */
            uint32_t u0rectimeout_lmt_en : 1;           /* 9 SW=rw HW=ro 0x1 */
            uint32_t u0ltimeout_lmt_en : 1;           /* 8 SW=rw HW=ro 0x1 */
            
            uint32_t resv7 : 1;
            uint32_t rec_idl_lmt_en : 1;           /* 6 SW=rw HW=ro 0x1 */
            uint32_t rec_idl_rpt_en : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t rec_act_rpt_en : 1;           /* 4 SW=rw HW=ro 0x1 */
            
            uint32_t resv3 : 1;
            uint32_t pol_idl_lmt_en : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pol_idl_rpt_en : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t pol_act_rpt_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pol_act_rpt_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pol_idl_rpt_en : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t pol_idl_lmt_en : 1;           /* 2 SW=rw HW=ro 0x1 */
            
            uint32_t resv3 : 1;
            uint32_t rec_act_rpt_en : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t rec_idl_rpt_en : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t rec_idl_lmt_en : 1;           /* 6 SW=rw HW=ro 0x1 */
            
            uint32_t resv7 : 1;
            uint32_t u0ltimeout_lmt_en : 1;           /* 8 SW=rw HW=ro 0x1 */
            uint32_t u0rectimeout_lmt_en : 1;           /* 9 SW=rw HW=ro 0x1 */
            uint32_t pnd_lmt_en : 1;           /* 10 SW=rw HW=ro 0x1 */
            uint32_t crd_lmt_en : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_link_control0_ltssm;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t force_bad_lcrd : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t force_bad_lgood : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t force_bad_data_nrtry : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t force_bad_data_rtry : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t go2_recovery : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t dp_tx_hdr_ovrd_time : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t measure_latency : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t measure_latency : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_tx_hdr_ovrd_time : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t go2_recovery : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t force_bad_data_rtry : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t force_bad_data_nrtry : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t force_bad_lgood : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t force_bad_lcrd : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_link_control0_test;

typedef struct {
    channel_link_control0_ltssm  ltssm;
    channel_link_control0_test  test;
    
    
    
} channel_link_control0;


/*section : status0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t rec_idl : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t rec_act : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t u0 : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t pol_idl : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t pol_act : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t dis : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t inact : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t inact : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t dis : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t pol_act : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t pol_idl : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t u0 : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t rec_act : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t rec_idl : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_link_status0_ltssm;

typedef struct {
    channel_link_status0_ltssm  ltssm;
    
    
    
} channel_link_status0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t latency : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t rx_mcup : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t rx_frm : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t tx_mcup : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t tx_frm : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pol_fail : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t u0_to_rec : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t u0_to_rec : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pol_fail : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t tx_frm : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t tx_mcup : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rx_frm : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t rx_mcup : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t latency : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_link_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_link_stats0_u0_to_rec;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_link_stats0_pol_fail;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_link_stats0_tx_frm;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_link_stats0_tx_mcup;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_link_stats0_rx_frm;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_link_stats0_rx_mcup;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_link_stats0_latency;

typedef struct {
    channel_link_stats0_rd2clr_config  rd2clr_config;
    channel_link_stats0_u0_to_rec  u0_to_rec;
    channel_link_stats0_pol_fail  pol_fail;
    channel_link_stats0_tx_frm  tx_frm;
    channel_link_stats0_tx_mcup  tx_mcup;
    channel_link_stats0_rx_frm  rx_frm;
    channel_link_stats0_rx_mcup  rx_mcup;
    channel_link_stats0_latency  latency;
    
    
    
} channel_link_stats0;


typedef struct {
    
    union {
        channel_link_control0 s;
        uint8_t filler[0x8];
    } control0;
    
    union {
        channel_link_status0 s;
        uint8_t filler[0x4];
    } status0;
    
    union {
        channel_link_stats0 s;
        uint8_t filler[0x20];
    } stats0;
    
    
    
} channel_link;


/*section : tx */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t mcup_pld_max_cycles : 4;           /* 19:16 SW=rw HW=ro 0x8 */
            
            uint32_t resv14 : 2;
            uint32_t force_retry : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t block_retry : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv9 : 3;
            uint32_t bw_src : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t drp_on_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t hys_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_sop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_on_sop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t hys_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t flw_ctrl_en : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t bw_src : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv9 : 3;
            uint32_t block_retry : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t force_retry : 1;           /* 13 SW=rw HW=ro 0x0 */
            
            uint32_t resv14 : 2;
            uint32_t mcup_pld_max_cycles : 4;           /* 16:19 SW=rw HW=ro 0x8 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_control0_dp;

typedef union {
    struct {
        uint32_t base_addr : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} channel_tx_control0_rtry_buf;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t hi : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            uint32_t lo : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lo : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t hi : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_control0_fifo_hys;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t hi : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            uint32_t lo : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lo : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t hi : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_control0_bandwidth_limit;

typedef struct {
    channel_tx_control0_dp  dp;
    channel_tx_control0_rtry_buf  rtry_buf;
    channel_tx_control0_fifo_hys  fifo_hys;
    channel_tx_control0_bandwidth_limit  bandwidth_limit;
    
    
    
} channel_tx_control0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t bandwidth : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_max_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_eop_err : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_no_sop_err : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_pkt_max_err : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_fifo_full_err : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_drp_pkt : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_rd_drp_pkt : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t dp_nfifo : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t dp_pfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t cmd_fifo : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cmd_fifo : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_pfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t dp_nfifo : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_rd_drp_pkt : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_drp_pkt : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_fifo_full_err : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_pkt_max_err : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_no_sop_err : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_eop_err : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_max_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t bandwidth : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_stats0_cmd_fifo;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_tx_stats0_dp_pfifo;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_tx_stats0_dp_nfifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_stats0_dp_fifo_rd_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_stats0_dp_fifo_wr_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_stats0_dp_fifo_wr_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_stats0_dp_fifo_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_stats0_dp_fifo_pkt_max_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_stats0_dp_grd_no_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_stats0_dp_grd_no_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_tx_stats0_dp_grd_max_err;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_tx_stats0_bandwidth;

typedef struct {
    channel_tx_stats0_rd2clr_config  rd2clr_config;
    channel_tx_stats0_cmd_fifo  cmd_fifo;
    channel_tx_stats0_dp_pfifo  dp_pfifo;
    channel_tx_stats0_dp_nfifo  dp_nfifo;
    channel_tx_stats0_dp_fifo_rd_drp_pkt  dp_fifo_rd_drp_pkt;
    channel_tx_stats0_dp_fifo_wr_drp_pkt  dp_fifo_wr_drp_pkt;
    channel_tx_stats0_dp_fifo_wr_pkt_err  dp_fifo_wr_pkt_err;
    channel_tx_stats0_dp_fifo_fifo_full_err  dp_fifo_fifo_full_err;
    channel_tx_stats0_dp_fifo_pkt_max_err  dp_fifo_pkt_max_err;
    channel_tx_stats0_dp_grd_no_sop_err  dp_grd_no_sop_err;
    channel_tx_stats0_dp_grd_no_eop_err  dp_grd_no_eop_err;
    channel_tx_stats0_dp_grd_max_err  dp_grd_max_err;
    channel_tx_stats0_bandwidth  bandwidth;
    
    
    
} channel_tx_stats0;


typedef struct {
    
    union {
        channel_tx_control0 s;
        uint8_t filler[0x10];
    } control0;
    
    union {
        channel_tx_stats0 s;
        uint8_t filler[0x34];
    } stats0;
    
    
    
} channel_tx;


/*section : rx */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv6 : 26;
            uint32_t hys_en : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t min_lvl_mode : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_sop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv0 : 1;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 1;
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_sop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t min_lvl_mode : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t hys_en : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t resv6 : 26;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_control0_dp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t lmt : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lmt : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_control0_ntfy_mode;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t lvl : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lvl : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_control0_hys_lo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t lvl : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lvl : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_control0_hys_hi;

typedef struct {
    channel_rx_control0_dp  dp;
    channel_rx_control0_ntfy_mode  ntfy_mode;
    channel_rx_control0_hys_lo  hys_lo;
    channel_rx_control0_hys_hi  hys_hi;
    
    
    
} channel_rx_control0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t dp_grd_max_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_eop_err : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_no_sop_err : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_pkt_max_err : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_fifo_full_err : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_drp_pkt_wr : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_rd_drp_pkt : 1;           /* 3 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 1;
            uint32_t dp_nfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t dp_pfifo : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_pfifo : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_nfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 1;
            uint32_t dp_fifo_rd_drp_pkt : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_drp_pkt_wr : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_fifo_full_err : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_pkt_max_err : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_no_sop_err : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_eop_err : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_max_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_rx_stats0_dp_pfifo;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_rx_stats0_dp_nfifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_stats0_dp_fifo_rd_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_stats0_dp_fifo_wr_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_stats0_dp_fifo_wr_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_stats0_dp_fifo_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_stats0_dp_fifo_pkt_max_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_stats0_dp_grd_no_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_stats0_dp_grd_no_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_rx_stats0_dp_grd_max_err;

typedef struct {
    channel_rx_stats0_rd2clr_config  rd2clr_config;
    channel_rx_stats0_dp_pfifo  dp_pfifo;
    channel_rx_stats0_dp_nfifo  dp_nfifo;
    channel_rx_stats0_dp_fifo_rd_drp_pkt  dp_fifo_rd_drp_pkt;
    channel_rx_stats0_dp_fifo_wr_drp_pkt  dp_fifo_wr_drp_pkt;
    channel_rx_stats0_dp_fifo_wr_pkt_err  dp_fifo_wr_pkt_err;
    channel_rx_stats0_dp_fifo_fifo_full_err  dp_fifo_fifo_full_err;
    channel_rx_stats0_dp_fifo_pkt_max_err  dp_fifo_pkt_max_err;
    channel_rx_stats0_dp_grd_no_sop_err  dp_grd_no_sop_err;
    channel_rx_stats0_dp_grd_no_eop_err  dp_grd_no_eop_err;
    channel_rx_stats0_dp_grd_max_err  dp_grd_max_err;
    
    
    
} channel_rx_stats0;


typedef struct {
    
    union {
        channel_rx_control0 s;
        uint8_t filler[0x10];
    } control0;
    
    union {
        channel_rx_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
    
    
} channel_rx;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t latency_measurement : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t ch_tx_ready : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ch_tx_ready : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t latency_measurement : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t latency_measurement : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_ready : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ch_tx_ready : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t latency_measurement : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t latency_measurement : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t ch_tx_ready : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ch_tx_ready : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t latency_measurement : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t latency_measurement : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ch_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t latency_measurement : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_irq0_raw;

typedef struct {
    channel_irq0_enable  enable;
    channel_irq0_pending  pending;
    channel_irq0_pending_irq  pending_irq;
    channel_irq0_raw  raw;
    
    
    
} channel_irq0;


/*section : test_mode */

/*section : tx */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x2 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x2 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_test_mode_tx_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t setting : 11;           /* 10:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t setting : 11;           /* 0:10 SW=rw HW=ro 0x0 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_test_mode_tx_config0_iwg_cnt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t setting : 11;           /* 10:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t setting : 11;           /* 0:10 SW=rw HW=ro 0x1 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_test_mode_tx_config0_ifg_cnt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t setting : 11;           /* 10:0 SW=rw HW=ro 0xA */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t setting : 11;           /* 0:10 SW=rw HW=ro 0xA */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_test_mode_tx_config0_pkt_cnt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t setting : 11;           /* 10:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t setting : 11;           /* 0:10 SW=rw HW=ro 0x1 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_test_mode_tx_config0_pkt_size;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t random : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t throttle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t throttle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t random : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_test_mode_tx_config0_ctrl0;

typedef struct {
    channel_test_mode_tx_config0_iwg_cnt  iwg_cnt;
    channel_test_mode_tx_config0_ifg_cnt  ifg_cnt;
    channel_test_mode_tx_config0_pkt_cnt  pkt_cnt;
    channel_test_mode_tx_config0_pkt_size  pkt_size;
    channel_test_mode_tx_config0_ctrl0  ctrl0;
    
} channel_test_mode_tx_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t wait_count : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_count : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_count : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t wait_count : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_test_mode_tx_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t wait_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_test_mode_tx_stats0_wait_count;

typedef union {
    struct {
        uint32_t pkt_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_test_mode_tx_stats0_pkt_count;

typedef struct {
    channel_test_mode_tx_stats0_rd2clr_config  rd2clr_config;
    channel_test_mode_tx_stats0_wait_count  wait_count;
    channel_test_mode_tx_stats0_pkt_count  pkt_count;
    
} channel_test_mode_tx_stats0;


typedef struct {
    channel_test_mode_tx_version  version;
    
    union {
        channel_test_mode_tx_config0 s;
        uint8_t filler[0x14];
    } config0;
    
    union {
        channel_test_mode_tx_stats0 s;
        uint8_t filler[0xC];
    } stats0;
    
} channel_test_mode_tx;


/*section : rx */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_test_mode_rx_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t en_rxflw : 1;           /* 3 SW=rw HW=ro 0x1 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t en_rxflw : 1;           /* 3 SW=rw HW=ro 0x1 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_test_mode_rx_config0_mgen;

typedef struct {
    channel_test_mode_rx_config0_mgen  mgen;
    
} channel_test_mode_rx_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t err_count : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_count : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_count : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t err_count : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} channel_test_mode_rx_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t err_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_test_mode_rx_stats0_err_count;

typedef union {
    struct {
        uint32_t pkt_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} channel_test_mode_rx_stats0_pkt_count;

typedef struct {
    channel_test_mode_rx_stats0_rd2clr_config  rd2clr_config;
    channel_test_mode_rx_stats0_err_count  err_count;
    channel_test_mode_rx_stats0_pkt_count  pkt_count;
    
} channel_test_mode_rx_stats0;


typedef struct {
    channel_test_mode_rx_version  version;
    
    union {
        channel_test_mode_rx_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        channel_test_mode_rx_stats0 s;
        uint8_t filler[0xC];
    } stats0;
    
} channel_test_mode_rx;


typedef struct {
    
    union {
        channel_test_mode_tx s;
        uint8_t filler[0x24];
    } tx;
    
    union {
        channel_test_mode_rx s;
        uint8_t filler[0x14];
    } rx;
    
    
    
} channel_test_mode;


typedef struct {
    channel_version  version;
    channel_control0  control0;
    channel_status0  status0;
    
    union {
        channel_link s;
        uint8_t filler[0x2C];
    } link;
    
    union {
        channel_tx s;
        uint8_t filler[0x44];
    } tx;
    
    union {
        channel_rx s;
        uint8_t filler[0x3C];
    } rx;
    
    union {
        channel_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
    union {
        channel_test_mode s;
        uint8_t filler[0x38];
    } test_mode;
    
    
    
} channel_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define channel_version_READMASK 0xFFFFFF
#define channel_version_WRITEMASK 0x0
#define channel_version_VOLATILEMASK 0x0
#define channel_version_RESETMASK 0xFFFFFF
#define channel_version_DEFAULT 0x00010204

#define channel_control0_READMASK 0x17
#define channel_control0_WRITEMASK 0x17
#define channel_control0_VOLATILEMASK 0x0
#define channel_control0_RESETMASK 0x17
#define channel_control0_DEFAULT 0x00000000

#define channel_status0_READMASK 0xF
#define channel_status0_WRITEMASK 0x0
#define channel_status0_VOLATILEMASK 0xF
#define channel_status0_RESETMASK 0xF
#define channel_status0_DEFAULT 0x00000000

#define channel_link_control0_ltssm_READMASK 0xF77
#define channel_link_control0_ltssm_WRITEMASK 0xF77
#define channel_link_control0_ltssm_VOLATILEMASK 0x0
#define channel_link_control0_ltssm_RESETMASK 0xF77
#define channel_link_control0_ltssm_DEFAULT 0x00000F77

#define channel_link_control0_test_READMASK 0x1F3
#define channel_link_control0_test_WRITEMASK 0x1F3
#define channel_link_control0_test_VOLATILEMASK 0x0
#define channel_link_control0_test_RESETMASK 0x1F3
#define channel_link_control0_test_DEFAULT 0x00000000

#define channel_link_status0_ltssm_READMASK 0x7F
#define channel_link_status0_ltssm_WRITEMASK 0x0
#define channel_link_status0_ltssm_VOLATILEMASK 0x7F
#define channel_link_status0_ltssm_RESETMASK 0x7F
#define channel_link_status0_ltssm_DEFAULT 0x00000000

#define channel_link_stats0_rd2clr_config_READMASK 0x7F
#define channel_link_stats0_rd2clr_config_WRITEMASK 0x7F
#define channel_link_stats0_rd2clr_config_VOLATILEMASK 0x0
#define channel_link_stats0_rd2clr_config_RESETMASK 0x7F
#define channel_link_stats0_rd2clr_config_DEFAULT 0x00000000

#define channel_link_stats0_u0_to_rec_READMASK 0xFFFF
#define channel_link_stats0_u0_to_rec_WRITEMASK 0x0
#define channel_link_stats0_u0_to_rec_VOLATILEMASK 0xFFFF
#define channel_link_stats0_u0_to_rec_RESETMASK 0xFFFF
#define channel_link_stats0_u0_to_rec_DEFAULT 0x00000000

#define channel_link_stats0_pol_fail_READMASK 0xFFFF
#define channel_link_stats0_pol_fail_WRITEMASK 0x0
#define channel_link_stats0_pol_fail_VOLATILEMASK 0xFFFF
#define channel_link_stats0_pol_fail_RESETMASK 0xFFFF
#define channel_link_stats0_pol_fail_DEFAULT 0x00000000

#define channel_link_stats0_tx_frm_READMASK 0xFFFFFFFF
#define channel_link_stats0_tx_frm_WRITEMASK 0x0
#define channel_link_stats0_tx_frm_VOLATILEMASK 0xFFFFFFFF
#define channel_link_stats0_tx_frm_RESETMASK 0xFFFFFFFF
#define channel_link_stats0_tx_frm_DEFAULT 0x00000000

#define channel_link_stats0_tx_mcup_READMASK 0xFFFFFFFF
#define channel_link_stats0_tx_mcup_WRITEMASK 0x0
#define channel_link_stats0_tx_mcup_VOLATILEMASK 0xFFFFFFFF
#define channel_link_stats0_tx_mcup_RESETMASK 0xFFFFFFFF
#define channel_link_stats0_tx_mcup_DEFAULT 0x00000000

#define channel_link_stats0_rx_frm_READMASK 0xFFFFFFFF
#define channel_link_stats0_rx_frm_WRITEMASK 0x0
#define channel_link_stats0_rx_frm_VOLATILEMASK 0xFFFFFFFF
#define channel_link_stats0_rx_frm_RESETMASK 0xFFFFFFFF
#define channel_link_stats0_rx_frm_DEFAULT 0x00000000

#define channel_link_stats0_rx_mcup_READMASK 0xFFFFFFFF
#define channel_link_stats0_rx_mcup_WRITEMASK 0x0
#define channel_link_stats0_rx_mcup_VOLATILEMASK 0xFFFFFFFF
#define channel_link_stats0_rx_mcup_RESETMASK 0xFFFFFFFF
#define channel_link_stats0_rx_mcup_DEFAULT 0x00000000

#define channel_link_stats0_latency_READMASK 0xFFFFFFFF
#define channel_link_stats0_latency_WRITEMASK 0x0
#define channel_link_stats0_latency_VOLATILEMASK 0xFFFFFFFF
#define channel_link_stats0_latency_RESETMASK 0xFFFFFFFF
#define channel_link_stats0_latency_DEFAULT 0x00000000

#define channel_tx_control0_dp_READMASK 0xF3133
#define channel_tx_control0_dp_WRITEMASK 0xF3133
#define channel_tx_control0_dp_VOLATILEMASK 0x0
#define channel_tx_control0_dp_RESETMASK 0xF3133
#define channel_tx_control0_dp_DEFAULT 0x00080000

#define channel_tx_control0_rtry_buf_READMASK 0xFFFFFFFF
#define channel_tx_control0_rtry_buf_WRITEMASK 0xFFFFFFFF
#define channel_tx_control0_rtry_buf_VOLATILEMASK 0x0
#define channel_tx_control0_rtry_buf_RESETMASK 0xFFFFFFFF
#define channel_tx_control0_rtry_buf_DEFAULT 0x00000000

#define channel_tx_control0_fifo_hys_READMASK 0xFFFFFFFF
#define channel_tx_control0_fifo_hys_WRITEMASK 0xFFFFFFFF
#define channel_tx_control0_fifo_hys_VOLATILEMASK 0x0
#define channel_tx_control0_fifo_hys_RESETMASK 0xFFFFFFFF
#define channel_tx_control0_fifo_hys_DEFAULT 0x00000000

#define channel_tx_control0_bandwidth_limit_READMASK 0xFFFFFFFF
#define channel_tx_control0_bandwidth_limit_WRITEMASK 0xFFFFFFFF
#define channel_tx_control0_bandwidth_limit_VOLATILEMASK 0x0
#define channel_tx_control0_bandwidth_limit_RESETMASK 0xFFFFFFFF
#define channel_tx_control0_bandwidth_limit_DEFAULT 0x00000000

#define channel_tx_stats0_rd2clr_config_READMASK 0xFFF
#define channel_tx_stats0_rd2clr_config_WRITEMASK 0xFFF
#define channel_tx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define channel_tx_stats0_rd2clr_config_RESETMASK 0xFFF
#define channel_tx_stats0_rd2clr_config_DEFAULT 0x00000000

#define channel_tx_stats0_cmd_fifo_READMASK 0xFF
#define channel_tx_stats0_cmd_fifo_WRITEMASK 0x0
#define channel_tx_stats0_cmd_fifo_VOLATILEMASK 0xFF
#define channel_tx_stats0_cmd_fifo_RESETMASK 0xFF
#define channel_tx_stats0_cmd_fifo_DEFAULT 0x00000000

#define channel_tx_stats0_dp_pfifo_READMASK 0xFFFFFFFF
#define channel_tx_stats0_dp_pfifo_WRITEMASK 0x0
#define channel_tx_stats0_dp_pfifo_VOLATILEMASK 0xFFFFFFFF
#define channel_tx_stats0_dp_pfifo_RESETMASK 0xFFFFFFFF
#define channel_tx_stats0_dp_pfifo_DEFAULT 0x00000000

#define channel_tx_stats0_dp_nfifo_READMASK 0xFFFFFFFF
#define channel_tx_stats0_dp_nfifo_WRITEMASK 0x0
#define channel_tx_stats0_dp_nfifo_VOLATILEMASK 0xFFFFFFFF
#define channel_tx_stats0_dp_nfifo_RESETMASK 0xFFFFFFFF
#define channel_tx_stats0_dp_nfifo_DEFAULT 0x00000000

#define channel_tx_stats0_dp_fifo_rd_drp_pkt_READMASK 0xFF
#define channel_tx_stats0_dp_fifo_rd_drp_pkt_WRITEMASK 0x0
#define channel_tx_stats0_dp_fifo_rd_drp_pkt_VOLATILEMASK 0xFF
#define channel_tx_stats0_dp_fifo_rd_drp_pkt_RESETMASK 0xFF
#define channel_tx_stats0_dp_fifo_rd_drp_pkt_DEFAULT 0x00000000

#define channel_tx_stats0_dp_fifo_wr_drp_pkt_READMASK 0xFF
#define channel_tx_stats0_dp_fifo_wr_drp_pkt_WRITEMASK 0x0
#define channel_tx_stats0_dp_fifo_wr_drp_pkt_VOLATILEMASK 0xFF
#define channel_tx_stats0_dp_fifo_wr_drp_pkt_RESETMASK 0xFF
#define channel_tx_stats0_dp_fifo_wr_drp_pkt_DEFAULT 0x00000000

#define channel_tx_stats0_dp_fifo_wr_pkt_err_READMASK 0xFF
#define channel_tx_stats0_dp_fifo_wr_pkt_err_WRITEMASK 0x0
#define channel_tx_stats0_dp_fifo_wr_pkt_err_VOLATILEMASK 0xFF
#define channel_tx_stats0_dp_fifo_wr_pkt_err_RESETMASK 0xFF
#define channel_tx_stats0_dp_fifo_wr_pkt_err_DEFAULT 0x00000000

#define channel_tx_stats0_dp_fifo_fifo_full_err_READMASK 0xFF
#define channel_tx_stats0_dp_fifo_fifo_full_err_WRITEMASK 0x0
#define channel_tx_stats0_dp_fifo_fifo_full_err_VOLATILEMASK 0xFF
#define channel_tx_stats0_dp_fifo_fifo_full_err_RESETMASK 0xFF
#define channel_tx_stats0_dp_fifo_fifo_full_err_DEFAULT 0x00000000

#define channel_tx_stats0_dp_fifo_pkt_max_err_READMASK 0xFF
#define channel_tx_stats0_dp_fifo_pkt_max_err_WRITEMASK 0x0
#define channel_tx_stats0_dp_fifo_pkt_max_err_VOLATILEMASK 0xFF
#define channel_tx_stats0_dp_fifo_pkt_max_err_RESETMASK 0xFF
#define channel_tx_stats0_dp_fifo_pkt_max_err_DEFAULT 0x00000000

#define channel_tx_stats0_dp_grd_no_sop_err_READMASK 0xFF
#define channel_tx_stats0_dp_grd_no_sop_err_WRITEMASK 0x0
#define channel_tx_stats0_dp_grd_no_sop_err_VOLATILEMASK 0xFF
#define channel_tx_stats0_dp_grd_no_sop_err_RESETMASK 0xFF
#define channel_tx_stats0_dp_grd_no_sop_err_DEFAULT 0x00000000

#define channel_tx_stats0_dp_grd_no_eop_err_READMASK 0xFF
#define channel_tx_stats0_dp_grd_no_eop_err_WRITEMASK 0x0
#define channel_tx_stats0_dp_grd_no_eop_err_VOLATILEMASK 0xFF
#define channel_tx_stats0_dp_grd_no_eop_err_RESETMASK 0xFF
#define channel_tx_stats0_dp_grd_no_eop_err_DEFAULT 0x00000000

#define channel_tx_stats0_dp_grd_max_err_READMASK 0xFF
#define channel_tx_stats0_dp_grd_max_err_WRITEMASK 0x0
#define channel_tx_stats0_dp_grd_max_err_VOLATILEMASK 0xFF
#define channel_tx_stats0_dp_grd_max_err_RESETMASK 0xFF
#define channel_tx_stats0_dp_grd_max_err_DEFAULT 0x00000000

#define channel_tx_stats0_bandwidth_READMASK 0xFFFFFFFF
#define channel_tx_stats0_bandwidth_WRITEMASK 0x0
#define channel_tx_stats0_bandwidth_VOLATILEMASK 0xFFFFFFFF
#define channel_tx_stats0_bandwidth_RESETMASK 0xFFFFFFFF
#define channel_tx_stats0_bandwidth_DEFAULT 0x00000000

#define channel_rx_control0_dp_READMASK 0x3E
#define channel_rx_control0_dp_WRITEMASK 0x3E
#define channel_rx_control0_dp_VOLATILEMASK 0x0
#define channel_rx_control0_dp_RESETMASK 0x3E
#define channel_rx_control0_dp_DEFAULT 0x00000000

#define channel_rx_control0_ntfy_mode_READMASK 0xFFFF
#define channel_rx_control0_ntfy_mode_WRITEMASK 0xFFFF
#define channel_rx_control0_ntfy_mode_VOLATILEMASK 0x0
#define channel_rx_control0_ntfy_mode_RESETMASK 0xFFFF
#define channel_rx_control0_ntfy_mode_DEFAULT 0x00000000

#define channel_rx_control0_hys_lo_READMASK 0xFFFF
#define channel_rx_control0_hys_lo_WRITEMASK 0xFFFF
#define channel_rx_control0_hys_lo_VOLATILEMASK 0x0
#define channel_rx_control0_hys_lo_RESETMASK 0xFFFF
#define channel_rx_control0_hys_lo_DEFAULT 0x00000000

#define channel_rx_control0_hys_hi_READMASK 0xFFFF
#define channel_rx_control0_hys_hi_WRITEMASK 0xFFFF
#define channel_rx_control0_hys_hi_VOLATILEMASK 0x0
#define channel_rx_control0_hys_hi_RESETMASK 0xFFFF
#define channel_rx_control0_hys_hi_DEFAULT 0x00000000

#define channel_rx_stats0_rd2clr_config_READMASK 0x7FB
#define channel_rx_stats0_rd2clr_config_WRITEMASK 0x7FB
#define channel_rx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define channel_rx_stats0_rd2clr_config_RESETMASK 0x7FB
#define channel_rx_stats0_rd2clr_config_DEFAULT 0x00000000

#define channel_rx_stats0_dp_pfifo_READMASK 0xFFFFFFFF
#define channel_rx_stats0_dp_pfifo_WRITEMASK 0x0
#define channel_rx_stats0_dp_pfifo_VOLATILEMASK 0xFFFFFFFF
#define channel_rx_stats0_dp_pfifo_RESETMASK 0xFFFFFFFF
#define channel_rx_stats0_dp_pfifo_DEFAULT 0x00000000

#define channel_rx_stats0_dp_nfifo_READMASK 0xFFFFFFFF
#define channel_rx_stats0_dp_nfifo_WRITEMASK 0x0
#define channel_rx_stats0_dp_nfifo_VOLATILEMASK 0xFFFFFFFF
#define channel_rx_stats0_dp_nfifo_RESETMASK 0xFFFFFFFF
#define channel_rx_stats0_dp_nfifo_DEFAULT 0x00000000

#define channel_rx_stats0_dp_fifo_rd_drp_pkt_READMASK 0xFF
#define channel_rx_stats0_dp_fifo_rd_drp_pkt_WRITEMASK 0x0
#define channel_rx_stats0_dp_fifo_rd_drp_pkt_VOLATILEMASK 0xFF
#define channel_rx_stats0_dp_fifo_rd_drp_pkt_RESETMASK 0xFF
#define channel_rx_stats0_dp_fifo_rd_drp_pkt_DEFAULT 0x00000000

#define channel_rx_stats0_dp_fifo_wr_drp_pkt_READMASK 0xFF
#define channel_rx_stats0_dp_fifo_wr_drp_pkt_WRITEMASK 0x0
#define channel_rx_stats0_dp_fifo_wr_drp_pkt_VOLATILEMASK 0xFF
#define channel_rx_stats0_dp_fifo_wr_drp_pkt_RESETMASK 0xFF
#define channel_rx_stats0_dp_fifo_wr_drp_pkt_DEFAULT 0x00000000

#define channel_rx_stats0_dp_fifo_wr_pkt_err_READMASK 0xFF
#define channel_rx_stats0_dp_fifo_wr_pkt_err_WRITEMASK 0x0
#define channel_rx_stats0_dp_fifo_wr_pkt_err_VOLATILEMASK 0xFF
#define channel_rx_stats0_dp_fifo_wr_pkt_err_RESETMASK 0xFF
#define channel_rx_stats0_dp_fifo_wr_pkt_err_DEFAULT 0x00000000

#define channel_rx_stats0_dp_fifo_fifo_full_err_READMASK 0xFF
#define channel_rx_stats0_dp_fifo_fifo_full_err_WRITEMASK 0x0
#define channel_rx_stats0_dp_fifo_fifo_full_err_VOLATILEMASK 0xFF
#define channel_rx_stats0_dp_fifo_fifo_full_err_RESETMASK 0xFF
#define channel_rx_stats0_dp_fifo_fifo_full_err_DEFAULT 0x00000000

#define channel_rx_stats0_dp_fifo_pkt_max_err_READMASK 0xFF
#define channel_rx_stats0_dp_fifo_pkt_max_err_WRITEMASK 0x0
#define channel_rx_stats0_dp_fifo_pkt_max_err_VOLATILEMASK 0xFF
#define channel_rx_stats0_dp_fifo_pkt_max_err_RESETMASK 0xFF
#define channel_rx_stats0_dp_fifo_pkt_max_err_DEFAULT 0x00000000

#define channel_rx_stats0_dp_grd_no_sop_err_READMASK 0xFF
#define channel_rx_stats0_dp_grd_no_sop_err_WRITEMASK 0x0
#define channel_rx_stats0_dp_grd_no_sop_err_VOLATILEMASK 0xFF
#define channel_rx_stats0_dp_grd_no_sop_err_RESETMASK 0xFF
#define channel_rx_stats0_dp_grd_no_sop_err_DEFAULT 0x00000000

#define channel_rx_stats0_dp_grd_no_eop_err_READMASK 0xFF
#define channel_rx_stats0_dp_grd_no_eop_err_WRITEMASK 0x0
#define channel_rx_stats0_dp_grd_no_eop_err_VOLATILEMASK 0xFF
#define channel_rx_stats0_dp_grd_no_eop_err_RESETMASK 0xFF
#define channel_rx_stats0_dp_grd_no_eop_err_DEFAULT 0x00000000

#define channel_rx_stats0_dp_grd_max_err_READMASK 0xFF
#define channel_rx_stats0_dp_grd_max_err_WRITEMASK 0x0
#define channel_rx_stats0_dp_grd_max_err_VOLATILEMASK 0xFF
#define channel_rx_stats0_dp_grd_max_err_RESETMASK 0xFF
#define channel_rx_stats0_dp_grd_max_err_DEFAULT 0x00000000

#define channel_irq0_enable_READMASK 0x1FFFFF
#define channel_irq0_enable_WRITEMASK 0x1FFFFF
#define channel_irq0_enable_VOLATILEMASK 0x0
#define channel_irq0_enable_RESETMASK 0x1FFFFF
#define channel_irq0_enable_DEFAULT 0x00000000

#define channel_irq0_pending_READMASK 0x1FFFFF
#define channel_irq0_pending_WRITEMASK 0x1FFFFF
#define channel_irq0_pending_VOLATILEMASK 0x1FFFFF
#define channel_irq0_pending_RESETMASK 0x1FFFFF
#define channel_irq0_pending_DEFAULT 0x00000000

#define channel_irq0_pending_irq_READMASK 0x1FFFFF
#define channel_irq0_pending_irq_WRITEMASK 0x0
#define channel_irq0_pending_irq_VOLATILEMASK 0x0
#define channel_irq0_pending_irq_RESETMASK 0x1FFFFF
#define channel_irq0_pending_irq_DEFAULT 0x00000000

#define channel_irq0_raw_READMASK 0x1FFFFF
#define channel_irq0_raw_WRITEMASK 0x0
#define channel_irq0_raw_VOLATILEMASK 0x1FFFFF
#define channel_irq0_raw_RESETMASK 0x1FFFFF
#define channel_irq0_raw_DEFAULT 0x00000000

#define channel_test_mode_tx_version_READMASK 0xFFFFFF
#define channel_test_mode_tx_version_WRITEMASK 0x0
#define channel_test_mode_tx_version_VOLATILEMASK 0x0
#define channel_test_mode_tx_version_RESETMASK 0xFFFFFF
#define channel_test_mode_tx_version_DEFAULT 0x00020000

#define channel_test_mode_tx_config0_iwg_cnt_READMASK 0x7FF
#define channel_test_mode_tx_config0_iwg_cnt_WRITEMASK 0x7FF
#define channel_test_mode_tx_config0_iwg_cnt_VOLATILEMASK 0x0
#define channel_test_mode_tx_config0_iwg_cnt_RESETMASK 0x7FF
#define channel_test_mode_tx_config0_iwg_cnt_DEFAULT 0x00000000

#define channel_test_mode_tx_config0_ifg_cnt_READMASK 0x7FF
#define channel_test_mode_tx_config0_ifg_cnt_WRITEMASK 0x7FF
#define channel_test_mode_tx_config0_ifg_cnt_VOLATILEMASK 0x0
#define channel_test_mode_tx_config0_ifg_cnt_RESETMASK 0x7FF
#define channel_test_mode_tx_config0_ifg_cnt_DEFAULT 0x00000001

#define channel_test_mode_tx_config0_pkt_cnt_READMASK 0x7FF
#define channel_test_mode_tx_config0_pkt_cnt_WRITEMASK 0x7FF
#define channel_test_mode_tx_config0_pkt_cnt_VOLATILEMASK 0x0
#define channel_test_mode_tx_config0_pkt_cnt_RESETMASK 0x7FF
#define channel_test_mode_tx_config0_pkt_cnt_DEFAULT 0x0000000A

#define channel_test_mode_tx_config0_pkt_size_READMASK 0x7FF
#define channel_test_mode_tx_config0_pkt_size_WRITEMASK 0x7FF
#define channel_test_mode_tx_config0_pkt_size_VOLATILEMASK 0x0
#define channel_test_mode_tx_config0_pkt_size_RESETMASK 0x7FF
#define channel_test_mode_tx_config0_pkt_size_DEFAULT 0x00000001

#define channel_test_mode_tx_config0_ctrl0_READMASK 0x1F
#define channel_test_mode_tx_config0_ctrl0_WRITEMASK 0x1F
#define channel_test_mode_tx_config0_ctrl0_VOLATILEMASK 0x0
#define channel_test_mode_tx_config0_ctrl0_RESETMASK 0x1F
#define channel_test_mode_tx_config0_ctrl0_DEFAULT 0x00000000

#define channel_test_mode_tx_stats0_rd2clr_config_READMASK 0x3
#define channel_test_mode_tx_stats0_rd2clr_config_WRITEMASK 0x3
#define channel_test_mode_tx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define channel_test_mode_tx_stats0_rd2clr_config_RESETMASK 0x3
#define channel_test_mode_tx_stats0_rd2clr_config_DEFAULT 0x00000000

#define channel_test_mode_tx_stats0_wait_count_READMASK 0xFFFFFFFF
#define channel_test_mode_tx_stats0_wait_count_WRITEMASK 0x0
#define channel_test_mode_tx_stats0_wait_count_VOLATILEMASK 0xFFFFFFFF
#define channel_test_mode_tx_stats0_wait_count_RESETMASK 0xFFFFFFFF
#define channel_test_mode_tx_stats0_wait_count_DEFAULT 0x00000000

#define channel_test_mode_tx_stats0_pkt_count_READMASK 0xFFFFFFFF
#define channel_test_mode_tx_stats0_pkt_count_WRITEMASK 0x0
#define channel_test_mode_tx_stats0_pkt_count_VOLATILEMASK 0xFFFFFFFF
#define channel_test_mode_tx_stats0_pkt_count_RESETMASK 0xFFFFFFFF
#define channel_test_mode_tx_stats0_pkt_count_DEFAULT 0x00000000

#define channel_test_mode_rx_version_READMASK 0xFFFFFF
#define channel_test_mode_rx_version_WRITEMASK 0x0
#define channel_test_mode_rx_version_VOLATILEMASK 0x0
#define channel_test_mode_rx_version_RESETMASK 0xFFFFFF
#define channel_test_mode_rx_version_DEFAULT 0x00010000

#define channel_test_mode_rx_config0_mgen_READMASK 0xF
#define channel_test_mode_rx_config0_mgen_WRITEMASK 0xF
#define channel_test_mode_rx_config0_mgen_VOLATILEMASK 0x0
#define channel_test_mode_rx_config0_mgen_RESETMASK 0xF
#define channel_test_mode_rx_config0_mgen_DEFAULT 0x00000008

#define channel_test_mode_rx_stats0_rd2clr_config_READMASK 0x3
#define channel_test_mode_rx_stats0_rd2clr_config_WRITEMASK 0x3
#define channel_test_mode_rx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define channel_test_mode_rx_stats0_rd2clr_config_RESETMASK 0x3
#define channel_test_mode_rx_stats0_rd2clr_config_DEFAULT 0x00000000

#define channel_test_mode_rx_stats0_err_count_READMASK 0xFFFFFFFF
#define channel_test_mode_rx_stats0_err_count_WRITEMASK 0x0
#define channel_test_mode_rx_stats0_err_count_VOLATILEMASK 0xFFFFFFFF
#define channel_test_mode_rx_stats0_err_count_RESETMASK 0xFFFFFFFF
#define channel_test_mode_rx_stats0_err_count_DEFAULT 0x00000000

#define channel_test_mode_rx_stats0_pkt_count_READMASK 0xFFFFFFFF
#define channel_test_mode_rx_stats0_pkt_count_WRITEMASK 0x0
#define channel_test_mode_rx_stats0_pkt_count_VOLATILEMASK 0xFFFFFFFF
#define channel_test_mode_rx_stats0_pkt_count_RESETMASK 0xFFFFFFFF
#define channel_test_mode_rx_stats0_pkt_count_DEFAULT 0x00000000

#define channel_s_SIZE 0x100
#define channel_version_SIZE 0x4
#define channel_control0_SIZE 0x4
#define channel_status0_SIZE 0x4
#define channel_link_SIZE 0x2C
#define channel_link_control0_SIZE 0x8
#define channel_link_control0_ltssm_SIZE 0x4
#define channel_link_control0_test_SIZE 0x4
#define channel_link_status0_SIZE 0x4
#define channel_link_status0_ltssm_SIZE 0x4
#define channel_link_stats0_SIZE 0x20
#define channel_link_stats0_rd2clr_config_SIZE 0x4
#define channel_link_stats0_u0_to_rec_SIZE 0x4
#define channel_link_stats0_pol_fail_SIZE 0x4
#define channel_link_stats0_tx_frm_SIZE 0x4
#define channel_link_stats0_tx_mcup_SIZE 0x4
#define channel_link_stats0_rx_frm_SIZE 0x4
#define channel_link_stats0_rx_mcup_SIZE 0x4
#define channel_link_stats0_latency_SIZE 0x4
#define channel_tx_SIZE 0x44
#define channel_tx_control0_SIZE 0x10
#define channel_tx_control0_dp_SIZE 0x4
#define channel_tx_control0_rtry_buf_SIZE 0x4
#define channel_tx_control0_fifo_hys_SIZE 0x4
#define channel_tx_control0_bandwidth_limit_SIZE 0x4
#define channel_tx_stats0_SIZE 0x34
#define channel_tx_stats0_rd2clr_config_SIZE 0x4
#define channel_tx_stats0_cmd_fifo_SIZE 0x4
#define channel_tx_stats0_dp_pfifo_SIZE 0x4
#define channel_tx_stats0_dp_nfifo_SIZE 0x4
#define channel_tx_stats0_dp_fifo_rd_drp_pkt_SIZE 0x4
#define channel_tx_stats0_dp_fifo_wr_drp_pkt_SIZE 0x4
#define channel_tx_stats0_dp_fifo_wr_pkt_err_SIZE 0x4
#define channel_tx_stats0_dp_fifo_fifo_full_err_SIZE 0x4
#define channel_tx_stats0_dp_fifo_pkt_max_err_SIZE 0x4
#define channel_tx_stats0_dp_grd_no_sop_err_SIZE 0x4
#define channel_tx_stats0_dp_grd_no_eop_err_SIZE 0x4
#define channel_tx_stats0_dp_grd_max_err_SIZE 0x4
#define channel_tx_stats0_bandwidth_SIZE 0x4
#define channel_rx_SIZE 0x3C
#define channel_rx_control0_SIZE 0x10
#define channel_rx_control0_dp_SIZE 0x4
#define channel_rx_control0_ntfy_mode_SIZE 0x4
#define channel_rx_control0_hys_lo_SIZE 0x4
#define channel_rx_control0_hys_hi_SIZE 0x4
#define channel_rx_stats0_SIZE 0x2C
#define channel_rx_stats0_rd2clr_config_SIZE 0x4
#define channel_rx_stats0_dp_pfifo_SIZE 0x4
#define channel_rx_stats0_dp_nfifo_SIZE 0x4
#define channel_rx_stats0_dp_fifo_rd_drp_pkt_SIZE 0x4
#define channel_rx_stats0_dp_fifo_wr_drp_pkt_SIZE 0x4
#define channel_rx_stats0_dp_fifo_wr_pkt_err_SIZE 0x4
#define channel_rx_stats0_dp_fifo_fifo_full_err_SIZE 0x4
#define channel_rx_stats0_dp_fifo_pkt_max_err_SIZE 0x4
#define channel_rx_stats0_dp_grd_no_sop_err_SIZE 0x4
#define channel_rx_stats0_dp_grd_no_eop_err_SIZE 0x4
#define channel_rx_stats0_dp_grd_max_err_SIZE 0x4
#define channel_irq0_SIZE 0x10
#define channel_irq0_enable_SIZE 0x4
#define channel_irq0_pending_SIZE 0x4
#define channel_irq0_pending_irq_SIZE 0x4
#define channel_irq0_raw_SIZE 0x4
#define channel_test_mode_SIZE 0x38
#define channel_test_mode_tx_SIZE 0x24
#define channel_test_mode_tx_version_SIZE 0x4
#define channel_test_mode_tx_config0_SIZE 0x14
#define channel_test_mode_tx_config0_iwg_cnt_SIZE 0x4
#define channel_test_mode_tx_config0_ifg_cnt_SIZE 0x4
#define channel_test_mode_tx_config0_pkt_cnt_SIZE 0x4
#define channel_test_mode_tx_config0_pkt_size_SIZE 0x4
#define channel_test_mode_tx_config0_ctrl0_SIZE 0x4
#define channel_test_mode_tx_stats0_SIZE 0xC
#define channel_test_mode_tx_stats0_rd2clr_config_SIZE 0x4
#define channel_test_mode_tx_stats0_wait_count_SIZE 0x4
#define channel_test_mode_tx_stats0_pkt_count_SIZE 0x4
#define channel_test_mode_rx_SIZE 0x14
#define channel_test_mode_rx_version_SIZE 0x4
#define channel_test_mode_rx_config0_SIZE 0x4
#define channel_test_mode_rx_config0_mgen_SIZE 0x4
#define channel_test_mode_rx_stats0_SIZE 0xC
#define channel_test_mode_rx_stats0_rd2clr_config_SIZE 0x4
#define channel_test_mode_rx_stats0_err_count_SIZE 0x4
#define channel_test_mode_rx_stats0_pkt_count_SIZE 0x4

#define channel_s_OFFSET 0x0
#define channel_version_OFFSET 0x0
#define channel_control0_OFFSET 0x4
#define channel_status0_OFFSET 0x8
#define channel_link_OFFSET 0xC
#define channel_link_control0_OFFSET 0x0
#define channel_link_control0_ltssm_OFFSET 0x0
#define channel_link_control0_test_OFFSET 0x4
#define channel_link_status0_OFFSET 0x8
#define channel_link_status0_ltssm_OFFSET 0x0
#define channel_link_stats0_OFFSET 0xC
#define channel_link_stats0_rd2clr_config_OFFSET 0x0
#define channel_link_stats0_u0_to_rec_OFFSET 0x4
#define channel_link_stats0_pol_fail_OFFSET 0x8
#define channel_link_stats0_tx_frm_OFFSET 0xC
#define channel_link_stats0_tx_mcup_OFFSET 0x10
#define channel_link_stats0_rx_frm_OFFSET 0x14
#define channel_link_stats0_rx_mcup_OFFSET 0x18
#define channel_link_stats0_latency_OFFSET 0x1C
#define channel_tx_OFFSET 0x38
#define channel_tx_control0_OFFSET 0x0
#define channel_tx_control0_dp_OFFSET 0x0
#define channel_tx_control0_rtry_buf_OFFSET 0x4
#define channel_tx_control0_fifo_hys_OFFSET 0x8
#define channel_tx_control0_bandwidth_limit_OFFSET 0xC
#define channel_tx_stats0_OFFSET 0x10
#define channel_tx_stats0_rd2clr_config_OFFSET 0x0
#define channel_tx_stats0_cmd_fifo_OFFSET 0x4
#define channel_tx_stats0_dp_pfifo_OFFSET 0x8
#define channel_tx_stats0_dp_nfifo_OFFSET 0xC
#define channel_tx_stats0_dp_fifo_rd_drp_pkt_OFFSET 0x10
#define channel_tx_stats0_dp_fifo_wr_drp_pkt_OFFSET 0x14
#define channel_tx_stats0_dp_fifo_wr_pkt_err_OFFSET 0x18
#define channel_tx_stats0_dp_fifo_fifo_full_err_OFFSET 0x1C
#define channel_tx_stats0_dp_fifo_pkt_max_err_OFFSET 0x20
#define channel_tx_stats0_dp_grd_no_sop_err_OFFSET 0x24
#define channel_tx_stats0_dp_grd_no_eop_err_OFFSET 0x28
#define channel_tx_stats0_dp_grd_max_err_OFFSET 0x2C
#define channel_tx_stats0_bandwidth_OFFSET 0x30
#define channel_rx_OFFSET 0x7C
#define channel_rx_control0_OFFSET 0x0
#define channel_rx_control0_dp_OFFSET 0x0
#define channel_rx_control0_ntfy_mode_OFFSET 0x4
#define channel_rx_control0_hys_lo_OFFSET 0x8
#define channel_rx_control0_hys_hi_OFFSET 0xC
#define channel_rx_stats0_OFFSET 0x10
#define channel_rx_stats0_rd2clr_config_OFFSET 0x0
#define channel_rx_stats0_dp_pfifo_OFFSET 0x4
#define channel_rx_stats0_dp_nfifo_OFFSET 0x8
#define channel_rx_stats0_dp_fifo_rd_drp_pkt_OFFSET 0xC
#define channel_rx_stats0_dp_fifo_wr_drp_pkt_OFFSET 0x10
#define channel_rx_stats0_dp_fifo_wr_pkt_err_OFFSET 0x14
#define channel_rx_stats0_dp_fifo_fifo_full_err_OFFSET 0x18
#define channel_rx_stats0_dp_fifo_pkt_max_err_OFFSET 0x1C
#define channel_rx_stats0_dp_grd_no_sop_err_OFFSET 0x20
#define channel_rx_stats0_dp_grd_no_eop_err_OFFSET 0x24
#define channel_rx_stats0_dp_grd_max_err_OFFSET 0x28
#define channel_irq0_OFFSET 0xB8
#define channel_irq0_enable_OFFSET 0x0
#define channel_irq0_pending_OFFSET 0x4
#define channel_irq0_pending_irq_OFFSET 0x8
#define channel_irq0_raw_OFFSET 0xC
#define channel_test_mode_OFFSET 0xC8
#define channel_test_mode_tx_OFFSET 0x0
#define channel_test_mode_tx_version_OFFSET 0x0
#define channel_test_mode_tx_config0_OFFSET 0x4
#define channel_test_mode_tx_config0_iwg_cnt_OFFSET 0x0
#define channel_test_mode_tx_config0_ifg_cnt_OFFSET 0x4
#define channel_test_mode_tx_config0_pkt_cnt_OFFSET 0x8
#define channel_test_mode_tx_config0_pkt_size_OFFSET 0xC
#define channel_test_mode_tx_config0_ctrl0_OFFSET 0x10
#define channel_test_mode_tx_stats0_OFFSET 0x18
#define channel_test_mode_tx_stats0_rd2clr_config_OFFSET 0x0
#define channel_test_mode_tx_stats0_wait_count_OFFSET 0x4
#define channel_test_mode_tx_stats0_pkt_count_OFFSET 0x8
#define channel_test_mode_rx_OFFSET 0x24
#define channel_test_mode_rx_version_OFFSET 0x0
#define channel_test_mode_rx_config0_OFFSET 0x4
#define channel_test_mode_rx_config0_mgen_OFFSET 0x0
#define channel_test_mode_rx_stats0_OFFSET 0x8
#define channel_test_mode_rx_stats0_rd2clr_config_OFFSET 0x0
#define channel_test_mode_rx_stats0_err_count_OFFSET 0x4
#define channel_test_mode_rx_stats0_pkt_count_OFFSET 0x8

#define channel_s_ADDRESS 0x000
#define channel_version_ADDRESS 0x000
#define channel_control0_ADDRESS 0x004
#define channel_status0_ADDRESS 0x008
#define channel_link_ADDRESS 0x00C
#define channel_link_control0_ADDRESS 0x00C
#define channel_link_control0_ltssm_ADDRESS 0x00C
#define channel_link_control0_test_ADDRESS 0x010
#define channel_link_status0_ADDRESS 0x014
#define channel_link_status0_ltssm_ADDRESS 0x014
#define channel_link_stats0_ADDRESS 0x018
#define channel_link_stats0_rd2clr_config_ADDRESS 0x018
#define channel_link_stats0_u0_to_rec_ADDRESS 0x01C
#define channel_link_stats0_pol_fail_ADDRESS 0x020
#define channel_link_stats0_tx_frm_ADDRESS 0x024
#define channel_link_stats0_tx_mcup_ADDRESS 0x028
#define channel_link_stats0_rx_frm_ADDRESS 0x02C
#define channel_link_stats0_rx_mcup_ADDRESS 0x030
#define channel_link_stats0_latency_ADDRESS 0x034
#define channel_tx_ADDRESS 0x038
#define channel_tx_control0_ADDRESS 0x038
#define channel_tx_control0_dp_ADDRESS 0x038
#define channel_tx_control0_rtry_buf_ADDRESS 0x03C
#define channel_tx_control0_fifo_hys_ADDRESS 0x040
#define channel_tx_control0_bandwidth_limit_ADDRESS 0x044
#define channel_tx_stats0_ADDRESS 0x048
#define channel_tx_stats0_rd2clr_config_ADDRESS 0x048
#define channel_tx_stats0_cmd_fifo_ADDRESS 0x04C
#define channel_tx_stats0_dp_pfifo_ADDRESS 0x050
#define channel_tx_stats0_dp_nfifo_ADDRESS 0x054
#define channel_tx_stats0_dp_fifo_rd_drp_pkt_ADDRESS 0x058
#define channel_tx_stats0_dp_fifo_wr_drp_pkt_ADDRESS 0x05C
#define channel_tx_stats0_dp_fifo_wr_pkt_err_ADDRESS 0x060
#define channel_tx_stats0_dp_fifo_fifo_full_err_ADDRESS 0x064
#define channel_tx_stats0_dp_fifo_pkt_max_err_ADDRESS 0x068
#define channel_tx_stats0_dp_grd_no_sop_err_ADDRESS 0x06C
#define channel_tx_stats0_dp_grd_no_eop_err_ADDRESS 0x070
#define channel_tx_stats0_dp_grd_max_err_ADDRESS 0x074
#define channel_tx_stats0_bandwidth_ADDRESS 0x078
#define channel_rx_ADDRESS 0x07C
#define channel_rx_control0_ADDRESS 0x07C
#define channel_rx_control0_dp_ADDRESS 0x07C
#define channel_rx_control0_ntfy_mode_ADDRESS 0x080
#define channel_rx_control0_hys_lo_ADDRESS 0x084
#define channel_rx_control0_hys_hi_ADDRESS 0x088
#define channel_rx_stats0_ADDRESS 0x08C
#define channel_rx_stats0_rd2clr_config_ADDRESS 0x08C
#define channel_rx_stats0_dp_pfifo_ADDRESS 0x090
#define channel_rx_stats0_dp_nfifo_ADDRESS 0x094
#define channel_rx_stats0_dp_fifo_rd_drp_pkt_ADDRESS 0x098
#define channel_rx_stats0_dp_fifo_wr_drp_pkt_ADDRESS 0x09C
#define channel_rx_stats0_dp_fifo_wr_pkt_err_ADDRESS 0x0A0
#define channel_rx_stats0_dp_fifo_fifo_full_err_ADDRESS 0x0A4
#define channel_rx_stats0_dp_fifo_pkt_max_err_ADDRESS 0x0A8
#define channel_rx_stats0_dp_grd_no_sop_err_ADDRESS 0x0AC
#define channel_rx_stats0_dp_grd_no_eop_err_ADDRESS 0x0B0
#define channel_rx_stats0_dp_grd_max_err_ADDRESS 0x0B4
#define channel_irq0_ADDRESS 0x0B8
#define channel_irq0_enable_ADDRESS 0x0B8
#define channel_irq0_pending_ADDRESS 0x0BC
#define channel_irq0_pending_irq_ADDRESS 0x0C0
#define channel_irq0_raw_ADDRESS 0x0C4
#define channel_test_mode_ADDRESS 0x0C8
#define channel_test_mode_tx_ADDRESS 0x0C8
#define channel_test_mode_tx_version_ADDRESS 0x0C8
#define channel_test_mode_tx_config0_ADDRESS 0x0CC
#define channel_test_mode_tx_config0_iwg_cnt_ADDRESS 0x0CC
#define channel_test_mode_tx_config0_ifg_cnt_ADDRESS 0x0D0
#define channel_test_mode_tx_config0_pkt_cnt_ADDRESS 0x0D4
#define channel_test_mode_tx_config0_pkt_size_ADDRESS 0x0D8
#define channel_test_mode_tx_config0_ctrl0_ADDRESS 0x0DC
#define channel_test_mode_tx_stats0_ADDRESS 0x0E0
#define channel_test_mode_tx_stats0_rd2clr_config_ADDRESS 0x0E0
#define channel_test_mode_tx_stats0_wait_count_ADDRESS 0x0E4
#define channel_test_mode_tx_stats0_pkt_count_ADDRESS 0x0E8
#define channel_test_mode_rx_ADDRESS 0x0EC
#define channel_test_mode_rx_version_ADDRESS 0x0EC
#define channel_test_mode_rx_config0_ADDRESS 0x0F0
#define channel_test_mode_rx_config0_mgen_ADDRESS 0x0F0
#define channel_test_mode_rx_stats0_ADDRESS 0x0F4
#define channel_test_mode_rx_stats0_rd2clr_config_ADDRESS 0x0F4
#define channel_test_mode_rx_stats0_err_count_ADDRESS 0x0F8
#define channel_test_mode_rx_stats0_pkt_count_ADDRESS 0x0FC
#define CHANNEL_VERSION_MAJOR_OFFSET 16
#define CHANNEL_VERSION_MAJOR_MASK 0xFF0000
#define CHANNEL_VERSION_MINOR_OFFSET 8
#define CHANNEL_VERSION_MINOR_MASK 0xFF00
#define CHANNEL_VERSION_PATCH_OFFSET 0
#define CHANNEL_VERSION_PATCH_MASK 0xFF
#define CHANNEL_CONTROL0_AUTO_RECONNECT_OFFSET 4
#define CHANNEL_CONTROL0_AUTO_RECONNECT_MASK 0x10
#define CHANNEL_CONTROL0_AUTO_RECONNECT 0x10
#define CHANNEL_CONTROL0_TX_EN_OFFSET 2
#define CHANNEL_CONTROL0_TX_EN_MASK 0x4
#define CHANNEL_CONTROL0_TX_EN 0x4
#define CHANNEL_CONTROL0_RX_EN_OFFSET 1
#define CHANNEL_CONTROL0_RX_EN_MASK 0x2
#define CHANNEL_CONTROL0_RX_EN 0x2
#define CHANNEL_CONTROL0_LNK_EN_OFFSET 0
#define CHANNEL_CONTROL0_LNK_EN_MASK 0x1
#define CHANNEL_CONTROL0_LNK_EN 0x1
#define CHANNEL_STATUS0_RX_RDY_OFFSET 3
#define CHANNEL_STATUS0_RX_RDY_MASK 0x8
#define CHANNEL_STATUS0_RX_RDY 0x8
#define CHANNEL_STATUS0_TX_RDY_OFFSET 2
#define CHANNEL_STATUS0_TX_RDY_MASK 0x4
#define CHANNEL_STATUS0_TX_RDY 0x4
#define CHANNEL_STATUS0_LNK_RDY_OFFSET 1
#define CHANNEL_STATUS0_LNK_RDY_MASK 0x2
#define CHANNEL_STATUS0_LNK_RDY 0x2
#define CHANNEL_STATUS0_CH_RDY_OFFSET 0
#define CHANNEL_STATUS0_CH_RDY_MASK 0x1
#define CHANNEL_STATUS0_CH_RDY 0x1
#define CHANNEL_LINK_CONTROL0_LTSSM_CRD_LMT_EN_OFFSET 11
#define CHANNEL_LINK_CONTROL0_LTSSM_CRD_LMT_EN_MASK 0x800
#define CHANNEL_LINK_CONTROL0_LTSSM_CRD_LMT_EN 0x800
#define CHANNEL_LINK_CONTROL0_LTSSM_PND_LMT_EN_OFFSET 10
#define CHANNEL_LINK_CONTROL0_LTSSM_PND_LMT_EN_MASK 0x400
#define CHANNEL_LINK_CONTROL0_LTSSM_PND_LMT_EN 0x400
#define CHANNEL_LINK_CONTROL0_LTSSM_U0RECTIMEOUT_LMT_EN_OFFSET 9
#define CHANNEL_LINK_CONTROL0_LTSSM_U0RECTIMEOUT_LMT_EN_MASK 0x200
#define CHANNEL_LINK_CONTROL0_LTSSM_U0RECTIMEOUT_LMT_EN 0x200
#define CHANNEL_LINK_CONTROL0_LTSSM_U0LTIMEOUT_LMT_EN_OFFSET 8
#define CHANNEL_LINK_CONTROL0_LTSSM_U0LTIMEOUT_LMT_EN_MASK 0x100
#define CHANNEL_LINK_CONTROL0_LTSSM_U0LTIMEOUT_LMT_EN 0x100
#define CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_LMT_EN_OFFSET 6
#define CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_LMT_EN_MASK 0x40
#define CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_LMT_EN 0x40
#define CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_RPT_EN_OFFSET 5
#define CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_RPT_EN_MASK 0x20
#define CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_RPT_EN 0x20
#define CHANNEL_LINK_CONTROL0_LTSSM_REC_ACT_RPT_EN_OFFSET 4
#define CHANNEL_LINK_CONTROL0_LTSSM_REC_ACT_RPT_EN_MASK 0x10
#define CHANNEL_LINK_CONTROL0_LTSSM_REC_ACT_RPT_EN 0x10
#define CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_LMT_EN_OFFSET 2
#define CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_LMT_EN_MASK 0x4
#define CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_LMT_EN 0x4
#define CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_RPT_EN_OFFSET 1
#define CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_RPT_EN_MASK 0x2
#define CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_RPT_EN 0x2
#define CHANNEL_LINK_CONTROL0_LTSSM_POL_ACT_RPT_EN_OFFSET 0
#define CHANNEL_LINK_CONTROL0_LTSSM_POL_ACT_RPT_EN_MASK 0x1
#define CHANNEL_LINK_CONTROL0_LTSSM_POL_ACT_RPT_EN 0x1
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LCRD_OFFSET 8
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LCRD_MASK 0x100
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LCRD 0x100
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LGOOD_OFFSET 7
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LGOOD_MASK 0x80
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LGOOD 0x80
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_NRTRY_OFFSET 6
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_NRTRY_MASK 0x40
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_NRTRY 0x40
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_RTRY_OFFSET 5
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_RTRY_MASK 0x20
#define CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_RTRY 0x20
#define CHANNEL_LINK_CONTROL0_TEST_GO2_RECOVERY_OFFSET 4
#define CHANNEL_LINK_CONTROL0_TEST_GO2_RECOVERY_MASK 0x10
#define CHANNEL_LINK_CONTROL0_TEST_GO2_RECOVERY 0x10
#define CHANNEL_LINK_CONTROL0_TEST_DP_TX_HDR_OVRD_TIME_OFFSET 1
#define CHANNEL_LINK_CONTROL0_TEST_DP_TX_HDR_OVRD_TIME_MASK 0x2
#define CHANNEL_LINK_CONTROL0_TEST_DP_TX_HDR_OVRD_TIME 0x2
#define CHANNEL_LINK_CONTROL0_TEST_MEASURE_LATENCY_OFFSET 0
#define CHANNEL_LINK_CONTROL0_TEST_MEASURE_LATENCY_MASK 0x1
#define CHANNEL_LINK_CONTROL0_TEST_MEASURE_LATENCY 0x1
#define CHANNEL_LINK_STATUS0_LTSSM_REC_IDL_OFFSET 6
#define CHANNEL_LINK_STATUS0_LTSSM_REC_IDL_MASK 0x40
#define CHANNEL_LINK_STATUS0_LTSSM_REC_IDL 0x40
#define CHANNEL_LINK_STATUS0_LTSSM_REC_ACT_OFFSET 5
#define CHANNEL_LINK_STATUS0_LTSSM_REC_ACT_MASK 0x20
#define CHANNEL_LINK_STATUS0_LTSSM_REC_ACT 0x20
#define CHANNEL_LINK_STATUS0_LTSSM_U0_OFFSET 4
#define CHANNEL_LINK_STATUS0_LTSSM_U0_MASK 0x10
#define CHANNEL_LINK_STATUS0_LTSSM_U0 0x10
#define CHANNEL_LINK_STATUS0_LTSSM_POL_IDL_OFFSET 3
#define CHANNEL_LINK_STATUS0_LTSSM_POL_IDL_MASK 0x8
#define CHANNEL_LINK_STATUS0_LTSSM_POL_IDL 0x8
#define CHANNEL_LINK_STATUS0_LTSSM_POL_ACT_OFFSET 2
#define CHANNEL_LINK_STATUS0_LTSSM_POL_ACT_MASK 0x4
#define CHANNEL_LINK_STATUS0_LTSSM_POL_ACT 0x4
#define CHANNEL_LINK_STATUS0_LTSSM_DIS_OFFSET 1
#define CHANNEL_LINK_STATUS0_LTSSM_DIS_MASK 0x2
#define CHANNEL_LINK_STATUS0_LTSSM_DIS 0x2
#define CHANNEL_LINK_STATUS0_LTSSM_INACT_OFFSET 0
#define CHANNEL_LINK_STATUS0_LTSSM_INACT_MASK 0x1
#define CHANNEL_LINK_STATUS0_LTSSM_INACT 0x1
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_LATENCY_OFFSET 6
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_LATENCY_MASK 0x40
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_LATENCY 0x40
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_MCUP_OFFSET 5
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_MCUP_MASK 0x20
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_MCUP 0x20
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_FRM_OFFSET 4
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_FRM_MASK 0x10
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_FRM 0x10
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_MCUP_OFFSET 3
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_MCUP_MASK 0x8
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_MCUP 0x8
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_FRM_OFFSET 2
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_FRM_MASK 0x4
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_FRM 0x4
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_POL_FAIL_OFFSET 1
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_POL_FAIL_MASK 0x2
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_POL_FAIL 0x2
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_U0_TO_REC_OFFSET 0
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_U0_TO_REC_MASK 0x1
#define CHANNEL_LINK_STATS0_RD2CLR_CONFIG_U0_TO_REC 0x1
#define CHANNEL_LINK_STATS0_U0_TO_REC_CNT_OFFSET 0
#define CHANNEL_LINK_STATS0_U0_TO_REC_CNT_MASK 0xFFFF
#define CHANNEL_LINK_STATS0_POL_FAIL_CNT_OFFSET 0
#define CHANNEL_LINK_STATS0_POL_FAIL_CNT_MASK 0xFFFF
#define CHANNEL_LINK_STATS0_TX_FRM_CNT_OFFSET 0
#define CHANNEL_LINK_STATS0_TX_FRM_CNT_MASK 0xFFFFFFFF
#define CHANNEL_LINK_STATS0_TX_MCUP_CNT_OFFSET 0
#define CHANNEL_LINK_STATS0_TX_MCUP_CNT_MASK 0xFFFFFFFF
#define CHANNEL_LINK_STATS0_RX_FRM_CNT_OFFSET 0
#define CHANNEL_LINK_STATS0_RX_FRM_CNT_MASK 0xFFFFFFFF
#define CHANNEL_LINK_STATS0_RX_MCUP_CNT_OFFSET 0
#define CHANNEL_LINK_STATS0_RX_MCUP_CNT_MASK 0xFFFFFFFF
#define CHANNEL_LINK_STATS0_LATENCY_CNT_OFFSET 0
#define CHANNEL_LINK_STATS0_LATENCY_CNT_MASK 0xFFFFFFFF
#define CHANNEL_TX_CONTROL0_DP_MCUP_PLD_MAX_CYCLES_OFFSET 16
#define CHANNEL_TX_CONTROL0_DP_MCUP_PLD_MAX_CYCLES_MASK 0xF0000
#define CHANNEL_TX_CONTROL0_DP_FORCE_RETRY_OFFSET 13
#define CHANNEL_TX_CONTROL0_DP_FORCE_RETRY_MASK 0x2000
#define CHANNEL_TX_CONTROL0_DP_FORCE_RETRY 0x2000
#define CHANNEL_TX_CONTROL0_DP_BLOCK_RETRY_OFFSET 12
#define CHANNEL_TX_CONTROL0_DP_BLOCK_RETRY_MASK 0x1000
#define CHANNEL_TX_CONTROL0_DP_BLOCK_RETRY 0x1000
#define CHANNEL_TX_CONTROL0_DP_BW_SRC_OFFSET 8
#define CHANNEL_TX_CONTROL0_DP_BW_SRC_MASK 0x100
#define CHANNEL_TX_CONTROL0_DP_BW_SRC 0x100
#define CHANNEL_TX_CONTROL0_DP_DRP_ON_PKT_ERR_OFFSET 5
#define CHANNEL_TX_CONTROL0_DP_DRP_ON_PKT_ERR_MASK 0x20
#define CHANNEL_TX_CONTROL0_DP_DRP_ON_PKT_ERR 0x20
#define CHANNEL_TX_CONTROL0_DP_FLW_CTRL_EN_OFFSET 4
#define CHANNEL_TX_CONTROL0_DP_FLW_CTRL_EN_MASK 0x10
#define CHANNEL_TX_CONTROL0_DP_FLW_CTRL_EN 0x10
#define CHANNEL_TX_CONTROL0_DP_HYS_EN_OFFSET 1
#define CHANNEL_TX_CONTROL0_DP_HYS_EN_MASK 0x2
#define CHANNEL_TX_CONTROL0_DP_HYS_EN 0x2
#define CHANNEL_TX_CONTROL0_DP_DRP_ON_SOP_OFFSET 0
#define CHANNEL_TX_CONTROL0_DP_DRP_ON_SOP_MASK 0x1
#define CHANNEL_TX_CONTROL0_DP_DRP_ON_SOP 0x1
#define CHANNEL_TX_CONTROL0_RTRY_BUF_BASE_ADDR_OFFSET 0
#define CHANNEL_TX_CONTROL0_RTRY_BUF_BASE_ADDR_MASK 0xFFFFFFFF
#define CHANNEL_TX_CONTROL0_FIFO_HYS_HI_OFFSET 16
#define CHANNEL_TX_CONTROL0_FIFO_HYS_HI_MASK 0xFFFF0000
#define CHANNEL_TX_CONTROL0_FIFO_HYS_LO_OFFSET 0
#define CHANNEL_TX_CONTROL0_FIFO_HYS_LO_MASK 0xFFFF
#define CHANNEL_TX_CONTROL0_BANDWIDTH_LIMIT_HI_OFFSET 16
#define CHANNEL_TX_CONTROL0_BANDWIDTH_LIMIT_HI_MASK 0xFFFF0000
#define CHANNEL_TX_CONTROL0_BANDWIDTH_LIMIT_LO_OFFSET 0
#define CHANNEL_TX_CONTROL0_BANDWIDTH_LIMIT_LO_MASK 0xFFFF
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH_OFFSET 11
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH_MASK 0x800
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH 0x800
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR_OFFSET 10
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR_MASK 0x400
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR 0x400
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR_OFFSET 9
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR_MASK 0x200
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR 0x200
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR_OFFSET 8
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR_MASK 0x100
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR 0x100
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR_OFFSET 7
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR_MASK 0x80
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR 0x80
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR_OFFSET 6
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR_MASK 0x40
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR 0x40
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR_OFFSET 5
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR_MASK 0x20
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR 0x20
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT_OFFSET 4
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT_MASK 0x10
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT 0x10
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT_OFFSET 3
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT_MASK 0x8
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT 0x8
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_NFIFO_OFFSET 2
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_NFIFO_MASK 0x4
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_NFIFO 0x4
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_PFIFO_OFFSET 1
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_PFIFO_MASK 0x2
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_PFIFO 0x2
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO_OFFSET 0
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO_MASK 0x1
#define CHANNEL_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO 0x1
#define CHANNEL_TX_STATS0_CMD_FIFO_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_CMD_FIFO_CNT_MASK 0xFF
#define CHANNEL_TX_STATS0_DP_PFIFO_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_DP_PFIFO_CNT_MASK 0xFFFFFFFF
#define CHANNEL_TX_STATS0_DP_NFIFO_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_DP_NFIFO_CNT_MASK 0xFFFFFFFF
#define CHANNEL_TX_STATS0_DP_FIFO_RD_DRP_PKT_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_DP_FIFO_RD_DRP_PKT_CNT_MASK 0xFF
#define CHANNEL_TX_STATS0_DP_FIFO_WR_DRP_PKT_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_DP_FIFO_WR_DRP_PKT_CNT_MASK 0xFF
#define CHANNEL_TX_STATS0_DP_FIFO_WR_PKT_ERR_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_DP_FIFO_WR_PKT_ERR_CNT_MASK 0xFF
#define CHANNEL_TX_STATS0_DP_FIFO_FIFO_FULL_ERR_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_DP_FIFO_FIFO_FULL_ERR_CNT_MASK 0xFF
#define CHANNEL_TX_STATS0_DP_FIFO_PKT_MAX_ERR_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_DP_FIFO_PKT_MAX_ERR_CNT_MASK 0xFF
#define CHANNEL_TX_STATS0_DP_GRD_NO_SOP_ERR_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_DP_GRD_NO_SOP_ERR_CNT_MASK 0xFF
#define CHANNEL_TX_STATS0_DP_GRD_NO_EOP_ERR_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_DP_GRD_NO_EOP_ERR_CNT_MASK 0xFF
#define CHANNEL_TX_STATS0_DP_GRD_MAX_ERR_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_DP_GRD_MAX_ERR_CNT_MASK 0xFF
#define CHANNEL_TX_STATS0_BANDWIDTH_CNT_OFFSET 0
#define CHANNEL_TX_STATS0_BANDWIDTH_CNT_MASK 0xFFFFFFFF
#define CHANNEL_RX_CONTROL0_DP_HYS_EN_OFFSET 5
#define CHANNEL_RX_CONTROL0_DP_HYS_EN_MASK 0x20
#define CHANNEL_RX_CONTROL0_DP_HYS_EN 0x20
#define CHANNEL_RX_CONTROL0_DP_MIN_LVL_MODE_OFFSET 4
#define CHANNEL_RX_CONTROL0_DP_MIN_LVL_MODE_MASK 0x10
#define CHANNEL_RX_CONTROL0_DP_MIN_LVL_MODE 0x10
#define CHANNEL_RX_CONTROL0_DP_DRP_ON_PKT_ERR_OFFSET 3
#define CHANNEL_RX_CONTROL0_DP_DRP_ON_PKT_ERR_MASK 0x8
#define CHANNEL_RX_CONTROL0_DP_DRP_ON_PKT_ERR 0x8
#define CHANNEL_RX_CONTROL0_DP_DRP_ON_SOP_OFFSET 2
#define CHANNEL_RX_CONTROL0_DP_DRP_ON_SOP_MASK 0x4
#define CHANNEL_RX_CONTROL0_DP_DRP_ON_SOP 0x4
#define CHANNEL_RX_CONTROL0_DP_PKT_STRM_OFFSET 1
#define CHANNEL_RX_CONTROL0_DP_PKT_STRM_MASK 0x2
#define CHANNEL_RX_CONTROL0_DP_PKT_STRM 0x2
#define CHANNEL_RX_CONTROL0_NTFY_MODE_LMT_OFFSET 0
#define CHANNEL_RX_CONTROL0_NTFY_MODE_LMT_MASK 0xFFFF
#define CHANNEL_RX_CONTROL0_HYS_LO_LVL_OFFSET 0
#define CHANNEL_RX_CONTROL0_HYS_LO_LVL_MASK 0xFFFF
#define CHANNEL_RX_CONTROL0_HYS_HI_LVL_OFFSET 0
#define CHANNEL_RX_CONTROL0_HYS_HI_LVL_MASK 0xFFFF
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR_OFFSET 10
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR_MASK 0x400
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR 0x400
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR_OFFSET 9
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR_MASK 0x200
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR 0x200
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR_OFFSET 8
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR_MASK 0x100
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR 0x100
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR_OFFSET 7
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR_MASK 0x80
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR 0x80
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR_OFFSET 6
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR_MASK 0x40
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR 0x40
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR_OFFSET 5
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR_MASK 0x20
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR 0x20
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT_WR_OFFSET 4
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT_WR_MASK 0x10
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT_WR 0x10
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT_OFFSET 3
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT_MASK 0x8
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT 0x8
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_NFIFO_OFFSET 1
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_NFIFO_MASK 0x2
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_NFIFO 0x2
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_PFIFO_OFFSET 0
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_PFIFO_MASK 0x1
#define CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_PFIFO 0x1
#define CHANNEL_RX_STATS0_DP_PFIFO_CNT_OFFSET 0
#define CHANNEL_RX_STATS0_DP_PFIFO_CNT_MASK 0xFFFFFFFF
#define CHANNEL_RX_STATS0_DP_NFIFO_CNT_OFFSET 0
#define CHANNEL_RX_STATS0_DP_NFIFO_CNT_MASK 0xFFFFFFFF
#define CHANNEL_RX_STATS0_DP_FIFO_RD_DRP_PKT_CNT_OFFSET 0
#define CHANNEL_RX_STATS0_DP_FIFO_RD_DRP_PKT_CNT_MASK 0xFF
#define CHANNEL_RX_STATS0_DP_FIFO_WR_DRP_PKT_CNT_OFFSET 0
#define CHANNEL_RX_STATS0_DP_FIFO_WR_DRP_PKT_CNT_MASK 0xFF
#define CHANNEL_RX_STATS0_DP_FIFO_WR_PKT_ERR_CNT_OFFSET 0
#define CHANNEL_RX_STATS0_DP_FIFO_WR_PKT_ERR_CNT_MASK 0xFF
#define CHANNEL_RX_STATS0_DP_FIFO_FIFO_FULL_ERR_CNT_OFFSET 0
#define CHANNEL_RX_STATS0_DP_FIFO_FIFO_FULL_ERR_CNT_MASK 0xFF
#define CHANNEL_RX_STATS0_DP_FIFO_PKT_MAX_ERR_CNT_OFFSET 0
#define CHANNEL_RX_STATS0_DP_FIFO_PKT_MAX_ERR_CNT_MASK 0xFF
#define CHANNEL_RX_STATS0_DP_GRD_NO_SOP_ERR_CNT_OFFSET 0
#define CHANNEL_RX_STATS0_DP_GRD_NO_SOP_ERR_CNT_MASK 0xFF
#define CHANNEL_RX_STATS0_DP_GRD_NO_EOP_ERR_CNT_OFFSET 0
#define CHANNEL_RX_STATS0_DP_GRD_NO_EOP_ERR_CNT_MASK 0xFF
#define CHANNEL_RX_STATS0_DP_GRD_MAX_ERR_CNT_OFFSET 0
#define CHANNEL_RX_STATS0_DP_GRD_MAX_ERR_CNT_MASK 0xFF
#define CHANNEL_IRQ0_ENABLE_LATENCY_MEASUREMENT_OFFSET 20
#define CHANNEL_IRQ0_ENABLE_LATENCY_MEASUREMENT_MASK 0x100000
#define CHANNEL_IRQ0_ENABLE_LATENCY_MEASUREMENT 0x100000
#define CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_WR_FLOW_CTRL_OFFSET 19
#define CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_WR_FLOW_CTRL_MASK 0x80000
#define CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_WR_FLOW_CTRL 0x80000
#define CHANNEL_IRQ0_ENABLE_CH_RX_GRD_MAX_ERR_OFFSET 18
#define CHANNEL_IRQ0_ENABLE_CH_RX_GRD_MAX_ERR_MASK 0x40000
#define CHANNEL_IRQ0_ENABLE_CH_RX_GRD_MAX_ERR 0x40000
#define CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_EOP_ERR_OFFSET 17
#define CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_EOP_ERR_MASK 0x20000
#define CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_EOP_ERR 0x20000
#define CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_SOP_ERR_OFFSET 16
#define CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_SOP_ERR_MASK 0x10000
#define CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_SOP_ERR 0x10000
#define CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_FULL_ERR_OFFSET 15
#define CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_FULL_ERR_MASK 0x8000
#define CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_FULL_ERR 0x8000
#define CHANNEL_IRQ0_ENABLE_CH_TX_GRD_MAX_ERR_OFFSET 14
#define CHANNEL_IRQ0_ENABLE_CH_TX_GRD_MAX_ERR_MASK 0x4000
#define CHANNEL_IRQ0_ENABLE_CH_TX_GRD_MAX_ERR 0x4000
#define CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_EOP_ERR_OFFSET 13
#define CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_EOP_ERR_MASK 0x2000
#define CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_EOP_ERR 0x2000
#define CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_SOP_ERR_OFFSET 12
#define CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_SOP_ERR_MASK 0x1000
#define CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_SOP_ERR 0x1000
#define CHANNEL_IRQ0_ENABLE_CH_TX_CMD_FIFO_FULL_ERR_OFFSET 11
#define CHANNEL_IRQ0_ENABLE_CH_TX_CMD_FIFO_FULL_ERR_MASK 0x800
#define CHANNEL_IRQ0_ENABLE_CH_TX_CMD_FIFO_FULL_ERR 0x800
#define CHANNEL_IRQ0_ENABLE_CH_TX_FIFO_FULL_ERR_OFFSET 10
#define CHANNEL_IRQ0_ENABLE_CH_TX_FIFO_FULL_ERR_MASK 0x400
#define CHANNEL_IRQ0_ENABLE_CH_TX_FIFO_FULL_ERR 0x400
#define CHANNEL_IRQ0_ENABLE_LTSSM_REC_IDL_OFFSET 9
#define CHANNEL_IRQ0_ENABLE_LTSSM_REC_IDL_MASK 0x200
#define CHANNEL_IRQ0_ENABLE_LTSSM_REC_IDL 0x200
#define CHANNEL_IRQ0_ENABLE_LTSSM_REC_ACT_OFFSET 8
#define CHANNEL_IRQ0_ENABLE_LTSSM_REC_ACT_MASK 0x100
#define CHANNEL_IRQ0_ENABLE_LTSSM_REC_ACT 0x100
#define CHANNEL_IRQ0_ENABLE_LTSSM_U0_OFFSET 7
#define CHANNEL_IRQ0_ENABLE_LTSSM_U0_MASK 0x80
#define CHANNEL_IRQ0_ENABLE_LTSSM_U0 0x80
#define CHANNEL_IRQ0_ENABLE_LTSSM_POL_IDL_OFFSET 6
#define CHANNEL_IRQ0_ENABLE_LTSSM_POL_IDL_MASK 0x40
#define CHANNEL_IRQ0_ENABLE_LTSSM_POL_IDL 0x40
#define CHANNEL_IRQ0_ENABLE_LTSSM_POL_ACT_OFFSET 5
#define CHANNEL_IRQ0_ENABLE_LTSSM_POL_ACT_MASK 0x20
#define CHANNEL_IRQ0_ENABLE_LTSSM_POL_ACT 0x20
#define CHANNEL_IRQ0_ENABLE_LTSSM_DIS_OFFSET 4
#define CHANNEL_IRQ0_ENABLE_LTSSM_DIS_MASK 0x10
#define CHANNEL_IRQ0_ENABLE_LTSSM_DIS 0x10
#define CHANNEL_IRQ0_ENABLE_LTSSM_INACT_OFFSET 3
#define CHANNEL_IRQ0_ENABLE_LTSSM_INACT_MASK 0x8
#define CHANNEL_IRQ0_ENABLE_LTSSM_INACT 0x8
#define CHANNEL_IRQ0_ENABLE_CH_READY_OFFSET 2
#define CHANNEL_IRQ0_ENABLE_CH_READY_MASK 0x4
#define CHANNEL_IRQ0_ENABLE_CH_READY 0x4
#define CHANNEL_IRQ0_ENABLE_CH_RX_READY_OFFSET 1
#define CHANNEL_IRQ0_ENABLE_CH_RX_READY_MASK 0x2
#define CHANNEL_IRQ0_ENABLE_CH_RX_READY 0x2
#define CHANNEL_IRQ0_ENABLE_CH_TX_READY_OFFSET 0
#define CHANNEL_IRQ0_ENABLE_CH_TX_READY_MASK 0x1
#define CHANNEL_IRQ0_ENABLE_CH_TX_READY 0x1
#define CHANNEL_IRQ0_PENDING_LATENCY_MEASUREMENT_OFFSET 20
#define CHANNEL_IRQ0_PENDING_LATENCY_MEASUREMENT_MASK 0x100000
#define CHANNEL_IRQ0_PENDING_LATENCY_MEASUREMENT 0x100000
#define CHANNEL_IRQ0_PENDING_CH_RX_FIFO_WR_FLOW_CTRL_OFFSET 19
#define CHANNEL_IRQ0_PENDING_CH_RX_FIFO_WR_FLOW_CTRL_MASK 0x80000
#define CHANNEL_IRQ0_PENDING_CH_RX_FIFO_WR_FLOW_CTRL 0x80000
#define CHANNEL_IRQ0_PENDING_CH_RX_GRD_MAX_ERR_OFFSET 18
#define CHANNEL_IRQ0_PENDING_CH_RX_GRD_MAX_ERR_MASK 0x40000
#define CHANNEL_IRQ0_PENDING_CH_RX_GRD_MAX_ERR 0x40000
#define CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_EOP_ERR_OFFSET 17
#define CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_EOP_ERR_MASK 0x20000
#define CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_EOP_ERR 0x20000
#define CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_SOP_ERR_OFFSET 16
#define CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_SOP_ERR_MASK 0x10000
#define CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_SOP_ERR 0x10000
#define CHANNEL_IRQ0_PENDING_CH_RX_FIFO_FULL_ERR_OFFSET 15
#define CHANNEL_IRQ0_PENDING_CH_RX_FIFO_FULL_ERR_MASK 0x8000
#define CHANNEL_IRQ0_PENDING_CH_RX_FIFO_FULL_ERR 0x8000
#define CHANNEL_IRQ0_PENDING_CH_TX_GRD_MAX_ERR_OFFSET 14
#define CHANNEL_IRQ0_PENDING_CH_TX_GRD_MAX_ERR_MASK 0x4000
#define CHANNEL_IRQ0_PENDING_CH_TX_GRD_MAX_ERR 0x4000
#define CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_EOP_ERR_OFFSET 13
#define CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_EOP_ERR_MASK 0x2000
#define CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_EOP_ERR 0x2000
#define CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_SOP_ERR_OFFSET 12
#define CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_SOP_ERR_MASK 0x1000
#define CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_SOP_ERR 0x1000
#define CHANNEL_IRQ0_PENDING_CH_TX_CMD_FIFO_FULL_ERR_OFFSET 11
#define CHANNEL_IRQ0_PENDING_CH_TX_CMD_FIFO_FULL_ERR_MASK 0x800
#define CHANNEL_IRQ0_PENDING_CH_TX_CMD_FIFO_FULL_ERR 0x800
#define CHANNEL_IRQ0_PENDING_CH_TX_FIFO_FULL_ERR_OFFSET 10
#define CHANNEL_IRQ0_PENDING_CH_TX_FIFO_FULL_ERR_MASK 0x400
#define CHANNEL_IRQ0_PENDING_CH_TX_FIFO_FULL_ERR 0x400
#define CHANNEL_IRQ0_PENDING_LTSSM_REC_IDL_OFFSET 9
#define CHANNEL_IRQ0_PENDING_LTSSM_REC_IDL_MASK 0x200
#define CHANNEL_IRQ0_PENDING_LTSSM_REC_IDL 0x200
#define CHANNEL_IRQ0_PENDING_LTSSM_REC_ACT_OFFSET 8
#define CHANNEL_IRQ0_PENDING_LTSSM_REC_ACT_MASK 0x100
#define CHANNEL_IRQ0_PENDING_LTSSM_REC_ACT 0x100
#define CHANNEL_IRQ0_PENDING_LTSSM_U0_OFFSET 7
#define CHANNEL_IRQ0_PENDING_LTSSM_U0_MASK 0x80
#define CHANNEL_IRQ0_PENDING_LTSSM_U0 0x80
#define CHANNEL_IRQ0_PENDING_LTSSM_POL_IDL_OFFSET 6
#define CHANNEL_IRQ0_PENDING_LTSSM_POL_IDL_MASK 0x40
#define CHANNEL_IRQ0_PENDING_LTSSM_POL_IDL 0x40
#define CHANNEL_IRQ0_PENDING_LTSSM_POL_ACT_OFFSET 5
#define CHANNEL_IRQ0_PENDING_LTSSM_POL_ACT_MASK 0x20
#define CHANNEL_IRQ0_PENDING_LTSSM_POL_ACT 0x20
#define CHANNEL_IRQ0_PENDING_LTSSM_DIS_OFFSET 4
#define CHANNEL_IRQ0_PENDING_LTSSM_DIS_MASK 0x10
#define CHANNEL_IRQ0_PENDING_LTSSM_DIS 0x10
#define CHANNEL_IRQ0_PENDING_LTSSM_INACT_OFFSET 3
#define CHANNEL_IRQ0_PENDING_LTSSM_INACT_MASK 0x8
#define CHANNEL_IRQ0_PENDING_LTSSM_INACT 0x8
#define CHANNEL_IRQ0_PENDING_CH_READY_OFFSET 2
#define CHANNEL_IRQ0_PENDING_CH_READY_MASK 0x4
#define CHANNEL_IRQ0_PENDING_CH_READY 0x4
#define CHANNEL_IRQ0_PENDING_CH_RX_READY_OFFSET 1
#define CHANNEL_IRQ0_PENDING_CH_RX_READY_MASK 0x2
#define CHANNEL_IRQ0_PENDING_CH_RX_READY 0x2
#define CHANNEL_IRQ0_PENDING_CH_TX_READY_OFFSET 0
#define CHANNEL_IRQ0_PENDING_CH_TX_READY_MASK 0x1
#define CHANNEL_IRQ0_PENDING_CH_TX_READY 0x1
#define CHANNEL_IRQ0_PENDING_IRQ_LATENCY_MEASUREMENT_OFFSET 20
#define CHANNEL_IRQ0_PENDING_IRQ_LATENCY_MEASUREMENT_MASK 0x100000
#define CHANNEL_IRQ0_PENDING_IRQ_LATENCY_MEASUREMENT 0x100000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_WR_FLOW_CTRL_OFFSET 19
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_WR_FLOW_CTRL_MASK 0x80000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_WR_FLOW_CTRL 0x80000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_MAX_ERR_OFFSET 18
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_MAX_ERR_MASK 0x40000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_MAX_ERR 0x40000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_EOP_ERR_OFFSET 17
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_EOP_ERR_MASK 0x20000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_EOP_ERR 0x20000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_SOP_ERR_OFFSET 16
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_SOP_ERR_MASK 0x10000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_SOP_ERR 0x10000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_FULL_ERR_OFFSET 15
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_FULL_ERR_MASK 0x8000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_FULL_ERR 0x8000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_MAX_ERR_OFFSET 14
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_MAX_ERR_MASK 0x4000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_MAX_ERR 0x4000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_EOP_ERR_OFFSET 13
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_EOP_ERR_MASK 0x2000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_EOP_ERR 0x2000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_SOP_ERR_OFFSET 12
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_SOP_ERR_MASK 0x1000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_SOP_ERR 0x1000
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_CMD_FIFO_FULL_ERR_OFFSET 11
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_CMD_FIFO_FULL_ERR_MASK 0x800
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_CMD_FIFO_FULL_ERR 0x800
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_FIFO_FULL_ERR_OFFSET 10
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_FIFO_FULL_ERR_MASK 0x400
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_FIFO_FULL_ERR 0x400
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_IDL_OFFSET 9
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_IDL_MASK 0x200
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_IDL 0x200
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_ACT_OFFSET 8
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_ACT_MASK 0x100
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_ACT 0x100
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_U0_OFFSET 7
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_U0_MASK 0x80
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_U0 0x80
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_IDL_OFFSET 6
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_IDL_MASK 0x40
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_IDL 0x40
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_ACT_OFFSET 5
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_ACT_MASK 0x20
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_ACT 0x20
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_DIS_OFFSET 4
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_DIS_MASK 0x10
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_DIS 0x10
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_INACT_OFFSET 3
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_INACT_MASK 0x8
#define CHANNEL_IRQ0_PENDING_IRQ_LTSSM_INACT 0x8
#define CHANNEL_IRQ0_PENDING_IRQ_CH_READY_OFFSET 2
#define CHANNEL_IRQ0_PENDING_IRQ_CH_READY_MASK 0x4
#define CHANNEL_IRQ0_PENDING_IRQ_CH_READY 0x4
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_READY_OFFSET 1
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_READY_MASK 0x2
#define CHANNEL_IRQ0_PENDING_IRQ_CH_RX_READY 0x2
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_READY_OFFSET 0
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_READY_MASK 0x1
#define CHANNEL_IRQ0_PENDING_IRQ_CH_TX_READY 0x1
#define CHANNEL_IRQ0_RAW_LATENCY_MEASUREMENT_OFFSET 20
#define CHANNEL_IRQ0_RAW_LATENCY_MEASUREMENT_MASK 0x100000
#define CHANNEL_IRQ0_RAW_LATENCY_MEASUREMENT 0x100000
#define CHANNEL_IRQ0_RAW_CH_RX_FIFO_WR_FLOW_CTRL_OFFSET 19
#define CHANNEL_IRQ0_RAW_CH_RX_FIFO_WR_FLOW_CTRL_MASK 0x80000
#define CHANNEL_IRQ0_RAW_CH_RX_FIFO_WR_FLOW_CTRL 0x80000
#define CHANNEL_IRQ0_RAW_CH_RX_GRD_MAX_ERR_OFFSET 18
#define CHANNEL_IRQ0_RAW_CH_RX_GRD_MAX_ERR_MASK 0x40000
#define CHANNEL_IRQ0_RAW_CH_RX_GRD_MAX_ERR 0x40000
#define CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_EOP_ERR_OFFSET 17
#define CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_EOP_ERR_MASK 0x20000
#define CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_EOP_ERR 0x20000
#define CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_SOP_ERR_OFFSET 16
#define CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_SOP_ERR_MASK 0x10000
#define CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_SOP_ERR 0x10000
#define CHANNEL_IRQ0_RAW_CH_RX_FIFO_FULL_ERR_OFFSET 15
#define CHANNEL_IRQ0_RAW_CH_RX_FIFO_FULL_ERR_MASK 0x8000
#define CHANNEL_IRQ0_RAW_CH_RX_FIFO_FULL_ERR 0x8000
#define CHANNEL_IRQ0_RAW_CH_TX_GRD_MAX_ERR_OFFSET 14
#define CHANNEL_IRQ0_RAW_CH_TX_GRD_MAX_ERR_MASK 0x4000
#define CHANNEL_IRQ0_RAW_CH_TX_GRD_MAX_ERR 0x4000
#define CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_EOP_ERR_OFFSET 13
#define CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_EOP_ERR_MASK 0x2000
#define CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_EOP_ERR 0x2000
#define CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_SOP_ERR_OFFSET 12
#define CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_SOP_ERR_MASK 0x1000
#define CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_SOP_ERR 0x1000
#define CHANNEL_IRQ0_RAW_CH_TX_CMD_FIFO_FULL_ERR_OFFSET 11
#define CHANNEL_IRQ0_RAW_CH_TX_CMD_FIFO_FULL_ERR_MASK 0x800
#define CHANNEL_IRQ0_RAW_CH_TX_CMD_FIFO_FULL_ERR 0x800
#define CHANNEL_IRQ0_RAW_CH_TX_FIFO_FULL_ERR_OFFSET 10
#define CHANNEL_IRQ0_RAW_CH_TX_FIFO_FULL_ERR_MASK 0x400
#define CHANNEL_IRQ0_RAW_CH_TX_FIFO_FULL_ERR 0x400
#define CHANNEL_IRQ0_RAW_LTSSM_REC_IDL_OFFSET 9
#define CHANNEL_IRQ0_RAW_LTSSM_REC_IDL_MASK 0x200
#define CHANNEL_IRQ0_RAW_LTSSM_REC_IDL 0x200
#define CHANNEL_IRQ0_RAW_LTSSM_REC_ACT_OFFSET 8
#define CHANNEL_IRQ0_RAW_LTSSM_REC_ACT_MASK 0x100
#define CHANNEL_IRQ0_RAW_LTSSM_REC_ACT 0x100
#define CHANNEL_IRQ0_RAW_LTSSM_U0_OFFSET 7
#define CHANNEL_IRQ0_RAW_LTSSM_U0_MASK 0x80
#define CHANNEL_IRQ0_RAW_LTSSM_U0 0x80
#define CHANNEL_IRQ0_RAW_LTSSM_POL_IDL_OFFSET 6
#define CHANNEL_IRQ0_RAW_LTSSM_POL_IDL_MASK 0x40
#define CHANNEL_IRQ0_RAW_LTSSM_POL_IDL 0x40
#define CHANNEL_IRQ0_RAW_LTSSM_POL_ACT_OFFSET 5
#define CHANNEL_IRQ0_RAW_LTSSM_POL_ACT_MASK 0x20
#define CHANNEL_IRQ0_RAW_LTSSM_POL_ACT 0x20
#define CHANNEL_IRQ0_RAW_LTSSM_DIS_OFFSET 4
#define CHANNEL_IRQ0_RAW_LTSSM_DIS_MASK 0x10
#define CHANNEL_IRQ0_RAW_LTSSM_DIS 0x10
#define CHANNEL_IRQ0_RAW_LTSSM_INACT_OFFSET 3
#define CHANNEL_IRQ0_RAW_LTSSM_INACT_MASK 0x8
#define CHANNEL_IRQ0_RAW_LTSSM_INACT 0x8
#define CHANNEL_IRQ0_RAW_CH_READY_OFFSET 2
#define CHANNEL_IRQ0_RAW_CH_READY_MASK 0x4
#define CHANNEL_IRQ0_RAW_CH_READY 0x4
#define CHANNEL_IRQ0_RAW_CH_RX_READY_OFFSET 1
#define CHANNEL_IRQ0_RAW_CH_RX_READY_MASK 0x2
#define CHANNEL_IRQ0_RAW_CH_RX_READY 0x2
#define CHANNEL_IRQ0_RAW_CH_TX_READY_OFFSET 0
#define CHANNEL_IRQ0_RAW_CH_TX_READY_MASK 0x1
#define CHANNEL_IRQ0_RAW_CH_TX_READY 0x1
#define CHANNEL_TEST_MODE_TX_VERSION_MAJOR_OFFSET 16
#define CHANNEL_TEST_MODE_TX_VERSION_MAJOR_MASK 0xFF0000
#define CHANNEL_TEST_MODE_TX_VERSION_MINOR_OFFSET 8
#define CHANNEL_TEST_MODE_TX_VERSION_MINOR_MASK 0xFF00
#define CHANNEL_TEST_MODE_TX_VERSION_PATCH_OFFSET 0
#define CHANNEL_TEST_MODE_TX_VERSION_PATCH_MASK 0xFF
#define CHANNEL_TEST_MODE_TX_CONFIG0_IWG_CNT_SETTING_OFFSET 0
#define CHANNEL_TEST_MODE_TX_CONFIG0_IWG_CNT_SETTING_MASK 0x7FF
#define CHANNEL_TEST_MODE_TX_CONFIG0_IFG_CNT_SETTING_OFFSET 0
#define CHANNEL_TEST_MODE_TX_CONFIG0_IFG_CNT_SETTING_MASK 0x7FF
#define CHANNEL_TEST_MODE_TX_CONFIG0_PKT_CNT_SETTING_OFFSET 0
#define CHANNEL_TEST_MODE_TX_CONFIG0_PKT_CNT_SETTING_MASK 0x7FF
#define CHANNEL_TEST_MODE_TX_CONFIG0_PKT_SIZE_SETTING_OFFSET 0
#define CHANNEL_TEST_MODE_TX_CONFIG0_PKT_SIZE_SETTING_MASK 0x7FF
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_RANDOM_OFFSET 4
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_RANDOM_MASK 0x10
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_RANDOM 0x10
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_THROTTLE_OFFSET 3
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_THROTTLE_MASK 0x8
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_THROTTLE 0x8
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_MODE_OFFSET 2
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_MODE_MASK 0x4
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_MODE 0x4
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_ENABLE_OFFSET 1
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_ENABLE_MASK 0x2
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_ENABLE 0x2
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_GO_OFFSET 0
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_GO_MASK 0x1
#define CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_GO 0x1
#define CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_WAIT_COUNT_OFFSET 1
#define CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_WAIT_COUNT_MASK 0x2
#define CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_WAIT_COUNT 0x2
#define CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_PKT_COUNT_OFFSET 0
#define CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_PKT_COUNT_MASK 0x1
#define CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_PKT_COUNT 0x1
#define CHANNEL_TEST_MODE_TX_STATS0_WAIT_COUNT_WAIT_COUNT_OFFSET 0
#define CHANNEL_TEST_MODE_TX_STATS0_WAIT_COUNT_WAIT_COUNT_MASK 0xFFFFFFFF
#define CHANNEL_TEST_MODE_TX_STATS0_PKT_COUNT_PKT_COUNT_OFFSET 0
#define CHANNEL_TEST_MODE_TX_STATS0_PKT_COUNT_PKT_COUNT_MASK 0xFFFFFFFF
#define CHANNEL_TEST_MODE_RX_VERSION_MAJOR_OFFSET 16
#define CHANNEL_TEST_MODE_RX_VERSION_MAJOR_MASK 0xFF0000
#define CHANNEL_TEST_MODE_RX_VERSION_MINOR_OFFSET 8
#define CHANNEL_TEST_MODE_RX_VERSION_MINOR_MASK 0xFF00
#define CHANNEL_TEST_MODE_RX_VERSION_PATCH_OFFSET 0
#define CHANNEL_TEST_MODE_RX_VERSION_PATCH_MASK 0xFF
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_EN_RXFLW_OFFSET 3
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_EN_RXFLW_MASK 0x8
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_EN_RXFLW 0x8
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_MODE_OFFSET 2
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_MODE_MASK 0x4
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_MODE 0x4
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_ENABLE_OFFSET 1
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_ENABLE_MASK 0x2
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_ENABLE 0x2
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_GO_OFFSET 0
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_GO_MASK 0x1
#define CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_GO 0x1
#define CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_ERR_COUNT_OFFSET 1
#define CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_ERR_COUNT_MASK 0x2
#define CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_ERR_COUNT 0x2
#define CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_PKT_COUNT_OFFSET 0
#define CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_PKT_COUNT_MASK 0x1
#define CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_PKT_COUNT 0x1
#define CHANNEL_TEST_MODE_RX_STATS0_ERR_COUNT_ERR_COUNT_OFFSET 0
#define CHANNEL_TEST_MODE_RX_STATS0_ERR_COUNT_ERR_COUNT_MASK 0xFFFFFFFF
#define CHANNEL_TEST_MODE_RX_STATS0_PKT_COUNT_PKT_COUNT_OFFSET 0
#define CHANNEL_TEST_MODE_RX_STATS0_PKT_COUNT_PKT_COUNT_MASK 0xFFFFFFFF
#endif /* _CHANNEL_REGS_H_ */

/* end */
