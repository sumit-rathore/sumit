/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Remco van Steeden*/
/* generated by      : Remco.vanSteeden*/
/* generated from    : C:\cygwin64\home\Remco.VanSteeden\blackbird_rls_20191024\f_blackbird_a7_core\regs\ids\bb_chip\bb_chip_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/* parameter macros  */
#define P_CLIENT_SIZE 2

/*//////////////////  Chip : bb_chip ///////////////////*/

#ifndef _BB_CHIP_REGS_H_
#define _BB_CHIP_REGS_H_

/*block : leon2 */


#ifndef __ASSEMBLER__
/*section : mem_ctrl */

#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t io_bus_width : 2;           /* 28:27 SW=rw HW=ro 0x0 */
            uint32_t bus_rdy_en : 1;           /* 26 SW=rw HW=ro 0x0 */
            uint32_t bus_err_en : 1;           /* 25 SW=rw HW=ro 0x0 */
            
            uint32_t resv24 : 1;
            uint32_t io_ws : 4;           /* 23:20 SW=rw HW=ro 0x0 */
            uint32_t io_en : 1;           /* 19 SW=rw HW=ro 0x0 */
            
            uint32_t resv12 : 7;
            uint32_t prom_wr_en : 1;           /* 11 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 1;
            uint32_t prom_width : 2;           /* 9:8 SW=rw HW=ro 0x3 */
            uint32_t prom_wr_ws : 4;           /* 7:4 SW=rw HW=ro 0x1 */
            uint32_t prom_rd_ws : 4;           /* 3:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t prom_rd_ws : 4;           /* 0:3 SW=rw HW=ro 0x1 */
            uint32_t prom_wr_ws : 4;           /* 4:7 SW=rw HW=ro 0x1 */
            uint32_t prom_width : 2;           /* 8:9 SW=rw HW=ro 0x3 */
            
            uint32_t resv10 : 1;
            uint32_t prom_wr_en : 1;           /* 11 SW=rw HW=ro 0x0 */
            
            uint32_t resv12 : 7;
            uint32_t io_en : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t io_ws : 4;           /* 20:23 SW=rw HW=ro 0x0 */
            
            uint32_t resv24 : 1;
            uint32_t bus_err_en : 1;           /* 25 SW=rw HW=ro 0x0 */
            uint32_t bus_rdy_en : 1;           /* 26 SW=rw HW=ro 0x0 */
            uint32_t io_bus_width : 2;           /* 27:28 SW=rw HW=ro 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_mem_ctrl_mcfg1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t sdram_refresh : 1;           /* 31 SW=rw HW=ro 0x0 */
            uint32_t sdram_trp : 1;           /* 30 SW=rw HW=ro 0x1 */
            uint32_t sdram_trfc : 3;           /* 29:27 SW=rw HW=ro 0x7 */
            uint32_t sdram_cas_dly : 1;           /* 26 SW=rw HW=ro 0x1 */
            uint32_t sdram_bank_size : 3;           /* 25:23 SW=rw HW=ro 0x0 */
            uint32_t sdram_col_size : 2;           /* 22:21 SW=rw HW=ro 0x2 */
            uint32_t sdram_cmd : 2;           /* 20:19 SW=rw HW=ro 0x0 */
            uint32_t sdram_64 : 1;           /* 18 SW=rw HW=ro 0x0 */
            
            uint32_t resv15 : 3;
            uint32_t sdram_enable : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t sram_disable : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t ram_bank_size : 4;           /* 12:9 SW=rw HW=ro 0x0 */
            
            uint32_t resv8 : 1;
            uint32_t bus_rdy_en : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t rmw : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t ram_width : 2;           /* 5:4 SW=rw HW=ro 0x0 */
            uint32_t ram_wr_ws : 2;           /* 3:2 SW=rw HW=ro 0x0 */
            uint32_t ram_rd_ws : 2;           /* 1:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ram_rd_ws : 2;           /* 0:1 SW=rw HW=ro 0x0 */
            uint32_t ram_wr_ws : 2;           /* 2:3 SW=rw HW=ro 0x0 */
            uint32_t ram_width : 2;           /* 4:5 SW=rw HW=ro 0x0 */
            uint32_t rmw : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t bus_rdy_en : 1;           /* 7 SW=rw HW=ro 0x0 */
            
            uint32_t resv8 : 1;
            uint32_t ram_bank_size : 4;           /* 9:12 SW=rw HW=ro 0x0 */
            uint32_t sram_disable : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t sdram_enable : 1;           /* 14 SW=rw HW=ro 0x0 */
            
            uint32_t resv15 : 3;
            uint32_t sdram_64 : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t sdram_cmd : 2;           /* 19:20 SW=rw HW=ro 0x0 */
            uint32_t sdram_col_size : 2;           /* 21:22 SW=rw HW=ro 0x2 */
            uint32_t sdram_bank_size : 3;           /* 23:25 SW=rw HW=ro 0x0 */
            uint32_t sdram_cas_dly : 1;           /* 26 SW=rw HW=ro 0x1 */
            uint32_t sdram_trfc : 3;           /* 27:29 SW=rw HW=ro 0x7 */
            uint32_t sdram_trp : 1;           /* 30 SW=rw HW=ro 0x1 */
            uint32_t sdram_refresh : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_mem_ctrl_mcfg2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv27 : 5;
            uint32_t sdram_refresh_val : 15;           /* 26:12 SW=rw HW=ro 0x0 */
            uint32_t resv0 : 12;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 12;
            uint32_t sdram_refresh_val : 15;           /* 12:26 SW=rw HW=ro 0x0 */
            uint32_t resv27 : 5;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_mem_ctrl_mcfg3;

typedef struct {
    bb_chip_leon2_mem_ctrl_mcfg1  mcfg1;
    bb_chip_leon2_mem_ctrl_mcfg2  mcfg2;
    bb_chip_leon2_mem_ctrl_mcfg3  mcfg3;
    
} bb_chip_leon2_mem_ctrl;


/*section : ahb_stat */

typedef union {
    struct {
        uint32_t ahb_failing : 32;           /* 31:0 SW=rw HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_leon2_ahb_stat_ahb_failing;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t error : 1;           /* 8 SW=rw HW=wo 0x0 */
            uint32_t rw : 1;           /* 7 SW=rw HW=wo 0x0 */
            uint32_t hmaster : 4;           /* 6:3 SW=rw HW=wo 0x0 */
            uint32_t hsize : 3;           /* 2:0 SW=rw HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hsize : 3;           /* 0:2 SW=rw HW=wo 0x0 */
            uint32_t hmaster : 4;           /* 3:6 SW=rw HW=wo 0x0 */
            uint32_t rw : 1;           /* 7 SW=rw HW=wo 0x0 */
            uint32_t error : 1;           /* 8 SW=rw HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_ahb_stat_ahb_status;

typedef struct {
    bb_chip_leon2_ahb_stat_ahb_failing  ahb_failing;
    bb_chip_leon2_ahb_stat_ahb_status  ahb_status;
    
} bb_chip_leon2_ahb_stat;


/*section : cache_controller */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t drepl : 2;           /* 31:30 SW=ro HW=wo 0x0 */
            uint32_t irepl : 2;           /* 29:28 SW=ro HW=wo 0x0 */
            uint32_t isets : 2;           /* 27:26 SW=ro HW=wo 0x0 */
            uint32_t dsets : 2;           /* 25:24 SW=ro HW=wo 0x0 */
            uint32_t ds : 1;           /* 23 SW=rw HW=ro 0x0 */
            uint32_t fd : 1;           /* 22 SW=wo HW=ro 0x0 */
            uint32_t fi : 1;           /* 21 SW=wo HW=ro 0x0 */
            
            uint32_t resv17 : 4;
            uint32_t ib : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t ip : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t dp : 1;           /* 14 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 8;
            uint32_t dcf : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t icf : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dcs : 2;           /* 3:2 SW=rw HW=ro 0x0 */
            uint32_t ics : 2;           /* 1:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ics : 2;           /* 0:1 SW=rw HW=ro 0x0 */
            uint32_t dcs : 2;           /* 2:3 SW=rw HW=ro 0x0 */
            uint32_t icf : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dcf : 1;           /* 5 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 8;
            uint32_t dp : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t ip : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t ib : 1;           /* 16 SW=rw HW=ro 0x0 */
            
            uint32_t resv17 : 4;
            uint32_t fi : 1;           /* 21 SW=wo HW=ro 0x0 */
            uint32_t fd : 1;           /* 22 SW=wo HW=ro 0x0 */
            uint32_t ds : 1;           /* 23 SW=rw HW=ro 0x0 */
            uint32_t dsets : 2;           /* 24:25 SW=ro HW=wo 0x0 */
            uint32_t isets : 2;           /* 26:27 SW=ro HW=wo 0x0 */
            uint32_t irepl : 2;           /* 28:29 SW=ro HW=wo 0x0 */
            uint32_t drepl : 2;           /* 30:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_cache_controller_cache_control;

typedef union {
    struct {
        uint32_t pd : 32;           /* 31:0 SW=wo HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_leon2_cache_controller_power_down;

typedef struct {
    bb_chip_leon2_cache_controller_cache_control  cache_control;
    bb_chip_leon2_cache_controller_power_down  power_down;
    
} bb_chip_leon2_cache_controller;


/*section : write_prot */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t en : 1;           /* 31 SW=ro HW=wo 0x0 */
            uint32_t bp : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t tag : 15;           /* 29:15 SW=ro HW=wo 0x0 */
            uint32_t mask : 15;           /* 14:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mask : 15;           /* 0:14 SW=ro HW=wo 0x0 */
            uint32_t tag : 15;           /* 15:29 SW=ro HW=wo 0x0 */
            uint32_t bp : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t en : 1;           /* 31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_write_prot_write_prot1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t en : 1;           /* 31 SW=ro HW=wo 0x0 */
            uint32_t bp : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t tag : 15;           /* 29:15 SW=ro HW=wo 0x0 */
            uint32_t mask : 15;           /* 14:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mask : 15;           /* 0:14 SW=ro HW=wo 0x0 */
            uint32_t tag : 15;           /* 15:29 SW=ro HW=wo 0x0 */
            uint32_t bp : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t en : 1;           /* 31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_write_prot_write_prot2;

typedef struct {
    bb_chip_leon2_write_prot_write_prot1  write_prot1;
    bb_chip_leon2_write_prot_write_prot2  write_prot2;
    
} bb_chip_leon2_write_prot;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv31 : 1;
            uint32_t dsu : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t sdram_ctrl : 1;           /* 29 SW=ro HW=wo 0x0 */
            uint32_t num_wp : 3;           /* 28:26 SW=ro HW=wo 0x0 */
            uint32_t mac : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t nwindows : 5;           /* 24:20 SW=ro HW=wo 0x0 */
            uint32_t icsz : 3;           /* 19:17 SW=ro HW=wo 0x0 */
            uint32_t ilsz : 2;           /* 16:15 SW=ro HW=wo 0x0 */
            uint32_t dcsz : 3;           /* 14:12 SW=ro HW=wo 0x0 */
            uint32_t dlsz : 2;           /* 11:10 SW=ro HW=wo 0x0 */
            uint32_t div : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t mul : 1;           /* 8 SW=ro HW=wo 0x0 */
            
            uint32_t resv7 : 1;
            uint32_t ahb_stat : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t fpu : 2;           /* 5:4 SW=ro HW=wo 0x0 */
            uint32_t pci_core : 2;           /* 3:2 SW=ro HW=wo 0x0 */
            uint32_t write_prot : 2;           /* 1:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t write_prot : 2;           /* 0:1 SW=ro HW=wo 0x0 */
            uint32_t pci_core : 2;           /* 2:3 SW=ro HW=wo 0x0 */
            uint32_t fpu : 2;           /* 4:5 SW=ro HW=wo 0x0 */
            uint32_t ahb_stat : 1;           /* 6 SW=ro HW=wo 0x0 */
            
            uint32_t resv7 : 1;
            uint32_t mul : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t div : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t dlsz : 2;           /* 10:11 SW=ro HW=wo 0x0 */
            uint32_t dcsz : 3;           /* 12:14 SW=ro HW=wo 0x0 */
            uint32_t ilsz : 2;           /* 15:16 SW=ro HW=wo 0x0 */
            uint32_t icsz : 3;           /* 17:19 SW=ro HW=wo 0x0 */
            uint32_t nwindows : 5;           /* 20:24 SW=ro HW=wo 0x0 */
            uint32_t mac : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t num_wp : 3;           /* 26:28 SW=ro HW=wo 0x0 */
            uint32_t sdram_ctrl : 1;           /* 29 SW=ro HW=wo 0x0 */
            uint32_t dsu : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t resv31 : 1;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_leon_config;

/*section : timers */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t counter : 24;           /* 23:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t counter : 24;           /* 0:23 SW=rw HW=rw 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_timers_timer1_counter;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t reload : 24;           /* 23:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t reload : 24;           /* 0:23 SW=rw HW=rw 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_timers_timer1_reload;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t ld : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rl : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rl : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t ld : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_timers_timer1_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t counter : 24;           /* 23:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t counter : 24;           /* 0:23 SW=rw HW=rw 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_timers_watchdog_counter;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t counter : 24;           /* 23:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t counter : 24;           /* 0:23 SW=rw HW=rw 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_timers_timer2_counter;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t reload : 24;           /* 23:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t reload : 24;           /* 0:23 SW=rw HW=rw 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_timers_timer2_reload;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t ld : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rl : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rl : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t ld : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_timers_timer2_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t counter : 10;           /* 9:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t counter : 10;           /* 0:9 SW=rw HW=rw 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_timers_prescaler_counter;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t reload : 10;           /* 9:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t reload : 10;           /* 0:9 SW=rw HW=rw 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_timers_prescaler_reload;

typedef struct {
    bb_chip_leon2_timers_timer1_counter  timer1_counter;
    bb_chip_leon2_timers_timer1_reload  timer1_reload;
    bb_chip_leon2_timers_timer1_control  timer1_control;
    bb_chip_leon2_timers_watchdog_counter  watchdog_counter;
    bb_chip_leon2_timers_timer2_counter  timer2_counter;
    bb_chip_leon2_timers_timer2_reload  timer2_reload;
    bb_chip_leon2_timers_timer2_control  timer2_control;
    
    uint8_t filler8[0x4];
    
    bb_chip_leon2_timers_prescaler_counter  prescaler_counter;
    bb_chip_leon2_timers_prescaler_reload  prescaler_reload;
    
} bb_chip_leon2_timers;


/*section : uarts */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t data : 8;           /* 7:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t data : 8;           /* 0:7 SW=rw HW=rw 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_uarts_uart1_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t fe : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t pe : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t ov : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t br : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t th : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t ts : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t dr : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dr : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t ts : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t th : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t br : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t ov : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t pe : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t fe : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_uarts_uart1_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t ec : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lb : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t fl : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pe : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t ps : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t ti : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t ri : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t te : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t re : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t re : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t te : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t ri : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t ti : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t ps : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pe : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t fl : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t lb : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t ec : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_uarts_uart1_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t scaler : 12;           /* 11:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t scaler : 12;           /* 0:11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_uarts_uart1_scaler;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t data : 8;           /* 7:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t data : 8;           /* 0:7 SW=rw HW=rw 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_uarts_uart2_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t fe : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t pe : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t ov : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t br : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t th : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t ts : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t dr : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dr : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t ts : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t th : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t br : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t ov : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t pe : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t fe : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_uarts_uart2_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t ec : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lb : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t fl : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pe : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t ps : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t ti : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t ri : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t te : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t re : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t re : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t te : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t ri : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t ti : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t ps : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pe : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t fl : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t lb : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t ec : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_uarts_uart2_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t scaler : 12;           /* 11:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t scaler : 12;           /* 0:11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_uarts_uart2_scaler;

typedef struct {
    bb_chip_leon2_uarts_uart1_data  uart1_data;
    bb_chip_leon2_uarts_uart1_status  uart1_status;
    bb_chip_leon2_uarts_uart1_control  uart1_control;
    bb_chip_leon2_uarts_uart1_scaler  uart1_scaler;
    bb_chip_leon2_uarts_uart2_data  uart2_data;
    bb_chip_leon2_uarts_uart2_status  uart2_status;
    bb_chip_leon2_uarts_uart2_control  uart2_control;
    bb_chip_leon2_uarts_uart2_scaler  uart2_scaler;
    
} bb_chip_leon2_uarts;


/*section : irqctrl */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t ilevel : 15;           /* 31:17 SW=rw HW=ro 0x0 */
            
            uint32_t resv16 : 1;
            uint32_t imask : 15;           /* 15:1 SW=rw HW=ro 0x0 */
            uint32_t resv0 : 1;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 1;
            uint32_t imask : 15;           /* 1:15 SW=rw HW=ro 0x0 */
            
            uint32_t resv16 : 1;
            uint32_t ilevel : 15;           /* 17:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_irqctrl_int_mask;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t ipend : 15;           /* 15:1 SW=ro HW=wo 0x0 */
            uint32_t resv0 : 1;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 1;
            uint32_t ipend : 15;           /* 1:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_irqctrl_int_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t iforce : 15;           /* 15:1 SW=ro HW=wo 0x0 */
            uint32_t resv0 : 1;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 1;
            uint32_t iforce : 15;           /* 1:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_irqctrl_int_force;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t iclear : 15;           /* 15:1 SW=rw HW=ro 0x0 */
            uint32_t resv0 : 1;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 1;
            uint32_t iclear : 15;           /* 1:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_irqctrl_int_clear;

typedef struct {
    bb_chip_leon2_irqctrl_int_mask  int_mask;
    bb_chip_leon2_irqctrl_int_pending  int_pending;
    bb_chip_leon2_irqctrl_int_force  int_force;
    bb_chip_leon2_irqctrl_int_clear  int_clear;
    
} bb_chip_leon2_irqctrl;


/*section : io_port */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t ioval : 16;           /* 15:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ioval : 16;           /* 0:15 SW=rw HW=rw 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_io_port_io_val;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t iodir : 18;           /* 17:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t iodir : 18;           /* 0:17 SW=rw HW=ro 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_io_port_io_dir;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t en3 : 1;           /* 31 SW=rw HW=ro 0x0 */
            uint32_t le3 : 1;           /* 30 SW=rw HW=ro 0x0 */
            uint32_t pl3 : 1;           /* 29 SW=rw HW=ro 0x0 */
            uint32_t isel3 : 5;           /* 28:24 SW=rw HW=ro 0x0 */
            uint32_t en2 : 1;           /* 23 SW=rw HW=ro 0x0 */
            uint32_t le2 : 1;           /* 22 SW=rw HW=ro 0x0 */
            uint32_t pl2 : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t isel2 : 5;           /* 20:16 SW=rw HW=ro 0x0 */
            uint32_t en1 : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t le1 : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t pl1 : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t isel1 : 5;           /* 12:8 SW=rw HW=ro 0x0 */
            uint32_t en0 : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t le0 : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pl0 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t isel0 : 5;           /* 4:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t isel0 : 5;           /* 0:4 SW=rw HW=ro 0x0 */
            uint32_t pl0 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t le0 : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t en0 : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t isel1 : 5;           /* 8:12 SW=rw HW=ro 0x0 */
            uint32_t pl1 : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t le1 : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t en1 : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t isel2 : 5;           /* 16:20 SW=rw HW=ro 0x0 */
            uint32_t pl2 : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t le2 : 1;           /* 22 SW=rw HW=ro 0x0 */
            uint32_t en2 : 1;           /* 23 SW=rw HW=ro 0x0 */
            uint32_t isel3 : 5;           /* 24:28 SW=rw HW=ro 0x0 */
            uint32_t pl3 : 1;           /* 29 SW=rw HW=ro 0x0 */
            uint32_t le3 : 1;           /* 30 SW=rw HW=ro 0x0 */
            uint32_t en3 : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_io_port_io_int_cfg;

typedef struct {
    bb_chip_leon2_io_port_io_val  io_val;
    bb_chip_leon2_io_port_io_dir  io_dir;
    bb_chip_leon2_io_port_io_int_cfg  io_int_cfg;
    
} bb_chip_leon2_io_port;


/*section : irqctrl2 */

typedef union {
    struct {
        uint32_t imask : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_leon2_irqctrl2_int_mask;

typedef union {
    struct {
        uint32_t ipend : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_leon2_irqctrl2_int_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t iclear : 26;           /* 31:6 SW=rw HW=ro 0x0 */
            uint32_t ip_or_iclear : 1;           /* 5 SW=rw HW=rw 0x0 */
            uint32_t irl_or_iclear : 5;           /* 4:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t irl_or_iclear : 5;           /* 0:4 SW=rw HW=rw 0x0 */
            uint32_t ip_or_iclear : 1;           /* 5 SW=rw HW=rw 0x0 */
            uint32_t iclear : 26;           /* 6:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_irqctrl2_int_status_clear;

typedef struct {
    bb_chip_leon2_irqctrl2_int_mask  int_mask;
    bb_chip_leon2_irqctrl2_int_pending  int_pending;
    bb_chip_leon2_irqctrl2_int_status_clear  int_status_clear;
    
} bb_chip_leon2_irqctrl2;


/*section : dsu_uart */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t fe : 1;           /* 6 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 1;
            uint32_t ov : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t th : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t ts : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t dr : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dr : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t ts : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t th : 1;           /* 2 SW=ro HW=wo 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t ov : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 1;
            uint32_t fe : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_dsu_uart_dsu_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t bl : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t bl : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_dsu_uart_dsu_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t scaler : 14;           /* 13:0 SW=rw HW=rw 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t scaler : 14;           /* 0:13 SW=rw HW=rw 0x0 */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_leon2_dsu_uart_dsu_scaler;

typedef struct {
    bb_chip_leon2_dsu_uart_dsu_status  dsu_status;
    bb_chip_leon2_dsu_uart_dsu_control  dsu_control;
    bb_chip_leon2_dsu_uart_dsu_scaler  dsu_scaler;
    
} bb_chip_leon2_dsu_uart;


typedef struct {
    
    union {
        bb_chip_leon2_mem_ctrl s;
        uint8_t filler[0xC];
    } mem_ctrl;
    
    union {
        bb_chip_leon2_ahb_stat s;
        uint8_t filler[0x8];
    } ahb_stat;
    
    union {
        bb_chip_leon2_cache_controller s;
        uint8_t filler[0x8];
    } cache_controller;
    
    union {
        bb_chip_leon2_write_prot s;
        uint8_t filler[0x8];
    } write_prot;
    bb_chip_leon2_leon_config  leon_config;
    
    uint8_t filler6[0x18];
    
    
    union {
        bb_chip_leon2_timers s;
        uint8_t filler[0x28];
    } timers;
    
    uint8_t filler7[0x8];
    
    
    union {
        bb_chip_leon2_uarts s;
        uint8_t filler[0x20];
    } uarts;
    
    union {
        bb_chip_leon2_irqctrl s;
        uint8_t filler[0x10];
    } irqctrl;
    
    union {
        bb_chip_leon2_io_port s;
        uint8_t filler[0xC];
    } io_port;
    
    uint8_t filler10[0x4];
    
    
    union {
        bb_chip_leon2_irqctrl2 s;
        uint8_t filler[0xC];
    } irqctrl2;
    
    uint8_t filler11[0x8];
    
    
    union {
        bb_chip_leon2_dsu_uart s;
        uint8_t filler[0xC];
    } dsu_uart;
    
} bb_chip_leon2_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_leon2_mem_ctrl_mcfg1_READMASK 0x1EF80BFF
#define bb_chip_leon2_mem_ctrl_mcfg1_WRITEMASK 0x1EF80BFF
#define bb_chip_leon2_mem_ctrl_mcfg1_VOLATILEMASK 0x0
#define bb_chip_leon2_mem_ctrl_mcfg1_RESETMASK 0x1EF80BFF
#define bb_chip_leon2_mem_ctrl_mcfg1_DEFAULT 0x00000311

#define bb_chip_leon2_mem_ctrl_mcfg2_READMASK 0xFFFC7EFF
#define bb_chip_leon2_mem_ctrl_mcfg2_WRITEMASK 0xFFFC7EFF
#define bb_chip_leon2_mem_ctrl_mcfg2_VOLATILEMASK 0x0
#define bb_chip_leon2_mem_ctrl_mcfg2_RESETMASK 0xFFFC7EFF
#define bb_chip_leon2_mem_ctrl_mcfg2_DEFAULT 0x7C400000

#define bb_chip_leon2_mem_ctrl_mcfg3_READMASK 0x7FFF000
#define bb_chip_leon2_mem_ctrl_mcfg3_WRITEMASK 0x7FFF000
#define bb_chip_leon2_mem_ctrl_mcfg3_VOLATILEMASK 0x0
#define bb_chip_leon2_mem_ctrl_mcfg3_RESETMASK 0x7FFF000
#define bb_chip_leon2_mem_ctrl_mcfg3_DEFAULT 0x00000000

#define bb_chip_leon2_ahb_stat_ahb_failing_READMASK 0xFFFFFFFF
#define bb_chip_leon2_ahb_stat_ahb_failing_WRITEMASK 0xFFFFFFFF
#define bb_chip_leon2_ahb_stat_ahb_failing_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_leon2_ahb_stat_ahb_failing_RESETMASK 0xFFFFFFFF
#define bb_chip_leon2_ahb_stat_ahb_failing_DEFAULT 0x00000000

#define bb_chip_leon2_ahb_stat_ahb_status_READMASK 0x1FF
#define bb_chip_leon2_ahb_stat_ahb_status_WRITEMASK 0x1FF
#define bb_chip_leon2_ahb_stat_ahb_status_VOLATILEMASK 0x1FF
#define bb_chip_leon2_ahb_stat_ahb_status_RESETMASK 0x1FF
#define bb_chip_leon2_ahb_stat_ahb_status_DEFAULT 0x00000000

#define bb_chip_leon2_cache_controller_cache_control_READMASK 0xFF81C03F
#define bb_chip_leon2_cache_controller_cache_control_WRITEMASK 0xE1003F
#define bb_chip_leon2_cache_controller_cache_control_VOLATILEMASK 0xFF00C000
#define bb_chip_leon2_cache_controller_cache_control_RESETMASK 0xFFE1C03F
#define bb_chip_leon2_cache_controller_cache_control_DEFAULT 0x00000000

#define bb_chip_leon2_cache_controller_power_down_READMASK 0x0
#define bb_chip_leon2_cache_controller_power_down_WRITEMASK 0xFFFFFFFF
#define bb_chip_leon2_cache_controller_power_down_VOLATILEMASK 0x0
#define bb_chip_leon2_cache_controller_power_down_RESETMASK 0xFFFFFFFF
#define bb_chip_leon2_cache_controller_power_down_DEFAULT 0x00000000

#define bb_chip_leon2_write_prot_write_prot1_READMASK 0xFFFFFFFF
#define bb_chip_leon2_write_prot_write_prot1_WRITEMASK 0x0
#define bb_chip_leon2_write_prot_write_prot1_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_leon2_write_prot_write_prot1_RESETMASK 0xFFFFFFFF
#define bb_chip_leon2_write_prot_write_prot1_DEFAULT 0x00000000

#define bb_chip_leon2_write_prot_write_prot2_READMASK 0xFFFFFFFF
#define bb_chip_leon2_write_prot_write_prot2_WRITEMASK 0x0
#define bb_chip_leon2_write_prot_write_prot2_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_leon2_write_prot_write_prot2_RESETMASK 0xFFFFFFFF
#define bb_chip_leon2_write_prot_write_prot2_DEFAULT 0x00000000

#define bb_chip_leon2_leon_config_READMASK 0x7FFFFF7F
#define bb_chip_leon2_leon_config_WRITEMASK 0x0
#define bb_chip_leon2_leon_config_VOLATILEMASK 0x7FFFFF7F
#define bb_chip_leon2_leon_config_RESETMASK 0x7FFFFF7F
#define bb_chip_leon2_leon_config_DEFAULT 0x00000000

#define bb_chip_leon2_timers_timer1_counter_READMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer1_counter_WRITEMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer1_counter_VOLATILEMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer1_counter_RESETMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer1_counter_DEFAULT 0x00000000

#define bb_chip_leon2_timers_timer1_reload_READMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer1_reload_WRITEMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer1_reload_VOLATILEMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer1_reload_RESETMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer1_reload_DEFAULT 0x00000000

#define bb_chip_leon2_timers_timer1_control_READMASK 0x7
#define bb_chip_leon2_timers_timer1_control_WRITEMASK 0x7
#define bb_chip_leon2_timers_timer1_control_VOLATILEMASK 0x0
#define bb_chip_leon2_timers_timer1_control_RESETMASK 0x7
#define bb_chip_leon2_timers_timer1_control_DEFAULT 0x00000000

#define bb_chip_leon2_timers_watchdog_counter_READMASK 0xFFFFFF
#define bb_chip_leon2_timers_watchdog_counter_WRITEMASK 0xFFFFFF
#define bb_chip_leon2_timers_watchdog_counter_VOLATILEMASK 0xFFFFFF
#define bb_chip_leon2_timers_watchdog_counter_RESETMASK 0xFFFFFF
#define bb_chip_leon2_timers_watchdog_counter_DEFAULT 0x00000000

#define bb_chip_leon2_timers_timer2_counter_READMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer2_counter_WRITEMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer2_counter_VOLATILEMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer2_counter_RESETMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer2_counter_DEFAULT 0x00000000

#define bb_chip_leon2_timers_timer2_reload_READMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer2_reload_WRITEMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer2_reload_VOLATILEMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer2_reload_RESETMASK 0xFFFFFF
#define bb_chip_leon2_timers_timer2_reload_DEFAULT 0x00000000

#define bb_chip_leon2_timers_timer2_control_READMASK 0x7
#define bb_chip_leon2_timers_timer2_control_WRITEMASK 0x7
#define bb_chip_leon2_timers_timer2_control_VOLATILEMASK 0x0
#define bb_chip_leon2_timers_timer2_control_RESETMASK 0x7
#define bb_chip_leon2_timers_timer2_control_DEFAULT 0x00000000

#define bb_chip_leon2_timers_prescaler_counter_READMASK 0x3FF
#define bb_chip_leon2_timers_prescaler_counter_WRITEMASK 0x3FF
#define bb_chip_leon2_timers_prescaler_counter_VOLATILEMASK 0x3FF
#define bb_chip_leon2_timers_prescaler_counter_RESETMASK 0x3FF
#define bb_chip_leon2_timers_prescaler_counter_DEFAULT 0x00000000

#define bb_chip_leon2_timers_prescaler_reload_READMASK 0x3FF
#define bb_chip_leon2_timers_prescaler_reload_WRITEMASK 0x3FF
#define bb_chip_leon2_timers_prescaler_reload_VOLATILEMASK 0x3FF
#define bb_chip_leon2_timers_prescaler_reload_RESETMASK 0x3FF
#define bb_chip_leon2_timers_prescaler_reload_DEFAULT 0x00000000

#define bb_chip_leon2_uarts_uart1_data_READMASK 0xFF
#define bb_chip_leon2_uarts_uart1_data_WRITEMASK 0xFF
#define bb_chip_leon2_uarts_uart1_data_VOLATILEMASK 0xFF
#define bb_chip_leon2_uarts_uart1_data_RESETMASK 0xFF
#define bb_chip_leon2_uarts_uart1_data_DEFAULT 0x00000000

#define bb_chip_leon2_uarts_uart1_status_READMASK 0x7F
#define bb_chip_leon2_uarts_uart1_status_WRITEMASK 0x0
#define bb_chip_leon2_uarts_uart1_status_VOLATILEMASK 0x7F
#define bb_chip_leon2_uarts_uart1_status_RESETMASK 0x7F
#define bb_chip_leon2_uarts_uart1_status_DEFAULT 0x00000000

#define bb_chip_leon2_uarts_uart1_control_READMASK 0x1FF
#define bb_chip_leon2_uarts_uart1_control_WRITEMASK 0x1FF
#define bb_chip_leon2_uarts_uart1_control_VOLATILEMASK 0x0
#define bb_chip_leon2_uarts_uart1_control_RESETMASK 0x1FF
#define bb_chip_leon2_uarts_uart1_control_DEFAULT 0x00000000

#define bb_chip_leon2_uarts_uart1_scaler_READMASK 0xFFF
#define bb_chip_leon2_uarts_uart1_scaler_WRITEMASK 0xFFF
#define bb_chip_leon2_uarts_uart1_scaler_VOLATILEMASK 0x0
#define bb_chip_leon2_uarts_uart1_scaler_RESETMASK 0xFFF
#define bb_chip_leon2_uarts_uart1_scaler_DEFAULT 0x00000000

#define bb_chip_leon2_uarts_uart2_data_READMASK 0xFF
#define bb_chip_leon2_uarts_uart2_data_WRITEMASK 0xFF
#define bb_chip_leon2_uarts_uart2_data_VOLATILEMASK 0xFF
#define bb_chip_leon2_uarts_uart2_data_RESETMASK 0xFF
#define bb_chip_leon2_uarts_uart2_data_DEFAULT 0x00000000

#define bb_chip_leon2_uarts_uart2_status_READMASK 0x7F
#define bb_chip_leon2_uarts_uart2_status_WRITEMASK 0x0
#define bb_chip_leon2_uarts_uart2_status_VOLATILEMASK 0x7F
#define bb_chip_leon2_uarts_uart2_status_RESETMASK 0x7F
#define bb_chip_leon2_uarts_uart2_status_DEFAULT 0x00000000

#define bb_chip_leon2_uarts_uart2_control_READMASK 0x1FF
#define bb_chip_leon2_uarts_uart2_control_WRITEMASK 0x1FF
#define bb_chip_leon2_uarts_uart2_control_VOLATILEMASK 0x0
#define bb_chip_leon2_uarts_uart2_control_RESETMASK 0x1FF
#define bb_chip_leon2_uarts_uart2_control_DEFAULT 0x00000000

#define bb_chip_leon2_uarts_uart2_scaler_READMASK 0xFFF
#define bb_chip_leon2_uarts_uart2_scaler_WRITEMASK 0xFFF
#define bb_chip_leon2_uarts_uart2_scaler_VOLATILEMASK 0x0
#define bb_chip_leon2_uarts_uart2_scaler_RESETMASK 0xFFF
#define bb_chip_leon2_uarts_uart2_scaler_DEFAULT 0x00000000

#define bb_chip_leon2_irqctrl_int_mask_READMASK 0xFFFEFFFE
#define bb_chip_leon2_irqctrl_int_mask_WRITEMASK 0xFFFEFFFE
#define bb_chip_leon2_irqctrl_int_mask_VOLATILEMASK 0x0
#define bb_chip_leon2_irqctrl_int_mask_RESETMASK 0xFFFEFFFE
#define bb_chip_leon2_irqctrl_int_mask_DEFAULT 0x00000000

#define bb_chip_leon2_irqctrl_int_pending_READMASK 0xFFFE
#define bb_chip_leon2_irqctrl_int_pending_WRITEMASK 0x0
#define bb_chip_leon2_irqctrl_int_pending_VOLATILEMASK 0xFFFE
#define bb_chip_leon2_irqctrl_int_pending_RESETMASK 0xFFFE
#define bb_chip_leon2_irqctrl_int_pending_DEFAULT 0x00000000

#define bb_chip_leon2_irqctrl_int_force_READMASK 0xFFFE
#define bb_chip_leon2_irqctrl_int_force_WRITEMASK 0x0
#define bb_chip_leon2_irqctrl_int_force_VOLATILEMASK 0xFFFE
#define bb_chip_leon2_irqctrl_int_force_RESETMASK 0xFFFE
#define bb_chip_leon2_irqctrl_int_force_DEFAULT 0x00000000

#define bb_chip_leon2_irqctrl_int_clear_READMASK 0xFFFE
#define bb_chip_leon2_irqctrl_int_clear_WRITEMASK 0xFFFE
#define bb_chip_leon2_irqctrl_int_clear_VOLATILEMASK 0x0
#define bb_chip_leon2_irqctrl_int_clear_RESETMASK 0xFFFE
#define bb_chip_leon2_irqctrl_int_clear_DEFAULT 0x00000000

#define bb_chip_leon2_io_port_io_val_READMASK 0xFFFF
#define bb_chip_leon2_io_port_io_val_WRITEMASK 0xFFFF
#define bb_chip_leon2_io_port_io_val_VOLATILEMASK 0xFFFF
#define bb_chip_leon2_io_port_io_val_RESETMASK 0xFFFF
#define bb_chip_leon2_io_port_io_val_DEFAULT 0x00000000

#define bb_chip_leon2_io_port_io_dir_READMASK 0x3FFFF
#define bb_chip_leon2_io_port_io_dir_WRITEMASK 0x3FFFF
#define bb_chip_leon2_io_port_io_dir_VOLATILEMASK 0x0
#define bb_chip_leon2_io_port_io_dir_RESETMASK 0x3FFFF
#define bb_chip_leon2_io_port_io_dir_DEFAULT 0x00000000

#define bb_chip_leon2_io_port_io_int_cfg_READMASK 0xFFFFFFFF
#define bb_chip_leon2_io_port_io_int_cfg_WRITEMASK 0xFFFFFFFF
#define bb_chip_leon2_io_port_io_int_cfg_VOLATILEMASK 0x0
#define bb_chip_leon2_io_port_io_int_cfg_RESETMASK 0xFFFFFFFF
#define bb_chip_leon2_io_port_io_int_cfg_DEFAULT 0x00000000

#define bb_chip_leon2_irqctrl2_int_mask_READMASK 0xFFFFFFFF
#define bb_chip_leon2_irqctrl2_int_mask_WRITEMASK 0xFFFFFFFF
#define bb_chip_leon2_irqctrl2_int_mask_VOLATILEMASK 0x0
#define bb_chip_leon2_irqctrl2_int_mask_RESETMASK 0xFFFFFFFF
#define bb_chip_leon2_irqctrl2_int_mask_DEFAULT 0x00000000

#define bb_chip_leon2_irqctrl2_int_pending_READMASK 0xFFFFFFFF
#define bb_chip_leon2_irqctrl2_int_pending_WRITEMASK 0x0
#define bb_chip_leon2_irqctrl2_int_pending_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_leon2_irqctrl2_int_pending_RESETMASK 0xFFFFFFFF
#define bb_chip_leon2_irqctrl2_int_pending_DEFAULT 0x00000000

#define bb_chip_leon2_irqctrl2_int_status_clear_READMASK 0xFFFFFFFF
#define bb_chip_leon2_irqctrl2_int_status_clear_WRITEMASK 0xFFFFFFFF
#define bb_chip_leon2_irqctrl2_int_status_clear_VOLATILEMASK 0x3F
#define bb_chip_leon2_irqctrl2_int_status_clear_RESETMASK 0xFFFFFFFF
#define bb_chip_leon2_irqctrl2_int_status_clear_DEFAULT 0x00000000

#define bb_chip_leon2_dsu_uart_dsu_status_READMASK 0x57
#define bb_chip_leon2_dsu_uart_dsu_status_WRITEMASK 0x0
#define bb_chip_leon2_dsu_uart_dsu_status_VOLATILEMASK 0x57
#define bb_chip_leon2_dsu_uart_dsu_status_RESETMASK 0x57
#define bb_chip_leon2_dsu_uart_dsu_status_DEFAULT 0x00000000

#define bb_chip_leon2_dsu_uart_dsu_control_READMASK 0x3
#define bb_chip_leon2_dsu_uart_dsu_control_WRITEMASK 0x3
#define bb_chip_leon2_dsu_uart_dsu_control_VOLATILEMASK 0x0
#define bb_chip_leon2_dsu_uart_dsu_control_RESETMASK 0x3
#define bb_chip_leon2_dsu_uart_dsu_control_DEFAULT 0x00000000

#define bb_chip_leon2_dsu_uart_dsu_scaler_READMASK 0x3FFF
#define bb_chip_leon2_dsu_uart_dsu_scaler_WRITEMASK 0x3FFF
#define bb_chip_leon2_dsu_uart_dsu_scaler_VOLATILEMASK 0x3FFF
#define bb_chip_leon2_dsu_uart_dsu_scaler_RESETMASK 0x3FFF
#define bb_chip_leon2_dsu_uart_dsu_scaler_DEFAULT 0x00000000

/*block : uart */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x4 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x4 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_uart_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_uart_tx_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_uart_rx_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t val : 8;           /* 7:0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t val : 8;           /* 0:7 SW=wo HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_uart_tx_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t val : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t val : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_uart_rx_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t prescaler : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 12;
            uint32_t tx_irq_en : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rx_irq_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t tx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rx_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t tx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rx_irq_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t tx_irq_en : 1;           /* 3 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 12;
            uint32_t prescaler : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_uart_control;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_uart_timeout;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t overrun_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t stop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t start_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t stop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t overrun_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_uart_errors;

typedef struct {
    bb_chip_uart_version  version;
    bb_chip_uart_tx_fifo  tx_fifo;
    bb_chip_uart_rx_fifo  rx_fifo;
    bb_chip_uart_tx_data  tx_data;
    bb_chip_uart_rx_data  rx_data;
    bb_chip_uart_control  control;
    bb_chip_uart_timeout  timeout;
    bb_chip_uart_errors  errors;
    
} bb_chip_uart_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_uart_version_READMASK 0xFFFFFF
#define bb_chip_uart_version_WRITEMASK 0x0
#define bb_chip_uart_version_VOLATILEMASK 0x0
#define bb_chip_uart_version_RESETMASK 0xFFFFFF
#define bb_chip_uart_version_DEFAULT 0x00040000

#define bb_chip_uart_tx_fifo_READMASK 0x8FFFFFFF
#define bb_chip_uart_tx_fifo_WRITEMASK 0x80FFFF00
#define bb_chip_uart_tx_fifo_VOLATILEMASK 0xF0000FF
#define bb_chip_uart_tx_fifo_RESETMASK 0x8FFFFFFF
#define bb_chip_uart_tx_fifo_DEFAULT 0x00000000

#define bb_chip_uart_rx_fifo_READMASK 0x8FFFFFFF
#define bb_chip_uart_rx_fifo_WRITEMASK 0x80FFFF00
#define bb_chip_uart_rx_fifo_VOLATILEMASK 0xF0000FF
#define bb_chip_uart_rx_fifo_RESETMASK 0x8FFFFFFF
#define bb_chip_uart_rx_fifo_DEFAULT 0x00000000

#define bb_chip_uart_tx_data_READMASK 0x0
#define bb_chip_uart_tx_data_WRITEMASK 0xFF
#define bb_chip_uart_tx_data_VOLATILEMASK 0x0
#define bb_chip_uart_tx_data_RESETMASK 0xFF
#define bb_chip_uart_tx_data_DEFAULT 0x00000000

#define bb_chip_uart_rx_data_READMASK 0xFF
#define bb_chip_uart_rx_data_WRITEMASK 0x0
#define bb_chip_uart_rx_data_VOLATILEMASK 0xFF
#define bb_chip_uart_rx_data_RESETMASK 0xFF
#define bb_chip_uart_rx_data_DEFAULT 0x00000000

#define bb_chip_uart_control_READMASK 0xFFFF000F
#define bb_chip_uart_control_WRITEMASK 0xFFFF000F
#define bb_chip_uart_control_VOLATILEMASK 0x0
#define bb_chip_uart_control_RESETMASK 0xFFFF000F
#define bb_chip_uart_control_DEFAULT 0x00000000

#define bb_chip_uart_timeout_READMASK 0xFFFFFFFF
#define bb_chip_uart_timeout_WRITEMASK 0xFFFFFFFF
#define bb_chip_uart_timeout_VOLATILEMASK 0x0
#define bb_chip_uart_timeout_RESETMASK 0xFFFFFFFF
#define bb_chip_uart_timeout_DEFAULT 0x00000000

#define bb_chip_uart_errors_READMASK 0x7
#define bb_chip_uart_errors_WRITEMASK 0x7
#define bb_chip_uart_errors_VOLATILEMASK 0x7
#define bb_chip_uart_errors_RESETMASK 0x7
#define bb_chip_uart_errors_DEFAULT 0x00000000

/*block : i2c_master */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x3 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x3 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_master_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t prescaler : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t prescaler : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_master_prescaler;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv28 : 4;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t resv28 : 4;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_master_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t error : 1;           /* 31 SW=ro HW=wo 0x0 */
            uint32_t clock_stretch_active : 1;           /* 30 SW=ro HW=wo 0x0 */
            
            uint32_t resv26 : 4;
            uint32_t force_sda_low : 1;           /* 25 SW=rw HW=ro 0x0 */
            
            uint32_t resv21 : 4;
            uint32_t slave_addr : 7;           /* 20:14 SW=rw HW=ro 0x0 */
            uint32_t read_byte_count : 8;           /* 13:6 SW=rw HW=ro 0x0 */
            uint32_t clear : 1;           /* 5 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 1;
            uint32_t opmode : 2;           /* 3:2 SW=rw HW=ro 0x0 */
            uint32_t clock_stretch_en : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t clock_stretch_en : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t opmode : 2;           /* 2:3 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 1;
            uint32_t clear : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t read_byte_count : 8;           /* 6:13 SW=rw HW=ro 0x0 */
            uint32_t slave_addr : 7;           /* 14:20 SW=rw HW=ro 0x0 */
            
            uint32_t resv21 : 4;
            uint32_t force_sda_low : 1;           /* 25 SW=rw HW=ro 0x0 */
            
            uint32_t resv26 : 4;
            uint32_t clock_stretch_active : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t error : 1;           /* 31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_master_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wr_data : 8;           /* 7:0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wr_data : 8;           /* 0:7 SW=wo HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_master_wr_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rd_data : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rd_data : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_master_rd_data;

/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t fifo_ae : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t fifo_af : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t done : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t done : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t fifo_af : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t fifo_ae : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_master_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t fifo_ae : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t done : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t done : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_master_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t fifo_ae : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t fifo_af : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t done : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t done : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t fifo_af : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t fifo_ae : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_master_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t fifo_ae : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t done : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t done : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_master_irq_raw;

typedef struct {
    bb_chip_i2c_master_irq_enable  enable;
    bb_chip_i2c_master_irq_pending  pending;
    bb_chip_i2c_master_irq_pending_irq  pending_irq;
    bb_chip_i2c_master_irq_raw  raw;
    
} bb_chip_i2c_master_irq;


typedef struct {
    bb_chip_i2c_master_version  version;
    bb_chip_i2c_master_prescaler  prescaler;
    bb_chip_i2c_master_fifo  fifo;
    bb_chip_i2c_master_control  control;
    bb_chip_i2c_master_wr_data  wr_data;
    bb_chip_i2c_master_rd_data  rd_data;
    
    union {
        bb_chip_i2c_master_irq s;
        uint8_t filler[0x10];
    } irq;
    
} bb_chip_i2c_master_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_i2c_master_version_READMASK 0xFFFFFF
#define bb_chip_i2c_master_version_WRITEMASK 0x0
#define bb_chip_i2c_master_version_VOLATILEMASK 0x0
#define bb_chip_i2c_master_version_RESETMASK 0xFFFFFF
#define bb_chip_i2c_master_version_DEFAULT 0x00030003

#define bb_chip_i2c_master_prescaler_READMASK 0xFFFF
#define bb_chip_i2c_master_prescaler_WRITEMASK 0xFFFF
#define bb_chip_i2c_master_prescaler_VOLATILEMASK 0x0
#define bb_chip_i2c_master_prescaler_RESETMASK 0xFFFF
#define bb_chip_i2c_master_prescaler_DEFAULT 0x00000000

#define bb_chip_i2c_master_fifo_READMASK 0xFFFFFFF
#define bb_chip_i2c_master_fifo_WRITEMASK 0xFFFF00
#define bb_chip_i2c_master_fifo_VOLATILEMASK 0xF0000FF
#define bb_chip_i2c_master_fifo_RESETMASK 0xFFFFFFF
#define bb_chip_i2c_master_fifo_DEFAULT 0x00000000

#define bb_chip_i2c_master_control_READMASK 0xC21FFFEF
#define bb_chip_i2c_master_control_WRITEMASK 0x21FFFEF
#define bb_chip_i2c_master_control_VOLATILEMASK 0xC0000000
#define bb_chip_i2c_master_control_RESETMASK 0xC21FFFEF
#define bb_chip_i2c_master_control_DEFAULT 0x00000002

#define bb_chip_i2c_master_wr_data_READMASK 0x0
#define bb_chip_i2c_master_wr_data_WRITEMASK 0xFF
#define bb_chip_i2c_master_wr_data_VOLATILEMASK 0x0
#define bb_chip_i2c_master_wr_data_RESETMASK 0xFF
#define bb_chip_i2c_master_wr_data_DEFAULT 0x00000000

#define bb_chip_i2c_master_rd_data_READMASK 0xFF
#define bb_chip_i2c_master_rd_data_WRITEMASK 0x0
#define bb_chip_i2c_master_rd_data_VOLATILEMASK 0xFF
#define bb_chip_i2c_master_rd_data_RESETMASK 0xFF
#define bb_chip_i2c_master_rd_data_DEFAULT 0x00000000

#define bb_chip_i2c_master_irq_enable_READMASK 0x7
#define bb_chip_i2c_master_irq_enable_WRITEMASK 0x7
#define bb_chip_i2c_master_irq_enable_VOLATILEMASK 0x0
#define bb_chip_i2c_master_irq_enable_RESETMASK 0x7
#define bb_chip_i2c_master_irq_enable_DEFAULT 0x00000000

#define bb_chip_i2c_master_irq_pending_READMASK 0x7
#define bb_chip_i2c_master_irq_pending_WRITEMASK 0x7
#define bb_chip_i2c_master_irq_pending_VOLATILEMASK 0x7
#define bb_chip_i2c_master_irq_pending_RESETMASK 0x7
#define bb_chip_i2c_master_irq_pending_DEFAULT 0x00000000

#define bb_chip_i2c_master_irq_pending_irq_READMASK 0x7
#define bb_chip_i2c_master_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_i2c_master_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_i2c_master_irq_pending_irq_RESETMASK 0x7
#define bb_chip_i2c_master_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_i2c_master_irq_raw_READMASK 0x7
#define bb_chip_i2c_master_irq_raw_WRITEMASK 0x0
#define bb_chip_i2c_master_irq_raw_VOLATILEMASK 0x7
#define bb_chip_i2c_master_irq_raw_RESETMASK 0x7
#define bb_chip_i2c_master_irq_raw_DEFAULT 0x00000000

/*block : i2c_slave */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x4 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x1 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x4 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_in_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_out_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv31 : 1;
            uint32_t no_device_busy : 1;           /* 30 SW=rw HW=ro 0x0 */
            uint32_t no_reply_data_rdy : 1;           /* 29 SW=rw HW=ro 0x0 */
            uint32_t no_status : 1;           /* 28 SW=rw HW=ro 0x0 */
            uint32_t stop_clks : 4;           /* 27:24 SW=rw HW=ro 0x0 */
            uint32_t start_clks : 4;           /* 23:20 SW=rw HW=ro 0x0 */
            uint32_t sda_glitch : 4;           /* 19:16 SW=rw HW=ro 0x0 */
            uint32_t scl_glitch : 4;           /* 15:12 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 2;
            uint32_t clock_stretch_en : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t slave_addr_ack : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv7 : 1;
            uint32_t slave_addr : 7;           /* 6:0 SW=rw HW=ro 0x8 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t slave_addr : 7;           /* 0:6 SW=rw HW=ro 0x8 */
            
            uint32_t resv7 : 1;
            uint32_t slave_addr_ack : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t clock_stretch_en : 1;           /* 9 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 2;
            uint32_t scl_glitch : 4;           /* 12:15 SW=rw HW=ro 0x0 */
            uint32_t sda_glitch : 4;           /* 16:19 SW=rw HW=ro 0x0 */
            uint32_t start_clks : 4;           /* 20:23 SW=rw HW=ro 0x0 */
            uint32_t stop_clks : 4;           /* 24:27 SW=rw HW=ro 0x0 */
            uint32_t no_status : 1;           /* 28 SW=rw HW=ro 0x0 */
            uint32_t no_reply_data_rdy : 1;           /* 29 SW=rw HW=ro 0x0 */
            uint32_t no_device_busy : 1;           /* 30 SW=rw HW=ro 0x0 */
            uint32_t resv31 : 1;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_slave_config;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_i2c_slave_timeout;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t device_busy : 1;           /* 7 SW=rw HW=rw 0x1 */
            uint32_t req_nak : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t rsvd5 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t rsvd4 : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t reply_data_rdy : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t reply_req : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rsvd1 : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rsvd0 : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rsvd0 : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rsvd1 : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t reply_req : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t reply_data_rdy : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rsvd4 : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t rsvd5 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t req_nak : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t device_busy : 1;           /* 7 SW=rw HW=rw 0x1 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wr_data : 8;           /* 7:0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wr_data : 8;           /* 0:7 SW=wo HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_wr_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rd_data : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rd_data : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_rd_data;

/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t reply_data_rdy : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t device_busy : 1;           /* 16 SW=rw HW=na 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t out_fifo_af : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t timeout : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t write : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t read : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t stop : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t start : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t stop : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t read : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t write : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t timeout : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t out_fifo_af : 1;           /* 11 SW=rw HW=na 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t device_busy : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t reply_data_rdy : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t reply_data_rdy : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t device_busy : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t out_fifo_af : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t timeout : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t write : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t read : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t stop : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t start : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t stop : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t read : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t write : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t timeout : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t out_fifo_af : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t device_busy : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t reply_data_rdy : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t reply_data_rdy : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t device_busy : 1;           /* 16 SW=ro HW=na 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t out_fifo_af : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t timeout : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t write : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t read : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t stop : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t start : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t stop : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t read : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t write : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t timeout : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t out_fifo_af : 1;           /* 11 SW=ro HW=na 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t device_busy : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t reply_data_rdy : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t reply_data_rdy : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t device_busy : 1;           /* 16 SW=ro HW=wo 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t out_fifo_af : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t timeout : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t write : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t read : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t stop : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t start : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t stop : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t read : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t write : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t timeout : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t no_read_data : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t read_nack : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t write_nack : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t out_fifo_af : 1;           /* 11 SW=ro HW=wo 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t device_busy : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t reply_data_rdy : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_i2c_slave_irq_raw;

typedef struct {
    bb_chip_i2c_slave_irq_enable  enable;
    bb_chip_i2c_slave_irq_pending  pending;
    bb_chip_i2c_slave_irq_pending_irq  pending_irq;
    bb_chip_i2c_slave_irq_raw  raw;
    
} bb_chip_i2c_slave_irq;


typedef struct {
    bb_chip_i2c_slave_version  version;
    bb_chip_i2c_slave_in_fifo  in_fifo;
    bb_chip_i2c_slave_out_fifo  out_fifo;
    bb_chip_i2c_slave_slave_config  slave_config;
    bb_chip_i2c_slave_timeout  timeout;
    bb_chip_i2c_slave_status  status;
    bb_chip_i2c_slave_wr_data  wr_data;
    bb_chip_i2c_slave_rd_data  rd_data;
    
    union {
        bb_chip_i2c_slave_irq s;
        uint8_t filler[0x10];
    } irq;
    
} bb_chip_i2c_slave_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_i2c_slave_version_READMASK 0xFFFFFF
#define bb_chip_i2c_slave_version_WRITEMASK 0x0
#define bb_chip_i2c_slave_version_VOLATILEMASK 0x0
#define bb_chip_i2c_slave_version_RESETMASK 0xFFFFFF
#define bb_chip_i2c_slave_version_DEFAULT 0x00040001

#define bb_chip_i2c_slave_in_fifo_READMASK 0x8FFFFFFF
#define bb_chip_i2c_slave_in_fifo_WRITEMASK 0x80FFFF00
#define bb_chip_i2c_slave_in_fifo_VOLATILEMASK 0xF0000FF
#define bb_chip_i2c_slave_in_fifo_RESETMASK 0x8FFFFFFF
#define bb_chip_i2c_slave_in_fifo_DEFAULT 0x00000000

#define bb_chip_i2c_slave_out_fifo_READMASK 0x8FFFFFFF
#define bb_chip_i2c_slave_out_fifo_WRITEMASK 0x80FFFF00
#define bb_chip_i2c_slave_out_fifo_VOLATILEMASK 0xF0000FF
#define bb_chip_i2c_slave_out_fifo_RESETMASK 0x8FFFFFFF
#define bb_chip_i2c_slave_out_fifo_DEFAULT 0x00000000

#define bb_chip_i2c_slave_slave_config_READMASK 0x7FFFF37F
#define bb_chip_i2c_slave_slave_config_WRITEMASK 0x7FFFF37F
#define bb_chip_i2c_slave_slave_config_VOLATILEMASK 0x0
#define bb_chip_i2c_slave_slave_config_RESETMASK 0x7FFFF37F
#define bb_chip_i2c_slave_slave_config_DEFAULT 0x00000008

#define bb_chip_i2c_slave_timeout_READMASK 0xFFFFFFFF
#define bb_chip_i2c_slave_timeout_WRITEMASK 0xFFFFFFFF
#define bb_chip_i2c_slave_timeout_VOLATILEMASK 0x0
#define bb_chip_i2c_slave_timeout_RESETMASK 0xFFFFFFFF
#define bb_chip_i2c_slave_timeout_DEFAULT 0x00000000

#define bb_chip_i2c_slave_status_READMASK 0xFF
#define bb_chip_i2c_slave_status_WRITEMASK 0xFF
#define bb_chip_i2c_slave_status_VOLATILEMASK 0x80
#define bb_chip_i2c_slave_status_RESETMASK 0xFF
#define bb_chip_i2c_slave_status_DEFAULT 0x00000080

#define bb_chip_i2c_slave_wr_data_READMASK 0x0
#define bb_chip_i2c_slave_wr_data_WRITEMASK 0xFF
#define bb_chip_i2c_slave_wr_data_VOLATILEMASK 0x0
#define bb_chip_i2c_slave_wr_data_RESETMASK 0xFF
#define bb_chip_i2c_slave_wr_data_DEFAULT 0x00000000

#define bb_chip_i2c_slave_rd_data_READMASK 0xFF
#define bb_chip_i2c_slave_rd_data_WRITEMASK 0x0
#define bb_chip_i2c_slave_rd_data_VOLATILEMASK 0xFF
#define bb_chip_i2c_slave_rd_data_RESETMASK 0xFF
#define bb_chip_i2c_slave_rd_data_DEFAULT 0x00000000

#define bb_chip_i2c_slave_irq_enable_READMASK 0x30FFF
#define bb_chip_i2c_slave_irq_enable_WRITEMASK 0x30FFF
#define bb_chip_i2c_slave_irq_enable_VOLATILEMASK 0x0
#define bb_chip_i2c_slave_irq_enable_RESETMASK 0x30FFF
#define bb_chip_i2c_slave_irq_enable_DEFAULT 0x00000000

#define bb_chip_i2c_slave_irq_pending_READMASK 0x30FFF
#define bb_chip_i2c_slave_irq_pending_WRITEMASK 0x30FFF
#define bb_chip_i2c_slave_irq_pending_VOLATILEMASK 0x30FFF
#define bb_chip_i2c_slave_irq_pending_RESETMASK 0x30FFF
#define bb_chip_i2c_slave_irq_pending_DEFAULT 0x00000000

#define bb_chip_i2c_slave_irq_pending_irq_READMASK 0x30FFF
#define bb_chip_i2c_slave_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_i2c_slave_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_i2c_slave_irq_pending_irq_RESETMASK 0x30FFF
#define bb_chip_i2c_slave_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_i2c_slave_irq_raw_READMASK 0x30FFF
#define bb_chip_i2c_slave_irq_raw_WRITEMASK 0x0
#define bb_chip_i2c_slave_irq_raw_VOLATILEMASK 0x30FFF
#define bb_chip_i2c_slave_irq_raw_RESETMASK 0x30FFF
#define bb_chip_i2c_slave_irq_raw_DEFAULT 0x00000000

/*block : mdio_master */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x1 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mdio_master_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t hold_clks : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t setup_clks : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t half_mdc_clks : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t half_mdc_clks : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t setup_clks : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t hold_clks : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mdio_master_timing;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv25 : 7;
            uint32_t phyad : 5;           /* 24:20 SW=rw HW=ro 0x0 */
            
            uint32_t resv17 : 3;
            uint32_t regad : 5;           /* 16:12 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 2;
            uint32_t op : 2;           /* 9:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t st : 2;           /* 5:4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t st : 2;           /* 4:5 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t op : 2;           /* 8:9 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 2;
            uint32_t regad : 5;           /* 12:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv17 : 3;
            uint32_t phyad : 5;           /* 20:24 SW=rw HW=ro 0x0 */
            uint32_t resv25 : 7;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mdio_master_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t wr_data : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wr_data : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mdio_master_wr_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rd_data : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rd_data : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mdio_master_rd_data;

/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t done : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t done : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mdio_master_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t done : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t done : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mdio_master_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t done : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t done : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mdio_master_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t done : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t done : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mdio_master_irq_raw;

typedef struct {
    bb_chip_mdio_master_irq_enable  enable;
    bb_chip_mdio_master_irq_pending  pending;
    bb_chip_mdio_master_irq_pending_irq  pending_irq;
    bb_chip_mdio_master_irq_raw  raw;
    
} bb_chip_mdio_master_irq;


typedef struct {
    bb_chip_mdio_master_version  version;
    bb_chip_mdio_master_timing  timing;
    bb_chip_mdio_master_control  control;
    bb_chip_mdio_master_wr_data  wr_data;
    bb_chip_mdio_master_rd_data  rd_data;
    
    union {
        bb_chip_mdio_master_irq s;
        uint8_t filler[0x10];
    } irq;
    
} bb_chip_mdio_master_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_mdio_master_version_READMASK 0xFFFFFF
#define bb_chip_mdio_master_version_WRITEMASK 0x0
#define bb_chip_mdio_master_version_VOLATILEMASK 0x0
#define bb_chip_mdio_master_version_RESETMASK 0xFFFFFF
#define bb_chip_mdio_master_version_DEFAULT 0x00030001

#define bb_chip_mdio_master_timing_READMASK 0xFFFFFF
#define bb_chip_mdio_master_timing_WRITEMASK 0xFFFFFF
#define bb_chip_mdio_master_timing_VOLATILEMASK 0x0
#define bb_chip_mdio_master_timing_RESETMASK 0xFFFFFF
#define bb_chip_mdio_master_timing_DEFAULT 0x00000000

#define bb_chip_mdio_master_control_READMASK 0x1F1F331
#define bb_chip_mdio_master_control_WRITEMASK 0x1F1F331
#define bb_chip_mdio_master_control_VOLATILEMASK 0x0
#define bb_chip_mdio_master_control_RESETMASK 0x1F1F331
#define bb_chip_mdio_master_control_DEFAULT 0x00000000

#define bb_chip_mdio_master_wr_data_READMASK 0xFFFF
#define bb_chip_mdio_master_wr_data_WRITEMASK 0xFFFF
#define bb_chip_mdio_master_wr_data_VOLATILEMASK 0x0
#define bb_chip_mdio_master_wr_data_RESETMASK 0xFFFF
#define bb_chip_mdio_master_wr_data_DEFAULT 0x00000000

#define bb_chip_mdio_master_rd_data_READMASK 0xFFFF
#define bb_chip_mdio_master_rd_data_WRITEMASK 0x0
#define bb_chip_mdio_master_rd_data_VOLATILEMASK 0xFFFF
#define bb_chip_mdio_master_rd_data_RESETMASK 0xFFFF
#define bb_chip_mdio_master_rd_data_DEFAULT 0x00000000

#define bb_chip_mdio_master_irq_enable_READMASK 0x1
#define bb_chip_mdio_master_irq_enable_WRITEMASK 0x1
#define bb_chip_mdio_master_irq_enable_VOLATILEMASK 0x0
#define bb_chip_mdio_master_irq_enable_RESETMASK 0x1
#define bb_chip_mdio_master_irq_enable_DEFAULT 0x00000000

#define bb_chip_mdio_master_irq_pending_READMASK 0x1
#define bb_chip_mdio_master_irq_pending_WRITEMASK 0x1
#define bb_chip_mdio_master_irq_pending_VOLATILEMASK 0x1
#define bb_chip_mdio_master_irq_pending_RESETMASK 0x1
#define bb_chip_mdio_master_irq_pending_DEFAULT 0x00000000

#define bb_chip_mdio_master_irq_pending_irq_READMASK 0x1
#define bb_chip_mdio_master_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_mdio_master_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_mdio_master_irq_pending_irq_RESETMASK 0x1
#define bb_chip_mdio_master_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_mdio_master_irq_raw_READMASK 0x1
#define bb_chip_mdio_master_irq_raw_WRITEMASK 0x0
#define bb_chip_mdio_master_irq_raw_VOLATILEMASK 0x1
#define bb_chip_mdio_master_irq_raw_RESETMASK 0x1
#define bb_chip_mdio_master_irq_raw_DEFAULT 0x00000000

/*block : spi_flash_ctrl */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x2 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x3 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x3 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x2 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t sck_freerun : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv24 : 7;
            uint32_t io_out_defaults : 4;           /* 23:20 SW=rw HW=ro 0xF */
            uint32_t io_tri_defaults : 4;           /* 19:16 SW=rw HW=ro 0xF */
            uint32_t sck_oe_deassert_cfg : 4;           /* 15:12 SW=rw HW=ro 0x1 */
            uint32_t cs_deassert_cfg : 4;           /* 11:8 SW=rw HW=ro 0x2 */
            uint32_t sck_oe_assert_cfg : 4;           /* 7:4 SW=rw HW=ro 0x1 */
            uint32_t cs_assert_cfg : 4;           /* 3:0 SW=rw HW=ro 0x2 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cs_assert_cfg : 4;           /* 0:3 SW=rw HW=ro 0x2 */
            uint32_t sck_oe_assert_cfg : 4;           /* 4:7 SW=rw HW=ro 0x1 */
            uint32_t cs_deassert_cfg : 4;           /* 8:11 SW=rw HW=ro 0x2 */
            uint32_t sck_oe_deassert_cfg : 4;           /* 12:15 SW=rw HW=ro 0x1 */
            uint32_t io_tri_defaults : 4;           /* 16:19 SW=rw HW=ro 0xF */
            uint32_t io_out_defaults : 4;           /* 20:23 SW=rw HW=ro 0xF */
            
            uint32_t resv24 : 7;
            uint32_t sck_freerun : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_generic_cfg;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_addr_offset;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_addr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t tr_gap_p3 : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t io_mask_data : 4;           /* 11:8 SW=rw HW=ro 0x2 */
            uint32_t io_mask_addr : 4;           /* 7:4 SW=rw HW=ro 0x1 */
            uint32_t io_mask_cmd : 4;           /* 3:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t io_mask_cmd : 4;           /* 0:3 SW=rw HW=ro 0x1 */
            uint32_t io_mask_addr : 4;           /* 4:7 SW=rw HW=ro 0x1 */
            uint32_t io_mask_data : 4;           /* 8:11 SW=rw HW=ro 0x2 */
            
            uint32_t resv12 : 4;
            uint32_t tr_gap_p3 : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_basic_cfg;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t go : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv26 : 5;
            uint32_t addr_mode : 1;           /* 25 SW=rw HW=ro 0x0 */
            uint32_t write : 1;           /* 24 SW=rw HW=ro 0x0 */
            
            uint32_t resv23 : 1;
            uint32_t num_dummy_clks : 7;           /* 22:16 SW=rw HW=ro 0x8 */
            uint32_t num_bytes : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t cmd : 8;           /* 7:0 SW=rw HW=ro 0xB */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cmd : 8;           /* 0:7 SW=rw HW=ro 0xB */
            uint32_t num_bytes : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t num_dummy_clks : 7;           /* 16:22 SW=rw HW=ro 0x8 */
            
            uint32_t resv23 : 1;
            uint32_t write : 1;           /* 24 SW=rw HW=ro 0x0 */
            uint32_t addr_mode : 1;           /* 25 SW=rw HW=ro 0x0 */
            
            uint32_t resv26 : 5;
            uint32_t go : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_control;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=wo HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_wr_data;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_rd_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_in_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_out_fifo;

/*section : mm */

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_mm_addr_offset;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t addr_mode : 1;           /* 31 SW=rw HW=ro 0x0 */
            uint32_t num_dummy_clks : 7;           /* 30:24 SW=rw HW=ro 0x8 */
            uint32_t tr_gap_p3 : 4;           /* 23:20 SW=rw HW=ro 0xF */
            uint32_t io_mask_data : 4;           /* 19:16 SW=rw HW=ro 0x2 */
            uint32_t io_mask_addr : 4;           /* 15:12 SW=rw HW=ro 0x1 */
            uint32_t io_mask_cmd : 4;           /* 11:8 SW=rw HW=ro 0x1 */
            uint32_t read_cmd : 8;           /* 7:0 SW=rw HW=ro 0xB */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t read_cmd : 8;           /* 0:7 SW=rw HW=ro 0xB */
            uint32_t io_mask_cmd : 4;           /* 8:11 SW=rw HW=ro 0x1 */
            uint32_t io_mask_addr : 4;           /* 12:15 SW=rw HW=ro 0x1 */
            uint32_t io_mask_data : 4;           /* 16:19 SW=rw HW=ro 0x2 */
            uint32_t tr_gap_p3 : 4;           /* 20:23 SW=rw HW=ro 0xF */
            uint32_t num_dummy_clks : 7;           /* 24:30 SW=rw HW=ro 0x8 */
            uint32_t addr_mode : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_mm_basic_cfg;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t xip_en : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv24 : 7;
            uint32_t io_mask_mode : 4;           /* 23:20 SW=rw HW=ro 0x1 */
            uint32_t num_mode_bits : 4;           /* 19:16 SW=rw HW=ro 0x0 */
            uint32_t mode_xip : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t mode_normal : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mode_normal : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t mode_xip : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t num_mode_bits : 4;           /* 16:19 SW=rw HW=ro 0x0 */
            uint32_t io_mask_mode : 4;           /* 20:23 SW=rw HW=ro 0x1 */
            
            uint32_t resv24 : 7;
            uint32_t xip_en : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_mm_xip_cfg;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t tr_gap_p3 : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t enable : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t io_mask : 4;           /* 11:8 SW=rw HW=ro 0x1 */
            uint32_t cmd : 8;           /* 7:0 SW=rw HW=ro 0x75 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cmd : 8;           /* 0:7 SW=rw HW=ro 0x75 */
            uint32_t io_mask : 4;           /* 8:11 SW=rw HW=ro 0x1 */
            uint32_t enable : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t tr_gap_p3 : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_mm_suspend_cfg;

typedef struct {
    bb_chip_spi_flash_ctrl_mm_addr_offset  addr_offset;
    bb_chip_spi_flash_ctrl_mm_basic_cfg  basic_cfg;
    bb_chip_spi_flash_ctrl_mm_xip_cfg  xip_cfg;
    bb_chip_spi_flash_ctrl_mm_suspend_cfg  suspend_cfg;
    
} bb_chip_spi_flash_ctrl_mm;


/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t apb_tr_done : 1;           /* 8 SW=rw HW=na 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t out_fifo_af : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 4 SW=rw HW=na 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t in_fifo_af : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_fifo_ae : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 1 SW=rw HW=na 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t out_fifo_ae : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t out_fifo_af : 1;           /* 5 SW=rw HW=na 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t apb_tr_done : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t apb_tr_done : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t out_fifo_af : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t in_fifo_af : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_fifo_ae : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t out_fifo_ae : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t out_fifo_af : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t apb_tr_done : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t apb_tr_done : 1;           /* 8 SW=ro HW=na 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t out_fifo_af : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 4 SW=ro HW=na 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t in_fifo_af : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_fifo_ae : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 1 SW=ro HW=na 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t out_fifo_ae : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t out_fifo_af : 1;           /* 5 SW=ro HW=na 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t apb_tr_done : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t apb_tr_done : 1;           /* 8 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t out_fifo_af : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t in_fifo_af : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_fifo_ae : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 1 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t out_fifo_ae : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t out_fifo_af : 1;           /* 5 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t apb_tr_done : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_spi_flash_ctrl_irq_raw;

typedef struct {
    bb_chip_spi_flash_ctrl_irq_enable  enable;
    bb_chip_spi_flash_ctrl_irq_pending  pending;
    bb_chip_spi_flash_ctrl_irq_pending_irq  pending_irq;
    bb_chip_spi_flash_ctrl_irq_raw  raw;
    
} bb_chip_spi_flash_ctrl_irq;


typedef struct {
    bb_chip_spi_flash_ctrl_version  version;
    bb_chip_spi_flash_ctrl_generic_cfg  generic_cfg;
    bb_chip_spi_flash_ctrl_addr_offset  addr_offset;
    bb_chip_spi_flash_ctrl_addr  addr;
    bb_chip_spi_flash_ctrl_basic_cfg  basic_cfg;
    bb_chip_spi_flash_ctrl_control  control;
    bb_chip_spi_flash_ctrl_wr_data  wr_data;
    bb_chip_spi_flash_ctrl_rd_data  rd_data;
    bb_chip_spi_flash_ctrl_in_fifo  in_fifo;
    bb_chip_spi_flash_ctrl_out_fifo  out_fifo;
    
    union {
        bb_chip_spi_flash_ctrl_mm s;
        uint8_t filler[0x10];
    } mm;
    
    union {
        bb_chip_spi_flash_ctrl_irq s;
        uint8_t filler[0x10];
    } irq;
    
} bb_chip_spi_flash_ctrl_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_spi_flash_ctrl_version_READMASK 0xFFFFFF
#define bb_chip_spi_flash_ctrl_version_WRITEMASK 0x0
#define bb_chip_spi_flash_ctrl_version_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_version_RESETMASK 0xFFFFFF
#define bb_chip_spi_flash_ctrl_version_DEFAULT 0x00020203

#define bb_chip_spi_flash_ctrl_generic_cfg_READMASK 0x80FFFFFF
#define bb_chip_spi_flash_ctrl_generic_cfg_WRITEMASK 0x80FFFFFF
#define bb_chip_spi_flash_ctrl_generic_cfg_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_generic_cfg_RESETMASK 0x80FFFFFF
#define bb_chip_spi_flash_ctrl_generic_cfg_DEFAULT 0x00FF1212

#define bb_chip_spi_flash_ctrl_addr_offset_READMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_addr_offset_WRITEMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_addr_offset_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_addr_offset_RESETMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_addr_offset_DEFAULT 0x00000000

#define bb_chip_spi_flash_ctrl_addr_READMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_addr_WRITEMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_addr_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_addr_RESETMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_addr_DEFAULT 0x00000000

#define bb_chip_spi_flash_ctrl_basic_cfg_READMASK 0xFFFF0FFF
#define bb_chip_spi_flash_ctrl_basic_cfg_WRITEMASK 0xFFFF0FFF
#define bb_chip_spi_flash_ctrl_basic_cfg_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_basic_cfg_RESETMASK 0xFFFF0FFF
#define bb_chip_spi_flash_ctrl_basic_cfg_DEFAULT 0x00000211

#define bb_chip_spi_flash_ctrl_control_READMASK 0x837FFFFF
#define bb_chip_spi_flash_ctrl_control_WRITEMASK 0x837FFFFF
#define bb_chip_spi_flash_ctrl_control_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_control_RESETMASK 0x837FFFFF
#define bb_chip_spi_flash_ctrl_control_DEFAULT 0x0008000B

#define bb_chip_spi_flash_ctrl_wr_data_READMASK 0x0
#define bb_chip_spi_flash_ctrl_wr_data_WRITEMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_wr_data_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_wr_data_RESETMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_wr_data_DEFAULT 0x00000000

#define bb_chip_spi_flash_ctrl_rd_data_READMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_rd_data_WRITEMASK 0x0
#define bb_chip_spi_flash_ctrl_rd_data_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_rd_data_RESETMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_rd_data_DEFAULT 0x00000000

#define bb_chip_spi_flash_ctrl_in_fifo_READMASK 0x8FFFFFFF
#define bb_chip_spi_flash_ctrl_in_fifo_WRITEMASK 0x80FFFF00
#define bb_chip_spi_flash_ctrl_in_fifo_VOLATILEMASK 0xF0000FF
#define bb_chip_spi_flash_ctrl_in_fifo_RESETMASK 0x8FFFFFFF
#define bb_chip_spi_flash_ctrl_in_fifo_DEFAULT 0x00000000

#define bb_chip_spi_flash_ctrl_out_fifo_READMASK 0x8FFFFFFF
#define bb_chip_spi_flash_ctrl_out_fifo_WRITEMASK 0x80FFFF00
#define bb_chip_spi_flash_ctrl_out_fifo_VOLATILEMASK 0xF0000FF
#define bb_chip_spi_flash_ctrl_out_fifo_RESETMASK 0x8FFFFFFF
#define bb_chip_spi_flash_ctrl_out_fifo_DEFAULT 0x00000000

#define bb_chip_spi_flash_ctrl_mm_addr_offset_READMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_mm_addr_offset_WRITEMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_mm_addr_offset_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_mm_addr_offset_RESETMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_mm_addr_offset_DEFAULT 0x00000000

#define bb_chip_spi_flash_ctrl_mm_basic_cfg_READMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_mm_basic_cfg_WRITEMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_mm_basic_cfg_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_mm_basic_cfg_RESETMASK 0xFFFFFFFF
#define bb_chip_spi_flash_ctrl_mm_basic_cfg_DEFAULT 0x08F2110B

#define bb_chip_spi_flash_ctrl_mm_xip_cfg_READMASK 0x80FFFFFF
#define bb_chip_spi_flash_ctrl_mm_xip_cfg_WRITEMASK 0x80FFFFFF
#define bb_chip_spi_flash_ctrl_mm_xip_cfg_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_mm_xip_cfg_RESETMASK 0x80FFFFFF
#define bb_chip_spi_flash_ctrl_mm_xip_cfg_DEFAULT 0x00100000

#define bb_chip_spi_flash_ctrl_mm_suspend_cfg_READMASK 0xFFFF1FFF
#define bb_chip_spi_flash_ctrl_mm_suspend_cfg_WRITEMASK 0xFFFF1FFF
#define bb_chip_spi_flash_ctrl_mm_suspend_cfg_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_mm_suspend_cfg_RESETMASK 0xFFFF1FFF
#define bb_chip_spi_flash_ctrl_mm_suspend_cfg_DEFAULT 0x00000175

#define bb_chip_spi_flash_ctrl_irq_enable_READMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_enable_WRITEMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_enable_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_irq_enable_RESETMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_enable_DEFAULT 0x00000000

#define bb_chip_spi_flash_ctrl_irq_pending_READMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_pending_WRITEMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_pending_VOLATILEMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_pending_RESETMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_pending_DEFAULT 0x00000000

#define bb_chip_spi_flash_ctrl_irq_pending_irq_READMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_spi_flash_ctrl_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_spi_flash_ctrl_irq_pending_irq_RESETMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_spi_flash_ctrl_irq_raw_READMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_raw_WRITEMASK 0x0
#define bb_chip_spi_flash_ctrl_irq_raw_VOLATILEMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_raw_RESETMASK 0x133
#define bb_chip_spi_flash_ctrl_irq_raw_DEFAULT 0x00000000

/*block : gpio_ctrl */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x1 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_gpio_ctrl_version;

typedef union {
    struct {
        uint32_t dir : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_gpio_ctrl_gpio_dir;

typedef union {
    struct {
        uint32_t out : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_gpio_ctrl_gpio_out;

typedef union {
    struct {
        uint32_t in : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_gpio_ctrl_gpio_in;

/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t gpio31 : 1;           /* 31 SW=rw HW=na 0x0 */
            uint32_t gpio30 : 1;           /* 30 SW=rw HW=na 0x0 */
            uint32_t gpio29 : 1;           /* 29 SW=rw HW=na 0x0 */
            uint32_t gpio28 : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t gpio27 : 1;           /* 27 SW=rw HW=na 0x0 */
            uint32_t gpio26 : 1;           /* 26 SW=rw HW=na 0x0 */
            uint32_t gpio25 : 1;           /* 25 SW=rw HW=na 0x0 */
            uint32_t gpio24 : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t gpio23 : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t gpio22 : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t gpio21 : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t gpio20 : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t gpio19 : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t gpio18 : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t gpio17 : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t gpio16 : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t gpio15 : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t gpio14 : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t gpio13 : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t gpio12 : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t gpio11 : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t gpio10 : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t gpio9 : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t gpio8 : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t gpio7 : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t gpio6 : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t gpio5 : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t gpio4 : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t gpio3 : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t gpio2 : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t gpio1 : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t gpio0 : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gpio0 : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t gpio1 : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t gpio2 : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t gpio3 : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t gpio4 : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t gpio5 : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t gpio6 : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t gpio7 : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t gpio8 : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t gpio9 : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t gpio10 : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t gpio11 : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t gpio12 : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t gpio13 : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t gpio14 : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t gpio15 : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t gpio16 : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t gpio17 : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t gpio18 : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t gpio19 : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t gpio20 : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t gpio21 : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t gpio22 : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t gpio23 : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t gpio24 : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t gpio25 : 1;           /* 25 SW=rw HW=na 0x0 */
            uint32_t gpio26 : 1;           /* 26 SW=rw HW=na 0x0 */
            uint32_t gpio27 : 1;           /* 27 SW=rw HW=na 0x0 */
            uint32_t gpio28 : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t gpio29 : 1;           /* 29 SW=rw HW=na 0x0 */
            uint32_t gpio30 : 1;           /* 30 SW=rw HW=na 0x0 */
            uint32_t gpio31 : 1;           /* 31 SW=rw HW=na 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_gpio_ctrl_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t gpio31 : 1;           /* 31 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio30 : 1;           /* 30 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio29 : 1;           /* 29 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio28 : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio27 : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio26 : 1;           /* 26 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio25 : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio24 : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio23 : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio22 : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio21 : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio20 : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio19 : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio18 : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio17 : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio16 : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio15 : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio14 : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio13 : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio12 : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio11 : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio10 : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio9 : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio8 : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio7 : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio6 : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio5 : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio4 : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio3 : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio2 : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio1 : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio0 : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gpio0 : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio1 : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio2 : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio3 : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio4 : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio5 : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio6 : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio7 : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio8 : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio9 : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio10 : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio11 : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio12 : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio13 : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio14 : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio15 : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio16 : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio17 : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio18 : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio19 : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio20 : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio21 : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio22 : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio23 : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio24 : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio25 : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio26 : 1;           /* 26 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio27 : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio28 : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio29 : 1;           /* 29 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio30 : 1;           /* 30 SW=r/w1c HW=wo 0x0 */
            uint32_t gpio31 : 1;           /* 31 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_gpio_ctrl_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t gpio31 : 1;           /* 31 SW=ro HW=na 0x0 */
            uint32_t gpio30 : 1;           /* 30 SW=ro HW=na 0x0 */
            uint32_t gpio29 : 1;           /* 29 SW=ro HW=na 0x0 */
            uint32_t gpio28 : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t gpio27 : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t gpio26 : 1;           /* 26 SW=ro HW=na 0x0 */
            uint32_t gpio25 : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t gpio24 : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t gpio23 : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t gpio22 : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t gpio21 : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t gpio20 : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t gpio19 : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t gpio18 : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t gpio17 : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t gpio16 : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t gpio15 : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t gpio14 : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t gpio13 : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t gpio12 : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t gpio11 : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t gpio10 : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t gpio9 : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t gpio8 : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t gpio7 : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t gpio6 : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t gpio5 : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t gpio4 : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t gpio3 : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t gpio2 : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t gpio1 : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t gpio0 : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gpio0 : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t gpio1 : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t gpio2 : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t gpio3 : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t gpio4 : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t gpio5 : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t gpio6 : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t gpio7 : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t gpio8 : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t gpio9 : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t gpio10 : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t gpio11 : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t gpio12 : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t gpio13 : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t gpio14 : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t gpio15 : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t gpio16 : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t gpio17 : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t gpio18 : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t gpio19 : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t gpio20 : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t gpio21 : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t gpio22 : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t gpio23 : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t gpio24 : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t gpio25 : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t gpio26 : 1;           /* 26 SW=ro HW=na 0x0 */
            uint32_t gpio27 : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t gpio28 : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t gpio29 : 1;           /* 29 SW=ro HW=na 0x0 */
            uint32_t gpio30 : 1;           /* 30 SW=ro HW=na 0x0 */
            uint32_t gpio31 : 1;           /* 31 SW=ro HW=na 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_gpio_ctrl_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t gpio31 : 1;           /* 31 SW=ro HW=na 0x0 */
            uint32_t gpio30 : 1;           /* 30 SW=ro HW=na 0x0 */
            uint32_t gpio29 : 1;           /* 29 SW=ro HW=na 0x0 */
            uint32_t gpio28 : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t gpio27 : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t gpio26 : 1;           /* 26 SW=ro HW=na 0x0 */
            uint32_t gpio25 : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t gpio24 : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t gpio23 : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t gpio22 : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t gpio21 : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t gpio20 : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t gpio19 : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t gpio18 : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t gpio17 : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t gpio16 : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t gpio15 : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t gpio14 : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t gpio13 : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t gpio12 : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t gpio11 : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t gpio10 : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t gpio9 : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t gpio8 : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t gpio7 : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t gpio6 : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t gpio5 : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t gpio4 : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t gpio3 : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t gpio2 : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t gpio1 : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t gpio0 : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gpio0 : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t gpio1 : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t gpio2 : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t gpio3 : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t gpio4 : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t gpio5 : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t gpio6 : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t gpio7 : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t gpio8 : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t gpio9 : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t gpio10 : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t gpio11 : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t gpio12 : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t gpio13 : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t gpio14 : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t gpio15 : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t gpio16 : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t gpio17 : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t gpio18 : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t gpio19 : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t gpio20 : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t gpio21 : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t gpio22 : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t gpio23 : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t gpio24 : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t gpio25 : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t gpio26 : 1;           /* 26 SW=ro HW=na 0x0 */
            uint32_t gpio27 : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t gpio28 : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t gpio29 : 1;           /* 29 SW=ro HW=na 0x0 */
            uint32_t gpio30 : 1;           /* 30 SW=ro HW=na 0x0 */
            uint32_t gpio31 : 1;           /* 31 SW=ro HW=na 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_gpio_ctrl_irq_raw;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t gpio7 : 4;           /* 31:28 SW=rw HW=ro 0x0 */
            uint32_t gpio6 : 4;           /* 27:24 SW=rw HW=ro 0x0 */
            uint32_t gpio5 : 4;           /* 23:20 SW=rw HW=ro 0x0 */
            uint32_t gpio4 : 4;           /* 19:16 SW=rw HW=ro 0x0 */
            uint32_t gpio3 : 4;           /* 15:12 SW=rw HW=ro 0x0 */
            uint32_t gpio2 : 4;           /* 11:8 SW=rw HW=ro 0x0 */
            uint32_t gpio1 : 4;           /* 7:4 SW=rw HW=ro 0x0 */
            uint32_t gpio0 : 4;           /* 3:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gpio0 : 4;           /* 0:3 SW=rw HW=ro 0x0 */
            uint32_t gpio1 : 4;           /* 4:7 SW=rw HW=ro 0x0 */
            uint32_t gpio2 : 4;           /* 8:11 SW=rw HW=ro 0x0 */
            uint32_t gpio3 : 4;           /* 12:15 SW=rw HW=ro 0x0 */
            uint32_t gpio4 : 4;           /* 16:19 SW=rw HW=ro 0x0 */
            uint32_t gpio5 : 4;           /* 20:23 SW=rw HW=ro 0x0 */
            uint32_t gpio6 : 4;           /* 24:27 SW=rw HW=ro 0x0 */
            uint32_t gpio7 : 4;           /* 28:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_gpio_ctrl_irq_int_type;

typedef struct {
    bb_chip_gpio_ctrl_irq_enable  enable;
    bb_chip_gpio_ctrl_irq_pending  pending;
    bb_chip_gpio_ctrl_irq_pending_irq  pending_irq;
    bb_chip_gpio_ctrl_irq_raw  raw;
    bb_chip_gpio_ctrl_irq_int_type  int_type[0x4];
    
} bb_chip_gpio_ctrl_irq;


typedef struct {
    bb_chip_gpio_ctrl_version  version;
    bb_chip_gpio_ctrl_gpio_dir  gpio_dir;
    bb_chip_gpio_ctrl_gpio_out  gpio_out;
    bb_chip_gpio_ctrl_gpio_in  gpio_in;
    
    union {
        bb_chip_gpio_ctrl_irq s;
        uint8_t filler[0x20];
    } irq;
    
} bb_chip_gpio_ctrl_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_gpio_ctrl_version_READMASK 0xFFFFFF
#define bb_chip_gpio_ctrl_version_WRITEMASK 0x0
#define bb_chip_gpio_ctrl_version_VOLATILEMASK 0x0
#define bb_chip_gpio_ctrl_version_RESETMASK 0xFFFFFF
#define bb_chip_gpio_ctrl_version_DEFAULT 0x00030201

#define bb_chip_gpio_ctrl_gpio_dir_READMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_gpio_dir_WRITEMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_gpio_dir_VOLATILEMASK 0x0
#define bb_chip_gpio_ctrl_gpio_dir_RESETMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_gpio_dir_DEFAULT 0x00000000

#define bb_chip_gpio_ctrl_gpio_out_READMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_gpio_out_WRITEMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_gpio_out_VOLATILEMASK 0x0
#define bb_chip_gpio_ctrl_gpio_out_RESETMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_gpio_out_DEFAULT 0x00000000

#define bb_chip_gpio_ctrl_gpio_in_READMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_gpio_in_WRITEMASK 0x0
#define bb_chip_gpio_ctrl_gpio_in_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_gpio_in_RESETMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_gpio_in_DEFAULT 0x00000000

#define bb_chip_gpio_ctrl_irq_enable_READMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_enable_WRITEMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_enable_VOLATILEMASK 0x0
#define bb_chip_gpio_ctrl_irq_enable_RESETMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_enable_DEFAULT 0x00000000

#define bb_chip_gpio_ctrl_irq_pending_READMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_pending_WRITEMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_pending_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_pending_RESETMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_pending_DEFAULT 0x00000000

#define bb_chip_gpio_ctrl_irq_pending_irq_READMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_gpio_ctrl_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_gpio_ctrl_irq_pending_irq_RESETMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_gpio_ctrl_irq_raw_READMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_raw_WRITEMASK 0x0
#define bb_chip_gpio_ctrl_irq_raw_VOLATILEMASK 0x0
#define bb_chip_gpio_ctrl_irq_raw_RESETMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_raw_DEFAULT 0x00000000

#define bb_chip_gpio_ctrl_irq_int_type_READMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_int_type_WRITEMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_int_type_VOLATILEMASK 0x0
#define bb_chip_gpio_ctrl_irq_int_type_RESETMASK 0xFFFFFFFF
#define bb_chip_gpio_ctrl_irq_int_type_DEFAULT 0x00000000

/*block : bb_core */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0xC */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x7 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x7 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0xC */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_version;

typedef union {
    struct {
        uint32_t value : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_core_cpu_freq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t link_rate : 4;           /* 19:16 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t link_mode : 5;           /* 12:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t boot_sel : 2;           /* 5:4 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rex_lex_n : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rex_lex_n : 1;           /* 0 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t boot_sel : 2;           /* 4:5 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t link_mode : 5;           /* 8:12 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t link_rate : 4;           /* 16:19 SW=ro HW=wo 0x0 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_sys_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv17 : 15;
            uint32_t xgmii_rx_idle_counter : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rs232_extender : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t ge_uart : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t ge_adapter : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t xmii_adapter : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t dp_source : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t dp_sink : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t xusb3 : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t mca : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t layer3 : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t link_layer : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t gpio_ctrl : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t spi_flash_ctrl : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t mdio_master : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t i2c_slave : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t i2c_master : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t bb_uart : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t bb_uart : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t i2c_master : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t i2c_slave : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t mdio_master : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t spi_flash_ctrl : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t gpio_ctrl : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t link_layer : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t layer3 : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t mca : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t xusb3 : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t dp_sink : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t dp_source : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t xmii_adapter : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t ge_adapter : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t ge_uart : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t rs232_extender : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t xgmii_rx_idle_counter : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t resv17 : 15;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_feature;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t version_sel : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t module_sel : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t module_sel : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t version_sel : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_module_version_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_module_version;

/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t rs232_underrun_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t rs232_underrun_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t rs232_underrun_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t rs232_underrun_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t rs232_underrun_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t rs232_underrun_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t rs232_underrun_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mca_rx_cpu_srdy : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t rs232_underrun_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_irq_raw;

typedef struct {
    bb_chip_bb_core_irq_enable  enable;
    bb_chip_bb_core_irq_pending  pending;
    bb_chip_bb_core_irq_pending_irq  pending_irq;
    bb_chip_bb_core_irq_raw  raw;
    
} bb_chip_bb_core_irq;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t eop : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t sop : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t data : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t data : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t sop : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t eop : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_cpu_comm_tx;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t eop : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t sop : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t data : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t data : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t sop : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t eop : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_cpu_comm_rx;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t ipg_m1 : 8;           /* 15:8 SW=rw HW=ro 0xB */
            
            uint32_t resv2 : 6;
            uint32_t mode : 2;           /* 1:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mode : 2;           /* 0:1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t ipg_m1 : 8;           /* 8:15 SW=rw HW=ro 0xB */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_xmii_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t clk_down_scale : 16;           /* 31:16 SW=rw HW=ro 0x1 */
            
            uint32_t resv1 : 15;
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 15;
            uint32_t clk_down_scale : 16;           /* 16:31 SW=rw HW=ro 0x1 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_rs232_ctrl;

/*section : xgmii_idle_counter */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t num_xgmii_clks : 31;           /* 31:1 SW=rw HW=ro 0xFFFF */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t num_xgmii_clks : 31;           /* 1:31 SW=rw HW=ro 0xFFFF */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_xgmii_idle_counter_control;

typedef union {
    struct {
        uint32_t idle_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_core_xgmii_idle_counter_status;

typedef struct {
    bb_chip_bb_core_xgmii_idle_counter_control  control;
    bb_chip_bb_core_xgmii_idle_counter_status  status;
    
} bb_chip_bb_core_xgmii_idle_counter;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t timeout_hresp : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t timeout_hresp : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_ahb_to_apb_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t clei_tx : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t clei_rx : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t clei_rx : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t clei_tx : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_core_ge_ctrl;

/*section : scratchpad */

typedef union {
    struct {
        uint32_t value : 32;           /* 31:0 SW=rw HW=na 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_core_scratchpad_spr;

typedef struct {
    bb_chip_bb_core_scratchpad_spr  spr[0x4];
    
} bb_chip_bb_core_scratchpad;


typedef struct {
    bb_chip_bb_core_version  version;
    bb_chip_bb_core_cpu_freq  cpu_freq;
    bb_chip_bb_core_sys_config  sys_config;
    bb_chip_bb_core_feature  feature;
    bb_chip_bb_core_module_version_ctrl  module_version_ctrl;
    bb_chip_bb_core_module_version  module_version;
    
    union {
        bb_chip_bb_core_irq s;
        uint8_t filler[0x10];
    } irq;
    bb_chip_bb_core_cpu_comm_tx  cpu_comm_tx;
    bb_chip_bb_core_cpu_comm_rx  cpu_comm_rx;
    bb_chip_bb_core_xmii_ctrl  xmii_ctrl;
    bb_chip_bb_core_rs232_ctrl  rs232_ctrl;
    
    union {
        bb_chip_bb_core_xgmii_idle_counter s;
        uint8_t filler[0x8];
    } xgmii_idle_counter;
    bb_chip_bb_core_ahb_to_apb_ctrl  ahb_to_apb_ctrl;
    bb_chip_bb_core_ge_ctrl  ge_ctrl;
    
    union {
        bb_chip_bb_core_scratchpad s;
        uint8_t filler[0x10];
    } scratchpad;
    
} bb_chip_bb_core_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_bb_core_version_READMASK 0xFFFFFF
#define bb_chip_bb_core_version_WRITEMASK 0x0
#define bb_chip_bb_core_version_VOLATILEMASK 0x0
#define bb_chip_bb_core_version_RESETMASK 0xFFFFFF
#define bb_chip_bb_core_version_DEFAULT 0x000C0701

#define bb_chip_bb_core_cpu_freq_READMASK 0xFFFFFFFF
#define bb_chip_bb_core_cpu_freq_WRITEMASK 0x0
#define bb_chip_bb_core_cpu_freq_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_bb_core_cpu_freq_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_core_cpu_freq_DEFAULT 0x00000000

#define bb_chip_bb_core_sys_config_READMASK 0xF1F31
#define bb_chip_bb_core_sys_config_WRITEMASK 0x0
#define bb_chip_bb_core_sys_config_VOLATILEMASK 0xF1F31
#define bb_chip_bb_core_sys_config_RESETMASK 0xF1F31
#define bb_chip_bb_core_sys_config_DEFAULT 0x00000000

#define bb_chip_bb_core_feature_READMASK 0x1FFFF
#define bb_chip_bb_core_feature_WRITEMASK 0x0
#define bb_chip_bb_core_feature_VOLATILEMASK 0x1FFFF
#define bb_chip_bb_core_feature_RESETMASK 0x1FFFF
#define bb_chip_bb_core_feature_DEFAULT 0x00000000

#define bb_chip_bb_core_module_version_ctrl_READMASK 0xFFFF
#define bb_chip_bb_core_module_version_ctrl_WRITEMASK 0xFFFF
#define bb_chip_bb_core_module_version_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_core_module_version_ctrl_RESETMASK 0xFFFF
#define bb_chip_bb_core_module_version_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_core_module_version_READMASK 0xFFFFFF
#define bb_chip_bb_core_module_version_WRITEMASK 0x0
#define bb_chip_bb_core_module_version_VOLATILEMASK 0xFFFFFF
#define bb_chip_bb_core_module_version_RESETMASK 0xFFFFFF
#define bb_chip_bb_core_module_version_DEFAULT 0x00000000

#define bb_chip_bb_core_irq_enable_READMASK 0x3
#define bb_chip_bb_core_irq_enable_WRITEMASK 0x3
#define bb_chip_bb_core_irq_enable_VOLATILEMASK 0x0
#define bb_chip_bb_core_irq_enable_RESETMASK 0x3
#define bb_chip_bb_core_irq_enable_DEFAULT 0x00000000

#define bb_chip_bb_core_irq_pending_READMASK 0x3
#define bb_chip_bb_core_irq_pending_WRITEMASK 0x3
#define bb_chip_bb_core_irq_pending_VOLATILEMASK 0x3
#define bb_chip_bb_core_irq_pending_RESETMASK 0x3
#define bb_chip_bb_core_irq_pending_DEFAULT 0x00000000

#define bb_chip_bb_core_irq_pending_irq_READMASK 0x3
#define bb_chip_bb_core_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_bb_core_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_bb_core_irq_pending_irq_RESETMASK 0x3
#define bb_chip_bb_core_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_bb_core_irq_raw_READMASK 0x3
#define bb_chip_bb_core_irq_raw_WRITEMASK 0x0
#define bb_chip_bb_core_irq_raw_VOLATILEMASK 0x3
#define bb_chip_bb_core_irq_raw_RESETMASK 0x3
#define bb_chip_bb_core_irq_raw_DEFAULT 0x00000000

#define bb_chip_bb_core_cpu_comm_tx_READMASK 0x3FF
#define bb_chip_bb_core_cpu_comm_tx_WRITEMASK 0x3FF
#define bb_chip_bb_core_cpu_comm_tx_VOLATILEMASK 0x0
#define bb_chip_bb_core_cpu_comm_tx_RESETMASK 0x3FF
#define bb_chip_bb_core_cpu_comm_tx_DEFAULT 0x00000000

#define bb_chip_bb_core_cpu_comm_rx_READMASK 0x3FF
#define bb_chip_bb_core_cpu_comm_rx_WRITEMASK 0x0
#define bb_chip_bb_core_cpu_comm_rx_VOLATILEMASK 0x3FF
#define bb_chip_bb_core_cpu_comm_rx_RESETMASK 0x3FF
#define bb_chip_bb_core_cpu_comm_rx_DEFAULT 0x00000000

#define bb_chip_bb_core_xmii_ctrl_READMASK 0xFF03
#define bb_chip_bb_core_xmii_ctrl_WRITEMASK 0xFF03
#define bb_chip_bb_core_xmii_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_core_xmii_ctrl_RESETMASK 0xFF03
#define bb_chip_bb_core_xmii_ctrl_DEFAULT 0x00000B00

#define bb_chip_bb_core_rs232_ctrl_READMASK 0xFFFF0001
#define bb_chip_bb_core_rs232_ctrl_WRITEMASK 0xFFFF0001
#define bb_chip_bb_core_rs232_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_core_rs232_ctrl_RESETMASK 0xFFFF0001
#define bb_chip_bb_core_rs232_ctrl_DEFAULT 0x00010000

#define bb_chip_bb_core_xgmii_idle_counter_control_READMASK 0xFFFFFFFF
#define bb_chip_bb_core_xgmii_idle_counter_control_WRITEMASK 0xFFFFFFFF
#define bb_chip_bb_core_xgmii_idle_counter_control_VOLATILEMASK 0x0
#define bb_chip_bb_core_xgmii_idle_counter_control_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_core_xgmii_idle_counter_control_DEFAULT 0x0001FFFE

#define bb_chip_bb_core_xgmii_idle_counter_status_READMASK 0xFFFFFFFF
#define bb_chip_bb_core_xgmii_idle_counter_status_WRITEMASK 0x0
#define bb_chip_bb_core_xgmii_idle_counter_status_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_bb_core_xgmii_idle_counter_status_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_core_xgmii_idle_counter_status_DEFAULT 0x00000000

#define bb_chip_bb_core_ahb_to_apb_ctrl_READMASK 0x1
#define bb_chip_bb_core_ahb_to_apb_ctrl_WRITEMASK 0x1
#define bb_chip_bb_core_ahb_to_apb_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_core_ahb_to_apb_ctrl_RESETMASK 0x1
#define bb_chip_bb_core_ahb_to_apb_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_core_ge_ctrl_READMASK 0x3
#define bb_chip_bb_core_ge_ctrl_WRITEMASK 0x3
#define bb_chip_bb_core_ge_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_core_ge_ctrl_RESETMASK 0x3
#define bb_chip_bb_core_ge_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_core_scratchpad_spr_READMASK 0xFFFFFFFF
#define bb_chip_bb_core_scratchpad_spr_WRITEMASK 0xFFFFFFFF
#define bb_chip_bb_core_scratchpad_spr_VOLATILEMASK 0x0
#define bb_chip_bb_core_scratchpad_spr_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_core_scratchpad_spr_DEFAULT 0x00000000

/*block : bb_top */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x10 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x4 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x10 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t env_info : 8;           /* 31:24 SW=ro HW=wo 0x0 */
            uint32_t platform_support : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            
            uint32_t resv14 : 2;
            uint32_t base_platform : 4;           /* 13:10 SW=ro HW=wo 0x0 */
            uint32_t image_type : 2;           /* 9:8 SW=ro HW=wo 0x0 */
            uint32_t part_number : 4;           /* 7:4 SW=ro HW=wo 0x0 */
            uint32_t vendor : 2;           /* 3:2 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 1;
            uint32_t technology : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t technology : 1;           /* 0 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 1;
            uint32_t vendor : 2;           /* 2:3 SW=ro HW=wo 0x0 */
            uint32_t part_number : 4;           /* 4:7 SW=ro HW=wo 0x0 */
            uint32_t image_type : 2;           /* 8:9 SW=ro HW=wo 0x0 */
            uint32_t base_platform : 4;           /* 10:13 SW=ro HW=wo 0x0 */
            
            uint32_t resv14 : 2;
            uint32_t platform_support : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t env_info : 8;           /* 24:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_sys_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t dp_gtp : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t xadc : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t sl_5g : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t rxaui_l0_t1 : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t rxaui_l0_t0 : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rxaui_l0_t0 : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t rxaui_l0_t1 : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t sl_5g : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t xadc : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t dp_gtp : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_feature;

/*section : icap */

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_top_icap_wdata;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_top_icap_rdata;

typedef struct {
    bb_chip_bb_top_icap_wdata  wdata;
    bb_chip_bb_top_icap_rdata  rdata;
    
} bb_chip_bb_top_icap;


/*section : grm */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t cpu_rst : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv30 : 1;
            uint32_t link_stats_rx_rst : 1;           /* 29 SW=rw HW=ro 0x1 */
            uint32_t sl_5g_rx_rst : 1;           /* 28 SW=rw HW=ro 0x1 */
            uint32_t sl_5g_tx_rst : 1;           /* 27 SW=rw HW=ro 0x1 */
            uint32_t xmii_rx_rst : 1;           /* 26 SW=rw HW=ro 0x1 */
            uint32_t xmii_tx_rst : 1;           /* 25 SW=rw HW=ro 0x1 */
            uint32_t ge_clm_rx_rst : 1;           /* 24 SW=rw HW=ro 0x1 */
            uint32_t ge_clm_tx_rst : 1;           /* 23 SW=rw HW=ro 0x1 */
            uint32_t rs232_rst : 1;           /* 22 SW=rw HW=ro 0x1 */
            uint32_t ulp_phy_rst : 1;           /* 21 SW=rw HW=ro 0x1 */
            uint32_t ulp_core_rst : 1;           /* 20 SW=rw HW=ro 0x1 */
            uint32_t upp_rst : 1;           /* 19 SW=rw HW=ro 0x1 */
            uint32_t xusb_rst : 1;           /* 18 SW=rw HW=ro 0x1 */
            uint32_t tico_d_ctrl_rst : 1;           /* 17 SW=rw HW=ro 0x1 */
            uint32_t dp_source_rst : 1;           /* 16 SW=rw HW=ro 0x1 */
            uint32_t tico_e_ctrl_rst : 1;           /* 15 SW=rw HW=ro 0x1 */
            uint32_t dp_sink_rst : 1;           /* 14 SW=rw HW=ro 0x1 */
            uint32_t dp_aux_hpd_rst : 1;           /* 13 SW=rw HW=ro 0x1 */
            uint32_t mca_core_rx_rst : 1;           /* 12 SW=rw HW=ro 0x1 */
            uint32_t mca_core_tx_rst : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t l3_rx_rst : 1;           /* 10 SW=rw HW=ro 0x1 */
            uint32_t l3_tx_rst : 1;           /* 9 SW=rw HW=ro 0x1 */
            uint32_t dll_rx_rst : 1;           /* 8 SW=rw HW=ro 0x1 */
            uint32_t dll_tx_rst : 1;           /* 7 SW=rw HW=ro 0x1 */
            uint32_t gpio_ctrl_rst : 1;           /* 6 SW=rw HW=ro 0x1 */
            uint32_t spi_flash_ctrl_rst : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t mdio_master_rst : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t i2c_slave_rst : 1;           /* 3 SW=rw HW=ro 0x1 */
            uint32_t i2c_master_rst : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t ge_uart_rst : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t bb_uart_rst : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t bb_uart_rst : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t ge_uart_rst : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t i2c_master_rst : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t i2c_slave_rst : 1;           /* 3 SW=rw HW=ro 0x1 */
            uint32_t mdio_master_rst : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t spi_flash_ctrl_rst : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t gpio_ctrl_rst : 1;           /* 6 SW=rw HW=ro 0x1 */
            uint32_t dll_tx_rst : 1;           /* 7 SW=rw HW=ro 0x1 */
            uint32_t dll_rx_rst : 1;           /* 8 SW=rw HW=ro 0x1 */
            uint32_t l3_tx_rst : 1;           /* 9 SW=rw HW=ro 0x1 */
            uint32_t l3_rx_rst : 1;           /* 10 SW=rw HW=ro 0x1 */
            uint32_t mca_core_tx_rst : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t mca_core_rx_rst : 1;           /* 12 SW=rw HW=ro 0x1 */
            uint32_t dp_aux_hpd_rst : 1;           /* 13 SW=rw HW=ro 0x1 */
            uint32_t dp_sink_rst : 1;           /* 14 SW=rw HW=ro 0x1 */
            uint32_t tico_e_ctrl_rst : 1;           /* 15 SW=rw HW=ro 0x1 */
            uint32_t dp_source_rst : 1;           /* 16 SW=rw HW=ro 0x1 */
            uint32_t tico_d_ctrl_rst : 1;           /* 17 SW=rw HW=ro 0x1 */
            uint32_t xusb_rst : 1;           /* 18 SW=rw HW=ro 0x1 */
            uint32_t upp_rst : 1;           /* 19 SW=rw HW=ro 0x1 */
            uint32_t ulp_core_rst : 1;           /* 20 SW=rw HW=ro 0x1 */
            uint32_t ulp_phy_rst : 1;           /* 21 SW=rw HW=ro 0x1 */
            uint32_t rs232_rst : 1;           /* 22 SW=rw HW=ro 0x1 */
            uint32_t ge_clm_tx_rst : 1;           /* 23 SW=rw HW=ro 0x1 */
            uint32_t ge_clm_rx_rst : 1;           /* 24 SW=rw HW=ro 0x1 */
            uint32_t xmii_tx_rst : 1;           /* 25 SW=rw HW=ro 0x1 */
            uint32_t xmii_rx_rst : 1;           /* 26 SW=rw HW=ro 0x1 */
            uint32_t sl_5g_tx_rst : 1;           /* 27 SW=rw HW=ro 0x1 */
            uint32_t sl_5g_rx_rst : 1;           /* 28 SW=rw HW=ro 0x1 */
            uint32_t link_stats_rx_rst : 1;           /* 29 SW=rw HW=ro 0x1 */
            
            uint32_t resv30 : 1;
            uint32_t cpu_rst : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_grm_soft_rst_ctrl;

typedef struct {
    bb_chip_bb_top_grm_soft_rst_ctrl  soft_rst_ctrl;
    
} bb_chip_bb_top_grm;


/*section : gcm */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t link_gt_common_pll0reset : 1;           /* 8 SW=rw HW=ro 0x1 */
            
            uint32_t resv5 : 3;
            uint32_t xmii_tx_clk_sel : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t ulp_phy_clk_pll_rst : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ulp_phy_clk_pll_rst : 1;           /* 0 SW=rw HW=ro 0x1 */
            
            uint32_t resv1 : 3;
            uint32_t xmii_tx_clk_sel : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t link_gt_common_pll0reset : 1;           /* 8 SW=rw HW=ro 0x1 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_gcm_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t link_mmcm_lock : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t link_gt_common_pll0refclklost : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t link_gt_common_pll0lock : 1;           /* 8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t ulp_phy_clk_lock : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t cpu_clk_lock : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cpu_clk_lock : 1;           /* 0 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t ulp_phy_clk_lock : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t link_gt_common_pll0lock : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t link_gt_common_pll0refclklost : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t link_mmcm_lock : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_gcm_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t count : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t ref_clk_faster : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t max_count : 8;           /* 11:4 SW=rw HW=ro 0x0 */
            uint32_t clk_sel : 3;           /* 3:1 SW=rw HW=ro 0x0 */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t clk_sel : 3;           /* 1:3 SW=rw HW=ro 0x0 */
            uint32_t max_count : 8;           /* 4:11 SW=rw HW=ro 0x0 */
            uint32_t ref_clk_faster : 1;           /* 12 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t count : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_gcm_freq_det;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t count : 14;           /* 31:18 SW=ro HW=wo 0x0 */
            
            uint32_t resv17 : 1;
            uint32_t ref_clk_faster : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t max_count : 14;           /* 15:2 SW=rw HW=ro 0x0 */
            uint32_t clk_sel : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t clk_sel : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t max_count : 14;           /* 2:15 SW=rw HW=ro 0x0 */
            uint32_t ref_clk_faster : 1;           /* 16 SW=ro HW=wo 0x0 */
            
            uint32_t resv17 : 1;
            uint32_t count : 14;           /* 18:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_gcm_freq_det_dp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t auto_enable : 1;           /* 31 SW=rw HW=ro 0x0 */
            uint32_t comp_ref_clk_faster : 1;           /* 30 SW=rw HW=ro 0x0 */
            uint32_t comp_count_max : 14;           /* 29:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv14 : 2;
            uint32_t comp_count_min : 14;           /* 13:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t comp_count_min : 14;           /* 0:13 SW=rw HW=ro 0x0 */
            
            uint32_t resv14 : 2;
            uint32_t comp_count_max : 14;           /* 16:29 SW=rw HW=ro 0x0 */
            uint32_t comp_ref_clk_faster : 1;           /* 30 SW=rw HW=ro 0x0 */
            uint32_t auto_enable : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_gcm_freq_det_dp_auto;

typedef struct {
    bb_chip_bb_top_gcm_control  control;
    bb_chip_bb_top_gcm_status  status;
    bb_chip_bb_top_gcm_freq_det  freq_det;
    bb_chip_bb_top_gcm_freq_det_dp  freq_det_dp;
    bb_chip_bb_top_gcm_freq_det_dp_auto  freq_det_dp_auto;
    
} bb_chip_bb_top_gcm;


/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv19 : 13;
            uint32_t freq_det_dp_oor : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t rxaui_gt1_rx_buf_overflow : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t rxaui_gt1_rx_buf_underflow : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t rxaui_gt0_rx_buf_overflow : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t rxaui_gt0_rx_buf_underflow : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t sl_5g_rx_buf_overflow : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t sl_5g_rx_buf_underflow : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t sl_5g_rx_fsm_reset_done : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t sl_5g_tx_fsm_reset_done : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t rxaui_align_status : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t ulp_phy_clk_lock : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t xadc_ot : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t xadc_vbram : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t xadc_vccaux : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t xadc_vccint : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t xadc_user_temp : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t usb_vbus_detect : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t mdio_int_b : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t sfp_los : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sfp_los : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t mdio_int_b : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t usb_vbus_detect : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t xadc_user_temp : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t xadc_vccint : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t xadc_vccaux : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t xadc_vbram : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t xadc_ot : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t ulp_phy_clk_lock : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t rxaui_align_status : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t sl_5g_tx_fsm_reset_done : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t sl_5g_rx_fsm_reset_done : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t sl_5g_rx_buf_underflow : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t sl_5g_rx_buf_overflow : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t rxaui_gt0_rx_buf_underflow : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t rxaui_gt0_rx_buf_overflow : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t rxaui_gt1_rx_buf_underflow : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t rxaui_gt1_rx_buf_overflow : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t freq_det_dp_oor : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t resv19 : 13;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv19 : 13;
            uint32_t freq_det_dp_oor : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t rxaui_gt1_rx_buf_overflow : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t rxaui_gt1_rx_buf_underflow : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t rxaui_gt0_rx_buf_overflow : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t rxaui_gt0_rx_buf_underflow : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t sl_5g_rx_buf_overflow : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t sl_5g_rx_buf_underflow : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t sl_5g_rx_fsm_reset_done : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t sl_5g_tx_fsm_reset_done : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t rxaui_align_status : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t ulp_phy_clk_lock : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t xadc_ot : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t xadc_vbram : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t xadc_vccaux : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t xadc_vccint : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t xadc_user_temp : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t usb_vbus_detect : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t mdio_int_b : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t sfp_los : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sfp_los : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t mdio_int_b : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t usb_vbus_detect : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t xadc_user_temp : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t xadc_vccint : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t xadc_vccaux : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t xadc_vbram : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t xadc_ot : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t ulp_phy_clk_lock : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t rxaui_align_status : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t sl_5g_tx_fsm_reset_done : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t sl_5g_rx_fsm_reset_done : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t sl_5g_rx_buf_underflow : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t sl_5g_rx_buf_overflow : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t rxaui_gt0_rx_buf_underflow : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t rxaui_gt0_rx_buf_overflow : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t rxaui_gt1_rx_buf_underflow : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t rxaui_gt1_rx_buf_overflow : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t freq_det_dp_oor : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t resv19 : 13;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv19 : 13;
            uint32_t freq_det_dp_oor : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t rxaui_gt1_rx_buf_overflow : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t rxaui_gt1_rx_buf_underflow : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t rxaui_gt0_rx_buf_overflow : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t rxaui_gt0_rx_buf_underflow : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t sl_5g_rx_buf_overflow : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t sl_5g_rx_buf_underflow : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t sl_5g_rx_fsm_reset_done : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t sl_5g_tx_fsm_reset_done : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t rxaui_align_status : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t ulp_phy_clk_lock : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t xadc_ot : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t xadc_vbram : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t xadc_vccaux : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t xadc_vccint : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t xadc_user_temp : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t usb_vbus_detect : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t mdio_int_b : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t sfp_los : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sfp_los : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t mdio_int_b : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t usb_vbus_detect : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t xadc_user_temp : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t xadc_vccint : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t xadc_vccaux : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t xadc_vbram : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t xadc_ot : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t ulp_phy_clk_lock : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t rxaui_align_status : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t sl_5g_tx_fsm_reset_done : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t sl_5g_rx_fsm_reset_done : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t sl_5g_rx_buf_underflow : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t sl_5g_rx_buf_overflow : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t rxaui_gt0_rx_buf_underflow : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t rxaui_gt0_rx_buf_overflow : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t rxaui_gt1_rx_buf_underflow : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t rxaui_gt1_rx_buf_overflow : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t freq_det_dp_oor : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t resv19 : 13;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv19 : 13;
            uint32_t freq_det_dp_oor : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t rxaui_gt1_rx_buf_overflow : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t rxaui_gt1_rx_buf_underflow : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rxaui_gt0_rx_buf_overflow : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t rxaui_gt0_rx_buf_underflow : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t sl_5g_rx_buf_overflow : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t sl_5g_rx_buf_underflow : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t sl_5g_rx_fsm_reset_done : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t sl_5g_tx_fsm_reset_done : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t rxaui_align_status : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t ulp_phy_clk_lock : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t xadc_ot : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t xadc_vbram : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t xadc_vccaux : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t xadc_vccint : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t xadc_user_temp : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t usb_vbus_detect : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t mdio_int_b : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t sfp_los : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sfp_los : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t mdio_int_b : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t usb_vbus_detect : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t xadc_user_temp : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t xadc_vccint : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t xadc_vccaux : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t xadc_vbram : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t xadc_ot : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t ulp_phy_clk_lock : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t rxaui_align_status : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t sl_5g_tx_fsm_reset_done : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t sl_5g_rx_fsm_reset_done : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t sl_5g_rx_buf_underflow : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t sl_5g_rx_buf_overflow : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t rxaui_gt0_rx_buf_underflow : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t rxaui_gt0_rx_buf_overflow : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t rxaui_gt1_rx_buf_underflow : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rxaui_gt1_rx_buf_overflow : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t freq_det_dp_oor : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t resv19 : 13;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_irq_raw;

typedef struct {
    bb_chip_bb_top_irq_enable  enable;
    bb_chip_bb_top_irq_pending  pending;
    bb_chip_bb_top_irq_pending_irq  pending_irq;
    bb_chip_bb_top_irq_raw  raw;
    
} bb_chip_bb_top_irq;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t sel : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sel : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_link_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t master_bus_sel : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t master_mdc_tri : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t master_mdc_tri : 1;           /* 0 SW=rw HW=ro 0x1 */
            
            uint32_t resv1 : 3;
            uint32_t master_bus_sel : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_mdio_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t master_bus_sel : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t master_scl_tri : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t master_scl_tri : 1;           /* 0 SW=rw HW=ro 0x1 */
            
            uint32_t resv1 : 3;
            uint32_t master_bus_sel : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_i2c_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t ge_uart_sel : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ge_uart_sel : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_uart_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t tx_disable : 1;           /* 4 SW=rw HW=ro 0x1 */
            
            uint32_t resv2 : 2;
            uint32_t rs1 : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t rs0 : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rs0 : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t rs1 : 1;           /* 1 SW=rw HW=ro 0x1 */
            
            uint32_t resv2 : 2;
            uint32_t tx_disable : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_sfp_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t rx_los : 1;           /* 8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t tx_fault : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t mod_abs : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mod_abs : 1;           /* 0 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t tx_fault : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t rx_los : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_sfp_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t force_tx_elec_idle : 1;           /* 20 SW=rw HW=ro 0x0 */
            
            uint32_t resv19 : 1;
            uint32_t strapping_done : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t xtal_dis : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t ssc_dis : 1;           /* 16 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 6;
            uint32_t power_present : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t power_present_sel : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t out_enable : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t tx_clk_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rst_b : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rst_b : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t tx_clk_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t out_enable : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t power_present_sel : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t power_present : 1;           /* 9 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 6;
            uint32_t ssc_dis : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t xtal_dis : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t strapping_done : 1;           /* 18 SW=rw HW=ro 0x0 */
            
            uint32_t resv19 : 1;
            uint32_t force_tx_elec_idle : 1;           /* 20 SW=rw HW=ro 0x0 */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_usb3phy_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t int_n : 1;           /* 8 SW=rw HW=ro 0x1 */
            
            uint32_t resv5 : 3;
            uint32_t vbus_det : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t clm_tx_clk_en : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t ref_clk_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t boot_sel : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rst_b : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rst_b : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t boot_sel : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t ref_clk_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t clm_tx_clk_en : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t vbus_det : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t int_n : 1;           /* 8 SW=rw HW=ro 0x1 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_ge_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t txd_tri : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t tx_er_tri : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t tx_en_tri : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t gtx_clk_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rst_b : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rst_b : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gtx_clk_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t tx_en_tri : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t tx_er_tri : 1;           /* 5 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t txd_tri : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_xmii_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t invalid_b : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t force_off_b : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t en_b : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t en_b : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t force_off_b : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t invalid_b : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rs232_ctrl;

/*section : drp */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t drp_di : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t drp_we : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv9 : 3;
            uint32_t drp_addr : 9;           /* 8:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_addr : 9;           /* 0:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv9 : 3;
            uint32_t drp_we : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t drp_di : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_drp_drp_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv13 : 19;
            uint32_t xadc : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t sl_5g_gt0 : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t rxaui_gt1 : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t rxaui_gt0 : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t link_mmcm : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t link_gt_common : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t dp_gt_rxoutclk_mmcm : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t dp_gt_txoutclk_mmcm : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t dp_gt_common : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dp_gt3 : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t dp_gt2 : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t dp_gt1 : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t dp_gt0 : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_gt0 : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_gt1 : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t dp_gt2 : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t dp_gt3 : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t dp_gt_common : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dp_gt_txoutclk_mmcm : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t dp_gt_rxoutclk_mmcm : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t link_gt_common : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t link_mmcm : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t rxaui_gt0 : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t rxaui_gt1 : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t sl_5g_gt0 : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t xadc : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t resv13 : 19;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_drp_drp_en_mask;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t drp_do : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_do : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_drp_drp_read_data;

typedef struct {
    bb_chip_bb_top_drp_drp_ctrl  drp_ctrl;
    bb_chip_bb_top_drp_drp_en_mask  drp_en_mask;
    bb_chip_bb_top_drp_drp_read_data  drp_read_data;
    
} bb_chip_bb_top_drp;


/*section : dp_gtp_common */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t pll1refclksel : 3;           /* 10:8 SW=rw HW=ro 0x1 */
            
            uint32_t resv7 : 1;
            uint32_t pll0refclksel : 3;           /* 6:4 SW=rw HW=ro 0x1 */
            
            uint32_t resv2 : 2;
            uint32_t pll1pd : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t pll0pd : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pll0pd : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pll1pd : 1;           /* 1 SW=rw HW=ro 0x1 */
            
            uint32_t resv2 : 2;
            uint32_t pll0refclksel : 3;           /* 4:6 SW=rw HW=ro 0x1 */
            
            uint32_t resv7 : 1;
            uint32_t pll1refclksel : 3;           /* 8:10 SW=rw HW=ro 0x1 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_common_pll_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv6 : 26;
            uint32_t pll1refclklost : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t pll0refclklost : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t pll1lock : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t pll0lock : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pll0lock : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t pll1lock : 1;           /* 1 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t pll0refclklost : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t pll1refclklost : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t resv6 : 26;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_common_pll_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv15 : 17;
            uint32_t gt3_loopback : 3;           /* 14:12 SW=rw HW=ro 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t gt2_loopback : 3;           /* 10:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv7 : 1;
            uint32_t gt1_loopback : 3;           /* 6:4 SW=rw HW=ro 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t gt0_loopback : 3;           /* 2:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_loopback : 3;           /* 0:2 SW=rw HW=ro 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t gt1_loopback : 3;           /* 4:6 SW=rw HW=ro 0x0 */
            
            uint32_t resv7 : 1;
            uint32_t gt2_loopback : 3;           /* 8:10 SW=rw HW=ro 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t gt3_loopback : 3;           /* 12:14 SW=rw HW=ro 0x0 */
            uint32_t resv15 : 17;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_common_loopback_ctrl;

typedef struct {
    bb_chip_bb_top_dp_gtp_common_pll_ctrl  pll_ctrl;
    bb_chip_bb_top_dp_gtp_common_pll_status  pll_status;
    bb_chip_bb_top_dp_gtp_common_loopback_ctrl  loopback_ctrl;
    
} bb_chip_bb_top_dp_gtp_common;


/*section : dp_gtp_tx */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t gt3_txsysclksel : 2;           /* 7:6 SW=rw HW=ro 0x0 */
            uint32_t gt2_txsysclksel : 2;           /* 5:4 SW=rw HW=ro 0x0 */
            uint32_t gt1_txsysclksel : 2;           /* 3:2 SW=rw HW=ro 0x0 */
            uint32_t gt0_txsysclksel : 2;           /* 1:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txsysclksel : 2;           /* 0:1 SW=rw HW=ro 0x0 */
            uint32_t gt1_txsysclksel : 2;           /* 2:3 SW=rw HW=ro 0x0 */
            uint32_t gt2_txsysclksel : 2;           /* 4:5 SW=rw HW=ro 0x0 */
            uint32_t gt3_txsysclksel : 2;           /* 6:7 SW=rw HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_tx_tx_clk_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t gt3_txpcsreset : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt2_txpcsreset : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t gt1_txpcsreset : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t gt0_txpcsreset : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t soft_reset_tx : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t soft_reset_tx : 1;           /* 0 SW=rw HW=ro 0x1 */
            
            uint32_t resv1 : 3;
            uint32_t gt0_txpcsreset : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t gt1_txpcsreset : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t gt2_txpcsreset : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t gt3_txpcsreset : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_tx_tx_rst_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t gt_txoutclk_mmcm_lock : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t gt3_tx_fsm_reset_done : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t gt2_tx_fsm_reset_done : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t gt1_tx_fsm_reset_done : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t gt0_tx_fsm_reset_done : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t gt3_txresetdone : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t gt2_txresetdone : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t gt1_txresetdone : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t gt0_txresetdone : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txresetdone : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t gt1_txresetdone : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t gt2_txresetdone : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t gt3_txresetdone : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t gt0_tx_fsm_reset_done : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t gt1_tx_fsm_reset_done : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t gt2_tx_fsm_reset_done : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t gt3_tx_fsm_reset_done : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t gt_txoutclk_mmcm_lock : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_tx_tx_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t gt3_txdiffctrl : 4;           /* 15:12 SW=rw HW=ro 0x2 */
            uint32_t gt2_txdiffctrl : 4;           /* 11:8 SW=rw HW=ro 0x2 */
            uint32_t gt1_txdiffctrl : 4;           /* 7:4 SW=rw HW=ro 0x2 */
            uint32_t gt0_txdiffctrl : 4;           /* 3:0 SW=rw HW=ro 0x2 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txdiffctrl : 4;           /* 0:3 SW=rw HW=ro 0x2 */
            uint32_t gt1_txdiffctrl : 4;           /* 4:7 SW=rw HW=ro 0x2 */
            uint32_t gt2_txdiffctrl : 4;           /* 8:11 SW=rw HW=ro 0x2 */
            uint32_t gt3_txdiffctrl : 4;           /* 12:15 SW=rw HW=ro 0x2 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_tx_tx_diff_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t gt3_txpostcursor : 5;           /* 28:24 SW=rw HW=ro 0x0 */
            
            uint32_t resv20 : 4;
            uint32_t gt2_txpostcursor : 5;           /* 19:15 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 2;
            uint32_t gt1_txpostcursor : 5;           /* 12:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt0_txpostcursor : 5;           /* 4:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txpostcursor : 5;           /* 0:4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt1_txpostcursor : 5;           /* 8:12 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 2;
            uint32_t gt2_txpostcursor : 5;           /* 15:19 SW=rw HW=ro 0x0 */
            
            uint32_t resv20 : 4;
            uint32_t gt3_txpostcursor : 5;           /* 24:28 SW=rw HW=ro 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_tx_tx_post_cursor;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t gt3_txprecursor : 5;           /* 28:24 SW=rw HW=ro 0x0 */
            
            uint32_t resv20 : 4;
            uint32_t gt2_txprecursor : 5;           /* 19:15 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 2;
            uint32_t gt1_txprecursor : 5;           /* 12:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt0_txprecursor : 5;           /* 4:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txprecursor : 5;           /* 0:4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt1_txprecursor : 5;           /* 8:12 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 2;
            uint32_t gt2_txprecursor : 5;           /* 15:19 SW=rw HW=ro 0x0 */
            
            uint32_t resv20 : 4;
            uint32_t gt3_txprecursor : 5;           /* 24:28 SW=rw HW=ro 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_tx_tx_pre_cursor;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t gt3_txprbsforceerr : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t gt3_txprbssel : 3;           /* 14:12 SW=rw HW=ro 0x0 */
            uint32_t gt2_txprbsforceerr : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t gt2_txprbssel : 3;           /* 10:8 SW=rw HW=ro 0x0 */
            uint32_t gt1_txprbsforceerr : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt1_txprbssel : 3;           /* 6:4 SW=rw HW=ro 0x0 */
            uint32_t gt0_txprbsforceerr : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt0_txprbssel : 3;           /* 2:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txprbssel : 3;           /* 0:2 SW=rw HW=ro 0x0 */
            uint32_t gt0_txprbsforceerr : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt1_txprbssel : 3;           /* 4:6 SW=rw HW=ro 0x0 */
            uint32_t gt1_txprbsforceerr : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt2_txprbssel : 3;           /* 8:10 SW=rw HW=ro 0x0 */
            uint32_t gt2_txprbsforceerr : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t gt3_txprbssel : 3;           /* 12:14 SW=rw HW=ro 0x0 */
            uint32_t gt3_txprbsforceerr : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_tx_tx_prbs_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t gt3_txinhibit : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t gt2_txinhibit : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t gt1_txinhibit : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t gt0_txinhibit : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t gt3_txpd : 2;           /* 15:14 SW=rw HW=ro 0x3 */
            uint32_t gt2_txpd : 2;           /* 13:12 SW=rw HW=ro 0x3 */
            uint32_t gt1_txpd : 2;           /* 11:10 SW=rw HW=ro 0x3 */
            uint32_t gt0_txpd : 2;           /* 9:8 SW=rw HW=ro 0x3 */
            uint32_t gt3_tx8b10ben : 1;           /* 7 SW=rw HW=ro 0x1 */
            uint32_t gt2_tx8b10ben : 1;           /* 6 SW=rw HW=ro 0x1 */
            uint32_t gt1_tx8b10ben : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t gt0_tx8b10ben : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t gt3_txpolarity : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt2_txpolarity : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt1_txpolarity : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt0_txpolarity : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txpolarity : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gt1_txpolarity : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt2_txpolarity : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt3_txpolarity : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt0_tx8b10ben : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t gt1_tx8b10ben : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t gt2_tx8b10ben : 1;           /* 6 SW=rw HW=ro 0x1 */
            uint32_t gt3_tx8b10ben : 1;           /* 7 SW=rw HW=ro 0x1 */
            uint32_t gt0_txpd : 2;           /* 8:9 SW=rw HW=ro 0x3 */
            uint32_t gt1_txpd : 2;           /* 10:11 SW=rw HW=ro 0x3 */
            uint32_t gt2_txpd : 2;           /* 12:13 SW=rw HW=ro 0x3 */
            uint32_t gt3_txpd : 2;           /* 14:15 SW=rw HW=ro 0x3 */
            uint32_t gt0_txinhibit : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t gt1_txinhibit : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t gt2_txinhibit : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t gt3_txinhibit : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_tx_tx_misc_ctrl;

typedef struct {
    bb_chip_bb_top_dp_gtp_tx_tx_clk_ctrl  tx_clk_ctrl;
    bb_chip_bb_top_dp_gtp_tx_tx_rst_ctrl  tx_rst_ctrl;
    bb_chip_bb_top_dp_gtp_tx_tx_status  tx_status;
    bb_chip_bb_top_dp_gtp_tx_tx_diff_ctrl  tx_diff_ctrl;
    bb_chip_bb_top_dp_gtp_tx_tx_post_cursor  tx_post_cursor;
    bb_chip_bb_top_dp_gtp_tx_tx_pre_cursor  tx_pre_cursor;
    bb_chip_bb_top_dp_gtp_tx_tx_prbs_ctrl  tx_prbs_ctrl;
    bb_chip_bb_top_dp_gtp_tx_tx_misc_ctrl  tx_misc_ctrl;
    
} bb_chip_bb_top_dp_gtp_tx;


/*section : dp_gtp_rx */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t gt3_rxsysclksel : 2;           /* 7:6 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxsysclksel : 2;           /* 5:4 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxsysclksel : 2;           /* 3:2 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxsysclksel : 2;           /* 1:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_rxsysclksel : 2;           /* 0:1 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxsysclksel : 2;           /* 2:3 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxsysclksel : 2;           /* 4:5 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxsysclksel : 2;           /* 6:7 SW=rw HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_clk_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t gt3_rxlpmreset : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxlpmreset : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmreset : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmreset : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t gt3_eyescanreset : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t gt2_eyescanreset : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t gt1_eyescanreset : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t gt0_eyescanreset : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxpmareset : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxpmareset : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxpmareset : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxpmareset : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxpcsreset : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxpcsreset : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxpcsreset : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxpcsreset : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t dont_reset_on_data_error : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t soft_reset_rx : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t soft_reset_rx : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t dont_reset_on_data_error : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t gt0_rxpcsreset : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxpcsreset : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxpcsreset : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxpcsreset : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxpmareset : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxpmareset : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxpmareset : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxpmareset : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t gt0_eyescanreset : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t gt1_eyescanreset : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t gt2_eyescanreset : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t gt3_eyescanreset : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmreset : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmreset : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxlpmreset : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxlpmreset : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_rst_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t gt_rxoutclk_mmcm_lock : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t gt3_rx_fsm_reset_done : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t gt2_rx_fsm_reset_done : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t gt1_rx_fsm_reset_done : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t gt0_rx_fsm_reset_done : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t gt3_rxresetdone : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t gt2_rxresetdone : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t gt1_rxresetdone : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t gt0_rxresetdone : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_rxresetdone : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t gt1_rxresetdone : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t gt2_rxresetdone : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t gt3_rxresetdone : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t gt0_rx_fsm_reset_done : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t gt1_rx_fsm_reset_done : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t gt2_rx_fsm_reset_done : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t gt3_rx_fsm_reset_done : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t gt_rxoutclk_mmcm_lock : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t gt3_rxpcommaalignen : 1;           /* 7 SW=rw HW=ro 0x1 */
            uint32_t gt2_rxpcommaalignen : 1;           /* 6 SW=rw HW=ro 0x1 */
            uint32_t gt1_rxpcommaalignen : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t gt0_rxpcommaalignen : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t gt3_rxmcommaalignen : 1;           /* 3 SW=rw HW=ro 0x1 */
            uint32_t gt2_rxmcommaalignen : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t gt1_rxmcommaalignen : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t gt0_rxmcommaalignen : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_rxmcommaalignen : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t gt1_rxmcommaalignen : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t gt2_rxmcommaalignen : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t gt3_rxmcommaalignen : 1;           /* 3 SW=rw HW=ro 0x1 */
            uint32_t gt0_rxpcommaalignen : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t gt1_rxpcommaalignen : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t gt2_rxpcommaalignen : 1;           /* 6 SW=rw HW=ro 0x1 */
            uint32_t gt3_rxpcommaalignen : 1;           /* 7 SW=rw HW=ro 0x1 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_byte_align_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t gt3_rxbyteisaligned : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t gt2_rxbyteisaligned : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t gt1_rxbyteisaligned : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t gt0_rxbyteisaligned : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_rxbyteisaligned : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t gt1_rxbyteisaligned : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t gt2_rxbyteisaligned : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t gt3_rxbyteisaligned : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_byte_align_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t gt3_rxprbscntreset : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxprbssel : 3;           /* 14:12 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxprbscntreset : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxprbssel : 3;           /* 10:8 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxprbscntreset : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxprbssel : 3;           /* 6:4 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxprbscntreset : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxprbssel : 3;           /* 2:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_rxprbssel : 3;           /* 0:2 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxprbscntreset : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxprbssel : 3;           /* 4:6 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxprbscntreset : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxprbssel : 3;           /* 8:10 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxprbscntreset : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxprbssel : 3;           /* 12:14 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxprbscntreset : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_prbs_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t gt3_rxphmonitor : 5;           /* 28:24 SW=ro HW=wo 0x0 */
            
            uint32_t resv21 : 3;
            uint32_t gt2_rxphmonitor : 5;           /* 20:16 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t gt1_rxphmonitor : 5;           /* 12:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt0_rxphmonitor : 5;           /* 4:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_rxphmonitor : 5;           /* 0:4 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt1_rxphmonitor : 5;           /* 8:12 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t gt2_rxphmonitor : 5;           /* 16:20 SW=ro HW=wo 0x0 */
            
            uint32_t resv21 : 3;
            uint32_t gt3_rxphmonitor : 5;           /* 24:28 SW=ro HW=wo 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_ph_monitor;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t gt3_rxphslipmonitor : 5;           /* 28:24 SW=ro HW=wo 0x0 */
            
            uint32_t resv21 : 3;
            uint32_t gt2_rxphslipmonitor : 5;           /* 20:16 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t gt1_rxphslipmonitor : 5;           /* 12:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt0_rxphslipmonitor : 5;           /* 4:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_rxphslipmonitor : 5;           /* 0:4 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt1_rxphslipmonitor : 5;           /* 8:12 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t gt2_rxphslipmonitor : 5;           /* 16:20 SW=ro HW=wo 0x0 */
            
            uint32_t resv21 : 3;
            uint32_t gt3_rxphslipmonitor : 5;           /* 24:28 SW=ro HW=wo 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_ph_slip_monitor;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t gt3_dmonitorout : 8;           /* 31:24 SW=ro HW=wo 0x0 */
            uint32_t gt2_dmonitorout : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t gt1_dmonitorout : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t gt0_dmonitorout : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_dmonitorout : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t gt1_dmonitorout : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t gt2_dmonitorout : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t gt3_dmonitorout : 8;           /* 24:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_dmonitor_out;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t gt3_rxlpmlfhold : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxlpmlfhold : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmlfhold : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmlfhold : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxlpmhfovrden : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxlpmhfovrden : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmhfovrden : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmhfovrden : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxlpmhfhold : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxlpmhfhold : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmhfhold : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmhfhold : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_rxlpmhfhold : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmhfhold : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxlpmhfhold : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxlpmhfhold : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmhfovrden : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmhfovrden : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxlpmhfovrden : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxlpmhfovrden : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmlfhold : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmlfhold : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxlpmlfhold : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxlpmlfhold : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_eq_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t gt_data_valid_en : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv20 : 11;
            uint32_t gt3_rxcdrhold : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxcdrhold : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxcdrhold : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxcdrhold : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxpd : 2;           /* 15:14 SW=rw HW=ro 0x3 */
            uint32_t gt2_rxpd : 2;           /* 13:12 SW=rw HW=ro 0x3 */
            uint32_t gt1_rxpd : 2;           /* 11:10 SW=rw HW=ro 0x3 */
            uint32_t gt0_rxpd : 2;           /* 9:8 SW=rw HW=ro 0x3 */
            
            uint32_t resv4 : 4;
            uint32_t gt3_rxpolarity : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxpolarity : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxpolarity : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxpolarity : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_rxpolarity : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxpolarity : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxpolarity : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxpolarity : 1;           /* 3 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 4;
            uint32_t gt0_rxpd : 2;           /* 8:9 SW=rw HW=ro 0x3 */
            uint32_t gt1_rxpd : 2;           /* 10:11 SW=rw HW=ro 0x3 */
            uint32_t gt2_rxpd : 2;           /* 12:13 SW=rw HW=ro 0x3 */
            uint32_t gt3_rxpd : 2;           /* 14:15 SW=rw HW=ro 0x3 */
            uint32_t gt0_rxcdrhold : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxcdrhold : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t gt2_rxcdrhold : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t gt3_rxcdrhold : 1;           /* 19 SW=rw HW=ro 0x0 */
            
            uint32_t resv20 : 11;
            uint32_t gt_data_valid_en : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_dp_gtp_rx_rx_misc_ctrl;

typedef struct {
    bb_chip_bb_top_dp_gtp_rx_rx_clk_ctrl  rx_clk_ctrl;
    bb_chip_bb_top_dp_gtp_rx_rx_rst_ctrl  rx_rst_ctrl;
    bb_chip_bb_top_dp_gtp_rx_rx_status  rx_status;
    bb_chip_bb_top_dp_gtp_rx_rx_byte_align_ctrl  rx_byte_align_ctrl;
    bb_chip_bb_top_dp_gtp_rx_rx_byte_align_status  rx_byte_align_status;
    bb_chip_bb_top_dp_gtp_rx_rx_prbs_ctrl  rx_prbs_ctrl;
    bb_chip_bb_top_dp_gtp_rx_rx_ph_monitor  rx_ph_monitor;
    bb_chip_bb_top_dp_gtp_rx_rx_ph_slip_monitor  rx_ph_slip_monitor;
    bb_chip_bb_top_dp_gtp_rx_rx_dmonitor_out  rx_dmonitor_out;
    bb_chip_bb_top_dp_gtp_rx_rx_eq_ctrl  rx_eq_ctrl;
    bb_chip_bb_top_dp_gtp_rx_rx_misc_ctrl  rx_misc_ctrl;
    
} bb_chip_bb_top_dp_gtp_rx;


/*section : rxaui */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t fix_missing_start : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t type_sel : 2;           /* 5:4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t reset : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t reset : 1;           /* 0 SW=rw HW=ro 0x1 */
            
            uint32_t resv1 : 3;
            uint32_t type_sel : 2;           /* 4:5 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t fix_missing_start : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv6 : 26;
            uint32_t debug : 6;           /* 5:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t debug : 6;           /* 0:5 SW=ro HW=wo 0x0 */
            uint32_t resv6 : 26;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t gtrxreset : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv22 : 9;
            uint32_t gt1_rxbufreset : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxbufreset : 1;           /* 20 SW=rw HW=ro 0x0 */
            
            uint32_t resv18 : 2;
            uint32_t gt1_rxlpmreset : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmreset : 1;           /* 16 SW=rw HW=ro 0x0 */
            
            uint32_t resv14 : 2;
            uint32_t gt1_rxpcsreset : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxpcsreset : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 2;
            uint32_t gt1_rxpmareset : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxpmareset : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t gt1_txpcsreset : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t gt0_txpcsreset : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t gt1_txpmareset : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt0_txpmareset : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txpmareset : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gt1_txpmareset : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t gt0_txpcsreset : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t gt1_txpcsreset : 1;           /* 5 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t gt0_rxpmareset : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxpmareset : 1;           /* 9 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 2;
            uint32_t gt0_rxpcsreset : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxpcsreset : 1;           /* 13 SW=rw HW=ro 0x0 */
            
            uint32_t resv14 : 2;
            uint32_t gt0_rxlpmreset : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmreset : 1;           /* 17 SW=rw HW=ro 0x0 */
            
            uint32_t resv18 : 2;
            uint32_t gt0_rxbufreset : 1;           /* 20 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxbufreset : 1;           /* 21 SW=rw HW=ro 0x0 */
            
            uint32_t resv22 : 9;
            uint32_t gtrxreset : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_gt_rst_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t gt1_rxpmaresetdone : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t gt0_rxpmaresetdone : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t gt1_txdlysresetdone : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t gt0_txdlysresetdone : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t gt1_txphinitdone : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t gt0_txphinitdone : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t gt1_txphaligndone : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t gt0_txphaligndone : 1;           /* 12 SW=ro HW=wo 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t gt1_rxbufstatus : 3;           /* 10:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv7 : 1;
            uint32_t gt0_rxbufstatus : 3;           /* 6:4 SW=ro HW=wo 0x0 */
            uint32_t gt1_rxresetdone : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t gt0_rxresetdone : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t gt1_txresetdone : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t gt0_txresetdone : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txresetdone : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t gt1_txresetdone : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t gt0_rxresetdone : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t gt1_rxresetdone : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t gt0_rxbufstatus : 3;           /* 4:6 SW=ro HW=wo 0x0 */
            
            uint32_t resv7 : 1;
            uint32_t gt1_rxbufstatus : 3;           /* 8:10 SW=ro HW=wo 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t gt0_txphaligndone : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t gt1_txphaligndone : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t gt0_txphinitdone : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t gt1_txphinitdone : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t gt0_txdlysresetdone : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t gt1_txdlysresetdone : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t gt0_rxpmaresetdone : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t gt1_rxpmaresetdone : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_gt_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t gt1_txdiffctrl : 4;           /* 7:4 SW=rw HW=ro 0xA */
            uint32_t gt0_txdiffctrl : 4;           /* 3:0 SW=rw HW=ro 0xA */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txdiffctrl : 4;           /* 0:3 SW=rw HW=ro 0xA */
            uint32_t gt1_txdiffctrl : 4;           /* 4:7 SW=rw HW=ro 0xA */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_gt_tx_diff_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv13 : 19;
            uint32_t gt1_txpostcursor : 5;           /* 12:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt0_txpostcursor : 5;           /* 4:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txpostcursor : 5;           /* 0:4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt1_txpostcursor : 5;           /* 8:12 SW=rw HW=ro 0x0 */
            uint32_t resv13 : 19;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_gt_tx_post_cursor;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv13 : 19;
            uint32_t gt1_txprecursor : 5;           /* 12:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt0_txprecursor : 5;           /* 4:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txprecursor : 5;           /* 0:4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t gt1_txprecursor : 5;           /* 8:12 SW=rw HW=ro 0x0 */
            uint32_t resv13 : 19;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_gt_tx_pre_cursor;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t gt1_rxlpmlfovrden : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmlfovrden : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 2;
            uint32_t gt1_rxlpmlfhold : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmlfhold : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t gt1_rxlpmhfovrden : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmhfovrden : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t gt1_rxlpmhfhold : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxlpmhfhold : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_rxlpmhfhold : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmhfhold : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t gt0_rxlpmhfovrden : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmhfovrden : 1;           /* 5 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t gt0_rxlpmlfhold : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmlfhold : 1;           /* 9 SW=rw HW=ro 0x0 */
            
            uint32_t resv10 : 2;
            uint32_t gt0_rxlpmlfovrden : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxlpmlfovrden : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_gt_rx_eq_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t gt1_rxprbscntreset : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxprbssel : 3;           /* 14:12 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxprbscntreset : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxprbssel : 3;           /* 10:8 SW=rw HW=ro 0x0 */
            uint32_t gt1_txprbsforceerr : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt1_txprbssel : 3;           /* 6:4 SW=rw HW=ro 0x0 */
            uint32_t gt0_txprbsforceerr : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt0_txprbssel : 3;           /* 2:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txprbssel : 3;           /* 0:2 SW=rw HW=ro 0x0 */
            uint32_t gt0_txprbsforceerr : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt1_txprbssel : 3;           /* 4:6 SW=rw HW=ro 0x0 */
            uint32_t gt1_txprbsforceerr : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxprbssel : 3;           /* 8:10 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxprbscntreset : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxprbssel : 3;           /* 12:14 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxprbscntreset : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_gt_prbs_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv26 : 6;
            uint32_t gt1_rxcdrhold : 1;           /* 25 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxcdrhold : 1;           /* 24 SW=rw HW=ro 0x0 */
            
            uint32_t resv23 : 1;
            uint32_t gt1_rxrate : 3;           /* 22:20 SW=rw HW=ro 0x0 */
            
            uint32_t resv19 : 1;
            uint32_t gt0_rxrate : 3;           /* 18:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv14 : 2;
            uint32_t gt1_rxpolarity : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t gt0_rxpolarity : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t gt1_loopback : 3;           /* 10:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv7 : 1;
            uint32_t gt0_loopback : 3;           /* 6:4 SW=rw HW=ro 0x0 */
            uint32_t gt1_txpolarity : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt0_txpolarity : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt1_txinhibit : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt0_txinhibit : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_txinhibit : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gt1_txinhibit : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt0_txpolarity : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt1_txpolarity : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt0_loopback : 3;           /* 4:6 SW=rw HW=ro 0x0 */
            
            uint32_t resv7 : 1;
            uint32_t gt1_loopback : 3;           /* 8:10 SW=rw HW=ro 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t gt0_rxpolarity : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxpolarity : 1;           /* 13 SW=rw HW=ro 0x0 */
            
            uint32_t resv14 : 2;
            uint32_t gt0_rxrate : 3;           /* 16:18 SW=rw HW=ro 0x0 */
            
            uint32_t resv19 : 1;
            uint32_t gt1_rxrate : 3;           /* 20:22 SW=rw HW=ro 0x0 */
            
            uint32_t resv23 : 1;
            uint32_t gt0_rxcdrhold : 1;           /* 24 SW=rw HW=ro 0x0 */
            uint32_t gt1_rxcdrhold : 1;           /* 25 SW=rw HW=ro 0x0 */
            uint32_t resv26 : 6;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_gt_misc_ctrl;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t missing_start : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t gt1_not_in_table : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gt1_disp_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt0_not_in_table : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt0_disp_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt0_disp_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gt0_not_in_table : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt1_disp_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt1_not_in_table : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t missing_start : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_rxaui_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t gt0_disp_err : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_top_rxaui_stats0_gt0_disp_err;

typedef union {
    struct {
        uint32_t gt0_not_in_table : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_top_rxaui_stats0_gt0_not_in_table;

typedef union {
    struct {
        uint32_t gt1_disp_err : 32;           /* 31:0 SW=ro HW=na 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_top_rxaui_stats0_gt1_disp_err;

typedef union {
    struct {
        uint32_t gt1_not_in_table : 32;           /* 31:0 SW=ro HW=na 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_top_rxaui_stats0_gt1_not_in_table;

typedef union {
    struct {
        uint32_t missing_start : 32;           /* 31:0 SW=ro HW=na 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_top_rxaui_stats0_missing_start;

typedef struct {
    bb_chip_bb_top_rxaui_stats0_rd2clr_config  rd2clr_config;
    bb_chip_bb_top_rxaui_stats0_gt0_disp_err  gt0_disp_err;
    bb_chip_bb_top_rxaui_stats0_gt0_not_in_table  gt0_not_in_table;
    bb_chip_bb_top_rxaui_stats0_gt1_disp_err  gt1_disp_err;
    bb_chip_bb_top_rxaui_stats0_gt1_not_in_table  gt1_not_in_table;
    bb_chip_bb_top_rxaui_stats0_missing_start  missing_start;
    
} bb_chip_bb_top_rxaui_stats0;


typedef struct {
    bb_chip_bb_top_rxaui_control  control;
    bb_chip_bb_top_rxaui_status  status;
    bb_chip_bb_top_rxaui_gt_rst_ctrl  gt_rst_ctrl;
    bb_chip_bb_top_rxaui_gt_status  gt_status;
    bb_chip_bb_top_rxaui_gt_tx_diff_ctrl  gt_tx_diff_ctrl;
    bb_chip_bb_top_rxaui_gt_tx_post_cursor  gt_tx_post_cursor;
    bb_chip_bb_top_rxaui_gt_tx_pre_cursor  gt_tx_pre_cursor;
    bb_chip_bb_top_rxaui_gt_rx_eq_ctrl  gt_rx_eq_ctrl;
    bb_chip_bb_top_rxaui_gt_prbs_ctrl  gt_prbs_ctrl;
    bb_chip_bb_top_rxaui_gt_misc_ctrl  gt_misc_ctrl;
    
    union {
        bb_chip_bb_top_rxaui_stats0 s;
        uint8_t filler[0x18];
    } stats0;
    
} bb_chip_bb_top_rxaui;


/*section : sl_5g */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t rxbufreset : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t rxlpmreset : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t eyescanreset : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t rxpmareset : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t rxpcsreset : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t dont_reset_on_data_error : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t soft_reset_rx : 1;           /* 4 SW=rw HW=ro 0x1 */
            
            uint32_t resv3 : 1;
            uint32_t txpmareset : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t txpcsreset : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t soft_reset_tx : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t soft_reset_tx : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t txpcsreset : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t txpmareset : 1;           /* 2 SW=rw HW=ro 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t soft_reset_rx : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t dont_reset_on_data_error : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t rxpcsreset : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t rxpmareset : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t eyescanreset : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t rxlpmreset : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t rxbufreset : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_sl_5g_gt_rst_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv28 : 4;
            uint32_t txprbsforceerr : 1;           /* 27 SW=rw HW=ro 0x0 */
            uint32_t txprbssel : 3;           /* 26:24 SW=rw HW=ro 0x0 */
            
            uint32_t resv21 : 3;
            uint32_t txpostcursor : 5;           /* 20:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t txprecursor : 5;           /* 12:8 SW=rw HW=ro 0x0 */
            uint32_t txdiffctrl : 4;           /* 7:4 SW=rw HW=ro 0x4 */
            uint32_t txinhibit : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t txpolarity : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t txpd : 2;           /* 1:0 SW=rw HW=ro 0x3 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t txpd : 2;           /* 0:1 SW=rw HW=ro 0x3 */
            uint32_t txpolarity : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t txinhibit : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t txdiffctrl : 4;           /* 4:7 SW=rw HW=ro 0x4 */
            uint32_t txprecursor : 5;           /* 8:12 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t txpostcursor : 5;           /* 16:20 SW=rw HW=ro 0x0 */
            
            uint32_t resv21 : 3;
            uint32_t txprbssel : 3;           /* 24:26 SW=rw HW=ro 0x0 */
            uint32_t txprbsforceerr : 1;           /* 27 SW=rw HW=ro 0x0 */
            uint32_t resv28 : 4;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_sl_5g_gt_tx_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t rxprbscntreset : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t rxprbssel : 3;           /* 10:8 SW=rw HW=ro 0x0 */
            uint32_t rxlpmlfhold : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t rxlpmhfovrden : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t rxlpmhfhold : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t rxcdrhold : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t data_valid_en : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rxpolarity : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rxpd : 2;           /* 1:0 SW=rw HW=ro 0x3 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rxpd : 2;           /* 0:1 SW=rw HW=ro 0x3 */
            uint32_t rxpolarity : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t data_valid_en : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rxcdrhold : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t rxlpmhfhold : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t rxlpmhfovrden : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t rxlpmlfhold : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t rxprbssel : 3;           /* 8:10 SW=rw HW=ro 0x0 */
            uint32_t rxprbscntreset : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_sl_5g_gt_rx_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t loopback : 3;           /* 2:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t loopback : 3;           /* 0:2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_sl_5g_gt_misc_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t dmonitorout : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t rxbyteisaligned : 1;           /* 12 SW=ro HW=wo 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t rxbufstatus : 3;           /* 10:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t rxclkcorcnt : 2;           /* 5:4 SW=ro HW=wo 0x0 */
            uint32_t rx_fsm_reset_done : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t tx_fsm_reset_done : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t rxresetdone : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t txresetdone : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t txresetdone : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t rxresetdone : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t tx_fsm_reset_done : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t rx_fsm_reset_done : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t rxclkcorcnt : 2;           /* 4:5 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t rxbufstatus : 3;           /* 8:10 SW=ro HW=wo 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t rxbyteisaligned : 1;           /* 12 SW=ro HW=wo 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t dmonitorout : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_sl_5g_gt_status;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t gt_rxbyterealign : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gt_not_in_table : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt_disp_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gt_disp_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gt_not_in_table : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gt_rxbyterealign : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_bb_top_sl_5g_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t gt_disp_err : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_top_sl_5g_stats0_gt_disp_err;

typedef union {
    struct {
        uint32_t gt_not_in_table : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_top_sl_5g_stats0_gt_not_in_table;

typedef union {
    struct {
        uint32_t gt_rxbyterealign : 32;           /* 31:0 SW=ro HW=na 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_bb_top_sl_5g_stats0_gt_rxbyterealign;

typedef struct {
    bb_chip_bb_top_sl_5g_stats0_rd2clr_config  rd2clr_config;
    bb_chip_bb_top_sl_5g_stats0_gt_disp_err  gt_disp_err;
    bb_chip_bb_top_sl_5g_stats0_gt_not_in_table  gt_not_in_table;
    bb_chip_bb_top_sl_5g_stats0_gt_rxbyterealign  gt_rxbyterealign;
    
} bb_chip_bb_top_sl_5g_stats0;


typedef struct {
    bb_chip_bb_top_sl_5g_gt_rst_ctrl  gt_rst_ctrl;
    bb_chip_bb_top_sl_5g_gt_tx_ctrl  gt_tx_ctrl;
    bb_chip_bb_top_sl_5g_gt_rx_ctrl  gt_rx_ctrl;
    bb_chip_bb_top_sl_5g_gt_misc_ctrl  gt_misc_ctrl;
    bb_chip_bb_top_sl_5g_gt_status  gt_status;
    
    union {
        bb_chip_bb_top_sl_5g_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_bb_top_sl_5g;


typedef struct {
    bb_chip_bb_top_version  version;
    bb_chip_bb_top_sys_config  sys_config;
    bb_chip_bb_top_feature  feature;
    
    union {
        bb_chip_bb_top_icap s;
        uint8_t filler[0x8];
    } icap;
    
    union {
        bb_chip_bb_top_grm s;
        uint8_t filler[0x4];
    } grm;
    
    union {
        bb_chip_bb_top_gcm s;
        uint8_t filler[0x14];
    } gcm;
    
    union {
        bb_chip_bb_top_irq s;
        uint8_t filler[0x10];
    } irq;
    bb_chip_bb_top_link_ctrl  link_ctrl;
    bb_chip_bb_top_mdio_ctrl  mdio_ctrl;
    bb_chip_bb_top_i2c_ctrl  i2c_ctrl;
    bb_chip_bb_top_uart_ctrl  uart_ctrl;
    bb_chip_bb_top_sfp_ctrl  sfp_ctrl;
    bb_chip_bb_top_sfp_status  sfp_status;
    bb_chip_bb_top_usb3phy_ctrl  usb3phy_ctrl;
    bb_chip_bb_top_ge_ctrl  ge_ctrl;
    bb_chip_bb_top_xmii_ctrl  xmii_ctrl;
    bb_chip_bb_top_rs232_ctrl  rs232_ctrl;
    
    uint8_t filler18[0x9C];
    
    
    union {
        bb_chip_bb_top_drp s;
        uint8_t filler[0xC];
    } drp;
    
    union {
        bb_chip_bb_top_dp_gtp_common s;
        uint8_t filler[0xC];
    } dp_gtp_common;
    
    union {
        bb_chip_bb_top_dp_gtp_tx s;
        uint8_t filler[0x20];
    } dp_gtp_tx;
    
    union {
        bb_chip_bb_top_dp_gtp_rx s;
        uint8_t filler[0x2C];
    } dp_gtp_rx;
    
    union {
        bb_chip_bb_top_rxaui s;
        uint8_t filler[0x40];
    } rxaui;
    
    union {
        bb_chip_bb_top_sl_5g s;
        uint8_t filler[0x24];
    } sl_5g;
    
} bb_chip_bb_top_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_bb_top_version_READMASK 0xFFFFFF
#define bb_chip_bb_top_version_WRITEMASK 0x0
#define bb_chip_bb_top_version_VOLATILEMASK 0x0
#define bb_chip_bb_top_version_RESETMASK 0xFFFFFF
#define bb_chip_bb_top_version_DEFAULT 0x00100104

#define bb_chip_bb_top_sys_config_READMASK 0xFFFF3FFD
#define bb_chip_bb_top_sys_config_WRITEMASK 0x0
#define bb_chip_bb_top_sys_config_VOLATILEMASK 0xFFFF3FFD
#define bb_chip_bb_top_sys_config_RESETMASK 0xFFFF3FFD
#define bb_chip_bb_top_sys_config_DEFAULT 0x00000000

#define bb_chip_bb_top_feature_READMASK 0x1F
#define bb_chip_bb_top_feature_WRITEMASK 0x0
#define bb_chip_bb_top_feature_VOLATILEMASK 0x1F
#define bb_chip_bb_top_feature_RESETMASK 0x1F
#define bb_chip_bb_top_feature_DEFAULT 0x00000000

#define bb_chip_bb_top_icap_wdata_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_icap_wdata_WRITEMASK 0xFFFFFFFF
#define bb_chip_bb_top_icap_wdata_VOLATILEMASK 0x0
#define bb_chip_bb_top_icap_wdata_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_icap_wdata_DEFAULT 0x00000000

#define bb_chip_bb_top_icap_rdata_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_icap_rdata_WRITEMASK 0xFFFFFFFF
#define bb_chip_bb_top_icap_rdata_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_bb_top_icap_rdata_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_icap_rdata_DEFAULT 0x00000000

#define bb_chip_bb_top_grm_soft_rst_ctrl_READMASK 0xBFFFFFFF
#define bb_chip_bb_top_grm_soft_rst_ctrl_WRITEMASK 0xBFFFFFFF
#define bb_chip_bb_top_grm_soft_rst_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_grm_soft_rst_ctrl_RESETMASK 0xBFFFFFFF
#define bb_chip_bb_top_grm_soft_rst_ctrl_DEFAULT 0x3FFFFFFF

#define bb_chip_bb_top_gcm_control_READMASK 0x111
#define bb_chip_bb_top_gcm_control_WRITEMASK 0x111
#define bb_chip_bb_top_gcm_control_VOLATILEMASK 0x0
#define bb_chip_bb_top_gcm_control_RESETMASK 0x111
#define bb_chip_bb_top_gcm_control_DEFAULT 0x00000101

#define bb_chip_bb_top_gcm_status_READMASK 0x711
#define bb_chip_bb_top_gcm_status_WRITEMASK 0x0
#define bb_chip_bb_top_gcm_status_VOLATILEMASK 0x711
#define bb_chip_bb_top_gcm_status_RESETMASK 0x711
#define bb_chip_bb_top_gcm_status_DEFAULT 0x00000000

#define bb_chip_bb_top_gcm_freq_det_READMASK 0xFF1FFF
#define bb_chip_bb_top_gcm_freq_det_WRITEMASK 0xFFF
#define bb_chip_bb_top_gcm_freq_det_VOLATILEMASK 0xFF1000
#define bb_chip_bb_top_gcm_freq_det_RESETMASK 0xFF1FFF
#define bb_chip_bb_top_gcm_freq_det_DEFAULT 0x00000000

#define bb_chip_bb_top_gcm_freq_det_dp_READMASK 0xFFFDFFFF
#define bb_chip_bb_top_gcm_freq_det_dp_WRITEMASK 0xFFFF
#define bb_chip_bb_top_gcm_freq_det_dp_VOLATILEMASK 0xFFFD0000
#define bb_chip_bb_top_gcm_freq_det_dp_RESETMASK 0xFFFDFFFF
#define bb_chip_bb_top_gcm_freq_det_dp_DEFAULT 0x00000000

#define bb_chip_bb_top_gcm_freq_det_dp_auto_READMASK 0xFFFF3FFF
#define bb_chip_bb_top_gcm_freq_det_dp_auto_WRITEMASK 0xFFFF3FFF
#define bb_chip_bb_top_gcm_freq_det_dp_auto_VOLATILEMASK 0x0
#define bb_chip_bb_top_gcm_freq_det_dp_auto_RESETMASK 0xFFFF3FFF
#define bb_chip_bb_top_gcm_freq_det_dp_auto_DEFAULT 0x00000000

#define bb_chip_bb_top_irq_enable_READMASK 0x7FFFF
#define bb_chip_bb_top_irq_enable_WRITEMASK 0x7FFFF
#define bb_chip_bb_top_irq_enable_VOLATILEMASK 0x0
#define bb_chip_bb_top_irq_enable_RESETMASK 0x7FFFF
#define bb_chip_bb_top_irq_enable_DEFAULT 0x00000000

#define bb_chip_bb_top_irq_pending_READMASK 0x7FFFF
#define bb_chip_bb_top_irq_pending_WRITEMASK 0x7FFFF
#define bb_chip_bb_top_irq_pending_VOLATILEMASK 0x7FFFF
#define bb_chip_bb_top_irq_pending_RESETMASK 0x7FFFF
#define bb_chip_bb_top_irq_pending_DEFAULT 0x00000000

#define bb_chip_bb_top_irq_pending_irq_READMASK 0x7FFFF
#define bb_chip_bb_top_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_bb_top_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_bb_top_irq_pending_irq_RESETMASK 0x7FFFF
#define bb_chip_bb_top_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_bb_top_irq_raw_READMASK 0x7FFFF
#define bb_chip_bb_top_irq_raw_WRITEMASK 0x0
#define bb_chip_bb_top_irq_raw_VOLATILEMASK 0x7FFFF
#define bb_chip_bb_top_irq_raw_RESETMASK 0x7FFFF
#define bb_chip_bb_top_irq_raw_DEFAULT 0x00000000

#define bb_chip_bb_top_link_ctrl_READMASK 0x1
#define bb_chip_bb_top_link_ctrl_WRITEMASK 0x1
#define bb_chip_bb_top_link_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_link_ctrl_RESETMASK 0x1
#define bb_chip_bb_top_link_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_mdio_ctrl_READMASK 0x11
#define bb_chip_bb_top_mdio_ctrl_WRITEMASK 0x11
#define bb_chip_bb_top_mdio_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_mdio_ctrl_RESETMASK 0x11
#define bb_chip_bb_top_mdio_ctrl_DEFAULT 0x00000001

#define bb_chip_bb_top_i2c_ctrl_READMASK 0x11
#define bb_chip_bb_top_i2c_ctrl_WRITEMASK 0x11
#define bb_chip_bb_top_i2c_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_i2c_ctrl_RESETMASK 0x11
#define bb_chip_bb_top_i2c_ctrl_DEFAULT 0x00000001

#define bb_chip_bb_top_uart_ctrl_READMASK 0x1
#define bb_chip_bb_top_uart_ctrl_WRITEMASK 0x1
#define bb_chip_bb_top_uart_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_uart_ctrl_RESETMASK 0x1
#define bb_chip_bb_top_uart_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_sfp_ctrl_READMASK 0x13
#define bb_chip_bb_top_sfp_ctrl_WRITEMASK 0x13
#define bb_chip_bb_top_sfp_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_sfp_ctrl_RESETMASK 0x13
#define bb_chip_bb_top_sfp_ctrl_DEFAULT 0x00000013

#define bb_chip_bb_top_sfp_status_READMASK 0x111
#define bb_chip_bb_top_sfp_status_WRITEMASK 0x0
#define bb_chip_bb_top_sfp_status_VOLATILEMASK 0x111
#define bb_chip_bb_top_sfp_status_RESETMASK 0x111
#define bb_chip_bb_top_sfp_status_DEFAULT 0x00000000

#define bb_chip_bb_top_usb3phy_ctrl_READMASK 0x170313
#define bb_chip_bb_top_usb3phy_ctrl_WRITEMASK 0x170313
#define bb_chip_bb_top_usb3phy_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_usb3phy_ctrl_RESETMASK 0x170313
#define bb_chip_bb_top_usb3phy_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_ge_ctrl_READMASK 0x11F
#define bb_chip_bb_top_ge_ctrl_WRITEMASK 0x11F
#define bb_chip_bb_top_ge_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_ge_ctrl_RESETMASK 0x11F
#define bb_chip_bb_top_ge_ctrl_DEFAULT 0x00000100

#define bb_chip_bb_top_xmii_ctrl_READMASK 0xFF33
#define bb_chip_bb_top_xmii_ctrl_WRITEMASK 0xFF33
#define bb_chip_bb_top_xmii_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_xmii_ctrl_RESETMASK 0xFF33
#define bb_chip_bb_top_xmii_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_rs232_ctrl_READMASK 0x13
#define bb_chip_bb_top_rs232_ctrl_WRITEMASK 0x3
#define bb_chip_bb_top_rs232_ctrl_VOLATILEMASK 0x10
#define bb_chip_bb_top_rs232_ctrl_RESETMASK 0x13
#define bb_chip_bb_top_rs232_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_drp_drp_ctrl_READMASK 0xFFFF11FF
#define bb_chip_bb_top_drp_drp_ctrl_WRITEMASK 0xFFFF11FF
#define bb_chip_bb_top_drp_drp_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_drp_drp_ctrl_RESETMASK 0xFFFF11FF
#define bb_chip_bb_top_drp_drp_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_drp_drp_en_mask_READMASK 0x1FFF
#define bb_chip_bb_top_drp_drp_en_mask_WRITEMASK 0x1FFF
#define bb_chip_bb_top_drp_drp_en_mask_VOLATILEMASK 0x0
#define bb_chip_bb_top_drp_drp_en_mask_RESETMASK 0x1FFF
#define bb_chip_bb_top_drp_drp_en_mask_DEFAULT 0x00000000

#define bb_chip_bb_top_drp_drp_read_data_READMASK 0xFFFF
#define bb_chip_bb_top_drp_drp_read_data_WRITEMASK 0x0
#define bb_chip_bb_top_drp_drp_read_data_VOLATILEMASK 0xFFFF
#define bb_chip_bb_top_drp_drp_read_data_RESETMASK 0xFFFF
#define bb_chip_bb_top_drp_drp_read_data_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_common_pll_ctrl_READMASK 0x773
#define bb_chip_bb_top_dp_gtp_common_pll_ctrl_WRITEMASK 0x773
#define bb_chip_bb_top_dp_gtp_common_pll_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_common_pll_ctrl_RESETMASK 0x773
#define bb_chip_bb_top_dp_gtp_common_pll_ctrl_DEFAULT 0x00000113

#define bb_chip_bb_top_dp_gtp_common_pll_status_READMASK 0x33
#define bb_chip_bb_top_dp_gtp_common_pll_status_WRITEMASK 0x0
#define bb_chip_bb_top_dp_gtp_common_pll_status_VOLATILEMASK 0x33
#define bb_chip_bb_top_dp_gtp_common_pll_status_RESETMASK 0x33
#define bb_chip_bb_top_dp_gtp_common_pll_status_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_common_loopback_ctrl_READMASK 0x7777
#define bb_chip_bb_top_dp_gtp_common_loopback_ctrl_WRITEMASK 0x7777
#define bb_chip_bb_top_dp_gtp_common_loopback_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_common_loopback_ctrl_RESETMASK 0x7777
#define bb_chip_bb_top_dp_gtp_common_loopback_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_tx_tx_clk_ctrl_READMASK 0xFF
#define bb_chip_bb_top_dp_gtp_tx_tx_clk_ctrl_WRITEMASK 0xFF
#define bb_chip_bb_top_dp_gtp_tx_tx_clk_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_tx_tx_clk_ctrl_RESETMASK 0xFF
#define bb_chip_bb_top_dp_gtp_tx_tx_clk_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_tx_tx_rst_ctrl_READMASK 0xF1
#define bb_chip_bb_top_dp_gtp_tx_tx_rst_ctrl_WRITEMASK 0xF1
#define bb_chip_bb_top_dp_gtp_tx_tx_rst_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_tx_tx_rst_ctrl_RESETMASK 0xF1
#define bb_chip_bb_top_dp_gtp_tx_tx_rst_ctrl_DEFAULT 0x00000001

#define bb_chip_bb_top_dp_gtp_tx_tx_status_READMASK 0x1FF
#define bb_chip_bb_top_dp_gtp_tx_tx_status_WRITEMASK 0x0
#define bb_chip_bb_top_dp_gtp_tx_tx_status_VOLATILEMASK 0x1FF
#define bb_chip_bb_top_dp_gtp_tx_tx_status_RESETMASK 0x1FF
#define bb_chip_bb_top_dp_gtp_tx_tx_status_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_tx_tx_diff_ctrl_READMASK 0xFFFF
#define bb_chip_bb_top_dp_gtp_tx_tx_diff_ctrl_WRITEMASK 0xFFFF
#define bb_chip_bb_top_dp_gtp_tx_tx_diff_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_tx_tx_diff_ctrl_RESETMASK 0xFFFF
#define bb_chip_bb_top_dp_gtp_tx_tx_diff_ctrl_DEFAULT 0x00002222

#define bb_chip_bb_top_dp_gtp_tx_tx_post_cursor_READMASK 0x1F0F9F1F
#define bb_chip_bb_top_dp_gtp_tx_tx_post_cursor_WRITEMASK 0x1F0F9F1F
#define bb_chip_bb_top_dp_gtp_tx_tx_post_cursor_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_tx_tx_post_cursor_RESETMASK 0x1F0F9F1F
#define bb_chip_bb_top_dp_gtp_tx_tx_post_cursor_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_tx_tx_pre_cursor_READMASK 0x1F0F9F1F
#define bb_chip_bb_top_dp_gtp_tx_tx_pre_cursor_WRITEMASK 0x1F0F9F1F
#define bb_chip_bb_top_dp_gtp_tx_tx_pre_cursor_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_tx_tx_pre_cursor_RESETMASK 0x1F0F9F1F
#define bb_chip_bb_top_dp_gtp_tx_tx_pre_cursor_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_tx_tx_prbs_ctrl_READMASK 0xFFFF
#define bb_chip_bb_top_dp_gtp_tx_tx_prbs_ctrl_WRITEMASK 0xFFFF
#define bb_chip_bb_top_dp_gtp_tx_tx_prbs_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_tx_tx_prbs_ctrl_RESETMASK 0xFFFF
#define bb_chip_bb_top_dp_gtp_tx_tx_prbs_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_tx_tx_misc_ctrl_READMASK 0xFFFFF
#define bb_chip_bb_top_dp_gtp_tx_tx_misc_ctrl_WRITEMASK 0xFFFFF
#define bb_chip_bb_top_dp_gtp_tx_tx_misc_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_tx_tx_misc_ctrl_RESETMASK 0xFFFFF
#define bb_chip_bb_top_dp_gtp_tx_tx_misc_ctrl_DEFAULT 0x0000FFF0

#define bb_chip_bb_top_dp_gtp_rx_rx_clk_ctrl_READMASK 0xFF
#define bb_chip_bb_top_dp_gtp_rx_rx_clk_ctrl_WRITEMASK 0xFF
#define bb_chip_bb_top_dp_gtp_rx_rx_clk_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_clk_ctrl_RESETMASK 0xFF
#define bb_chip_bb_top_dp_gtp_rx_rx_clk_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_rx_rx_rst_ctrl_READMASK 0xFFFF3
#define bb_chip_bb_top_dp_gtp_rx_rx_rst_ctrl_WRITEMASK 0xFFFF3
#define bb_chip_bb_top_dp_gtp_rx_rx_rst_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_rst_ctrl_RESETMASK 0xFFFF3
#define bb_chip_bb_top_dp_gtp_rx_rx_rst_ctrl_DEFAULT 0x00000001

#define bb_chip_bb_top_dp_gtp_rx_rx_status_READMASK 0x1FF
#define bb_chip_bb_top_dp_gtp_rx_rx_status_WRITEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_status_VOLATILEMASK 0x1FF
#define bb_chip_bb_top_dp_gtp_rx_rx_status_RESETMASK 0x1FF
#define bb_chip_bb_top_dp_gtp_rx_rx_status_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_ctrl_READMASK 0xFF
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_ctrl_WRITEMASK 0xFF
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_ctrl_RESETMASK 0xFF
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_ctrl_DEFAULT 0x000000FF

#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_status_READMASK 0xF
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_status_WRITEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_status_VOLATILEMASK 0xF
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_status_RESETMASK 0xF
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_status_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_rx_rx_prbs_ctrl_READMASK 0xFFFF
#define bb_chip_bb_top_dp_gtp_rx_rx_prbs_ctrl_WRITEMASK 0xFFFF
#define bb_chip_bb_top_dp_gtp_rx_rx_prbs_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_prbs_ctrl_RESETMASK 0xFFFF
#define bb_chip_bb_top_dp_gtp_rx_rx_prbs_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_rx_rx_ph_monitor_READMASK 0x1F1F1F1F
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_monitor_WRITEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_monitor_VOLATILEMASK 0x1F1F1F1F
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_monitor_RESETMASK 0x1F1F1F1F
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_monitor_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_rx_rx_ph_slip_monitor_READMASK 0x1F1F1F1F
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_slip_monitor_WRITEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_slip_monitor_VOLATILEMASK 0x1F1F1F1F
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_slip_monitor_RESETMASK 0x1F1F1F1F
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_slip_monitor_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_rx_rx_dmonitor_out_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_dp_gtp_rx_rx_dmonitor_out_WRITEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_dmonitor_out_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_bb_top_dp_gtp_rx_rx_dmonitor_out_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_dp_gtp_rx_rx_dmonitor_out_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_rx_rx_eq_ctrl_READMASK 0xFFF
#define bb_chip_bb_top_dp_gtp_rx_rx_eq_ctrl_WRITEMASK 0xFFF
#define bb_chip_bb_top_dp_gtp_rx_rx_eq_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_eq_ctrl_RESETMASK 0xFFF
#define bb_chip_bb_top_dp_gtp_rx_rx_eq_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_dp_gtp_rx_rx_misc_ctrl_READMASK 0x800FFF0F
#define bb_chip_bb_top_dp_gtp_rx_rx_misc_ctrl_WRITEMASK 0x800FFF0F
#define bb_chip_bb_top_dp_gtp_rx_rx_misc_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_misc_ctrl_RESETMASK 0x800FFF0F
#define bb_chip_bb_top_dp_gtp_rx_rx_misc_ctrl_DEFAULT 0x0000FF00

#define bb_chip_bb_top_rxaui_control_READMASK 0x131
#define bb_chip_bb_top_rxaui_control_WRITEMASK 0x131
#define bb_chip_bb_top_rxaui_control_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_control_RESETMASK 0x131
#define bb_chip_bb_top_rxaui_control_DEFAULT 0x00000001

#define bb_chip_bb_top_rxaui_status_READMASK 0x3F
#define bb_chip_bb_top_rxaui_status_WRITEMASK 0x0
#define bb_chip_bb_top_rxaui_status_VOLATILEMASK 0x3F
#define bb_chip_bb_top_rxaui_status_RESETMASK 0x3F
#define bb_chip_bb_top_rxaui_status_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_gt_rst_ctrl_READMASK 0x80333333
#define bb_chip_bb_top_rxaui_gt_rst_ctrl_WRITEMASK 0x80333333
#define bb_chip_bb_top_rxaui_gt_rst_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_gt_rst_ctrl_RESETMASK 0x80333333
#define bb_chip_bb_top_rxaui_gt_rst_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_gt_status_READMASK 0xFF77F
#define bb_chip_bb_top_rxaui_gt_status_WRITEMASK 0x0
#define bb_chip_bb_top_rxaui_gt_status_VOLATILEMASK 0xFF77F
#define bb_chip_bb_top_rxaui_gt_status_RESETMASK 0xFF77F
#define bb_chip_bb_top_rxaui_gt_status_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_gt_tx_diff_ctrl_READMASK 0xFF
#define bb_chip_bb_top_rxaui_gt_tx_diff_ctrl_WRITEMASK 0xFF
#define bb_chip_bb_top_rxaui_gt_tx_diff_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_gt_tx_diff_ctrl_RESETMASK 0xFF
#define bb_chip_bb_top_rxaui_gt_tx_diff_ctrl_DEFAULT 0x000000AA

#define bb_chip_bb_top_rxaui_gt_tx_post_cursor_READMASK 0x1F1F
#define bb_chip_bb_top_rxaui_gt_tx_post_cursor_WRITEMASK 0x1F1F
#define bb_chip_bb_top_rxaui_gt_tx_post_cursor_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_gt_tx_post_cursor_RESETMASK 0x1F1F
#define bb_chip_bb_top_rxaui_gt_tx_post_cursor_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_gt_tx_pre_cursor_READMASK 0x1F1F
#define bb_chip_bb_top_rxaui_gt_tx_pre_cursor_WRITEMASK 0x1F1F
#define bb_chip_bb_top_rxaui_gt_tx_pre_cursor_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_gt_tx_pre_cursor_RESETMASK 0x1F1F
#define bb_chip_bb_top_rxaui_gt_tx_pre_cursor_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_gt_rx_eq_ctrl_READMASK 0x3333
#define bb_chip_bb_top_rxaui_gt_rx_eq_ctrl_WRITEMASK 0x3333
#define bb_chip_bb_top_rxaui_gt_rx_eq_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_gt_rx_eq_ctrl_RESETMASK 0x3333
#define bb_chip_bb_top_rxaui_gt_rx_eq_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_gt_prbs_ctrl_READMASK 0xFFFF
#define bb_chip_bb_top_rxaui_gt_prbs_ctrl_WRITEMASK 0xFFFF
#define bb_chip_bb_top_rxaui_gt_prbs_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_gt_prbs_ctrl_RESETMASK 0xFFFF
#define bb_chip_bb_top_rxaui_gt_prbs_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_gt_misc_ctrl_READMASK 0x377377F
#define bb_chip_bb_top_rxaui_gt_misc_ctrl_WRITEMASK 0x377377F
#define bb_chip_bb_top_rxaui_gt_misc_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_gt_misc_ctrl_RESETMASK 0x377377F
#define bb_chip_bb_top_rxaui_gt_misc_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_stats0_rd2clr_config_READMASK 0x1F
#define bb_chip_bb_top_rxaui_stats0_rd2clr_config_WRITEMASK 0x1F
#define bb_chip_bb_top_rxaui_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_stats0_rd2clr_config_RESETMASK 0x1F
#define bb_chip_bb_top_rxaui_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_stats0_gt0_disp_err_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_gt0_disp_err_WRITEMASK 0x0
#define bb_chip_bb_top_rxaui_stats0_gt0_disp_err_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_gt0_disp_err_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_gt0_disp_err_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_stats0_gt0_not_in_table_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_gt0_not_in_table_WRITEMASK 0x0
#define bb_chip_bb_top_rxaui_stats0_gt0_not_in_table_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_gt0_not_in_table_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_gt0_not_in_table_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_stats0_gt1_disp_err_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_gt1_disp_err_WRITEMASK 0x0
#define bb_chip_bb_top_rxaui_stats0_gt1_disp_err_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_stats0_gt1_disp_err_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_gt1_disp_err_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_stats0_gt1_not_in_table_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_gt1_not_in_table_WRITEMASK 0x0
#define bb_chip_bb_top_rxaui_stats0_gt1_not_in_table_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_stats0_gt1_not_in_table_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_gt1_not_in_table_DEFAULT 0x00000000

#define bb_chip_bb_top_rxaui_stats0_missing_start_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_missing_start_WRITEMASK 0x0
#define bb_chip_bb_top_rxaui_stats0_missing_start_VOLATILEMASK 0x0
#define bb_chip_bb_top_rxaui_stats0_missing_start_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_rxaui_stats0_missing_start_DEFAULT 0x00000000

#define bb_chip_bb_top_sl_5g_gt_rst_ctrl_READMASK 0x7F7
#define bb_chip_bb_top_sl_5g_gt_rst_ctrl_WRITEMASK 0x7F7
#define bb_chip_bb_top_sl_5g_gt_rst_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_sl_5g_gt_rst_ctrl_RESETMASK 0x7F7
#define bb_chip_bb_top_sl_5g_gt_rst_ctrl_DEFAULT 0x00000011

#define bb_chip_bb_top_sl_5g_gt_tx_ctrl_READMASK 0xF1F1FFF
#define bb_chip_bb_top_sl_5g_gt_tx_ctrl_WRITEMASK 0xF1F1FFF
#define bb_chip_bb_top_sl_5g_gt_tx_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_sl_5g_gt_tx_ctrl_RESETMASK 0xF1F1FFF
#define bb_chip_bb_top_sl_5g_gt_tx_ctrl_DEFAULT 0x00000043

#define bb_chip_bb_top_sl_5g_gt_rx_ctrl_READMASK 0xFFF
#define bb_chip_bb_top_sl_5g_gt_rx_ctrl_WRITEMASK 0xFFF
#define bb_chip_bb_top_sl_5g_gt_rx_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_sl_5g_gt_rx_ctrl_RESETMASK 0xFFF
#define bb_chip_bb_top_sl_5g_gt_rx_ctrl_DEFAULT 0x00000003

#define bb_chip_bb_top_sl_5g_gt_misc_ctrl_READMASK 0x7
#define bb_chip_bb_top_sl_5g_gt_misc_ctrl_WRITEMASK 0x7
#define bb_chip_bb_top_sl_5g_gt_misc_ctrl_VOLATILEMASK 0x0
#define bb_chip_bb_top_sl_5g_gt_misc_ctrl_RESETMASK 0x7
#define bb_chip_bb_top_sl_5g_gt_misc_ctrl_DEFAULT 0x00000000

#define bb_chip_bb_top_sl_5g_gt_status_READMASK 0xFF173F
#define bb_chip_bb_top_sl_5g_gt_status_WRITEMASK 0x0
#define bb_chip_bb_top_sl_5g_gt_status_VOLATILEMASK 0xFF173F
#define bb_chip_bb_top_sl_5g_gt_status_RESETMASK 0xFF173F
#define bb_chip_bb_top_sl_5g_gt_status_DEFAULT 0x00000000

#define bb_chip_bb_top_sl_5g_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_bb_top_sl_5g_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_bb_top_sl_5g_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_bb_top_sl_5g_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_bb_top_sl_5g_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_bb_top_sl_5g_stats0_gt_disp_err_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_sl_5g_stats0_gt_disp_err_WRITEMASK 0x0
#define bb_chip_bb_top_sl_5g_stats0_gt_disp_err_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_bb_top_sl_5g_stats0_gt_disp_err_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_sl_5g_stats0_gt_disp_err_DEFAULT 0x00000000

#define bb_chip_bb_top_sl_5g_stats0_gt_not_in_table_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_sl_5g_stats0_gt_not_in_table_WRITEMASK 0x0
#define bb_chip_bb_top_sl_5g_stats0_gt_not_in_table_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_bb_top_sl_5g_stats0_gt_not_in_table_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_sl_5g_stats0_gt_not_in_table_DEFAULT 0x00000000

#define bb_chip_bb_top_sl_5g_stats0_gt_rxbyterealign_READMASK 0xFFFFFFFF
#define bb_chip_bb_top_sl_5g_stats0_gt_rxbyterealign_WRITEMASK 0x0
#define bb_chip_bb_top_sl_5g_stats0_gt_rxbyterealign_VOLATILEMASK 0x0
#define bb_chip_bb_top_sl_5g_stats0_gt_rxbyterealign_RESETMASK 0xFFFFFFFF
#define bb_chip_bb_top_sl_5g_stats0_gt_rxbyterealign_DEFAULT 0x00000000

/*block : ge_uart */


#ifndef __ASSEMBLER__
#endif   //__ASSEMBLER__


#define bb_chip_ge_uart_version_READMASK 0xFFFFFF
#define bb_chip_ge_uart_version_WRITEMASK 0x0
#define bb_chip_ge_uart_version_VOLATILEMASK 0x0
#define bb_chip_ge_uart_version_RESETMASK 0xFFFFFF
#define bb_chip_ge_uart_version_DEFAULT 0x00040000

#define bb_chip_ge_uart_tx_fifo_READMASK 0x8FFFFFFF
#define bb_chip_ge_uart_tx_fifo_WRITEMASK 0x80FFFF00
#define bb_chip_ge_uart_tx_fifo_VOLATILEMASK 0xF0000FF
#define bb_chip_ge_uart_tx_fifo_RESETMASK 0x8FFFFFFF
#define bb_chip_ge_uart_tx_fifo_DEFAULT 0x00000000

#define bb_chip_ge_uart_rx_fifo_READMASK 0x8FFFFFFF
#define bb_chip_ge_uart_rx_fifo_WRITEMASK 0x80FFFF00
#define bb_chip_ge_uart_rx_fifo_VOLATILEMASK 0xF0000FF
#define bb_chip_ge_uart_rx_fifo_RESETMASK 0x8FFFFFFF
#define bb_chip_ge_uart_rx_fifo_DEFAULT 0x00000000

#define bb_chip_ge_uart_tx_data_READMASK 0x0
#define bb_chip_ge_uart_tx_data_WRITEMASK 0xFF
#define bb_chip_ge_uart_tx_data_VOLATILEMASK 0x0
#define bb_chip_ge_uart_tx_data_RESETMASK 0xFF
#define bb_chip_ge_uart_tx_data_DEFAULT 0x00000000

#define bb_chip_ge_uart_rx_data_READMASK 0xFF
#define bb_chip_ge_uart_rx_data_WRITEMASK 0x0
#define bb_chip_ge_uart_rx_data_VOLATILEMASK 0xFF
#define bb_chip_ge_uart_rx_data_RESETMASK 0xFF
#define bb_chip_ge_uart_rx_data_DEFAULT 0x00000000

#define bb_chip_ge_uart_control_READMASK 0xFFFF000F
#define bb_chip_ge_uart_control_WRITEMASK 0xFFFF000F
#define bb_chip_ge_uart_control_VOLATILEMASK 0x0
#define bb_chip_ge_uart_control_RESETMASK 0xFFFF000F
#define bb_chip_ge_uart_control_DEFAULT 0x00000000

#define bb_chip_ge_uart_timeout_READMASK 0xFFFFFFFF
#define bb_chip_ge_uart_timeout_WRITEMASK 0xFFFFFFFF
#define bb_chip_ge_uart_timeout_VOLATILEMASK 0x0
#define bb_chip_ge_uart_timeout_RESETMASK 0xFFFFFFFF
#define bb_chip_ge_uart_timeout_DEFAULT 0x00000000

#define bb_chip_ge_uart_errors_READMASK 0x7
#define bb_chip_ge_uart_errors_WRITEMASK 0x7
#define bb_chip_ge_uart_errors_VOLATILEMASK 0x7
#define bb_chip_ge_uart_errors_RESETMASK 0x7
#define bb_chip_ge_uart_errors_DEFAULT 0x00000000

/*block : link_layer_tx */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x5 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x4 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x4 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x5 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_version;

/*section : mac */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x2 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x2 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t inject_crc32_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t disable_crc32 : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t crc32_implmntd : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t dbg_seq_num_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dbg_seq_num_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t crc32_implmntd : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t disable_crc32 : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t inject_crc32_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_mac_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t pa_word1 : 24;           /* 23:0 SW=rw HW=ro 0x555555 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pa_word1 : 24;           /* 0:23 SW=rw HW=ro 0x555555 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_pa_word1;

typedef union {
    struct {
        uint32_t pa_word0 : 32;           /* 31:0 SW=rw HW=ro 0x55555555 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_pa_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sfd : 8;           /* 7:0 SW=rw HW=ro 0xD5 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sfd : 8;           /* 0:7 SW=rw HW=ro 0xD5 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_sfd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t da_w1 : 16;           /* 15:0 SW=rw HW=ro 0xDADA */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t da_w1 : 16;           /* 0:15 SW=rw HW=ro 0xDADA */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_da_word1;

typedef union {
    struct {
        uint32_t da_w0 : 32;           /* 31:0 SW=rw HW=ro 0xDADADADA */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_da_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t sa_w1 : 16;           /* 15:0 SW=rw HW=ro 0x5A5A */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sa_w1 : 16;           /* 0:15 SW=rw HW=ro 0x5A5A */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_sa__word1;

typedef union {
    struct {
        uint32_t sa_w0 : 32;           /* 31:0 SW=rw HW=ro 0x5A5A5A5A */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_sa_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv17 : 15;
            uint32_t lt_mode : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t lt : 16;           /* 15:0 SW=rw HW=ro 0x1717 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lt : 16;           /* 0:15 SW=rw HW=ro 0x1717 */
            uint32_t lt_mode : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t resv17 : 15;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_lt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t idle : 8;           /* 7:0 SW=rw HW=ro 0x1E */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t idle : 8;           /* 0:7 SW=rw HW=ro 0x1E */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_idle;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t frm_rate : 12;           /* 11:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t frm_rate : 12;           /* 0:11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_frm_rate;

typedef union {
    struct {
        uint32_t bandwidth_gap : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_bandwidth_gap;

typedef union {
    struct {
        uint32_t bandwidth_limit : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_bandwidth_limit;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fsm_rollover : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t fsm_count_beyond_ptp : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t in_sop : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t in_eop : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t stall_ptp_in : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t out_eop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pause_frame : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pause_frame : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t out_eop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t stall_ptp_in : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t in_eop : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t in_sop : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t fsm_count_beyond_ptp : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t fsm_rollover : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t pause_frame : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_stats0_pause_frame;

typedef union {
    struct {
        uint32_t out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_stats0_out_eop;

typedef union {
    struct {
        uint32_t out_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_stats0_out_sop;

typedef union {
    struct {
        uint32_t stall_ptp_in : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_stats0_stall_ptp_in;

typedef union {
    struct {
        uint32_t in_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_stats0_in_eop;

typedef union {
    struct {
        uint32_t in_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_stats0_in_sop;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fsm_count_beyond_ptp : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fsm_count_beyond_ptp : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_stats0_fsm_count_beyond_ptp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fsm_rollover : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fsm_rollover : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_mac_stats0_fsm_rollover;

typedef struct {
    bb_chip_link_layer_tx_mac_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_tx_mac_stats0_pause_frame  pause_frame;
    bb_chip_link_layer_tx_mac_stats0_out_eop  out_eop;
    bb_chip_link_layer_tx_mac_stats0_out_sop  out_sop;
    bb_chip_link_layer_tx_mac_stats0_stall_ptp_in  stall_ptp_in;
    bb_chip_link_layer_tx_mac_stats0_in_eop  in_eop;
    bb_chip_link_layer_tx_mac_stats0_in_sop  in_sop;
    bb_chip_link_layer_tx_mac_stats0_fsm_count_beyond_ptp  fsm_count_beyond_ptp;
    bb_chip_link_layer_tx_mac_stats0_fsm_rollover  fsm_rollover;
    
} bb_chip_link_layer_tx_mac_stats0;


typedef struct {
    bb_chip_link_layer_tx_mac_version  version;
    bb_chip_link_layer_tx_mac_mac_config  mac_config;
    bb_chip_link_layer_tx_mac_pa_word1  pa_word1;
    bb_chip_link_layer_tx_mac_pa_word0  pa_word0;
    bb_chip_link_layer_tx_mac_sfd  sfd;
    bb_chip_link_layer_tx_mac_da_word1  da_word1;
    bb_chip_link_layer_tx_mac_da_word0  da_word0;
    bb_chip_link_layer_tx_mac_sa__word1  sa__word1;
    bb_chip_link_layer_tx_mac_sa_word0  sa_word0;
    bb_chip_link_layer_tx_mac_lt  lt;
    bb_chip_link_layer_tx_mac_idle  idle;
    bb_chip_link_layer_tx_mac_frm_rate  frm_rate;
    bb_chip_link_layer_tx_mac_bandwidth_gap  bandwidth_gap;
    bb_chip_link_layer_tx_mac_bandwidth_limit  bandwidth_limit;
    
    union {
        bb_chip_link_layer_tx_mac_stats0 s;
        uint8_t filler[0x24];
    } stats0;
    
} bb_chip_link_layer_tx_mac;


/*section : media_rs */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t tx_xgmii_en : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t tx_gmii_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_gmii_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            
            uint32_t resv1 : 3;
            uint32_t tx_xgmii_en : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_enable;

/*section : pfifo */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_clear  clear;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_mode  mode;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_link_layer_tx_media_rs_pfifo_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_clear;

typedef struct {
    bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_clear  clear;
    
} bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_link_layer_tx_media_rs_pfifo_read_engine;


typedef struct {
    bb_chip_link_layer_tx_media_rs_pfifo_version  version;
    
    union {
        bb_chip_link_layer_tx_media_rs_pfifo_write_engine s;
        uint8_t filler[0x38];
    } write_engine;
    
    union {
        bb_chip_link_layer_tx_media_rs_pfifo_read_engine s;
        uint8_t filler[0x14];
    } read_engine;
    
} bb_chip_link_layer_tx_media_rs_pfifo;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t inbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t inbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t inbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t inbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t inbuff_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats0_inbuff_eop;

typedef union {
    struct {
        uint32_t inbuff_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats0_inbuff_sop;

typedef struct {
    bb_chip_link_layer_tx_media_rs_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_tx_media_rs_stats0_inbuff_eop  inbuff_eop;
    bb_chip_link_layer_tx_media_rs_stats0_inbuff_sop  inbuff_sop;
    
} bb_chip_link_layer_tx_media_rs_stats0;


/*section : stats1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t gmii_start : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gmii_done : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gmii_outbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gmii_outbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gmii_outbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gmii_outbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gmii_done : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gmii_start : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats1_rd2clr_config;

typedef union {
    struct {
        uint32_t gmii_out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_eop;

typedef union {
    struct {
        uint32_t gmii_outbuff_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_sop;

typedef union {
    struct {
        uint32_t gmii_done : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats1_gmii_done;

typedef union {
    struct {
        uint32_t gmii_start : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats1_gmii_start;

typedef struct {
    bb_chip_link_layer_tx_media_rs_stats1_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_eop  gmii_outbuff_eop;
    bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_sop  gmii_outbuff_sop;
    bb_chip_link_layer_tx_media_rs_stats1_gmii_done  gmii_done;
    bb_chip_link_layer_tx_media_rs_stats1_gmii_start  gmii_start;
    
} bb_chip_link_layer_tx_media_rs_stats1;


/*section : stats2 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t xgmii_start : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t xgmii_done : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t xgmii_outbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t xgmii_outbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_outbuff_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t xgmii_outbuff_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t xgmii_done : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t xgmii_start : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats2_rd2clr_config;

typedef union {
    struct {
        uint32_t xgmii_out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_eop;

typedef union {
    struct {
        uint32_t xgmii_outbuff_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_sop;

typedef union {
    struct {
        uint32_t xgmii_done : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats2_xgmii_done;

typedef union {
    struct {
        uint32_t xgmii_start : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_tx_media_rs_stats2_xgmii_start;

typedef struct {
    bb_chip_link_layer_tx_media_rs_stats2_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_eop  xgmii_outbuff_eop;
    bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_sop  xgmii_outbuff_sop;
    bb_chip_link_layer_tx_media_rs_stats2_xgmii_done  xgmii_done;
    bb_chip_link_layer_tx_media_rs_stats2_xgmii_start  xgmii_start;
    
} bb_chip_link_layer_tx_media_rs_stats2;


typedef struct {
    bb_chip_link_layer_tx_media_rs_version  version;
    bb_chip_link_layer_tx_media_rs_enable  enable;
    
    union {
        bb_chip_link_layer_tx_media_rs_pfifo s;
        uint8_t filler[0x50];
    } pfifo;
    
    union {
        bb_chip_link_layer_tx_media_rs_stats0 s;
        uint8_t filler[0xC];
    } stats0;
    
    union {
        bb_chip_link_layer_tx_media_rs_stats1 s;
        uint8_t filler[0x14];
    } stats1;
    
    union {
        bb_chip_link_layer_tx_media_rs_stats2 s;
        uint8_t filler[0x14];
    } stats2;
    
} bb_chip_link_layer_tx_media_rs;


/*section : ptp_guard */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x3 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x3 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_config0_fix_ptp_violations;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t max_cycle_mode : 4;           /* 19:16 SW=rw HW=ro 0x3 */
            uint32_t max_cycles : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycles : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_mode : 4;           /* 16:19 SW=rw HW=ro 0x3 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_config0_max_cycles;

typedef struct {
    bb_chip_link_layer_tx_ptp_guard_config0_fix_ptp_violations  fix_ptp_violations;
    bb_chip_link_layer_tx_ptp_guard_config0_max_cycles  max_cycles;
    
} bb_chip_link_layer_tx_ptp_guard_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_sop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_stats0_missing_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_eop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_eop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_stats0_missing_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t max_cycle_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycle_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_stats0_max_cycle_err;

typedef struct {
    bb_chip_link_layer_tx_ptp_guard_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_tx_ptp_guard_stats0_missing_sop_err  missing_sop_err;
    bb_chip_link_layer_tx_ptp_guard_stats0_missing_eop_err  missing_eop_err;
    bb_chip_link_layer_tx_ptp_guard_stats0_max_cycle_err  max_cycle_err;
    
} bb_chip_link_layer_tx_ptp_guard_stats0;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_ptp_guard_irq0_raw;

typedef struct {
    bb_chip_link_layer_tx_ptp_guard_irq0_enable  enable;
    bb_chip_link_layer_tx_ptp_guard_irq0_pending  pending;
    bb_chip_link_layer_tx_ptp_guard_irq0_pending_irq  pending_irq;
    bb_chip_link_layer_tx_ptp_guard_irq0_raw  raw;
    
} bb_chip_link_layer_tx_ptp_guard_irq0;


typedef struct {
    bb_chip_link_layer_tx_ptp_guard_version  version;
    
    union {
        bb_chip_link_layer_tx_ptp_guard_config0 s;
        uint8_t filler[0x8];
    } config0;
    
    union {
        bb_chip_link_layer_tx_ptp_guard_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
    union {
        bb_chip_link_layer_tx_ptp_guard_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_link_layer_tx_ptp_guard;


/*section : self_test_support */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_self_test_support_set_up;

/*section : media_gen */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_self_test_support_media_gen_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t iwg_cnt : 2;           /* 11:10 SW=rw HW=ro 0x0 */
            uint32_t ifg_cnt : 2;           /* 9:8 SW=rw HW=ro 0x1 */
            uint32_t pkt_cnt : 2;           /* 7:6 SW=rw HW=ro 0x2 */
            uint32_t pkt_size : 2;           /* 5:4 SW=rw HW=ro 0x1 */
            uint32_t throttle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t throttle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_size : 2;           /* 4:5 SW=rw HW=ro 0x1 */
            uint32_t pkt_cnt : 2;           /* 6:7 SW=rw HW=ro 0x2 */
            uint32_t ifg_cnt : 2;           /* 8:9 SW=rw HW=ro 0x1 */
            uint32_t iwg_cnt : 2;           /* 10:11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_self_test_support_media_gen_mca_mgen;

typedef struct {
    bb_chip_link_layer_tx_self_test_support_media_gen_version  version;
    bb_chip_link_layer_tx_self_test_support_media_gen_mca_mgen  mca_mgen;
    
} bb_chip_link_layer_tx_self_test_support_media_gen;


/*section : framer */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t max_byte : 14;           /* 13:0 SW=rw HW=ro 0x80 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_byte : 14;           /* 0:13 SW=rw HW=ro 0x80 */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_self_test_support_framer_max_byte;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t mac_dg_type : 8;           /* 7:0 SW=rw HW=ro 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mac_dg_type : 8;           /* 0:7 SW=rw HW=ro 0x4 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_self_test_support_framer_mac_dg_type;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t timer_wait : 12;           /* 11:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t timer_wait : 12;           /* 0:11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_self_test_support_framer_timer_wait;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t mtu_size : 14;           /* 13:0 SW=rw HW=ro 0x5DC */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mtu_size : 14;           /* 0:13 SW=rw HW=ro 0x5DC */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_self_test_support_framer_mtu_size;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t max_mtu_size : 14;           /* 13:0 SW=ro HW=wo 0x5DC */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_mtu_size : 14;           /* 0:13 SW=ro HW=wo 0x5DC */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_self_test_support_framer_max_mtu_size;

typedef struct {
    bb_chip_link_layer_tx_self_test_support_framer_max_byte  max_byte;
    bb_chip_link_layer_tx_self_test_support_framer_mac_dg_type  mac_dg_type;
    bb_chip_link_layer_tx_self_test_support_framer_timer_wait  timer_wait;
    bb_chip_link_layer_tx_self_test_support_framer_mtu_size  mtu_size;
    bb_chip_link_layer_tx_self_test_support_framer_max_mtu_size  max_mtu_size;
    
} bb_chip_link_layer_tx_self_test_support_framer;


typedef struct {
    bb_chip_link_layer_tx_self_test_support_set_up  set_up;
    
    union {
        bb_chip_link_layer_tx_self_test_support_media_gen s;
        uint8_t filler[0x8];
    } media_gen;
    
    union {
        bb_chip_link_layer_tx_self_test_support_framer s;
        uint8_t filler[0x14];
    } framer;
    
} bb_chip_link_layer_tx_self_test_support;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t force_xgmii_rf : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t force_xgmii_idle : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t force_xgmii_idle : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t force_xgmii_rf : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_control;

/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=rw HW=na 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=rw HW=na 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=rw HW=na 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=rw HW=na 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=rw HW=na 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=rw HW=na 0x0 */
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=ro HW=na 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=ro HW=na 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv29 : 3;
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=ro HW=wo 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=ro HW=wo 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=ro HW=wo 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rs_xgmii_start_irq_rollover : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_done_irq_rollover : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_sop_irq_rollover : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t rs_xgmii_outbuff_eop_irq_rollover : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_start_irq_rollover : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_done_irq_rollover : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_sop_irq_rollover : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t rs_gmii_outbuff_eop_irq_rollover : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t rs_inbuff_sop_irq_rollover : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t rs_inbuff_eop_irq_rollover : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_irq_rollover : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t rs_rflush_act_irq_rollover : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_wr_irq_rollover : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t rs_drp_pkt_rd_irq_rollover : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t rs_wflush_act_irq_rollover : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_sop_err_irq_rollover : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_err_irq_rollover : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rs_fifo_full_err_irq_rollover : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t rs_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t rs_pfifo_dcount_irq_rollover : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t rs_nfifo_dcount_irq_rollover : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t mac_fsm_rollover_irq_rollover : 1;           /* 21 SW=ro HW=wo 0x0 */
            uint32_t mac_fsm_count_beyond_ptp_irq_rollover : 1;           /* 22 SW=ro HW=wo 0x0 */
            uint32_t mac_in_sop_irq_rollover : 1;           /* 23 SW=ro HW=wo 0x0 */
            uint32_t mac_in_eop_irq_rollover : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t mac_stall_ptp_in_irq_rollover : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t mac_out_sop_irq_rollover : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t mac_out_eop_irq_rollover : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t mac_pause_frame_irq_rollover : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t resv29 : 3;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_tx_irq0_raw;

typedef struct {
    bb_chip_link_layer_tx_irq0_enable  enable;
    bb_chip_link_layer_tx_irq0_pending  pending;
    bb_chip_link_layer_tx_irq0_pending_irq  pending_irq;
    bb_chip_link_layer_tx_irq0_raw  raw;
    
} bb_chip_link_layer_tx_irq0;


typedef struct {
    bb_chip_link_layer_tx_version  version;
    
    union {
        bb_chip_link_layer_tx_mac s;
        uint8_t filler[0x5C];
    } mac;
    
    union {
        bb_chip_link_layer_tx_media_rs s;
        uint8_t filler[0x8C];
    } media_rs;
    
    union {
        bb_chip_link_layer_tx_ptp_guard s;
        uint8_t filler[0x2C];
    } ptp_guard;
    
    union {
        bb_chip_link_layer_tx_self_test_support s;
        uint8_t filler[0x20];
    } self_test_support;
    bb_chip_link_layer_tx_control  control;
    
    union {
        bb_chip_link_layer_tx_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_link_layer_tx_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_link_layer_tx_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_tx_version_WRITEMASK 0x0
#define bb_chip_link_layer_tx_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_tx_version_DEFAULT 0x00050400

#define bb_chip_link_layer_tx_mac_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_tx_mac_version_WRITEMASK 0x0
#define bb_chip_link_layer_tx_mac_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_tx_mac_version_DEFAULT 0x00020100

#define bb_chip_link_layer_tx_mac_mac_config_READMASK 0x1F
#define bb_chip_link_layer_tx_mac_mac_config_WRITEMASK 0x1B
#define bb_chip_link_layer_tx_mac_mac_config_VOLATILEMASK 0x4
#define bb_chip_link_layer_tx_mac_mac_config_RESETMASK 0x1F
#define bb_chip_link_layer_tx_mac_mac_config_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_pa_word1_READMASK 0xFFFFFF
#define bb_chip_link_layer_tx_mac_pa_word1_WRITEMASK 0xFFFFFF
#define bb_chip_link_layer_tx_mac_pa_word1_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_pa_word1_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_tx_mac_pa_word1_DEFAULT 0x00555555

#define bb_chip_link_layer_tx_mac_pa_word0_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_pa_word0_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_pa_word0_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_pa_word0_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_pa_word0_DEFAULT 0x55555555

#define bb_chip_link_layer_tx_mac_sfd_READMASK 0xFF
#define bb_chip_link_layer_tx_mac_sfd_WRITEMASK 0xFF
#define bb_chip_link_layer_tx_mac_sfd_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_sfd_RESETMASK 0xFF
#define bb_chip_link_layer_tx_mac_sfd_DEFAULT 0x000000D5

#define bb_chip_link_layer_tx_mac_da_word1_READMASK 0xFFFF
#define bb_chip_link_layer_tx_mac_da_word1_WRITEMASK 0xFFFF
#define bb_chip_link_layer_tx_mac_da_word1_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_da_word1_RESETMASK 0xFFFF
#define bb_chip_link_layer_tx_mac_da_word1_DEFAULT 0x0000DADA

#define bb_chip_link_layer_tx_mac_da_word0_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_da_word0_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_da_word0_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_da_word0_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_da_word0_DEFAULT 0xDADADADA

#define bb_chip_link_layer_tx_mac_sa__word1_READMASK 0xFFFF
#define bb_chip_link_layer_tx_mac_sa__word1_WRITEMASK 0xFFFF
#define bb_chip_link_layer_tx_mac_sa__word1_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_sa__word1_RESETMASK 0xFFFF
#define bb_chip_link_layer_tx_mac_sa__word1_DEFAULT 0x00005A5A

#define bb_chip_link_layer_tx_mac_sa_word0_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_sa_word0_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_sa_word0_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_sa_word0_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_sa_word0_DEFAULT 0x5A5A5A5A

#define bb_chip_link_layer_tx_mac_lt_READMASK 0x1FFFF
#define bb_chip_link_layer_tx_mac_lt_WRITEMASK 0x1FFFF
#define bb_chip_link_layer_tx_mac_lt_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_lt_RESETMASK 0x1FFFF
#define bb_chip_link_layer_tx_mac_lt_DEFAULT 0x00001717

#define bb_chip_link_layer_tx_mac_idle_READMASK 0xFF
#define bb_chip_link_layer_tx_mac_idle_WRITEMASK 0xFF
#define bb_chip_link_layer_tx_mac_idle_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_idle_RESETMASK 0xFF
#define bb_chip_link_layer_tx_mac_idle_DEFAULT 0x0000001E

#define bb_chip_link_layer_tx_mac_frm_rate_READMASK 0xFFF
#define bb_chip_link_layer_tx_mac_frm_rate_WRITEMASK 0xFFF
#define bb_chip_link_layer_tx_mac_frm_rate_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_frm_rate_RESETMASK 0xFFF
#define bb_chip_link_layer_tx_mac_frm_rate_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_bandwidth_gap_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_bandwidth_gap_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_bandwidth_gap_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_bandwidth_gap_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_bandwidth_gap_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_bandwidth_limit_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_bandwidth_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_bandwidth_limit_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_bandwidth_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_bandwidth_limit_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_stats0_rd2clr_config_READMASK 0xFF
#define bb_chip_link_layer_tx_mac_stats0_rd2clr_config_WRITEMASK 0xFF
#define bb_chip_link_layer_tx_mac_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_mac_stats0_rd2clr_config_RESETMASK 0xFF
#define bb_chip_link_layer_tx_mac_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_stats0_pause_frame_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_pause_frame_WRITEMASK 0x0
#define bb_chip_link_layer_tx_mac_stats0_pause_frame_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_pause_frame_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_pause_frame_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_stats0_out_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_out_eop_WRITEMASK 0x0
#define bb_chip_link_layer_tx_mac_stats0_out_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_out_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_out_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_stats0_out_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_out_sop_WRITEMASK 0x0
#define bb_chip_link_layer_tx_mac_stats0_out_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_out_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_out_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_stats0_stall_ptp_in_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_stall_ptp_in_WRITEMASK 0x0
#define bb_chip_link_layer_tx_mac_stats0_stall_ptp_in_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_stall_ptp_in_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_stall_ptp_in_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_stats0_in_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_in_eop_WRITEMASK 0x0
#define bb_chip_link_layer_tx_mac_stats0_in_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_in_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_in_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_stats0_in_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_in_sop_WRITEMASK 0x0
#define bb_chip_link_layer_tx_mac_stats0_in_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_in_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_mac_stats0_in_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_stats0_fsm_count_beyond_ptp_READMASK 0xFF
#define bb_chip_link_layer_tx_mac_stats0_fsm_count_beyond_ptp_WRITEMASK 0x0
#define bb_chip_link_layer_tx_mac_stats0_fsm_count_beyond_ptp_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_mac_stats0_fsm_count_beyond_ptp_RESETMASK 0xFF
#define bb_chip_link_layer_tx_mac_stats0_fsm_count_beyond_ptp_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_mac_stats0_fsm_rollover_READMASK 0xFF
#define bb_chip_link_layer_tx_mac_stats0_fsm_rollover_WRITEMASK 0x0
#define bb_chip_link_layer_tx_mac_stats0_fsm_rollover_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_mac_stats0_fsm_rollover_RESETMASK 0xFF
#define bb_chip_link_layer_tx_mac_stats0_fsm_rollover_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_tx_media_rs_version_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_tx_media_rs_version_DEFAULT 0x00010000

#define bb_chip_link_layer_tx_media_rs_enable_READMASK 0x11
#define bb_chip_link_layer_tx_media_rs_enable_WRITEMASK 0x11
#define bb_chip_link_layer_tx_media_rs_enable_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_enable_RESETMASK 0x11
#define bb_chip_link_layer_tx_media_rs_enable_DEFAULT 0x00000001

#define bb_chip_link_layer_tx_media_rs_pfifo_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_version_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_version_DEFAULT 0x00010100

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_clear_READMASK 0x1
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_mode_READMASK 0xF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_clear_READMASK 0x1
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats0_rd2clr_config_READMASK 0x3
#define bb_chip_link_layer_tx_media_rs_stats0_rd2clr_config_WRITEMASK 0x3
#define bb_chip_link_layer_tx_media_rs_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats0_rd2clr_config_RESETMASK 0x3
#define bb_chip_link_layer_tx_media_rs_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_eop_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_sop_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats1_rd2clr_config_READMASK 0xF
#define bb_chip_link_layer_tx_media_rs_stats1_rd2clr_config_WRITEMASK 0xF
#define bb_chip_link_layer_tx_media_rs_stats1_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats1_rd2clr_config_RESETMASK 0xF
#define bb_chip_link_layer_tx_media_rs_stats1_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_eop_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_sop_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats1_gmii_done_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_done_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_done_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_done_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_done_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats1_gmii_start_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_start_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_start_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_start_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_start_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats2_rd2clr_config_READMASK 0xF
#define bb_chip_link_layer_tx_media_rs_stats2_rd2clr_config_WRITEMASK 0xF
#define bb_chip_link_layer_tx_media_rs_stats2_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats2_rd2clr_config_RESETMASK 0xF
#define bb_chip_link_layer_tx_media_rs_stats2_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_done_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_done_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_done_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_done_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_done_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_start_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_start_WRITEMASK 0x0
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_start_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_start_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_start_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_ptp_guard_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_tx_ptp_guard_version_WRITEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_tx_ptp_guard_version_DEFAULT 0x00030300

#define bb_chip_link_layer_tx_ptp_guard_config0_fix_ptp_violations_READMASK 0x3
#define bb_chip_link_layer_tx_ptp_guard_config0_fix_ptp_violations_WRITEMASK 0x1
#define bb_chip_link_layer_tx_ptp_guard_config0_fix_ptp_violations_VOLATILEMASK 0x2
#define bb_chip_link_layer_tx_ptp_guard_config0_fix_ptp_violations_RESETMASK 0x3
#define bb_chip_link_layer_tx_ptp_guard_config0_fix_ptp_violations_DEFAULT 0x00000001

#define bb_chip_link_layer_tx_ptp_guard_config0_max_cycles_READMASK 0xFFFFF
#define bb_chip_link_layer_tx_ptp_guard_config0_max_cycles_WRITEMASK 0xFFFFF
#define bb_chip_link_layer_tx_ptp_guard_config0_max_cycles_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_config0_max_cycles_RESETMASK 0xFFFFF
#define bb_chip_link_layer_tx_ptp_guard_config0_max_cycles_DEFAULT 0x00030000

#define bb_chip_link_layer_tx_ptp_guard_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_sop_err_READMASK 0xFFFF
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_sop_err_WRITEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_sop_err_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_sop_err_RESETMASK 0xFFFF
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_sop_err_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_eop_err_READMASK 0xFFFF
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_eop_err_WRITEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_eop_err_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_eop_err_RESETMASK 0xFFFF
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_eop_err_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_ptp_guard_stats0_max_cycle_err_READMASK 0xFFFF
#define bb_chip_link_layer_tx_ptp_guard_stats0_max_cycle_err_WRITEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_stats0_max_cycle_err_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_tx_ptp_guard_stats0_max_cycle_err_RESETMASK 0xFFFF
#define bb_chip_link_layer_tx_ptp_guard_stats0_max_cycle_err_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_ptp_guard_irq0_enable_READMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_enable_WRITEMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_irq0_enable_RESETMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_enable_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_READMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_WRITEMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_VOLATILEMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_RESETMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_irq_READMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_irq_RESETMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_ptp_guard_irq0_raw_READMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_raw_WRITEMASK 0x0
#define bb_chip_link_layer_tx_ptp_guard_irq0_raw_VOLATILEMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_raw_RESETMASK 0x7
#define bb_chip_link_layer_tx_ptp_guard_irq0_raw_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_self_test_support_set_up_READMASK 0x1
#define bb_chip_link_layer_tx_self_test_support_set_up_WRITEMASK 0x1
#define bb_chip_link_layer_tx_self_test_support_set_up_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_self_test_support_set_up_RESETMASK 0x1
#define bb_chip_link_layer_tx_self_test_support_set_up_DEFAULT 0x00000001

#define bb_chip_link_layer_tx_self_test_support_media_gen_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_tx_self_test_support_media_gen_version_WRITEMASK 0x0
#define bb_chip_link_layer_tx_self_test_support_media_gen_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_self_test_support_media_gen_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_tx_self_test_support_media_gen_version_DEFAULT 0x00010000

#define bb_chip_link_layer_tx_self_test_support_media_gen_mca_mgen_READMASK 0xFFF
#define bb_chip_link_layer_tx_self_test_support_media_gen_mca_mgen_WRITEMASK 0xFFF
#define bb_chip_link_layer_tx_self_test_support_media_gen_mca_mgen_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_self_test_support_media_gen_mca_mgen_RESETMASK 0xFFF
#define bb_chip_link_layer_tx_self_test_support_media_gen_mca_mgen_DEFAULT 0x00000190

#define bb_chip_link_layer_tx_self_test_support_framer_max_byte_READMASK 0x3FFF
#define bb_chip_link_layer_tx_self_test_support_framer_max_byte_WRITEMASK 0x3FFF
#define bb_chip_link_layer_tx_self_test_support_framer_max_byte_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_self_test_support_framer_max_byte_RESETMASK 0x3FFF
#define bb_chip_link_layer_tx_self_test_support_framer_max_byte_DEFAULT 0x00000080

#define bb_chip_link_layer_tx_self_test_support_framer_mac_dg_type_READMASK 0xFF
#define bb_chip_link_layer_tx_self_test_support_framer_mac_dg_type_WRITEMASK 0xFF
#define bb_chip_link_layer_tx_self_test_support_framer_mac_dg_type_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_self_test_support_framer_mac_dg_type_RESETMASK 0xFF
#define bb_chip_link_layer_tx_self_test_support_framer_mac_dg_type_DEFAULT 0x00000004

#define bb_chip_link_layer_tx_self_test_support_framer_timer_wait_READMASK 0xFFF
#define bb_chip_link_layer_tx_self_test_support_framer_timer_wait_WRITEMASK 0xFFF
#define bb_chip_link_layer_tx_self_test_support_framer_timer_wait_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_self_test_support_framer_timer_wait_RESETMASK 0xFFF
#define bb_chip_link_layer_tx_self_test_support_framer_timer_wait_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_self_test_support_framer_mtu_size_READMASK 0x3FFF
#define bb_chip_link_layer_tx_self_test_support_framer_mtu_size_WRITEMASK 0x3FFF
#define bb_chip_link_layer_tx_self_test_support_framer_mtu_size_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_self_test_support_framer_mtu_size_RESETMASK 0x3FFF
#define bb_chip_link_layer_tx_self_test_support_framer_mtu_size_DEFAULT 0x000005DC

#define bb_chip_link_layer_tx_self_test_support_framer_max_mtu_size_READMASK 0x3FFF
#define bb_chip_link_layer_tx_self_test_support_framer_max_mtu_size_WRITEMASK 0x0
#define bb_chip_link_layer_tx_self_test_support_framer_max_mtu_size_VOLATILEMASK 0x3FFF
#define bb_chip_link_layer_tx_self_test_support_framer_max_mtu_size_RESETMASK 0x3FFF
#define bb_chip_link_layer_tx_self_test_support_framer_max_mtu_size_DEFAULT 0x000005DC

#define bb_chip_link_layer_tx_control_READMASK 0x3
#define bb_chip_link_layer_tx_control_WRITEMASK 0x3
#define bb_chip_link_layer_tx_control_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_control_RESETMASK 0x3
#define bb_chip_link_layer_tx_control_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_irq0_enable_READMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_enable_WRITEMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_irq0_enable_RESETMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_enable_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_irq0_pending_READMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_pending_WRITEMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_pending_VOLATILEMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_pending_RESETMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_pending_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_irq0_pending_irq_READMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_link_layer_tx_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_link_layer_tx_irq0_pending_irq_RESETMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_link_layer_tx_irq0_raw_READMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_raw_WRITEMASK 0x0
#define bb_chip_link_layer_tx_irq0_raw_VOLATILEMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_raw_RESETMASK 0x1FFFFFFF
#define bb_chip_link_layer_tx_irq0_raw_DEFAULT 0x00000000

/*block : link_layer_rx */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x6 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x3 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x3 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x6 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_version;

/*section : mac_client_interface */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_version;

/*section : client_array */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t client_flow_ctrl_en : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t client_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t client_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t client_flow_ctrl_en : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_client_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t da_filter_w1 : 16;           /* 15:0 SW=rw HW=ro 0xDADA */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t da_filter_w1 : 16;           /* 0:15 SW=rw HW=ro 0xDADA */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word1;

typedef union {
    struct {
        uint32_t da_filter_w0 : 32;           /* 31:0 SW=rw HW=ro 0xDADADADA */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t da_filter_mask_w1 : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t da_filter_mask_w1 : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word1;

typedef union {
    struct {
        uint32_t da_filter_mask_w0 : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t sa_filter_w1 : 16;           /* 15:0 SW=rw HW=ro 0x5A5A */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sa_filter_w1 : 16;           /* 0:15 SW=rw HW=ro 0x5A5A */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word1;

typedef union {
    struct {
        uint32_t sa_filter_w0 : 32;           /* 31:0 SW=rw HW=ro 0x5A5A5A5A */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t sa_filter_mask_w1 : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sa_filter_mask_w1 : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word1;

typedef union {
    struct {
        uint32_t sa_filter_mask_w0 : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t lt_filter : 16;           /* 15:0 SW=rw HW=ro 0x1717 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lt_filter : 16;           /* 0:15 SW=rw HW=ro 0x1717 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t lt_filter_mask : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lt_filter_mask : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_mask;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t in_fsm_rollover : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t one_cycle_pkt : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drop_pkt_da : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drop_pkt_sa : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t drop_pkt_lt : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t drop_pkt_md : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t filter_fifo_overflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t out_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t out_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t filter_fifo_overflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drop_pkt_md : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drop_pkt_lt : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t drop_pkt_sa : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t drop_pkt_da : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t one_cycle_pkt : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t in_fsm_rollover : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_eop;

typedef union {
    struct {
        uint32_t out_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_sop;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t filter_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t filter_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_filter_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t drop_pkt_md : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drop_pkt_md : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_md;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t drop_pkt_lt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drop_pkt_lt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_lt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t drop_pkt_sa : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drop_pkt_sa : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_sa;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t drop_pkt_da : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drop_pkt_da : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_da;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t one_cycle_pkt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t one_cycle_pkt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_one_cycle_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t in_fsm_rollover : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_fsm_rollover : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_in_fsm_rollover;

typedef struct {
    bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_eop  out_eop;
    bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_sop  out_sop;
    bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_filter_fifo_overflow  filter_fifo_overflow;
    bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_md  drop_pkt_md;
    bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_lt  drop_pkt_lt;
    bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_sa  drop_pkt_sa;
    bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_da  drop_pkt_da;
    bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_one_cycle_pkt  one_cycle_pkt;
    bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_in_fsm_rollover  in_fsm_rollover;
    
} bb_chip_link_layer_rx_mac_client_interface_client_array_stats0;


typedef struct {
    bb_chip_link_layer_rx_mac_client_interface_client_array_client_config  client_config;
    bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word1  da_filter_word1;
    bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word0  da_filter_word0;
    bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word1  da_filter_mask_word1;
    bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word0  da_filter_mask_word0;
    bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word1  sa_filter_word1;
    bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word0  sa_filter_word0;
    bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word1  sa_filter_mask_word1;
    bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word0  sa_filter_mask_word0;
    bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter  lt_filter;
    bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_mask  lt_filter_mask;
    
    union {
        bb_chip_link_layer_rx_mac_client_interface_client_array_stats0 s;
        uint8_t filler[0x28];
    } stats0;
    
} bb_chip_link_layer_rx_mac_client_interface_client_array;


typedef struct {
    bb_chip_link_layer_rx_mac_client_interface_version  version;
    
    union {
        bb_chip_link_layer_rx_mac_client_interface_client_array s;
        uint8_t filler[0x54];
    } client_array;
    
} bb_chip_link_layer_rx_mac_client_interface;


/*section : mac */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x2 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x2 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t inject_crc32_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t disable_crc32 : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t crc32_implmntd : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t dbg_seq_num_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dbg_seq_num_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t crc32_implmntd : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t disable_crc32 : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t inject_crc32_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_mac_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t da_w1 : 16;           /* 15:0 SW=rw HW=ro 0xDADA */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t da_w1 : 16;           /* 0:15 SW=rw HW=ro 0xDADA */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_da_word1;

typedef union {
    struct {
        uint32_t da_w0 : 32;           /* 31:0 SW=rw HW=ro 0xDADADADA */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_da_word0;

/*section : pfifo */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_clear  clear;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_mode  mode;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_link_layer_rx_mac_pfifo_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_link_layer_rx_mac_pfifo_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_link_layer_rx_mac_pfifo_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_clear;

typedef struct {
    bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_clear  clear;
    
} bb_chip_link_layer_rx_mac_pfifo_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_link_layer_rx_mac_pfifo_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_link_layer_rx_mac_pfifo_read_engine;


typedef struct {
    bb_chip_link_layer_rx_mac_pfifo_version  version;
    
    union {
        bb_chip_link_layer_rx_mac_pfifo_write_engine s;
        uint8_t filler[0x38];
    } write_engine;
    
    union {
        bb_chip_link_layer_rx_mac_pfifo_read_engine s;
        uint8_t filler[0x14];
    } read_engine;
    
} bb_chip_link_layer_rx_mac_pfifo;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t dbg_seq_num_in_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t in_fsm_rollover : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t out_fsm_rollover : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t crc_err : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t in_sop : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t in_eop : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t inbuff_sop : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t inbuf_eop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t out_eop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pause_frame : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pause_frame : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t out_eop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t inbuf_eop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t inbuff_sop : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t in_eop : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t in_sop : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t crc_err : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t out_fsm_rollover : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t in_fsm_rollover : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t dbg_seq_num_in_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t pause_frame : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_pause_frame;

typedef union {
    struct {
        uint32_t out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_out_eop;

typedef union {
    struct {
        uint32_t out_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_out_sop;

typedef union {
    struct {
        uint32_t inbuf_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_inbuf_eop;

typedef union {
    struct {
        uint32_t inbuf_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_inbuf_sop;

typedef union {
    struct {
        uint32_t in_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_in_eop;

typedef union {
    struct {
        uint32_t in_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_in_sop;

typedef union {
    struct {
        uint32_t crc_err : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_crc_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t out_fsm_rollover : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t out_fsm_rollover : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_out_fsm_rollover;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t in_fsm_rollover : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_fsm_rollover : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_in_fsm_rollover;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t dbg_seq_num_in_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dbg_seq_num_in_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_mac_stats0_dbg_seq_num_in_err;

typedef struct {
    bb_chip_link_layer_rx_mac_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_rx_mac_stats0_pause_frame  pause_frame;
    bb_chip_link_layer_rx_mac_stats0_out_eop  out_eop;
    bb_chip_link_layer_rx_mac_stats0_out_sop  out_sop;
    bb_chip_link_layer_rx_mac_stats0_inbuf_eop  inbuf_eop;
    bb_chip_link_layer_rx_mac_stats0_inbuf_sop  inbuf_sop;
    bb_chip_link_layer_rx_mac_stats0_in_eop  in_eop;
    bb_chip_link_layer_rx_mac_stats0_in_sop  in_sop;
    bb_chip_link_layer_rx_mac_stats0_crc_err  crc_err;
    bb_chip_link_layer_rx_mac_stats0_out_fsm_rollover  out_fsm_rollover;
    bb_chip_link_layer_rx_mac_stats0_in_fsm_rollover  in_fsm_rollover;
    bb_chip_link_layer_rx_mac_stats0_dbg_seq_num_in_err  dbg_seq_num_in_err;
    
} bb_chip_link_layer_rx_mac_stats0;


typedef struct {
    bb_chip_link_layer_rx_mac_version  version;
    bb_chip_link_layer_rx_mac_mac_config  mac_config;
    bb_chip_link_layer_rx_mac_da_word1  da_word1;
    bb_chip_link_layer_rx_mac_da_word0  da_word0;
    
    union {
        bb_chip_link_layer_rx_mac_pfifo s;
        uint8_t filler[0x50];
    } pfifo;
    
    union {
        bb_chip_link_layer_rx_mac_stats0 s;
        uint8_t filler[0x30];
    } stats0;
    
} bb_chip_link_layer_rx_mac;


/*section : media_rs */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x2 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x2 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_xgmii_en : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rx_gmii_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_gmii_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            
            uint32_t resv1 : 3;
            uint32_t rx_xgmii_en : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t pa_word1 : 24;           /* 23:0 SW=rw HW=ro 0x555555 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pa_word1 : 24;           /* 0:23 SW=rw HW=ro 0x555555 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_pa_word1;

typedef union {
    struct {
        uint32_t pa_word0 : 32;           /* 31:0 SW=rw HW=ro 0x55555555 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_pa_word0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sfd : 8;           /* 7:0 SW=rw HW=ro 0xD5 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sfd : 8;           /* 0:7 SW=rw HW=ro 0xD5 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_sfd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t idle : 8;           /* 7:0 SW=rw HW=ro 0x1E */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t idle : 8;           /* 0:7 SW=rw HW=ro 0x1E */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_idle;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t gmii_missing_sfd : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t gmii_data_error : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gmii_out_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gmii_out_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gmii_out_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t gmii_out_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t gmii_data_error : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t gmii_missing_sfd : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t gmii_out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats0_gmii_out_eop;

typedef union {
    struct {
        uint32_t gmii_out_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats0_gmii_out_sop;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t gmii_data_error : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gmii_data_error : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats0_gmii_data_error;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t gmii_missing_sfd : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gmii_missing_sfd : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats0_gmii_missing_sfd;

typedef struct {
    bb_chip_link_layer_rx_media_rs_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_rx_media_rs_stats0_gmii_out_eop  gmii_out_eop;
    bb_chip_link_layer_rx_media_rs_stats0_gmii_out_sop  gmii_out_sop;
    bb_chip_link_layer_rx_media_rs_stats0_gmii_data_error  gmii_data_error;
    bb_chip_link_layer_rx_media_rs_stats0_gmii_missing_sfd  gmii_missing_sfd;
    
} bb_chip_link_layer_rx_media_rs_stats0;


/*section : stats1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t xgmii_runt_frm_detected : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t xgmii_link_int : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t xgmii_remote_fault : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t xgmii_local_fault : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t xgmii_link_ok : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t xgmii_wrong_lane_start : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t xgmii_missing_sfd : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t xgmii_data_error : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t xgmii_out_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t xgmii_out_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_out_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t xgmii_out_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t xgmii_data_error : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t xgmii_missing_sfd : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t xgmii_wrong_lane_start : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t xgmii_link_ok : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t xgmii_local_fault : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t xgmii_remote_fault : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t xgmii_link_int : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t xgmii_runt_frm_detected : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_rd2clr_config;

typedef union {
    struct {
        uint32_t xgmii_out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_eop;

typedef union {
    struct {
        uint32_t xgmii_out_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_sop;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t xgmii_data_error : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_data_error : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_xgmii_data_error;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t xgmii_missing_sfd : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_missing_sfd : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_xgmii_missing_sfd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t xgmii_wrong_lane_start : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_wrong_lane_start : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_xgmii_wrong_lane_start;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t xgmii_link_ok : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_link_ok : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_ok;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t xgmii_local_fault : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_local_fault : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_xgmii_local_fault;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t xgmii_remote_fault : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_remote_fault : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_xgmii_remote_fault;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t xgmii_link_int : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_link_int : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_int;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t xgmii_runt_frm_detected : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t xgmii_runt_frm_detected : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_media_rs_stats1_xgmii_runt_frm_detected;

typedef struct {
    bb_chip_link_layer_rx_media_rs_stats1_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_eop  xgmii_out_eop;
    bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_sop  xgmii_out_sop;
    bb_chip_link_layer_rx_media_rs_stats1_xgmii_data_error  xgmii_data_error;
    bb_chip_link_layer_rx_media_rs_stats1_xgmii_missing_sfd  xgmii_missing_sfd;
    bb_chip_link_layer_rx_media_rs_stats1_xgmii_wrong_lane_start  xgmii_wrong_lane_start;
    bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_ok  xgmii_link_ok;
    bb_chip_link_layer_rx_media_rs_stats1_xgmii_local_fault  xgmii_local_fault;
    bb_chip_link_layer_rx_media_rs_stats1_xgmii_remote_fault  xgmii_remote_fault;
    bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_int  xgmii_link_int;
    bb_chip_link_layer_rx_media_rs_stats1_xgmii_runt_frm_detected  xgmii_runt_frm_detected;
    
} bb_chip_link_layer_rx_media_rs_stats1;


typedef struct {
    bb_chip_link_layer_rx_media_rs_version  version;
    bb_chip_link_layer_rx_media_rs_enable  enable;
    bb_chip_link_layer_rx_media_rs_pa_word1  pa_word1;
    bb_chip_link_layer_rx_media_rs_pa_word0  pa_word0;
    bb_chip_link_layer_rx_media_rs_sfd  sfd;
    bb_chip_link_layer_rx_media_rs_idle  idle;
    
    union {
        bb_chip_link_layer_rx_media_rs_stats0 s;
        uint8_t filler[0x14];
    } stats0;
    
    union {
        bb_chip_link_layer_rx_media_rs_stats1 s;
        uint8_t filler[0x2C];
    } stats1;
    
} bb_chip_link_layer_rx_media_rs;


/*section : ptp_guard */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x3 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x3 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_config0_fix_ptp_violations;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t max_cycle_mode : 4;           /* 19:16 SW=rw HW=ro 0x3 */
            uint32_t max_cycles : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycles : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_mode : 4;           /* 16:19 SW=rw HW=ro 0x3 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_config0_max_cycles;

typedef struct {
    bb_chip_link_layer_rx_ptp_guard_config0_fix_ptp_violations  fix_ptp_violations;
    bb_chip_link_layer_rx_ptp_guard_config0_max_cycles  max_cycles;
    
} bb_chip_link_layer_rx_ptp_guard_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_sop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_stats0_missing_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_eop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_eop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_stats0_missing_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t max_cycle_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycle_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_stats0_max_cycle_err;

typedef struct {
    bb_chip_link_layer_rx_ptp_guard_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_rx_ptp_guard_stats0_missing_sop_err  missing_sop_err;
    bb_chip_link_layer_rx_ptp_guard_stats0_missing_eop_err  missing_eop_err;
    bb_chip_link_layer_rx_ptp_guard_stats0_max_cycle_err  max_cycle_err;
    
} bb_chip_link_layer_rx_ptp_guard_stats0;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_ptp_guard_irq0_raw;

typedef struct {
    bb_chip_link_layer_rx_ptp_guard_irq0_enable  enable;
    bb_chip_link_layer_rx_ptp_guard_irq0_pending  pending;
    bb_chip_link_layer_rx_ptp_guard_irq0_pending_irq  pending_irq;
    bb_chip_link_layer_rx_ptp_guard_irq0_raw  raw;
    
} bb_chip_link_layer_rx_ptp_guard_irq0;


typedef struct {
    bb_chip_link_layer_rx_ptp_guard_version  version;
    
    union {
        bb_chip_link_layer_rx_ptp_guard_config0 s;
        uint8_t filler[0x8];
    } config0;
    
    union {
        bb_chip_link_layer_rx_ptp_guard_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
    union {
        bb_chip_link_layer_rx_ptp_guard_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_link_layer_rx_ptp_guard;


/*section : self_test_support */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_self_test_support_set_up;

/*section : media_analyzer */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_self_test_support_media_analyzer_version;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t pkt_count : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t error_count : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t lane_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lane_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t error_count : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_count : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t lane_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lane_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_lane_err;

typedef union {
    struct {
        uint32_t error_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_error_count;

typedef union {
    struct {
        uint32_t count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_pkt_count;

typedef struct {
    bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_rd2clr_config  rd2clr_config;
    bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_lane_err  lane_err;
    bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_error_count  error_count;
    bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_pkt_count  pkt_count;
    
} bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0;


typedef struct {
    bb_chip_link_layer_rx_self_test_support_media_analyzer_version  version;
    
    union {
        bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_link_layer_rx_self_test_support_media_analyzer;


/*section : de_framer */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t jumbo_lt_code : 16;           /* 15:0 SW=rw HW=ro 0x1717 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t jumbo_lt_code : 16;           /* 0:15 SW=rw HW=ro 0x1717 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_self_test_support_de_framer_jumbo_lt_code;

typedef struct {
    bb_chip_link_layer_rx_self_test_support_de_framer_jumbo_lt_code  jumbo_lt_code;
    
} bb_chip_link_layer_rx_self_test_support_de_framer;


typedef struct {
    bb_chip_link_layer_rx_self_test_support_set_up  set_up;
    
    union {
        bb_chip_link_layer_rx_self_test_support_media_analyzer s;
        uint8_t filler[0x14];
    } media_analyzer;
    
    union {
        bb_chip_link_layer_rx_self_test_support_de_framer s;
        uint8_t filler[0x4];
    } de_framer;
    
} bb_chip_link_layer_rx_self_test_support;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t link_int : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t remote_fault : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t local_fault : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t link_ok : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_ok : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t local_fault : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t remote_fault : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t link_int : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t link_int : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t remote_fault : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t local_fault : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t link_ok : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_ok : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t local_fault : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t remote_fault : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t link_int : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t link_int : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t remote_fault : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t local_fault : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t link_ok : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_ok : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t local_fault : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t remote_fault : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t link_int : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t link_int : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t remote_fault : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t local_fault : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t link_ok : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_ok : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t local_fault : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t remote_fault : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t link_int : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_link_layer_rx_irq0_raw;

typedef struct {
    bb_chip_link_layer_rx_irq0_enable  enable;
    bb_chip_link_layer_rx_irq0_pending  pending;
    bb_chip_link_layer_rx_irq0_pending_irq  pending_irq;
    bb_chip_link_layer_rx_irq0_raw  raw;
    
} bb_chip_link_layer_rx_irq0;


typedef struct {
    bb_chip_link_layer_rx_version  version;
    
    union {
        bb_chip_link_layer_rx_mac_client_interface s;
        uint8_t filler[0x58];
    } mac_client_interface;
    
    union {
        bb_chip_link_layer_rx_mac s;
        uint8_t filler[0x90];
    } mac;
    
    union {
        bb_chip_link_layer_rx_media_rs s;
        uint8_t filler[0x58];
    } media_rs;
    
    union {
        bb_chip_link_layer_rx_ptp_guard s;
        uint8_t filler[0x2C];
    } ptp_guard;
    
    union {
        bb_chip_link_layer_rx_self_test_support s;
        uint8_t filler[0x1C];
    } self_test_support;
    
    union {
        bb_chip_link_layer_rx_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_link_layer_rx_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_link_layer_rx_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_rx_version_WRITEMASK 0x0
#define bb_chip_link_layer_rx_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_rx_version_DEFAULT 0x00060300

#define bb_chip_link_layer_rx_mac_client_interface_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_version_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_version_DEFAULT 0x00010000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_client_config_READMASK 0x3
#define bb_chip_link_layer_rx_mac_client_interface_client_array_client_config_WRITEMASK 0x3
#define bb_chip_link_layer_rx_mac_client_interface_client_array_client_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_client_config_RESETMASK 0x3
#define bb_chip_link_layer_rx_mac_client_interface_client_array_client_config_DEFAULT 0x00000002

#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word1_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word1_WRITEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word1_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word1_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word1_DEFAULT 0x0000DADA

#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word0_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word0_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word0_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word0_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word0_DEFAULT 0xDADADADA

#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word1_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word1_WRITEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word1_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word1_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word1_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word0_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word0_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word0_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word0_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word0_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word1_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word1_WRITEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word1_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word1_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word1_DEFAULT 0x00005A5A

#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word0_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word0_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word0_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word0_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word0_DEFAULT 0x5A5A5A5A

#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word1_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word1_WRITEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word1_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word1_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word1_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word0_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word0_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word0_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word0_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word0_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_WRITEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_DEFAULT 0x00001717

#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_mask_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_mask_WRITEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_mask_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_mask_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_mask_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_rd2clr_config_READMASK 0x1FF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_rd2clr_config_WRITEMASK 0x1FF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_rd2clr_config_RESETMASK 0x1FF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_eop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_sop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_filter_fifo_overflow_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_filter_fifo_overflow_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_filter_fifo_overflow_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_filter_fifo_overflow_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_filter_fifo_overflow_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_md_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_md_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_md_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_md_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_md_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_lt_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_lt_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_lt_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_lt_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_lt_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_sa_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_sa_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_sa_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_sa_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_sa_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_da_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_da_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_da_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_da_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_da_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_one_cycle_pkt_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_one_cycle_pkt_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_one_cycle_pkt_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_one_cycle_pkt_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_one_cycle_pkt_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_in_fsm_rollover_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_in_fsm_rollover_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_in_fsm_rollover_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_in_fsm_rollover_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_in_fsm_rollover_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_rx_mac_version_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_rx_mac_version_DEFAULT 0x00020100

#define bb_chip_link_layer_rx_mac_mac_config_READMASK 0x1F
#define bb_chip_link_layer_rx_mac_mac_config_WRITEMASK 0x1B
#define bb_chip_link_layer_rx_mac_mac_config_VOLATILEMASK 0x4
#define bb_chip_link_layer_rx_mac_mac_config_RESETMASK 0x1F
#define bb_chip_link_layer_rx_mac_mac_config_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_da_word1_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_da_word1_WRITEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_da_word1_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_da_word1_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_da_word1_DEFAULT 0x0000DADA

#define bb_chip_link_layer_rx_mac_da_word0_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_da_word0_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_da_word0_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_da_word0_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_da_word0_DEFAULT 0xDADADADA

#define bb_chip_link_layer_rx_mac_pfifo_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_rx_mac_pfifo_version_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_rx_mac_pfifo_version_DEFAULT 0x00010100

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_clear_READMASK 0x1
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_mode_READMASK 0xF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_clear_READMASK 0x1
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_rd2clr_config_READMASK 0x7FF
#define bb_chip_link_layer_rx_mac_stats0_rd2clr_config_WRITEMASK 0x7FF
#define bb_chip_link_layer_rx_mac_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_rd2clr_config_RESETMASK 0x7FF
#define bb_chip_link_layer_rx_mac_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_pause_frame_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_pause_frame_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_pause_frame_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_pause_frame_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_pause_frame_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_out_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_out_eop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_out_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_out_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_out_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_out_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_out_sop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_out_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_out_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_out_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_inbuf_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_inbuf_eop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_inbuf_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_inbuf_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_inbuf_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_inbuf_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_inbuf_sop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_inbuf_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_inbuf_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_inbuf_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_in_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_in_eop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_in_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_in_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_in_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_in_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_in_sop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_in_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_in_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_in_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_crc_err_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_crc_err_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_crc_err_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_crc_err_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_mac_stats0_crc_err_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_out_fsm_rollover_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_stats0_out_fsm_rollover_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_out_fsm_rollover_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_stats0_out_fsm_rollover_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_stats0_out_fsm_rollover_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_in_fsm_rollover_READMASK 0xFF
#define bb_chip_link_layer_rx_mac_stats0_in_fsm_rollover_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_in_fsm_rollover_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_mac_stats0_in_fsm_rollover_RESETMASK 0xFF
#define bb_chip_link_layer_rx_mac_stats0_in_fsm_rollover_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_mac_stats0_dbg_seq_num_in_err_READMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_stats0_dbg_seq_num_in_err_WRITEMASK 0x0
#define bb_chip_link_layer_rx_mac_stats0_dbg_seq_num_in_err_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_stats0_dbg_seq_num_in_err_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_mac_stats0_dbg_seq_num_in_err_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_rx_media_rs_version_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_rx_media_rs_version_DEFAULT 0x00020000

#define bb_chip_link_layer_rx_media_rs_enable_READMASK 0x11
#define bb_chip_link_layer_rx_media_rs_enable_WRITEMASK 0x11
#define bb_chip_link_layer_rx_media_rs_enable_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_enable_RESETMASK 0x11
#define bb_chip_link_layer_rx_media_rs_enable_DEFAULT 0x00000001

#define bb_chip_link_layer_rx_media_rs_pa_word1_READMASK 0xFFFFFF
#define bb_chip_link_layer_rx_media_rs_pa_word1_WRITEMASK 0xFFFFFF
#define bb_chip_link_layer_rx_media_rs_pa_word1_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_pa_word1_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_rx_media_rs_pa_word1_DEFAULT 0x00555555

#define bb_chip_link_layer_rx_media_rs_pa_word0_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_pa_word0_WRITEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_pa_word0_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_pa_word0_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_pa_word0_DEFAULT 0x55555555

#define bb_chip_link_layer_rx_media_rs_sfd_READMASK 0xFF
#define bb_chip_link_layer_rx_media_rs_sfd_WRITEMASK 0xFF
#define bb_chip_link_layer_rx_media_rs_sfd_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_sfd_RESETMASK 0xFF
#define bb_chip_link_layer_rx_media_rs_sfd_DEFAULT 0x000000D5

#define bb_chip_link_layer_rx_media_rs_idle_READMASK 0xFF
#define bb_chip_link_layer_rx_media_rs_idle_WRITEMASK 0xFF
#define bb_chip_link_layer_rx_media_rs_idle_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_idle_RESETMASK 0xFF
#define bb_chip_link_layer_rx_media_rs_idle_DEFAULT 0x0000001E

#define bb_chip_link_layer_rx_media_rs_stats0_rd2clr_config_READMASK 0xF
#define bb_chip_link_layer_rx_media_rs_stats0_rd2clr_config_WRITEMASK 0xF
#define bb_chip_link_layer_rx_media_rs_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats0_rd2clr_config_RESETMASK 0xF
#define bb_chip_link_layer_rx_media_rs_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_eop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_sop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats0_gmii_data_error_READMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_data_error_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_data_error_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_data_error_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_data_error_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats0_gmii_missing_sfd_READMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_missing_sfd_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_missing_sfd_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_missing_sfd_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_missing_sfd_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_rd2clr_config_READMASK 0x3FF
#define bb_chip_link_layer_rx_media_rs_stats1_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_link_layer_rx_media_rs_stats1_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_link_layer_rx_media_rs_stats1_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_eop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_eop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_eop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_sop_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_sop_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_sop_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_data_error_READMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_data_error_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_data_error_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_data_error_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_data_error_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_missing_sfd_READMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_missing_sfd_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_missing_sfd_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_missing_sfd_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_missing_sfd_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_wrong_lane_start_READMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_wrong_lane_start_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_wrong_lane_start_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_wrong_lane_start_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_wrong_lane_start_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_ok_READMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_ok_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_ok_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_ok_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_ok_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_local_fault_READMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_local_fault_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_local_fault_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_local_fault_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_local_fault_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_remote_fault_READMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_remote_fault_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_remote_fault_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_remote_fault_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_remote_fault_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_int_READMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_int_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_int_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_int_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_int_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_runt_frm_detected_READMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_runt_frm_detected_WRITEMASK 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_runt_frm_detected_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_runt_frm_detected_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_runt_frm_detected_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_ptp_guard_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_rx_ptp_guard_version_WRITEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_rx_ptp_guard_version_DEFAULT 0x00030300

#define bb_chip_link_layer_rx_ptp_guard_config0_fix_ptp_violations_READMASK 0x3
#define bb_chip_link_layer_rx_ptp_guard_config0_fix_ptp_violations_WRITEMASK 0x1
#define bb_chip_link_layer_rx_ptp_guard_config0_fix_ptp_violations_VOLATILEMASK 0x2
#define bb_chip_link_layer_rx_ptp_guard_config0_fix_ptp_violations_RESETMASK 0x3
#define bb_chip_link_layer_rx_ptp_guard_config0_fix_ptp_violations_DEFAULT 0x00000001

#define bb_chip_link_layer_rx_ptp_guard_config0_max_cycles_READMASK 0xFFFFF
#define bb_chip_link_layer_rx_ptp_guard_config0_max_cycles_WRITEMASK 0xFFFFF
#define bb_chip_link_layer_rx_ptp_guard_config0_max_cycles_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_config0_max_cycles_RESETMASK 0xFFFFF
#define bb_chip_link_layer_rx_ptp_guard_config0_max_cycles_DEFAULT 0x00030000

#define bb_chip_link_layer_rx_ptp_guard_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_sop_err_READMASK 0xFFFF
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_sop_err_WRITEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_sop_err_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_sop_err_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_sop_err_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_eop_err_READMASK 0xFFFF
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_eop_err_WRITEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_eop_err_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_eop_err_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_eop_err_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_ptp_guard_stats0_max_cycle_err_READMASK 0xFFFF
#define bb_chip_link_layer_rx_ptp_guard_stats0_max_cycle_err_WRITEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_stats0_max_cycle_err_VOLATILEMASK 0xFFFF
#define bb_chip_link_layer_rx_ptp_guard_stats0_max_cycle_err_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_ptp_guard_stats0_max_cycle_err_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_ptp_guard_irq0_enable_READMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_enable_WRITEMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_irq0_enable_RESETMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_enable_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_READMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_WRITEMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_VOLATILEMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_RESETMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_irq_READMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_irq_RESETMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_ptp_guard_irq0_raw_READMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_raw_WRITEMASK 0x0
#define bb_chip_link_layer_rx_ptp_guard_irq0_raw_VOLATILEMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_raw_RESETMASK 0x7
#define bb_chip_link_layer_rx_ptp_guard_irq0_raw_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_self_test_support_set_up_READMASK 0x1
#define bb_chip_link_layer_rx_self_test_support_set_up_WRITEMASK 0x1
#define bb_chip_link_layer_rx_self_test_support_set_up_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_self_test_support_set_up_RESETMASK 0x1
#define bb_chip_link_layer_rx_self_test_support_set_up_DEFAULT 0x00000001

#define bb_chip_link_layer_rx_self_test_support_media_analyzer_version_READMASK 0xFFFFFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_version_WRITEMASK 0x0
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_version_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_version_RESETMASK 0xFFFFFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_version_DEFAULT 0x00010000

#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_lane_err_READMASK 0xFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_lane_err_WRITEMASK 0x0
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_lane_err_VOLATILEMASK 0xFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_lane_err_RESETMASK 0xFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_lane_err_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_error_count_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_error_count_WRITEMASK 0x0
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_error_count_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_error_count_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_error_count_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_pkt_count_READMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_pkt_count_WRITEMASK 0x0
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_pkt_count_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_pkt_count_RESETMASK 0xFFFFFFFF
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_pkt_count_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_self_test_support_de_framer_jumbo_lt_code_READMASK 0xFFFF
#define bb_chip_link_layer_rx_self_test_support_de_framer_jumbo_lt_code_WRITEMASK 0xFFFF
#define bb_chip_link_layer_rx_self_test_support_de_framer_jumbo_lt_code_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_self_test_support_de_framer_jumbo_lt_code_RESETMASK 0xFFFF
#define bb_chip_link_layer_rx_self_test_support_de_framer_jumbo_lt_code_DEFAULT 0x00001717

#define bb_chip_link_layer_rx_irq0_enable_READMASK 0xF
#define bb_chip_link_layer_rx_irq0_enable_WRITEMASK 0xF
#define bb_chip_link_layer_rx_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_irq0_enable_RESETMASK 0xF
#define bb_chip_link_layer_rx_irq0_enable_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_irq0_pending_READMASK 0xF
#define bb_chip_link_layer_rx_irq0_pending_WRITEMASK 0xF
#define bb_chip_link_layer_rx_irq0_pending_VOLATILEMASK 0xF
#define bb_chip_link_layer_rx_irq0_pending_RESETMASK 0xF
#define bb_chip_link_layer_rx_irq0_pending_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_irq0_pending_irq_READMASK 0xF
#define bb_chip_link_layer_rx_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_link_layer_rx_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_link_layer_rx_irq0_pending_irq_RESETMASK 0xF
#define bb_chip_link_layer_rx_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_link_layer_rx_irq0_raw_READMASK 0xF
#define bb_chip_link_layer_rx_irq0_raw_WRITEMASK 0x0
#define bb_chip_link_layer_rx_irq0_raw_VOLATILEMASK 0xF
#define bb_chip_link_layer_rx_irq0_raw_RESETMASK 0xF
#define bb_chip_link_layer_rx_irq0_raw_DEFAULT 0x00000000

/*block : layer3_tx */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x4 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x4 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_version;

/*section : eth_framer */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t max_byte : 14;           /* 13:0 SW=rw HW=ro 0x80 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_byte : 14;           /* 0:13 SW=rw HW=ro 0x80 */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_config0_max_byte;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t mac_dg_type : 8;           /* 7:0 SW=rw HW=ro 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mac_dg_type : 8;           /* 0:7 SW=rw HW=ro 0x4 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_config0_mac_dg_type;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t timer_wait : 12;           /* 11:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t timer_wait : 12;           /* 0:11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_config0_timer_wait;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t mtu_size : 14;           /* 13:0 SW=rw HW=ro 0x5DC */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mtu_size : 14;           /* 0:13 SW=rw HW=ro 0x5DC */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_config0_mtu_size;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t max_mtu_size : 14;           /* 13:0 SW=ro HW=wo 0x5DC */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_mtu_size : 14;           /* 0:13 SW=ro HW=wo 0x5DC */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_config0_max_mtu_size;

typedef struct {
    bb_chip_layer3_tx_eth_framer_config0_max_byte  max_byte;
    bb_chip_layer3_tx_eth_framer_config0_mac_dg_type  mac_dg_type;
    bb_chip_layer3_tx_eth_framer_config0_timer_wait  timer_wait;
    bb_chip_layer3_tx_eth_framer_config0_mtu_size  mtu_size;
    bb_chip_layer3_tx_eth_framer_config0_max_mtu_size  max_mtu_size;
    
} bb_chip_layer3_tx_eth_framer_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t mac_dg_size_err : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t in_sop : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t in_eop : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t inbuff_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t inbuff_eop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t out_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t out_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t inbuff_eop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t inbuff_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t in_eop : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t in_sop : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t mac_dg_size_err : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_stats0_out_eop;

typedef union {
    struct {
        uint32_t out_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_stats0_out_sop;

typedef union {
    struct {
        uint32_t inbuff_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_stats0_inbuff_eop;

typedef union {
    struct {
        uint32_t inbuff_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_stats0_inbuff_sop;

typedef union {
    struct {
        uint32_t in_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_stats0_in_eop;

typedef union {
    struct {
        uint32_t in_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_stats0_in_sop;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t mac_dg_size_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mac_dg_size_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_stats0_mac_dg_size_err;

typedef struct {
    bb_chip_layer3_tx_eth_framer_stats0_rd2clr_config  rd2clr_config;
    bb_chip_layer3_tx_eth_framer_stats0_out_eop  out_eop;
    bb_chip_layer3_tx_eth_framer_stats0_out_sop  out_sop;
    bb_chip_layer3_tx_eth_framer_stats0_inbuff_eop  inbuff_eop;
    bb_chip_layer3_tx_eth_framer_stats0_inbuff_sop  inbuff_sop;
    bb_chip_layer3_tx_eth_framer_stats0_in_eop  in_eop;
    bb_chip_layer3_tx_eth_framer_stats0_in_sop  in_sop;
    bb_chip_layer3_tx_eth_framer_stats0_mac_dg_size_err  mac_dg_size_err;
    
} bb_chip_layer3_tx_eth_framer_stats0;


/*section : pfifo */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_clear  clear;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_mode  mode;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_layer3_tx_eth_framer_pfifo_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_clear;

typedef struct {
    bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_clear  clear;
    
} bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_layer3_tx_eth_framer_pfifo_read_engine;


typedef struct {
    bb_chip_layer3_tx_eth_framer_pfifo_version  version;
    
    union {
        bb_chip_layer3_tx_eth_framer_pfifo_write_engine s;
        uint8_t filler[0x38];
    } write_engine;
    
    union {
        bb_chip_layer3_tx_eth_framer_pfifo_read_engine s;
        uint8_t filler[0x14];
    } read_engine;
    
} bb_chip_layer3_tx_eth_framer_pfifo;


/*section : ptp_guard */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x3 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x3 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_config0_fix_ptp_violations;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t max_cycle_mode : 4;           /* 19:16 SW=rw HW=ro 0x3 */
            uint32_t max_cycles : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycles : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_mode : 4;           /* 16:19 SW=rw HW=ro 0x3 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_config0_max_cycles;

typedef struct {
    bb_chip_layer3_tx_eth_framer_ptp_guard_config0_fix_ptp_violations  fix_ptp_violations;
    bb_chip_layer3_tx_eth_framer_ptp_guard_config0_max_cycles  max_cycles;
    
} bb_chip_layer3_tx_eth_framer_ptp_guard_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_sop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_eop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_eop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t max_cycle_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycle_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_max_cycle_err;

typedef struct {
    bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_rd2clr_config  rd2clr_config;
    bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_sop_err  missing_sop_err;
    bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_eop_err  missing_eop_err;
    bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_max_cycle_err  max_cycle_err;
    
} bb_chip_layer3_tx_eth_framer_ptp_guard_stats0;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_raw;

typedef struct {
    bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_enable  enable;
    bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending  pending;
    bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_irq  pending_irq;
    bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_raw  raw;
    
} bb_chip_layer3_tx_eth_framer_ptp_guard_irq0;


typedef struct {
    bb_chip_layer3_tx_eth_framer_ptp_guard_version  version;
    
    union {
        bb_chip_layer3_tx_eth_framer_ptp_guard_config0 s;
        uint8_t filler[0x8];
    } config0;
    
    union {
        bb_chip_layer3_tx_eth_framer_ptp_guard_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
    union {
        bb_chip_layer3_tx_eth_framer_ptp_guard_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_layer3_tx_eth_framer_ptp_guard;


typedef struct {
    bb_chip_layer3_tx_eth_framer_version  version;
    
    union {
        bb_chip_layer3_tx_eth_framer_config0 s;
        uint8_t filler[0x14];
    } config0;
    
    union {
        bb_chip_layer3_tx_eth_framer_stats0 s;
        uint8_t filler[0x20];
    } stats0;
    
    union {
        bb_chip_layer3_tx_eth_framer_pfifo s;
        uint8_t filler[0x50];
    } pfifo;
    
    union {
        bb_chip_layer3_tx_eth_framer_ptp_guard s;
        uint8_t filler[0x2C];
    } ptp_guard;
    
} bb_chip_layer3_tx_eth_framer;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv19 : 13;
            uint32_t framer_stats0_out_eop_irq_rollover : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_out_sop_irq_rollover : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_inbuff_eop_irq_rollover : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_inbuff_sop_irq_rollover : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_in_eop_irq_rollover : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_in_sop_irq_rollover : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_nfifo_dcount_irq_rollover : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pfifo_dcount_irq_rollover : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_fifo_full_err_irq_rollover : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_err_irq_rollover : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_sop_err_irq_rollover : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_wflush_act_irq_rollover : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_rd_irq_rollover : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_wr_irq_rollover : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_rflush_act_irq_rollover : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_drp_pkt_irq_rollover : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t framer_pfifo_read_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_drp_pkt_irq_rollover : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_rflush_act_irq_rollover : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_wr_irq_rollover : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_rd_irq_rollover : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_wflush_act_irq_rollover : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_sop_err_irq_rollover : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_err_irq_rollover : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_fifo_full_err_irq_rollover : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pfifo_dcount_irq_rollover : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_nfifo_dcount_irq_rollover : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_in_sop_irq_rollover : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_in_eop_irq_rollover : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_inbuff_sop_irq_rollover : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_inbuff_eop_irq_rollover : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_out_sop_irq_rollover : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t framer_stats0_out_eop_irq_rollover : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t resv19 : 13;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv19 : 13;
            uint32_t framer_stats0_out_eop_irq_rollover : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_out_sop_irq_rollover : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_inbuff_eop_irq_rollover : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_inbuff_sop_irq_rollover : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_in_eop_irq_rollover : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_in_sop_irq_rollover : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_nfifo_dcount_irq_rollover : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pfifo_dcount_irq_rollover : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_fifo_full_err_irq_rollover : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_err_irq_rollover : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_sop_err_irq_rollover : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_wflush_act_irq_rollover : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_rd_irq_rollover : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_wr_irq_rollover : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_rflush_act_irq_rollover : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_drp_pkt_irq_rollover : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t framer_pfifo_read_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_drp_pkt_irq_rollover : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_rflush_act_irq_rollover : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_wr_irq_rollover : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_rd_irq_rollover : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_wflush_act_irq_rollover : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_sop_err_irq_rollover : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_err_irq_rollover : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_fifo_full_err_irq_rollover : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pfifo_dcount_irq_rollover : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_nfifo_dcount_irq_rollover : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_in_sop_irq_rollover : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_in_eop_irq_rollover : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_inbuff_sop_irq_rollover : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_inbuff_eop_irq_rollover : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_out_sop_irq_rollover : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t framer_stats0_out_eop_irq_rollover : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t resv19 : 13;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv19 : 13;
            uint32_t framer_stats0_out_eop_irq_rollover : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_out_sop_irq_rollover : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_inbuff_eop_irq_rollover : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_inbuff_sop_irq_rollover : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_in_eop_irq_rollover : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_in_sop_irq_rollover : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_nfifo_dcount_irq_rollover : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pfifo_dcount_irq_rollover : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_fifo_full_err_irq_rollover : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_err_irq_rollover : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_sop_err_irq_rollover : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_wflush_act_irq_rollover : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_rd_irq_rollover : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_wr_irq_rollover : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_rflush_act_irq_rollover : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_drp_pkt_irq_rollover : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t framer_pfifo_read_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_drp_pkt_irq_rollover : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_rflush_act_irq_rollover : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_wr_irq_rollover : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_rd_irq_rollover : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_wflush_act_irq_rollover : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_sop_err_irq_rollover : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_err_irq_rollover : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_fifo_full_err_irq_rollover : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pfifo_dcount_irq_rollover : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_nfifo_dcount_irq_rollover : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_in_sop_irq_rollover : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_in_eop_irq_rollover : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_inbuff_sop_irq_rollover : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_inbuff_eop_irq_rollover : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_out_sop_irq_rollover : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t framer_stats0_out_eop_irq_rollover : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t resv19 : 13;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv19 : 13;
            uint32_t framer_stats0_out_eop_irq_rollover : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_out_sop_irq_rollover : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_inbuff_eop_irq_rollover : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_inbuff_sop_irq_rollover : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_in_eop_irq_rollover : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_in_sop_irq_rollover : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_nfifo_dcount_irq_rollover : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pfifo_dcount_irq_rollover : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_fifo_full_err_irq_rollover : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_err_irq_rollover : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_sop_err_irq_rollover : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_wflush_act_irq_rollover : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_rd_irq_rollover : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_wr_irq_rollover : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_rflush_act_irq_rollover : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_drp_pkt_irq_rollover : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t framer_pfifo_read_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_drp_pkt_irq_rollover : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_read_engine_stats0_rflush_act_irq_rollover : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_flow_ctrl_irq_rollover : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_wr_irq_rollover : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_drp_pkt_rd_irq_rollover : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_wflush_act_irq_rollover : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_sop_err_irq_rollover : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_err_irq_rollover : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_fifo_full_err_irq_rollover : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_irq_rollover : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_pfifo_dcount_irq_rollover : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t framer_pfifo_write_engine_stats0_nfifo_dcount_irq_rollover : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_in_sop_irq_rollover : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_in_eop_irq_rollover : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_inbuff_sop_irq_rollover : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_inbuff_eop_irq_rollover : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_out_sop_irq_rollover : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t framer_stats0_out_eop_irq_rollover : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t resv19 : 13;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_tx_irq0_raw;

typedef struct {
    bb_chip_layer3_tx_irq0_enable  enable;
    bb_chip_layer3_tx_irq0_pending  pending;
    bb_chip_layer3_tx_irq0_pending_irq  pending_irq;
    bb_chip_layer3_tx_irq0_raw  raw;
    
} bb_chip_layer3_tx_irq0;


typedef struct {
    bb_chip_layer3_tx_version  version;
    
    union {
        bb_chip_layer3_tx_eth_framer s;
        uint8_t filler[0xB4];
    } eth_framer;
    
    union {
        bb_chip_layer3_tx_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_layer3_tx_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_layer3_tx_version_READMASK 0xFFFFFF
#define bb_chip_layer3_tx_version_WRITEMASK 0x0
#define bb_chip_layer3_tx_version_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_version_RESETMASK 0xFFFFFF
#define bb_chip_layer3_tx_version_DEFAULT 0x00040200

#define bb_chip_layer3_tx_eth_framer_version_READMASK 0xFFFFFF
#define bb_chip_layer3_tx_eth_framer_version_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_version_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_version_RESETMASK 0xFFFFFF
#define bb_chip_layer3_tx_eth_framer_version_DEFAULT 0x00030000

#define bb_chip_layer3_tx_eth_framer_config0_max_byte_READMASK 0x3FFF
#define bb_chip_layer3_tx_eth_framer_config0_max_byte_WRITEMASK 0x3FFF
#define bb_chip_layer3_tx_eth_framer_config0_max_byte_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_config0_max_byte_RESETMASK 0x3FFF
#define bb_chip_layer3_tx_eth_framer_config0_max_byte_DEFAULT 0x00000080

#define bb_chip_layer3_tx_eth_framer_config0_mac_dg_type_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_config0_mac_dg_type_WRITEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_config0_mac_dg_type_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_config0_mac_dg_type_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_config0_mac_dg_type_DEFAULT 0x00000004

#define bb_chip_layer3_tx_eth_framer_config0_timer_wait_READMASK 0xFFF
#define bb_chip_layer3_tx_eth_framer_config0_timer_wait_WRITEMASK 0xFFF
#define bb_chip_layer3_tx_eth_framer_config0_timer_wait_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_config0_timer_wait_RESETMASK 0xFFF
#define bb_chip_layer3_tx_eth_framer_config0_timer_wait_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_config0_mtu_size_READMASK 0x3FFF
#define bb_chip_layer3_tx_eth_framer_config0_mtu_size_WRITEMASK 0x3FFF
#define bb_chip_layer3_tx_eth_framer_config0_mtu_size_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_config0_mtu_size_RESETMASK 0x3FFF
#define bb_chip_layer3_tx_eth_framer_config0_mtu_size_DEFAULT 0x000005DC

#define bb_chip_layer3_tx_eth_framer_config0_max_mtu_size_READMASK 0x3FFF
#define bb_chip_layer3_tx_eth_framer_config0_max_mtu_size_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_config0_max_mtu_size_VOLATILEMASK 0x3FFF
#define bb_chip_layer3_tx_eth_framer_config0_max_mtu_size_RESETMASK 0x3FFF
#define bb_chip_layer3_tx_eth_framer_config0_max_mtu_size_DEFAULT 0x000005DC

#define bb_chip_layer3_tx_eth_framer_stats0_rd2clr_config_READMASK 0x7F
#define bb_chip_layer3_tx_eth_framer_stats0_rd2clr_config_WRITEMASK 0x7F
#define bb_chip_layer3_tx_eth_framer_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_stats0_rd2clr_config_RESETMASK 0x7F
#define bb_chip_layer3_tx_eth_framer_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_stats0_out_eop_READMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_out_eop_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_stats0_out_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_out_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_out_eop_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_stats0_out_sop_READMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_out_sop_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_stats0_out_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_out_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_out_sop_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_eop_READMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_eop_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_eop_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_sop_READMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_sop_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_sop_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_stats0_in_eop_READMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_in_eop_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_stats0_in_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_in_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_in_eop_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_stats0_in_sop_READMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_in_sop_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_stats0_in_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_in_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_stats0_in_sop_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_stats0_mac_dg_size_err_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_stats0_mac_dg_size_err_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_stats0_mac_dg_size_err_VOLATILEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_stats0_mac_dg_size_err_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_stats0_mac_dg_size_err_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_version_READMASK 0xFFFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_version_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_version_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_version_RESETMASK 0xFFFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_version_DEFAULT 0x00010100

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_clear_READMASK 0x1
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_mode_READMASK 0xF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_clear_READMASK 0x1
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_ptp_guard_version_READMASK 0xFFFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_version_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_version_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_version_RESETMASK 0xFFFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_version_DEFAULT 0x00030300

#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_fix_ptp_violations_READMASK 0x3
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_fix_ptp_violations_WRITEMASK 0x1
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_fix_ptp_violations_VOLATILEMASK 0x2
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_fix_ptp_violations_RESETMASK 0x3
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_fix_ptp_violations_DEFAULT 0x00000001

#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_max_cycles_READMASK 0xFFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_max_cycles_WRITEMASK 0xFFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_max_cycles_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_max_cycles_RESETMASK 0xFFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_max_cycles_DEFAULT 0x00030000

#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_sop_err_READMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_sop_err_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_sop_err_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_sop_err_RESETMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_sop_err_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_eop_err_READMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_eop_err_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_eop_err_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_eop_err_RESETMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_eop_err_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_max_cycle_err_READMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_max_cycle_err_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_max_cycle_err_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_max_cycle_err_RESETMASK 0xFFFF
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_max_cycle_err_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_enable_READMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_enable_WRITEMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_enable_RESETMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_enable_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_READMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_WRITEMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_VOLATILEMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_RESETMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_irq_READMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_irq_RESETMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_raw_READMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_raw_WRITEMASK 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_raw_VOLATILEMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_raw_RESETMASK 0x7
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_raw_DEFAULT 0x00000000

#define bb_chip_layer3_tx_irq0_enable_READMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_enable_WRITEMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_irq0_enable_RESETMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_enable_DEFAULT 0x00000000

#define bb_chip_layer3_tx_irq0_pending_READMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_pending_WRITEMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_pending_VOLATILEMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_pending_RESETMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_pending_DEFAULT 0x00000000

#define bb_chip_layer3_tx_irq0_pending_irq_READMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_layer3_tx_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_layer3_tx_irq0_pending_irq_RESETMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_layer3_tx_irq0_raw_READMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_raw_WRITEMASK 0x0
#define bb_chip_layer3_tx_irq0_raw_VOLATILEMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_raw_RESETMASK 0x7FFFF
#define bb_chip_layer3_tx_irq0_raw_DEFAULT 0x00000000

/*block : layer3_rx */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_version;

/*section : eth_de_framer */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_eth_de_framer_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t jumbo_lt_code : 16;           /* 15:0 SW=rw HW=ro 0x1717 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t jumbo_lt_code : 16;           /* 0:15 SW=rw HW=ro 0x1717 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_eth_de_framer_config0_jumbo_lt_code;

typedef struct {
    bb_chip_layer3_rx_eth_de_framer_config0_jumbo_lt_code  jumbo_lt_code;
    
} bb_chip_layer3_rx_eth_de_framer_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t non_eth_pkt : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t out_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t out_eop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t out_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t non_eth_pkt : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_eth_de_framer_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_layer3_rx_eth_de_framer_stats0_out_eop;

typedef union {
    struct {
        uint32_t out_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_layer3_rx_eth_de_framer_stats0_out_sop;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t non_eth_pkt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t non_eth_pkt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_eth_de_framer_stats0_non_eth_pkt;

typedef struct {
    bb_chip_layer3_rx_eth_de_framer_stats0_rd2clr_config  rd2clr_config;
    bb_chip_layer3_rx_eth_de_framer_stats0_out_eop  out_eop;
    bb_chip_layer3_rx_eth_de_framer_stats0_out_sop  out_sop;
    bb_chip_layer3_rx_eth_de_framer_stats0_non_eth_pkt  non_eth_pkt;
    
} bb_chip_layer3_rx_eth_de_framer_stats0;


typedef struct {
    bb_chip_layer3_rx_eth_de_framer_version  version;
    
    union {
        bb_chip_layer3_rx_eth_de_framer_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_layer3_rx_eth_de_framer_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_layer3_rx_eth_de_framer;


/*section : ptp_guard */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x3 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x3 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_config0_fix_ptp_violations;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t max_cycle_mode : 4;           /* 19:16 SW=rw HW=ro 0x3 */
            uint32_t max_cycles : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycles : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_mode : 4;           /* 16:19 SW=rw HW=ro 0x3 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_config0_max_cycles;

typedef struct {
    bb_chip_layer3_rx_ptp_guard_config0_fix_ptp_violations  fix_ptp_violations;
    bb_chip_layer3_rx_ptp_guard_config0_max_cycles  max_cycles;
    
} bb_chip_layer3_rx_ptp_guard_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_sop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_stats0_missing_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_eop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_eop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_stats0_missing_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t max_cycle_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycle_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_stats0_max_cycle_err;

typedef struct {
    bb_chip_layer3_rx_ptp_guard_stats0_rd2clr_config  rd2clr_config;
    bb_chip_layer3_rx_ptp_guard_stats0_missing_sop_err  missing_sop_err;
    bb_chip_layer3_rx_ptp_guard_stats0_missing_eop_err  missing_eop_err;
    bb_chip_layer3_rx_ptp_guard_stats0_max_cycle_err  max_cycle_err;
    
} bb_chip_layer3_rx_ptp_guard_stats0;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_ptp_guard_irq0_raw;

typedef struct {
    bb_chip_layer3_rx_ptp_guard_irq0_enable  enable;
    bb_chip_layer3_rx_ptp_guard_irq0_pending  pending;
    bb_chip_layer3_rx_ptp_guard_irq0_pending_irq  pending_irq;
    bb_chip_layer3_rx_ptp_guard_irq0_raw  raw;
    
} bb_chip_layer3_rx_ptp_guard_irq0;


typedef struct {
    bb_chip_layer3_rx_ptp_guard_version  version;
    
    union {
        bb_chip_layer3_rx_ptp_guard_config0 s;
        uint8_t filler[0x8];
    } config0;
    
    union {
        bb_chip_layer3_rx_ptp_guard_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
    union {
        bb_chip_layer3_rx_ptp_guard_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_layer3_rx_ptp_guard;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t de_framer_stats0_out_eop_irq_rollover : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t de_framer_stats0_out_sop_irq_rollover : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t de_framer_stats0_non_eth_pkt_irq_rollover : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t de_framer_stats0_non_eth_pkt_irq_rollover : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t de_framer_stats0_out_sop_irq_rollover : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t de_framer_stats0_out_eop_irq_rollover : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t de_framer_stats0_out_eop_irq_rollover : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t de_framer_stats0_out_sop_irq_rollover : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t de_framer_stats0_non_eth_pkt_irq_rollover : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t de_framer_stats0_non_eth_pkt_irq_rollover : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t de_framer_stats0_out_sop_irq_rollover : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t de_framer_stats0_out_eop_irq_rollover : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t de_framer_stats0_out_eop_irq_rollover : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t de_framer_stats0_out_sop_irq_rollover : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t de_framer_stats0_non_eth_pkt_irq_rollover : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t de_framer_stats0_non_eth_pkt_irq_rollover : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t de_framer_stats0_out_sop_irq_rollover : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t de_framer_stats0_out_eop_irq_rollover : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t de_framer_stats0_out_eop_irq_rollover : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t de_framer_stats0_out_sop_irq_rollover : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t de_framer_stats0_non_eth_pkt_irq_rollover : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t de_framer_stats0_non_eth_pkt_irq_rollover : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t de_framer_stats0_out_sop_irq_rollover : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t de_framer_stats0_out_eop_irq_rollover : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_layer3_rx_irq0_raw;

typedef struct {
    bb_chip_layer3_rx_irq0_enable  enable;
    bb_chip_layer3_rx_irq0_pending  pending;
    bb_chip_layer3_rx_irq0_pending_irq  pending_irq;
    bb_chip_layer3_rx_irq0_raw  raw;
    
} bb_chip_layer3_rx_irq0;


typedef struct {
    bb_chip_layer3_rx_version  version;
    
    union {
        bb_chip_layer3_rx_eth_de_framer s;
        uint8_t filler[0x18];
    } eth_de_framer;
    
    union {
        bb_chip_layer3_rx_ptp_guard s;
        uint8_t filler[0x2C];
    } ptp_guard;
    
    union {
        bb_chip_layer3_rx_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_layer3_rx_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_layer3_rx_version_READMASK 0xFFFFFF
#define bb_chip_layer3_rx_version_WRITEMASK 0x0
#define bb_chip_layer3_rx_version_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_version_RESETMASK 0xFFFFFF
#define bb_chip_layer3_rx_version_DEFAULT 0x00030200

#define bb_chip_layer3_rx_eth_de_framer_version_READMASK 0xFFFFFF
#define bb_chip_layer3_rx_eth_de_framer_version_WRITEMASK 0x0
#define bb_chip_layer3_rx_eth_de_framer_version_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_eth_de_framer_version_RESETMASK 0xFFFFFF
#define bb_chip_layer3_rx_eth_de_framer_version_DEFAULT 0x00010000

#define bb_chip_layer3_rx_eth_de_framer_config0_jumbo_lt_code_READMASK 0xFFFF
#define bb_chip_layer3_rx_eth_de_framer_config0_jumbo_lt_code_WRITEMASK 0xFFFF
#define bb_chip_layer3_rx_eth_de_framer_config0_jumbo_lt_code_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_eth_de_framer_config0_jumbo_lt_code_RESETMASK 0xFFFF
#define bb_chip_layer3_rx_eth_de_framer_config0_jumbo_lt_code_DEFAULT 0x00001717

#define bb_chip_layer3_rx_eth_de_framer_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_layer3_rx_eth_de_framer_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_layer3_rx_eth_de_framer_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_eth_de_framer_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_layer3_rx_eth_de_framer_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_layer3_rx_eth_de_framer_stats0_out_eop_READMASK 0xFFFFFFFF
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_eop_WRITEMASK 0x0
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_eop_DEFAULT 0x00000000

#define bb_chip_layer3_rx_eth_de_framer_stats0_out_sop_READMASK 0xFFFFFFFF
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_sop_WRITEMASK 0x0
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_sop_DEFAULT 0x00000000

#define bb_chip_layer3_rx_eth_de_framer_stats0_non_eth_pkt_READMASK 0xFFFF
#define bb_chip_layer3_rx_eth_de_framer_stats0_non_eth_pkt_WRITEMASK 0x0
#define bb_chip_layer3_rx_eth_de_framer_stats0_non_eth_pkt_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_rx_eth_de_framer_stats0_non_eth_pkt_RESETMASK 0xFFFF
#define bb_chip_layer3_rx_eth_de_framer_stats0_non_eth_pkt_DEFAULT 0x00000000

#define bb_chip_layer3_rx_ptp_guard_version_READMASK 0xFFFFFF
#define bb_chip_layer3_rx_ptp_guard_version_WRITEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_version_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_version_RESETMASK 0xFFFFFF
#define bb_chip_layer3_rx_ptp_guard_version_DEFAULT 0x00030300

#define bb_chip_layer3_rx_ptp_guard_config0_fix_ptp_violations_READMASK 0x3
#define bb_chip_layer3_rx_ptp_guard_config0_fix_ptp_violations_WRITEMASK 0x1
#define bb_chip_layer3_rx_ptp_guard_config0_fix_ptp_violations_VOLATILEMASK 0x2
#define bb_chip_layer3_rx_ptp_guard_config0_fix_ptp_violations_RESETMASK 0x3
#define bb_chip_layer3_rx_ptp_guard_config0_fix_ptp_violations_DEFAULT 0x00000001

#define bb_chip_layer3_rx_ptp_guard_config0_max_cycles_READMASK 0xFFFFF
#define bb_chip_layer3_rx_ptp_guard_config0_max_cycles_WRITEMASK 0xFFFFF
#define bb_chip_layer3_rx_ptp_guard_config0_max_cycles_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_config0_max_cycles_RESETMASK 0xFFFFF
#define bb_chip_layer3_rx_ptp_guard_config0_max_cycles_DEFAULT 0x00030000

#define bb_chip_layer3_rx_ptp_guard_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_layer3_rx_ptp_guard_stats0_missing_sop_err_READMASK 0xFFFF
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_sop_err_WRITEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_sop_err_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_sop_err_RESETMASK 0xFFFF
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_sop_err_DEFAULT 0x00000000

#define bb_chip_layer3_rx_ptp_guard_stats0_missing_eop_err_READMASK 0xFFFF
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_eop_err_WRITEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_eop_err_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_eop_err_RESETMASK 0xFFFF
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_eop_err_DEFAULT 0x00000000

#define bb_chip_layer3_rx_ptp_guard_stats0_max_cycle_err_READMASK 0xFFFF
#define bb_chip_layer3_rx_ptp_guard_stats0_max_cycle_err_WRITEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_stats0_max_cycle_err_VOLATILEMASK 0xFFFF
#define bb_chip_layer3_rx_ptp_guard_stats0_max_cycle_err_RESETMASK 0xFFFF
#define bb_chip_layer3_rx_ptp_guard_stats0_max_cycle_err_DEFAULT 0x00000000

#define bb_chip_layer3_rx_ptp_guard_irq0_enable_READMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_enable_WRITEMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_irq0_enable_RESETMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_enable_DEFAULT 0x00000000

#define bb_chip_layer3_rx_ptp_guard_irq0_pending_READMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_WRITEMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_VOLATILEMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_RESETMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_DEFAULT 0x00000000

#define bb_chip_layer3_rx_ptp_guard_irq0_pending_irq_READMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_irq_RESETMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_layer3_rx_ptp_guard_irq0_raw_READMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_raw_WRITEMASK 0x0
#define bb_chip_layer3_rx_ptp_guard_irq0_raw_VOLATILEMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_raw_RESETMASK 0x7
#define bb_chip_layer3_rx_ptp_guard_irq0_raw_DEFAULT 0x00000000

#define bb_chip_layer3_rx_irq0_enable_READMASK 0x7
#define bb_chip_layer3_rx_irq0_enable_WRITEMASK 0x7
#define bb_chip_layer3_rx_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_irq0_enable_RESETMASK 0x7
#define bb_chip_layer3_rx_irq0_enable_DEFAULT 0x00000000

#define bb_chip_layer3_rx_irq0_pending_READMASK 0x7
#define bb_chip_layer3_rx_irq0_pending_WRITEMASK 0x7
#define bb_chip_layer3_rx_irq0_pending_VOLATILEMASK 0x7
#define bb_chip_layer3_rx_irq0_pending_RESETMASK 0x7
#define bb_chip_layer3_rx_irq0_pending_DEFAULT 0x00000000

#define bb_chip_layer3_rx_irq0_pending_irq_READMASK 0x7
#define bb_chip_layer3_rx_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_layer3_rx_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_layer3_rx_irq0_pending_irq_RESETMASK 0x7
#define bb_chip_layer3_rx_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_layer3_rx_irq0_raw_READMASK 0x7
#define bb_chip_layer3_rx_irq0_raw_WRITEMASK 0x0
#define bb_chip_layer3_rx_irq0_raw_VOLATILEMASK 0x7
#define bb_chip_layer3_rx_irq0_raw_RESETMASK 0x7
#define bb_chip_layer3_rx_irq0_raw_DEFAULT 0x00000000

/*block : mca_core */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x4 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t dp_rx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t dp_tx_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_rx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_control0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_status0;

/*section : link */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t rx_idl_en_min : 4;           /* 23:20 SW=rw HW=ro 0x1 */
            uint32_t tx_idl_min : 4;           /* 19:16 SW=rw HW=ro 0x8 */
            uint32_t rx_idl_min : 4;           /* 15:12 SW=rw HW=ro 0x4 */
            uint32_t rx_ts1_en_min : 4;           /* 11:8 SW=rw HW=ro 0x1 */
            uint32_t tx_ts1_min : 4;           /* 7:4 SW=rw HW=ro 0x8 */
            uint32_t rx_ts1_min : 4;           /* 3:0 SW=rw HW=ro 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_ts1_min : 4;           /* 0:3 SW=rw HW=ro 0x4 */
            uint32_t tx_ts1_min : 4;           /* 4:7 SW=rw HW=ro 0x8 */
            uint32_t rx_ts1_en_min : 4;           /* 8:11 SW=rw HW=ro 0x1 */
            uint32_t rx_idl_min : 4;           /* 12:15 SW=rw HW=ro 0x4 */
            uint32_t tx_idl_min : 4;           /* 16:19 SW=rw HW=ro 0x8 */
            uint32_t rx_idl_en_min : 4;           /* 20:23 SW=rw HW=ro 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_pkt_mngt_pol;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t rx_idl_en_max_lmt : 4;           /* 23:20 SW=rw HW=ro 0x1 */
            uint32_t tx_idl_max_lmt : 4;           /* 19:16 SW=rw HW=ro 0x4 */
            uint32_t rx_idl_max_lmt : 4;           /* 15:12 SW=rw HW=ro 0x1 */
            uint32_t rx_ts2_en_max_lmt : 4;           /* 11:8 SW=rw HW=ro 0x1 */
            uint32_t tx_ts2_max_lmt : 4;           /* 7:4 SW=rw HW=ro 0x4 */
            uint32_t rx_ts2_max_lmt : 4;           /* 3:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_ts2_max_lmt : 4;           /* 0:3 SW=rw HW=ro 0x1 */
            uint32_t tx_ts2_max_lmt : 4;           /* 4:7 SW=rw HW=ro 0x4 */
            uint32_t rx_ts2_en_max_lmt : 4;           /* 8:11 SW=rw HW=ro 0x1 */
            uint32_t rx_idl_max_lmt : 4;           /* 12:15 SW=rw HW=ro 0x1 */
            uint32_t tx_idl_max_lmt : 4;           /* 16:19 SW=rw HW=ro 0x4 */
            uint32_t rx_idl_en_max_lmt : 4;           /* 20:23 SW=rw HW=ro 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_pkt_mngt_rec;

/*section : ltssm_pol_tmr */

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x1D5 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_pol_tmr_act_rpt;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x1D5 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_rpt;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x2625A */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle;

typedef struct {
    bb_chip_mca_core_link_control0_ltssm_pol_tmr_act_rpt  act_rpt;
    bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_rpt  idle_rpt;
    bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle  idle;
    
} bb_chip_mca_core_link_control0_ltssm_pol_tmr;


/*section : ltssm_rec_tmr */

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x28 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_rec_tmr_act_rpt;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x28 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_rpt;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x2625A */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle;

typedef struct {
    bb_chip_mca_core_link_control0_ltssm_rec_tmr_act_rpt  act_rpt;
    bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_rpt  idle_rpt;
    bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle  idle;
    
} bb_chip_mca_core_link_control0_ltssm_rec_tmr;


/*section : ltssm_u0_tmr */

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x61B */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0ltimeout;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x3D09 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_u0_tmr_pnd;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x3D09 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_u0_tmr_crd;

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x1312D */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0rectimeout;

typedef struct {
    bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0ltimeout  u0ltimeout;
    bb_chip_mca_core_link_control0_ltssm_u0_tmr_pnd  pnd;
    bb_chip_mca_core_link_control0_ltssm_u0_tmr_crd  crd;
    bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0rectimeout  u0rectimeout;
    
} bb_chip_mca_core_link_control0_ltssm_u0_tmr;


/*section : test */

typedef union {
    struct {
        uint32_t lmt : 32;           /* 31:0 SW=rw HW=ro 0x3D09 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_link_control0_test_latency;

typedef struct {
    bb_chip_mca_core_link_control0_test_latency  latency;
    
} bb_chip_mca_core_link_control0_test;


typedef struct {
    bb_chip_mca_core_link_control0_ltssm_pkt_mngt_pol  ltssm_pkt_mngt_pol;
    bb_chip_mca_core_link_control0_ltssm_pkt_mngt_rec  ltssm_pkt_mngt_rec;
    
    union {
        bb_chip_mca_core_link_control0_ltssm_pol_tmr s;
        uint8_t filler[0xC];
    } ltssm_pol_tmr;
    
    union {
        bb_chip_mca_core_link_control0_ltssm_rec_tmr s;
        uint8_t filler[0xC];
    } ltssm_rec_tmr;
    
    union {
        bb_chip_mca_core_link_control0_ltssm_u0_tmr s;
        uint8_t filler[0x10];
    } ltssm_u0_tmr;
    
    union {
        bb_chip_mca_core_link_control0_test s;
        uint8_t filler[0x4];
    } test;
    
} bb_chip_mca_core_link_control0;


/*section : status0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t active_channels : 5;           /* 4:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t active_channels : 5;           /* 0:4 SW=ro HW=wo 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_link_status0_cfg;

typedef struct {
    bb_chip_mca_core_link_status0_cfg  cfg;
    
} bb_chip_mca_core_link_status0;


typedef struct {
    
    union {
        bb_chip_mca_core_link_control0 s;
        uint8_t filler[0x34];
    } control0;
    
    union {
        bb_chip_mca_core_link_status0 s;
        uint8_t filler[0x4];
    } status0;
    
} bb_chip_mca_core_link;


/*section : tx */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t stats_chid_en : 16;           /* 23:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 4;
            uint32_t bw_pkt_type : 4;           /* 3:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t bw_pkt_type : 4;           /* 0:3 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 4;
            uint32_t stats_chid_en : 16;           /* 8:23 SW=rw HW=ro 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_control0_dp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=rw HW=ro 0xFF */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=rw HW=ro 0xFF */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_control0_bw_sample_timer;

typedef struct {
    bb_chip_mca_core_tx_control0_dp  dp;
    bb_chip_mca_core_tx_control0_bw_sample_timer  bw_sample_timer;
    
} bb_chip_mca_core_tx_control0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t bandwidth : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t plu : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t lgood : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t lcrd : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lrtry : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lbad : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t ts1 : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t ts2 : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t idle : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_rtry : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_nrtry : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t cmd_fifo_dcount : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t nfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pfifo : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t nfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t cmd_fifo_dcount : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_nrtry : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_rtry : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t idle : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t ts2 : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t ts1 : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t lbad : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lrtry : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lcrd : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lgood : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t plu : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t bandwidth : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t cnt : 4;           /* 3:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 4;           /* 0:3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_pfifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t cnt : 4;           /* 3:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 4;           /* 0:3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_nfifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_cmd_fifo_dcount;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_data_pkt_nrtry;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_data_pkt_rtry;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_idle;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_ts2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_ts1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_lbad;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_lrtry;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_lcrd;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_lgood;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_plu;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_tx_stats0_bandwidth;

typedef struct {
    bb_chip_mca_core_tx_stats0_rd2clr_config  rd2clr_config;
    bb_chip_mca_core_tx_stats0_pfifo  pfifo;
    bb_chip_mca_core_tx_stats0_nfifo  nfifo;
    bb_chip_mca_core_tx_stats0_cmd_fifo_dcount  cmd_fifo_dcount;
    bb_chip_mca_core_tx_stats0_data_pkt_nrtry  data_pkt_nrtry;
    bb_chip_mca_core_tx_stats0_data_pkt_rtry  data_pkt_rtry;
    bb_chip_mca_core_tx_stats0_idle  idle;
    bb_chip_mca_core_tx_stats0_ts2  ts2;
    bb_chip_mca_core_tx_stats0_ts1  ts1;
    bb_chip_mca_core_tx_stats0_lbad  lbad;
    bb_chip_mca_core_tx_stats0_lrtry  lrtry;
    bb_chip_mca_core_tx_stats0_lcrd  lcrd;
    bb_chip_mca_core_tx_stats0_lgood  lgood;
    bb_chip_mca_core_tx_stats0_plu  plu;
    bb_chip_mca_core_tx_stats0_bandwidth  bandwidth;
    
} bb_chip_mca_core_tx_stats0;


typedef struct {
    
    union {
        bb_chip_mca_core_tx_control0 s;
        uint8_t filler[0x8];
    } control0;
    
    union {
        bb_chip_mca_core_tx_stats0 s;
        uint8_t filler[0x3C];
    } stats0;
    
} bb_chip_mca_core_tx;


/*section : rx */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t stats_chid_en : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t stats_chid_en : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_control0_dp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t hi : 16;           /* 31:16 SW=rw HW=ro 0x63 */
            uint32_t lo : 16;           /* 15:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lo : 16;           /* 0:15 SW=rw HW=ro 0x1 */
            uint32_t hi : 16;           /* 16:31 SW=rw HW=ro 0x63 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_control0_rx_cmd_fifo_flc;

typedef struct {
    bb_chip_mca_core_rx_control0_dp  dp;
    bb_chip_mca_core_rx_control0_rx_cmd_fifo_flc  rx_cmd_fifo_flc;
    
} bb_chip_mca_core_rx_control0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t rx_cmd_fifo_flc : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t plu : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lgood : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lcrd : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lrtry : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t lbad : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t ts1 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t ts2 : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t idle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_rtry : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_nrtry : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t cmd_fifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cmd_fifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_nrtry : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t data_pkt_rtry : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t idle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t ts2 : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t ts1 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t lbad : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t lrtry : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t lcrd : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lgood : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t plu : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t rx_cmd_fifo_flc : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_cmd_fifo_dcount;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_data_pkt_nrtry;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_data_pkt_rtry;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_idle;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_ts2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_ts1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_lbad;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_lrtry;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_lcrd;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_lgood;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_plu;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_rx_stats0_rx_cmd_fifo_flc;

typedef struct {
    bb_chip_mca_core_rx_stats0_rd2clr_config  rd2clr_config;
    bb_chip_mca_core_rx_stats0_cmd_fifo_dcount  cmd_fifo_dcount;
    bb_chip_mca_core_rx_stats0_data_pkt_nrtry  data_pkt_nrtry;
    bb_chip_mca_core_rx_stats0_data_pkt_rtry  data_pkt_rtry;
    bb_chip_mca_core_rx_stats0_idle  idle;
    bb_chip_mca_core_rx_stats0_ts2  ts2;
    bb_chip_mca_core_rx_stats0_ts1  ts1;
    bb_chip_mca_core_rx_stats0_lbad  lbad;
    bb_chip_mca_core_rx_stats0_lrtry  lrtry;
    bb_chip_mca_core_rx_stats0_lcrd  lcrd;
    bb_chip_mca_core_rx_stats0_lgood  lgood;
    bb_chip_mca_core_rx_stats0_plu  plu;
    bb_chip_mca_core_rx_stats0_rx_cmd_fifo_flc  rx_cmd_fifo_flc;
    
} bb_chip_mca_core_rx_stats0;


typedef struct {
    
    union {
        bb_chip_mca_core_rx_control0 s;
        uint8_t filler[0x8];
    } control0;
    
    union {
        bb_chip_mca_core_rx_stats0 s;
        uint8_t filler[0x34];
    } stats0;
    
} bb_chip_mca_core_rx;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t dp_tx_ready : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_ready : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_tx_ready : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_ready : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t fifo_drp_pkt : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t dp_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t dp_ready : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_max_sz_err : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_full_err : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_err : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_pkt_sop_err : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_rd : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_fifo_drp_pkt_wr : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_max_err : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_eop_err : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t tx_dp_grd_sop_err : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t tx_lnk_cmd_fifo_full_err : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t rx_lnk_cmd_fifo_full_err : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t rx_dp_grd_max_err : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t rx_dp_grd_eop_err : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t rx_dp_grd_sop_err : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_core_irq0_raw;

typedef struct {
    bb_chip_mca_core_irq0_enable  enable;
    bb_chip_mca_core_irq0_pending  pending;
    bb_chip_mca_core_irq0_pending_irq  pending_irq;
    bb_chip_mca_core_irq0_raw  raw;
    
} bb_chip_mca_core_irq0;


typedef struct {
    bb_chip_mca_core_version  version;
    bb_chip_mca_core_control0  control0;
    bb_chip_mca_core_status0  status0;
    
    union {
        bb_chip_mca_core_link s;
        uint8_t filler[0x38];
    } link;
    
    union {
        bb_chip_mca_core_tx s;
        uint8_t filler[0x44];
    } tx;
    
    union {
        bb_chip_mca_core_rx s;
        uint8_t filler[0x3C];
    } rx;
    
    union {
        bb_chip_mca_core_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_mca_core_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_mca_core_version_READMASK 0xFFFFFF
#define bb_chip_mca_core_version_WRITEMASK 0x0
#define bb_chip_mca_core_version_VOLATILEMASK 0x0
#define bb_chip_mca_core_version_RESETMASK 0xFFFFFF
#define bb_chip_mca_core_version_DEFAULT 0x00010204

#define bb_chip_mca_core_control0_READMASK 0x3
#define bb_chip_mca_core_control0_WRITEMASK 0x3
#define bb_chip_mca_core_control0_VOLATILEMASK 0x0
#define bb_chip_mca_core_control0_RESETMASK 0x3
#define bb_chip_mca_core_control0_DEFAULT 0x00000000

#define bb_chip_mca_core_status0_READMASK 0x3
#define bb_chip_mca_core_status0_WRITEMASK 0x0
#define bb_chip_mca_core_status0_VOLATILEMASK 0x3
#define bb_chip_mca_core_status0_RESETMASK 0x3
#define bb_chip_mca_core_status0_DEFAULT 0x00000000

#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_pol_READMASK 0xFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_pol_WRITEMASK 0xFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_pol_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_pol_RESETMASK 0xFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_pol_DEFAULT 0x00184184

#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_rec_READMASK 0xFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_rec_WRITEMASK 0xFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_rec_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_rec_RESETMASK 0xFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_rec_DEFAULT 0x00141141

#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_act_rpt_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_act_rpt_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_act_rpt_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_act_rpt_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_act_rpt_DEFAULT 0x000001D5

#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_rpt_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_rpt_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_rpt_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_rpt_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_rpt_DEFAULT 0x000001D5

#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_DEFAULT 0x0002625A

#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_act_rpt_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_act_rpt_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_act_rpt_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_act_rpt_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_act_rpt_DEFAULT 0x00000028

#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_rpt_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_rpt_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_rpt_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_rpt_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_rpt_DEFAULT 0x00000028

#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_DEFAULT 0x0002625A

#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0ltimeout_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0ltimeout_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0ltimeout_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0ltimeout_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0ltimeout_DEFAULT 0x0000061B

#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_pnd_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_pnd_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_pnd_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_pnd_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_pnd_DEFAULT 0x00003D09

#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_crd_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_crd_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_crd_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_crd_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_crd_DEFAULT 0x00003D09

#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0rectimeout_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0rectimeout_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0rectimeout_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0rectimeout_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0rectimeout_DEFAULT 0x0001312D

#define bb_chip_mca_core_link_control0_test_latency_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_test_latency_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_test_latency_VOLATILEMASK 0x0
#define bb_chip_mca_core_link_control0_test_latency_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_link_control0_test_latency_DEFAULT 0x00003D09

#define bb_chip_mca_core_link_status0_cfg_READMASK 0x1F
#define bb_chip_mca_core_link_status0_cfg_WRITEMASK 0x0
#define bb_chip_mca_core_link_status0_cfg_VOLATILEMASK 0x1F
#define bb_chip_mca_core_link_status0_cfg_RESETMASK 0x1F
#define bb_chip_mca_core_link_status0_cfg_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_control0_dp_READMASK 0xFFFF0F
#define bb_chip_mca_core_tx_control0_dp_WRITEMASK 0xFFFF0F
#define bb_chip_mca_core_tx_control0_dp_VOLATILEMASK 0x0
#define bb_chip_mca_core_tx_control0_dp_RESETMASK 0xFFFF0F
#define bb_chip_mca_core_tx_control0_dp_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_control0_bw_sample_timer_READMASK 0xFFFF
#define bb_chip_mca_core_tx_control0_bw_sample_timer_WRITEMASK 0xFFFF
#define bb_chip_mca_core_tx_control0_bw_sample_timer_VOLATILEMASK 0x0
#define bb_chip_mca_core_tx_control0_bw_sample_timer_RESETMASK 0xFFFF
#define bb_chip_mca_core_tx_control0_bw_sample_timer_DEFAULT 0x000000FF

#define bb_chip_mca_core_tx_stats0_rd2clr_config_READMASK 0x3FFF
#define bb_chip_mca_core_tx_stats0_rd2clr_config_WRITEMASK 0x3FFF
#define bb_chip_mca_core_tx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_mca_core_tx_stats0_rd2clr_config_RESETMASK 0x3FFF
#define bb_chip_mca_core_tx_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_pfifo_READMASK 0xF
#define bb_chip_mca_core_tx_stats0_pfifo_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_pfifo_VOLATILEMASK 0xF
#define bb_chip_mca_core_tx_stats0_pfifo_RESETMASK 0xF
#define bb_chip_mca_core_tx_stats0_pfifo_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_nfifo_READMASK 0xF
#define bb_chip_mca_core_tx_stats0_nfifo_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_nfifo_VOLATILEMASK 0xF
#define bb_chip_mca_core_tx_stats0_nfifo_RESETMASK 0xF
#define bb_chip_mca_core_tx_stats0_nfifo_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_cmd_fifo_dcount_READMASK 0xFFFF
#define bb_chip_mca_core_tx_stats0_cmd_fifo_dcount_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_cmd_fifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_mca_core_tx_stats0_cmd_fifo_dcount_RESETMASK 0xFFFF
#define bb_chip_mca_core_tx_stats0_cmd_fifo_dcount_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_data_pkt_nrtry_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_tx_stats0_data_pkt_nrtry_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_data_pkt_nrtry_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_core_tx_stats0_data_pkt_nrtry_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_tx_stats0_data_pkt_nrtry_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_data_pkt_rtry_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_tx_stats0_data_pkt_rtry_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_data_pkt_rtry_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_core_tx_stats0_data_pkt_rtry_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_tx_stats0_data_pkt_rtry_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_idle_READMASK 0xFF
#define bb_chip_mca_core_tx_stats0_idle_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_idle_VOLATILEMASK 0xFF
#define bb_chip_mca_core_tx_stats0_idle_RESETMASK 0xFF
#define bb_chip_mca_core_tx_stats0_idle_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_ts2_READMASK 0xFF
#define bb_chip_mca_core_tx_stats0_ts2_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_ts2_VOLATILEMASK 0xFF
#define bb_chip_mca_core_tx_stats0_ts2_RESETMASK 0xFF
#define bb_chip_mca_core_tx_stats0_ts2_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_ts1_READMASK 0xFF
#define bb_chip_mca_core_tx_stats0_ts1_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_ts1_VOLATILEMASK 0xFF
#define bb_chip_mca_core_tx_stats0_ts1_RESETMASK 0xFF
#define bb_chip_mca_core_tx_stats0_ts1_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_lbad_READMASK 0xFF
#define bb_chip_mca_core_tx_stats0_lbad_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_lbad_VOLATILEMASK 0xFF
#define bb_chip_mca_core_tx_stats0_lbad_RESETMASK 0xFF
#define bb_chip_mca_core_tx_stats0_lbad_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_lrtry_READMASK 0xFF
#define bb_chip_mca_core_tx_stats0_lrtry_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_lrtry_VOLATILEMASK 0xFF
#define bb_chip_mca_core_tx_stats0_lrtry_RESETMASK 0xFF
#define bb_chip_mca_core_tx_stats0_lrtry_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_lcrd_READMASK 0xFF
#define bb_chip_mca_core_tx_stats0_lcrd_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_lcrd_VOLATILEMASK 0xFF
#define bb_chip_mca_core_tx_stats0_lcrd_RESETMASK 0xFF
#define bb_chip_mca_core_tx_stats0_lcrd_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_lgood_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_tx_stats0_lgood_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_lgood_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_core_tx_stats0_lgood_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_tx_stats0_lgood_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_plu_READMASK 0xFF
#define bb_chip_mca_core_tx_stats0_plu_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_plu_VOLATILEMASK 0xFF
#define bb_chip_mca_core_tx_stats0_plu_RESETMASK 0xFF
#define bb_chip_mca_core_tx_stats0_plu_DEFAULT 0x00000000

#define bb_chip_mca_core_tx_stats0_bandwidth_READMASK 0xFFFF
#define bb_chip_mca_core_tx_stats0_bandwidth_WRITEMASK 0x0
#define bb_chip_mca_core_tx_stats0_bandwidth_VOLATILEMASK 0xFFFF
#define bb_chip_mca_core_tx_stats0_bandwidth_RESETMASK 0xFFFF
#define bb_chip_mca_core_tx_stats0_bandwidth_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_control0_dp_READMASK 0xFFFF
#define bb_chip_mca_core_rx_control0_dp_WRITEMASK 0xFFFF
#define bb_chip_mca_core_rx_control0_dp_VOLATILEMASK 0x0
#define bb_chip_mca_core_rx_control0_dp_RESETMASK 0xFFFF
#define bb_chip_mca_core_rx_control0_dp_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_control0_rx_cmd_fifo_flc_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_control0_rx_cmd_fifo_flc_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_control0_rx_cmd_fifo_flc_VOLATILEMASK 0x0
#define bb_chip_mca_core_rx_control0_rx_cmd_fifo_flc_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_control0_rx_cmd_fifo_flc_DEFAULT 0x00630001

#define bb_chip_mca_core_rx_stats0_rd2clr_config_READMASK 0xFFF
#define bb_chip_mca_core_rx_stats0_rd2clr_config_WRITEMASK 0xFFF
#define bb_chip_mca_core_rx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_mca_core_rx_stats0_rd2clr_config_RESETMASK 0xFFF
#define bb_chip_mca_core_rx_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_cmd_fifo_dcount_READMASK 0xFFFF
#define bb_chip_mca_core_rx_stats0_cmd_fifo_dcount_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_cmd_fifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_mca_core_rx_stats0_cmd_fifo_dcount_RESETMASK 0xFFFF
#define bb_chip_mca_core_rx_stats0_cmd_fifo_dcount_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_data_pkt_nrtry_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_stats0_data_pkt_nrtry_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_data_pkt_nrtry_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_stats0_data_pkt_nrtry_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_stats0_data_pkt_nrtry_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_data_pkt_rtry_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_stats0_data_pkt_rtry_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_data_pkt_rtry_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_stats0_data_pkt_rtry_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_stats0_data_pkt_rtry_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_idle_READMASK 0xFF
#define bb_chip_mca_core_rx_stats0_idle_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_idle_VOLATILEMASK 0xFF
#define bb_chip_mca_core_rx_stats0_idle_RESETMASK 0xFF
#define bb_chip_mca_core_rx_stats0_idle_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_ts2_READMASK 0xFF
#define bb_chip_mca_core_rx_stats0_ts2_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_ts2_VOLATILEMASK 0xFF
#define bb_chip_mca_core_rx_stats0_ts2_RESETMASK 0xFF
#define bb_chip_mca_core_rx_stats0_ts2_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_ts1_READMASK 0xFF
#define bb_chip_mca_core_rx_stats0_ts1_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_ts1_VOLATILEMASK 0xFF
#define bb_chip_mca_core_rx_stats0_ts1_RESETMASK 0xFF
#define bb_chip_mca_core_rx_stats0_ts1_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_lbad_READMASK 0xFF
#define bb_chip_mca_core_rx_stats0_lbad_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_lbad_VOLATILEMASK 0xFF
#define bb_chip_mca_core_rx_stats0_lbad_RESETMASK 0xFF
#define bb_chip_mca_core_rx_stats0_lbad_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_lrtry_READMASK 0xFF
#define bb_chip_mca_core_rx_stats0_lrtry_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_lrtry_VOLATILEMASK 0xFF
#define bb_chip_mca_core_rx_stats0_lrtry_RESETMASK 0xFF
#define bb_chip_mca_core_rx_stats0_lrtry_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_lcrd_READMASK 0xFF
#define bb_chip_mca_core_rx_stats0_lcrd_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_lcrd_VOLATILEMASK 0xFF
#define bb_chip_mca_core_rx_stats0_lcrd_RESETMASK 0xFF
#define bb_chip_mca_core_rx_stats0_lcrd_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_lgood_READMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_stats0_lgood_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_lgood_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_stats0_lgood_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_core_rx_stats0_lgood_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_plu_READMASK 0xFF
#define bb_chip_mca_core_rx_stats0_plu_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_plu_VOLATILEMASK 0xFF
#define bb_chip_mca_core_rx_stats0_plu_RESETMASK 0xFF
#define bb_chip_mca_core_rx_stats0_plu_DEFAULT 0x00000000

#define bb_chip_mca_core_rx_stats0_rx_cmd_fifo_flc_READMASK 0xFF
#define bb_chip_mca_core_rx_stats0_rx_cmd_fifo_flc_WRITEMASK 0x0
#define bb_chip_mca_core_rx_stats0_rx_cmd_fifo_flc_VOLATILEMASK 0xFF
#define bb_chip_mca_core_rx_stats0_rx_cmd_fifo_flc_RESETMASK 0xFF
#define bb_chip_mca_core_rx_stats0_rx_cmd_fifo_flc_DEFAULT 0x00000000

#define bb_chip_mca_core_irq0_enable_READMASK 0x3FFFF
#define bb_chip_mca_core_irq0_enable_WRITEMASK 0x3FFFF
#define bb_chip_mca_core_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_mca_core_irq0_enable_RESETMASK 0x3FFFF
#define bb_chip_mca_core_irq0_enable_DEFAULT 0x00000000

#define bb_chip_mca_core_irq0_pending_READMASK 0x3FFFF
#define bb_chip_mca_core_irq0_pending_WRITEMASK 0x3FFFF
#define bb_chip_mca_core_irq0_pending_VOLATILEMASK 0x3FFFF
#define bb_chip_mca_core_irq0_pending_RESETMASK 0x3FFFF
#define bb_chip_mca_core_irq0_pending_DEFAULT 0x00000000

#define bb_chip_mca_core_irq0_pending_irq_READMASK 0x3FFFF
#define bb_chip_mca_core_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_mca_core_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_mca_core_irq0_pending_irq_RESETMASK 0x3FFFF
#define bb_chip_mca_core_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_mca_core_irq0_raw_READMASK 0x3FFFF
#define bb_chip_mca_core_irq0_raw_WRITEMASK 0x0
#define bb_chip_mca_core_irq0_raw_VOLATILEMASK 0x3FFFF
#define bb_chip_mca_core_irq0_raw_RESETMASK 0x3FFFF
#define bb_chip_mca_core_irq0_raw_DEFAULT 0x00000000

/*block : mca_channel */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x4 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t auto_reconnect : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t tx_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t lnk_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lnk_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t tx_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t auto_reconnect : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_control0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t rx_rdy : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t tx_rdy : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t lnk_rdy : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t ch_rdy : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ch_rdy : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t lnk_rdy : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t tx_rdy : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t rx_rdy : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_status0;

/*section : link */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t crd_lmt_en : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t pnd_lmt_en : 1;           /* 10 SW=rw HW=ro 0x1 */
            uint32_t u0rectimeout_lmt_en : 1;           /* 9 SW=rw HW=ro 0x1 */
            uint32_t u0ltimeout_lmt_en : 1;           /* 8 SW=rw HW=ro 0x1 */
            
            uint32_t resv7 : 1;
            uint32_t rec_idl_lmt_en : 1;           /* 6 SW=rw HW=ro 0x1 */
            uint32_t rec_idl_rpt_en : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t rec_act_rpt_en : 1;           /* 4 SW=rw HW=ro 0x1 */
            
            uint32_t resv3 : 1;
            uint32_t pol_idl_lmt_en : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pol_idl_rpt_en : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t pol_act_rpt_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pol_act_rpt_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pol_idl_rpt_en : 1;           /* 1 SW=rw HW=ro 0x1 */
            uint32_t pol_idl_lmt_en : 1;           /* 2 SW=rw HW=ro 0x1 */
            
            uint32_t resv3 : 1;
            uint32_t rec_act_rpt_en : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t rec_idl_rpt_en : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t rec_idl_lmt_en : 1;           /* 6 SW=rw HW=ro 0x1 */
            
            uint32_t resv7 : 1;
            uint32_t u0ltimeout_lmt_en : 1;           /* 8 SW=rw HW=ro 0x1 */
            uint32_t u0rectimeout_lmt_en : 1;           /* 9 SW=rw HW=ro 0x1 */
            uint32_t pnd_lmt_en : 1;           /* 10 SW=rw HW=ro 0x1 */
            uint32_t crd_lmt_en : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_link_control0_ltssm;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t force_bad_lcrd : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t force_bad_lgood : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t force_bad_data_nrtry : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t force_bad_data_rtry : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t go2_recovery : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t dp_tx_hdr_ovrd_time : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t measure_latency : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t measure_latency : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_tx_hdr_ovrd_time : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t go2_recovery : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t force_bad_data_rtry : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t force_bad_data_nrtry : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t force_bad_lgood : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t force_bad_lcrd : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_link_control0_test;

typedef struct {
    bb_chip_mca_channel_link_control0_ltssm  ltssm;
    bb_chip_mca_channel_link_control0_test  test;
    
} bb_chip_mca_channel_link_control0;


/*section : status0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t rec_idl : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t rec_act : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t u0 : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t pol_idl : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t pol_act : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t dis : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t inact : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t inact : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t dis : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t pol_act : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t pol_idl : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t u0 : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t rec_act : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t rec_idl : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_link_status0_ltssm;

typedef struct {
    bb_chip_mca_channel_link_status0_ltssm  ltssm;
    
} bb_chip_mca_channel_link_status0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t latency : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t rx_mcup : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t rx_frm : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t tx_mcup : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t tx_frm : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pol_fail : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t u0_to_rec : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t u0_to_rec : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pol_fail : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t tx_frm : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t tx_mcup : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rx_frm : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t rx_mcup : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t latency : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_link_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_link_stats0_u0_to_rec;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_link_stats0_pol_fail;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_link_stats0_tx_frm;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_link_stats0_tx_mcup;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_link_stats0_rx_frm;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_link_stats0_rx_mcup;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_link_stats0_latency;

typedef struct {
    bb_chip_mca_channel_link_stats0_rd2clr_config  rd2clr_config;
    bb_chip_mca_channel_link_stats0_u0_to_rec  u0_to_rec;
    bb_chip_mca_channel_link_stats0_pol_fail  pol_fail;
    bb_chip_mca_channel_link_stats0_tx_frm  tx_frm;
    bb_chip_mca_channel_link_stats0_tx_mcup  tx_mcup;
    bb_chip_mca_channel_link_stats0_rx_frm  rx_frm;
    bb_chip_mca_channel_link_stats0_rx_mcup  rx_mcup;
    bb_chip_mca_channel_link_stats0_latency  latency;
    
} bb_chip_mca_channel_link_stats0;


typedef struct {
    
    union {
        bb_chip_mca_channel_link_control0 s;
        uint8_t filler[0x8];
    } control0;
    
    union {
        bb_chip_mca_channel_link_status0 s;
        uint8_t filler[0x4];
    } status0;
    
    union {
        bb_chip_mca_channel_link_stats0 s;
        uint8_t filler[0x20];
    } stats0;
    
} bb_chip_mca_channel_link;


/*section : tx */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t mcup_pld_max_cycles : 4;           /* 19:16 SW=rw HW=ro 0x8 */
            
            uint32_t resv14 : 2;
            uint32_t force_retry : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t block_retry : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv9 : 3;
            uint32_t bw_src : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t drp_on_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t hys_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_sop : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_on_sop : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t hys_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t flw_ctrl_en : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t bw_src : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv9 : 3;
            uint32_t block_retry : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t force_retry : 1;           /* 13 SW=rw HW=ro 0x0 */
            
            uint32_t resv14 : 2;
            uint32_t mcup_pld_max_cycles : 4;           /* 16:19 SW=rw HW=ro 0x8 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_control0_dp;

typedef union {
    struct {
        uint32_t base_addr : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_tx_control0_rtry_buf;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t hi : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            uint32_t lo : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lo : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t hi : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_control0_fifo_hys;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t hi : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            uint32_t lo : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lo : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t hi : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_control0_bandwidth_limit;

typedef struct {
    bb_chip_mca_channel_tx_control0_dp  dp;
    bb_chip_mca_channel_tx_control0_rtry_buf  rtry_buf;
    bb_chip_mca_channel_tx_control0_fifo_hys  fifo_hys;
    bb_chip_mca_channel_tx_control0_bandwidth_limit  bandwidth_limit;
    
} bb_chip_mca_channel_tx_control0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t bandwidth : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_max_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_eop_err : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_no_sop_err : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_pkt_max_err : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_fifo_full_err : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_drp_pkt : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_rd_drp_pkt : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t dp_nfifo : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t dp_pfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t cmd_fifo : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cmd_fifo : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_pfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t dp_nfifo : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_rd_drp_pkt : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_drp_pkt : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_fifo_full_err : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_pkt_max_err : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_no_sop_err : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_eop_err : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_max_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t bandwidth : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_cmd_fifo;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_dp_pfifo;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_dp_nfifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_dp_fifo_rd_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_dp_fifo_wr_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_dp_fifo_wr_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_dp_fifo_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_dp_fifo_pkt_max_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_dp_grd_no_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_dp_grd_no_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_dp_grd_max_err;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_tx_stats0_bandwidth;

typedef struct {
    bb_chip_mca_channel_tx_stats0_rd2clr_config  rd2clr_config;
    bb_chip_mca_channel_tx_stats0_cmd_fifo  cmd_fifo;
    bb_chip_mca_channel_tx_stats0_dp_pfifo  dp_pfifo;
    bb_chip_mca_channel_tx_stats0_dp_nfifo  dp_nfifo;
    bb_chip_mca_channel_tx_stats0_dp_fifo_rd_drp_pkt  dp_fifo_rd_drp_pkt;
    bb_chip_mca_channel_tx_stats0_dp_fifo_wr_drp_pkt  dp_fifo_wr_drp_pkt;
    bb_chip_mca_channel_tx_stats0_dp_fifo_wr_pkt_err  dp_fifo_wr_pkt_err;
    bb_chip_mca_channel_tx_stats0_dp_fifo_fifo_full_err  dp_fifo_fifo_full_err;
    bb_chip_mca_channel_tx_stats0_dp_fifo_pkt_max_err  dp_fifo_pkt_max_err;
    bb_chip_mca_channel_tx_stats0_dp_grd_no_sop_err  dp_grd_no_sop_err;
    bb_chip_mca_channel_tx_stats0_dp_grd_no_eop_err  dp_grd_no_eop_err;
    bb_chip_mca_channel_tx_stats0_dp_grd_max_err  dp_grd_max_err;
    bb_chip_mca_channel_tx_stats0_bandwidth  bandwidth;
    
} bb_chip_mca_channel_tx_stats0;


typedef struct {
    
    union {
        bb_chip_mca_channel_tx_control0 s;
        uint8_t filler[0x10];
    } control0;
    
    union {
        bb_chip_mca_channel_tx_stats0 s;
        uint8_t filler[0x34];
    } stats0;
    
} bb_chip_mca_channel_tx;


/*section : rx */

/*section : control0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv6 : 26;
            uint32_t hys_en : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t min_lvl_mode : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_sop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv0 : 1;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 1;
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_sop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t min_lvl_mode : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t hys_en : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t resv6 : 26;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_control0_dp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t lmt : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lmt : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_control0_ntfy_mode;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t lvl : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lvl : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_control0_hys_lo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t lvl : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lvl : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_control0_hys_hi;

typedef struct {
    bb_chip_mca_channel_rx_control0_dp  dp;
    bb_chip_mca_channel_rx_control0_ntfy_mode  ntfy_mode;
    bb_chip_mca_channel_rx_control0_hys_lo  hys_lo;
    bb_chip_mca_channel_rx_control0_hys_hi  hys_hi;
    
} bb_chip_mca_channel_rx_control0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t dp_grd_max_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_eop_err : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_no_sop_err : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_pkt_max_err : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_fifo_full_err : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_drp_pkt_wr : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_rd_drp_pkt : 1;           /* 3 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 1;
            uint32_t dp_nfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t dp_pfifo : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_pfifo : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_nfifo : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 1;
            uint32_t dp_fifo_rd_drp_pkt : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_drp_pkt_wr : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_wr_pkt_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_fifo_full_err : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t dp_fifo_pkt_max_err : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_no_sop_err : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_eop_err : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t dp_grd_max_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_dp_pfifo;

typedef union {
    struct {
        uint32_t cnt : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_dp_nfifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_dp_fifo_rd_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_dp_fifo_wr_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_dp_fifo_wr_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_dp_fifo_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_dp_fifo_pkt_max_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_dp_grd_no_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_dp_grd_no_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_rx_stats0_dp_grd_max_err;

typedef struct {
    bb_chip_mca_channel_rx_stats0_rd2clr_config  rd2clr_config;
    bb_chip_mca_channel_rx_stats0_dp_pfifo  dp_pfifo;
    bb_chip_mca_channel_rx_stats0_dp_nfifo  dp_nfifo;
    bb_chip_mca_channel_rx_stats0_dp_fifo_rd_drp_pkt  dp_fifo_rd_drp_pkt;
    bb_chip_mca_channel_rx_stats0_dp_fifo_wr_drp_pkt  dp_fifo_wr_drp_pkt;
    bb_chip_mca_channel_rx_stats0_dp_fifo_wr_pkt_err  dp_fifo_wr_pkt_err;
    bb_chip_mca_channel_rx_stats0_dp_fifo_fifo_full_err  dp_fifo_fifo_full_err;
    bb_chip_mca_channel_rx_stats0_dp_fifo_pkt_max_err  dp_fifo_pkt_max_err;
    bb_chip_mca_channel_rx_stats0_dp_grd_no_sop_err  dp_grd_no_sop_err;
    bb_chip_mca_channel_rx_stats0_dp_grd_no_eop_err  dp_grd_no_eop_err;
    bb_chip_mca_channel_rx_stats0_dp_grd_max_err  dp_grd_max_err;
    
} bb_chip_mca_channel_rx_stats0;


typedef struct {
    
    union {
        bb_chip_mca_channel_rx_control0 s;
        uint8_t filler[0x10];
    } control0;
    
    union {
        bb_chip_mca_channel_rx_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_mca_channel_rx;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t latency_measurement : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t ch_tx_ready : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ch_tx_ready : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t latency_measurement : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t latency_measurement : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_ready : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ch_tx_ready : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t latency_measurement : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t latency_measurement : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t ch_tx_ready : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ch_tx_ready : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t latency_measurement : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t latency_measurement : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ch_tx_ready : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_ready : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t ch_ready : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t ltssm_inact : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t ltssm_dis : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t ltssm_pol_act : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t ltssm_pol_idl : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t ltssm_u0 : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t ltssm_rec_act : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t ltssm_rec_idl : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_fifo_full_err : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_cmd_fifo_full_err : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_no_sop_err : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_no_eop_err : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t ch_tx_grd_max_err : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_fifo_full_err : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_no_sop_err : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_no_eop_err : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_grd_max_err : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t ch_rx_fifo_wr_flow_ctrl : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t latency_measurement : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_irq0_raw;

typedef struct {
    bb_chip_mca_channel_irq0_enable  enable;
    bb_chip_mca_channel_irq0_pending  pending;
    bb_chip_mca_channel_irq0_pending_irq  pending_irq;
    bb_chip_mca_channel_irq0_raw  raw;
    
} bb_chip_mca_channel_irq0;


/*section : test_mode */

/*section : tx */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x2 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x2 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_tx_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t setting : 11;           /* 10:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t setting : 11;           /* 0:10 SW=rw HW=ro 0x0 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_tx_config0_iwg_cnt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t setting : 11;           /* 10:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t setting : 11;           /* 0:10 SW=rw HW=ro 0x1 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_tx_config0_ifg_cnt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t setting : 11;           /* 10:0 SW=rw HW=ro 0xA */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t setting : 11;           /* 0:10 SW=rw HW=ro 0xA */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_tx_config0_pkt_cnt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t setting : 11;           /* 10:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t setting : 11;           /* 0:10 SW=rw HW=ro 0x1 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_tx_config0_pkt_size;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t random : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t throttle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t throttle : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t random : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_tx_config0_ctrl0;

typedef struct {
    bb_chip_mca_channel_test_mode_tx_config0_iwg_cnt  iwg_cnt;
    bb_chip_mca_channel_test_mode_tx_config0_ifg_cnt  ifg_cnt;
    bb_chip_mca_channel_test_mode_tx_config0_pkt_cnt  pkt_cnt;
    bb_chip_mca_channel_test_mode_tx_config0_pkt_size  pkt_size;
    bb_chip_mca_channel_test_mode_tx_config0_ctrl0  ctrl0;
    
} bb_chip_mca_channel_test_mode_tx_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t wait_count : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_count : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_count : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t wait_count : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_tx_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t wait_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_tx_stats0_wait_count;

typedef union {
    struct {
        uint32_t pkt_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_tx_stats0_pkt_count;

typedef struct {
    bb_chip_mca_channel_test_mode_tx_stats0_rd2clr_config  rd2clr_config;
    bb_chip_mca_channel_test_mode_tx_stats0_wait_count  wait_count;
    bb_chip_mca_channel_test_mode_tx_stats0_pkt_count  pkt_count;
    
} bb_chip_mca_channel_test_mode_tx_stats0;


typedef struct {
    bb_chip_mca_channel_test_mode_tx_version  version;
    
    union {
        bb_chip_mca_channel_test_mode_tx_config0 s;
        uint8_t filler[0x14];
    } config0;
    
    union {
        bb_chip_mca_channel_test_mode_tx_stats0 s;
        uint8_t filler[0xC];
    } stats0;
    
} bb_chip_mca_channel_test_mode_tx;


/*section : rx */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_rx_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t en_rxflw : 1;           /* 3 SW=rw HW=ro 0x1 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t enable : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t mode : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t en_rxflw : 1;           /* 3 SW=rw HW=ro 0x1 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_rx_config0_mgen;

typedef struct {
    bb_chip_mca_channel_test_mode_rx_config0_mgen  mgen;
    
} bb_chip_mca_channel_test_mode_rx_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t err_count : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_count : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_count : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t err_count : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_rx_stats0_rd2clr_config;

typedef union {
    struct {
        uint32_t err_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_rx_stats0_err_count;

typedef union {
    struct {
        uint32_t pkt_count : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_mca_channel_test_mode_rx_stats0_pkt_count;

typedef struct {
    bb_chip_mca_channel_test_mode_rx_stats0_rd2clr_config  rd2clr_config;
    bb_chip_mca_channel_test_mode_rx_stats0_err_count  err_count;
    bb_chip_mca_channel_test_mode_rx_stats0_pkt_count  pkt_count;
    
} bb_chip_mca_channel_test_mode_rx_stats0;


typedef struct {
    bb_chip_mca_channel_test_mode_rx_version  version;
    
    union {
        bb_chip_mca_channel_test_mode_rx_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_mca_channel_test_mode_rx_stats0 s;
        uint8_t filler[0xC];
    } stats0;
    
} bb_chip_mca_channel_test_mode_rx;


typedef struct {
    
    union {
        bb_chip_mca_channel_test_mode_tx s;
        uint8_t filler[0x24];
    } tx;
    
    union {
        bb_chip_mca_channel_test_mode_rx s;
        uint8_t filler[0x14];
    } rx;
    
} bb_chip_mca_channel_test_mode;


typedef struct {
    bb_chip_mca_channel_version  version;
    bb_chip_mca_channel_control0  control0;
    bb_chip_mca_channel_status0  status0;
    
    union {
        bb_chip_mca_channel_link s;
        uint8_t filler[0x2C];
    } link;
    
    union {
        bb_chip_mca_channel_tx s;
        uint8_t filler[0x44];
    } tx;
    
    union {
        bb_chip_mca_channel_rx s;
        uint8_t filler[0x3C];
    } rx;
    
    union {
        bb_chip_mca_channel_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
    union {
        bb_chip_mca_channel_test_mode s;
        uint8_t filler[0x38];
    } test_mode;
    
} bb_chip_mca_channel_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_mca_channel_version_READMASK 0xFFFFFF
#define bb_chip_mca_channel_version_WRITEMASK 0x0
#define bb_chip_mca_channel_version_VOLATILEMASK 0x0
#define bb_chip_mca_channel_version_RESETMASK 0xFFFFFF
#define bb_chip_mca_channel_version_DEFAULT 0x00010204

#define bb_chip_mca_channel_control0_READMASK 0x17
#define bb_chip_mca_channel_control0_WRITEMASK 0x17
#define bb_chip_mca_channel_control0_VOLATILEMASK 0x0
#define bb_chip_mca_channel_control0_RESETMASK 0x17
#define bb_chip_mca_channel_control0_DEFAULT 0x00000000

#define bb_chip_mca_channel_status0_READMASK 0xF
#define bb_chip_mca_channel_status0_WRITEMASK 0x0
#define bb_chip_mca_channel_status0_VOLATILEMASK 0xF
#define bb_chip_mca_channel_status0_RESETMASK 0xF
#define bb_chip_mca_channel_status0_DEFAULT 0x00000000

#define bb_chip_mca_channel_link_control0_ltssm_READMASK 0xF77
#define bb_chip_mca_channel_link_control0_ltssm_WRITEMASK 0xF77
#define bb_chip_mca_channel_link_control0_ltssm_VOLATILEMASK 0x0
#define bb_chip_mca_channel_link_control0_ltssm_RESETMASK 0xF77
#define bb_chip_mca_channel_link_control0_ltssm_DEFAULT 0x00000F77

#define bb_chip_mca_channel_link_control0_test_READMASK 0x1F3
#define bb_chip_mca_channel_link_control0_test_WRITEMASK 0x1F3
#define bb_chip_mca_channel_link_control0_test_VOLATILEMASK 0x0
#define bb_chip_mca_channel_link_control0_test_RESETMASK 0x1F3
#define bb_chip_mca_channel_link_control0_test_DEFAULT 0x00000000

#define bb_chip_mca_channel_link_status0_ltssm_READMASK 0x7F
#define bb_chip_mca_channel_link_status0_ltssm_WRITEMASK 0x0
#define bb_chip_mca_channel_link_status0_ltssm_VOLATILEMASK 0x7F
#define bb_chip_mca_channel_link_status0_ltssm_RESETMASK 0x7F
#define bb_chip_mca_channel_link_status0_ltssm_DEFAULT 0x00000000

#define bb_chip_mca_channel_link_stats0_rd2clr_config_READMASK 0x7F
#define bb_chip_mca_channel_link_stats0_rd2clr_config_WRITEMASK 0x7F
#define bb_chip_mca_channel_link_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_mca_channel_link_stats0_rd2clr_config_RESETMASK 0x7F
#define bb_chip_mca_channel_link_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_mca_channel_link_stats0_u0_to_rec_READMASK 0xFFFF
#define bb_chip_mca_channel_link_stats0_u0_to_rec_WRITEMASK 0x0
#define bb_chip_mca_channel_link_stats0_u0_to_rec_VOLATILEMASK 0xFFFF
#define bb_chip_mca_channel_link_stats0_u0_to_rec_RESETMASK 0xFFFF
#define bb_chip_mca_channel_link_stats0_u0_to_rec_DEFAULT 0x00000000

#define bb_chip_mca_channel_link_stats0_pol_fail_READMASK 0xFFFF
#define bb_chip_mca_channel_link_stats0_pol_fail_WRITEMASK 0x0
#define bb_chip_mca_channel_link_stats0_pol_fail_VOLATILEMASK 0xFFFF
#define bb_chip_mca_channel_link_stats0_pol_fail_RESETMASK 0xFFFF
#define bb_chip_mca_channel_link_stats0_pol_fail_DEFAULT 0x00000000

#define bb_chip_mca_channel_link_stats0_tx_frm_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_tx_frm_WRITEMASK 0x0
#define bb_chip_mca_channel_link_stats0_tx_frm_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_tx_frm_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_tx_frm_DEFAULT 0x00000000

#define bb_chip_mca_channel_link_stats0_tx_mcup_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_tx_mcup_WRITEMASK 0x0
#define bb_chip_mca_channel_link_stats0_tx_mcup_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_tx_mcup_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_tx_mcup_DEFAULT 0x00000000

#define bb_chip_mca_channel_link_stats0_rx_frm_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_rx_frm_WRITEMASK 0x0
#define bb_chip_mca_channel_link_stats0_rx_frm_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_rx_frm_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_rx_frm_DEFAULT 0x00000000

#define bb_chip_mca_channel_link_stats0_rx_mcup_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_rx_mcup_WRITEMASK 0x0
#define bb_chip_mca_channel_link_stats0_rx_mcup_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_rx_mcup_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_rx_mcup_DEFAULT 0x00000000

#define bb_chip_mca_channel_link_stats0_latency_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_latency_WRITEMASK 0x0
#define bb_chip_mca_channel_link_stats0_latency_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_latency_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_link_stats0_latency_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_control0_dp_READMASK 0xF3133
#define bb_chip_mca_channel_tx_control0_dp_WRITEMASK 0xF3133
#define bb_chip_mca_channel_tx_control0_dp_VOLATILEMASK 0x0
#define bb_chip_mca_channel_tx_control0_dp_RESETMASK 0xF3133
#define bb_chip_mca_channel_tx_control0_dp_DEFAULT 0x00080000

#define bb_chip_mca_channel_tx_control0_rtry_buf_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_control0_rtry_buf_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_control0_rtry_buf_VOLATILEMASK 0x0
#define bb_chip_mca_channel_tx_control0_rtry_buf_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_control0_rtry_buf_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_control0_fifo_hys_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_control0_fifo_hys_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_control0_fifo_hys_VOLATILEMASK 0x0
#define bb_chip_mca_channel_tx_control0_fifo_hys_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_control0_fifo_hys_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_control0_bandwidth_limit_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_control0_bandwidth_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_control0_bandwidth_limit_VOLATILEMASK 0x0
#define bb_chip_mca_channel_tx_control0_bandwidth_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_control0_bandwidth_limit_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_rd2clr_config_READMASK 0xFFF
#define bb_chip_mca_channel_tx_stats0_rd2clr_config_WRITEMASK 0xFFF
#define bb_chip_mca_channel_tx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_rd2clr_config_RESETMASK 0xFFF
#define bb_chip_mca_channel_tx_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_cmd_fifo_READMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_cmd_fifo_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_cmd_fifo_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_cmd_fifo_RESETMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_cmd_fifo_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_dp_pfifo_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_stats0_dp_pfifo_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_dp_pfifo_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_stats0_dp_pfifo_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_stats0_dp_pfifo_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_dp_nfifo_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_stats0_dp_nfifo_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_dp_nfifo_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_stats0_dp_nfifo_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_stats0_dp_nfifo_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_dp_fifo_rd_drp_pkt_READMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_rd_drp_pkt_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_dp_fifo_rd_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_rd_drp_pkt_RESETMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_rd_drp_pkt_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_drp_pkt_READMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_drp_pkt_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_drp_pkt_RESETMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_drp_pkt_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_pkt_err_READMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_pkt_err_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_pkt_err_RESETMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_pkt_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_dp_fifo_fifo_full_err_READMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_fifo_full_err_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_dp_fifo_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_fifo_full_err_RESETMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_dp_fifo_pkt_max_err_READMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_pkt_max_err_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_dp_fifo_pkt_max_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_pkt_max_err_RESETMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_fifo_pkt_max_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_dp_grd_no_sop_err_READMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_sop_err_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_sop_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_sop_err_RESETMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_sop_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_dp_grd_no_eop_err_READMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_eop_err_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_eop_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_eop_err_RESETMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_eop_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_dp_grd_max_err_READMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_grd_max_err_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_dp_grd_max_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_grd_max_err_RESETMASK 0xFF
#define bb_chip_mca_channel_tx_stats0_dp_grd_max_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_tx_stats0_bandwidth_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_stats0_bandwidth_WRITEMASK 0x0
#define bb_chip_mca_channel_tx_stats0_bandwidth_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_stats0_bandwidth_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_tx_stats0_bandwidth_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_control0_dp_READMASK 0x3E
#define bb_chip_mca_channel_rx_control0_dp_WRITEMASK 0x3E
#define bb_chip_mca_channel_rx_control0_dp_VOLATILEMASK 0x0
#define bb_chip_mca_channel_rx_control0_dp_RESETMASK 0x3E
#define bb_chip_mca_channel_rx_control0_dp_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_control0_ntfy_mode_READMASK 0xFFFF
#define bb_chip_mca_channel_rx_control0_ntfy_mode_WRITEMASK 0xFFFF
#define bb_chip_mca_channel_rx_control0_ntfy_mode_VOLATILEMASK 0x0
#define bb_chip_mca_channel_rx_control0_ntfy_mode_RESETMASK 0xFFFF
#define bb_chip_mca_channel_rx_control0_ntfy_mode_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_control0_hys_lo_READMASK 0xFFFF
#define bb_chip_mca_channel_rx_control0_hys_lo_WRITEMASK 0xFFFF
#define bb_chip_mca_channel_rx_control0_hys_lo_VOLATILEMASK 0x0
#define bb_chip_mca_channel_rx_control0_hys_lo_RESETMASK 0xFFFF
#define bb_chip_mca_channel_rx_control0_hys_lo_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_control0_hys_hi_READMASK 0xFFFF
#define bb_chip_mca_channel_rx_control0_hys_hi_WRITEMASK 0xFFFF
#define bb_chip_mca_channel_rx_control0_hys_hi_VOLATILEMASK 0x0
#define bb_chip_mca_channel_rx_control0_hys_hi_RESETMASK 0xFFFF
#define bb_chip_mca_channel_rx_control0_hys_hi_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_rd2clr_config_READMASK 0x7FB
#define bb_chip_mca_channel_rx_stats0_rd2clr_config_WRITEMASK 0x7FB
#define bb_chip_mca_channel_rx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_rd2clr_config_RESETMASK 0x7FB
#define bb_chip_mca_channel_rx_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_dp_pfifo_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_rx_stats0_dp_pfifo_WRITEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_dp_pfifo_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_rx_stats0_dp_pfifo_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_rx_stats0_dp_pfifo_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_dp_nfifo_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_rx_stats0_dp_nfifo_WRITEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_dp_nfifo_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_rx_stats0_dp_nfifo_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_rx_stats0_dp_nfifo_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_dp_fifo_rd_drp_pkt_READMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_rd_drp_pkt_WRITEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_dp_fifo_rd_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_rd_drp_pkt_RESETMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_rd_drp_pkt_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_drp_pkt_READMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_drp_pkt_WRITEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_drp_pkt_RESETMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_drp_pkt_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_pkt_err_READMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_pkt_err_WRITEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_pkt_err_RESETMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_pkt_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_dp_fifo_fifo_full_err_READMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_fifo_full_err_WRITEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_dp_fifo_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_fifo_full_err_RESETMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_dp_fifo_pkt_max_err_READMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_pkt_max_err_WRITEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_dp_fifo_pkt_max_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_pkt_max_err_RESETMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_fifo_pkt_max_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_dp_grd_no_sop_err_READMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_sop_err_WRITEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_sop_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_sop_err_RESETMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_sop_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_dp_grd_no_eop_err_READMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_eop_err_WRITEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_eop_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_eop_err_RESETMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_eop_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_rx_stats0_dp_grd_max_err_READMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_grd_max_err_WRITEMASK 0x0
#define bb_chip_mca_channel_rx_stats0_dp_grd_max_err_VOLATILEMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_grd_max_err_RESETMASK 0xFF
#define bb_chip_mca_channel_rx_stats0_dp_grd_max_err_DEFAULT 0x00000000

#define bb_chip_mca_channel_irq0_enable_READMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_enable_WRITEMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_mca_channel_irq0_enable_RESETMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_enable_DEFAULT 0x00000000

#define bb_chip_mca_channel_irq0_pending_READMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_pending_WRITEMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_pending_VOLATILEMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_pending_RESETMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_pending_DEFAULT 0x00000000

#define bb_chip_mca_channel_irq0_pending_irq_READMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_mca_channel_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_mca_channel_irq0_pending_irq_RESETMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_mca_channel_irq0_raw_READMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_raw_WRITEMASK 0x0
#define bb_chip_mca_channel_irq0_raw_VOLATILEMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_raw_RESETMASK 0x1FFFFF
#define bb_chip_mca_channel_irq0_raw_DEFAULT 0x00000000

#define bb_chip_mca_channel_test_mode_tx_version_READMASK 0xFFFFFF
#define bb_chip_mca_channel_test_mode_tx_version_WRITEMASK 0x0
#define bb_chip_mca_channel_test_mode_tx_version_VOLATILEMASK 0x0
#define bb_chip_mca_channel_test_mode_tx_version_RESETMASK 0xFFFFFF
#define bb_chip_mca_channel_test_mode_tx_version_DEFAULT 0x00020000

#define bb_chip_mca_channel_test_mode_tx_config0_iwg_cnt_READMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_iwg_cnt_WRITEMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_iwg_cnt_VOLATILEMASK 0x0
#define bb_chip_mca_channel_test_mode_tx_config0_iwg_cnt_RESETMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_iwg_cnt_DEFAULT 0x00000000

#define bb_chip_mca_channel_test_mode_tx_config0_ifg_cnt_READMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_ifg_cnt_WRITEMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_ifg_cnt_VOLATILEMASK 0x0
#define bb_chip_mca_channel_test_mode_tx_config0_ifg_cnt_RESETMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_ifg_cnt_DEFAULT 0x00000001

#define bb_chip_mca_channel_test_mode_tx_config0_pkt_cnt_READMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_cnt_WRITEMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_cnt_VOLATILEMASK 0x0
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_cnt_RESETMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_cnt_DEFAULT 0x0000000A

#define bb_chip_mca_channel_test_mode_tx_config0_pkt_size_READMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_size_WRITEMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_size_VOLATILEMASK 0x0
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_size_RESETMASK 0x7FF
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_size_DEFAULT 0x00000001

#define bb_chip_mca_channel_test_mode_tx_config0_ctrl0_READMASK 0x1F
#define bb_chip_mca_channel_test_mode_tx_config0_ctrl0_WRITEMASK 0x1F
#define bb_chip_mca_channel_test_mode_tx_config0_ctrl0_VOLATILEMASK 0x0
#define bb_chip_mca_channel_test_mode_tx_config0_ctrl0_RESETMASK 0x1F
#define bb_chip_mca_channel_test_mode_tx_config0_ctrl0_DEFAULT 0x00000000

#define bb_chip_mca_channel_test_mode_tx_stats0_rd2clr_config_READMASK 0x3
#define bb_chip_mca_channel_test_mode_tx_stats0_rd2clr_config_WRITEMASK 0x3
#define bb_chip_mca_channel_test_mode_tx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_mca_channel_test_mode_tx_stats0_rd2clr_config_RESETMASK 0x3
#define bb_chip_mca_channel_test_mode_tx_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_mca_channel_test_mode_tx_stats0_wait_count_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_tx_stats0_wait_count_WRITEMASK 0x0
#define bb_chip_mca_channel_test_mode_tx_stats0_wait_count_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_tx_stats0_wait_count_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_tx_stats0_wait_count_DEFAULT 0x00000000

#define bb_chip_mca_channel_test_mode_tx_stats0_pkt_count_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_tx_stats0_pkt_count_WRITEMASK 0x0
#define bb_chip_mca_channel_test_mode_tx_stats0_pkt_count_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_tx_stats0_pkt_count_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_tx_stats0_pkt_count_DEFAULT 0x00000000

#define bb_chip_mca_channel_test_mode_rx_version_READMASK 0xFFFFFF
#define bb_chip_mca_channel_test_mode_rx_version_WRITEMASK 0x0
#define bb_chip_mca_channel_test_mode_rx_version_VOLATILEMASK 0x0
#define bb_chip_mca_channel_test_mode_rx_version_RESETMASK 0xFFFFFF
#define bb_chip_mca_channel_test_mode_rx_version_DEFAULT 0x00010000

#define bb_chip_mca_channel_test_mode_rx_config0_mgen_READMASK 0xF
#define bb_chip_mca_channel_test_mode_rx_config0_mgen_WRITEMASK 0xF
#define bb_chip_mca_channel_test_mode_rx_config0_mgen_VOLATILEMASK 0x0
#define bb_chip_mca_channel_test_mode_rx_config0_mgen_RESETMASK 0xF
#define bb_chip_mca_channel_test_mode_rx_config0_mgen_DEFAULT 0x00000008

#define bb_chip_mca_channel_test_mode_rx_stats0_rd2clr_config_READMASK 0x3
#define bb_chip_mca_channel_test_mode_rx_stats0_rd2clr_config_WRITEMASK 0x3
#define bb_chip_mca_channel_test_mode_rx_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_mca_channel_test_mode_rx_stats0_rd2clr_config_RESETMASK 0x3
#define bb_chip_mca_channel_test_mode_rx_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_mca_channel_test_mode_rx_stats0_err_count_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_rx_stats0_err_count_WRITEMASK 0x0
#define bb_chip_mca_channel_test_mode_rx_stats0_err_count_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_rx_stats0_err_count_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_rx_stats0_err_count_DEFAULT 0x00000000

#define bb_chip_mca_channel_test_mode_rx_stats0_pkt_count_READMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_rx_stats0_pkt_count_WRITEMASK 0x0
#define bb_chip_mca_channel_test_mode_rx_stats0_pkt_count_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_rx_stats0_pkt_count_RESETMASK 0xFFFFFFFF
#define bb_chip_mca_channel_test_mode_rx_stats0_pkt_count_DEFAULT 0x00000000

/*block : dp_sink_main */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x8 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x9 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x9 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x8 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t debug_msa_en : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv18 : 13;
            uint32_t tu_measured : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t tico_ctrl_rst : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t vid_color_format : 2;           /* 15:14 SW=ro HW=wo 0x0 */
            
            uint32_t resv11 : 3;
            uint32_t vid_bit_per_component : 3;           /* 10:8 SW=ro HW=wo 0x0 */
            uint32_t vid_stream_extractor_en : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t stream_extractor_en : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t apb_to_axi_mode_select : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t enh_frm_en : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t lane_bit_rate : 2;           /* 3:2 SW=rw HW=ro 0x2 */
            uint32_t lane_num : 2;           /* 1:0 SW=rw HW=ro 0x3 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lane_num : 2;           /* 0:1 SW=rw HW=ro 0x3 */
            uint32_t lane_bit_rate : 2;           /* 2:3 SW=rw HW=ro 0x2 */
            uint32_t enh_frm_en : 1;           /* 4 SW=rw HW=ro 0x1 */
            uint32_t apb_to_axi_mode_select : 1;           /* 5 SW=rw HW=ro 0x1 */
            uint32_t stream_extractor_en : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t vid_stream_extractor_en : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t vid_bit_per_component : 3;           /* 8:10 SW=ro HW=wo 0x0 */
            
            uint32_t resv11 : 3;
            uint32_t vid_color_format : 2;           /* 14:15 SW=ro HW=wo 0x0 */
            uint32_t tico_ctrl_rst : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t tu_measured : 1;           /* 17 SW=ro HW=wo 0x0 */
            
            uint32_t resv18 : 13;
            uint32_t debug_msa_en : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_configuration;

/*section : aligner */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t tps3_n_tps2 : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t align_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t align_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t tps3_n_tps2 : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_aligner_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t lanes_not_aligned : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t bond_align_done : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t bond_align_done : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t lanes_not_aligned : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_aligner_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t lanes_not_aligned_cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t lanes_not_aligned_cnt_rst : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t lanes_align_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lanes_align_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t lanes_not_aligned_cnt_rst : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t lanes_not_aligned_cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_aligner_stats;

/*section : debug */

typedef union {
    struct {
        uint32_t state_dbg : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_dp_sink_main_aligner_debug_stats1;

typedef union {
    struct {
        uint32_t fifo_rd_en_dbg : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_dp_sink_main_aligner_debug_stats2;

typedef union {
    struct {
        uint32_t com_det_dbg : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_dp_sink_main_aligner_debug_stats3;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t bond_align_debug_stats : 24;           /* 23:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t bond_align_debug_stats : 24;           /* 0:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_aligner_debug_stats4;

typedef struct {
    bb_chip_dp_sink_main_aligner_debug_stats1  stats1;
    bb_chip_dp_sink_main_aligner_debug_stats2  stats2;
    bb_chip_dp_sink_main_aligner_debug_stats3  stats3;
    bb_chip_dp_sink_main_aligner_debug_stats4  stats4;
    
} bb_chip_dp_sink_main_aligner_debug;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t overflow : 4;           /* 15:12 SW=ro HW=wo 0x0 */
            uint32_t underflow : 4;           /* 11:8 SW=ro HW=wo 0x0 */
            uint32_t full : 4;           /* 7:4 SW=ro HW=wo 0x0 */
            uint32_t empty : 4;           /* 3:0 SW=ro HW=wo 0xF */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t empty : 4;           /* 0:3 SW=ro HW=wo 0xF */
            uint32_t full : 4;           /* 4:7 SW=ro HW=wo 0x0 */
            uint32_t underflow : 4;           /* 8:11 SW=ro HW=wo 0x0 */
            uint32_t overflow : 4;           /* 12:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_aligner_fifo_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_aligner_fifo_config;

typedef struct {
    bb_chip_dp_sink_main_aligner_control  control;
    bb_chip_dp_sink_main_aligner_status  status;
    bb_chip_dp_sink_main_aligner_stats  stats;
    
    union {
        bb_chip_dp_sink_main_aligner_debug s;
        uint8_t filler[0x10];
    } debug;
    bb_chip_dp_sink_main_aligner_fifo_status  fifo_status;
    bb_chip_dp_sink_main_aligner_fifo_config  fifo_config;
    
} bb_chip_dp_sink_main_aligner;


/*section : stats */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t lanes_with_8b10b_nit_err_post_cr : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t lanes_with_8b10b_dis_err_post_cr : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lanes_with_8b10b_dis_err_post_cr : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t lanes_with_8b10b_nit_err_post_cr : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats_flag_8b10b;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t lane3_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t lane2_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lane1_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lane0_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t lanes_8b10b_dis_err_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lanes_8b10b_dis_err_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t lane0_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lane1_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lane2_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lane3_8b10b_dis_err_post_cr_cnt_rst : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t lane3_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t lane2_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lane1_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lane0_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 8 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t lanes_8b10b_nit_err_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lanes_8b10b_nit_err_det_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t lane0_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lane1_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lane2_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lane3_8b10b_nit_err_post_cr_cnt_rst : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t lane3_8b10b_dis_err_post_cr_cnt : 8;           /* 31:24 SW=ro HW=wo 0x0 */
            uint32_t lane2_8b10b_dis_err_post_cr_cnt : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t lane1_8b10b_dis_err_post_cr_cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t lane0_8b10b_dis_err_post_cr_cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lane0_8b10b_dis_err_post_cr_cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t lane1_8b10b_dis_err_post_cr_cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t lane2_8b10b_dis_err_post_cr_cnt : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t lane3_8b10b_dis_err_post_cr_cnt : 8;           /* 24:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats_cnt_8b10b_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t lane3_8b10b_nit_err_post_cr_cnt : 8;           /* 31:24 SW=ro HW=wo 0x0 */
            uint32_t lane2_8b10b_nit_err_post_cr_cnt : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t lane1_8b10b_nit_err_post_cr_cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t lane0_8b10b_nit_err_post_cr_cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lane0_8b10b_nit_err_post_cr_cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t lane1_8b10b_nit_err_post_cr_cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t lane2_8b10b_nit_err_post_cr_cnt : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t lane3_8b10b_nit_err_post_cr_cnt : 8;           /* 24:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats_cnt_8b10b_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t dp_gt_rxbyterealign_cnt_rst : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t dp_gt_rxbyterealign_cnt_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_gt_rxbyterealign_cnt_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dp_gt_rxbyterealign_cnt_rst : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats_cnt_en_rst_gtp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t dp_gt3_rxbyterealign_cnt : 8;           /* 31:24 SW=ro HW=wo 0x0 */
            uint32_t dp_gt2_rxbyterealign_cnt : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t dp_gt1_rxbyterealign_cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t dp_gt0_rxbyterealign_cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_gt0_rxbyterealign_cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t dp_gt1_rxbyterealign_cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t dp_gt2_rxbyterealign_cnt : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t dp_gt3_rxbyterealign_cnt : 8;           /* 24:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats_cnt_gtp;

typedef struct {
    bb_chip_dp_sink_main_stats_flag_8b10b  flag_8b10b;
    bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_0  cnt_en_rst_8b10b_0;
    bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_1  cnt_en_rst_8b10b_1;
    bb_chip_dp_sink_main_stats_cnt_8b10b_0  cnt_8b10b_0;
    bb_chip_dp_sink_main_stats_cnt_8b10b_1  cnt_8b10b_1;
    bb_chip_dp_sink_main_stats_cnt_en_rst_gtp  cnt_en_rst_gtp;
    bb_chip_dp_sink_main_stats_cnt_gtp  cnt_gtp;
    
} bb_chip_dp_sink_main_stats;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_descrambler;

/*section : stream_extractor */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv25 : 7;
            uint32_t sdp_en : 1;           /* 24 SW=rw HW=ro 0x0 */
            
            uint32_t resv18 : 6;
            uint32_t drop_sdp_ptp_pkt : 1;           /* 17 SW=rw HW=ro 0x1 */
            uint32_t drop_cs_ptp_pkt : 1;           /* 16 SW=rw HW=ro 0x1 */
            
            uint32_t resv12 : 4;
            uint32_t cs_pkt_length : 12;           /* 11:0 SW=rw HW=ro 0x168 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cs_pkt_length : 12;           /* 0:11 SW=rw HW=ro 0x168 */
            
            uint32_t resv12 : 4;
            uint32_t drop_cs_ptp_pkt : 1;           /* 16 SW=rw HW=ro 0x1 */
            uint32_t drop_sdp_ptp_pkt : 1;           /* 17 SW=rw HW=ro 0x1 */
            
            uint32_t resv18 : 6;
            uint32_t sdp_en : 1;           /* 24 SW=rw HW=ro 0x0 */
            uint32_t resv25 : 7;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_cfg;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t encoder_program_done : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t tu_size : 8;           /* 7:0 SW=ro HW=wo 0x40 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tu_size : 8;           /* 0:7 SW=ro HW=wo 0x40 */
            uint32_t encoder_program_done : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_alu;

/*section : msa */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t mvid : 24;           /* 23:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mvid : 24;           /* 0:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_msa_mvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t nvid : 24;           /* 23:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nvid : 24;           /* 0:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_msa_nvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t total : 16;           /* 31:16 SW=ro HW=wo 0x0 */
            uint32_t start : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t total : 16;           /* 16:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_msa_horizontal_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t width : 16;           /* 31:16 SW=ro HW=wo 0x0 */
            uint32_t polarity : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t sync_width : 15;           /* 14:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sync_width : 15;           /* 0:14 SW=ro HW=wo 0x0 */
            uint32_t polarity : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t width : 16;           /* 16:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_msa_horizontal_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t total : 16;           /* 31:16 SW=ro HW=wo 0x0 */
            uint32_t start : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t total : 16;           /* 16:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_msa_vertical_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t height : 16;           /* 31:16 SW=ro HW=wo 0x0 */
            uint32_t polarity : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t sync_width : 15;           /* 14:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sync_width : 15;           /* 0:14 SW=ro HW=wo 0x0 */
            uint32_t polarity : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t height : 16;           /* 16:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_msa_vertical_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t y_only : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t stereo : 2;           /* 10:9 SW=ro HW=wo 0x0 */
            uint32_t int_total : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t color : 7;           /* 7:1 SW=ro HW=wo 0x0 */
            uint32_t clk_sync : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t clk_sync : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t color : 7;           /* 1:7 SW=ro HW=wo 0x0 */
            uint32_t int_total : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t stereo : 2;           /* 9:10 SW=ro HW=wo 0x0 */
            uint32_t y_only : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_msa_misc;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t msa_majority_fail : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t msa_majority_fail : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_msa_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t count : 24;           /* 31:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t count_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t count_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t count : 24;           /* 8:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_msa_fps;

typedef struct {
    bb_chip_dp_sink_main_stream_extractor_msa_mvid  mvid;
    bb_chip_dp_sink_main_stream_extractor_msa_nvid  nvid;
    bb_chip_dp_sink_main_stream_extractor_msa_horizontal_0  horizontal_0;
    bb_chip_dp_sink_main_stream_extractor_msa_horizontal_1  horizontal_1;
    bb_chip_dp_sink_main_stream_extractor_msa_vertical_0  vertical_0;
    bb_chip_dp_sink_main_stream_extractor_msa_vertical_1  vertical_1;
    bb_chip_dp_sink_main_stream_extractor_msa_misc  misc;
    bb_chip_dp_sink_main_stream_extractor_msa_status  status;
    bb_chip_dp_sink_main_stream_extractor_msa_fps  fps;
    
} bb_chip_dp_sink_main_stream_extractor_msa;


/*section : debug_msa */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t mvid : 24;           /* 23:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mvid : 24;           /* 0:23 SW=rw HW=ro 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_debug_msa_mvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t nvid : 24;           /* 23:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nvid : 24;           /* 0:23 SW=rw HW=ro 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_debug_msa_nvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t total : 16;           /* 31:16 SW=rw HW=ro 0xFA0 */
            uint32_t start : 16;           /* 15:0 SW=rw HW=ro 0x36 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 16;           /* 0:15 SW=rw HW=ro 0x36 */
            uint32_t total : 16;           /* 16:31 SW=rw HW=ro 0xFA0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t width : 16;           /* 31:16 SW=rw HW=ro 0xF00 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t sync_width : 15;           /* 14:0 SW=rw HW=ro 0x20 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sync_width : 15;           /* 0:14 SW=rw HW=ro 0x20 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t width : 16;           /* 16:31 SW=rw HW=ro 0xF00 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t total : 16;           /* 31:16 SW=rw HW=ro 0x8AE */
            uint32_t start : 16;           /* 15:0 SW=rw HW=ro 0x50 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 16;           /* 0:15 SW=rw HW=ro 0x50 */
            uint32_t total : 16;           /* 16:31 SW=rw HW=ro 0x8AE */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t height : 16;           /* 31:16 SW=rw HW=ro 0x870 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t sync_width : 15;           /* 14:0 SW=rw HW=ro 0x5 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sync_width : 15;           /* 0:14 SW=rw HW=ro 0x5 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t height : 16;           /* 16:31 SW=rw HW=ro 0x870 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t y_only : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t stereo : 2;           /* 10:9 SW=rw HW=ro 0x0 */
            uint32_t int_total : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t color : 7;           /* 7:1 SW=rw HW=ro 0x10 */
            uint32_t clk_sync : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t clk_sync : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t color : 7;           /* 1:7 SW=rw HW=ro 0x10 */
            uint32_t int_total : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t stereo : 2;           /* 9:10 SW=rw HW=ro 0x0 */
            uint32_t y_only : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_debug_msa_misc;

typedef struct {
    bb_chip_dp_sink_main_stream_extractor_debug_msa_mvid  mvid;
    bb_chip_dp_sink_main_stream_extractor_debug_msa_nvid  nvid;
    bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_0  horizontal_0;
    bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_1  horizontal_1;
    bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_0  vertical_0;
    bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_1  vertical_1;
    bb_chip_dp_sink_main_stream_extractor_debug_msa_misc  misc;
    
} bb_chip_dp_sink_main_stream_extractor_debug_msa;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t state_vid_status : 3;           /* 10:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t state_ptp : 2;           /* 1:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t state_ptp : 2;           /* 0:1 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t state_vid_status : 3;           /* 8:10 SW=ro HW=wo 0x0 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_fsm_status;

/*section : vbd */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t vbid : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t maud : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t mvid : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mvid : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t maud : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t vbid : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_vbd_vbid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t vbd_majority_fail : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vbd_majority_fail : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_vbd_status;

typedef struct {
    bb_chip_dp_sink_main_stream_extractor_vbd_vbid  vbid;
    bb_chip_dp_sink_main_stream_extractor_vbd_status  status;
    
} bb_chip_dp_sink_main_stream_extractor_vbd;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_vid_fifo_config;

/*section : sdp */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_sdp_fifo_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t depth : 9;           /* 8:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 9;           /* 0:8 SW=ro HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_sdp_fifo_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t depth : 7;           /* 6:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 7;           /* 0:6 SW=ro HW=wo 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t ss_se_same_cycle_byte_num : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ss_se_same_cycle_byte_num : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_sdp_debug;

typedef struct {
    bb_chip_dp_sink_main_stream_extractor_sdp_fifo_status  fifo_status;
    bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_status  tag_fifo_status;
    bb_chip_dp_sink_main_stream_extractor_sdp_fifo_config  fifo_config;
    bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_config  tag_fifo_config;
    bb_chip_dp_sink_main_stream_extractor_sdp_debug  debug;
    
} bb_chip_dp_sink_main_stream_extractor_sdp;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t en : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv24 : 7;
            uint32_t blue : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t green : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t red : 8;           /* 7:0 SW=rw HW=ro 0xFF */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t red : 8;           /* 0:7 SW=rw HW=ro 0xFF */
            uint32_t green : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t blue : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            
            uint32_t resv24 : 7;
            uint32_t en : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_pixgen;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t idle_pattern_cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t idle_pattern_cnt_rst : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t idle_pattern_cnt_rst : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t idle_pattern_cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stream_extractor_debug;

typedef struct {
    bb_chip_dp_sink_main_stream_extractor_cfg  cfg;
    bb_chip_dp_sink_main_stream_extractor_alu  alu;
    
    union {
        bb_chip_dp_sink_main_stream_extractor_msa s;
        uint8_t filler[0x24];
    } msa;
    
    union {
        bb_chip_dp_sink_main_stream_extractor_debug_msa s;
        uint8_t filler[0x1C];
    } debug_msa;
    bb_chip_dp_sink_main_stream_extractor_fsm_status  fsm_status;
    
    union {
        bb_chip_dp_sink_main_stream_extractor_vbd s;
        uint8_t filler[0x8];
    } vbd;
    bb_chip_dp_sink_main_stream_extractor_vid_fifo_config  vid_fifo_config;
    
    union {
        bb_chip_dp_sink_main_stream_extractor_sdp s;
        uint8_t filler[0x14];
    } sdp;
    bb_chip_dp_sink_main_stream_extractor_pixgen  pixgen;
    bb_chip_dp_sink_main_stream_extractor_debug  debug;
    
} bb_chip_dp_sink_main_stream_extractor;


/*section : encoder_vfr */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t handshake : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t handshake : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_encoder_vfr_handshake;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t last_early : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t last_late : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t first : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t first : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t last_late : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t last_early : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_encoder_vfr_pixel;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t last_early : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t last_late : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t first : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t first : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t last_late : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t last_early : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_encoder_vfr_line;

typedef struct {
    bb_chip_dp_sink_main_encoder_vfr_handshake  handshake;
    bb_chip_dp_sink_main_encoder_vfr_pixel  pixel;
    bb_chip_dp_sink_main_encoder_vfr_line  line;
    
} bb_chip_dp_sink_main_encoder_vfr;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv23 : 9;
            uint32_t msa_majority_fail : 1;           /* 22 SW=rw HW=ro 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_sr_full : 1;           /* 20 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_level_watermark : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_level : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_underflow : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_overflow : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_empty : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_full : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_sr_full : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_level_watermark : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_level : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_underflow : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_overflow : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_empty : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_full : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_sr_full : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_level_watermark : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_level : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_underflow : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_overflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_empty : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_full : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_full : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_empty : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_overflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_underflow : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_level : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_fifo_level_watermark : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t vid_c0_sr_full : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_full : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_empty : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_overflow : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_underflow : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_level : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_fifo_level_watermark : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t vid_c1_sr_full : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_full : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_empty : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_overflow : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_underflow : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_level : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_fifo_level_watermark : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t vid_c2_sr_full : 1;           /* 20 SW=rw HW=ro 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t msa_majority_fail : 1;           /* 22 SW=rw HW=ro 0x0 */
            uint32_t resv23 : 9;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c0_fifo_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c0_fifo_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c0_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c0_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_level : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_level : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c0_fifo_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_fifo_level_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_fifo_level_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c0_sr_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c0_sr_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c0_sr_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c1_fifo_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c1_fifo_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c1_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c1_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_level : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_level : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c1_fifo_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_fifo_level_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_fifo_level_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c1_sr_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c1_sr_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c1_sr_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c2_fifo_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c2_fifo_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c2_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c2_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_level : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_level : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c2_fifo_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_fifo_level_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_fifo_level_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vid_c2_sr_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vid_c2_sr_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vid_c2_sr_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t vbd_majority_fail : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t vbd_majority_fail : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_vbd_majority_fail;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t msa_majority_fail : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t msa_majority_fail : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats0_msa_majority_fail;

typedef struct {
    bb_chip_dp_sink_main_stats0_rd2clr_config  rd2clr_config;
    bb_chip_dp_sink_main_stats0_vid_c0_fifo_full  vid_c0_fifo_full;
    bb_chip_dp_sink_main_stats0_vid_c0_fifo_empty  vid_c0_fifo_empty;
    bb_chip_dp_sink_main_stats0_vid_c0_fifo_overflow  vid_c0_fifo_overflow;
    bb_chip_dp_sink_main_stats0_vid_c0_fifo_underflow  vid_c0_fifo_underflow;
    bb_chip_dp_sink_main_stats0_vid_c0_fifo_level  vid_c0_fifo_level;
    bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_watermark  vid_c0_fifo_level_watermark;
    bb_chip_dp_sink_main_stats0_vid_c0_sr_full  vid_c0_sr_full;
    bb_chip_dp_sink_main_stats0_vid_c1_fifo_full  vid_c1_fifo_full;
    bb_chip_dp_sink_main_stats0_vid_c1_fifo_empty  vid_c1_fifo_empty;
    bb_chip_dp_sink_main_stats0_vid_c1_fifo_overflow  vid_c1_fifo_overflow;
    bb_chip_dp_sink_main_stats0_vid_c1_fifo_underflow  vid_c1_fifo_underflow;
    bb_chip_dp_sink_main_stats0_vid_c1_fifo_level  vid_c1_fifo_level;
    bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_watermark  vid_c1_fifo_level_watermark;
    bb_chip_dp_sink_main_stats0_vid_c1_sr_full  vid_c1_sr_full;
    bb_chip_dp_sink_main_stats0_vid_c2_fifo_full  vid_c2_fifo_full;
    bb_chip_dp_sink_main_stats0_vid_c2_fifo_empty  vid_c2_fifo_empty;
    bb_chip_dp_sink_main_stats0_vid_c2_fifo_overflow  vid_c2_fifo_overflow;
    bb_chip_dp_sink_main_stats0_vid_c2_fifo_underflow  vid_c2_fifo_underflow;
    bb_chip_dp_sink_main_stats0_vid_c2_fifo_level  vid_c2_fifo_level;
    bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_watermark  vid_c2_fifo_level_watermark;
    bb_chip_dp_sink_main_stats0_vid_c2_sr_full  vid_c2_sr_full;
    bb_chip_dp_sink_main_stats0_vbd_majority_fail  vbd_majority_fail;
    bb_chip_dp_sink_main_stats0_msa_majority_fail  msa_majority_fail;
    
} bb_chip_dp_sink_main_stats0;


/*section : stats1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv15 : 17;
            uint32_t sdp_tag_fifo_level_watermark : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_level : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_empty : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_full : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_level_watermark : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_level : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_empty : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_full : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t sdp_ss_se_same_cycle : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t sdp_pkt_sent_cnt_watermark : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t sdp_pkt_sent_cnt : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_pkt_sent_cnt : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t sdp_pkt_sent_cnt_watermark : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t sdp_ss_se_same_cycle : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_full : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_empty : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_level : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t sdp_fifo_level_watermark : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_full : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_empty : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_level : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t sdp_tag_fifo_level_watermark : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t resv15 : 17;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_pkt_sent_cnt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_pkt_sent_cnt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_pkt_sent_cnt_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_pkt_sent_cnt_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_ss_se_same_cycle : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_ss_se_same_cycle : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_ss_se_same_cycle;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_fifo_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_fifo_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_fifo_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_fifo_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t sdp_fifo_level : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_level : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_fifo_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t sdp_fifo_level_watermark : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_fifo_level_watermark : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_fifo_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_tag_fifo_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_tag_fifo_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_tag_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_tag_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_level : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_level : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_tag_fifo_level_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_tag_fifo_level_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_watermark;

typedef struct {
    bb_chip_dp_sink_main_stats1_rd2clr_config  rd2clr_config;
    bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt  sdp_pkt_sent_cnt;
    bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_watermark  sdp_pkt_sent_cnt_watermark;
    bb_chip_dp_sink_main_stats1_sdp_ss_se_same_cycle  sdp_ss_se_same_cycle;
    bb_chip_dp_sink_main_stats1_sdp_fifo_full  sdp_fifo_full;
    bb_chip_dp_sink_main_stats1_sdp_fifo_empty  sdp_fifo_empty;
    bb_chip_dp_sink_main_stats1_sdp_fifo_overflow  sdp_fifo_overflow;
    bb_chip_dp_sink_main_stats1_sdp_fifo_underflow  sdp_fifo_underflow;
    bb_chip_dp_sink_main_stats1_sdp_fifo_level  sdp_fifo_level;
    bb_chip_dp_sink_main_stats1_sdp_fifo_level_watermark  sdp_fifo_level_watermark;
    bb_chip_dp_sink_main_stats1_sdp_tag_fifo_full  sdp_tag_fifo_full;
    bb_chip_dp_sink_main_stats1_sdp_tag_fifo_empty  sdp_tag_fifo_empty;
    bb_chip_dp_sink_main_stats1_sdp_tag_fifo_overflow  sdp_tag_fifo_overflow;
    bb_chip_dp_sink_main_stats1_sdp_tag_fifo_underflow  sdp_tag_fifo_underflow;
    bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level  sdp_tag_fifo_level;
    bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_watermark  sdp_tag_fifo_level_watermark;
    
} bb_chip_dp_sink_main_stats1;


/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t audiomute : 1;           /* 31 SW=rw HW=na 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=rw HW=na 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=rw HW=na 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=rw HW=na 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_not_aligned : 1;           /* 25 SW=rw HW=na 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=rw HW=na 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t msa_majority_fail : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t tu_size_rdy : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tu_size_rdy : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t msa_majority_fail : 1;           /* 2 SW=rw HW=na 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t lanes_not_aligned : 1;           /* 25 SW=rw HW=na 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=rw HW=na 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=rw HW=na 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=rw HW=na 0x0 */
            uint32_t audiomute : 1;           /* 31 SW=rw HW=na 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t audiomute : 1;           /* 31 SW=r/w1c HW=wo 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=r/w1c HW=wo 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_not_aligned : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t msa_majority_fail : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t tu_size_rdy : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tu_size_rdy : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t msa_majority_fail : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t lanes_not_aligned : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=r/w1c HW=wo 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=r/w1c HW=wo 0x0 */
            uint32_t audiomute : 1;           /* 31 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t audiomute : 1;           /* 31 SW=ro HW=na 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=ro HW=na 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=ro HW=na 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=ro HW=na 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_not_aligned : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=ro HW=na 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t msa_majority_fail : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t tu_size_rdy : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tu_size_rdy : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t msa_majority_fail : 1;           /* 2 SW=ro HW=na 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t lanes_not_aligned : 1;           /* 25 SW=ro HW=na 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=ro HW=na 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=ro HW=na 0x0 */
            uint32_t audiomute : 1;           /* 31 SW=ro HW=na 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t audiomute : 1;           /* 31 SW=ro HW=wo 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=ro HW=wo 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_not_aligned : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t msa_majority_fail : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t tu_size_rdy : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tu_size_rdy : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t vbd_majority_fail : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t msa_majority_fail : 1;           /* 2 SW=ro HW=wo 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t sdp_fifo_overflow : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t sdp_fifo_underflow : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t sdp_tag_fifo_overflow : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t sdp_tag_fifo_underflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow0 : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow1 : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow2 : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_overflow3 : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow0 : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow1 : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow2 : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t aligner_fifo_underflow3 : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow0 : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow1 : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow2 : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_overflow3 : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow0 : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow1 : 1;           /* 21 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow2 : 1;           /* 22 SW=ro HW=wo 0x0 */
            uint32_t stream_extractor_vid_fifo_underflow3 : 1;           /* 23 SW=ro HW=wo 0x0 */
            uint32_t bond_align_done : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t lanes_not_aligned : 1;           /* 25 SW=ro HW=wo 0x0 */
            
            uint32_t resv26 : 1;
            uint32_t lanes_with_8b10b_err_post_cr : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t first_idle_pattern : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t dp_gt_rxbyterealign : 1;           /* 29 SW=ro HW=wo 0x0 */
            uint32_t novideostream : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t audiomute : 1;           /* 31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_main_irq_raw;

typedef struct {
    bb_chip_dp_sink_main_irq_enable  enable;
    bb_chip_dp_sink_main_irq_pending  pending;
    bb_chip_dp_sink_main_irq_pending_irq  pending_irq;
    bb_chip_dp_sink_main_irq_raw  raw;
    
} bb_chip_dp_sink_main_irq;


typedef struct {
    bb_chip_dp_sink_main_version  version;
    bb_chip_dp_sink_main_configuration  configuration;
    
    union {
        bb_chip_dp_sink_main_aligner s;
        uint8_t filler[0x24];
    } aligner;
    
    union {
        bb_chip_dp_sink_main_stats s;
        uint8_t filler[0x1C];
    } stats;
    bb_chip_dp_sink_main_descrambler  descrambler;
    
    union {
        bb_chip_dp_sink_main_stream_extractor s;
        uint8_t filler[0x74];
    } stream_extractor;
    
    union {
        bb_chip_dp_sink_main_encoder_vfr s;
        uint8_t filler[0xC];
    } encoder_vfr;
    
    union {
        bb_chip_dp_sink_main_stats0 s;
        uint8_t filler[0x60];
    } stats0;
    
    union {
        bb_chip_dp_sink_main_stats1 s;
        uint8_t filler[0x40];
    } stats1;
    
    union {
        bb_chip_dp_sink_main_irq s;
        uint8_t filler[0x10];
    } irq;
    
} bb_chip_dp_sink_main_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_dp_sink_main_version_READMASK 0xFFFFFF
#define bb_chip_dp_sink_main_version_WRITEMASK 0x0
#define bb_chip_dp_sink_main_version_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_version_RESETMASK 0xFFFFFF
#define bb_chip_dp_sink_main_version_DEFAULT 0x00080900

#define bb_chip_dp_sink_main_configuration_READMASK 0x8003C7FF
#define bb_chip_dp_sink_main_configuration_WRITEMASK 0x800000FF
#define bb_chip_dp_sink_main_configuration_VOLATILEMASK 0x3C700
#define bb_chip_dp_sink_main_configuration_RESETMASK 0x8003C7FF
#define bb_chip_dp_sink_main_configuration_DEFAULT 0x0000003B

#define bb_chip_dp_sink_main_aligner_control_READMASK 0x3
#define bb_chip_dp_sink_main_aligner_control_WRITEMASK 0x3
#define bb_chip_dp_sink_main_aligner_control_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_aligner_control_RESETMASK 0x3
#define bb_chip_dp_sink_main_aligner_control_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_aligner_status_READMASK 0x3
#define bb_chip_dp_sink_main_aligner_status_WRITEMASK 0x0
#define bb_chip_dp_sink_main_aligner_status_VOLATILEMASK 0x3
#define bb_chip_dp_sink_main_aligner_status_RESETMASK 0x3
#define bb_chip_dp_sink_main_aligner_status_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_aligner_stats_READMASK 0xFF03
#define bb_chip_dp_sink_main_aligner_stats_WRITEMASK 0x3
#define bb_chip_dp_sink_main_aligner_stats_VOLATILEMASK 0xFF00
#define bb_chip_dp_sink_main_aligner_stats_RESETMASK 0xFF03
#define bb_chip_dp_sink_main_aligner_stats_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_aligner_debug_stats1_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats1_WRITEMASK 0x0
#define bb_chip_dp_sink_main_aligner_debug_stats1_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats1_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_aligner_debug_stats2_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats2_WRITEMASK 0x0
#define bb_chip_dp_sink_main_aligner_debug_stats2_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats2_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats2_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_aligner_debug_stats3_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats3_WRITEMASK 0x0
#define bb_chip_dp_sink_main_aligner_debug_stats3_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats3_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats3_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_aligner_debug_stats4_READMASK 0xFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats4_WRITEMASK 0x0
#define bb_chip_dp_sink_main_aligner_debug_stats4_VOLATILEMASK 0xFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats4_RESETMASK 0xFFFFFF
#define bb_chip_dp_sink_main_aligner_debug_stats4_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_aligner_fifo_status_READMASK 0xFFFF
#define bb_chip_dp_sink_main_aligner_fifo_status_WRITEMASK 0x0
#define bb_chip_dp_sink_main_aligner_fifo_status_VOLATILEMASK 0xFFFF
#define bb_chip_dp_sink_main_aligner_fifo_status_RESETMASK 0xFFFF
#define bb_chip_dp_sink_main_aligner_fifo_status_DEFAULT 0x0000000F

#define bb_chip_dp_sink_main_aligner_fifo_config_READMASK 0xFF
#define bb_chip_dp_sink_main_aligner_fifo_config_WRITEMASK 0x0
#define bb_chip_dp_sink_main_aligner_fifo_config_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_aligner_fifo_config_RESETMASK 0xFF
#define bb_chip_dp_sink_main_aligner_fifo_config_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats_flag_8b10b_READMASK 0x3
#define bb_chip_dp_sink_main_stats_flag_8b10b_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats_flag_8b10b_VOLATILEMASK 0x3
#define bb_chip_dp_sink_main_stats_flag_8b10b_RESETMASK 0x3
#define bb_chip_dp_sink_main_stats_flag_8b10b_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_0_READMASK 0xF01
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_0_WRITEMASK 0xF01
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_0_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_0_RESETMASK 0xF01
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_0_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_1_READMASK 0xF01
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_1_WRITEMASK 0xF01
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_1_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_1_RESETMASK 0xF01
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_1_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats_cnt_8b10b_0_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stats_cnt_8b10b_0_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats_cnt_8b10b_0_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stats_cnt_8b10b_0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stats_cnt_8b10b_0_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats_cnt_8b10b_1_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stats_cnt_8b10b_1_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats_cnt_8b10b_1_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stats_cnt_8b10b_1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stats_cnt_8b10b_1_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats_cnt_en_rst_gtp_READMASK 0x3
#define bb_chip_dp_sink_main_stats_cnt_en_rst_gtp_WRITEMASK 0x3
#define bb_chip_dp_sink_main_stats_cnt_en_rst_gtp_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stats_cnt_en_rst_gtp_RESETMASK 0x3
#define bb_chip_dp_sink_main_stats_cnt_en_rst_gtp_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats_cnt_gtp_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stats_cnt_gtp_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats_cnt_gtp_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stats_cnt_gtp_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stats_cnt_gtp_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_descrambler_READMASK 0x1
#define bb_chip_dp_sink_main_descrambler_WRITEMASK 0x1
#define bb_chip_dp_sink_main_descrambler_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_descrambler_RESETMASK 0x1
#define bb_chip_dp_sink_main_descrambler_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_cfg_READMASK 0x1030FFF
#define bb_chip_dp_sink_main_stream_extractor_cfg_WRITEMASK 0x1030FFF
#define bb_chip_dp_sink_main_stream_extractor_cfg_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_cfg_RESETMASK 0x1030FFF
#define bb_chip_dp_sink_main_stream_extractor_cfg_DEFAULT 0x00030168

#define bb_chip_dp_sink_main_stream_extractor_alu_READMASK 0x1FF
#define bb_chip_dp_sink_main_stream_extractor_alu_WRITEMASK 0x100
#define bb_chip_dp_sink_main_stream_extractor_alu_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stream_extractor_alu_RESETMASK 0x1FF
#define bb_chip_dp_sink_main_stream_extractor_alu_DEFAULT 0x00000040

#define bb_chip_dp_sink_main_stream_extractor_msa_mvid_READMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_mvid_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_msa_mvid_VOLATILEMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_mvid_RESETMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_mvid_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_msa_nvid_READMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_nvid_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_msa_nvid_VOLATILEMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_nvid_RESETMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_nvid_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_0_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_0_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_0_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_0_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_1_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_1_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_1_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_1_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_0_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_0_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_0_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_0_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_1_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_1_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_1_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_1_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_msa_misc_READMASK 0xFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_misc_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_msa_misc_VOLATILEMASK 0xFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_misc_RESETMASK 0xFFF
#define bb_chip_dp_sink_main_stream_extractor_msa_misc_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_msa_status_READMASK 0x1
#define bb_chip_dp_sink_main_stream_extractor_msa_status_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_msa_status_VOLATILEMASK 0x1
#define bb_chip_dp_sink_main_stream_extractor_msa_status_RESETMASK 0x1
#define bb_chip_dp_sink_main_stream_extractor_msa_status_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_msa_fps_READMASK 0xFFFFFF01
#define bb_chip_dp_sink_main_stream_extractor_msa_fps_WRITEMASK 0x1
#define bb_chip_dp_sink_main_stream_extractor_msa_fps_VOLATILEMASK 0xFFFFFF00
#define bb_chip_dp_sink_main_stream_extractor_msa_fps_RESETMASK 0xFFFFFF01
#define bb_chip_dp_sink_main_stream_extractor_msa_fps_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_debug_msa_mvid_READMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_mvid_WRITEMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_mvid_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_mvid_RESETMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_mvid_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_debug_msa_nvid_READMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_nvid_WRITEMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_nvid_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_nvid_RESETMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_nvid_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_0_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_0_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_0_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_0_DEFAULT 0x0FA00036

#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_1_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_1_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_1_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_1_DEFAULT 0x0F000020

#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_0_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_0_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_0_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_0_DEFAULT 0x08AE0050

#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_1_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_1_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_1_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_1_DEFAULT 0x08700005

#define bb_chip_dp_sink_main_stream_extractor_debug_msa_misc_READMASK 0xFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_misc_WRITEMASK 0xFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_misc_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_misc_RESETMASK 0xFFF
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_misc_DEFAULT 0x00000020

#define bb_chip_dp_sink_main_stream_extractor_fsm_status_READMASK 0x703
#define bb_chip_dp_sink_main_stream_extractor_fsm_status_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_fsm_status_VOLATILEMASK 0x703
#define bb_chip_dp_sink_main_stream_extractor_fsm_status_RESETMASK 0x703
#define bb_chip_dp_sink_main_stream_extractor_fsm_status_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_vbd_vbid_READMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_vbd_vbid_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_vbd_vbid_VOLATILEMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_vbd_vbid_RESETMASK 0xFFFFFF
#define bb_chip_dp_sink_main_stream_extractor_vbd_vbid_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_vbd_status_READMASK 0x1
#define bb_chip_dp_sink_main_stream_extractor_vbd_status_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_vbd_status_VOLATILEMASK 0x1
#define bb_chip_dp_sink_main_stream_extractor_vbd_status_RESETMASK 0x1
#define bb_chip_dp_sink_main_stream_extractor_vbd_status_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_vid_fifo_config_READMASK 0xFF
#define bb_chip_dp_sink_main_stream_extractor_vid_fifo_config_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_vid_fifo_config_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stream_extractor_vid_fifo_config_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stream_extractor_vid_fifo_config_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_status_READMASK 0xF
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_status_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_status_VOLATILEMASK 0xF
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_status_RESETMASK 0xF
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_status_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_status_READMASK 0xF
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_status_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_status_VOLATILEMASK 0xF
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_status_RESETMASK 0xF
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_status_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_config_READMASK 0x1FF
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_config_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_config_VOLATILEMASK 0x1FF
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_config_RESETMASK 0x1FF
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_config_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_config_READMASK 0x7F
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_config_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_config_VOLATILEMASK 0x7F
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_config_RESETMASK 0x7F
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_config_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_sdp_debug_READMASK 0xFF
#define bb_chip_dp_sink_main_stream_extractor_sdp_debug_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_sdp_debug_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stream_extractor_sdp_debug_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stream_extractor_sdp_debug_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stream_extractor_pixgen_READMASK 0x80FFFFFF
#define bb_chip_dp_sink_main_stream_extractor_pixgen_WRITEMASK 0x80FFFFFF
#define bb_chip_dp_sink_main_stream_extractor_pixgen_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stream_extractor_pixgen_RESETMASK 0x80FFFFFF
#define bb_chip_dp_sink_main_stream_extractor_pixgen_DEFAULT 0x000000FF

#define bb_chip_dp_sink_main_stream_extractor_debug_READMASK 0xFF01
#define bb_chip_dp_sink_main_stream_extractor_debug_WRITEMASK 0x1
#define bb_chip_dp_sink_main_stream_extractor_debug_VOLATILEMASK 0xFF00
#define bb_chip_dp_sink_main_stream_extractor_debug_RESETMASK 0xFF01
#define bb_chip_dp_sink_main_stream_extractor_debug_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_encoder_vfr_handshake_READMASK 0xFF
#define bb_chip_dp_sink_main_encoder_vfr_handshake_WRITEMASK 0x0
#define bb_chip_dp_sink_main_encoder_vfr_handshake_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_encoder_vfr_handshake_RESETMASK 0xFF
#define bb_chip_dp_sink_main_encoder_vfr_handshake_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_encoder_vfr_pixel_READMASK 0xFFFFFF
#define bb_chip_dp_sink_main_encoder_vfr_pixel_WRITEMASK 0x0
#define bb_chip_dp_sink_main_encoder_vfr_pixel_VOLATILEMASK 0xFFFFFF
#define bb_chip_dp_sink_main_encoder_vfr_pixel_RESETMASK 0xFFFFFF
#define bb_chip_dp_sink_main_encoder_vfr_pixel_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_encoder_vfr_line_READMASK 0xFFFFFF
#define bb_chip_dp_sink_main_encoder_vfr_line_WRITEMASK 0x0
#define bb_chip_dp_sink_main_encoder_vfr_line_VOLATILEMASK 0xFFFFFF
#define bb_chip_dp_sink_main_encoder_vfr_line_RESETMASK 0xFFFFFF
#define bb_chip_dp_sink_main_encoder_vfr_line_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_rd2clr_config_READMASK 0x7FFFFF
#define bb_chip_dp_sink_main_stats0_rd2clr_config_WRITEMASK 0x7FFFFF
#define bb_chip_dp_sink_main_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stats0_rd2clr_config_RESETMASK 0x7FFFFF
#define bb_chip_dp_sink_main_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_full_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_full_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_full_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_full_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_full_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_empty_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_empty_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_empty_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_empty_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_empty_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_overflow_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_overflow_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_overflow_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_overflow_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_overflow_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_underflow_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_underflow_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_underflow_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_underflow_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_watermark_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_watermark_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_watermark_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_watermark_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_watermark_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c0_sr_full_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_sr_full_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c0_sr_full_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_sr_full_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c0_sr_full_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_full_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_full_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_full_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_full_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_full_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_empty_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_empty_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_empty_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_empty_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_empty_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_overflow_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_overflow_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_overflow_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_overflow_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_overflow_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_underflow_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_underflow_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_underflow_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_underflow_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_watermark_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_watermark_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_watermark_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_watermark_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_watermark_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c1_sr_full_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_sr_full_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c1_sr_full_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_sr_full_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c1_sr_full_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_full_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_full_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_full_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_full_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_full_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_empty_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_empty_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_empty_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_empty_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_empty_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_overflow_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_overflow_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_overflow_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_overflow_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_overflow_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_underflow_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_underflow_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_underflow_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_underflow_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_watermark_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_watermark_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_watermark_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_watermark_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_watermark_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vid_c2_sr_full_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_sr_full_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vid_c2_sr_full_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_sr_full_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vid_c2_sr_full_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_vbd_majority_fail_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vbd_majority_fail_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_vbd_majority_fail_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vbd_majority_fail_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_vbd_majority_fail_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats0_msa_majority_fail_READMASK 0xFF
#define bb_chip_dp_sink_main_stats0_msa_majority_fail_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats0_msa_majority_fail_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats0_msa_majority_fail_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats0_msa_majority_fail_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_rd2clr_config_READMASK 0x7FFF
#define bb_chip_dp_sink_main_stats1_rd2clr_config_WRITEMASK 0x7FFF
#define bb_chip_dp_sink_main_stats1_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_stats1_rd2clr_config_RESETMASK 0x7FFF
#define bb_chip_dp_sink_main_stats1_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_watermark_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_watermark_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_watermark_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_watermark_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_watermark_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_ss_se_same_cycle_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_ss_se_same_cycle_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_ss_se_same_cycle_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_ss_se_same_cycle_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_ss_se_same_cycle_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_fifo_full_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_full_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_fifo_full_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_full_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_full_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_fifo_empty_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_empty_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_fifo_empty_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_empty_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_empty_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_fifo_overflow_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_overflow_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_fifo_overflow_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_overflow_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_overflow_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_fifo_underflow_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_underflow_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_fifo_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_underflow_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_underflow_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_READMASK 0xFFFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_VOLATILEMASK 0xFFFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_RESETMASK 0xFFFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_watermark_READMASK 0xFFFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_watermark_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_watermark_VOLATILEMASK 0xFFFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_watermark_RESETMASK 0xFFFF
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_watermark_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_full_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_full_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_full_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_full_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_full_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_empty_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_empty_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_empty_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_empty_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_empty_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_overflow_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_overflow_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_overflow_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_overflow_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_overflow_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_underflow_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_underflow_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_underflow_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_underflow_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_watermark_READMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_watermark_WRITEMASK 0x0
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_watermark_VOLATILEMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_watermark_RESETMASK 0xFF
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_watermark_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_irq_enable_READMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_enable_WRITEMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_enable_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_irq_enable_RESETMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_enable_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_irq_pending_READMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_pending_WRITEMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_pending_VOLATILEMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_pending_RESETMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_pending_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_irq_pending_irq_READMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_dp_sink_main_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_dp_sink_main_irq_pending_irq_RESETMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_dp_sink_main_irq_raw_READMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_raw_WRITEMASK 0x0
#define bb_chip_dp_sink_main_irq_raw_VOLATILEMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_raw_RESETMASK 0xFBFFFFF7
#define bb_chip_dp_sink_main_irq_raw_DEFAULT 0x00000000

/*block : dp_sink_tico */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t tico_e_width : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_e_width : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_width;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t tico_e_height : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_e_height : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_height;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t tico_e_comp : 2;           /* 1:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_e_comp : 2;           /* 0:1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_comp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t tico_e_mode : 4;           /* 3:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_e_mode : 4;           /* 0:3 SW=rw HW=ro 0x1 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_mode;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t tico_e_hlvls : 3;           /* 2:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_e_hlvls : 3;           /* 0:2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_hlvls;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t tico_e_vld : 1;           /* 0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_e_vld : 1;           /* 0 SW=wo HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_vld;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t tico_e_nbr : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_e_nbr : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_nbr;

typedef union {
    struct {
        uint32_t tico_e_bgt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_bgt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t tico_e_vid_depth : 4;           /* 3:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_e_vid_depth : 4;           /* 0:3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_vid_depth;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t tico_e_play_mode : 1;           /* 0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_e_play_mode : 1;           /* 0 SW=wo HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_play_mode;

typedef union {
    struct {
        uint32_t tico_e_lvl_weights : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_dp_sink_tico_tico_e_lvl_weights;

typedef struct {
    
    uint8_t filler1[0x14];
    
    bb_chip_dp_sink_tico_tico_e_width  tico_e_width;
    
    uint8_t filler2[0x4];
    
    bb_chip_dp_sink_tico_tico_e_height  tico_e_height;
    
    uint8_t filler3[0x4];
    
    bb_chip_dp_sink_tico_tico_e_comp  tico_e_comp;
    
    uint8_t filler4[0x4];
    
    bb_chip_dp_sink_tico_tico_e_mode  tico_e_mode;
    
    uint8_t filler5[0x4];
    
    bb_chip_dp_sink_tico_tico_e_hlvls  tico_e_hlvls;
    bb_chip_dp_sink_tico_tico_e_vld  tico_e_vld;
    bb_chip_dp_sink_tico_tico_e_nbr  tico_e_nbr;
    
    uint8_t filler8[0x4];
    
    bb_chip_dp_sink_tico_tico_e_bgt  tico_e_bgt;
    bb_chip_dp_sink_tico_tico_e_vid_depth  tico_e_vid_depth;
    bb_chip_dp_sink_tico_tico_e_play_mode  tico_e_play_mode;
    bb_chip_dp_sink_tico_tico_e_lvl_weights  tico_e_lvl_weights;
    
} bb_chip_dp_sink_tico_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_dp_sink_tico_tico_e_width_READMASK 0xFFFF
#define bb_chip_dp_sink_tico_tico_e_width_WRITEMASK 0xFFFF
#define bb_chip_dp_sink_tico_tico_e_width_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_width_RESETMASK 0xFFFF
#define bb_chip_dp_sink_tico_tico_e_width_DEFAULT 0x00000000

#define bb_chip_dp_sink_tico_tico_e_height_READMASK 0xFFFF
#define bb_chip_dp_sink_tico_tico_e_height_WRITEMASK 0xFFFF
#define bb_chip_dp_sink_tico_tico_e_height_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_height_RESETMASK 0xFFFF
#define bb_chip_dp_sink_tico_tico_e_height_DEFAULT 0x00000000

#define bb_chip_dp_sink_tico_tico_e_comp_READMASK 0x3
#define bb_chip_dp_sink_tico_tico_e_comp_WRITEMASK 0x3
#define bb_chip_dp_sink_tico_tico_e_comp_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_comp_RESETMASK 0x3
#define bb_chip_dp_sink_tico_tico_e_comp_DEFAULT 0x00000000

#define bb_chip_dp_sink_tico_tico_e_mode_READMASK 0xF
#define bb_chip_dp_sink_tico_tico_e_mode_WRITEMASK 0xF
#define bb_chip_dp_sink_tico_tico_e_mode_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_mode_RESETMASK 0xF
#define bb_chip_dp_sink_tico_tico_e_mode_DEFAULT 0x00000001

#define bb_chip_dp_sink_tico_tico_e_hlvls_READMASK 0x7
#define bb_chip_dp_sink_tico_tico_e_hlvls_WRITEMASK 0x7
#define bb_chip_dp_sink_tico_tico_e_hlvls_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_hlvls_RESETMASK 0x7
#define bb_chip_dp_sink_tico_tico_e_hlvls_DEFAULT 0x00000000

#define bb_chip_dp_sink_tico_tico_e_vld_READMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_vld_WRITEMASK 0x1
#define bb_chip_dp_sink_tico_tico_e_vld_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_vld_RESETMASK 0x1
#define bb_chip_dp_sink_tico_tico_e_vld_DEFAULT 0x00000000

#define bb_chip_dp_sink_tico_tico_e_nbr_READMASK 0xFFFF
#define bb_chip_dp_sink_tico_tico_e_nbr_WRITEMASK 0xFFFF
#define bb_chip_dp_sink_tico_tico_e_nbr_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_nbr_RESETMASK 0xFFFF
#define bb_chip_dp_sink_tico_tico_e_nbr_DEFAULT 0x00000000

#define bb_chip_dp_sink_tico_tico_e_bgt_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_tico_tico_e_bgt_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_tico_tico_e_bgt_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_bgt_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_tico_tico_e_bgt_DEFAULT 0x00000000

#define bb_chip_dp_sink_tico_tico_e_vid_depth_READMASK 0xF
#define bb_chip_dp_sink_tico_tico_e_vid_depth_WRITEMASK 0xF
#define bb_chip_dp_sink_tico_tico_e_vid_depth_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_vid_depth_RESETMASK 0xF
#define bb_chip_dp_sink_tico_tico_e_vid_depth_DEFAULT 0x00000000

#define bb_chip_dp_sink_tico_tico_e_play_mode_READMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_play_mode_WRITEMASK 0x1
#define bb_chip_dp_sink_tico_tico_e_play_mode_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_play_mode_RESETMASK 0x1
#define bb_chip_dp_sink_tico_tico_e_play_mode_DEFAULT 0x00000000

#define bb_chip_dp_sink_tico_tico_e_lvl_weights_READMASK 0xFFFFFFFF
#define bb_chip_dp_sink_tico_tico_e_lvl_weights_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_sink_tico_tico_e_lvl_weights_VOLATILEMASK 0x0
#define bb_chip_dp_sink_tico_tico_e_lvl_weights_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_sink_tico_tico_e_lvl_weights_DEFAULT 0x00000000

/*block : dp_sink_aux_hpd */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x4 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x4 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x4 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x4 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t aux_sense_p_in_debounce : 1;           /* 31 SW=ro HW=wo 0x1 */
            uint32_t aux_sense_n_in_debounce : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t aux_sense_p_in : 1;           /* 29 SW=ro HW=wo 0x1 */
            uint32_t aux_sense_n_in : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t sent_defer_cnt : 4;           /* 27:24 SW=ro HW=wo 0x0 */
            
            uint32_t resv17 : 7;
            uint32_t response_timeout_cnt : 17;           /* 16:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t response_timeout_cnt : 17;           /* 0:16 SW=ro HW=wo 0x0 */
            
            uint32_t resv17 : 7;
            uint32_t sent_defer_cnt : 4;           /* 24:27 SW=ro HW=wo 0x0 */
            uint32_t aux_sense_n_in : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t aux_sense_p_in : 1;           /* 29 SW=ro HW=wo 0x1 */
            uint32_t aux_sense_n_in_debounce : 1;           /* 30 SW=ro HW=wo 0x0 */
            uint32_t aux_sense_p_in_debounce : 1;           /* 31 SW=ro HW=wo 0x1 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_aux_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t reply_timer : 13;           /* 31:19 SW=rw HW=ro 0x1900 */
            
            uint32_t resv16 : 3;
            uint32_t response_timer : 13;           /* 15:3 SW=rw HW=ro 0x12C0 */
            uint32_t resv0 : 3;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 3;
            uint32_t response_timer : 13;           /* 3:15 SW=rw HW=ro 0x12C0 */
            
            uint32_t resv16 : 3;
            uint32_t reply_timer : 13;           /* 19:31 SW=rw HW=ro 0x1900 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_aux_ctrl1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv21 : 11;
            uint32_t pre_charge_length : 5;           /* 20:16 SW=rw HW=ro 0x1F */
            uint32_t resv0 : 16;
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            
            uint32_t resv0 : 16;
            uint32_t pre_charge_length : 5;           /* 16:20 SW=rw HW=ro 0x1F */
            uint32_t resv21 : 11;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_aux_ctrl2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t dp_aux_hpd_clk_freq : 8;           /* 7:0 SW=rw HW=ro 0x4B */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_aux_hpd_clk_freq : 8;           /* 0:7 SW=rw HW=ro 0x4B */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_aux_ctrl3;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t rx_flag : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t rx_data : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_data : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t rx_flag : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_aux_rx;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t go_bit : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t tx_flag : 1;           /* 8 SW=wo HW=ro 0x0 */
            uint32_t tx_data : 8;           /* 7:0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_data : 8;           /* 0:7 SW=wo HW=ro 0x0 */
            uint32_t tx_flag : 1;           /* 8 SW=wo HW=ro 0x0 */
            uint32_t go_bit : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_aux_tx;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t hpd_line_out : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t hpd_line_in_debounce : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t hpd_line_in : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hpd_line_in : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t hpd_line_in_debounce : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t hpd_line_out : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_hpd_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t hpd_low : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t hpd_high : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t hpd_replug : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t hpd_irq : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hpd_irq : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t hpd_replug : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t hpd_high : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t hpd_low : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_hpd_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv14 : 18;
            uint32_t hpd_irq_to_irq_min_gap : 6;           /* 13:8 SW=rw HW=ro 0x20 */
            
            uint32_t resv4 : 4;
            uint32_t hpd_irq_pulse_width : 4;           /* 3:0 SW=rw HW=ro 0xC */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hpd_irq_pulse_width : 4;           /* 0:3 SW=rw HW=ro 0xC */
            
            uint32_t resv4 : 4;
            uint32_t hpd_irq_to_irq_min_gap : 6;           /* 8:13 SW=rw HW=ro 0x20 */
            uint32_t resv14 : 18;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_hpd_timer1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t hpd_replug_pulse_width : 8;           /* 7:0 SW=rw HW=ro 0x9C */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hpd_replug_pulse_width : 8;           /* 0:7 SW=rw HW=ro 0x9C */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_hpd_timer2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv22 : 10;
            uint32_t hpd_irq_rising_detect : 6;           /* 21:16 SW=rw HW=ro 0x1F */
            uint32_t hpd_irq_falling_detect : 4;           /* 15:12 SW=rw HW=ro 0x4 */
            
            uint32_t resv11 : 1;
            uint32_t hpd_aux_debounce_period : 11;           /* 10:0 SW=rw HW=ro 0x61A */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t hpd_aux_debounce_period : 11;           /* 0:10 SW=rw HW=ro 0x61A */
            
            uint32_t resv11 : 1;
            uint32_t hpd_irq_falling_detect : 4;           /* 12:15 SW=rw HW=ro 0x4 */
            uint32_t hpd_irq_rising_detect : 6;           /* 16:21 SW=rw HW=ro 0x1F */
            uint32_t resv22 : 10;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_hpd_timer3;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_hpd_rise_det;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_hpd_fall_det;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_dp_source_connect_det;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ctrl : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 3;
            uint32_t rst : 1;           /* 4 SW=rw HW=ro 0x0 */
            
            uint32_t resv5 : 3;
            uint32_t cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_dp_source_disconnect_det;

/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t dp_source_connect_det : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=rw HW=na 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t reply_timeout : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t reply_timeout : 1;           /* 3 SW=rw HW=na 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t dp_source_connect_det : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t dp_source_connect_det : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t reply_timeout : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t reply_timeout : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t dp_source_connect_det : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t dp_source_connect_det : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=ro HW=na 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t reply_timeout : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t reply_timeout : 1;           /* 3 SW=ro HW=na 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t dp_source_connect_det : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv18 : 14;
            uint32_t dp_source_connect_det : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t reply_timeout : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_fifo_pkt_received : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t go_bit_clear : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t defer_sent : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t reply_timeout : 1;           /* 3 SW=ro HW=wo 0x0 */
            
            uint32_t resv4 : 3;
            uint32_t rx_fifo_overflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t hpd_replug : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t hpd_irq : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t hpd_connect : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t hpd_disconnect : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t dp_source_detected : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t dp_source_powered : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t hpd_fall_det : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t hpd_rise_det : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t dp_source_disconnect_det : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t dp_source_connect_det : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t resv18 : 14;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_sink_aux_hpd_irq_raw;

typedef struct {
    bb_chip_dp_sink_aux_hpd_irq_enable  enable;
    bb_chip_dp_sink_aux_hpd_irq_pending  pending;
    bb_chip_dp_sink_aux_hpd_irq_pending_irq  pending_irq;
    bb_chip_dp_sink_aux_hpd_irq_raw  raw;
    
} bb_chip_dp_sink_aux_hpd_irq;


typedef struct {
    bb_chip_dp_sink_aux_hpd_version  version;
    bb_chip_dp_sink_aux_hpd_aux_status  aux_status;
    bb_chip_dp_sink_aux_hpd_aux_ctrl1  aux_ctrl1;
    bb_chip_dp_sink_aux_hpd_aux_ctrl2  aux_ctrl2;
    bb_chip_dp_sink_aux_hpd_aux_ctrl3  aux_ctrl3;
    bb_chip_dp_sink_aux_hpd_aux_rx  aux_rx;
    bb_chip_dp_sink_aux_hpd_aux_tx  aux_tx;
    bb_chip_dp_sink_aux_hpd_hpd_status  hpd_status;
    bb_chip_dp_sink_aux_hpd_hpd_ctrl  hpd_ctrl;
    bb_chip_dp_sink_aux_hpd_hpd_timer1  hpd_timer1;
    bb_chip_dp_sink_aux_hpd_hpd_timer2  hpd_timer2;
    bb_chip_dp_sink_aux_hpd_hpd_timer3  hpd_timer3;
    bb_chip_dp_sink_aux_hpd_hpd_rise_det  hpd_rise_det;
    bb_chip_dp_sink_aux_hpd_hpd_fall_det  hpd_fall_det;
    bb_chip_dp_sink_aux_hpd_dp_source_connect_det  dp_source_connect_det;
    bb_chip_dp_sink_aux_hpd_dp_source_disconnect_det  dp_source_disconnect_det;
    
    union {
        bb_chip_dp_sink_aux_hpd_irq s;
        uint8_t filler[0x10];
    } irq;
    
} bb_chip_dp_sink_aux_hpd_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_dp_sink_aux_hpd_version_READMASK 0xFFFFFF
#define bb_chip_dp_sink_aux_hpd_version_WRITEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_version_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_version_RESETMASK 0xFFFFFF
#define bb_chip_dp_sink_aux_hpd_version_DEFAULT 0x00040400

#define bb_chip_dp_sink_aux_hpd_aux_status_READMASK 0xFF01FFFF
#define bb_chip_dp_sink_aux_hpd_aux_status_WRITEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_aux_status_VOLATILEMASK 0xFF01FFFF
#define bb_chip_dp_sink_aux_hpd_aux_status_RESETMASK 0xFF01FFFF
#define bb_chip_dp_sink_aux_hpd_aux_status_DEFAULT 0xA0000000

#define bb_chip_dp_sink_aux_hpd_aux_ctrl1_READMASK 0xFFF8FFF8
#define bb_chip_dp_sink_aux_hpd_aux_ctrl1_WRITEMASK 0xFFF8FFF8
#define bb_chip_dp_sink_aux_hpd_aux_ctrl1_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_aux_ctrl1_RESETMASK 0xFFF8FFF8
#define bb_chip_dp_sink_aux_hpd_aux_ctrl1_DEFAULT 0xC8009600

#define bb_chip_dp_sink_aux_hpd_aux_ctrl2_READMASK 0x1F0000
#define bb_chip_dp_sink_aux_hpd_aux_ctrl2_WRITEMASK 0x1F0000
#define bb_chip_dp_sink_aux_hpd_aux_ctrl2_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_aux_ctrl2_RESETMASK 0x1F0000
#define bb_chip_dp_sink_aux_hpd_aux_ctrl2_DEFAULT 0x001F0000

#define bb_chip_dp_sink_aux_hpd_aux_ctrl3_READMASK 0xFF
#define bb_chip_dp_sink_aux_hpd_aux_ctrl3_WRITEMASK 0xFF
#define bb_chip_dp_sink_aux_hpd_aux_ctrl3_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_aux_ctrl3_RESETMASK 0xFF
#define bb_chip_dp_sink_aux_hpd_aux_ctrl3_DEFAULT 0x0000004B

#define bb_chip_dp_sink_aux_hpd_aux_rx_READMASK 0x1FF
#define bb_chip_dp_sink_aux_hpd_aux_rx_WRITEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_aux_rx_VOLATILEMASK 0x1FF
#define bb_chip_dp_sink_aux_hpd_aux_rx_RESETMASK 0x1FF
#define bb_chip_dp_sink_aux_hpd_aux_rx_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_aux_tx_READMASK 0x200
#define bb_chip_dp_sink_aux_hpd_aux_tx_WRITEMASK 0x3FF
#define bb_chip_dp_sink_aux_hpd_aux_tx_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_aux_tx_RESETMASK 0x3FF
#define bb_chip_dp_sink_aux_hpd_aux_tx_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_hpd_status_READMASK 0x7
#define bb_chip_dp_sink_aux_hpd_hpd_status_WRITEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_hpd_status_VOLATILEMASK 0x7
#define bb_chip_dp_sink_aux_hpd_hpd_status_RESETMASK 0x7
#define bb_chip_dp_sink_aux_hpd_hpd_status_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_hpd_ctrl_READMASK 0xF
#define bb_chip_dp_sink_aux_hpd_hpd_ctrl_WRITEMASK 0xF
#define bb_chip_dp_sink_aux_hpd_hpd_ctrl_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_hpd_ctrl_RESETMASK 0xF
#define bb_chip_dp_sink_aux_hpd_hpd_ctrl_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_hpd_timer1_READMASK 0x3F0F
#define bb_chip_dp_sink_aux_hpd_hpd_timer1_WRITEMASK 0x3F0F
#define bb_chip_dp_sink_aux_hpd_hpd_timer1_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_hpd_timer1_RESETMASK 0x3F0F
#define bb_chip_dp_sink_aux_hpd_hpd_timer1_DEFAULT 0x0000200C

#define bb_chip_dp_sink_aux_hpd_hpd_timer2_READMASK 0xFF
#define bb_chip_dp_sink_aux_hpd_hpd_timer2_WRITEMASK 0xFF
#define bb_chip_dp_sink_aux_hpd_hpd_timer2_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_hpd_timer2_RESETMASK 0xFF
#define bb_chip_dp_sink_aux_hpd_hpd_timer2_DEFAULT 0x0000009C

#define bb_chip_dp_sink_aux_hpd_hpd_timer3_READMASK 0x3FF7FF
#define bb_chip_dp_sink_aux_hpd_hpd_timer3_WRITEMASK 0x3FF7FF
#define bb_chip_dp_sink_aux_hpd_hpd_timer3_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_hpd_timer3_RESETMASK 0x3FF7FF
#define bb_chip_dp_sink_aux_hpd_hpd_timer3_DEFAULT 0x001F461A

#define bb_chip_dp_sink_aux_hpd_hpd_rise_det_READMASK 0xFF11
#define bb_chip_dp_sink_aux_hpd_hpd_rise_det_WRITEMASK 0x11
#define bb_chip_dp_sink_aux_hpd_hpd_rise_det_VOLATILEMASK 0xFF00
#define bb_chip_dp_sink_aux_hpd_hpd_rise_det_RESETMASK 0xFF11
#define bb_chip_dp_sink_aux_hpd_hpd_rise_det_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_hpd_fall_det_READMASK 0xFF11
#define bb_chip_dp_sink_aux_hpd_hpd_fall_det_WRITEMASK 0x11
#define bb_chip_dp_sink_aux_hpd_hpd_fall_det_VOLATILEMASK 0xFF00
#define bb_chip_dp_sink_aux_hpd_hpd_fall_det_RESETMASK 0xFF11
#define bb_chip_dp_sink_aux_hpd_hpd_fall_det_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_dp_source_connect_det_READMASK 0xFF11
#define bb_chip_dp_sink_aux_hpd_dp_source_connect_det_WRITEMASK 0x11
#define bb_chip_dp_sink_aux_hpd_dp_source_connect_det_VOLATILEMASK 0xFF00
#define bb_chip_dp_sink_aux_hpd_dp_source_connect_det_RESETMASK 0xFF11
#define bb_chip_dp_sink_aux_hpd_dp_source_connect_det_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_dp_source_disconnect_det_READMASK 0xFF11
#define bb_chip_dp_sink_aux_hpd_dp_source_disconnect_det_WRITEMASK 0x11
#define bb_chip_dp_sink_aux_hpd_dp_source_disconnect_det_VOLATILEMASK 0xFF00
#define bb_chip_dp_sink_aux_hpd_dp_source_disconnect_det_RESETMASK 0xFF11
#define bb_chip_dp_sink_aux_hpd_dp_source_disconnect_det_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_irq_enable_READMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_enable_WRITEMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_enable_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_irq_enable_RESETMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_enable_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_irq_pending_READMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_pending_WRITEMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_pending_VOLATILEMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_pending_RESETMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_pending_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_irq_pending_irq_READMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_irq_pending_irq_RESETMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_dp_sink_aux_hpd_irq_raw_READMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_raw_WRITEMASK 0x0
#define bb_chip_dp_sink_aux_hpd_irq_raw_VOLATILEMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_raw_RESETMASK 0x3FF8F
#define bb_chip_dp_sink_aux_hpd_irq_raw_DEFAULT 0x00000000

/*block : dp_source_main */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0xB */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x9 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x9 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0xB */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t debug_sel : 4;           /* 31:28 SW=rw HW=ro 0x0 */
            
            uint32_t resv25 : 3;
            uint32_t dp_training_done : 1;           /* 24 SW=rw HW=ro 0x0 */
            
            uint32_t resv18 : 6;
            uint32_t vid_stream_end : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t apb_to_axi_mode_select : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t pix_gen_mode : 2;           /* 15:14 SW=rw HW=ro 0x0 */
            uint32_t pix_gen_sel : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t dp_enh_frm_en : 1;           /* 12 SW=rw HW=ro 0x1 */
            uint32_t decoder_error_inject : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t vid_stream_generator_en : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t syn_stream_generator_en : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t sdp_en : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lane_bit_rate : 2;           /* 7:6 SW=rw HW=ro 0x1 */
            uint32_t tps_sel : 4;           /* 5:2 SW=rw HW=ro 0x0 */
            uint32_t lane_num : 2;           /* 1:0 SW=rw HW=ro 0x3 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lane_num : 2;           /* 0:1 SW=rw HW=ro 0x3 */
            uint32_t tps_sel : 4;           /* 2:5 SW=rw HW=ro 0x0 */
            uint32_t lane_bit_rate : 2;           /* 6:7 SW=rw HW=ro 0x1 */
            uint32_t sdp_en : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t syn_stream_generator_en : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t vid_stream_generator_en : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t decoder_error_inject : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t dp_enh_frm_en : 1;           /* 12 SW=rw HW=ro 0x1 */
            uint32_t pix_gen_sel : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t pix_gen_mode : 2;           /* 14:15 SW=rw HW=ro 0x0 */
            uint32_t apb_to_axi_mode_select : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t vid_stream_end : 1;           /* 17 SW=rw HW=ro 0x0 */
            
            uint32_t resv18 : 6;
            uint32_t dp_training_done : 1;           /* 24 SW=rw HW=ro 0x0 */
            
            uint32_t resv25 : 3;
            uint32_t debug_sel : 4;           /* 28:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_configuration;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t enable : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_scrambler;

/*section : stream_generator */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t cs_start_level : 12;           /* 31:20 SW=rw HW=ro 0x3E8 */
            uint32_t cs_pkt_length : 10;           /* 19:10 SW=rw HW=ro 0x168 */
            uint32_t pix_start_level : 10;           /* 9:0 SW=rw HW=ro 0x200 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pix_start_level : 10;           /* 0:9 SW=rw HW=ro 0x200 */
            uint32_t cs_pkt_length : 10;           /* 10:19 SW=rw HW=ro 0x168 */
            uint32_t cs_start_level : 12;           /* 20:31 SW=rw HW=ro 0x3E8 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_cfg0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv23 : 9;
            uint32_t cs_fifo_level_check_frequency : 10;           /* 22:13 SW=rw HW=ro 0xA */
            uint32_t cs_pkt_interval : 13;           /* 12:0 SW=rw HW=ro 0x3F4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cs_pkt_interval : 13;           /* 0:12 SW=rw HW=ro 0x3F4 */
            uint32_t cs_fifo_level_check_frequency : 10;           /* 13:22 SW=rw HW=ro 0xA */
            uint32_t resv23 : 9;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_cfg1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t cs_pkt_interval_feedback_ctrl : 1;           /* 31 SW=rw HW=ro 0x0 */
            uint32_t cs_pkt_interval_feedback_ctrl_debug : 4;           /* 30:27 SW=rw HW=ro 0x0 */
            
            uint32_t resv8 : 19;
            uint32_t cs_pkt_interval_minus_offset0 : 4;           /* 7:4 SW=rw HW=ro 0x1 */
            uint32_t cs_pkt_interval_plus_offset0 : 4;           /* 3:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cs_pkt_interval_plus_offset0 : 4;           /* 0:3 SW=rw HW=ro 0x1 */
            uint32_t cs_pkt_interval_minus_offset0 : 4;           /* 4:7 SW=rw HW=ro 0x1 */
            
            uint32_t resv8 : 19;
            uint32_t cs_pkt_interval_feedback_ctrl_debug : 4;           /* 27:30 SW=rw HW=ro 0x0 */
            uint32_t cs_pkt_interval_feedback_ctrl : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_cfg2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t dp_width_total_feedback_ctrl : 1;           /* 31 SW=rw HW=ro 0x0 */
            uint32_t dp_width_total_feedback_ctrl_debug : 4;           /* 30:27 SW=rw HW=ro 0x0 */
            
            uint32_t resv16 : 11;
            uint32_t dp_width_total_minus_offset1 : 4;           /* 15:12 SW=rw HW=ro 0x8 */
            uint32_t dp_width_total_plus_offset1 : 4;           /* 11:8 SW=rw HW=ro 0x8 */
            uint32_t dp_width_total_minus_offset0 : 4;           /* 7:4 SW=rw HW=ro 0x4 */
            uint32_t dp_width_total_plus_offset0 : 4;           /* 3:0 SW=rw HW=ro 0x4 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_width_total_plus_offset0 : 4;           /* 0:3 SW=rw HW=ro 0x4 */
            uint32_t dp_width_total_minus_offset0 : 4;           /* 4:7 SW=rw HW=ro 0x4 */
            uint32_t dp_width_total_plus_offset1 : 4;           /* 8:11 SW=rw HW=ro 0x8 */
            uint32_t dp_width_total_minus_offset1 : 4;           /* 12:15 SW=rw HW=ro 0x8 */
            
            uint32_t resv16 : 11;
            uint32_t dp_width_total_feedback_ctrl_debug : 4;           /* 27:30 SW=rw HW=ro 0x0 */
            uint32_t dp_width_total_feedback_ctrl : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_cfg3;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv13 : 19;
            uint32_t debug : 13;           /* 12:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t debug : 13;           /* 0:12 SW=ro HW=wo 0x0 */
            uint32_t resv13 : 19;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_cs_pkt_updated_interval;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv15 : 17;
            uint32_t debug : 15;           /* 14:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t debug : 15;           /* 0:14 SW=ro HW=wo 0x0 */
            uint32_t resv15 : 17;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_dp_width_total_actual;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv31 : 1;
            uint32_t dp_width_active : 15;           /* 30:16 SW=rw HW=ro 0xDA4 */
            
            uint32_t resv15 : 1;
            uint32_t dp_width_total : 15;           /* 14:0 SW=rw HW=ro 0xFA0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_width_total : 15;           /* 0:14 SW=rw HW=ro 0xFA0 */
            
            uint32_t resv15 : 1;
            uint32_t dp_width_active : 15;           /* 16:30 SW=rw HW=ro 0xDA4 */
            uint32_t resv31 : 1;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_alu0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv23 : 9;
            uint32_t full_tu_size : 7;           /* 22:16 SW=rw HW=ro 0x40 */
            uint32_t last_tu_size : 7;           /* 15:9 SW=rw HW=ro 0x24 */
            uint32_t full_tu_num : 9;           /* 8:0 SW=rw HW=ro 0x36 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t full_tu_num : 9;           /* 0:8 SW=rw HW=ro 0x36 */
            uint32_t last_tu_size : 7;           /* 9:15 SW=rw HW=ro 0x24 */
            uint32_t full_tu_size : 7;           /* 16:22 SW=rw HW=ro 0x40 */
            uint32_t resv23 : 9;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_alu1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t cpu_math_result_rdy : 1;           /* 31 SW=rw HW=ro 0x0 */
            uint32_t valid_bytes_repeat_num : 9;           /* 30:22 SW=rw HW=ro 0x0 */
            uint32_t valid_bytes_per_full_tu : 7;           /* 21:15 SW=rw HW=ro 0x1A */
            uint32_t valid_bytes_num_per_lane : 15;           /* 14:0 SW=rw HW=ro 0x5A0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t valid_bytes_num_per_lane : 15;           /* 0:14 SW=rw HW=ro 0x5A0 */
            uint32_t valid_bytes_per_full_tu : 7;           /* 15:21 SW=rw HW=ro 0x1A */
            uint32_t valid_bytes_repeat_num : 9;           /* 22:30 SW=rw HW=ro 0x0 */
            uint32_t cpu_math_result_rdy : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_alu2;

/*section : msa */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv27 : 5;
            uint32_t nvid_sel : 1;           /* 26 SW=rw HW=ro 0x0 */
            uint32_t mvid_sel : 2;           /* 25:24 SW=rw HW=ro 0x0 */
            uint32_t mvid_set_value : 24;           /* 23:0 SW=rw HW=ro 0x4666 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mvid_set_value : 24;           /* 0:23 SW=rw HW=ro 0x4666 */
            uint32_t mvid_sel : 2;           /* 24:25 SW=rw HW=ro 0x0 */
            uint32_t nvid_sel : 1;           /* 26 SW=rw HW=ro 0x0 */
            uint32_t resv27 : 5;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_control_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t insert_line_sel : 8;           /* 31:24 SW=rw HW=ro 0x0 */
            uint32_t nvid_set_value : 24;           /* 23:0 SW=rw HW=ro 0x8000 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nvid_set_value : 24;           /* 0:23 SW=rw HW=ro 0x8000 */
            uint32_t insert_line_sel : 8;           /* 24:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_control_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t mvid : 24;           /* 23:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mvid : 24;           /* 0:23 SW=rw HW=ro 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_mvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t nvid : 24;           /* 23:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nvid : 24;           /* 0:23 SW=rw HW=ro 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_nvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t total : 16;           /* 31:16 SW=rw HW=ro 0xFA0 */
            uint32_t start : 16;           /* 15:0 SW=rw HW=ro 0x36 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 16;           /* 0:15 SW=rw HW=ro 0x36 */
            uint32_t total : 16;           /* 16:31 SW=rw HW=ro 0xFA0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_horizontal_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t width : 16;           /* 31:16 SW=rw HW=ro 0xF00 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t sync_width : 15;           /* 14:0 SW=rw HW=ro 0x20 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sync_width : 15;           /* 0:14 SW=rw HW=ro 0x20 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t width : 16;           /* 16:31 SW=rw HW=ro 0xF00 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_horizontal_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t total : 16;           /* 31:16 SW=rw HW=ro 0x8AE */
            uint32_t start : 16;           /* 15:0 SW=rw HW=ro 0x50 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start : 16;           /* 0:15 SW=rw HW=ro 0x50 */
            uint32_t total : 16;           /* 16:31 SW=rw HW=ro 0x8AE */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_vertical_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t height : 16;           /* 31:16 SW=rw HW=ro 0x870 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t sync_width : 15;           /* 14:0 SW=rw HW=ro 0x5 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sync_width : 15;           /* 0:14 SW=rw HW=ro 0x5 */
            uint32_t polarity : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t height : 16;           /* 16:31 SW=rw HW=ro 0x870 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_vertical_1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv19 : 13;
            uint32_t reserved : 3;           /* 18:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t vsc_sdp : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t y_only : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t stereo : 2;           /* 10:9 SW=rw HW=ro 0x0 */
            uint32_t int_total : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t color : 7;           /* 7:1 SW=rw HW=ro 0x10 */
            uint32_t clk_sync : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t clk_sync : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t color : 7;           /* 1:7 SW=rw HW=ro 0x10 */
            uint32_t int_total : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t stereo : 2;           /* 9:10 SW=rw HW=ro 0x0 */
            uint32_t y_only : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t vsc_sdp : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t reserved : 3;           /* 16:18 SW=rw HW=ro 0x0 */
            uint32_t resv19 : 13;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_misc;

typedef struct {
    bb_chip_dp_source_main_stream_generator_msa_control_0  control_0;
    bb_chip_dp_source_main_stream_generator_msa_control_1  control_1;
    bb_chip_dp_source_main_stream_generator_msa_mvid  mvid;
    bb_chip_dp_source_main_stream_generator_msa_nvid  nvid;
    bb_chip_dp_source_main_stream_generator_msa_horizontal_0  horizontal_0;
    bb_chip_dp_source_main_stream_generator_msa_horizontal_1  horizontal_1;
    bb_chip_dp_source_main_stream_generator_msa_vertical_0  vertical_0;
    bb_chip_dp_source_main_stream_generator_msa_vertical_1  vertical_1;
    bb_chip_dp_source_main_stream_generator_msa_misc  misc;
    
} bb_chip_dp_source_main_stream_generator_msa;


/*section : msa_dp */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t mvid : 24;           /* 23:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mvid : 24;           /* 0:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_dp_mvid;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t nvid : 24;           /* 23:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nvid : 24;           /* 0:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_msa_dp_nvid;

typedef struct {
    bb_chip_dp_source_main_stream_generator_msa_dp_mvid  mvid;
    bb_chip_dp_source_main_stream_generator_msa_dp_nvid  nvid;
    
} bb_chip_dp_source_main_stream_generator_msa_dp;


typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t state_vid : 2;           /* 9:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t state_dp : 2;           /* 1:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t state_dp : 2;           /* 0:1 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t state_vid : 2;           /* 8:9 SW=ro HW=wo 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fsm_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t level : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t level : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_cs_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t ae1 : 1;           /* 7 SW=ro HW=wo 0x1 */
            uint32_t af1 : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t ae0 : 1;           /* 5 SW=ro HW=wo 0x1 */
            uint32_t af0 : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x1 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t af0 : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t ae0 : 1;           /* 5 SW=ro HW=wo 0x1 */
            uint32_t af1 : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t ae1 : 1;           /* 7 SW=ro HW=wo 0x1 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_cs_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t aet0 : 16;           /* 31:16 SW=rw HW=ro 0x168 */
            uint32_t aft0 : 16;           /* 15:0 SW=rw HW=ro 0x168 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t aft0 : 16;           /* 0:15 SW=rw HW=ro 0x168 */
            uint32_t aet0 : 16;           /* 16:31 SW=rw HW=ro 0x168 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_cs_control0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t aet1 : 16;           /* 31:16 SW=rw HW=ro 0x21C */
            uint32_t aft1 : 16;           /* 15:0 SW=rw HW=ro 0x21C */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t aft1 : 16;           /* 0:15 SW=rw HW=ro 0x21C */
            uint32_t aet1 : 16;           /* 16:31 SW=rw HW=ro 0x21C */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_cs_control1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t depth : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_cs_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t level : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t level : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_pix_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t sr_0_underflow : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t sr_1_underflow : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t sr_2_underflow : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t sr_3_underflow : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_ae1 : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_af1 : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_ae0 : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_af0 : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_empty : 1;           /* 0 SW=ro HW=wo 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_0_empty : 1;           /* 0 SW=ro HW=wo 0x1 */
            uint32_t fifo_0_full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_af0 : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_ae0 : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_af1 : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t fifo_0_ae1 : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t sr_3_underflow : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t sr_2_underflow : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t sr_1_underflow : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t sr_0_underflow : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_pix_sr_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t aet0 : 16;           /* 31:16 SW=rw HW=ro 0x800 */
            uint32_t aft0 : 16;           /* 15:0 SW=rw HW=ro 0x800 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t aft0 : 16;           /* 0:15 SW=rw HW=ro 0x800 */
            uint32_t aet0 : 16;           /* 16:31 SW=rw HW=ro 0x800 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_pix_control0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t aet1 : 16;           /* 31:16 SW=rw HW=ro 0x400 */
            uint32_t aft1 : 16;           /* 15:0 SW=rw HW=ro 0x400 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t aft1 : 16;           /* 0:15 SW=rw HW=ro 0x400 */
            uint32_t aet1 : 16;           /* 16:31 SW=rw HW=ro 0x400 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_pix_control1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t offset : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t offset : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_pix_control2;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t depth : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_pix_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x1 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_sdp_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t empty : 1;           /* 0 SW=ro HW=wo 0x1 */
            uint32_t full : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_status;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv11 : 21;
            uint32_t depth : 11;           /* 10:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 11;           /* 0:10 SW=ro HW=wo 0x0 */
            uint32_t resv11 : 21;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_sdp_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t depth : 9;           /* 8:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t depth : 9;           /* 0:8 SW=ro HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t maud_set_value : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t maud_method_sel : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t audiomute_flag : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t audiomute_flag : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t maud_method_sel : 1;           /* 1 SW=rw HW=ro 0x0 */
            
            uint32_t resv2 : 6;
            uint32_t maud_set_value : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_sdp_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t cnt : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t cnt_rst : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cnt_rst : 1;           /* 0 SW=rw HW=ro 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t cnt : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_idle_pattern_debug;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t vbid : 8;           /* 23:16 SW=ro HW=wo 0x0 */
            uint32_t maud : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t mvid : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mvid : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t maud : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t vbid : 8;           /* 16:23 SW=ro HW=wo 0x0 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stream_generator_vbd;

typedef struct {
    bb_chip_dp_source_main_stream_generator_cfg0  cfg0;
    bb_chip_dp_source_main_stream_generator_cfg1  cfg1;
    bb_chip_dp_source_main_stream_generator_cfg2  cfg2;
    bb_chip_dp_source_main_stream_generator_cfg3  cfg3;
    bb_chip_dp_source_main_stream_generator_cs_pkt_updated_interval  cs_pkt_updated_interval;
    bb_chip_dp_source_main_stream_generator_dp_width_total_actual  dp_width_total_actual;
    bb_chip_dp_source_main_stream_generator_alu0  alu0;
    bb_chip_dp_source_main_stream_generator_alu1  alu1;
    bb_chip_dp_source_main_stream_generator_alu2  alu2;
    
    union {
        bb_chip_dp_source_main_stream_generator_msa s;
        uint8_t filler[0x24];
    } msa;
    
    union {
        bb_chip_dp_source_main_stream_generator_msa_dp s;
        uint8_t filler[0x8];
    } msa_dp;
    bb_chip_dp_source_main_stream_generator_fsm_status  fsm_status;
    bb_chip_dp_source_main_stream_generator_fifo_cs_level  fifo_cs_level;
    bb_chip_dp_source_main_stream_generator_fifo_cs_status  fifo_cs_status;
    bb_chip_dp_source_main_stream_generator_fifo_cs_control0  fifo_cs_control0;
    bb_chip_dp_source_main_stream_generator_fifo_cs_control1  fifo_cs_control1;
    bb_chip_dp_source_main_stream_generator_fifo_cs_config  fifo_cs_config;
    bb_chip_dp_source_main_stream_generator_fifo_pix_level  fifo_pix_level;
    bb_chip_dp_source_main_stream_generator_fifo_pix_sr_status  fifo_pix_sr_status;
    bb_chip_dp_source_main_stream_generator_fifo_pix_control0  fifo_pix_control0;
    bb_chip_dp_source_main_stream_generator_fifo_pix_control1  fifo_pix_control1;
    bb_chip_dp_source_main_stream_generator_fifo_pix_control2  fifo_pix_control2;
    bb_chip_dp_source_main_stream_generator_fifo_pix_config  fifo_pix_config;
    bb_chip_dp_source_main_stream_generator_fifo_sdp_status  fifo_sdp_status;
    bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_status  fifo_sdp_tag_status;
    bb_chip_dp_source_main_stream_generator_fifo_sdp_config  fifo_sdp_config;
    bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_config  fifo_sdp_tag_config;
    bb_chip_dp_source_main_stream_generator_sdp_ctrl  sdp_ctrl;
    bb_chip_dp_source_main_stream_generator_idle_pattern_debug  idle_pattern_debug;
    bb_chip_dp_source_main_stream_generator_vbd  vbd;
    
} bb_chip_dp_source_main_stream_generator;


/*section : decoder_error_status */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t vfr_handshake : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            uint32_t cfr_handshake : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cfr_handshake : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t vfr_handshake : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_decoder_error_status_handshake;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t err_id : 8;           /* 15:8 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t err_flag : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t err_flag : 1;           /* 0 SW=ro HW=wo 0x0 */
            
            uint32_t resv1 : 7;
            uint32_t err_id : 8;           /* 8:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_decoder_error_status_error_id;

typedef struct {
    bb_chip_dp_source_main_decoder_error_status_handshake  handshake;
    bb_chip_dp_source_main_decoder_error_status_error_id  error_id;
    
} bb_chip_dp_source_main_decoder_error_status;


/*section : compliance */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t byte3 : 8;           /* 31:24 SW=rw HW=ro 0x0 */
            uint32_t byte2 : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t byte1 : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t byte0 : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t byte0 : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t byte1 : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t byte2 : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t byte3 : 8;           /* 24:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_compliance_custom_80bits_3_0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t byte7 : 8;           /* 31:24 SW=rw HW=ro 0x0 */
            uint32_t byte6 : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t byte5 : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t byte4 : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t byte4 : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t byte5 : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t byte6 : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t byte7 : 8;           /* 24:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_compliance_custom_80bits_7_4;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t byte9 : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t byte8 : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t byte8 : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t byte9 : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_compliance_custom_80bits_9_8;

typedef struct {
    bb_chip_dp_source_main_compliance_custom_80bits_3_0  custom_80bits_3_0;
    bb_chip_dp_source_main_compliance_custom_80bits_7_4  custom_80bits_7_4;
    bb_chip_dp_source_main_compliance_custom_80bits_9_8  custom_80bits_9_8;
    
} bb_chip_dp_source_main_compliance;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t fifo_pix_0_level_watermark : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t fifo_pix_0_level : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t pix_0_sr_underflow : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t pix_1_sr_underflow : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pix_2_sr_underflow : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pix_3_sr_underflow : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_pix_0_underflow : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t fifo_pix_0_overflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_pix_0_empty : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t fifo_pix_0_full : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_pix_0_full : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t fifo_pix_0_empty : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t fifo_pix_0_overflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_pix_0_underflow : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pix_3_sr_underflow : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pix_2_sr_underflow : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pix_1_sr_underflow : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pix_0_sr_underflow : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t fifo_pix_0_level : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t fifo_pix_0_level_watermark : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_pix_0_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_pix_0_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_fifo_pix_0_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_pix_0_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_pix_0_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_fifo_pix_0_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_pix_0_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_pix_0_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_fifo_pix_0_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_pix_0_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_pix_0_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_fifo_pix_0_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pix_0_sr_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pix_0_sr_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_pix_0_sr_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pix_1_sr_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pix_1_sr_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_pix_1_sr_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pix_2_sr_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pix_2_sr_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_pix_2_sr_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pix_3_sr_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pix_3_sr_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_pix_3_sr_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t fifo_pix_0_level : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_pix_0_level : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_fifo_pix_0_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t fifo_pix_0_level_watermark : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_pix_0_level_watermark : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats0_fifo_pix_0_level_watermark;

typedef struct {
    bb_chip_dp_source_main_stats0_rd2clr_config  rd2clr_config;
    bb_chip_dp_source_main_stats0_fifo_pix_0_full  fifo_pix_0_full;
    bb_chip_dp_source_main_stats0_fifo_pix_0_empty  fifo_pix_0_empty;
    bb_chip_dp_source_main_stats0_fifo_pix_0_overflow  fifo_pix_0_overflow;
    bb_chip_dp_source_main_stats0_fifo_pix_0_underflow  fifo_pix_0_underflow;
    bb_chip_dp_source_main_stats0_pix_0_sr_underflow  pix_0_sr_underflow;
    bb_chip_dp_source_main_stats0_pix_1_sr_underflow  pix_1_sr_underflow;
    bb_chip_dp_source_main_stats0_pix_2_sr_underflow  pix_2_sr_underflow;
    bb_chip_dp_source_main_stats0_pix_3_sr_underflow  pix_3_sr_underflow;
    bb_chip_dp_source_main_stats0_fifo_pix_0_level  fifo_pix_0_level;
    bb_chip_dp_source_main_stats0_fifo_pix_0_level_watermark  fifo_pix_0_level_watermark;
    
} bb_chip_dp_source_main_stats0;


/*section : stats1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv23 : 9;
            uint32_t sdp_ptp_pkt_sop_in : 1;           /* 22 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_level_watermark : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_level : 1;           /* 20 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_underflow : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_overflow : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_empty : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_full : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_level_watermark : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_level : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_underflow : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_overflow : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_empty : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_full : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_level_watermark : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_level : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_af1 : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_af0 : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_ae1 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_ae0 : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_underflow : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_overflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_empty : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_full : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_full : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_empty : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_overflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_underflow : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_ae0 : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_ae1 : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_af0 : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_af1 : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_level : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t fifo_cs_level_watermark : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_full : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_empty : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_overflow : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_underflow : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_level : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_level_watermark : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_full : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_empty : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_overflow : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_underflow : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_level : 1;           /* 20 SW=rw HW=ro 0x0 */
            uint32_t fifo_sdp_tag_level_watermark : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t sdp_ptp_pkt_sop_in : 1;           /* 22 SW=rw HW=ro 0x0 */
            uint32_t resv23 : 9;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_cs_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_cs_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_cs_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_cs_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_cs_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_cs_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_cs_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_cs_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_cs_ae0 : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_ae0 : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_cs_ae0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_cs_ae1 : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_ae1 : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_cs_ae1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_cs_af0 : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_af0 : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_cs_af0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_cs_af1 : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_af1 : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_cs_af1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t fifo_cs_level : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_level : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_cs_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t fifo_cs_level_watermark : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_cs_level_watermark : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_cs_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_sdp_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_sdp_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_sdp_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_sdp_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t fifo_sdp_level : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_level : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t fifo_sdp_level_watermark : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_level_watermark : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_sdp_tag_full : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_tag_full : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_tag_full;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_sdp_tag_empty : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_tag_empty : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_tag_empty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_sdp_tag_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_tag_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_tag_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_sdp_tag_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_tag_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_tag_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_sdp_tag_level : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_tag_level : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_tag_level;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_sdp_tag_level_watermark : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_sdp_tag_level_watermark : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_watermark;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t sdp_ptp_pkt_sop_in : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sdp_ptp_pkt_sop_in : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_stats1_sdp_ptp_pkt_sop_in;

typedef struct {
    bb_chip_dp_source_main_stats1_rd2clr_config  rd2clr_config;
    bb_chip_dp_source_main_stats1_fifo_cs_full  fifo_cs_full;
    bb_chip_dp_source_main_stats1_fifo_cs_empty  fifo_cs_empty;
    bb_chip_dp_source_main_stats1_fifo_cs_overflow  fifo_cs_overflow;
    bb_chip_dp_source_main_stats1_fifo_cs_underflow  fifo_cs_underflow;
    bb_chip_dp_source_main_stats1_fifo_cs_ae0  fifo_cs_ae0;
    bb_chip_dp_source_main_stats1_fifo_cs_ae1  fifo_cs_ae1;
    bb_chip_dp_source_main_stats1_fifo_cs_af0  fifo_cs_af0;
    bb_chip_dp_source_main_stats1_fifo_cs_af1  fifo_cs_af1;
    bb_chip_dp_source_main_stats1_fifo_cs_level  fifo_cs_level;
    bb_chip_dp_source_main_stats1_fifo_cs_level_watermark  fifo_cs_level_watermark;
    bb_chip_dp_source_main_stats1_fifo_sdp_full  fifo_sdp_full;
    bb_chip_dp_source_main_stats1_fifo_sdp_empty  fifo_sdp_empty;
    bb_chip_dp_source_main_stats1_fifo_sdp_overflow  fifo_sdp_overflow;
    bb_chip_dp_source_main_stats1_fifo_sdp_underflow  fifo_sdp_underflow;
    bb_chip_dp_source_main_stats1_fifo_sdp_level  fifo_sdp_level;
    bb_chip_dp_source_main_stats1_fifo_sdp_level_watermark  fifo_sdp_level_watermark;
    bb_chip_dp_source_main_stats1_fifo_sdp_tag_full  fifo_sdp_tag_full;
    bb_chip_dp_source_main_stats1_fifo_sdp_tag_empty  fifo_sdp_tag_empty;
    bb_chip_dp_source_main_stats1_fifo_sdp_tag_overflow  fifo_sdp_tag_overflow;
    bb_chip_dp_source_main_stats1_fifo_sdp_tag_underflow  fifo_sdp_tag_underflow;
    bb_chip_dp_source_main_stats1_fifo_sdp_tag_level  fifo_sdp_tag_level;
    bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_watermark  fifo_sdp_tag_level_watermark;
    bb_chip_dp_source_main_stats1_sdp_ptp_pkt_sop_in  sdp_ptp_pkt_sop_in;
    
} bb_chip_dp_source_main_stats1;


/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t msa_dp_mvid_measured_update : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t first_idle_pattern_sent : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t decoder_err_flag : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t fifo_pix_0_underflow : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t fifo_pix_0_overflow : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t fifo_sdp_underflow : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t fifo_sdp_overflow : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t fifo_sdp_tag_underflow : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t fifo_sdp_tag_overflow : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t fifo_cs_underflow : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t fifo_cs_overflow : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t video_stream_end : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t video_stream_end : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t fifo_cs_overflow : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t fifo_cs_underflow : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t fifo_sdp_tag_overflow : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t fifo_sdp_tag_underflow : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t fifo_sdp_overflow : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t fifo_sdp_underflow : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t fifo_pix_0_overflow : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t fifo_pix_0_underflow : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t decoder_err_flag : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t first_idle_pattern_sent : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t msa_dp_mvid_measured_update : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t msa_dp_mvid_measured_update : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t first_idle_pattern_sent : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t decoder_err_flag : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_pix_0_underflow : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_pix_0_overflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_sdp_underflow : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_sdp_overflow : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_sdp_tag_underflow : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_sdp_tag_overflow : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_cs_underflow : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_cs_overflow : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t video_stream_end : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t video_stream_end : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_cs_overflow : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_cs_underflow : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_sdp_tag_overflow : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_sdp_tag_underflow : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_sdp_overflow : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_sdp_underflow : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_pix_0_overflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t fifo_pix_0_underflow : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t decoder_err_flag : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t first_idle_pattern_sent : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t msa_dp_mvid_measured_update : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t msa_dp_mvid_measured_update : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t first_idle_pattern_sent : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t decoder_err_flag : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t fifo_pix_0_underflow : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t fifo_pix_0_overflow : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t fifo_sdp_underflow : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t fifo_sdp_overflow : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t fifo_sdp_tag_underflow : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t fifo_sdp_tag_overflow : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t fifo_cs_underflow : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t fifo_cs_overflow : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t video_stream_end : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t video_stream_end : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t fifo_cs_overflow : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t fifo_cs_underflow : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t fifo_sdp_tag_overflow : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t fifo_sdp_tag_underflow : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t fifo_sdp_overflow : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t fifo_sdp_underflow : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t fifo_pix_0_overflow : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t fifo_pix_0_underflow : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t decoder_err_flag : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t first_idle_pattern_sent : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t msa_dp_mvid_measured_update : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t msa_dp_mvid_measured_update : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t first_idle_pattern_sent : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t decoder_err_flag : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t fifo_pix_0_underflow : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t fifo_pix_0_overflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t fifo_sdp_underflow : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t fifo_sdp_overflow : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t fifo_sdp_tag_underflow : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t fifo_sdp_tag_overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t fifo_cs_underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t fifo_cs_overflow : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t video_stream_end : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t video_stream_end : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t fifo_cs_overflow : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t fifo_cs_underflow : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t fifo_sdp_tag_overflow : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t fifo_sdp_tag_underflow : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t fifo_sdp_overflow : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t fifo_sdp_underflow : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t fifo_pix_0_overflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t fifo_pix_0_underflow : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t decoder_err_flag : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t first_idle_pattern_sent : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t msa_dp_mvid_measured_update : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_main_irq_raw;

typedef struct {
    bb_chip_dp_source_main_irq_enable  enable;
    bb_chip_dp_source_main_irq_pending  pending;
    bb_chip_dp_source_main_irq_pending_irq  pending_irq;
    bb_chip_dp_source_main_irq_raw  raw;
    
} bb_chip_dp_source_main_irq;


typedef struct {
    bb_chip_dp_source_main_version  version;
    bb_chip_dp_source_main_configuration  configuration;
    bb_chip_dp_source_main_scrambler  scrambler;
    
    union {
        bb_chip_dp_source_main_stream_generator s;
        uint8_t filler[0x9C];
    } stream_generator;
    
    union {
        bb_chip_dp_source_main_decoder_error_status s;
        uint8_t filler[0x8];
    } decoder_error_status;
    
    union {
        bb_chip_dp_source_main_compliance s;
        uint8_t filler[0xC];
    } compliance;
    
    union {
        bb_chip_dp_source_main_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
    union {
        bb_chip_dp_source_main_stats1 s;
        uint8_t filler[0x60];
    } stats1;
    
    union {
        bb_chip_dp_source_main_irq s;
        uint8_t filler[0x10];
    } irq;
    
} bb_chip_dp_source_main_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_dp_source_main_version_READMASK 0xFFFFFF
#define bb_chip_dp_source_main_version_WRITEMASK 0x0
#define bb_chip_dp_source_main_version_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_version_RESETMASK 0xFFFFFF
#define bb_chip_dp_source_main_version_DEFAULT 0x000B0900

#define bb_chip_dp_source_main_configuration_READMASK 0xF103FFFF
#define bb_chip_dp_source_main_configuration_WRITEMASK 0xF103FFFF
#define bb_chip_dp_source_main_configuration_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_configuration_RESETMASK 0xF103FFFF
#define bb_chip_dp_source_main_configuration_DEFAULT 0x00001043

#define bb_chip_dp_source_main_scrambler_READMASK 0x1
#define bb_chip_dp_source_main_scrambler_WRITEMASK 0x1
#define bb_chip_dp_source_main_scrambler_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_scrambler_RESETMASK 0x1
#define bb_chip_dp_source_main_scrambler_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_cfg0_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_cfg0_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_cfg0_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_cfg0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_cfg0_DEFAULT 0x3E85A200

#define bb_chip_dp_source_main_stream_generator_cfg1_READMASK 0x7FFFFF
#define bb_chip_dp_source_main_stream_generator_cfg1_WRITEMASK 0x7FFFFF
#define bb_chip_dp_source_main_stream_generator_cfg1_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_cfg1_RESETMASK 0x7FFFFF
#define bb_chip_dp_source_main_stream_generator_cfg1_DEFAULT 0x000143F4

#define bb_chip_dp_source_main_stream_generator_cfg2_READMASK 0xF80000FF
#define bb_chip_dp_source_main_stream_generator_cfg2_WRITEMASK 0xF80000FF
#define bb_chip_dp_source_main_stream_generator_cfg2_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_cfg2_RESETMASK 0xF80000FF
#define bb_chip_dp_source_main_stream_generator_cfg2_DEFAULT 0x00000011

#define bb_chip_dp_source_main_stream_generator_cfg3_READMASK 0xF800FFFF
#define bb_chip_dp_source_main_stream_generator_cfg3_WRITEMASK 0xF800FFFF
#define bb_chip_dp_source_main_stream_generator_cfg3_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_cfg3_RESETMASK 0xF800FFFF
#define bb_chip_dp_source_main_stream_generator_cfg3_DEFAULT 0x00008844

#define bb_chip_dp_source_main_stream_generator_cs_pkt_updated_interval_READMASK 0x1FFF
#define bb_chip_dp_source_main_stream_generator_cs_pkt_updated_interval_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_cs_pkt_updated_interval_VOLATILEMASK 0x1FFF
#define bb_chip_dp_source_main_stream_generator_cs_pkt_updated_interval_RESETMASK 0x1FFF
#define bb_chip_dp_source_main_stream_generator_cs_pkt_updated_interval_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_dp_width_total_actual_READMASK 0x7FFF
#define bb_chip_dp_source_main_stream_generator_dp_width_total_actual_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_dp_width_total_actual_VOLATILEMASK 0x7FFF
#define bb_chip_dp_source_main_stream_generator_dp_width_total_actual_RESETMASK 0x7FFF
#define bb_chip_dp_source_main_stream_generator_dp_width_total_actual_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_alu0_READMASK 0x7FFF7FFF
#define bb_chip_dp_source_main_stream_generator_alu0_WRITEMASK 0x7FFF7FFF
#define bb_chip_dp_source_main_stream_generator_alu0_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_alu0_RESETMASK 0x7FFF7FFF
#define bb_chip_dp_source_main_stream_generator_alu0_DEFAULT 0x0DA40FA0

#define bb_chip_dp_source_main_stream_generator_alu1_READMASK 0x7FFFFF
#define bb_chip_dp_source_main_stream_generator_alu1_WRITEMASK 0x7FFFFF
#define bb_chip_dp_source_main_stream_generator_alu1_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_alu1_RESETMASK 0x7FFFFF
#define bb_chip_dp_source_main_stream_generator_alu1_DEFAULT 0x00404836

#define bb_chip_dp_source_main_stream_generator_alu2_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_alu2_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_alu2_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_alu2_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_alu2_DEFAULT 0x000D05A0

#define bb_chip_dp_source_main_stream_generator_msa_control_0_READMASK 0x7FFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_control_0_WRITEMASK 0x7FFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_control_0_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_control_0_RESETMASK 0x7FFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_control_0_DEFAULT 0x00004666

#define bb_chip_dp_source_main_stream_generator_msa_control_1_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_control_1_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_control_1_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_control_1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_control_1_DEFAULT 0x00008000

#define bb_chip_dp_source_main_stream_generator_msa_mvid_READMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_mvid_WRITEMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_mvid_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_mvid_RESETMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_mvid_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_msa_nvid_READMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_nvid_WRITEMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_nvid_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_nvid_RESETMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_nvid_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_msa_horizontal_0_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_0_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_0_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_0_DEFAULT 0x0FA00036

#define bb_chip_dp_source_main_stream_generator_msa_horizontal_1_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_1_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_1_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_1_DEFAULT 0x0F000020

#define bb_chip_dp_source_main_stream_generator_msa_vertical_0_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_vertical_0_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_vertical_0_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_vertical_0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_vertical_0_DEFAULT 0x08AE0050

#define bb_chip_dp_source_main_stream_generator_msa_vertical_1_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_vertical_1_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_vertical_1_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_vertical_1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_vertical_1_DEFAULT 0x08700005

#define bb_chip_dp_source_main_stream_generator_msa_misc_READMASK 0x71FFF
#define bb_chip_dp_source_main_stream_generator_msa_misc_WRITEMASK 0x71FFF
#define bb_chip_dp_source_main_stream_generator_msa_misc_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_misc_RESETMASK 0x71FFF
#define bb_chip_dp_source_main_stream_generator_msa_misc_DEFAULT 0x00000020

#define bb_chip_dp_source_main_stream_generator_msa_dp_mvid_READMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_dp_mvid_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_dp_mvid_VOLATILEMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_dp_mvid_RESETMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_dp_mvid_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_msa_dp_nvid_READMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_dp_nvid_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_msa_dp_nvid_VOLATILEMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_dp_nvid_RESETMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_msa_dp_nvid_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_fsm_status_READMASK 0x303
#define bb_chip_dp_source_main_stream_generator_fsm_status_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fsm_status_VOLATILEMASK 0x303
#define bb_chip_dp_source_main_stream_generator_fsm_status_RESETMASK 0x303
#define bb_chip_dp_source_main_stream_generator_fsm_status_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_fifo_cs_level_READMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_level_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_cs_level_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_level_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_level_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_fifo_cs_status_READMASK 0xFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_status_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_cs_status_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_status_RESETMASK 0xFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_status_DEFAULT 0x000000A1

#define bb_chip_dp_source_main_stream_generator_fifo_cs_control0_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control0_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control0_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control0_DEFAULT 0x01680168

#define bb_chip_dp_source_main_stream_generator_fifo_cs_control1_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control1_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control1_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control1_DEFAULT 0x021C021C

#define bb_chip_dp_source_main_stream_generator_fifo_cs_config_READMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_config_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_cs_config_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_config_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_cs_config_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_fifo_pix_level_READMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_level_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_pix_level_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_level_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_level_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_fifo_pix_sr_status_READMASK 0xFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_sr_status_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_pix_sr_status_VOLATILEMASK 0xFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_sr_status_RESETMASK 0xFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_sr_status_DEFAULT 0x00000001

#define bb_chip_dp_source_main_stream_generator_fifo_pix_control0_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control0_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control0_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control0_DEFAULT 0x08000800

#define bb_chip_dp_source_main_stream_generator_fifo_pix_control1_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control1_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control1_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control1_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control1_DEFAULT 0x04000400

#define bb_chip_dp_source_main_stream_generator_fifo_pix_control2_READMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control2_WRITEMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control2_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control2_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control2_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_fifo_pix_config_READMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_config_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_pix_config_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_config_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stream_generator_fifo_pix_config_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_fifo_sdp_status_READMASK 0xF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_status_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_status_VOLATILEMASK 0xF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_status_RESETMASK 0xF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_status_DEFAULT 0x00000001

#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_status_READMASK 0xF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_status_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_status_VOLATILEMASK 0xF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_status_RESETMASK 0xF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_status_DEFAULT 0x00000001

#define bb_chip_dp_source_main_stream_generator_fifo_sdp_config_READMASK 0x7FF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_config_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_config_VOLATILEMASK 0x7FF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_config_RESETMASK 0x7FF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_config_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_config_READMASK 0x1FF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_config_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_config_VOLATILEMASK 0x1FF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_config_RESETMASK 0x1FF
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_config_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_sdp_ctrl_READMASK 0xFF03
#define bb_chip_dp_source_main_stream_generator_sdp_ctrl_WRITEMASK 0xFF03
#define bb_chip_dp_source_main_stream_generator_sdp_ctrl_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_sdp_ctrl_RESETMASK 0xFF03
#define bb_chip_dp_source_main_stream_generator_sdp_ctrl_DEFAULT 0x00000001

#define bb_chip_dp_source_main_stream_generator_idle_pattern_debug_READMASK 0xFF01
#define bb_chip_dp_source_main_stream_generator_idle_pattern_debug_WRITEMASK 0x1
#define bb_chip_dp_source_main_stream_generator_idle_pattern_debug_VOLATILEMASK 0xFF00
#define bb_chip_dp_source_main_stream_generator_idle_pattern_debug_RESETMASK 0xFF01
#define bb_chip_dp_source_main_stream_generator_idle_pattern_debug_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stream_generator_vbd_READMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_vbd_WRITEMASK 0x0
#define bb_chip_dp_source_main_stream_generator_vbd_VOLATILEMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_vbd_RESETMASK 0xFFFFFF
#define bb_chip_dp_source_main_stream_generator_vbd_DEFAULT 0x00000000

#define bb_chip_dp_source_main_decoder_error_status_handshake_READMASK 0xFFFF
#define bb_chip_dp_source_main_decoder_error_status_handshake_WRITEMASK 0x0
#define bb_chip_dp_source_main_decoder_error_status_handshake_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_decoder_error_status_handshake_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_decoder_error_status_handshake_DEFAULT 0x00000000

#define bb_chip_dp_source_main_decoder_error_status_error_id_READMASK 0xFF01
#define bb_chip_dp_source_main_decoder_error_status_error_id_WRITEMASK 0x0
#define bb_chip_dp_source_main_decoder_error_status_error_id_VOLATILEMASK 0xFF01
#define bb_chip_dp_source_main_decoder_error_status_error_id_RESETMASK 0xFF01
#define bb_chip_dp_source_main_decoder_error_status_error_id_DEFAULT 0x00000000

#define bb_chip_dp_source_main_compliance_custom_80bits_3_0_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_compliance_custom_80bits_3_0_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_compliance_custom_80bits_3_0_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_compliance_custom_80bits_3_0_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_compliance_custom_80bits_3_0_DEFAULT 0x00000000

#define bb_chip_dp_source_main_compliance_custom_80bits_7_4_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_compliance_custom_80bits_7_4_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_compliance_custom_80bits_7_4_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_compliance_custom_80bits_7_4_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_main_compliance_custom_80bits_7_4_DEFAULT 0x00000000

#define bb_chip_dp_source_main_compliance_custom_80bits_9_8_READMASK 0xFFFF
#define bb_chip_dp_source_main_compliance_custom_80bits_9_8_WRITEMASK 0xFFFF
#define bb_chip_dp_source_main_compliance_custom_80bits_9_8_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_compliance_custom_80bits_9_8_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_compliance_custom_80bits_9_8_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_dp_source_main_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_dp_source_main_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_dp_source_main_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_fifo_pix_0_full_READMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_full_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats0_fifo_pix_0_full_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_full_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_full_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_fifo_pix_0_empty_READMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_empty_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats0_fifo_pix_0_empty_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_empty_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_empty_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_fifo_pix_0_overflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_overflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats0_fifo_pix_0_overflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_overflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_overflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_fifo_pix_0_underflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_underflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats0_fifo_pix_0_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_underflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_underflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_pix_0_sr_underflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_0_sr_underflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats0_pix_0_sr_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_0_sr_underflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_0_sr_underflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_pix_1_sr_underflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_1_sr_underflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats0_pix_1_sr_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_1_sr_underflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_1_sr_underflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_pix_2_sr_underflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_2_sr_underflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats0_pix_2_sr_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_2_sr_underflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_2_sr_underflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_pix_3_sr_underflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_3_sr_underflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats0_pix_3_sr_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_3_sr_underflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats0_pix_3_sr_underflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_READMASK 0xFFFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_watermark_READMASK 0xFFFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_watermark_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_watermark_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_watermark_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_watermark_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_rd2clr_config_READMASK 0x7FFFFF
#define bb_chip_dp_source_main_stats1_rd2clr_config_WRITEMASK 0x7FFFFF
#define bb_chip_dp_source_main_stats1_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_stats1_rd2clr_config_RESETMASK 0x7FFFFF
#define bb_chip_dp_source_main_stats1_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_cs_full_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_full_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_full_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_full_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_full_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_cs_empty_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_empty_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_empty_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_empty_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_empty_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_cs_overflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_overflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_overflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_overflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_overflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_cs_underflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_underflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_underflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_underflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_cs_ae0_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_ae0_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_ae0_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_ae0_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_ae0_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_cs_ae1_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_ae1_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_ae1_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_ae1_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_ae1_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_cs_af0_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_af0_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_af0_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_af0_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_af0_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_cs_af1_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_af1_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_af1_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_af1_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_cs_af1_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_cs_level_READMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_cs_level_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_level_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_cs_level_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_cs_level_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_cs_level_watermark_READMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_cs_level_watermark_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_level_watermark_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_cs_level_watermark_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_cs_level_watermark_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_full_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_full_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_full_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_full_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_full_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_empty_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_empty_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_empty_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_empty_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_empty_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_overflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_overflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_overflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_overflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_overflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_underflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_underflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_underflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_underflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_level_READMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_level_watermark_READMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_watermark_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_watermark_VOLATILEMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_watermark_RESETMASK 0xFFFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_watermark_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_full_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_full_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_full_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_full_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_full_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_empty_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_empty_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_empty_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_empty_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_empty_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_overflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_overflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_overflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_overflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_overflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_underflow_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_underflow_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_underflow_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_underflow_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_underflow_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_watermark_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_watermark_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_watermark_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_watermark_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_watermark_DEFAULT 0x00000000

#define bb_chip_dp_source_main_stats1_sdp_ptp_pkt_sop_in_READMASK 0xFF
#define bb_chip_dp_source_main_stats1_sdp_ptp_pkt_sop_in_WRITEMASK 0x0
#define bb_chip_dp_source_main_stats1_sdp_ptp_pkt_sop_in_VOLATILEMASK 0xFF
#define bb_chip_dp_source_main_stats1_sdp_ptp_pkt_sop_in_RESETMASK 0xFF
#define bb_chip_dp_source_main_stats1_sdp_ptp_pkt_sop_in_DEFAULT 0x00000000

#define bb_chip_dp_source_main_irq_enable_READMASK 0xFFF
#define bb_chip_dp_source_main_irq_enable_WRITEMASK 0xFFF
#define bb_chip_dp_source_main_irq_enable_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_irq_enable_RESETMASK 0xFFF
#define bb_chip_dp_source_main_irq_enable_DEFAULT 0x00000000

#define bb_chip_dp_source_main_irq_pending_READMASK 0xFFF
#define bb_chip_dp_source_main_irq_pending_WRITEMASK 0xFFF
#define bb_chip_dp_source_main_irq_pending_VOLATILEMASK 0xFFF
#define bb_chip_dp_source_main_irq_pending_RESETMASK 0xFFF
#define bb_chip_dp_source_main_irq_pending_DEFAULT 0x00000000

#define bb_chip_dp_source_main_irq_pending_irq_READMASK 0xFFF
#define bb_chip_dp_source_main_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_dp_source_main_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_dp_source_main_irq_pending_irq_RESETMASK 0xFFF
#define bb_chip_dp_source_main_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_dp_source_main_irq_raw_READMASK 0xFFF
#define bb_chip_dp_source_main_irq_raw_WRITEMASK 0x0
#define bb_chip_dp_source_main_irq_raw_VOLATILEMASK 0xFFF
#define bb_chip_dp_source_main_irq_raw_RESETMASK 0xFFF
#define bb_chip_dp_source_main_irq_raw_DEFAULT 0x00000000

/*block : dp_source_tico */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t tico_d_config : 2;           /* 1:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_config : 2;           /* 0:1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t tico_d_width : 16;           /* 15:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_width : 16;           /* 0:15 SW=ro HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_width;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t tico_d_height : 16;           /* 15:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_height : 16;           /* 0:15 SW=ro HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_height;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t tico_d_comp : 2;           /* 1:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_comp : 2;           /* 0:1 SW=ro HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_comp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t tico_d_mode : 2;           /* 1:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_mode : 2;           /* 0:1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_mode;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t tico_d_hlvls : 3;           /* 2:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_hlvls : 3;           /* 0:2 SW=ro HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_hlvls;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t tico_d_vld : 1;           /* 0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_vld : 1;           /* 0 SW=wo HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_vld;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t tico_d_nbr : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_nbr : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_nbr;

typedef union {
    struct {
        uint32_t tico_d_bgt : 32;           /* 31:0 SW=ro HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_bgt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t tico_d_vid_depth : 4;           /* 3:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_vid_depth : 4;           /* 0:3 SW=ro HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_vid_depth;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t tico_d_play_mode : 1;           /* 0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_play_mode : 1;           /* 0 SW=wo HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_play_mode;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t tico_d_profile : 2;           /* 1:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_profile : 2;           /* 0:1 SW=ro HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_profile;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t tico_d_line_duration : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tico_d_line_duration : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_line_duration;

typedef union {
    struct {
        uint32_t tico_d_line_duration : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_dp_source_tico_tico_d_img_size;

typedef struct {
    
    uint8_t filler1[0x10];
    
    bb_chip_dp_source_tico_tico_d_config  tico_d_config;
    bb_chip_dp_source_tico_tico_d_width  tico_d_width;
    
    uint8_t filler3[0x4];
    
    bb_chip_dp_source_tico_tico_d_height  tico_d_height;
    
    uint8_t filler4[0x4];
    
    bb_chip_dp_source_tico_tico_d_comp  tico_d_comp;
    
    uint8_t filler5[0x4];
    
    bb_chip_dp_source_tico_tico_d_mode  tico_d_mode;
    
    uint8_t filler6[0x4];
    
    bb_chip_dp_source_tico_tico_d_hlvls  tico_d_hlvls;
    bb_chip_dp_source_tico_tico_d_vld  tico_d_vld;
    bb_chip_dp_source_tico_tico_d_nbr  tico_d_nbr;
    
    uint8_t filler9[0x4];
    
    bb_chip_dp_source_tico_tico_d_bgt  tico_d_bgt;
    bb_chip_dp_source_tico_tico_d_vid_depth  tico_d_vid_depth;
    bb_chip_dp_source_tico_tico_d_play_mode  tico_d_play_mode;
    
    uint8_t filler12[0x8];
    
    bb_chip_dp_source_tico_tico_d_profile  tico_d_profile;
    
    uint8_t filler13[0x24];
    
    bb_chip_dp_source_tico_tico_d_line_duration  tico_d_line_duration;
    bb_chip_dp_source_tico_tico_d_img_size  tico_d_img_size;
    
} bb_chip_dp_source_tico_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_dp_source_tico_tico_d_config_READMASK 0x3
#define bb_chip_dp_source_tico_tico_d_config_WRITEMASK 0x3
#define bb_chip_dp_source_tico_tico_d_config_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_config_RESETMASK 0x3
#define bb_chip_dp_source_tico_tico_d_config_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_width_READMASK 0xFFFF
#define bb_chip_dp_source_tico_tico_d_width_WRITEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_width_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_width_RESETMASK 0xFFFF
#define bb_chip_dp_source_tico_tico_d_width_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_height_READMASK 0xFFFF
#define bb_chip_dp_source_tico_tico_d_height_WRITEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_height_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_height_RESETMASK 0xFFFF
#define bb_chip_dp_source_tico_tico_d_height_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_comp_READMASK 0x3
#define bb_chip_dp_source_tico_tico_d_comp_WRITEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_comp_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_comp_RESETMASK 0x3
#define bb_chip_dp_source_tico_tico_d_comp_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_mode_READMASK 0x3
#define bb_chip_dp_source_tico_tico_d_mode_WRITEMASK 0x3
#define bb_chip_dp_source_tico_tico_d_mode_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_mode_RESETMASK 0x3
#define bb_chip_dp_source_tico_tico_d_mode_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_hlvls_READMASK 0x7
#define bb_chip_dp_source_tico_tico_d_hlvls_WRITEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_hlvls_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_hlvls_RESETMASK 0x7
#define bb_chip_dp_source_tico_tico_d_hlvls_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_vld_READMASK 0x0
#define bb_chip_dp_source_tico_tico_d_vld_WRITEMASK 0x1
#define bb_chip_dp_source_tico_tico_d_vld_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_vld_RESETMASK 0x1
#define bb_chip_dp_source_tico_tico_d_vld_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_nbr_READMASK 0xFFFF
#define bb_chip_dp_source_tico_tico_d_nbr_WRITEMASK 0xFFFF
#define bb_chip_dp_source_tico_tico_d_nbr_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_nbr_RESETMASK 0xFFFF
#define bb_chip_dp_source_tico_tico_d_nbr_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_bgt_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_tico_tico_d_bgt_WRITEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_bgt_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_bgt_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_tico_tico_d_bgt_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_vid_depth_READMASK 0xF
#define bb_chip_dp_source_tico_tico_d_vid_depth_WRITEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_vid_depth_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_vid_depth_RESETMASK 0xF
#define bb_chip_dp_source_tico_tico_d_vid_depth_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_play_mode_READMASK 0x0
#define bb_chip_dp_source_tico_tico_d_play_mode_WRITEMASK 0x1
#define bb_chip_dp_source_tico_tico_d_play_mode_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_play_mode_RESETMASK 0x1
#define bb_chip_dp_source_tico_tico_d_play_mode_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_profile_READMASK 0x3
#define bb_chip_dp_source_tico_tico_d_profile_WRITEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_profile_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_profile_RESETMASK 0x3
#define bb_chip_dp_source_tico_tico_d_profile_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_line_duration_READMASK 0xFFFF
#define bb_chip_dp_source_tico_tico_d_line_duration_WRITEMASK 0xFFFF
#define bb_chip_dp_source_tico_tico_d_line_duration_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_line_duration_RESETMASK 0xFFFF
#define bb_chip_dp_source_tico_tico_d_line_duration_DEFAULT 0x00000000

#define bb_chip_dp_source_tico_tico_d_img_size_READMASK 0xFFFFFFFF
#define bb_chip_dp_source_tico_tico_d_img_size_WRITEMASK 0xFFFFFFFF
#define bb_chip_dp_source_tico_tico_d_img_size_VOLATILEMASK 0x0
#define bb_chip_dp_source_tico_tico_d_img_size_RESETMASK 0xFFFFFFFF
#define bb_chip_dp_source_tico_tico_d_img_size_DEFAULT 0x00000000

/*block : dp_source_aux_hpd */


#ifndef __ASSEMBLER__
/*section : irq */

#endif   //__ASSEMBLER__


#define bb_chip_dp_source_aux_hpd_version_READMASK 0xFFFFFF
#define bb_chip_dp_source_aux_hpd_version_WRITEMASK 0x0
#define bb_chip_dp_source_aux_hpd_version_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_version_RESETMASK 0xFFFFFF
#define bb_chip_dp_source_aux_hpd_version_DEFAULT 0x00040400

#define bb_chip_dp_source_aux_hpd_aux_status_READMASK 0xFF01FFFF
#define bb_chip_dp_source_aux_hpd_aux_status_WRITEMASK 0x0
#define bb_chip_dp_source_aux_hpd_aux_status_VOLATILEMASK 0xFF01FFFF
#define bb_chip_dp_source_aux_hpd_aux_status_RESETMASK 0xFF01FFFF
#define bb_chip_dp_source_aux_hpd_aux_status_DEFAULT 0xA0000000

#define bb_chip_dp_source_aux_hpd_aux_ctrl1_READMASK 0xFFF8FFF8
#define bb_chip_dp_source_aux_hpd_aux_ctrl1_WRITEMASK 0xFFF8FFF8
#define bb_chip_dp_source_aux_hpd_aux_ctrl1_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_aux_ctrl1_RESETMASK 0xFFF8FFF8
#define bb_chip_dp_source_aux_hpd_aux_ctrl1_DEFAULT 0xC8009600

#define bb_chip_dp_source_aux_hpd_aux_ctrl2_READMASK 0x1F0000
#define bb_chip_dp_source_aux_hpd_aux_ctrl2_WRITEMASK 0x1F0000
#define bb_chip_dp_source_aux_hpd_aux_ctrl2_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_aux_ctrl2_RESETMASK 0x1F0000
#define bb_chip_dp_source_aux_hpd_aux_ctrl2_DEFAULT 0x001F0000

#define bb_chip_dp_source_aux_hpd_aux_ctrl3_READMASK 0xFF
#define bb_chip_dp_source_aux_hpd_aux_ctrl3_WRITEMASK 0xFF
#define bb_chip_dp_source_aux_hpd_aux_ctrl3_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_aux_ctrl3_RESETMASK 0xFF
#define bb_chip_dp_source_aux_hpd_aux_ctrl3_DEFAULT 0x0000004B

#define bb_chip_dp_source_aux_hpd_aux_rx_READMASK 0x1FF
#define bb_chip_dp_source_aux_hpd_aux_rx_WRITEMASK 0x0
#define bb_chip_dp_source_aux_hpd_aux_rx_VOLATILEMASK 0x1FF
#define bb_chip_dp_source_aux_hpd_aux_rx_RESETMASK 0x1FF
#define bb_chip_dp_source_aux_hpd_aux_rx_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_aux_tx_READMASK 0x200
#define bb_chip_dp_source_aux_hpd_aux_tx_WRITEMASK 0x3FF
#define bb_chip_dp_source_aux_hpd_aux_tx_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_aux_tx_RESETMASK 0x3FF
#define bb_chip_dp_source_aux_hpd_aux_tx_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_hpd_status_READMASK 0x7
#define bb_chip_dp_source_aux_hpd_hpd_status_WRITEMASK 0x0
#define bb_chip_dp_source_aux_hpd_hpd_status_VOLATILEMASK 0x7
#define bb_chip_dp_source_aux_hpd_hpd_status_RESETMASK 0x7
#define bb_chip_dp_source_aux_hpd_hpd_status_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_hpd_ctrl_READMASK 0xF
#define bb_chip_dp_source_aux_hpd_hpd_ctrl_WRITEMASK 0xF
#define bb_chip_dp_source_aux_hpd_hpd_ctrl_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_hpd_ctrl_RESETMASK 0xF
#define bb_chip_dp_source_aux_hpd_hpd_ctrl_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_hpd_timer1_READMASK 0x3F0F
#define bb_chip_dp_source_aux_hpd_hpd_timer1_WRITEMASK 0x3F0F
#define bb_chip_dp_source_aux_hpd_hpd_timer1_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_hpd_timer1_RESETMASK 0x3F0F
#define bb_chip_dp_source_aux_hpd_hpd_timer1_DEFAULT 0x0000200C

#define bb_chip_dp_source_aux_hpd_hpd_timer2_READMASK 0xFF
#define bb_chip_dp_source_aux_hpd_hpd_timer2_WRITEMASK 0xFF
#define bb_chip_dp_source_aux_hpd_hpd_timer2_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_hpd_timer2_RESETMASK 0xFF
#define bb_chip_dp_source_aux_hpd_hpd_timer2_DEFAULT 0x0000009C

#define bb_chip_dp_source_aux_hpd_hpd_timer3_READMASK 0x3FF7FF
#define bb_chip_dp_source_aux_hpd_hpd_timer3_WRITEMASK 0x3FF7FF
#define bb_chip_dp_source_aux_hpd_hpd_timer3_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_hpd_timer3_RESETMASK 0x3FF7FF
#define bb_chip_dp_source_aux_hpd_hpd_timer3_DEFAULT 0x001F461A

#define bb_chip_dp_source_aux_hpd_hpd_rise_det_READMASK 0xFF11
#define bb_chip_dp_source_aux_hpd_hpd_rise_det_WRITEMASK 0x11
#define bb_chip_dp_source_aux_hpd_hpd_rise_det_VOLATILEMASK 0xFF00
#define bb_chip_dp_source_aux_hpd_hpd_rise_det_RESETMASK 0xFF11
#define bb_chip_dp_source_aux_hpd_hpd_rise_det_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_hpd_fall_det_READMASK 0xFF11
#define bb_chip_dp_source_aux_hpd_hpd_fall_det_WRITEMASK 0x11
#define bb_chip_dp_source_aux_hpd_hpd_fall_det_VOLATILEMASK 0xFF00
#define bb_chip_dp_source_aux_hpd_hpd_fall_det_RESETMASK 0xFF11
#define bb_chip_dp_source_aux_hpd_hpd_fall_det_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_dp_source_connect_det_READMASK 0xFF11
#define bb_chip_dp_source_aux_hpd_dp_source_connect_det_WRITEMASK 0x11
#define bb_chip_dp_source_aux_hpd_dp_source_connect_det_VOLATILEMASK 0xFF00
#define bb_chip_dp_source_aux_hpd_dp_source_connect_det_RESETMASK 0xFF11
#define bb_chip_dp_source_aux_hpd_dp_source_connect_det_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_dp_source_disconnect_det_READMASK 0xFF11
#define bb_chip_dp_source_aux_hpd_dp_source_disconnect_det_WRITEMASK 0x11
#define bb_chip_dp_source_aux_hpd_dp_source_disconnect_det_VOLATILEMASK 0xFF00
#define bb_chip_dp_source_aux_hpd_dp_source_disconnect_det_RESETMASK 0xFF11
#define bb_chip_dp_source_aux_hpd_dp_source_disconnect_det_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_irq_enable_READMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_enable_WRITEMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_enable_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_irq_enable_RESETMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_enable_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_irq_pending_READMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_pending_WRITEMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_pending_VOLATILEMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_pending_RESETMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_pending_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_irq_pending_irq_READMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_pending_irq_WRITEMASK 0x0
#define bb_chip_dp_source_aux_hpd_irq_pending_irq_VOLATILEMASK 0x0
#define bb_chip_dp_source_aux_hpd_irq_pending_irq_RESETMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_pending_irq_DEFAULT 0x00000000

#define bb_chip_dp_source_aux_hpd_irq_raw_READMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_raw_WRITEMASK 0x0
#define bb_chip_dp_source_aux_hpd_irq_raw_VOLATILEMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_raw_RESETMASK 0x3FF8F
#define bb_chip_dp_source_aux_hpd_irq_raw_DEFAULT 0x00000000

/*block : xusb3 */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x4 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x4 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv30 : 2;
            uint32_t rx_buff_near_full_limit : 8;           /* 29:22 SW=rw HW=ro 0x80 */
            uint32_t upp_bypass : 1;           /* 21 SW=rw HW=ro 0x1 */
            uint32_t upp_is_present : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t split_dp_wait_time : 16;           /* 19:4 SW=rw HW=ro 0xFFFF */
            uint32_t split_dp_mode : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t allow_rx_buff_fill : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drop_itp_pkts : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t upstream_port : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t upstream_port : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drop_itp_pkts : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t allow_rx_buff_fill : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t split_dp_mode : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t split_dp_wait_time : 16;           /* 4:19 SW=rw HW=ro 0xFFFF */
            uint32_t upp_is_present : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t upp_bypass : 1;           /* 21 SW=rw HW=ro 0x1 */
            uint32_t rx_buff_near_full_limit : 8;           /* 22:29 SW=rw HW=ro 0x80 */
            uint32_t resv30 : 2;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_configuration;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t remove_crdts : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t remove_crdts : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_control;

/*section : rx_partner_fifo */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_xusb3_rx_partner_fifo_write_engine_config0_clear  clear;
    bb_chip_xusb3_rx_partner_fifo_write_engine_config0_mode  mode;
    bb_chip_xusb3_rx_partner_fifo_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_xusb3_rx_partner_fifo_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_xusb3_rx_partner_fifo_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_xusb3_rx_partner_fifo_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_xusb3_rx_partner_fifo_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_xusb3_rx_partner_fifo_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_read_engine_config0_clear;

typedef struct {
    bb_chip_xusb3_rx_partner_fifo_read_engine_config0_clear  clear;
    
} bb_chip_xusb3_rx_partner_fifo_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_xusb3_rx_partner_fifo_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_xusb3_rx_partner_fifo_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_xusb3_rx_partner_fifo_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_xusb3_rx_partner_fifo_read_engine;


typedef struct {
    bb_chip_xusb3_rx_partner_fifo_version  version;
    
    union {
        bb_chip_xusb3_rx_partner_fifo_write_engine s;
        uint8_t filler[0x38];
    } write_engine;
    
    union {
        bb_chip_xusb3_rx_partner_fifo_read_engine s;
        uint8_t filler[0x14];
    } read_engine;
    
} bb_chip_xusb3_rx_partner_fifo;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv13 : 19;
            uint32_t not_rdy_pkt_drp : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t timedout_2join_dpp : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t rcvd_lone_dph : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t drop_lone_dpp : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t dwn_stream_busy_drp : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t unknown_pkt_drp : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t from_link_in_eop : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t from_link_in_sop : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t to_link_out_eop : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t to_link_out_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t from_phy_in_eop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t from_phy_in_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t link_partner_ptp_violated : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_partner_ptp_violated : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t from_phy_in_sop : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t from_phy_in_eop : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t to_link_out_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t to_link_out_eop : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t from_link_in_sop : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t from_link_in_eop : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t unknown_pkt_drp : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t dwn_stream_busy_drp : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drop_lone_dpp : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t rcvd_lone_dph : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t timedout_2join_dpp : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t not_rdy_pkt_drp : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t resv13 : 19;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t link_partner_ptp_violated : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_partner_ptp_violated : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_stats0_link_partner_ptp_violated;

typedef union {
    struct {
        uint32_t from_phy_in_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_xusb3_stats0_from_phy_in_sop;

typedef union {
    struct {
        uint32_t from_phy_in_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_xusb3_stats0_from_phy_in_eop;

typedef union {
    struct {
        uint32_t to_link_out_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_xusb3_stats0_to_link_out_sop;

typedef union {
    struct {
        uint32_t to_link_out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_xusb3_stats0_to_link_out_eop;

typedef union {
    struct {
        uint32_t from_link_in_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_xusb3_stats0_from_link_in_sop;

typedef union {
    struct {
        uint32_t from_link_in_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_xusb3_stats0_from_link_in_eop;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t unknown_pkt_drp : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t unknown_pkt_drp : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_stats0_unknown_pkt_drp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t dwn_stream_busy_drp : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dwn_stream_busy_drp : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_stats0_dwn_stream_busy_drp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t drop_lone_dpp : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drop_lone_dpp : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_stats0_drop_lone_dpp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rcvd_lone_dph : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rcvd_lone_dph : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_stats0_rcvd_lone_dph;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t timedout_2join_dpp : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t timedout_2join_dpp : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_stats0_timedout_2join_dpp;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t not_rdy_pkt_drp : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t not_rdy_pkt_drp : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_stats0_not_rdy_pkt_drp;

typedef struct {
    bb_chip_xusb3_stats0_rd2clr_config  rd2clr_config;
    bb_chip_xusb3_stats0_link_partner_ptp_violated  link_partner_ptp_violated;
    bb_chip_xusb3_stats0_from_phy_in_sop  from_phy_in_sop;
    bb_chip_xusb3_stats0_from_phy_in_eop  from_phy_in_eop;
    bb_chip_xusb3_stats0_to_link_out_sop  to_link_out_sop;
    bb_chip_xusb3_stats0_to_link_out_eop  to_link_out_eop;
    bb_chip_xusb3_stats0_from_link_in_sop  from_link_in_sop;
    bb_chip_xusb3_stats0_from_link_in_eop  from_link_in_eop;
    bb_chip_xusb3_stats0_unknown_pkt_drp  unknown_pkt_drp;
    bb_chip_xusb3_stats0_dwn_stream_busy_drp  dwn_stream_busy_drp;
    bb_chip_xusb3_stats0_drop_lone_dpp  drop_lone_dpp;
    bb_chip_xusb3_stats0_rcvd_lone_dph  rcvd_lone_dph;
    bb_chip_xusb3_stats0_timedout_2join_dpp  timedout_2join_dpp;
    bb_chip_xusb3_stats0_not_rdy_pkt_drp  not_rdy_pkt_drp;
    
} bb_chip_xusb3_stats0;


/*section : ptp_guard_2core */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x3 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x3 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_config0_fix_ptp_violations;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t max_cycle_mode : 4;           /* 19:16 SW=rw HW=ro 0x3 */
            uint32_t max_cycles : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycles : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_mode : 4;           /* 16:19 SW=rw HW=ro 0x3 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_config0_max_cycles;

typedef struct {
    bb_chip_xusb3_ptp_guard_2core_config0_fix_ptp_violations  fix_ptp_violations;
    bb_chip_xusb3_ptp_guard_2core_config0_max_cycles  max_cycles;
    
} bb_chip_xusb3_ptp_guard_2core_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_sop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_stats0_missing_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_eop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_eop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_stats0_missing_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t max_cycle_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycle_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_stats0_max_cycle_err;

typedef struct {
    bb_chip_xusb3_ptp_guard_2core_stats0_rd2clr_config  rd2clr_config;
    bb_chip_xusb3_ptp_guard_2core_stats0_missing_sop_err  missing_sop_err;
    bb_chip_xusb3_ptp_guard_2core_stats0_missing_eop_err  missing_eop_err;
    bb_chip_xusb3_ptp_guard_2core_stats0_max_cycle_err  max_cycle_err;
    
} bb_chip_xusb3_ptp_guard_2core_stats0;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_ptp_guard_2core_irq0_raw;

typedef struct {
    bb_chip_xusb3_ptp_guard_2core_irq0_enable  enable;
    bb_chip_xusb3_ptp_guard_2core_irq0_pending  pending;
    bb_chip_xusb3_ptp_guard_2core_irq0_pending_irq  pending_irq;
    bb_chip_xusb3_ptp_guard_2core_irq0_raw  raw;
    
} bb_chip_xusb3_ptp_guard_2core_irq0;


typedef struct {
    bb_chip_xusb3_ptp_guard_2core_version  version;
    
    union {
        bb_chip_xusb3_ptp_guard_2core_config0 s;
        uint8_t filler[0x8];
    } config0;
    
    union {
        bb_chip_xusb3_ptp_guard_2core_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
    union {
        bb_chip_xusb3_ptp_guard_2core_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_xusb3_ptp_guard_2core;


/*section : buff_2ulp */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t clr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t clr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_buff_2ulp_control;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_buff_2ulp_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_buff_2ulp_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_buff_2ulp_stats0_pfifo_dcount;

typedef struct {
    bb_chip_xusb3_buff_2ulp_stats0_rd2clr_config  rd2clr_config;
    bb_chip_xusb3_buff_2ulp_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_xusb3_buff_2ulp_stats0_pfifo_dcount  pfifo_dcount;
    
} bb_chip_xusb3_buff_2ulp_stats0;


typedef struct {
    bb_chip_xusb3_buff_2ulp_control  control;
    
    union {
        bb_chip_xusb3_buff_2ulp_stats0 s;
        uint8_t filler[0xC];
    } stats0;
    
} bb_chip_xusb3_buff_2ulp;


/*section : buff_2upp */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t clr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t clr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_buff_2upp_control;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t pfifo_scount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_scount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_scount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_scount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_buff_2upp_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_scount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_scount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_buff_2upp_stats0_nfifo_scount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_scount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_scount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_buff_2upp_stats0_pfifo_scount;

typedef struct {
    bb_chip_xusb3_buff_2upp_stats0_rd2clr_config  rd2clr_config;
    bb_chip_xusb3_buff_2upp_stats0_nfifo_scount  nfifo_scount;
    bb_chip_xusb3_buff_2upp_stats0_pfifo_scount  pfifo_scount;
    
} bb_chip_xusb3_buff_2upp_stats0;


typedef struct {
    bb_chip_xusb3_buff_2upp_control  control;
    
    union {
        bb_chip_xusb3_buff_2upp_stats0 s;
        uint8_t filler[0xC];
    } stats0;
    
} bb_chip_xusb3_buff_2upp;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t link_partner_ptp_violated : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_partner_ptp_violated : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t link_partner_ptp_violated : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_partner_ptp_violated : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t link_partner_ptp_violated : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_partner_ptp_violated : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t link_partner_ptp_violated : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_partner_ptp_violated : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_xusb3_irq0_raw;

typedef struct {
    bb_chip_xusb3_irq0_enable  enable;
    bb_chip_xusb3_irq0_pending  pending;
    bb_chip_xusb3_irq0_pending_irq  pending_irq;
    bb_chip_xusb3_irq0_raw  raw;
    
} bb_chip_xusb3_irq0;


typedef struct {
    bb_chip_xusb3_version  version;
    bb_chip_xusb3_configuration  configuration;
    bb_chip_xusb3_control  control;
    
    union {
        bb_chip_xusb3_rx_partner_fifo s;
        uint8_t filler[0x50];
    } rx_partner_fifo;
    
    union {
        bb_chip_xusb3_stats0 s;
        uint8_t filler[0x38];
    } stats0;
    
    union {
        bb_chip_xusb3_ptp_guard_2core s;
        uint8_t filler[0x2C];
    } ptp_guard_2core;
    
    union {
        bb_chip_xusb3_buff_2ulp s;
        uint8_t filler[0x10];
    } buff_2ulp;
    
    union {
        bb_chip_xusb3_buff_2upp s;
        uint8_t filler[0x10];
    } buff_2upp;
    
    union {
        bb_chip_xusb3_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_xusb3_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_xusb3_version_READMASK 0xFFFFFF
#define bb_chip_xusb3_version_WRITEMASK 0x0
#define bb_chip_xusb3_version_VOLATILEMASK 0x0
#define bb_chip_xusb3_version_RESETMASK 0xFFFFFF
#define bb_chip_xusb3_version_DEFAULT 0x00040000

#define bb_chip_xusb3_configuration_READMASK 0x3FFFFFFF
#define bb_chip_xusb3_configuration_WRITEMASK 0x3FEFFFFF
#define bb_chip_xusb3_configuration_VOLATILEMASK 0x100000
#define bb_chip_xusb3_configuration_RESETMASK 0x3FFFFFFF
#define bb_chip_xusb3_configuration_DEFAULT 0x202FFFF0

#define bb_chip_xusb3_control_READMASK 0x1
#define bb_chip_xusb3_control_WRITEMASK 0x1
#define bb_chip_xusb3_control_VOLATILEMASK 0x0
#define bb_chip_xusb3_control_RESETMASK 0x1
#define bb_chip_xusb3_control_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_version_READMASK 0xFFFFFF
#define bb_chip_xusb3_rx_partner_fifo_version_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_version_VOLATILEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_version_RESETMASK 0xFFFFFF
#define bb_chip_xusb3_rx_partner_fifo_version_DEFAULT 0x00010100

#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_clear_READMASK 0x1
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_mode_READMASK 0xF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_clear_READMASK 0x1
#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_rd2clr_config_READMASK 0x1FFF
#define bb_chip_xusb3_stats0_rd2clr_config_WRITEMASK 0x1FFF
#define bb_chip_xusb3_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_xusb3_stats0_rd2clr_config_RESETMASK 0x1FFF
#define bb_chip_xusb3_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_link_partner_ptp_violated_READMASK 0xFF
#define bb_chip_xusb3_stats0_link_partner_ptp_violated_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_link_partner_ptp_violated_VOLATILEMASK 0xFF
#define bb_chip_xusb3_stats0_link_partner_ptp_violated_RESETMASK 0xFF
#define bb_chip_xusb3_stats0_link_partner_ptp_violated_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_from_phy_in_sop_READMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_phy_in_sop_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_from_phy_in_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_phy_in_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_phy_in_sop_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_from_phy_in_eop_READMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_phy_in_eop_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_from_phy_in_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_phy_in_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_phy_in_eop_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_to_link_out_sop_READMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_to_link_out_sop_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_to_link_out_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_to_link_out_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_to_link_out_sop_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_to_link_out_eop_READMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_to_link_out_eop_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_to_link_out_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_to_link_out_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_to_link_out_eop_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_from_link_in_sop_READMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_link_in_sop_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_from_link_in_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_link_in_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_link_in_sop_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_from_link_in_eop_READMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_link_in_eop_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_from_link_in_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_link_in_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_xusb3_stats0_from_link_in_eop_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_unknown_pkt_drp_READMASK 0xFFFF
#define bb_chip_xusb3_stats0_unknown_pkt_drp_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_unknown_pkt_drp_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_stats0_unknown_pkt_drp_RESETMASK 0xFFFF
#define bb_chip_xusb3_stats0_unknown_pkt_drp_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_dwn_stream_busy_drp_READMASK 0xFFFF
#define bb_chip_xusb3_stats0_dwn_stream_busy_drp_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_dwn_stream_busy_drp_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_stats0_dwn_stream_busy_drp_RESETMASK 0xFFFF
#define bb_chip_xusb3_stats0_dwn_stream_busy_drp_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_drop_lone_dpp_READMASK 0xFFFF
#define bb_chip_xusb3_stats0_drop_lone_dpp_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_drop_lone_dpp_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_stats0_drop_lone_dpp_RESETMASK 0xFFFF
#define bb_chip_xusb3_stats0_drop_lone_dpp_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_rcvd_lone_dph_READMASK 0xFFFF
#define bb_chip_xusb3_stats0_rcvd_lone_dph_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_rcvd_lone_dph_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_stats0_rcvd_lone_dph_RESETMASK 0xFFFF
#define bb_chip_xusb3_stats0_rcvd_lone_dph_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_timedout_2join_dpp_READMASK 0xFFFF
#define bb_chip_xusb3_stats0_timedout_2join_dpp_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_timedout_2join_dpp_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_stats0_timedout_2join_dpp_RESETMASK 0xFFFF
#define bb_chip_xusb3_stats0_timedout_2join_dpp_DEFAULT 0x00000000

#define bb_chip_xusb3_stats0_not_rdy_pkt_drp_READMASK 0xFFFF
#define bb_chip_xusb3_stats0_not_rdy_pkt_drp_WRITEMASK 0x0
#define bb_chip_xusb3_stats0_not_rdy_pkt_drp_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_stats0_not_rdy_pkt_drp_RESETMASK 0xFFFF
#define bb_chip_xusb3_stats0_not_rdy_pkt_drp_DEFAULT 0x00000000

#define bb_chip_xusb3_ptp_guard_2core_version_READMASK 0xFFFFFF
#define bb_chip_xusb3_ptp_guard_2core_version_WRITEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_version_VOLATILEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_version_RESETMASK 0xFFFFFF
#define bb_chip_xusb3_ptp_guard_2core_version_DEFAULT 0x00030300

#define bb_chip_xusb3_ptp_guard_2core_config0_fix_ptp_violations_READMASK 0x3
#define bb_chip_xusb3_ptp_guard_2core_config0_fix_ptp_violations_WRITEMASK 0x1
#define bb_chip_xusb3_ptp_guard_2core_config0_fix_ptp_violations_VOLATILEMASK 0x2
#define bb_chip_xusb3_ptp_guard_2core_config0_fix_ptp_violations_RESETMASK 0x3
#define bb_chip_xusb3_ptp_guard_2core_config0_fix_ptp_violations_DEFAULT 0x00000001

#define bb_chip_xusb3_ptp_guard_2core_config0_max_cycles_READMASK 0xFFFFF
#define bb_chip_xusb3_ptp_guard_2core_config0_max_cycles_WRITEMASK 0xFFFFF
#define bb_chip_xusb3_ptp_guard_2core_config0_max_cycles_VOLATILEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_config0_max_cycles_RESETMASK 0xFFFFF
#define bb_chip_xusb3_ptp_guard_2core_config0_max_cycles_DEFAULT 0x00030000

#define bb_chip_xusb3_ptp_guard_2core_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_sop_err_READMASK 0xFFFF
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_sop_err_WRITEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_sop_err_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_sop_err_RESETMASK 0xFFFF
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_sop_err_DEFAULT 0x00000000

#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_eop_err_READMASK 0xFFFF
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_eop_err_WRITEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_eop_err_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_eop_err_RESETMASK 0xFFFF
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_eop_err_DEFAULT 0x00000000

#define bb_chip_xusb3_ptp_guard_2core_stats0_max_cycle_err_READMASK 0xFFFF
#define bb_chip_xusb3_ptp_guard_2core_stats0_max_cycle_err_WRITEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_stats0_max_cycle_err_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_ptp_guard_2core_stats0_max_cycle_err_RESETMASK 0xFFFF
#define bb_chip_xusb3_ptp_guard_2core_stats0_max_cycle_err_DEFAULT 0x00000000

#define bb_chip_xusb3_ptp_guard_2core_irq0_enable_READMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_enable_WRITEMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_irq0_enable_RESETMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_enable_DEFAULT 0x00000000

#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_READMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_WRITEMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_VOLATILEMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_RESETMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_DEFAULT 0x00000000

#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_irq_READMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_irq_RESETMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_xusb3_ptp_guard_2core_irq0_raw_READMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_raw_WRITEMASK 0x0
#define bb_chip_xusb3_ptp_guard_2core_irq0_raw_VOLATILEMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_raw_RESETMASK 0x7
#define bb_chip_xusb3_ptp_guard_2core_irq0_raw_DEFAULT 0x00000000

#define bb_chip_xusb3_buff_2ulp_control_READMASK 0x1
#define bb_chip_xusb3_buff_2ulp_control_WRITEMASK 0x1
#define bb_chip_xusb3_buff_2ulp_control_VOLATILEMASK 0x0
#define bb_chip_xusb3_buff_2ulp_control_RESETMASK 0x1
#define bb_chip_xusb3_buff_2ulp_control_DEFAULT 0x00000000

#define bb_chip_xusb3_buff_2ulp_stats0_rd2clr_config_READMASK 0x3
#define bb_chip_xusb3_buff_2ulp_stats0_rd2clr_config_WRITEMASK 0x3
#define bb_chip_xusb3_buff_2ulp_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_xusb3_buff_2ulp_stats0_rd2clr_config_RESETMASK 0x3
#define bb_chip_xusb3_buff_2ulp_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_xusb3_buff_2ulp_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_xusb3_buff_2ulp_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_xusb3_buff_2ulp_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_buff_2ulp_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_xusb3_buff_2ulp_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_xusb3_buff_2ulp_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_xusb3_buff_2ulp_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_xusb3_buff_2ulp_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_buff_2ulp_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_xusb3_buff_2ulp_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_xusb3_buff_2upp_control_READMASK 0x1
#define bb_chip_xusb3_buff_2upp_control_WRITEMASK 0x1
#define bb_chip_xusb3_buff_2upp_control_VOLATILEMASK 0x0
#define bb_chip_xusb3_buff_2upp_control_RESETMASK 0x1
#define bb_chip_xusb3_buff_2upp_control_DEFAULT 0x00000000

#define bb_chip_xusb3_buff_2upp_stats0_rd2clr_config_READMASK 0x3
#define bb_chip_xusb3_buff_2upp_stats0_rd2clr_config_WRITEMASK 0x3
#define bb_chip_xusb3_buff_2upp_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_xusb3_buff_2upp_stats0_rd2clr_config_RESETMASK 0x3
#define bb_chip_xusb3_buff_2upp_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_xusb3_buff_2upp_stats0_nfifo_scount_READMASK 0xFFFF
#define bb_chip_xusb3_buff_2upp_stats0_nfifo_scount_WRITEMASK 0x0
#define bb_chip_xusb3_buff_2upp_stats0_nfifo_scount_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_buff_2upp_stats0_nfifo_scount_RESETMASK 0xFFFF
#define bb_chip_xusb3_buff_2upp_stats0_nfifo_scount_DEFAULT 0x00000000

#define bb_chip_xusb3_buff_2upp_stats0_pfifo_scount_READMASK 0xFFFF
#define bb_chip_xusb3_buff_2upp_stats0_pfifo_scount_WRITEMASK 0x0
#define bb_chip_xusb3_buff_2upp_stats0_pfifo_scount_VOLATILEMASK 0xFFFF
#define bb_chip_xusb3_buff_2upp_stats0_pfifo_scount_RESETMASK 0xFFFF
#define bb_chip_xusb3_buff_2upp_stats0_pfifo_scount_DEFAULT 0x00000000

#define bb_chip_xusb3_irq0_enable_READMASK 0x1
#define bb_chip_xusb3_irq0_enable_WRITEMASK 0x1
#define bb_chip_xusb3_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_xusb3_irq0_enable_RESETMASK 0x1
#define bb_chip_xusb3_irq0_enable_DEFAULT 0x00000000

#define bb_chip_xusb3_irq0_pending_READMASK 0x1
#define bb_chip_xusb3_irq0_pending_WRITEMASK 0x1
#define bb_chip_xusb3_irq0_pending_VOLATILEMASK 0x1
#define bb_chip_xusb3_irq0_pending_RESETMASK 0x1
#define bb_chip_xusb3_irq0_pending_DEFAULT 0x00000000

#define bb_chip_xusb3_irq0_pending_irq_READMASK 0x1
#define bb_chip_xusb3_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_xusb3_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_xusb3_irq0_pending_irq_RESETMASK 0x1
#define bb_chip_xusb3_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_xusb3_irq0_raw_READMASK 0x1
#define bb_chip_xusb3_irq0_raw_WRITEMASK 0x0
#define bb_chip_xusb3_irq0_raw_VOLATILEMASK 0x1
#define bb_chip_xusb3_irq0_raw_RESETMASK 0x1
#define bb_chip_xusb3_irq0_raw_DEFAULT 0x00000000

/*block : upp */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x4 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x4 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x4 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x4 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t ping_non_rspns_cnt : 4;           /* 19:16 SW=rw HW=ro 0x3 */
            uint32_t dp_max_numb_cnt : 7;           /* 15:9 SW=rw HW=ro 0x3A */
            uint32_t dp_max_time_cnt : 9;           /* 8:0 SW=rw HW=ro 0x108 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dp_max_time_cnt : 9;           /* 0:8 SW=rw HW=ro 0x108 */
            uint32_t dp_max_numb_cnt : 7;           /* 9:15 SW=rw HW=ro 0x3A */
            uint32_t ping_non_rspns_cnt : 4;           /* 16:19 SW=rw HW=ro 0x3 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_config0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv31 : 1;
            uint32_t limit_num_pings_snt : 1;           /* 30 SW=rw HW=ro 0x1 */
            uint32_t iso_dev_non_rspns_cnt : 4;           /* 29:26 SW=rw HW=ro 0x3 */
            uint32_t lex_buff_max_cnt : 6;           /* 25:20 SW=rw HW=ro 0x2D */
            uint32_t disable_itp_delta : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t max_itp_deviation_2fix : 10;           /* 18:9 SW=rw HW=ro 0x80 */
            uint32_t limit_max_burst : 1;           /* 8 SW=rw HW=ro 0x1 */
            uint32_t bulk_term_en : 1;           /* 7 SW=rw HW=ro 0x1 */
            uint32_t ping_term_en : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t ctrl_trfr_int_mode : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t init_ept : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t itp_gen : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t itp_manager_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t ctrl_manager_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t clr_ctrl_trfr_mgr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t clr_ctrl_trfr_mgr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t ctrl_manager_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t itp_manager_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t itp_gen : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t init_ept : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t ctrl_trfr_int_mode : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t ping_term_en : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t bulk_term_en : 1;           /* 7 SW=rw HW=ro 0x1 */
            uint32_t limit_max_burst : 1;           /* 8 SW=rw HW=ro 0x1 */
            uint32_t max_itp_deviation_2fix : 10;           /* 9:18 SW=rw HW=ro 0x80 */
            uint32_t disable_itp_delta : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t lex_buff_max_cnt : 6;           /* 20:25 SW=rw HW=ro 0x2D */
            uint32_t iso_dev_non_rspns_cnt : 4;           /* 26:29 SW=rw HW=ro 0x3 */
            uint32_t limit_num_pings_snt : 1;           /* 30 SW=rw HW=ro 0x1 */
            uint32_t resv31 : 1;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_control;

/*section : id_mgr_fifo */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_upp_id_mgr_fifo_write_engine_config0_clear  clear;
    bb_chip_upp_id_mgr_fifo_write_engine_config0_mode  mode;
    bb_chip_upp_id_mgr_fifo_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_upp_id_mgr_fifo_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_upp_id_mgr_fifo_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_id_mgr_fifo_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_id_mgr_fifo_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_upp_id_mgr_fifo_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_upp_id_mgr_fifo_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_read_engine_config0_clear;

typedef struct {
    bb_chip_upp_id_mgr_fifo_read_engine_config0_clear  clear;
    
} bb_chip_upp_id_mgr_fifo_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_id_mgr_fifo_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_id_mgr_fifo_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_id_mgr_fifo_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_upp_id_mgr_fifo_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_upp_id_mgr_fifo_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_id_mgr_fifo_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_id_mgr_fifo_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_upp_id_mgr_fifo_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_upp_id_mgr_fifo_read_engine;


typedef struct {
    bb_chip_upp_id_mgr_fifo_version  version;
    
    union {
        bb_chip_upp_id_mgr_fifo_write_engine s;
        uint8_t filler[0x38];
    } write_engine;
    
    union {
        bb_chip_upp_id_mgr_fifo_read_engine s;
        uint8_t filler[0x14];
    } read_engine;
    
} bb_chip_upp_id_mgr_fifo;


/*section : iso_lex_fifo_0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_upp_iso_lex_fifo_0_write_engine_config0_clear  clear;
    bb_chip_upp_iso_lex_fifo_0_write_engine_config0_mode  mode;
    bb_chip_upp_iso_lex_fifo_0_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_upp_iso_lex_fifo_0_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_iso_lex_fifo_0_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_iso_lex_fifo_0_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_upp_iso_lex_fifo_0_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_upp_iso_lex_fifo_0_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_read_engine_config0_clear;

typedef struct {
    bb_chip_upp_iso_lex_fifo_0_read_engine_config0_clear  clear;
    
} bb_chip_upp_iso_lex_fifo_0_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_iso_lex_fifo_0_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_iso_lex_fifo_0_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_upp_iso_lex_fifo_0_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_upp_iso_lex_fifo_0_read_engine;


/*section : iso_lex_fifo_1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_upp_iso_lex_fifo_1_write_engine_config0_clear  clear;
    bb_chip_upp_iso_lex_fifo_1_write_engine_config0_mode  mode;
    bb_chip_upp_iso_lex_fifo_1_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_upp_iso_lex_fifo_1_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_iso_lex_fifo_1_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_iso_lex_fifo_1_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_upp_iso_lex_fifo_1_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_upp_iso_lex_fifo_1_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_read_engine_config0_clear;

typedef struct {
    bb_chip_upp_iso_lex_fifo_1_read_engine_config0_clear  clear;
    
} bb_chip_upp_iso_lex_fifo_1_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_iso_lex_fifo_1_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_iso_lex_fifo_1_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_upp_iso_lex_fifo_1_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_upp_iso_lex_fifo_1_read_engine;


/*section : iso_lex_fifo_2 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_upp_iso_lex_fifo_2_write_engine_config0_clear  clear;
    bb_chip_upp_iso_lex_fifo_2_write_engine_config0_mode  mode;
    bb_chip_upp_iso_lex_fifo_2_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_upp_iso_lex_fifo_2_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_iso_lex_fifo_2_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_iso_lex_fifo_2_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_upp_iso_lex_fifo_2_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_upp_iso_lex_fifo_2_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_read_engine_config0_clear;

typedef struct {
    bb_chip_upp_iso_lex_fifo_2_read_engine_config0_clear  clear;
    
} bb_chip_upp_iso_lex_fifo_2_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_iso_lex_fifo_2_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_iso_lex_fifo_2_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_upp_iso_lex_fifo_2_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_upp_iso_lex_fifo_2_read_engine;


/*section : iso_lex_fifo_3 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_upp_iso_lex_fifo_3_write_engine_config0_clear  clear;
    bb_chip_upp_iso_lex_fifo_3_write_engine_config0_mode  mode;
    bb_chip_upp_iso_lex_fifo_3_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_upp_iso_lex_fifo_3_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_iso_lex_fifo_3_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_iso_lex_fifo_3_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_upp_iso_lex_fifo_3_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_upp_iso_lex_fifo_3_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_read_engine_config0_clear;

typedef struct {
    bb_chip_upp_iso_lex_fifo_3_read_engine_config0_clear  clear;
    
} bb_chip_upp_iso_lex_fifo_3_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_iso_lex_fifo_3_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_iso_lex_fifo_3_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_upp_iso_lex_fifo_3_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_upp_iso_lex_fifo_3_read_engine;


/*section : iso_rex_fifo */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_upp_iso_rex_fifo_write_engine_config0_clear  clear;
    bb_chip_upp_iso_rex_fifo_write_engine_config0_mode  mode;
    bb_chip_upp_iso_rex_fifo_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_upp_iso_rex_fifo_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_upp_iso_rex_fifo_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_iso_rex_fifo_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_iso_rex_fifo_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_upp_iso_rex_fifo_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_upp_iso_rex_fifo_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_read_engine_config0_clear;

typedef struct {
    bb_chip_upp_iso_rex_fifo_read_engine_config0_clear  clear;
    
} bb_chip_upp_iso_rex_fifo_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_iso_rex_fifo_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_iso_rex_fifo_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_iso_rex_fifo_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_upp_iso_rex_fifo_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_upp_iso_rex_fifo_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_iso_rex_fifo_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_iso_rex_fifo_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_upp_iso_rex_fifo_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_upp_iso_rex_fifo_read_engine;


/*section : ctrl_trfr_h2d_fifo */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_clear  clear;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_mode  mode;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_clear;

typedef struct {
    bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_clear  clear;
    
} bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine;


/*section : ctrl_trfr_d2h_fifo */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x1 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x1 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x1 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x1 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_version;

/*section : write_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_clear;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flw_ctrl_en : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t pkt_strm : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t drp_on_pkt_err : 1;           /* 2 SW=rw HW=ro 0x1 */
            uint32_t drp_on_sop : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_mode;

typedef union {
    struct {
        uint32_t ntfy_lmt : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_notify_limit;

typedef struct {
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_clear  clear;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_mode  mode;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_notify_limit  notify_limit;
    
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t pfifo_dcount : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t pkt_max_byte_cnt_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t fifo_full_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t pkt_err : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t pkt_sop_err : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t wflush_act : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_rd : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt_wr : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t nfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t nfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_nfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t pfifo_dcount : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pfifo_dcount : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pfifo_dcount;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_max_byte_cnt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_max_byte_cnt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_max_byte_cnt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t fifo_full_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_full_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_fifo_full_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t pkt_sop_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t pkt_sop_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t wflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t wflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_wflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_rd : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_rd : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_rd;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt_wr : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt_wr : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_wr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_nfifo_dcount  nfifo_dcount;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pfifo_dcount  pfifo_dcount;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_max_byte_cnt_err  pkt_max_byte_cnt_err;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_fifo_full_err  fifo_full_err;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_err  pkt_err;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_sop_err  pkt_sop_err;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_wflush_act  wflush_act;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_rd  drp_pkt_rd;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_wr  drp_pkt_wr;
    bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0 s;
        uint8_t filler[0xC];
    } config0;
    
    union {
        bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0 s;
        uint8_t filler[0x2C];
    } stats0;
    
} bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine;


/*section : read_engine */

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rclr : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_clear;

typedef struct {
    bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_clear  clear;
    
} bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t drp_pkt : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t flow_ctrl : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rflush_act : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rflush_act : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rflush_act;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t drp_pkt : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t drp_pkt : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_drp_pkt;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t flow_ctrl : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t flow_ctrl : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_flow_ctrl;

typedef struct {
    bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rflush_act  rflush_act;
    bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_drp_pkt  drp_pkt;
    bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_flow_ctrl  flow_ctrl;
    
} bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0;


typedef struct {
    
    union {
        bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0 s;
        uint8_t filler[0x4];
    } config0;
    
    union {
        bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
} bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine;


/*section : ctrl_trfr */

typedef union {
    struct {
        uint32_t h2d_data : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv17 : 15;
            uint32_t srdy : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t time_tag : 12;           /* 15:4 SW=ro HW=wo 0x0 */
            uint32_t vlane : 2;           /* 3:2 SW=ro HW=wo 0x0 */
            uint32_t eop : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t sop : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sop : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t eop : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t vlane : 2;           /* 2:3 SW=ro HW=wo 0x0 */
            uint32_t time_tag : 12;           /* 4:15 SW=ro HW=wo 0x0 */
            uint32_t srdy : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t resv17 : 15;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cycles : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cycles : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_skip;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t squelch_en : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t crc32_term_value : 10;           /* 10:1 SW=rw HW=ro 0x1 */
            uint32_t crc32_err_inj_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t crc32_err_inj_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t crc32_term_value : 10;           /* 1:10 SW=rw HW=ro 0x1 */
            uint32_t squelch_en : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_h2d_dbg;

typedef union {
    struct {
        uint32_t d2h_data : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv17 : 15;
            uint32_t srdy : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t time_tag : 12;           /* 15:4 SW=ro HW=wo 0x0 */
            uint32_t vlane : 2;           /* 3:2 SW=ro HW=wo 0x0 */
            uint32_t eop : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t sop : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sop : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t eop : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t vlane : 2;           /* 2:3 SW=ro HW=wo 0x0 */
            uint32_t time_tag : 12;           /* 4:15 SW=ro HW=wo 0x0 */
            uint32_t srdy : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t resv17 : 15;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t cycles : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cycles : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_skip;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv12 : 20;
            uint32_t squelch_en : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t crc32_term_value : 10;           /* 10:1 SW=rw HW=ro 0x1 */
            uint32_t crc32_err_inj_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t crc32_err_inj_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t crc32_term_value : 10;           /* 1:10 SW=rw HW=ro 0x1 */
            uint32_t squelch_en : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t resv12 : 20;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_d2h_dbg;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv7 : 25;
            uint32_t device_addr : 7;           /* 6:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t device_addr : 7;           /* 0:6 SW=rw HW=ro 0x0 */
            uint32_t resv7 : 25;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_ctrl_trfr_cmpltd;

typedef struct {
    bb_chip_upp_ctrl_trfr_h2d_data  h2d_data;
    bb_chip_upp_ctrl_trfr_h2d_ctrl  h2d_ctrl;
    bb_chip_upp_ctrl_trfr_h2d_skip  h2d_skip;
    bb_chip_upp_ctrl_trfr_h2d_dbg  h2d_dbg;
    bb_chip_upp_ctrl_trfr_d2h_data  d2h_data;
    bb_chip_upp_ctrl_trfr_d2h_ctrl  d2h_ctrl;
    bb_chip_upp_ctrl_trfr_d2h_skip  d2h_skip;
    bb_chip_upp_ctrl_trfr_d2h_dbg  d2h_dbg;
    bb_chip_upp_ctrl_trfr_cmpltd  cmpltd;
    
} bb_chip_upp_ctrl_trfr;


/*section : endpoint_tbl */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv22 : 10;
            uint32_t null_en : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t bm_attributes_tt : 2;           /* 20:19 SW=rw HW=ro 0x0 */
            uint32_t qid : 8;           /* 18:11 SW=rw HW=ro 0x0 */
            uint32_t device_addr : 7;           /* 10:4 SW=rw HW=ro 0x0 */
            uint32_t ept_num : 4;           /* 3:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t ept_num : 4;           /* 0:3 SW=rw HW=ro 0x0 */
            uint32_t device_addr : 7;           /* 4:10 SW=rw HW=ro 0x0 */
            uint32_t qid : 8;           /* 11:18 SW=rw HW=ro 0x0 */
            uint32_t bm_attributes_tt : 2;           /* 19:20 SW=rw HW=ro 0x0 */
            uint32_t null_en : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t resv22 : 10;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_endpoint_tbl_config0;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv22 : 10;
            uint32_t crdt_chk_value : 2;           /* 21:20 SW=rw HW=ro 0x0 */
            uint32_t max_burst : 4;           /* 19:16 SW=rw HW=ro 0x0 */
            uint32_t coded_binterval : 16;           /* 15:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t coded_binterval : 16;           /* 0:15 SW=rw HW=ro 0x1 */
            uint32_t max_burst : 4;           /* 16:19 SW=rw HW=ro 0x0 */
            uint32_t crdt_chk_value : 2;           /* 20:21 SW=rw HW=ro 0x0 */
            uint32_t resv22 : 10;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_endpoint_tbl_config1;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t total_qid : 8;           /* 7:0 SW=ro HW=wo 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t total_qid : 8;           /* 0:7 SW=ro HW=wo 0x1 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_endpoint_tbl_total_qid;

typedef union {
    struct {
        uint32_t qid_assigned0 : 32;           /* 31:0 SW=ro HW=wo 0x1 */
    } bf;
    uint32_t  dw;
} bb_chip_upp_endpoint_tbl_qid_assigned0;

typedef struct {
    bb_chip_upp_endpoint_tbl_config0  config0;
    bb_chip_upp_endpoint_tbl_config1  config1;
    bb_chip_upp_endpoint_tbl_total_qid  total_qid;
    bb_chip_upp_endpoint_tbl_qid_assigned0  qid_assigned0;
    
} bb_chip_upp_endpoint_tbl;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t missing_itp : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_itp : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_itp : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_itp : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_stats0_missing_itp;

typedef struct {
    bb_chip_upp_stats0_rd2clr_config  rd2clr_config;
    bb_chip_upp_stats0_missing_itp  missing_itp;
    
} bb_chip_upp_stats0;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t d2h_pkt : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t h2d_pkt : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t h2d_pkt : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t d2h_pkt : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t d2h_pkt : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t h2d_pkt : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t h2d_pkt : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t d2h_pkt : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t d2h_pkt : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t h2d_pkt : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t h2d_pkt : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t d2h_pkt : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t d2h_pkt : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t h2d_pkt : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t h2d_pkt : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t d2h_pkt : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_irq0_raw;

typedef struct {
    bb_chip_upp_irq0_enable  enable;
    bb_chip_upp_irq0_pending  pending;
    bb_chip_upp_irq0_pending_irq  pending_irq;
    bb_chip_upp_irq0_raw  raw;
    
} bb_chip_upp_irq0;


/*section : irq1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t ping_not_respond : 16;           /* 31:16 SW=rw HW=na 0x0 */
            uint32_t iso_not_respond : 16;           /* 15:0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t iso_not_respond : 16;           /* 0:15 SW=rw HW=na 0x0 */
            uint32_t ping_not_respond : 16;           /* 16:31 SW=rw HW=na 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_irq1_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t ping_not_respond : 16;           /* 31:16 SW=r/w1c HW=wo 0x0 */
            uint32_t iso_not_respond : 16;           /* 15:0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t iso_not_respond : 16;           /* 0:15 SW=r/w1c HW=wo 0x0 */
            uint32_t ping_not_respond : 16;           /* 16:31 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_irq1_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t ping_not_respond : 16;           /* 31:16 SW=ro HW=na 0x0 */
            uint32_t iso_not_respond : 16;           /* 15:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t iso_not_respond : 16;           /* 0:15 SW=ro HW=na 0x0 */
            uint32_t ping_not_respond : 16;           /* 16:31 SW=ro HW=na 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_irq1_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t ping_not_respond : 16;           /* 31:16 SW=ro HW=wo 0x0 */
            uint32_t iso_not_respond : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t iso_not_respond : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t ping_not_respond : 16;           /* 16:31 SW=ro HW=wo 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_upp_irq1_raw;

typedef struct {
    bb_chip_upp_irq1_enable  enable;
    bb_chip_upp_irq1_pending  pending;
    bb_chip_upp_irq1_pending_irq  pending_irq;
    bb_chip_upp_irq1_raw  raw;
    
} bb_chip_upp_irq1;


typedef struct {
    bb_chip_upp_version  version;
    bb_chip_upp_config0  config0;
    bb_chip_upp_control  control;
    
    union {
        bb_chip_upp_id_mgr_fifo s;
        uint8_t filler[0x50];
    } id_mgr_fifo;
    
    union {
        bb_chip_upp_id_mgr_fifo s;
        uint8_t filler[0x50];
    } iso_lex_fifo_0;
    
    union {
        bb_chip_upp_id_mgr_fifo s;
        uint8_t filler[0x50];
    } iso_lex_fifo_1;
    
    union {
        bb_chip_upp_id_mgr_fifo s;
        uint8_t filler[0x50];
    } iso_lex_fifo_2;
    
    union {
        bb_chip_upp_id_mgr_fifo s;
        uint8_t filler[0x50];
    } iso_lex_fifo_3;
    
    union {
        bb_chip_upp_id_mgr_fifo s;
        uint8_t filler[0x50];
    } iso_rex_fifo;
    
    union {
        bb_chip_upp_id_mgr_fifo s;
        uint8_t filler[0x50];
    } ctrl_trfr_h2d_fifo;
    
    union {
        bb_chip_upp_id_mgr_fifo s;
        uint8_t filler[0x50];
    } ctrl_trfr_d2h_fifo;
    
    union {
        bb_chip_upp_ctrl_trfr s;
        uint8_t filler[0x24];
    } ctrl_trfr;
    
    union {
        bb_chip_upp_endpoint_tbl s;
        uint8_t filler[0x10];
    } endpoint_tbl;
    
    union {
        bb_chip_upp_stats0 s;
        uint8_t filler[0x8];
    } stats0;
    
    union {
        bb_chip_upp_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
    union {
        bb_chip_upp_irq1 s;
        uint8_t filler[0x10];
    } irq1;
    
} bb_chip_upp_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_upp_version_READMASK 0xFFFFFF
#define bb_chip_upp_version_WRITEMASK 0x0
#define bb_chip_upp_version_VOLATILEMASK 0x0
#define bb_chip_upp_version_RESETMASK 0xFFFFFF
#define bb_chip_upp_version_DEFAULT 0x00040400

#define bb_chip_upp_config0_READMASK 0xFFFFF
#define bb_chip_upp_config0_WRITEMASK 0xFFFFF
#define bb_chip_upp_config0_VOLATILEMASK 0x0
#define bb_chip_upp_config0_RESETMASK 0xFFFFF
#define bb_chip_upp_config0_DEFAULT 0x00037508

#define bb_chip_upp_control_READMASK 0x7FFFFFFF
#define bb_chip_upp_control_WRITEMASK 0x7FFFFFFF
#define bb_chip_upp_control_VOLATILEMASK 0x0
#define bb_chip_upp_control_RESETMASK 0x7FFFFFFF
#define bb_chip_upp_control_DEFAULT 0x4ED10180

#define bb_chip_upp_id_mgr_fifo_version_READMASK 0xFFFFFF
#define bb_chip_upp_id_mgr_fifo_version_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_version_VOLATILEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_version_RESETMASK 0xFFFFFF
#define bb_chip_upp_id_mgr_fifo_version_DEFAULT 0x00010100

#define bb_chip_upp_id_mgr_fifo_write_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_config0_mode_READMASK 0xF
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_upp_id_mgr_fifo_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_read_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_id_mgr_fifo_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_id_mgr_fifo_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_id_mgr_fifo_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_version_READMASK 0xFFFFFF
#define bb_chip_upp_iso_lex_fifo_0_version_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_version_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_version_RESETMASK 0xFFFFFF
#define bb_chip_upp_iso_lex_fifo_0_version_DEFAULT 0x00010100

#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_mode_READMASK 0xF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_version_READMASK 0xFFFFFF
#define bb_chip_upp_iso_lex_fifo_1_version_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_version_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_version_RESETMASK 0xFFFFFF
#define bb_chip_upp_iso_lex_fifo_1_version_DEFAULT 0x00010100

#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_mode_READMASK 0xF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_version_READMASK 0xFFFFFF
#define bb_chip_upp_iso_lex_fifo_2_version_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_version_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_version_RESETMASK 0xFFFFFF
#define bb_chip_upp_iso_lex_fifo_2_version_DEFAULT 0x00010100

#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_mode_READMASK 0xF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_version_READMASK 0xFFFFFF
#define bb_chip_upp_iso_lex_fifo_3_version_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_version_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_version_RESETMASK 0xFFFFFF
#define bb_chip_upp_iso_lex_fifo_3_version_DEFAULT 0x00010100

#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_mode_READMASK 0xF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_version_READMASK 0xFFFFFF
#define bb_chip_upp_iso_rex_fifo_version_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_version_VOLATILEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_version_RESETMASK 0xFFFFFF
#define bb_chip_upp_iso_rex_fifo_version_DEFAULT 0x00010100

#define bb_chip_upp_iso_rex_fifo_write_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_config0_mode_READMASK 0xF
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_upp_iso_rex_fifo_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_read_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_iso_rex_fifo_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_iso_rex_fifo_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_iso_rex_fifo_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_version_READMASK 0xFFFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_version_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_version_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_version_RESETMASK 0xFFFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_version_DEFAULT 0x00010100

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_mode_READMASK 0xF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_version_READMASK 0xFFFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_version_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_version_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_version_RESETMASK 0xFFFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_version_DEFAULT 0x00010100

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_mode_READMASK 0xF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_mode_WRITEMASK 0xF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_mode_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_mode_RESETMASK 0xF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_mode_DEFAULT 0x00000005

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_notify_limit_READMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_notify_limit_WRITEMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_notify_limit_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_notify_limit_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_notify_limit_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_rd2clr_config_READMASK 0x3FF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_rd2clr_config_WRITEMASK 0x3FF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_rd2clr_config_RESETMASK 0x3FF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_nfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_nfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_nfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_nfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_nfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pfifo_dcount_READMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pfifo_dcount_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pfifo_dcount_VOLATILEMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pfifo_dcount_RESETMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pfifo_dcount_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_max_byte_cnt_err_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_max_byte_cnt_err_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_max_byte_cnt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_max_byte_cnt_err_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_max_byte_cnt_err_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_fifo_full_err_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_fifo_full_err_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_fifo_full_err_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_fifo_full_err_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_fifo_full_err_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_err_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_err_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_err_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_err_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_err_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_sop_err_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_sop_err_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_sop_err_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_sop_err_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_sop_err_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_wflush_act_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_wflush_act_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_wflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_wflush_act_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_wflush_act_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_rd_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_rd_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_rd_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_rd_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_rd_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_wr_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_wr_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_wr_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_wr_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_wr_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_clear_READMASK 0x1
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_clear_WRITEMASK 0x1
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_clear_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_clear_RESETMASK 0x1
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_clear_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rflush_act_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rflush_act_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rflush_act_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rflush_act_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rflush_act_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_drp_pkt_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_drp_pkt_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_drp_pkt_VOLATILEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_drp_pkt_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_drp_pkt_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_flow_ctrl_READMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_flow_ctrl_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_flow_ctrl_VOLATILEMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_flow_ctrl_RESETMASK 0xFFFF
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_flow_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_data_READMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_h2d_data_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_data_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_h2d_data_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_h2d_data_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_ctrl_READMASK 0x1FFFF
#define bb_chip_upp_ctrl_trfr_h2d_ctrl_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_ctrl_VOLATILEMASK 0x1FFFF
#define bb_chip_upp_ctrl_trfr_h2d_ctrl_RESETMASK 0x1FFFF
#define bb_chip_upp_ctrl_trfr_h2d_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_skip_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_skip_WRITEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_skip_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_skip_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_h2d_skip_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_h2d_dbg_READMASK 0xFFF
#define bb_chip_upp_ctrl_trfr_h2d_dbg_WRITEMASK 0xFFF
#define bb_chip_upp_ctrl_trfr_h2d_dbg_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_h2d_dbg_RESETMASK 0xFFF
#define bb_chip_upp_ctrl_trfr_h2d_dbg_DEFAULT 0x00000802

#define bb_chip_upp_ctrl_trfr_d2h_data_READMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_d2h_data_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_data_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_d2h_data_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_ctrl_trfr_d2h_data_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_ctrl_READMASK 0x1FFFF
#define bb_chip_upp_ctrl_trfr_d2h_ctrl_WRITEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_ctrl_VOLATILEMASK 0x1FFFF
#define bb_chip_upp_ctrl_trfr_d2h_ctrl_RESETMASK 0x1FFFF
#define bb_chip_upp_ctrl_trfr_d2h_ctrl_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_skip_READMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_skip_WRITEMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_skip_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_skip_RESETMASK 0xFF
#define bb_chip_upp_ctrl_trfr_d2h_skip_DEFAULT 0x00000000

#define bb_chip_upp_ctrl_trfr_d2h_dbg_READMASK 0xFFF
#define bb_chip_upp_ctrl_trfr_d2h_dbg_WRITEMASK 0xFFF
#define bb_chip_upp_ctrl_trfr_d2h_dbg_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_d2h_dbg_RESETMASK 0xFFF
#define bb_chip_upp_ctrl_trfr_d2h_dbg_DEFAULT 0x00000802

#define bb_chip_upp_ctrl_trfr_cmpltd_READMASK 0x7F
#define bb_chip_upp_ctrl_trfr_cmpltd_WRITEMASK 0x7F
#define bb_chip_upp_ctrl_trfr_cmpltd_VOLATILEMASK 0x0
#define bb_chip_upp_ctrl_trfr_cmpltd_RESETMASK 0x7F
#define bb_chip_upp_ctrl_trfr_cmpltd_DEFAULT 0x00000000

#define bb_chip_upp_endpoint_tbl_config0_READMASK 0x3FFFFF
#define bb_chip_upp_endpoint_tbl_config0_WRITEMASK 0x3FFFFF
#define bb_chip_upp_endpoint_tbl_config0_VOLATILEMASK 0x0
#define bb_chip_upp_endpoint_tbl_config0_RESETMASK 0x3FFFFF
#define bb_chip_upp_endpoint_tbl_config0_DEFAULT 0x00000000

#define bb_chip_upp_endpoint_tbl_config1_READMASK 0x3FFFFF
#define bb_chip_upp_endpoint_tbl_config1_WRITEMASK 0x3FFFFF
#define bb_chip_upp_endpoint_tbl_config1_VOLATILEMASK 0x0
#define bb_chip_upp_endpoint_tbl_config1_RESETMASK 0x3FFFFF
#define bb_chip_upp_endpoint_tbl_config1_DEFAULT 0x00000001

#define bb_chip_upp_endpoint_tbl_total_qid_READMASK 0xFF
#define bb_chip_upp_endpoint_tbl_total_qid_WRITEMASK 0x0
#define bb_chip_upp_endpoint_tbl_total_qid_VOLATILEMASK 0xFF
#define bb_chip_upp_endpoint_tbl_total_qid_RESETMASK 0xFF
#define bb_chip_upp_endpoint_tbl_total_qid_DEFAULT 0x00000001

#define bb_chip_upp_endpoint_tbl_qid_assigned0_READMASK 0xFFFFFFFF
#define bb_chip_upp_endpoint_tbl_qid_assigned0_WRITEMASK 0x0
#define bb_chip_upp_endpoint_tbl_qid_assigned0_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_upp_endpoint_tbl_qid_assigned0_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_endpoint_tbl_qid_assigned0_DEFAULT 0x00000001

#define bb_chip_upp_stats0_rd2clr_config_READMASK 0x1
#define bb_chip_upp_stats0_rd2clr_config_WRITEMASK 0x1
#define bb_chip_upp_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_upp_stats0_rd2clr_config_RESETMASK 0x1
#define bb_chip_upp_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_upp_stats0_missing_itp_READMASK 0xFFFF
#define bb_chip_upp_stats0_missing_itp_WRITEMASK 0x0
#define bb_chip_upp_stats0_missing_itp_VOLATILEMASK 0xFFFF
#define bb_chip_upp_stats0_missing_itp_RESETMASK 0xFFFF
#define bb_chip_upp_stats0_missing_itp_DEFAULT 0x00000000

#define bb_chip_upp_irq0_enable_READMASK 0x3
#define bb_chip_upp_irq0_enable_WRITEMASK 0x3
#define bb_chip_upp_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_upp_irq0_enable_RESETMASK 0x3
#define bb_chip_upp_irq0_enable_DEFAULT 0x00000000

#define bb_chip_upp_irq0_pending_READMASK 0x3
#define bb_chip_upp_irq0_pending_WRITEMASK 0x3
#define bb_chip_upp_irq0_pending_VOLATILEMASK 0x3
#define bb_chip_upp_irq0_pending_RESETMASK 0x3
#define bb_chip_upp_irq0_pending_DEFAULT 0x00000000

#define bb_chip_upp_irq0_pending_irq_READMASK 0x3
#define bb_chip_upp_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_upp_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_upp_irq0_pending_irq_RESETMASK 0x3
#define bb_chip_upp_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_upp_irq0_raw_READMASK 0x3
#define bb_chip_upp_irq0_raw_WRITEMASK 0x0
#define bb_chip_upp_irq0_raw_VOLATILEMASK 0x3
#define bb_chip_upp_irq0_raw_RESETMASK 0x3
#define bb_chip_upp_irq0_raw_DEFAULT 0x00000000

#define bb_chip_upp_irq1_enable_READMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_enable_WRITEMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_enable_VOLATILEMASK 0x0
#define bb_chip_upp_irq1_enable_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_enable_DEFAULT 0x00000000

#define bb_chip_upp_irq1_pending_READMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_pending_WRITEMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_pending_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_pending_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_pending_DEFAULT 0x00000000

#define bb_chip_upp_irq1_pending_irq_READMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_pending_irq_WRITEMASK 0x0
#define bb_chip_upp_irq1_pending_irq_VOLATILEMASK 0x0
#define bb_chip_upp_irq1_pending_irq_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_pending_irq_DEFAULT 0x00000000

#define bb_chip_upp_irq1_raw_READMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_raw_WRITEMASK 0x0
#define bb_chip_upp_irq1_raw_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_raw_RESETMASK 0xFFFFFFFF
#define bb_chip_upp_irq1_raw_DEFAULT 0x00000000

/*block : ulp_core */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x9 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x9 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t credit_hp_timer_en : 1;           /* 8 SW=rw HW=ro 0x1 */
            uint32_t pending_hp_timer_en : 1;           /* 7 SW=rw HW=ro 0x1 */
            uint32_t internal_loopback_en : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t quasi_ss_disabled_mode : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t quasi_u3_mode : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t allow_u2 : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t allow_u1 : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t dfp_compliance_mode_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t use_trx_detect_quiet_dfp_max : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t use_trx_detect_quiet_dfp_max : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t dfp_compliance_mode_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t allow_u1 : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t allow_u2 : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t quasi_u3_mode : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t quasi_ss_disabled_mode : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t internal_loopback_en : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t pending_hp_timer_en : 1;           /* 7 SW=rw HW=ro 0x1 */
            uint32_t credit_hp_timer_en : 1;           /* 8 SW=rw HW=ro 0x1 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_configuration;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv22 : 10;
            uint32_t wait_in_polling_lfps : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t exit_low_power : 1;           /* 20 SW=rw HW=ro 0x0 */
            uint32_t wait_in_u3 : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t wait_in_u1_u2 : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t delay_u3_wakeup : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t go_u3 : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t go_u2 : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t go_u1 : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t wait_in_hot_reset : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t gen_warm_reset : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t allow_rx_term_en_hw_clr : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t rx_termination_en : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t go2_ss_inactive : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t go2_recovery : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t go2_hot_reset : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t go2_loopback : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t go2_ss_disabled : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t disable_scrambling : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t set_ts2_disable_scramble_bit : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t set_ts2_loopbk_bit : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t set_ts2_link_config_field : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t go2_rx_detect : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go2_rx_detect : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t set_ts2_link_config_field : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t set_ts2_loopbk_bit : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t set_ts2_disable_scramble_bit : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t disable_scrambling : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t go2_ss_disabled : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t go2_loopback : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t go2_hot_reset : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t go2_recovery : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t go2_ss_inactive : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t rx_termination_en : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t allow_rx_term_en_hw_clr : 1;           /* 11 SW=rw HW=ro 0x1 */
            uint32_t gen_warm_reset : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t wait_in_hot_reset : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t go_u1 : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t go_u2 : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t go_u3 : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t delay_u3_wakeup : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t wait_in_u1_u2 : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t wait_in_u3 : 1;           /* 19 SW=rw HW=ro 0x0 */
            uint32_t exit_low_power : 1;           /* 20 SW=rw HW=ro 0x0 */
            uint32_t wait_in_polling_lfps : 1;           /* 21 SW=rw HW=ro 0x0 */
            uint32_t resv22 : 10;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_control;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv10 : 22;
            uint32_t add_2_cht : 5;           /* 9:5 SW=rw HW=ro 0x2 */
            uint32_t add_2_pht : 5;           /* 4:0 SW=rw HW=ro 0x2 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t add_2_pht : 5;           /* 0:4 SW=rw HW=ro 0x2 */
            uint32_t add_2_cht : 5;           /* 5:9 SW=rw HW=ro 0x2 */
            uint32_t resv10 : 22;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_timer_correction;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t main_state : 4;           /* 7:4 SW=ro HW=wo 0x0 */
            uint32_t sub_state : 4;           /* 3:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t sub_state : 4;           /* 0:3 SW=ro HW=wo 0x0 */
            uint32_t main_state : 4;           /* 4:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ltssm_state;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv19 : 13;
            uint32_t rcvd_lbad : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t rcvd_lrty : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t snt_lbad : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t snt_lrty : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t rx_go_recovery : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t go2_u0_from_recovery : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t to_phy_out_eop : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t to_phy_out_sop : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t lmp_rx_event_fifo_underflow : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t lmp_rx_event_fifo_overflow : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t link_command_rx_event_fifo_underflow : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t link_command_rx_event_fifo_overflow : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t lmp_ptp_violated : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t link_command_ptp_violated : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t link_training_ptp_violated : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t tx_framer_ptp_violated : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rx_lfps_cnt_in_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t tx_lfps_cnt_in_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_lfps_cnt_in_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rx_lfps_cnt_in_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t tx_framer_ptp_violated : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t link_training_ptp_violated : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t link_command_ptp_violated : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t lmp_ptp_violated : 1;           /* 5 SW=rw HW=ro 0x0 */
            uint32_t link_command_rx_event_fifo_overflow : 1;           /* 6 SW=rw HW=ro 0x0 */
            uint32_t link_command_rx_event_fifo_underflow : 1;           /* 7 SW=rw HW=ro 0x0 */
            uint32_t lmp_rx_event_fifo_overflow : 1;           /* 8 SW=rw HW=ro 0x0 */
            uint32_t lmp_rx_event_fifo_underflow : 1;           /* 9 SW=rw HW=ro 0x0 */
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 1;           /* 10 SW=rw HW=ro 0x0 */
            uint32_t to_phy_out_sop : 1;           /* 11 SW=rw HW=ro 0x0 */
            uint32_t to_phy_out_eop : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t go2_u0_from_recovery : 1;           /* 13 SW=rw HW=ro 0x0 */
            uint32_t rx_go_recovery : 1;           /* 14 SW=rw HW=ro 0x0 */
            uint32_t snt_lrty : 1;           /* 15 SW=rw HW=ro 0x0 */
            uint32_t snt_lbad : 1;           /* 16 SW=rw HW=ro 0x0 */
            uint32_t rcvd_lrty : 1;           /* 17 SW=rw HW=ro 0x0 */
            uint32_t rcvd_lbad : 1;           /* 18 SW=rw HW=ro 0x0 */
            uint32_t resv19 : 13;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t tx_lfps_cnt_in_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_lfps_cnt_in_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_tx_lfps_cnt_in_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rx_lfps_cnt_in_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_lfps_cnt_in_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_rx_lfps_cnt_in_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t tx_framer_ptp_violated : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_framer_ptp_violated : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_tx_framer_ptp_violated;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t link_training_ptp_violated : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_training_ptp_violated : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_link_training_ptp_violated;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t link_command_ptp_violated : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_command_ptp_violated : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_link_command_ptp_violated;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t lmp_ptp_violated : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lmp_ptp_violated : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_lmp_ptp_violated;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t link_command_rx_event_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_command_rx_event_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_link_command_rx_event_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t link_command_rx_event_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t link_command_rx_event_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_link_command_rx_event_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t lmp_rx_event_fifo_overflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lmp_rx_event_fifo_overflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_lmp_rx_event_fifo_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t lmp_rx_event_fifo_underflow : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t lmp_rx_event_fifo_underflow : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_lmp_rx_event_fifo_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_remote_rx_hdr_buff_crdt_cnt_in_err;

typedef union {
    struct {
        uint32_t to_phy_out_sop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_ulp_core_stats0_to_phy_out_sop;

typedef union {
    struct {
        uint32_t to_phy_out_eop : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} bb_chip_ulp_core_stats0_to_phy_out_eop;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t go2_u0_from_recovery : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t go2_u0_from_recovery : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_go2_u0_from_recovery;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rx_go_recovery : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_go_recovery : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_rx_go_recovery;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t snt_lrty : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t snt_lrty : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_snt_lrty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t snt_lbad : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t snt_lbad : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_snt_lbad;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rcvd_lrty : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rcvd_lrty : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_rcvd_lrty;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rcvd_lbad : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rcvd_lbad : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_stats0_rcvd_lbad;

typedef struct {
    bb_chip_ulp_core_stats0_rd2clr_config  rd2clr_config;
    bb_chip_ulp_core_stats0_tx_lfps_cnt_in_err  tx_lfps_cnt_in_err;
    bb_chip_ulp_core_stats0_rx_lfps_cnt_in_err  rx_lfps_cnt_in_err;
    bb_chip_ulp_core_stats0_tx_framer_ptp_violated  tx_framer_ptp_violated;
    bb_chip_ulp_core_stats0_link_training_ptp_violated  link_training_ptp_violated;
    bb_chip_ulp_core_stats0_link_command_ptp_violated  link_command_ptp_violated;
    bb_chip_ulp_core_stats0_lmp_ptp_violated  lmp_ptp_violated;
    bb_chip_ulp_core_stats0_link_command_rx_event_fifo_overflow  link_command_rx_event_fifo_overflow;
    bb_chip_ulp_core_stats0_link_command_rx_event_fifo_underflow  link_command_rx_event_fifo_underflow;
    bb_chip_ulp_core_stats0_lmp_rx_event_fifo_overflow  lmp_rx_event_fifo_overflow;
    bb_chip_ulp_core_stats0_lmp_rx_event_fifo_underflow  lmp_rx_event_fifo_underflow;
    bb_chip_ulp_core_stats0_remote_rx_hdr_buff_crdt_cnt_in_err  remote_rx_hdr_buff_crdt_cnt_in_err;
    bb_chip_ulp_core_stats0_to_phy_out_sop  to_phy_out_sop;
    bb_chip_ulp_core_stats0_to_phy_out_eop  to_phy_out_eop;
    bb_chip_ulp_core_stats0_go2_u0_from_recovery  go2_u0_from_recovery;
    bb_chip_ulp_core_stats0_rx_go_recovery  rx_go_recovery;
    bb_chip_ulp_core_stats0_snt_lrty  snt_lrty;
    bb_chip_ulp_core_stats0_snt_lbad  snt_lbad;
    bb_chip_ulp_core_stats0_rcvd_lrty  rcvd_lrty;
    bb_chip_ulp_core_stats0_rcvd_lbad  rcvd_lbad;
    
} bb_chip_ulp_core_stats0;


/*section : ptp_guard_2core */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x3 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x3 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_config0_fix_ptp_violations;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t max_cycle_mode : 4;           /* 19:16 SW=rw HW=ro 0x3 */
            uint32_t max_cycles : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycles : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_mode : 4;           /* 16:19 SW=rw HW=ro 0x3 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_config0_max_cycles;

typedef struct {
    bb_chip_ulp_core_ptp_guard_2core_config0_fix_ptp_violations  fix_ptp_violations;
    bb_chip_ulp_core_ptp_guard_2core_config0_max_cycles  max_cycles;
    
} bb_chip_ulp_core_ptp_guard_2core_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_sop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_stats0_missing_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_eop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_eop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_stats0_missing_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t max_cycle_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycle_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_stats0_max_cycle_err;

typedef struct {
    bb_chip_ulp_core_ptp_guard_2core_stats0_rd2clr_config  rd2clr_config;
    bb_chip_ulp_core_ptp_guard_2core_stats0_missing_sop_err  missing_sop_err;
    bb_chip_ulp_core_ptp_guard_2core_stats0_missing_eop_err  missing_eop_err;
    bb_chip_ulp_core_ptp_guard_2core_stats0_max_cycle_err  max_cycle_err;
    
} bb_chip_ulp_core_ptp_guard_2core_stats0;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2core_irq0_raw;

typedef struct {
    bb_chip_ulp_core_ptp_guard_2core_irq0_enable  enable;
    bb_chip_ulp_core_ptp_guard_2core_irq0_pending  pending;
    bb_chip_ulp_core_ptp_guard_2core_irq0_pending_irq  pending_irq;
    bb_chip_ulp_core_ptp_guard_2core_irq0_raw  raw;
    
} bb_chip_ulp_core_ptp_guard_2core_irq0;


typedef struct {
    bb_chip_ulp_core_ptp_guard_2core_version  version;
    
    union {
        bb_chip_ulp_core_ptp_guard_2core_config0 s;
        uint8_t filler[0x8];
    } config0;
    
    union {
        bb_chip_ulp_core_ptp_guard_2core_stats0 s;
        uint8_t filler[0x10];
    } stats0;
    
    union {
        bb_chip_ulp_core_ptp_guard_2core_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_ulp_core_ptp_guard_2core;


/*section : ptp_guard_2phy */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=na 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=na 0x3 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=na 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=na 0x3 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=na 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_version;

/*section : config0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv2 : 30;
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t activate : 1;           /* 0 SW=rw HW=ro 0x1 */
            uint32_t implemented : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t resv2 : 30;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_config0_fix_ptp_violations;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv20 : 12;
            uint32_t max_cycle_mode : 4;           /* 19:16 SW=rw HW=ro 0x3 */
            uint32_t max_cycles : 16;           /* 15:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycles : 16;           /* 0:15 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_mode : 4;           /* 16:19 SW=rw HW=ro 0x3 */
            uint32_t resv20 : 12;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_config0_max_cycles;

typedef struct {
    bb_chip_ulp_core_ptp_guard_2phy_config0_fix_ptp_violations  fix_ptp_violations;
    bb_chip_ulp_core_ptp_guard_2phy_config0_max_cycles  max_cycles;
    
} bb_chip_ulp_core_ptp_guard_2phy_config0;


/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_sop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_sop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t missing_eop_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_eop_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_eop_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t max_cycle_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t max_cycle_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_stats0_max_cycle_err;

typedef struct {
    bb_chip_ulp_core_ptp_guard_2phy_stats0_rd2clr_config  rd2clr_config;
    bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_sop_err  missing_sop_err;
    bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_eop_err  missing_eop_err;
    bb_chip_ulp_core_ptp_guard_2phy_stats0_max_cycle_err  max_cycle_err;
    
} bb_chip_ulp_core_ptp_guard_2phy_stats0;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t missing_sop_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t missing_eop_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t max_cycle_err : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_ptp_guard_2phy_irq0_raw;

typedef struct {
    bb_chip_ulp_core_ptp_guard_2phy_irq0_enable  enable;
    bb_chip_ulp_core_ptp_guard_2phy_irq0_pending  pending;
    bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_irq  pending_irq;
    bb_chip_ulp_core_ptp_guard_2phy_irq0_raw  raw;
    
} bb_chip_ulp_core_ptp_guard_2phy_irq0;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv30 : 2;
            uint32_t core_clk_mode : 1;           /* 29 SW=rw HW=na 0x0 */
            uint32_t u3_exit_completed : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t u3_as_slave_exit_failed : 1;           /* 27 SW=rw HW=na 0x0 */
            uint32_t u3_as_master_exit_failed : 1;           /* 26 SW=rw HW=na 0x0 */
            uint32_t u3_exit_initiated : 1;           /* 25 SW=rw HW=na 0x0 */
            uint32_t in_u3 : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t u3_entry_failed : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t u3_entry_received : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t in_u2 : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t u2_entry_rejected : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t u2_entry_received : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t in_u1 : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t u1_entry_rejected : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t u1_entry_received : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t completed_hot_reset : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t in_hot_reset : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t completed_warm_reset : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t in_warm_reset : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t rx_termination_det : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t lmp_rx_event_fifo_underflow : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t lmp_rx_event_fifo_overflow : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t link_command_rx_event_fifo_underflow : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t link_command_rx_event_fifo_overflow : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t lmp_ptp_violated : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t link_command_ptp_violated : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t link_training_ptp_violated : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t tx_framer_ptp_violated : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t rx_lfps_cnt_in_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t tx_lfps_cnt_in_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_lfps_cnt_in_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t rx_lfps_cnt_in_err : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t tx_framer_ptp_violated : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t link_training_ptp_violated : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t link_command_ptp_violated : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t lmp_ptp_violated : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t link_command_rx_event_fifo_overflow : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t link_command_rx_event_fifo_underflow : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t lmp_rx_event_fifo_overflow : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t lmp_rx_event_fifo_underflow : 1;           /* 9 SW=rw HW=na 0x0 */
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 1;           /* 10 SW=rw HW=na 0x0 */
            uint32_t rx_termination_det : 1;           /* 11 SW=rw HW=na 0x0 */
            uint32_t in_warm_reset : 1;           /* 12 SW=rw HW=na 0x0 */
            uint32_t completed_warm_reset : 1;           /* 13 SW=rw HW=na 0x0 */
            uint32_t in_hot_reset : 1;           /* 14 SW=rw HW=na 0x0 */
            uint32_t completed_hot_reset : 1;           /* 15 SW=rw HW=na 0x0 */
            uint32_t u1_entry_received : 1;           /* 16 SW=rw HW=na 0x0 */
            uint32_t u1_entry_rejected : 1;           /* 17 SW=rw HW=na 0x0 */
            uint32_t in_u1 : 1;           /* 18 SW=rw HW=na 0x0 */
            uint32_t u2_entry_received : 1;           /* 19 SW=rw HW=na 0x0 */
            uint32_t u2_entry_rejected : 1;           /* 20 SW=rw HW=na 0x0 */
            uint32_t in_u2 : 1;           /* 21 SW=rw HW=na 0x0 */
            uint32_t u3_entry_received : 1;           /* 22 SW=rw HW=na 0x0 */
            uint32_t u3_entry_failed : 1;           /* 23 SW=rw HW=na 0x0 */
            uint32_t in_u3 : 1;           /* 24 SW=rw HW=na 0x0 */
            uint32_t u3_exit_initiated : 1;           /* 25 SW=rw HW=na 0x0 */
            uint32_t u3_as_master_exit_failed : 1;           /* 26 SW=rw HW=na 0x0 */
            uint32_t u3_as_slave_exit_failed : 1;           /* 27 SW=rw HW=na 0x0 */
            uint32_t u3_exit_completed : 1;           /* 28 SW=rw HW=na 0x0 */
            uint32_t core_clk_mode : 1;           /* 29 SW=rw HW=na 0x0 */
            uint32_t resv30 : 2;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv30 : 2;
            uint32_t core_clk_mode : 1;           /* 29 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_exit_completed : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_as_slave_exit_failed : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_as_master_exit_failed : 1;           /* 26 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_exit_initiated : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            uint32_t in_u3 : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_entry_failed : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_entry_received : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t in_u2 : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t u2_entry_rejected : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t u2_entry_received : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t in_u1 : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t u1_entry_rejected : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t u1_entry_received : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t completed_hot_reset : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t in_hot_reset : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t completed_warm_reset : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t in_warm_reset : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_termination_det : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t lmp_rx_event_fifo_underflow : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t lmp_rx_event_fifo_overflow : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t link_command_rx_event_fifo_underflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t link_command_rx_event_fifo_overflow : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t lmp_ptp_violated : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t link_command_ptp_violated : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t link_training_ptp_violated : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_framer_ptp_violated : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_lfps_cnt_in_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_lfps_cnt_in_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_lfps_cnt_in_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_lfps_cnt_in_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t tx_framer_ptp_violated : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t link_training_ptp_violated : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t link_command_ptp_violated : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t lmp_ptp_violated : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t link_command_rx_event_fifo_overflow : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t link_command_rx_event_fifo_underflow : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t lmp_rx_event_fifo_overflow : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t lmp_rx_event_fifo_underflow : 1;           /* 9 SW=r/w1c HW=wo 0x0 */
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 1;           /* 10 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_termination_det : 1;           /* 11 SW=r/w1c HW=wo 0x0 */
            uint32_t in_warm_reset : 1;           /* 12 SW=r/w1c HW=wo 0x0 */
            uint32_t completed_warm_reset : 1;           /* 13 SW=r/w1c HW=wo 0x0 */
            uint32_t in_hot_reset : 1;           /* 14 SW=r/w1c HW=wo 0x0 */
            uint32_t completed_hot_reset : 1;           /* 15 SW=r/w1c HW=wo 0x0 */
            uint32_t u1_entry_received : 1;           /* 16 SW=r/w1c HW=wo 0x0 */
            uint32_t u1_entry_rejected : 1;           /* 17 SW=r/w1c HW=wo 0x0 */
            uint32_t in_u1 : 1;           /* 18 SW=r/w1c HW=wo 0x0 */
            uint32_t u2_entry_received : 1;           /* 19 SW=r/w1c HW=wo 0x0 */
            uint32_t u2_entry_rejected : 1;           /* 20 SW=r/w1c HW=wo 0x0 */
            uint32_t in_u2 : 1;           /* 21 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_entry_received : 1;           /* 22 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_entry_failed : 1;           /* 23 SW=r/w1c HW=wo 0x0 */
            uint32_t in_u3 : 1;           /* 24 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_exit_initiated : 1;           /* 25 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_as_master_exit_failed : 1;           /* 26 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_as_slave_exit_failed : 1;           /* 27 SW=r/w1c HW=wo 0x0 */
            uint32_t u3_exit_completed : 1;           /* 28 SW=r/w1c HW=wo 0x0 */
            uint32_t core_clk_mode : 1;           /* 29 SW=r/w1c HW=wo 0x0 */
            uint32_t resv30 : 2;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv30 : 2;
            uint32_t core_clk_mode : 1;           /* 29 SW=ro HW=na 0x0 */
            uint32_t u3_exit_completed : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t u3_as_slave_exit_failed : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t u3_as_master_exit_failed : 1;           /* 26 SW=ro HW=na 0x0 */
            uint32_t u3_exit_initiated : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t in_u3 : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t u3_entry_failed : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t u3_entry_received : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t in_u2 : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t u2_entry_rejected : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t u2_entry_received : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t in_u1 : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t u1_entry_rejected : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t u1_entry_received : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t completed_hot_reset : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t in_hot_reset : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t completed_warm_reset : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t in_warm_reset : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t rx_termination_det : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t lmp_rx_event_fifo_underflow : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t lmp_rx_event_fifo_overflow : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t link_command_rx_event_fifo_underflow : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t link_command_rx_event_fifo_overflow : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t lmp_ptp_violated : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t link_command_ptp_violated : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t link_training_ptp_violated : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t tx_framer_ptp_violated : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t rx_lfps_cnt_in_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t tx_lfps_cnt_in_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_lfps_cnt_in_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t rx_lfps_cnt_in_err : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t tx_framer_ptp_violated : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t link_training_ptp_violated : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t link_command_ptp_violated : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t lmp_ptp_violated : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t link_command_rx_event_fifo_overflow : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t link_command_rx_event_fifo_underflow : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t lmp_rx_event_fifo_overflow : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t lmp_rx_event_fifo_underflow : 1;           /* 9 SW=ro HW=na 0x0 */
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 1;           /* 10 SW=ro HW=na 0x0 */
            uint32_t rx_termination_det : 1;           /* 11 SW=ro HW=na 0x0 */
            uint32_t in_warm_reset : 1;           /* 12 SW=ro HW=na 0x0 */
            uint32_t completed_warm_reset : 1;           /* 13 SW=ro HW=na 0x0 */
            uint32_t in_hot_reset : 1;           /* 14 SW=ro HW=na 0x0 */
            uint32_t completed_hot_reset : 1;           /* 15 SW=ro HW=na 0x0 */
            uint32_t u1_entry_received : 1;           /* 16 SW=ro HW=na 0x0 */
            uint32_t u1_entry_rejected : 1;           /* 17 SW=ro HW=na 0x0 */
            uint32_t in_u1 : 1;           /* 18 SW=ro HW=na 0x0 */
            uint32_t u2_entry_received : 1;           /* 19 SW=ro HW=na 0x0 */
            uint32_t u2_entry_rejected : 1;           /* 20 SW=ro HW=na 0x0 */
            uint32_t in_u2 : 1;           /* 21 SW=ro HW=na 0x0 */
            uint32_t u3_entry_received : 1;           /* 22 SW=ro HW=na 0x0 */
            uint32_t u3_entry_failed : 1;           /* 23 SW=ro HW=na 0x0 */
            uint32_t in_u3 : 1;           /* 24 SW=ro HW=na 0x0 */
            uint32_t u3_exit_initiated : 1;           /* 25 SW=ro HW=na 0x0 */
            uint32_t u3_as_master_exit_failed : 1;           /* 26 SW=ro HW=na 0x0 */
            uint32_t u3_as_slave_exit_failed : 1;           /* 27 SW=ro HW=na 0x0 */
            uint32_t u3_exit_completed : 1;           /* 28 SW=ro HW=na 0x0 */
            uint32_t core_clk_mode : 1;           /* 29 SW=ro HW=na 0x0 */
            uint32_t resv30 : 2;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv30 : 2;
            uint32_t core_clk_mode : 1;           /* 29 SW=ro HW=wo 0x0 */
            uint32_t u3_exit_completed : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t u3_as_slave_exit_failed : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t u3_as_master_exit_failed : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t u3_exit_initiated : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t in_u3 : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t u3_entry_failed : 1;           /* 23 SW=ro HW=wo 0x0 */
            uint32_t u3_entry_received : 1;           /* 22 SW=ro HW=wo 0x0 */
            uint32_t in_u2 : 1;           /* 21 SW=ro HW=wo 0x0 */
            uint32_t u2_entry_rejected : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t u2_entry_received : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t in_u1 : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t u1_entry_rejected : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t u1_entry_received : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t completed_hot_reset : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t in_hot_reset : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t completed_warm_reset : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t in_warm_reset : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t rx_termination_det : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t lmp_rx_event_fifo_underflow : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t lmp_rx_event_fifo_overflow : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t link_command_rx_event_fifo_underflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t link_command_rx_event_fifo_overflow : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t lmp_ptp_violated : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t link_command_ptp_violated : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t link_training_ptp_violated : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t tx_framer_ptp_violated : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t rx_lfps_cnt_in_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t tx_lfps_cnt_in_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t tx_lfps_cnt_in_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t rx_lfps_cnt_in_err : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t tx_framer_ptp_violated : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t link_training_ptp_violated : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t link_command_ptp_violated : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t lmp_ptp_violated : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t link_command_rx_event_fifo_overflow : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t link_command_rx_event_fifo_underflow : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t lmp_rx_event_fifo_overflow : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t lmp_rx_event_fifo_underflow : 1;           /* 9 SW=ro HW=wo 0x0 */
            uint32_t remote_rx_hdr_buff_crdt_cnt_in_err : 1;           /* 10 SW=ro HW=wo 0x0 */
            uint32_t rx_termination_det : 1;           /* 11 SW=ro HW=wo 0x0 */
            uint32_t in_warm_reset : 1;           /* 12 SW=ro HW=wo 0x0 */
            uint32_t completed_warm_reset : 1;           /* 13 SW=ro HW=wo 0x0 */
            uint32_t in_hot_reset : 1;           /* 14 SW=ro HW=wo 0x0 */
            uint32_t completed_hot_reset : 1;           /* 15 SW=ro HW=wo 0x0 */
            uint32_t u1_entry_received : 1;           /* 16 SW=ro HW=wo 0x0 */
            uint32_t u1_entry_rejected : 1;           /* 17 SW=ro HW=wo 0x0 */
            uint32_t in_u1 : 1;           /* 18 SW=ro HW=wo 0x0 */
            uint32_t u2_entry_received : 1;           /* 19 SW=ro HW=wo 0x0 */
            uint32_t u2_entry_rejected : 1;           /* 20 SW=ro HW=wo 0x0 */
            uint32_t in_u2 : 1;           /* 21 SW=ro HW=wo 0x0 */
            uint32_t u3_entry_received : 1;           /* 22 SW=ro HW=wo 0x0 */
            uint32_t u3_entry_failed : 1;           /* 23 SW=ro HW=wo 0x0 */
            uint32_t in_u3 : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t u3_exit_initiated : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t u3_as_master_exit_failed : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t u3_as_slave_exit_failed : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t u3_exit_completed : 1;           /* 28 SW=ro HW=wo 0x0 */
            uint32_t core_clk_mode : 1;           /* 29 SW=ro HW=wo 0x0 */
            uint32_t resv30 : 2;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_irq0_raw;

typedef struct {
    bb_chip_ulp_core_irq0_enable  enable;
    bb_chip_ulp_core_irq0_pending  pending;
    bb_chip_ulp_core_irq0_pending_irq  pending_irq;
    bb_chip_ulp_core_irq0_raw  raw;
    
} bb_chip_ulp_core_irq0;


/*section : irq1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t in_recovery : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t in_loopback : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t in_compliance : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t in_disabled : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t in_u0 : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t in_polling : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t in_rx_detect : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t in_inactive : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_inactive : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t in_rx_detect : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t in_polling : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t in_u0 : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t in_disabled : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t in_compliance : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t in_loopback : 1;           /* 6 SW=rw HW=na 0x0 */
            uint32_t in_recovery : 1;           /* 7 SW=rw HW=na 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_irq1_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t in_recovery : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t in_loopback : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t in_compliance : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t in_disabled : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t in_u0 : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t in_polling : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t in_rx_detect : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t in_inactive : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_inactive : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t in_rx_detect : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t in_polling : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t in_u0 : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t in_disabled : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t in_compliance : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t in_loopback : 1;           /* 6 SW=r/w1c HW=wo 0x0 */
            uint32_t in_recovery : 1;           /* 7 SW=r/w1c HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_irq1_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t in_recovery : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t in_loopback : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t in_compliance : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t in_disabled : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t in_u0 : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t in_polling : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t in_rx_detect : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t in_inactive : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_inactive : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t in_rx_detect : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t in_polling : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t in_u0 : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t in_disabled : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t in_compliance : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t in_loopback : 1;           /* 6 SW=ro HW=na 0x0 */
            uint32_t in_recovery : 1;           /* 7 SW=ro HW=na 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_irq1_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t in_recovery : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t in_loopback : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t in_compliance : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t in_disabled : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t in_u0 : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t in_polling : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t in_rx_detect : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t in_inactive : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_inactive : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t in_rx_detect : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t in_polling : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t in_u0 : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t in_disabled : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t in_compliance : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t in_loopback : 1;           /* 6 SW=ro HW=wo 0x0 */
            uint32_t in_recovery : 1;           /* 7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_core_irq1_raw;

typedef struct {
    bb_chip_ulp_core_irq1_enable  enable;
    bb_chip_ulp_core_irq1_pending  pending;
    bb_chip_ulp_core_irq1_pending_irq  pending_irq;
    bb_chip_ulp_core_irq1_raw  raw;
    
} bb_chip_ulp_core_irq1;


typedef struct {
    bb_chip_ulp_core_version  version;
    bb_chip_ulp_core_configuration  configuration;
    bb_chip_ulp_core_control  control;
    bb_chip_ulp_core_timer_correction  timer_correction;
    bb_chip_ulp_core_ltssm_state  ltssm_state;
    
    union {
        bb_chip_ulp_core_stats0 s;
        uint8_t filler[0x50];
    } stats0;
    
    union {
        bb_chip_ulp_core_ptp_guard_2core s;
        uint8_t filler[0x2C];
    } ptp_guard_2core;
    
    union {
        bb_chip_ulp_core_ptp_guard_2core s;
        uint8_t filler[0x2C];
    } ptp_guard_2phy;
    
    union {
        bb_chip_ulp_core_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
    union {
        bb_chip_ulp_core_irq1 s;
        uint8_t filler[0x10];
    } irq1;
    
} bb_chip_ulp_core_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_ulp_core_version_READMASK 0xFFFFFF
#define bb_chip_ulp_core_version_WRITEMASK 0x0
#define bb_chip_ulp_core_version_VOLATILEMASK 0x0
#define bb_chip_ulp_core_version_RESETMASK 0xFFFFFF
#define bb_chip_ulp_core_version_DEFAULT 0x00090000

#define bb_chip_ulp_core_configuration_READMASK 0x1FF
#define bb_chip_ulp_core_configuration_WRITEMASK 0x1FF
#define bb_chip_ulp_core_configuration_VOLATILEMASK 0x0
#define bb_chip_ulp_core_configuration_RESETMASK 0x1FF
#define bb_chip_ulp_core_configuration_DEFAULT 0x00000180

#define bb_chip_ulp_core_control_READMASK 0x3FFFFF
#define bb_chip_ulp_core_control_WRITEMASK 0x3FFFFF
#define bb_chip_ulp_core_control_VOLATILEMASK 0x0
#define bb_chip_ulp_core_control_RESETMASK 0x3FFFFF
#define bb_chip_ulp_core_control_DEFAULT 0x00000800

#define bb_chip_ulp_core_timer_correction_READMASK 0x3FF
#define bb_chip_ulp_core_timer_correction_WRITEMASK 0x3FF
#define bb_chip_ulp_core_timer_correction_VOLATILEMASK 0x0
#define bb_chip_ulp_core_timer_correction_RESETMASK 0x3FF
#define bb_chip_ulp_core_timer_correction_DEFAULT 0x00000042

#define bb_chip_ulp_core_ltssm_state_READMASK 0xFF
#define bb_chip_ulp_core_ltssm_state_WRITEMASK 0x0
#define bb_chip_ulp_core_ltssm_state_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_ltssm_state_RESETMASK 0xFF
#define bb_chip_ulp_core_ltssm_state_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_rd2clr_config_READMASK 0x7FFFF
#define bb_chip_ulp_core_stats0_rd2clr_config_WRITEMASK 0x7FFFF
#define bb_chip_ulp_core_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_ulp_core_stats0_rd2clr_config_RESETMASK 0x7FFFF
#define bb_chip_ulp_core_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_tx_lfps_cnt_in_err_READMASK 0xFF
#define bb_chip_ulp_core_stats0_tx_lfps_cnt_in_err_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_tx_lfps_cnt_in_err_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_tx_lfps_cnt_in_err_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_tx_lfps_cnt_in_err_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_rx_lfps_cnt_in_err_READMASK 0xFF
#define bb_chip_ulp_core_stats0_rx_lfps_cnt_in_err_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_rx_lfps_cnt_in_err_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_rx_lfps_cnt_in_err_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_rx_lfps_cnt_in_err_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_tx_framer_ptp_violated_READMASK 0xFF
#define bb_chip_ulp_core_stats0_tx_framer_ptp_violated_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_tx_framer_ptp_violated_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_tx_framer_ptp_violated_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_tx_framer_ptp_violated_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_link_training_ptp_violated_READMASK 0xFF
#define bb_chip_ulp_core_stats0_link_training_ptp_violated_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_link_training_ptp_violated_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_link_training_ptp_violated_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_link_training_ptp_violated_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_link_command_ptp_violated_READMASK 0xFF
#define bb_chip_ulp_core_stats0_link_command_ptp_violated_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_link_command_ptp_violated_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_link_command_ptp_violated_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_link_command_ptp_violated_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_lmp_ptp_violated_READMASK 0xFF
#define bb_chip_ulp_core_stats0_lmp_ptp_violated_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_lmp_ptp_violated_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_lmp_ptp_violated_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_lmp_ptp_violated_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_overflow_READMASK 0xFF
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_overflow_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_overflow_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_overflow_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_overflow_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_underflow_READMASK 0xFF
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_underflow_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_underflow_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_underflow_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_underflow_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_overflow_READMASK 0xFF
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_overflow_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_overflow_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_overflow_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_overflow_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_underflow_READMASK 0xFF
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_underflow_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_underflow_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_underflow_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_underflow_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_remote_rx_hdr_buff_crdt_cnt_in_err_READMASK 0xFF
#define bb_chip_ulp_core_stats0_remote_rx_hdr_buff_crdt_cnt_in_err_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_remote_rx_hdr_buff_crdt_cnt_in_err_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_stats0_remote_rx_hdr_buff_crdt_cnt_in_err_RESETMASK 0xFF
#define bb_chip_ulp_core_stats0_remote_rx_hdr_buff_crdt_cnt_in_err_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_to_phy_out_sop_READMASK 0xFFFFFFFF
#define bb_chip_ulp_core_stats0_to_phy_out_sop_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_to_phy_out_sop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_ulp_core_stats0_to_phy_out_sop_RESETMASK 0xFFFFFFFF
#define bb_chip_ulp_core_stats0_to_phy_out_sop_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_to_phy_out_eop_READMASK 0xFFFFFFFF
#define bb_chip_ulp_core_stats0_to_phy_out_eop_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_to_phy_out_eop_VOLATILEMASK 0xFFFFFFFF
#define bb_chip_ulp_core_stats0_to_phy_out_eop_RESETMASK 0xFFFFFFFF
#define bb_chip_ulp_core_stats0_to_phy_out_eop_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_go2_u0_from_recovery_READMASK 0xFFFF
#define bb_chip_ulp_core_stats0_go2_u0_from_recovery_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_go2_u0_from_recovery_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_stats0_go2_u0_from_recovery_RESETMASK 0xFFFF
#define bb_chip_ulp_core_stats0_go2_u0_from_recovery_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_rx_go_recovery_READMASK 0xFFFF
#define bb_chip_ulp_core_stats0_rx_go_recovery_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_rx_go_recovery_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_stats0_rx_go_recovery_RESETMASK 0xFFFF
#define bb_chip_ulp_core_stats0_rx_go_recovery_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_snt_lrty_READMASK 0xFFFF
#define bb_chip_ulp_core_stats0_snt_lrty_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_snt_lrty_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_stats0_snt_lrty_RESETMASK 0xFFFF
#define bb_chip_ulp_core_stats0_snt_lrty_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_snt_lbad_READMASK 0xFFFF
#define bb_chip_ulp_core_stats0_snt_lbad_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_snt_lbad_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_stats0_snt_lbad_RESETMASK 0xFFFF
#define bb_chip_ulp_core_stats0_snt_lbad_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_rcvd_lrty_READMASK 0xFFFF
#define bb_chip_ulp_core_stats0_rcvd_lrty_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_rcvd_lrty_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_stats0_rcvd_lrty_RESETMASK 0xFFFF
#define bb_chip_ulp_core_stats0_rcvd_lrty_DEFAULT 0x00000000

#define bb_chip_ulp_core_stats0_rcvd_lbad_READMASK 0xFFFF
#define bb_chip_ulp_core_stats0_rcvd_lbad_WRITEMASK 0x0
#define bb_chip_ulp_core_stats0_rcvd_lbad_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_stats0_rcvd_lbad_RESETMASK 0xFFFF
#define bb_chip_ulp_core_stats0_rcvd_lbad_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2core_version_READMASK 0xFFFFFF
#define bb_chip_ulp_core_ptp_guard_2core_version_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_version_VOLATILEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_version_RESETMASK 0xFFFFFF
#define bb_chip_ulp_core_ptp_guard_2core_version_DEFAULT 0x00030300

#define bb_chip_ulp_core_ptp_guard_2core_config0_fix_ptp_violations_READMASK 0x3
#define bb_chip_ulp_core_ptp_guard_2core_config0_fix_ptp_violations_WRITEMASK 0x1
#define bb_chip_ulp_core_ptp_guard_2core_config0_fix_ptp_violations_VOLATILEMASK 0x2
#define bb_chip_ulp_core_ptp_guard_2core_config0_fix_ptp_violations_RESETMASK 0x3
#define bb_chip_ulp_core_ptp_guard_2core_config0_fix_ptp_violations_DEFAULT 0x00000001

#define bb_chip_ulp_core_ptp_guard_2core_config0_max_cycles_READMASK 0xFFFFF
#define bb_chip_ulp_core_ptp_guard_2core_config0_max_cycles_WRITEMASK 0xFFFFF
#define bb_chip_ulp_core_ptp_guard_2core_config0_max_cycles_VOLATILEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_config0_max_cycles_RESETMASK 0xFFFFF
#define bb_chip_ulp_core_ptp_guard_2core_config0_max_cycles_DEFAULT 0x00030000

#define bb_chip_ulp_core_ptp_guard_2core_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_sop_err_READMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_sop_err_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_sop_err_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_sop_err_RESETMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_sop_err_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_eop_err_READMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_eop_err_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_eop_err_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_eop_err_RESETMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_eop_err_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2core_stats0_max_cycle_err_READMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2core_stats0_max_cycle_err_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_stats0_max_cycle_err_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2core_stats0_max_cycle_err_RESETMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2core_stats0_max_cycle_err_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2core_irq0_enable_READMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_enable_WRITEMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_irq0_enable_RESETMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_enable_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_READMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_WRITEMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_VOLATILEMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_RESETMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_irq_READMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_irq_RESETMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2core_irq0_raw_READMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_raw_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2core_irq0_raw_VOLATILEMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_raw_RESETMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2core_irq0_raw_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2phy_version_READMASK 0xFFFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_version_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_version_VOLATILEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_version_RESETMASK 0xFFFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_version_DEFAULT 0x00030300

#define bb_chip_ulp_core_ptp_guard_2phy_config0_fix_ptp_violations_READMASK 0x3
#define bb_chip_ulp_core_ptp_guard_2phy_config0_fix_ptp_violations_WRITEMASK 0x1
#define bb_chip_ulp_core_ptp_guard_2phy_config0_fix_ptp_violations_VOLATILEMASK 0x2
#define bb_chip_ulp_core_ptp_guard_2phy_config0_fix_ptp_violations_RESETMASK 0x3
#define bb_chip_ulp_core_ptp_guard_2phy_config0_fix_ptp_violations_DEFAULT 0x00000001

#define bb_chip_ulp_core_ptp_guard_2phy_config0_max_cycles_READMASK 0xFFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_config0_max_cycles_WRITEMASK 0xFFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_config0_max_cycles_VOLATILEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_config0_max_cycles_RESETMASK 0xFFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_config0_max_cycles_DEFAULT 0x00030000

#define bb_chip_ulp_core_ptp_guard_2phy_stats0_rd2clr_config_READMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_rd2clr_config_WRITEMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_rd2clr_config_RESETMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_sop_err_READMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_sop_err_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_sop_err_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_sop_err_RESETMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_sop_err_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_eop_err_READMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_eop_err_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_eop_err_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_eop_err_RESETMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_eop_err_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2phy_stats0_max_cycle_err_READMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_max_cycle_err_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_max_cycle_err_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_max_cycle_err_RESETMASK 0xFFFF
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_max_cycle_err_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2phy_irq0_enable_READMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_enable_WRITEMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_enable_RESETMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_enable_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_READMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_WRITEMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_VOLATILEMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_RESETMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_irq_READMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_irq_RESETMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_ulp_core_ptp_guard_2phy_irq0_raw_READMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_raw_WRITEMASK 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_raw_VOLATILEMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_raw_RESETMASK 0x7
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_raw_DEFAULT 0x00000000

#define bb_chip_ulp_core_irq0_enable_READMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_enable_WRITEMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_ulp_core_irq0_enable_RESETMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_enable_DEFAULT 0x00000000

#define bb_chip_ulp_core_irq0_pending_READMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_pending_WRITEMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_pending_VOLATILEMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_pending_RESETMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_pending_DEFAULT 0x00000000

#define bb_chip_ulp_core_irq0_pending_irq_READMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_ulp_core_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_ulp_core_irq0_pending_irq_RESETMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_ulp_core_irq0_raw_READMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_raw_WRITEMASK 0x0
#define bb_chip_ulp_core_irq0_raw_VOLATILEMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_raw_RESETMASK 0x3FFFFFFF
#define bb_chip_ulp_core_irq0_raw_DEFAULT 0x00000000

#define bb_chip_ulp_core_irq1_enable_READMASK 0xFF
#define bb_chip_ulp_core_irq1_enable_WRITEMASK 0xFF
#define bb_chip_ulp_core_irq1_enable_VOLATILEMASK 0x0
#define bb_chip_ulp_core_irq1_enable_RESETMASK 0xFF
#define bb_chip_ulp_core_irq1_enable_DEFAULT 0x00000000

#define bb_chip_ulp_core_irq1_pending_READMASK 0xFF
#define bb_chip_ulp_core_irq1_pending_WRITEMASK 0xFF
#define bb_chip_ulp_core_irq1_pending_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_irq1_pending_RESETMASK 0xFF
#define bb_chip_ulp_core_irq1_pending_DEFAULT 0x00000000

#define bb_chip_ulp_core_irq1_pending_irq_READMASK 0xFF
#define bb_chip_ulp_core_irq1_pending_irq_WRITEMASK 0x0
#define bb_chip_ulp_core_irq1_pending_irq_VOLATILEMASK 0x0
#define bb_chip_ulp_core_irq1_pending_irq_RESETMASK 0xFF
#define bb_chip_ulp_core_irq1_pending_irq_DEFAULT 0x00000000

#define bb_chip_ulp_core_irq1_raw_READMASK 0xFF
#define bb_chip_ulp_core_irq1_raw_WRITEMASK 0x0
#define bb_chip_ulp_core_irq1_raw_VOLATILEMASK 0xFF
#define bb_chip_ulp_core_irq1_raw_RESETMASK 0xFF
#define bb_chip_ulp_core_irq1_raw_DEFAULT 0x00000000

/*block : ulp_phy */


#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv13 : 19;
            uint32_t tx_swing : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t tx_margin : 3;           /* 10:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t tx_deemph : 2;           /* 5:4 SW=rw HW=ro 0x1 */
            
            uint32_t resv3 : 1;
            uint32_t reset_n : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rx_eq_training : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t elas_buf_mode : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t elas_buf_mode : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rx_eq_training : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t reset_n : 1;           /* 2 SW=rw HW=ro 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t tx_deemph : 2;           /* 4:5 SW=rw HW=ro 0x1 */
            
            uint32_t resv6 : 2;
            uint32_t tx_margin : 3;           /* 8:10 SW=rw HW=ro 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t tx_swing : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t resv13 : 19;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_pipe_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t gen_lfps_ping : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gen_lfps_ping : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_compliancy_ctrl;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t rx_disparity_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rx_elastic_buff_underflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rx_elastic_buff_overflow : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rx_8b10b_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_8b10b_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rx_elastic_buff_overflow : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rx_elastic_buff_underflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rx_disparity_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rx_8b10b_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_8b10b_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats0_rx_8b10b_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rx_elastic_buff_overflow : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_elastic_buff_overflow : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats0_rx_elastic_buff_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rx_elastic_buff_underflow : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_elastic_buff_underflow : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats0_rx_elastic_buff_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rx_disparity_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_disparity_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats0_rx_disparity_err;

typedef struct {
    bb_chip_ulp_phy_stats0_rd2clr_config  rd2clr_config;
    bb_chip_ulp_phy_stats0_rx_8b10b_err  rx_8b10b_err;
    bb_chip_ulp_phy_stats0_rx_elastic_buff_overflow  rx_elastic_buff_overflow;
    bb_chip_ulp_phy_stats0_rx_elastic_buff_underflow  rx_elastic_buff_underflow;
    bb_chip_ulp_phy_stats0_rx_disparity_err  rx_disparity_err;
    
} bb_chip_ulp_phy_stats0;


/*section : stats1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t skp_insert_in_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats1_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t skp_insert_in_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats1_skp_insert_in_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t crc5_chk_failed : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t crc5_chk_failed : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats1_crc5_chk_failed;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t crc16_chk_failed : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t crc16_chk_failed : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats1_crc16_chk_failed;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t dpp_abort : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dpp_abort : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats1_dpp_abort;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rx_framer_ptp_violated : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_framer_ptp_violated : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_stats1_rx_framer_ptp_violated;

typedef struct {
    bb_chip_ulp_phy_stats1_rd2clr_config  rd2clr_config;
    bb_chip_ulp_phy_stats1_skp_insert_in_err  skp_insert_in_err;
    bb_chip_ulp_phy_stats1_crc5_chk_failed  crc5_chk_failed;
    bb_chip_ulp_phy_stats1_crc16_chk_failed  crc16_chk_failed;
    bb_chip_ulp_phy_stats1_dpp_abort  dpp_abort;
    bb_chip_ulp_phy_stats1_rx_framer_ptp_violated  rx_framer_ptp_violated;
    
} bb_chip_ulp_phy_stats1;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t skp_insert_in_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t skp_insert_in_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t skp_insert_in_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t skp_insert_in_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} bb_chip_ulp_phy_irq0_raw;

typedef struct {
    bb_chip_ulp_phy_irq0_enable  enable;
    bb_chip_ulp_phy_irq0_pending  pending;
    bb_chip_ulp_phy_irq0_pending_irq  pending_irq;
    bb_chip_ulp_phy_irq0_raw  raw;
    
} bb_chip_ulp_phy_irq0;


typedef struct {
    bb_chip_ulp_phy_version  version;
    bb_chip_ulp_phy_pipe_ctrl  pipe_ctrl;
    bb_chip_ulp_phy_compliancy_ctrl  compliancy_ctrl;
    
    union {
        bb_chip_ulp_phy_stats0 s;
        uint8_t filler[0x14];
    } stats0;
    
    union {
        bb_chip_ulp_phy_stats1 s;
        uint8_t filler[0x18];
    } stats1;
    
    union {
        bb_chip_ulp_phy_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
} bb_chip_ulp_phy_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_ulp_phy_version_READMASK 0xFFFFFF
#define bb_chip_ulp_phy_version_WRITEMASK 0x0
#define bb_chip_ulp_phy_version_VOLATILEMASK 0x0
#define bb_chip_ulp_phy_version_RESETMASK 0xFFFFFF
#define bb_chip_ulp_phy_version_DEFAULT 0x00030200

#define bb_chip_ulp_phy_pipe_ctrl_READMASK 0x1737
#define bb_chip_ulp_phy_pipe_ctrl_WRITEMASK 0x1737
#define bb_chip_ulp_phy_pipe_ctrl_VOLATILEMASK 0x0
#define bb_chip_ulp_phy_pipe_ctrl_RESETMASK 0x1737
#define bb_chip_ulp_phy_pipe_ctrl_DEFAULT 0x00000010

#define bb_chip_ulp_phy_compliancy_ctrl_READMASK 0x1
#define bb_chip_ulp_phy_compliancy_ctrl_WRITEMASK 0x1
#define bb_chip_ulp_phy_compliancy_ctrl_VOLATILEMASK 0x0
#define bb_chip_ulp_phy_compliancy_ctrl_RESETMASK 0x1
#define bb_chip_ulp_phy_compliancy_ctrl_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats0_rd2clr_config_READMASK 0xF
#define bb_chip_ulp_phy_stats0_rd2clr_config_WRITEMASK 0xF
#define bb_chip_ulp_phy_stats0_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_ulp_phy_stats0_rd2clr_config_RESETMASK 0xF
#define bb_chip_ulp_phy_stats0_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats0_rx_8b10b_err_READMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_8b10b_err_WRITEMASK 0x0
#define bb_chip_ulp_phy_stats0_rx_8b10b_err_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_8b10b_err_RESETMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_8b10b_err_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats0_rx_elastic_buff_overflow_READMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_overflow_WRITEMASK 0x0
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_overflow_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_overflow_RESETMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_overflow_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats0_rx_elastic_buff_underflow_READMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_underflow_WRITEMASK 0x0
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_underflow_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_underflow_RESETMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_underflow_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats0_rx_disparity_err_READMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_disparity_err_WRITEMASK 0x0
#define bb_chip_ulp_phy_stats0_rx_disparity_err_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_disparity_err_RESETMASK 0xFFFF
#define bb_chip_ulp_phy_stats0_rx_disparity_err_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats1_rd2clr_config_READMASK 0x1F
#define bb_chip_ulp_phy_stats1_rd2clr_config_WRITEMASK 0x1F
#define bb_chip_ulp_phy_stats1_rd2clr_config_VOLATILEMASK 0x0
#define bb_chip_ulp_phy_stats1_rd2clr_config_RESETMASK 0x1F
#define bb_chip_ulp_phy_stats1_rd2clr_config_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats1_skp_insert_in_err_READMASK 0xFFFF
#define bb_chip_ulp_phy_stats1_skp_insert_in_err_WRITEMASK 0x0
#define bb_chip_ulp_phy_stats1_skp_insert_in_err_VOLATILEMASK 0xFFFF
#define bb_chip_ulp_phy_stats1_skp_insert_in_err_RESETMASK 0xFFFF
#define bb_chip_ulp_phy_stats1_skp_insert_in_err_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats1_crc5_chk_failed_READMASK 0xFF
#define bb_chip_ulp_phy_stats1_crc5_chk_failed_WRITEMASK 0x0
#define bb_chip_ulp_phy_stats1_crc5_chk_failed_VOLATILEMASK 0xFF
#define bb_chip_ulp_phy_stats1_crc5_chk_failed_RESETMASK 0xFF
#define bb_chip_ulp_phy_stats1_crc5_chk_failed_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats1_crc16_chk_failed_READMASK 0xFF
#define bb_chip_ulp_phy_stats1_crc16_chk_failed_WRITEMASK 0x0
#define bb_chip_ulp_phy_stats1_crc16_chk_failed_VOLATILEMASK 0xFF
#define bb_chip_ulp_phy_stats1_crc16_chk_failed_RESETMASK 0xFF
#define bb_chip_ulp_phy_stats1_crc16_chk_failed_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats1_dpp_abort_READMASK 0xFF
#define bb_chip_ulp_phy_stats1_dpp_abort_WRITEMASK 0x0
#define bb_chip_ulp_phy_stats1_dpp_abort_VOLATILEMASK 0xFF
#define bb_chip_ulp_phy_stats1_dpp_abort_RESETMASK 0xFF
#define bb_chip_ulp_phy_stats1_dpp_abort_DEFAULT 0x00000000

#define bb_chip_ulp_phy_stats1_rx_framer_ptp_violated_READMASK 0xFF
#define bb_chip_ulp_phy_stats1_rx_framer_ptp_violated_WRITEMASK 0x0
#define bb_chip_ulp_phy_stats1_rx_framer_ptp_violated_VOLATILEMASK 0xFF
#define bb_chip_ulp_phy_stats1_rx_framer_ptp_violated_RESETMASK 0xFF
#define bb_chip_ulp_phy_stats1_rx_framer_ptp_violated_DEFAULT 0x00000000

#define bb_chip_ulp_phy_irq0_enable_READMASK 0x1F
#define bb_chip_ulp_phy_irq0_enable_WRITEMASK 0x1F
#define bb_chip_ulp_phy_irq0_enable_VOLATILEMASK 0x0
#define bb_chip_ulp_phy_irq0_enable_RESETMASK 0x1F
#define bb_chip_ulp_phy_irq0_enable_DEFAULT 0x00000000

#define bb_chip_ulp_phy_irq0_pending_READMASK 0x1F
#define bb_chip_ulp_phy_irq0_pending_WRITEMASK 0x1F
#define bb_chip_ulp_phy_irq0_pending_VOLATILEMASK 0x1F
#define bb_chip_ulp_phy_irq0_pending_RESETMASK 0x1F
#define bb_chip_ulp_phy_irq0_pending_DEFAULT 0x00000000

#define bb_chip_ulp_phy_irq0_pending_irq_READMASK 0x1F
#define bb_chip_ulp_phy_irq0_pending_irq_WRITEMASK 0x0
#define bb_chip_ulp_phy_irq0_pending_irq_VOLATILEMASK 0x0
#define bb_chip_ulp_phy_irq0_pending_irq_RESETMASK 0x1F
#define bb_chip_ulp_phy_irq0_pending_irq_DEFAULT 0x00000000

#define bb_chip_ulp_phy_irq0_raw_READMASK 0x1F
#define bb_chip_ulp_phy_irq0_raw_WRITEMASK 0x0
#define bb_chip_ulp_phy_irq0_raw_VOLATILEMASK 0x1F
#define bb_chip_ulp_phy_irq0_raw_RESETMASK 0x1F
#define bb_chip_ulp_phy_irq0_raw_DEFAULT 0x00000000

/* chip : bb_chip */

#ifndef __ASSEMBLER__







































#ifndef __ASSEMBLER__
typedef struct {
    
    union {
        bb_chip_leon2_s s;
        uint8_t filler[0x100];
    } leon2;
    
    
    uint8_t filler2[0x400];
    
    union {
        bb_chip_uart_s s;
        uint8_t filler[0x100];
    } uart;
    
    
    union {
        bb_chip_i2c_master_s s;
        uint8_t filler[0x100];
    } i2c_master;
    
    
    union {
        bb_chip_i2c_slave_s s;
        uint8_t filler[0x100];
    } i2c_slave;
    
    
    union {
        bb_chip_mdio_master_s s;
        uint8_t filler[0x100];
    } mdio_master;
    
    
    union {
        bb_chip_spi_flash_ctrl_s s;
        uint8_t filler[0x100];
    } spi_flash_ctrl;
    
    
    union {
        bb_chip_gpio_ctrl_s s;
        uint8_t filler[0x100];
    } gpio_ctrl;
    
    
    uint8_t filler8[0x500];
    
    union {
        bb_chip_bb_core_s s;
        uint8_t filler[0x100];
    } bb_core;
    
    
    uint8_t filler9[0xF00];
    
    union {
        bb_chip_bb_top_s s;
        uint8_t filler[0x200];
    } bb_top;
    
    
    uint8_t filler10[0x300];
    
    union {
        bb_chip_uart_s s;
        uint8_t filler[0x100];
    } ge_uart;
    
    
    uint8_t filler11[0xA00];
    
    union {
        bb_chip_link_layer_tx_s s;
        uint8_t filler[0x200];
    } link_layer_tx;
    
    
    uint8_t filler12[0x200];
    
    union {
        bb_chip_link_layer_rx_s s;
        uint8_t filler[0x200];
    } link_layer_rx;
    
    
    uint8_t filler13[0x200];
    
    union {
        bb_chip_layer3_tx_s s;
        uint8_t filler[0x100];
    } layer3_tx;
    
    
    uint8_t filler14[0x300];
    
    union {
        bb_chip_layer3_rx_s s;
        uint8_t filler[0x100];
    } layer3_rx;
    
    
    union {
        bb_chip_mca_core_s s;
        uint8_t filler[0x100];
    } mca_core;
    
    
    union {
        bb_chip_mca_channel_s s;
        uint8_t filler[0x100];
    } mca_channel[0x6];
    
    
    union {
        bb_chip_dp_sink_main_s s;
        uint8_t filler[0x200];
    } dp_sink_main;
    
    
    union {
        bb_chip_dp_sink_tico_s s;
        uint8_t filler[0x100];
    } dp_sink_tico;
    
    
    union {
        bb_chip_dp_sink_aux_hpd_s s;
        uint8_t filler[0x100];
    } dp_sink_aux_hpd;
    
    
    union {
        bb_chip_dp_source_main_s s;
        uint8_t filler[0x200];
    } dp_source_main;
    
    
    union {
        bb_chip_dp_source_tico_s s;
        uint8_t filler[0x100];
    } dp_source_tico;
    
    
    union {
        bb_chip_dp_sink_aux_hpd_s s;
        uint8_t filler[0x100];
    } dp_source_aux_hpd;
    
    
    union {
        bb_chip_xusb3_s s;
        uint8_t filler[0x200];
    } xusb3;
    
    
    union {
        bb_chip_upp_s s;
        uint8_t filler[0x300];
    } upp;
    
    
    union {
        bb_chip_ulp_core_s s;
        uint8_t filler[0x200];
    } ulp_core;
    
    
    union {
        bb_chip_ulp_phy_s s;
        uint8_t filler[0x100];
    } ulp_phy;
    
    
    uint8_t filler19[0xFFFAC00];
    
} bb_chip_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define bb_chip_s_SIZE 0x10000000
#define bb_chip_leon2_s_SIZE 0x100
#define bb_chip_leon2_mem_ctrl_SIZE 0xC
#define bb_chip_leon2_mem_ctrl_mcfg1_SIZE 0x4
#define bb_chip_leon2_mem_ctrl_mcfg2_SIZE 0x4
#define bb_chip_leon2_mem_ctrl_mcfg3_SIZE 0x4
#define bb_chip_leon2_ahb_stat_SIZE 0x8
#define bb_chip_leon2_ahb_stat_ahb_failing_SIZE 0x4
#define bb_chip_leon2_ahb_stat_ahb_status_SIZE 0x4
#define bb_chip_leon2_cache_controller_SIZE 0x8
#define bb_chip_leon2_cache_controller_cache_control_SIZE 0x4
#define bb_chip_leon2_cache_controller_power_down_SIZE 0x4
#define bb_chip_leon2_write_prot_SIZE 0x8
#define bb_chip_leon2_write_prot_write_prot1_SIZE 0x4
#define bb_chip_leon2_write_prot_write_prot2_SIZE 0x4
#define bb_chip_leon2_leon_config_SIZE 0x4
#define bb_chip_leon2_timers_SIZE 0x28
#define bb_chip_leon2_timers_timer1_counter_SIZE 0x4
#define bb_chip_leon2_timers_timer1_reload_SIZE 0x4
#define bb_chip_leon2_timers_timer1_control_SIZE 0x4
#define bb_chip_leon2_timers_watchdog_counter_SIZE 0x4
#define bb_chip_leon2_timers_timer2_counter_SIZE 0x4
#define bb_chip_leon2_timers_timer2_reload_SIZE 0x4
#define bb_chip_leon2_timers_timer2_control_SIZE 0x4
#define bb_chip_leon2_timers_prescaler_counter_SIZE 0x4
#define bb_chip_leon2_timers_prescaler_reload_SIZE 0x4
#define bb_chip_leon2_uarts_SIZE 0x20
#define bb_chip_leon2_uarts_uart1_data_SIZE 0x4
#define bb_chip_leon2_uarts_uart1_status_SIZE 0x4
#define bb_chip_leon2_uarts_uart1_control_SIZE 0x4
#define bb_chip_leon2_uarts_uart1_scaler_SIZE 0x4
#define bb_chip_leon2_uarts_uart2_data_SIZE 0x4
#define bb_chip_leon2_uarts_uart2_status_SIZE 0x4
#define bb_chip_leon2_uarts_uart2_control_SIZE 0x4
#define bb_chip_leon2_uarts_uart2_scaler_SIZE 0x4
#define bb_chip_leon2_irqctrl_SIZE 0x10
#define bb_chip_leon2_irqctrl_int_mask_SIZE 0x4
#define bb_chip_leon2_irqctrl_int_pending_SIZE 0x4
#define bb_chip_leon2_irqctrl_int_force_SIZE 0x4
#define bb_chip_leon2_irqctrl_int_clear_SIZE 0x4
#define bb_chip_leon2_io_port_SIZE 0xC
#define bb_chip_leon2_io_port_io_val_SIZE 0x4
#define bb_chip_leon2_io_port_io_dir_SIZE 0x4
#define bb_chip_leon2_io_port_io_int_cfg_SIZE 0x4
#define bb_chip_leon2_irqctrl2_SIZE 0xC
#define bb_chip_leon2_irqctrl2_int_mask_SIZE 0x4
#define bb_chip_leon2_irqctrl2_int_pending_SIZE 0x4
#define bb_chip_leon2_irqctrl2_int_status_clear_SIZE 0x4
#define bb_chip_leon2_dsu_uart_SIZE 0xC
#define bb_chip_leon2_dsu_uart_dsu_status_SIZE 0x4
#define bb_chip_leon2_dsu_uart_dsu_control_SIZE 0x4
#define bb_chip_leon2_dsu_uart_dsu_scaler_SIZE 0x4
#define bb_chip_uart_s_SIZE 0x100
#define bb_chip_uart_version_SIZE 0x4
#define bb_chip_uart_tx_fifo_SIZE 0x4
#define bb_chip_uart_rx_fifo_SIZE 0x4
#define bb_chip_uart_tx_data_SIZE 0x4
#define bb_chip_uart_rx_data_SIZE 0x4
#define bb_chip_uart_control_SIZE 0x4
#define bb_chip_uart_timeout_SIZE 0x4
#define bb_chip_uart_errors_SIZE 0x4
#define bb_chip_i2c_master_s_SIZE 0x100
#define bb_chip_i2c_master_version_SIZE 0x4
#define bb_chip_i2c_master_prescaler_SIZE 0x4
#define bb_chip_i2c_master_fifo_SIZE 0x4
#define bb_chip_i2c_master_control_SIZE 0x4
#define bb_chip_i2c_master_wr_data_SIZE 0x4
#define bb_chip_i2c_master_rd_data_SIZE 0x4
#define bb_chip_i2c_master_irq_SIZE 0x10
#define bb_chip_i2c_master_irq_enable_SIZE 0x4
#define bb_chip_i2c_master_irq_pending_SIZE 0x4
#define bb_chip_i2c_master_irq_pending_irq_SIZE 0x4
#define bb_chip_i2c_master_irq_raw_SIZE 0x4
#define bb_chip_i2c_slave_s_SIZE 0x100
#define bb_chip_i2c_slave_version_SIZE 0x4
#define bb_chip_i2c_slave_in_fifo_SIZE 0x4
#define bb_chip_i2c_slave_out_fifo_SIZE 0x4
#define bb_chip_i2c_slave_slave_config_SIZE 0x4
#define bb_chip_i2c_slave_timeout_SIZE 0x4
#define bb_chip_i2c_slave_status_SIZE 0x4
#define bb_chip_i2c_slave_wr_data_SIZE 0x4
#define bb_chip_i2c_slave_rd_data_SIZE 0x4
#define bb_chip_i2c_slave_irq_SIZE 0x10
#define bb_chip_i2c_slave_irq_enable_SIZE 0x4
#define bb_chip_i2c_slave_irq_pending_SIZE 0x4
#define bb_chip_i2c_slave_irq_pending_irq_SIZE 0x4
#define bb_chip_i2c_slave_irq_raw_SIZE 0x4
#define bb_chip_mdio_master_s_SIZE 0x100
#define bb_chip_mdio_master_version_SIZE 0x4
#define bb_chip_mdio_master_timing_SIZE 0x4
#define bb_chip_mdio_master_control_SIZE 0x4
#define bb_chip_mdio_master_wr_data_SIZE 0x4
#define bb_chip_mdio_master_rd_data_SIZE 0x4
#define bb_chip_mdio_master_irq_SIZE 0x10
#define bb_chip_mdio_master_irq_enable_SIZE 0x4
#define bb_chip_mdio_master_irq_pending_SIZE 0x4
#define bb_chip_mdio_master_irq_pending_irq_SIZE 0x4
#define bb_chip_mdio_master_irq_raw_SIZE 0x4
#define bb_chip_spi_flash_ctrl_s_SIZE 0x100
#define bb_chip_spi_flash_ctrl_version_SIZE 0x4
#define bb_chip_spi_flash_ctrl_generic_cfg_SIZE 0x4
#define bb_chip_spi_flash_ctrl_addr_offset_SIZE 0x4
#define bb_chip_spi_flash_ctrl_addr_SIZE 0x4
#define bb_chip_spi_flash_ctrl_basic_cfg_SIZE 0x4
#define bb_chip_spi_flash_ctrl_control_SIZE 0x4
#define bb_chip_spi_flash_ctrl_wr_data_SIZE 0x4
#define bb_chip_spi_flash_ctrl_rd_data_SIZE 0x4
#define bb_chip_spi_flash_ctrl_in_fifo_SIZE 0x4
#define bb_chip_spi_flash_ctrl_out_fifo_SIZE 0x4
#define bb_chip_spi_flash_ctrl_mm_SIZE 0x10
#define bb_chip_spi_flash_ctrl_mm_addr_offset_SIZE 0x4
#define bb_chip_spi_flash_ctrl_mm_basic_cfg_SIZE 0x4
#define bb_chip_spi_flash_ctrl_mm_xip_cfg_SIZE 0x4
#define bb_chip_spi_flash_ctrl_mm_suspend_cfg_SIZE 0x4
#define bb_chip_spi_flash_ctrl_irq_SIZE 0x10
#define bb_chip_spi_flash_ctrl_irq_enable_SIZE 0x4
#define bb_chip_spi_flash_ctrl_irq_pending_SIZE 0x4
#define bb_chip_spi_flash_ctrl_irq_pending_irq_SIZE 0x4
#define bb_chip_spi_flash_ctrl_irq_raw_SIZE 0x4
#define bb_chip_gpio_ctrl_s_SIZE 0x100
#define bb_chip_gpio_ctrl_version_SIZE 0x4
#define bb_chip_gpio_ctrl_gpio_dir_SIZE 0x4
#define bb_chip_gpio_ctrl_gpio_out_SIZE 0x4
#define bb_chip_gpio_ctrl_gpio_in_SIZE 0x4
#define bb_chip_gpio_ctrl_irq_SIZE 0x20
#define bb_chip_gpio_ctrl_irq_enable_SIZE 0x4
#define bb_chip_gpio_ctrl_irq_pending_SIZE 0x4
#define bb_chip_gpio_ctrl_irq_pending_irq_SIZE 0x4
#define bb_chip_gpio_ctrl_irq_raw_SIZE 0x4
#define bb_chip_gpio_ctrl_irq_int_type_SIZE 0x10
#define bb_chip_bb_core_s_SIZE 0x100
#define bb_chip_bb_core_version_SIZE 0x4
#define bb_chip_bb_core_cpu_freq_SIZE 0x4
#define bb_chip_bb_core_sys_config_SIZE 0x4
#define bb_chip_bb_core_feature_SIZE 0x4
#define bb_chip_bb_core_module_version_ctrl_SIZE 0x4
#define bb_chip_bb_core_module_version_SIZE 0x4
#define bb_chip_bb_core_irq_SIZE 0x10
#define bb_chip_bb_core_irq_enable_SIZE 0x4
#define bb_chip_bb_core_irq_pending_SIZE 0x4
#define bb_chip_bb_core_irq_pending_irq_SIZE 0x4
#define bb_chip_bb_core_irq_raw_SIZE 0x4
#define bb_chip_bb_core_cpu_comm_tx_SIZE 0x4
#define bb_chip_bb_core_cpu_comm_rx_SIZE 0x4
#define bb_chip_bb_core_xmii_ctrl_SIZE 0x4
#define bb_chip_bb_core_rs232_ctrl_SIZE 0x4
#define bb_chip_bb_core_xgmii_idle_counter_SIZE 0x8
#define bb_chip_bb_core_xgmii_idle_counter_control_SIZE 0x4
#define bb_chip_bb_core_xgmii_idle_counter_status_SIZE 0x4
#define bb_chip_bb_core_ahb_to_apb_ctrl_SIZE 0x4
#define bb_chip_bb_core_ge_ctrl_SIZE 0x4
#define bb_chip_bb_core_scratchpad_SIZE 0x10
#define bb_chip_bb_core_scratchpad_spr_SIZE 0x10
#define bb_chip_bb_top_s_SIZE 0x200
#define bb_chip_bb_top_version_SIZE 0x4
#define bb_chip_bb_top_sys_config_SIZE 0x4
#define bb_chip_bb_top_feature_SIZE 0x4
#define bb_chip_bb_top_icap_SIZE 0x8
#define bb_chip_bb_top_icap_wdata_SIZE 0x4
#define bb_chip_bb_top_icap_rdata_SIZE 0x4
#define bb_chip_bb_top_grm_SIZE 0x4
#define bb_chip_bb_top_grm_soft_rst_ctrl_SIZE 0x4
#define bb_chip_bb_top_gcm_SIZE 0x14
#define bb_chip_bb_top_gcm_control_SIZE 0x4
#define bb_chip_bb_top_gcm_status_SIZE 0x4
#define bb_chip_bb_top_gcm_freq_det_SIZE 0x4
#define bb_chip_bb_top_gcm_freq_det_dp_SIZE 0x4
#define bb_chip_bb_top_gcm_freq_det_dp_auto_SIZE 0x4
#define bb_chip_bb_top_irq_SIZE 0x10
#define bb_chip_bb_top_irq_enable_SIZE 0x4
#define bb_chip_bb_top_irq_pending_SIZE 0x4
#define bb_chip_bb_top_irq_pending_irq_SIZE 0x4
#define bb_chip_bb_top_irq_raw_SIZE 0x4
#define bb_chip_bb_top_link_ctrl_SIZE 0x4
#define bb_chip_bb_top_mdio_ctrl_SIZE 0x4
#define bb_chip_bb_top_i2c_ctrl_SIZE 0x4
#define bb_chip_bb_top_uart_ctrl_SIZE 0x4
#define bb_chip_bb_top_sfp_ctrl_SIZE 0x4
#define bb_chip_bb_top_sfp_status_SIZE 0x4
#define bb_chip_bb_top_usb3phy_ctrl_SIZE 0x4
#define bb_chip_bb_top_ge_ctrl_SIZE 0x4
#define bb_chip_bb_top_xmii_ctrl_SIZE 0x4
#define bb_chip_bb_top_rs232_ctrl_SIZE 0x4
#define bb_chip_bb_top_drp_SIZE 0xC
#define bb_chip_bb_top_drp_drp_ctrl_SIZE 0x4
#define bb_chip_bb_top_drp_drp_en_mask_SIZE 0x4
#define bb_chip_bb_top_drp_drp_read_data_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_common_SIZE 0xC
#define bb_chip_bb_top_dp_gtp_common_pll_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_common_pll_status_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_common_loopback_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_tx_SIZE 0x20
#define bb_chip_bb_top_dp_gtp_tx_tx_clk_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_tx_tx_rst_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_tx_tx_status_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_tx_tx_diff_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_tx_tx_post_cursor_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_tx_tx_pre_cursor_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_tx_tx_prbs_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_tx_tx_misc_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_SIZE 0x2C
#define bb_chip_bb_top_dp_gtp_rx_rx_clk_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_rst_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_status_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_status_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_prbs_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_monitor_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_slip_monitor_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_dmonitor_out_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_eq_ctrl_SIZE 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_misc_ctrl_SIZE 0x4
#define bb_chip_bb_top_rxaui_SIZE 0x40
#define bb_chip_bb_top_rxaui_control_SIZE 0x4
#define bb_chip_bb_top_rxaui_status_SIZE 0x4
#define bb_chip_bb_top_rxaui_gt_rst_ctrl_SIZE 0x4
#define bb_chip_bb_top_rxaui_gt_status_SIZE 0x4
#define bb_chip_bb_top_rxaui_gt_tx_diff_ctrl_SIZE 0x4
#define bb_chip_bb_top_rxaui_gt_tx_post_cursor_SIZE 0x4
#define bb_chip_bb_top_rxaui_gt_tx_pre_cursor_SIZE 0x4
#define bb_chip_bb_top_rxaui_gt_rx_eq_ctrl_SIZE 0x4
#define bb_chip_bb_top_rxaui_gt_prbs_ctrl_SIZE 0x4
#define bb_chip_bb_top_rxaui_gt_misc_ctrl_SIZE 0x4
#define bb_chip_bb_top_rxaui_stats0_SIZE 0x18
#define bb_chip_bb_top_rxaui_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_bb_top_rxaui_stats0_gt0_disp_err_SIZE 0x4
#define bb_chip_bb_top_rxaui_stats0_gt0_not_in_table_SIZE 0x4
#define bb_chip_bb_top_rxaui_stats0_gt1_disp_err_SIZE 0x4
#define bb_chip_bb_top_rxaui_stats0_gt1_not_in_table_SIZE 0x4
#define bb_chip_bb_top_rxaui_stats0_missing_start_SIZE 0x4
#define bb_chip_bb_top_sl_5g_SIZE 0x24
#define bb_chip_bb_top_sl_5g_gt_rst_ctrl_SIZE 0x4
#define bb_chip_bb_top_sl_5g_gt_tx_ctrl_SIZE 0x4
#define bb_chip_bb_top_sl_5g_gt_rx_ctrl_SIZE 0x4
#define bb_chip_bb_top_sl_5g_gt_misc_ctrl_SIZE 0x4
#define bb_chip_bb_top_sl_5g_gt_status_SIZE 0x4
#define bb_chip_bb_top_sl_5g_stats0_SIZE 0x10
#define bb_chip_bb_top_sl_5g_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_bb_top_sl_5g_stats0_gt_disp_err_SIZE 0x4
#define bb_chip_bb_top_sl_5g_stats0_gt_not_in_table_SIZE 0x4
#define bb_chip_bb_top_sl_5g_stats0_gt_rxbyterealign_SIZE 0x4
#define bb_chip_ge_uart_s_SIZE 0x100
#define bb_chip_ge_uart_version_SIZE 0x4
#define bb_chip_ge_uart_tx_fifo_SIZE 0x4
#define bb_chip_ge_uart_rx_fifo_SIZE 0x4
#define bb_chip_ge_uart_tx_data_SIZE 0x4
#define bb_chip_ge_uart_rx_data_SIZE 0x4
#define bb_chip_ge_uart_control_SIZE 0x4
#define bb_chip_ge_uart_timeout_SIZE 0x4
#define bb_chip_ge_uart_errors_SIZE 0x4
#define bb_chip_link_layer_tx_s_SIZE 0x200
#define bb_chip_link_layer_tx_version_SIZE 0x4
#define bb_chip_link_layer_tx_mac_SIZE 0x5C
#define bb_chip_link_layer_tx_mac_version_SIZE 0x4
#define bb_chip_link_layer_tx_mac_mac_config_SIZE 0x4
#define bb_chip_link_layer_tx_mac_pa_word1_SIZE 0x4
#define bb_chip_link_layer_tx_mac_pa_word0_SIZE 0x4
#define bb_chip_link_layer_tx_mac_sfd_SIZE 0x4
#define bb_chip_link_layer_tx_mac_da_word1_SIZE 0x4
#define bb_chip_link_layer_tx_mac_da_word0_SIZE 0x4
#define bb_chip_link_layer_tx_mac_sa__word1_SIZE 0x4
#define bb_chip_link_layer_tx_mac_sa_word0_SIZE 0x4
#define bb_chip_link_layer_tx_mac_lt_SIZE 0x4
#define bb_chip_link_layer_tx_mac_idle_SIZE 0x4
#define bb_chip_link_layer_tx_mac_frm_rate_SIZE 0x4
#define bb_chip_link_layer_tx_mac_bandwidth_gap_SIZE 0x4
#define bb_chip_link_layer_tx_mac_bandwidth_limit_SIZE 0x4
#define bb_chip_link_layer_tx_mac_stats0_SIZE 0x24
#define bb_chip_link_layer_tx_mac_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_tx_mac_stats0_pause_frame_SIZE 0x4
#define bb_chip_link_layer_tx_mac_stats0_out_eop_SIZE 0x4
#define bb_chip_link_layer_tx_mac_stats0_out_sop_SIZE 0x4
#define bb_chip_link_layer_tx_mac_stats0_stall_ptp_in_SIZE 0x4
#define bb_chip_link_layer_tx_mac_stats0_in_eop_SIZE 0x4
#define bb_chip_link_layer_tx_mac_stats0_in_sop_SIZE 0x4
#define bb_chip_link_layer_tx_mac_stats0_fsm_count_beyond_ptp_SIZE 0x4
#define bb_chip_link_layer_tx_mac_stats0_fsm_rollover_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_SIZE 0x8C
#define bb_chip_link_layer_tx_media_rs_version_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_enable_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_SIZE 0x50
#define bb_chip_link_layer_tx_media_rs_pfifo_version_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_SIZE 0x38
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_SIZE 0xC
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_clear_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_mode_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_SIZE 0x2C
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_SIZE 0x14
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_clear_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_SIZE 0x10
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats0_SIZE 0xC
#define bb_chip_link_layer_tx_media_rs_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_eop_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_sop_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats1_SIZE 0x14
#define bb_chip_link_layer_tx_media_rs_stats1_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_eop_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_sop_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_done_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_start_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats2_SIZE 0x14
#define bb_chip_link_layer_tx_media_rs_stats2_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_done_SIZE 0x4
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_start_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_SIZE 0x2C
#define bb_chip_link_layer_tx_ptp_guard_version_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_config0_SIZE 0x8
#define bb_chip_link_layer_tx_ptp_guard_config0_fix_ptp_violations_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_config0_max_cycles_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_stats0_SIZE 0x10
#define bb_chip_link_layer_tx_ptp_guard_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_sop_err_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_eop_err_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_stats0_max_cycle_err_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_irq0_SIZE 0x10
#define bb_chip_link_layer_tx_ptp_guard_irq0_enable_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_irq_SIZE 0x4
#define bb_chip_link_layer_tx_ptp_guard_irq0_raw_SIZE 0x4
#define bb_chip_link_layer_tx_self_test_support_SIZE 0x20
#define bb_chip_link_layer_tx_self_test_support_set_up_SIZE 0x4
#define bb_chip_link_layer_tx_self_test_support_media_gen_SIZE 0x8
#define bb_chip_link_layer_tx_self_test_support_media_gen_version_SIZE 0x4
#define bb_chip_link_layer_tx_self_test_support_media_gen_mca_mgen_SIZE 0x4
#define bb_chip_link_layer_tx_self_test_support_framer_SIZE 0x14
#define bb_chip_link_layer_tx_self_test_support_framer_max_byte_SIZE 0x4
#define bb_chip_link_layer_tx_self_test_support_framer_mac_dg_type_SIZE 0x4
#define bb_chip_link_layer_tx_self_test_support_framer_timer_wait_SIZE 0x4
#define bb_chip_link_layer_tx_self_test_support_framer_mtu_size_SIZE 0x4
#define bb_chip_link_layer_tx_self_test_support_framer_max_mtu_size_SIZE 0x4
#define bb_chip_link_layer_tx_control_SIZE 0x4
#define bb_chip_link_layer_tx_irq0_SIZE 0x10
#define bb_chip_link_layer_tx_irq0_enable_SIZE 0x4
#define bb_chip_link_layer_tx_irq0_pending_SIZE 0x4
#define bb_chip_link_layer_tx_irq0_pending_irq_SIZE 0x4
#define bb_chip_link_layer_tx_irq0_raw_SIZE 0x4
#define bb_chip_link_layer_rx_s_SIZE 0x200
#define bb_chip_link_layer_rx_version_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_SIZE 0x58
#define bb_chip_link_layer_rx_mac_client_interface_version_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_SIZE 0x54
#define bb_chip_link_layer_rx_mac_client_interface_client_array_client_config_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word1_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word0_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word1_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word0_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word1_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word0_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word1_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word0_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_mask_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_SIZE 0x28
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_eop_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_sop_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_filter_fifo_overflow_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_md_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_lt_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_sa_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_da_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_one_cycle_pkt_SIZE 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_in_fsm_rollover_SIZE 0x4
#define bb_chip_link_layer_rx_mac_SIZE 0x90
#define bb_chip_link_layer_rx_mac_version_SIZE 0x4
#define bb_chip_link_layer_rx_mac_mac_config_SIZE 0x4
#define bb_chip_link_layer_rx_mac_da_word1_SIZE 0x4
#define bb_chip_link_layer_rx_mac_da_word0_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_SIZE 0x50
#define bb_chip_link_layer_rx_mac_pfifo_version_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_SIZE 0x38
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_SIZE 0xC
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_clear_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_mode_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_SIZE 0x2C
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_SIZE 0x14
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_clear_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_SIZE 0x10
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_SIZE 0x30
#define bb_chip_link_layer_rx_mac_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_pause_frame_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_out_eop_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_out_sop_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_inbuf_eop_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_inbuf_sop_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_in_eop_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_in_sop_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_crc_err_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_out_fsm_rollover_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_in_fsm_rollover_SIZE 0x4
#define bb_chip_link_layer_rx_mac_stats0_dbg_seq_num_in_err_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_SIZE 0x58
#define bb_chip_link_layer_rx_media_rs_version_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_enable_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_pa_word1_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_pa_word0_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_sfd_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_idle_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats0_SIZE 0x14
#define bb_chip_link_layer_rx_media_rs_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_eop_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_sop_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_data_error_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_missing_sfd_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_SIZE 0x2C
#define bb_chip_link_layer_rx_media_rs_stats1_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_eop_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_sop_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_data_error_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_missing_sfd_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_wrong_lane_start_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_ok_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_local_fault_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_remote_fault_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_int_SIZE 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_runt_frm_detected_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_SIZE 0x2C
#define bb_chip_link_layer_rx_ptp_guard_version_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_config0_SIZE 0x8
#define bb_chip_link_layer_rx_ptp_guard_config0_fix_ptp_violations_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_config0_max_cycles_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_stats0_SIZE 0x10
#define bb_chip_link_layer_rx_ptp_guard_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_sop_err_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_eop_err_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_stats0_max_cycle_err_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_irq0_SIZE 0x10
#define bb_chip_link_layer_rx_ptp_guard_irq0_enable_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_irq_SIZE 0x4
#define bb_chip_link_layer_rx_ptp_guard_irq0_raw_SIZE 0x4
#define bb_chip_link_layer_rx_self_test_support_SIZE 0x1C
#define bb_chip_link_layer_rx_self_test_support_set_up_SIZE 0x4
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_SIZE 0x14
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_version_SIZE 0x4
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_SIZE 0x10
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_lane_err_SIZE 0x4
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_error_count_SIZE 0x4
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_pkt_count_SIZE 0x4
#define bb_chip_link_layer_rx_self_test_support_de_framer_SIZE 0x4
#define bb_chip_link_layer_rx_self_test_support_de_framer_jumbo_lt_code_SIZE 0x4
#define bb_chip_link_layer_rx_irq0_SIZE 0x10
#define bb_chip_link_layer_rx_irq0_enable_SIZE 0x4
#define bb_chip_link_layer_rx_irq0_pending_SIZE 0x4
#define bb_chip_link_layer_rx_irq0_pending_irq_SIZE 0x4
#define bb_chip_link_layer_rx_irq0_raw_SIZE 0x4
#define bb_chip_layer3_tx_s_SIZE 0x100
#define bb_chip_layer3_tx_version_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_SIZE 0xB4
#define bb_chip_layer3_tx_eth_framer_version_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_config0_SIZE 0x14
#define bb_chip_layer3_tx_eth_framer_config0_max_byte_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_config0_mac_dg_type_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_config0_timer_wait_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_config0_mtu_size_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_config0_max_mtu_size_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_stats0_SIZE 0x20
#define bb_chip_layer3_tx_eth_framer_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_stats0_out_eop_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_stats0_out_sop_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_eop_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_sop_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_stats0_in_eop_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_stats0_in_sop_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_stats0_mac_dg_size_err_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_SIZE 0x50
#define bb_chip_layer3_tx_eth_framer_pfifo_version_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_SIZE 0x38
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_SIZE 0xC
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_clear_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_mode_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_SIZE 0x2C
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_SIZE 0x14
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_clear_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_SIZE 0x10
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_SIZE 0x2C
#define bb_chip_layer3_tx_eth_framer_ptp_guard_version_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_SIZE 0x8
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_fix_ptp_violations_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_max_cycles_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_SIZE 0x10
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_sop_err_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_eop_err_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_max_cycle_err_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_SIZE 0x10
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_enable_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_irq_SIZE 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_raw_SIZE 0x4
#define bb_chip_layer3_tx_irq0_SIZE 0x10
#define bb_chip_layer3_tx_irq0_enable_SIZE 0x4
#define bb_chip_layer3_tx_irq0_pending_SIZE 0x4
#define bb_chip_layer3_tx_irq0_pending_irq_SIZE 0x4
#define bb_chip_layer3_tx_irq0_raw_SIZE 0x4
#define bb_chip_layer3_rx_s_SIZE 0x100
#define bb_chip_layer3_rx_version_SIZE 0x4
#define bb_chip_layer3_rx_eth_de_framer_SIZE 0x18
#define bb_chip_layer3_rx_eth_de_framer_version_SIZE 0x4
#define bb_chip_layer3_rx_eth_de_framer_config0_SIZE 0x4
#define bb_chip_layer3_rx_eth_de_framer_config0_jumbo_lt_code_SIZE 0x4
#define bb_chip_layer3_rx_eth_de_framer_stats0_SIZE 0x10
#define bb_chip_layer3_rx_eth_de_framer_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_eop_SIZE 0x4
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_sop_SIZE 0x4
#define bb_chip_layer3_rx_eth_de_framer_stats0_non_eth_pkt_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_SIZE 0x2C
#define bb_chip_layer3_rx_ptp_guard_version_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_config0_SIZE 0x8
#define bb_chip_layer3_rx_ptp_guard_config0_fix_ptp_violations_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_config0_max_cycles_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_stats0_SIZE 0x10
#define bb_chip_layer3_rx_ptp_guard_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_sop_err_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_eop_err_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_stats0_max_cycle_err_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_irq0_SIZE 0x10
#define bb_chip_layer3_rx_ptp_guard_irq0_enable_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_irq_SIZE 0x4
#define bb_chip_layer3_rx_ptp_guard_irq0_raw_SIZE 0x4
#define bb_chip_layer3_rx_irq0_SIZE 0x10
#define bb_chip_layer3_rx_irq0_enable_SIZE 0x4
#define bb_chip_layer3_rx_irq0_pending_SIZE 0x4
#define bb_chip_layer3_rx_irq0_pending_irq_SIZE 0x4
#define bb_chip_layer3_rx_irq0_raw_SIZE 0x4
#define bb_chip_mca_core_s_SIZE 0x100
#define bb_chip_mca_core_version_SIZE 0x4
#define bb_chip_mca_core_control0_SIZE 0x4
#define bb_chip_mca_core_status0_SIZE 0x4
#define bb_chip_mca_core_link_SIZE 0x38
#define bb_chip_mca_core_link_control0_SIZE 0x34
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_pol_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_rec_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_SIZE 0xC
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_act_rpt_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_rpt_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_SIZE 0xC
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_act_rpt_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_rpt_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_SIZE 0x10
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0ltimeout_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_pnd_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_crd_SIZE 0x4
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0rectimeout_SIZE 0x4
#define bb_chip_mca_core_link_control0_test_SIZE 0x4
#define bb_chip_mca_core_link_control0_test_latency_SIZE 0x4
#define bb_chip_mca_core_link_status0_SIZE 0x4
#define bb_chip_mca_core_link_status0_cfg_SIZE 0x4
#define bb_chip_mca_core_tx_SIZE 0x44
#define bb_chip_mca_core_tx_control0_SIZE 0x8
#define bb_chip_mca_core_tx_control0_dp_SIZE 0x4
#define bb_chip_mca_core_tx_control0_bw_sample_timer_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_SIZE 0x3C
#define bb_chip_mca_core_tx_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_pfifo_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_nfifo_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_cmd_fifo_dcount_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_data_pkt_nrtry_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_data_pkt_rtry_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_idle_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_ts2_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_ts1_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_lbad_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_lrtry_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_lcrd_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_lgood_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_plu_SIZE 0x4
#define bb_chip_mca_core_tx_stats0_bandwidth_SIZE 0x4
#define bb_chip_mca_core_rx_SIZE 0x3C
#define bb_chip_mca_core_rx_control0_SIZE 0x8
#define bb_chip_mca_core_rx_control0_dp_SIZE 0x4
#define bb_chip_mca_core_rx_control0_rx_cmd_fifo_flc_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_SIZE 0x34
#define bb_chip_mca_core_rx_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_cmd_fifo_dcount_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_data_pkt_nrtry_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_data_pkt_rtry_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_idle_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_ts2_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_ts1_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_lbad_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_lrtry_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_lcrd_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_lgood_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_plu_SIZE 0x4
#define bb_chip_mca_core_rx_stats0_rx_cmd_fifo_flc_SIZE 0x4
#define bb_chip_mca_core_irq0_SIZE 0x10
#define bb_chip_mca_core_irq0_enable_SIZE 0x4
#define bb_chip_mca_core_irq0_pending_SIZE 0x4
#define bb_chip_mca_core_irq0_pending_irq_SIZE 0x4
#define bb_chip_mca_core_irq0_raw_SIZE 0x4
#define bb_chip_mca_channel_s_SIZE 0x600
#define bb_chip_mca_channel_version_SIZE 0x4
#define bb_chip_mca_channel_control0_SIZE 0x4
#define bb_chip_mca_channel_status0_SIZE 0x4
#define bb_chip_mca_channel_link_SIZE 0x2C
#define bb_chip_mca_channel_link_control0_SIZE 0x8
#define bb_chip_mca_channel_link_control0_ltssm_SIZE 0x4
#define bb_chip_mca_channel_link_control0_test_SIZE 0x4
#define bb_chip_mca_channel_link_status0_SIZE 0x4
#define bb_chip_mca_channel_link_status0_ltssm_SIZE 0x4
#define bb_chip_mca_channel_link_stats0_SIZE 0x20
#define bb_chip_mca_channel_link_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_mca_channel_link_stats0_u0_to_rec_SIZE 0x4
#define bb_chip_mca_channel_link_stats0_pol_fail_SIZE 0x4
#define bb_chip_mca_channel_link_stats0_tx_frm_SIZE 0x4
#define bb_chip_mca_channel_link_stats0_tx_mcup_SIZE 0x4
#define bb_chip_mca_channel_link_stats0_rx_frm_SIZE 0x4
#define bb_chip_mca_channel_link_stats0_rx_mcup_SIZE 0x4
#define bb_chip_mca_channel_link_stats0_latency_SIZE 0x4
#define bb_chip_mca_channel_tx_SIZE 0x44
#define bb_chip_mca_channel_tx_control0_SIZE 0x10
#define bb_chip_mca_channel_tx_control0_dp_SIZE 0x4
#define bb_chip_mca_channel_tx_control0_rtry_buf_SIZE 0x4
#define bb_chip_mca_channel_tx_control0_fifo_hys_SIZE 0x4
#define bb_chip_mca_channel_tx_control0_bandwidth_limit_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_SIZE 0x34
#define bb_chip_mca_channel_tx_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_cmd_fifo_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_dp_pfifo_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_dp_nfifo_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_dp_fifo_rd_drp_pkt_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_drp_pkt_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_pkt_err_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_dp_fifo_fifo_full_err_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_dp_fifo_pkt_max_err_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_sop_err_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_eop_err_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_dp_grd_max_err_SIZE 0x4
#define bb_chip_mca_channel_tx_stats0_bandwidth_SIZE 0x4
#define bb_chip_mca_channel_rx_SIZE 0x3C
#define bb_chip_mca_channel_rx_control0_SIZE 0x10
#define bb_chip_mca_channel_rx_control0_dp_SIZE 0x4
#define bb_chip_mca_channel_rx_control0_ntfy_mode_SIZE 0x4
#define bb_chip_mca_channel_rx_control0_hys_lo_SIZE 0x4
#define bb_chip_mca_channel_rx_control0_hys_hi_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_SIZE 0x2C
#define bb_chip_mca_channel_rx_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_dp_pfifo_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_dp_nfifo_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_dp_fifo_rd_drp_pkt_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_drp_pkt_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_pkt_err_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_dp_fifo_fifo_full_err_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_dp_fifo_pkt_max_err_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_sop_err_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_eop_err_SIZE 0x4
#define bb_chip_mca_channel_rx_stats0_dp_grd_max_err_SIZE 0x4
#define bb_chip_mca_channel_irq0_SIZE 0x10
#define bb_chip_mca_channel_irq0_enable_SIZE 0x4
#define bb_chip_mca_channel_irq0_pending_SIZE 0x4
#define bb_chip_mca_channel_irq0_pending_irq_SIZE 0x4
#define bb_chip_mca_channel_irq0_raw_SIZE 0x4
#define bb_chip_mca_channel_test_mode_SIZE 0x38
#define bb_chip_mca_channel_test_mode_tx_SIZE 0x24
#define bb_chip_mca_channel_test_mode_tx_version_SIZE 0x4
#define bb_chip_mca_channel_test_mode_tx_config0_SIZE 0x14
#define bb_chip_mca_channel_test_mode_tx_config0_iwg_cnt_SIZE 0x4
#define bb_chip_mca_channel_test_mode_tx_config0_ifg_cnt_SIZE 0x4
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_cnt_SIZE 0x4
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_size_SIZE 0x4
#define bb_chip_mca_channel_test_mode_tx_config0_ctrl0_SIZE 0x4
#define bb_chip_mca_channel_test_mode_tx_stats0_SIZE 0xC
#define bb_chip_mca_channel_test_mode_tx_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_mca_channel_test_mode_tx_stats0_wait_count_SIZE 0x4
#define bb_chip_mca_channel_test_mode_tx_stats0_pkt_count_SIZE 0x4
#define bb_chip_mca_channel_test_mode_rx_SIZE 0x14
#define bb_chip_mca_channel_test_mode_rx_version_SIZE 0x4
#define bb_chip_mca_channel_test_mode_rx_config0_SIZE 0x4
#define bb_chip_mca_channel_test_mode_rx_config0_mgen_SIZE 0x4
#define bb_chip_mca_channel_test_mode_rx_stats0_SIZE 0xC
#define bb_chip_mca_channel_test_mode_rx_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_mca_channel_test_mode_rx_stats0_err_count_SIZE 0x4
#define bb_chip_mca_channel_test_mode_rx_stats0_pkt_count_SIZE 0x4
#define bb_chip_dp_sink_main_s_SIZE 0x200
#define bb_chip_dp_sink_main_version_SIZE 0x4
#define bb_chip_dp_sink_main_configuration_SIZE 0x4
#define bb_chip_dp_sink_main_aligner_SIZE 0x24
#define bb_chip_dp_sink_main_aligner_control_SIZE 0x4
#define bb_chip_dp_sink_main_aligner_status_SIZE 0x4
#define bb_chip_dp_sink_main_aligner_stats_SIZE 0x4
#define bb_chip_dp_sink_main_aligner_debug_SIZE 0x10
#define bb_chip_dp_sink_main_aligner_debug_stats1_SIZE 0x4
#define bb_chip_dp_sink_main_aligner_debug_stats2_SIZE 0x4
#define bb_chip_dp_sink_main_aligner_debug_stats3_SIZE 0x4
#define bb_chip_dp_sink_main_aligner_debug_stats4_SIZE 0x4
#define bb_chip_dp_sink_main_aligner_fifo_status_SIZE 0x4
#define bb_chip_dp_sink_main_aligner_fifo_config_SIZE 0x4
#define bb_chip_dp_sink_main_stats_SIZE 0x1C
#define bb_chip_dp_sink_main_stats_flag_8b10b_SIZE 0x4
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_0_SIZE 0x4
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_1_SIZE 0x4
#define bb_chip_dp_sink_main_stats_cnt_8b10b_0_SIZE 0x4
#define bb_chip_dp_sink_main_stats_cnt_8b10b_1_SIZE 0x4
#define bb_chip_dp_sink_main_stats_cnt_en_rst_gtp_SIZE 0x4
#define bb_chip_dp_sink_main_stats_cnt_gtp_SIZE 0x4
#define bb_chip_dp_sink_main_descrambler_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_SIZE 0x74
#define bb_chip_dp_sink_main_stream_extractor_cfg_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_alu_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_SIZE 0x24
#define bb_chip_dp_sink_main_stream_extractor_msa_mvid_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_nvid_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_0_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_1_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_0_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_1_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_misc_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_status_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_fps_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_SIZE 0x1C
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_mvid_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_nvid_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_0_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_1_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_0_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_1_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_misc_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_fsm_status_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_vbd_SIZE 0x8
#define bb_chip_dp_sink_main_stream_extractor_vbd_vbid_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_vbd_status_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_vid_fifo_config_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_sdp_SIZE 0x14
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_status_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_status_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_config_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_config_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_sdp_debug_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_pixgen_SIZE 0x4
#define bb_chip_dp_sink_main_stream_extractor_debug_SIZE 0x4
#define bb_chip_dp_sink_main_encoder_vfr_SIZE 0xC
#define bb_chip_dp_sink_main_encoder_vfr_handshake_SIZE 0x4
#define bb_chip_dp_sink_main_encoder_vfr_pixel_SIZE 0x4
#define bb_chip_dp_sink_main_encoder_vfr_line_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_SIZE 0x60
#define bb_chip_dp_sink_main_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_full_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_empty_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_overflow_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_underflow_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_watermark_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c0_sr_full_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_full_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_empty_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_overflow_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_underflow_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_watermark_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c1_sr_full_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_full_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_empty_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_overflow_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_underflow_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_watermark_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vid_c2_sr_full_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_vbd_majority_fail_SIZE 0x4
#define bb_chip_dp_sink_main_stats0_msa_majority_fail_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_SIZE 0x40
#define bb_chip_dp_sink_main_stats1_rd2clr_config_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_watermark_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_ss_se_same_cycle_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_fifo_full_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_fifo_empty_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_fifo_overflow_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_fifo_underflow_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_watermark_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_full_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_empty_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_overflow_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_underflow_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_SIZE 0x4
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_watermark_SIZE 0x4
#define bb_chip_dp_sink_main_irq_SIZE 0x10
#define bb_chip_dp_sink_main_irq_enable_SIZE 0x4
#define bb_chip_dp_sink_main_irq_pending_SIZE 0x4
#define bb_chip_dp_sink_main_irq_pending_irq_SIZE 0x4
#define bb_chip_dp_sink_main_irq_raw_SIZE 0x4
#define bb_chip_dp_sink_tico_s_SIZE 0x100
#define bb_chip_dp_sink_tico_tico_e_width_SIZE 0x4
#define bb_chip_dp_sink_tico_tico_e_height_SIZE 0x4
#define bb_chip_dp_sink_tico_tico_e_comp_SIZE 0x4
#define bb_chip_dp_sink_tico_tico_e_mode_SIZE 0x4
#define bb_chip_dp_sink_tico_tico_e_hlvls_SIZE 0x4
#define bb_chip_dp_sink_tico_tico_e_vld_SIZE 0x4
#define bb_chip_dp_sink_tico_tico_e_nbr_SIZE 0x4
#define bb_chip_dp_sink_tico_tico_e_bgt_SIZE 0x4
#define bb_chip_dp_sink_tico_tico_e_vid_depth_SIZE 0x4
#define bb_chip_dp_sink_tico_tico_e_play_mode_SIZE 0x4
#define bb_chip_dp_sink_tico_tico_e_lvl_weights_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_s_SIZE 0x100
#define bb_chip_dp_sink_aux_hpd_version_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_aux_status_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_aux_ctrl1_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_aux_ctrl2_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_aux_ctrl3_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_aux_rx_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_aux_tx_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_hpd_status_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_hpd_ctrl_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_hpd_timer1_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_hpd_timer2_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_hpd_timer3_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_hpd_rise_det_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_hpd_fall_det_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_dp_source_connect_det_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_dp_source_disconnect_det_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_irq_SIZE 0x10
#define bb_chip_dp_sink_aux_hpd_irq_enable_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_irq_pending_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_irq_pending_irq_SIZE 0x4
#define bb_chip_dp_sink_aux_hpd_irq_raw_SIZE 0x4
#define bb_chip_dp_source_main_s_SIZE 0x200
#define bb_chip_dp_source_main_version_SIZE 0x4
#define bb_chip_dp_source_main_configuration_SIZE 0x4
#define bb_chip_dp_source_main_scrambler_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_SIZE 0x9C
#define bb_chip_dp_source_main_stream_generator_cfg0_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_cfg1_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_cfg2_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_cfg3_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_cs_pkt_updated_interval_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_dp_width_total_actual_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_alu0_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_alu1_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_alu2_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_SIZE 0x24
#define bb_chip_dp_source_main_stream_generator_msa_control_0_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_control_1_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_mvid_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_nvid_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_0_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_1_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_vertical_0_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_vertical_1_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_misc_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_dp_SIZE 0x8
#define bb_chip_dp_source_main_stream_generator_msa_dp_mvid_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_msa_dp_nvid_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fsm_status_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_cs_level_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_cs_status_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control0_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control1_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_cs_config_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_pix_level_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_pix_sr_status_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control0_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control1_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control2_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_pix_config_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_status_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_status_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_config_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_config_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_sdp_ctrl_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_idle_pattern_debug_SIZE 0x4
#define bb_chip_dp_source_main_stream_generator_vbd_SIZE 0x4
#define bb_chip_dp_source_main_decoder_error_status_SIZE 0x8
#define bb_chip_dp_source_main_decoder_error_status_handshake_SIZE 0x4
#define bb_chip_dp_source_main_decoder_error_status_error_id_SIZE 0x4
#define bb_chip_dp_source_main_compliance_SIZE 0xC
#define bb_chip_dp_source_main_compliance_custom_80bits_3_0_SIZE 0x4
#define bb_chip_dp_source_main_compliance_custom_80bits_7_4_SIZE 0x4
#define bb_chip_dp_source_main_compliance_custom_80bits_9_8_SIZE 0x4
#define bb_chip_dp_source_main_stats0_SIZE 0x2C
#define bb_chip_dp_source_main_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_dp_source_main_stats0_fifo_pix_0_full_SIZE 0x4
#define bb_chip_dp_source_main_stats0_fifo_pix_0_empty_SIZE 0x4
#define bb_chip_dp_source_main_stats0_fifo_pix_0_overflow_SIZE 0x4
#define bb_chip_dp_source_main_stats0_fifo_pix_0_underflow_SIZE 0x4
#define bb_chip_dp_source_main_stats0_pix_0_sr_underflow_SIZE 0x4
#define bb_chip_dp_source_main_stats0_pix_1_sr_underflow_SIZE 0x4
#define bb_chip_dp_source_main_stats0_pix_2_sr_underflow_SIZE 0x4
#define bb_chip_dp_source_main_stats0_pix_3_sr_underflow_SIZE 0x4
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_SIZE 0x4
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_watermark_SIZE 0x4
#define bb_chip_dp_source_main_stats1_SIZE 0x60
#define bb_chip_dp_source_main_stats1_rd2clr_config_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_full_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_empty_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_overflow_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_underflow_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_ae0_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_ae1_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_af0_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_af1_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_level_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_level_watermark_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_full_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_empty_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_overflow_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_underflow_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_watermark_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_full_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_empty_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_overflow_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_underflow_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_SIZE 0x4
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_watermark_SIZE 0x4
#define bb_chip_dp_source_main_stats1_sdp_ptp_pkt_sop_in_SIZE 0x4
#define bb_chip_dp_source_main_irq_SIZE 0x10
#define bb_chip_dp_source_main_irq_enable_SIZE 0x4
#define bb_chip_dp_source_main_irq_pending_SIZE 0x4
#define bb_chip_dp_source_main_irq_pending_irq_SIZE 0x4
#define bb_chip_dp_source_main_irq_raw_SIZE 0x4
#define bb_chip_dp_source_tico_s_SIZE 0x100
#define bb_chip_dp_source_tico_tico_d_config_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_width_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_height_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_comp_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_mode_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_hlvls_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_vld_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_nbr_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_bgt_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_vid_depth_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_play_mode_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_profile_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_line_duration_SIZE 0x4
#define bb_chip_dp_source_tico_tico_d_img_size_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_s_SIZE 0x100
#define bb_chip_dp_source_aux_hpd_version_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_aux_status_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_aux_ctrl1_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_aux_ctrl2_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_aux_ctrl3_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_aux_rx_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_aux_tx_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_hpd_status_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_hpd_ctrl_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_hpd_timer1_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_hpd_timer2_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_hpd_timer3_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_hpd_rise_det_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_hpd_fall_det_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_dp_source_connect_det_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_dp_source_disconnect_det_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_irq_SIZE 0x10
#define bb_chip_dp_source_aux_hpd_irq_enable_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_irq_pending_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_irq_pending_irq_SIZE 0x4
#define bb_chip_dp_source_aux_hpd_irq_raw_SIZE 0x4
#define bb_chip_xusb3_s_SIZE 0x200
#define bb_chip_xusb3_version_SIZE 0x4
#define bb_chip_xusb3_configuration_SIZE 0x4
#define bb_chip_xusb3_control_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_SIZE 0x50
#define bb_chip_xusb3_rx_partner_fifo_version_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_SIZE 0x38
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_SIZE 0xC
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_clear_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_mode_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_SIZE 0x2C
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_read_engine_SIZE 0x14
#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_clear_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_SIZE 0x10
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_xusb3_stats0_SIZE 0x38
#define bb_chip_xusb3_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_xusb3_stats0_link_partner_ptp_violated_SIZE 0x4
#define bb_chip_xusb3_stats0_from_phy_in_sop_SIZE 0x4
#define bb_chip_xusb3_stats0_from_phy_in_eop_SIZE 0x4
#define bb_chip_xusb3_stats0_to_link_out_sop_SIZE 0x4
#define bb_chip_xusb3_stats0_to_link_out_eop_SIZE 0x4
#define bb_chip_xusb3_stats0_from_link_in_sop_SIZE 0x4
#define bb_chip_xusb3_stats0_from_link_in_eop_SIZE 0x4
#define bb_chip_xusb3_stats0_unknown_pkt_drp_SIZE 0x4
#define bb_chip_xusb3_stats0_dwn_stream_busy_drp_SIZE 0x4
#define bb_chip_xusb3_stats0_drop_lone_dpp_SIZE 0x4
#define bb_chip_xusb3_stats0_rcvd_lone_dph_SIZE 0x4
#define bb_chip_xusb3_stats0_timedout_2join_dpp_SIZE 0x4
#define bb_chip_xusb3_stats0_not_rdy_pkt_drp_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_SIZE 0x2C
#define bb_chip_xusb3_ptp_guard_2core_version_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_config0_SIZE 0x8
#define bb_chip_xusb3_ptp_guard_2core_config0_fix_ptp_violations_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_config0_max_cycles_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_stats0_SIZE 0x10
#define bb_chip_xusb3_ptp_guard_2core_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_sop_err_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_eop_err_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_stats0_max_cycle_err_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_irq0_SIZE 0x10
#define bb_chip_xusb3_ptp_guard_2core_irq0_enable_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_irq_SIZE 0x4
#define bb_chip_xusb3_ptp_guard_2core_irq0_raw_SIZE 0x4
#define bb_chip_xusb3_buff_2ulp_SIZE 0x10
#define bb_chip_xusb3_buff_2ulp_control_SIZE 0x4
#define bb_chip_xusb3_buff_2ulp_stats0_SIZE 0xC
#define bb_chip_xusb3_buff_2ulp_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_xusb3_buff_2ulp_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_xusb3_buff_2ulp_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_xusb3_buff_2upp_SIZE 0x10
#define bb_chip_xusb3_buff_2upp_control_SIZE 0x4
#define bb_chip_xusb3_buff_2upp_stats0_SIZE 0xC
#define bb_chip_xusb3_buff_2upp_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_xusb3_buff_2upp_stats0_nfifo_scount_SIZE 0x4
#define bb_chip_xusb3_buff_2upp_stats0_pfifo_scount_SIZE 0x4
#define bb_chip_xusb3_irq0_SIZE 0x10
#define bb_chip_xusb3_irq0_enable_SIZE 0x4
#define bb_chip_xusb3_irq0_pending_SIZE 0x4
#define bb_chip_xusb3_irq0_pending_irq_SIZE 0x4
#define bb_chip_xusb3_irq0_raw_SIZE 0x4
#define bb_chip_upp_s_SIZE 0x300
#define bb_chip_upp_version_SIZE 0x4
#define bb_chip_upp_config0_SIZE 0x4
#define bb_chip_upp_control_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_SIZE 0x50
#define bb_chip_upp_id_mgr_fifo_version_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_SIZE 0x38
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_SIZE 0xC
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_mode_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_SIZE 0x2C
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_read_engine_SIZE 0x14
#define bb_chip_upp_id_mgr_fifo_read_engine_config0_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_read_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_SIZE 0x10
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_SIZE 0x50
#define bb_chip_upp_iso_lex_fifo_0_version_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_SIZE 0x38
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_SIZE 0xC
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_mode_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_SIZE 0x2C
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_read_engine_SIZE 0x14
#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_SIZE 0x10
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_SIZE 0x50
#define bb_chip_upp_iso_lex_fifo_1_version_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_SIZE 0x38
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_SIZE 0xC
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_mode_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_SIZE 0x2C
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_read_engine_SIZE 0x14
#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_SIZE 0x10
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_SIZE 0x50
#define bb_chip_upp_iso_lex_fifo_2_version_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_SIZE 0x38
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_SIZE 0xC
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_mode_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_SIZE 0x2C
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_read_engine_SIZE 0x14
#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_SIZE 0x10
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_SIZE 0x50
#define bb_chip_upp_iso_lex_fifo_3_version_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_SIZE 0x38
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_SIZE 0xC
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_mode_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_SIZE 0x2C
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_read_engine_SIZE 0x14
#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_SIZE 0x10
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_SIZE 0x50
#define bb_chip_upp_iso_rex_fifo_version_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_SIZE 0x38
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_SIZE 0xC
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_mode_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_SIZE 0x2C
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_read_engine_SIZE 0x14
#define bb_chip_upp_iso_rex_fifo_read_engine_config0_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_read_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_SIZE 0x10
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_SIZE 0x50
#define bb_chip_upp_ctrl_trfr_h2d_fifo_version_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_SIZE 0x38
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_SIZE 0xC
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_mode_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_SIZE 0x2C
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_SIZE 0x14
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_SIZE 0x10
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_SIZE 0x50
#define bb_chip_upp_ctrl_trfr_d2h_fifo_version_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_SIZE 0x38
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_SIZE 0xC
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_mode_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_notify_limit_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_SIZE 0x2C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_nfifo_dcount_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pfifo_dcount_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_max_byte_cnt_err_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_fifo_full_err_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_err_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_sop_err_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_wflush_act_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_rd_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_wr_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_SIZE 0x14
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_clear_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_SIZE 0x10
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rflush_act_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_drp_pkt_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_flow_ctrl_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_SIZE 0x24
#define bb_chip_upp_ctrl_trfr_h2d_data_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_ctrl_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_skip_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_h2d_dbg_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_data_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_ctrl_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_skip_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_d2h_dbg_SIZE 0x4
#define bb_chip_upp_ctrl_trfr_cmpltd_SIZE 0x4
#define bb_chip_upp_endpoint_tbl_SIZE 0x10
#define bb_chip_upp_endpoint_tbl_config0_SIZE 0x4
#define bb_chip_upp_endpoint_tbl_config1_SIZE 0x4
#define bb_chip_upp_endpoint_tbl_total_qid_SIZE 0x4
#define bb_chip_upp_endpoint_tbl_qid_assigned0_SIZE 0x4
#define bb_chip_upp_stats0_SIZE 0x8
#define bb_chip_upp_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_upp_stats0_missing_itp_SIZE 0x4
#define bb_chip_upp_irq0_SIZE 0x10
#define bb_chip_upp_irq0_enable_SIZE 0x4
#define bb_chip_upp_irq0_pending_SIZE 0x4
#define bb_chip_upp_irq0_pending_irq_SIZE 0x4
#define bb_chip_upp_irq0_raw_SIZE 0x4
#define bb_chip_upp_irq1_SIZE 0x10
#define bb_chip_upp_irq1_enable_SIZE 0x4
#define bb_chip_upp_irq1_pending_SIZE 0x4
#define bb_chip_upp_irq1_pending_irq_SIZE 0x4
#define bb_chip_upp_irq1_raw_SIZE 0x4
#define bb_chip_ulp_core_s_SIZE 0x200
#define bb_chip_ulp_core_version_SIZE 0x4
#define bb_chip_ulp_core_configuration_SIZE 0x4
#define bb_chip_ulp_core_control_SIZE 0x4
#define bb_chip_ulp_core_timer_correction_SIZE 0x4
#define bb_chip_ulp_core_ltssm_state_SIZE 0x4
#define bb_chip_ulp_core_stats0_SIZE 0x50
#define bb_chip_ulp_core_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_ulp_core_stats0_tx_lfps_cnt_in_err_SIZE 0x4
#define bb_chip_ulp_core_stats0_rx_lfps_cnt_in_err_SIZE 0x4
#define bb_chip_ulp_core_stats0_tx_framer_ptp_violated_SIZE 0x4
#define bb_chip_ulp_core_stats0_link_training_ptp_violated_SIZE 0x4
#define bb_chip_ulp_core_stats0_link_command_ptp_violated_SIZE 0x4
#define bb_chip_ulp_core_stats0_lmp_ptp_violated_SIZE 0x4
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_overflow_SIZE 0x4
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_underflow_SIZE 0x4
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_overflow_SIZE 0x4
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_underflow_SIZE 0x4
#define bb_chip_ulp_core_stats0_remote_rx_hdr_buff_crdt_cnt_in_err_SIZE 0x4
#define bb_chip_ulp_core_stats0_to_phy_out_sop_SIZE 0x4
#define bb_chip_ulp_core_stats0_to_phy_out_eop_SIZE 0x4
#define bb_chip_ulp_core_stats0_go2_u0_from_recovery_SIZE 0x4
#define bb_chip_ulp_core_stats0_rx_go_recovery_SIZE 0x4
#define bb_chip_ulp_core_stats0_snt_lrty_SIZE 0x4
#define bb_chip_ulp_core_stats0_snt_lbad_SIZE 0x4
#define bb_chip_ulp_core_stats0_rcvd_lrty_SIZE 0x4
#define bb_chip_ulp_core_stats0_rcvd_lbad_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_SIZE 0x2C
#define bb_chip_ulp_core_ptp_guard_2core_version_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_config0_SIZE 0x8
#define bb_chip_ulp_core_ptp_guard_2core_config0_fix_ptp_violations_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_config0_max_cycles_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_stats0_SIZE 0x10
#define bb_chip_ulp_core_ptp_guard_2core_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_sop_err_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_eop_err_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_stats0_max_cycle_err_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_irq0_SIZE 0x10
#define bb_chip_ulp_core_ptp_guard_2core_irq0_enable_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_irq_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2core_irq0_raw_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_SIZE 0x2C
#define bb_chip_ulp_core_ptp_guard_2phy_version_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_config0_SIZE 0x8
#define bb_chip_ulp_core_ptp_guard_2phy_config0_fix_ptp_violations_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_config0_max_cycles_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_SIZE 0x10
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_sop_err_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_eop_err_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_max_cycle_err_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_SIZE 0x10
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_enable_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_irq_SIZE 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_raw_SIZE 0x4
#define bb_chip_ulp_core_irq0_SIZE 0x10
#define bb_chip_ulp_core_irq0_enable_SIZE 0x4
#define bb_chip_ulp_core_irq0_pending_SIZE 0x4
#define bb_chip_ulp_core_irq0_pending_irq_SIZE 0x4
#define bb_chip_ulp_core_irq0_raw_SIZE 0x4
#define bb_chip_ulp_core_irq1_SIZE 0x10
#define bb_chip_ulp_core_irq1_enable_SIZE 0x4
#define bb_chip_ulp_core_irq1_pending_SIZE 0x4
#define bb_chip_ulp_core_irq1_pending_irq_SIZE 0x4
#define bb_chip_ulp_core_irq1_raw_SIZE 0x4
#define bb_chip_ulp_phy_s_SIZE 0x100
#define bb_chip_ulp_phy_version_SIZE 0x4
#define bb_chip_ulp_phy_pipe_ctrl_SIZE 0x4
#define bb_chip_ulp_phy_compliancy_ctrl_SIZE 0x4
#define bb_chip_ulp_phy_stats0_SIZE 0x14
#define bb_chip_ulp_phy_stats0_rd2clr_config_SIZE 0x4
#define bb_chip_ulp_phy_stats0_rx_8b10b_err_SIZE 0x4
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_overflow_SIZE 0x4
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_underflow_SIZE 0x4
#define bb_chip_ulp_phy_stats0_rx_disparity_err_SIZE 0x4
#define bb_chip_ulp_phy_stats1_SIZE 0x18
#define bb_chip_ulp_phy_stats1_rd2clr_config_SIZE 0x4
#define bb_chip_ulp_phy_stats1_skp_insert_in_err_SIZE 0x4
#define bb_chip_ulp_phy_stats1_crc5_chk_failed_SIZE 0x4
#define bb_chip_ulp_phy_stats1_crc16_chk_failed_SIZE 0x4
#define bb_chip_ulp_phy_stats1_dpp_abort_SIZE 0x4
#define bb_chip_ulp_phy_stats1_rx_framer_ptp_violated_SIZE 0x4
#define bb_chip_ulp_phy_irq0_SIZE 0x10
#define bb_chip_ulp_phy_irq0_enable_SIZE 0x4
#define bb_chip_ulp_phy_irq0_pending_SIZE 0x4
#define bb_chip_ulp_phy_irq0_pending_irq_SIZE 0x4
#define bb_chip_ulp_phy_irq0_raw_SIZE 0x4

#define bb_chip_s_OFFSET 0x80000000
#define bb_chip_leon2_s_OFFSET 0x0
#define bb_chip_leon2_mem_ctrl_OFFSET 0x0
#define bb_chip_leon2_mem_ctrl_mcfg1_OFFSET 0x0
#define bb_chip_leon2_mem_ctrl_mcfg2_OFFSET 0x4
#define bb_chip_leon2_mem_ctrl_mcfg3_OFFSET 0x8
#define bb_chip_leon2_ahb_stat_OFFSET 0xC
#define bb_chip_leon2_ahb_stat_ahb_failing_OFFSET 0x0
#define bb_chip_leon2_ahb_stat_ahb_status_OFFSET 0x4
#define bb_chip_leon2_cache_controller_OFFSET 0x14
#define bb_chip_leon2_cache_controller_cache_control_OFFSET 0x0
#define bb_chip_leon2_cache_controller_power_down_OFFSET 0x4
#define bb_chip_leon2_write_prot_OFFSET 0x1C
#define bb_chip_leon2_write_prot_write_prot1_OFFSET 0x0
#define bb_chip_leon2_write_prot_write_prot2_OFFSET 0x4
#define bb_chip_leon2_leon_config_OFFSET 0x24
#define bb_chip_leon2_timers_OFFSET 0x40
#define bb_chip_leon2_timers_timer1_counter_OFFSET 0x0
#define bb_chip_leon2_timers_timer1_reload_OFFSET 0x4
#define bb_chip_leon2_timers_timer1_control_OFFSET 0x8
#define bb_chip_leon2_timers_watchdog_counter_OFFSET 0xC
#define bb_chip_leon2_timers_timer2_counter_OFFSET 0x10
#define bb_chip_leon2_timers_timer2_reload_OFFSET 0x14
#define bb_chip_leon2_timers_timer2_control_OFFSET 0x18
#define bb_chip_leon2_timers_prescaler_counter_OFFSET 0x20
#define bb_chip_leon2_timers_prescaler_reload_OFFSET 0x24
#define bb_chip_leon2_uarts_OFFSET 0x70
#define bb_chip_leon2_uarts_uart1_data_OFFSET 0x0
#define bb_chip_leon2_uarts_uart1_status_OFFSET 0x4
#define bb_chip_leon2_uarts_uart1_control_OFFSET 0x8
#define bb_chip_leon2_uarts_uart1_scaler_OFFSET 0xC
#define bb_chip_leon2_uarts_uart2_data_OFFSET 0x10
#define bb_chip_leon2_uarts_uart2_status_OFFSET 0x14
#define bb_chip_leon2_uarts_uart2_control_OFFSET 0x18
#define bb_chip_leon2_uarts_uart2_scaler_OFFSET 0x1C
#define bb_chip_leon2_irqctrl_OFFSET 0x90
#define bb_chip_leon2_irqctrl_int_mask_OFFSET 0x0
#define bb_chip_leon2_irqctrl_int_pending_OFFSET 0x4
#define bb_chip_leon2_irqctrl_int_force_OFFSET 0x8
#define bb_chip_leon2_irqctrl_int_clear_OFFSET 0xC
#define bb_chip_leon2_io_port_OFFSET 0xA0
#define bb_chip_leon2_io_port_io_val_OFFSET 0x0
#define bb_chip_leon2_io_port_io_dir_OFFSET 0x4
#define bb_chip_leon2_io_port_io_int_cfg_OFFSET 0x8
#define bb_chip_leon2_irqctrl2_OFFSET 0xB0
#define bb_chip_leon2_irqctrl2_int_mask_OFFSET 0x0
#define bb_chip_leon2_irqctrl2_int_pending_OFFSET 0x4
#define bb_chip_leon2_irqctrl2_int_status_clear_OFFSET 0x8
#define bb_chip_leon2_dsu_uart_OFFSET 0xC4
#define bb_chip_leon2_dsu_uart_dsu_status_OFFSET 0x0
#define bb_chip_leon2_dsu_uart_dsu_control_OFFSET 0x4
#define bb_chip_leon2_dsu_uart_dsu_scaler_OFFSET 0x8
#define bb_chip_uart_s_OFFSET 0x500
#define bb_chip_uart_version_OFFSET 0x0
#define bb_chip_uart_tx_fifo_OFFSET 0x4
#define bb_chip_uart_rx_fifo_OFFSET 0x8
#define bb_chip_uart_tx_data_OFFSET 0xC
#define bb_chip_uart_rx_data_OFFSET 0x10
#define bb_chip_uart_control_OFFSET 0x14
#define bb_chip_uart_timeout_OFFSET 0x18
#define bb_chip_uart_errors_OFFSET 0x1C
#define bb_chip_i2c_master_s_OFFSET 0x600
#define bb_chip_i2c_master_version_OFFSET 0x0
#define bb_chip_i2c_master_prescaler_OFFSET 0x4
#define bb_chip_i2c_master_fifo_OFFSET 0x8
#define bb_chip_i2c_master_control_OFFSET 0xC
#define bb_chip_i2c_master_wr_data_OFFSET 0x10
#define bb_chip_i2c_master_rd_data_OFFSET 0x14
#define bb_chip_i2c_master_irq_OFFSET 0x18
#define bb_chip_i2c_master_irq_enable_OFFSET 0x0
#define bb_chip_i2c_master_irq_pending_OFFSET 0x4
#define bb_chip_i2c_master_irq_pending_irq_OFFSET 0x8
#define bb_chip_i2c_master_irq_raw_OFFSET 0xC
#define bb_chip_i2c_slave_s_OFFSET 0x700
#define bb_chip_i2c_slave_version_OFFSET 0x0
#define bb_chip_i2c_slave_in_fifo_OFFSET 0x4
#define bb_chip_i2c_slave_out_fifo_OFFSET 0x8
#define bb_chip_i2c_slave_slave_config_OFFSET 0xC
#define bb_chip_i2c_slave_timeout_OFFSET 0x10
#define bb_chip_i2c_slave_status_OFFSET 0x14
#define bb_chip_i2c_slave_wr_data_OFFSET 0x18
#define bb_chip_i2c_slave_rd_data_OFFSET 0x1C
#define bb_chip_i2c_slave_irq_OFFSET 0x20
#define bb_chip_i2c_slave_irq_enable_OFFSET 0x0
#define bb_chip_i2c_slave_irq_pending_OFFSET 0x4
#define bb_chip_i2c_slave_irq_pending_irq_OFFSET 0x8
#define bb_chip_i2c_slave_irq_raw_OFFSET 0xC
#define bb_chip_mdio_master_s_OFFSET 0x800
#define bb_chip_mdio_master_version_OFFSET 0x0
#define bb_chip_mdio_master_timing_OFFSET 0x4
#define bb_chip_mdio_master_control_OFFSET 0x8
#define bb_chip_mdio_master_wr_data_OFFSET 0xC
#define bb_chip_mdio_master_rd_data_OFFSET 0x10
#define bb_chip_mdio_master_irq_OFFSET 0x14
#define bb_chip_mdio_master_irq_enable_OFFSET 0x0
#define bb_chip_mdio_master_irq_pending_OFFSET 0x4
#define bb_chip_mdio_master_irq_pending_irq_OFFSET 0x8
#define bb_chip_mdio_master_irq_raw_OFFSET 0xC
#define bb_chip_spi_flash_ctrl_s_OFFSET 0x900
#define bb_chip_spi_flash_ctrl_version_OFFSET 0x0
#define bb_chip_spi_flash_ctrl_generic_cfg_OFFSET 0x4
#define bb_chip_spi_flash_ctrl_addr_offset_OFFSET 0x8
#define bb_chip_spi_flash_ctrl_addr_OFFSET 0xC
#define bb_chip_spi_flash_ctrl_basic_cfg_OFFSET 0x10
#define bb_chip_spi_flash_ctrl_control_OFFSET 0x14
#define bb_chip_spi_flash_ctrl_wr_data_OFFSET 0x18
#define bb_chip_spi_flash_ctrl_rd_data_OFFSET 0x1C
#define bb_chip_spi_flash_ctrl_in_fifo_OFFSET 0x20
#define bb_chip_spi_flash_ctrl_out_fifo_OFFSET 0x24
#define bb_chip_spi_flash_ctrl_mm_OFFSET 0x28
#define bb_chip_spi_flash_ctrl_mm_addr_offset_OFFSET 0x0
#define bb_chip_spi_flash_ctrl_mm_basic_cfg_OFFSET 0x4
#define bb_chip_spi_flash_ctrl_mm_xip_cfg_OFFSET 0x8
#define bb_chip_spi_flash_ctrl_mm_suspend_cfg_OFFSET 0xC
#define bb_chip_spi_flash_ctrl_irq_OFFSET 0x38
#define bb_chip_spi_flash_ctrl_irq_enable_OFFSET 0x0
#define bb_chip_spi_flash_ctrl_irq_pending_OFFSET 0x4
#define bb_chip_spi_flash_ctrl_irq_pending_irq_OFFSET 0x8
#define bb_chip_spi_flash_ctrl_irq_raw_OFFSET 0xC
#define bb_chip_gpio_ctrl_s_OFFSET 0xA00
#define bb_chip_gpio_ctrl_version_OFFSET 0x0
#define bb_chip_gpio_ctrl_gpio_dir_OFFSET 0x4
#define bb_chip_gpio_ctrl_gpio_out_OFFSET 0x8
#define bb_chip_gpio_ctrl_gpio_in_OFFSET 0xC
#define bb_chip_gpio_ctrl_irq_OFFSET 0x10
#define bb_chip_gpio_ctrl_irq_enable_OFFSET 0x0
#define bb_chip_gpio_ctrl_irq_pending_OFFSET 0x4
#define bb_chip_gpio_ctrl_irq_pending_irq_OFFSET 0x8
#define bb_chip_gpio_ctrl_irq_raw_OFFSET 0xC
#define bb_chip_gpio_ctrl_irq_int_type_OFFSET 0x10
#define bb_chip_bb_core_s_OFFSET 0x1000
#define bb_chip_bb_core_version_OFFSET 0x0
#define bb_chip_bb_core_cpu_freq_OFFSET 0x4
#define bb_chip_bb_core_sys_config_OFFSET 0x8
#define bb_chip_bb_core_feature_OFFSET 0xC
#define bb_chip_bb_core_module_version_ctrl_OFFSET 0x10
#define bb_chip_bb_core_module_version_OFFSET 0x14
#define bb_chip_bb_core_irq_OFFSET 0x18
#define bb_chip_bb_core_irq_enable_OFFSET 0x0
#define bb_chip_bb_core_irq_pending_OFFSET 0x4
#define bb_chip_bb_core_irq_pending_irq_OFFSET 0x8
#define bb_chip_bb_core_irq_raw_OFFSET 0xC
#define bb_chip_bb_core_cpu_comm_tx_OFFSET 0x28
#define bb_chip_bb_core_cpu_comm_rx_OFFSET 0x2C
#define bb_chip_bb_core_xmii_ctrl_OFFSET 0x30
#define bb_chip_bb_core_rs232_ctrl_OFFSET 0x34
#define bb_chip_bb_core_xgmii_idle_counter_OFFSET 0x38
#define bb_chip_bb_core_xgmii_idle_counter_control_OFFSET 0x0
#define bb_chip_bb_core_xgmii_idle_counter_status_OFFSET 0x4
#define bb_chip_bb_core_ahb_to_apb_ctrl_OFFSET 0x40
#define bb_chip_bb_core_ge_ctrl_OFFSET 0x44
#define bb_chip_bb_core_scratchpad_OFFSET 0x48
#define bb_chip_bb_core_scratchpad_spr_OFFSET 0x0
#define bb_chip_bb_top_s_OFFSET 0x2000
#define bb_chip_bb_top_version_OFFSET 0x0
#define bb_chip_bb_top_sys_config_OFFSET 0x4
#define bb_chip_bb_top_feature_OFFSET 0x8
#define bb_chip_bb_top_icap_OFFSET 0xC
#define bb_chip_bb_top_icap_wdata_OFFSET 0x0
#define bb_chip_bb_top_icap_rdata_OFFSET 0x4
#define bb_chip_bb_top_grm_OFFSET 0x14
#define bb_chip_bb_top_grm_soft_rst_ctrl_OFFSET 0x0
#define bb_chip_bb_top_gcm_OFFSET 0x18
#define bb_chip_bb_top_gcm_control_OFFSET 0x0
#define bb_chip_bb_top_gcm_status_OFFSET 0x4
#define bb_chip_bb_top_gcm_freq_det_OFFSET 0x8
#define bb_chip_bb_top_gcm_freq_det_dp_OFFSET 0xC
#define bb_chip_bb_top_gcm_freq_det_dp_auto_OFFSET 0x10
#define bb_chip_bb_top_irq_OFFSET 0x2C
#define bb_chip_bb_top_irq_enable_OFFSET 0x0
#define bb_chip_bb_top_irq_pending_OFFSET 0x4
#define bb_chip_bb_top_irq_pending_irq_OFFSET 0x8
#define bb_chip_bb_top_irq_raw_OFFSET 0xC
#define bb_chip_bb_top_link_ctrl_OFFSET 0x3C
#define bb_chip_bb_top_mdio_ctrl_OFFSET 0x40
#define bb_chip_bb_top_i2c_ctrl_OFFSET 0x44
#define bb_chip_bb_top_uart_ctrl_OFFSET 0x48
#define bb_chip_bb_top_sfp_ctrl_OFFSET 0x4C
#define bb_chip_bb_top_sfp_status_OFFSET 0x50
#define bb_chip_bb_top_usb3phy_ctrl_OFFSET 0x54
#define bb_chip_bb_top_ge_ctrl_OFFSET 0x58
#define bb_chip_bb_top_xmii_ctrl_OFFSET 0x5C
#define bb_chip_bb_top_rs232_ctrl_OFFSET 0x60
#define bb_chip_bb_top_drp_OFFSET 0x100
#define bb_chip_bb_top_drp_drp_ctrl_OFFSET 0x0
#define bb_chip_bb_top_drp_drp_en_mask_OFFSET 0x4
#define bb_chip_bb_top_drp_drp_read_data_OFFSET 0x8
#define bb_chip_bb_top_dp_gtp_common_OFFSET 0x10C
#define bb_chip_bb_top_dp_gtp_common_pll_ctrl_OFFSET 0x0
#define bb_chip_bb_top_dp_gtp_common_pll_status_OFFSET 0x4
#define bb_chip_bb_top_dp_gtp_common_loopback_ctrl_OFFSET 0x8
#define bb_chip_bb_top_dp_gtp_tx_OFFSET 0x118
#define bb_chip_bb_top_dp_gtp_tx_tx_clk_ctrl_OFFSET 0x0
#define bb_chip_bb_top_dp_gtp_tx_tx_rst_ctrl_OFFSET 0x4
#define bb_chip_bb_top_dp_gtp_tx_tx_status_OFFSET 0x8
#define bb_chip_bb_top_dp_gtp_tx_tx_diff_ctrl_OFFSET 0xC
#define bb_chip_bb_top_dp_gtp_tx_tx_post_cursor_OFFSET 0x10
#define bb_chip_bb_top_dp_gtp_tx_tx_pre_cursor_OFFSET 0x14
#define bb_chip_bb_top_dp_gtp_tx_tx_prbs_ctrl_OFFSET 0x18
#define bb_chip_bb_top_dp_gtp_tx_tx_misc_ctrl_OFFSET 0x1C
#define bb_chip_bb_top_dp_gtp_rx_OFFSET 0x138
#define bb_chip_bb_top_dp_gtp_rx_rx_clk_ctrl_OFFSET 0x0
#define bb_chip_bb_top_dp_gtp_rx_rx_rst_ctrl_OFFSET 0x4
#define bb_chip_bb_top_dp_gtp_rx_rx_status_OFFSET 0x8
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_ctrl_OFFSET 0xC
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_status_OFFSET 0x10
#define bb_chip_bb_top_dp_gtp_rx_rx_prbs_ctrl_OFFSET 0x14
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_monitor_OFFSET 0x18
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_slip_monitor_OFFSET 0x1C
#define bb_chip_bb_top_dp_gtp_rx_rx_dmonitor_out_OFFSET 0x20
#define bb_chip_bb_top_dp_gtp_rx_rx_eq_ctrl_OFFSET 0x24
#define bb_chip_bb_top_dp_gtp_rx_rx_misc_ctrl_OFFSET 0x28
#define bb_chip_bb_top_rxaui_OFFSET 0x164
#define bb_chip_bb_top_rxaui_control_OFFSET 0x0
#define bb_chip_bb_top_rxaui_status_OFFSET 0x4
#define bb_chip_bb_top_rxaui_gt_rst_ctrl_OFFSET 0x8
#define bb_chip_bb_top_rxaui_gt_status_OFFSET 0xC
#define bb_chip_bb_top_rxaui_gt_tx_diff_ctrl_OFFSET 0x10
#define bb_chip_bb_top_rxaui_gt_tx_post_cursor_OFFSET 0x14
#define bb_chip_bb_top_rxaui_gt_tx_pre_cursor_OFFSET 0x18
#define bb_chip_bb_top_rxaui_gt_rx_eq_ctrl_OFFSET 0x1C
#define bb_chip_bb_top_rxaui_gt_prbs_ctrl_OFFSET 0x20
#define bb_chip_bb_top_rxaui_gt_misc_ctrl_OFFSET 0x24
#define bb_chip_bb_top_rxaui_stats0_OFFSET 0x28
#define bb_chip_bb_top_rxaui_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_bb_top_rxaui_stats0_gt0_disp_err_OFFSET 0x4
#define bb_chip_bb_top_rxaui_stats0_gt0_not_in_table_OFFSET 0x8
#define bb_chip_bb_top_rxaui_stats0_gt1_disp_err_OFFSET 0xC
#define bb_chip_bb_top_rxaui_stats0_gt1_not_in_table_OFFSET 0x10
#define bb_chip_bb_top_rxaui_stats0_missing_start_OFFSET 0x14
#define bb_chip_bb_top_sl_5g_OFFSET 0x1A4
#define bb_chip_bb_top_sl_5g_gt_rst_ctrl_OFFSET 0x0
#define bb_chip_bb_top_sl_5g_gt_tx_ctrl_OFFSET 0x4
#define bb_chip_bb_top_sl_5g_gt_rx_ctrl_OFFSET 0x8
#define bb_chip_bb_top_sl_5g_gt_misc_ctrl_OFFSET 0xC
#define bb_chip_bb_top_sl_5g_gt_status_OFFSET 0x10
#define bb_chip_bb_top_sl_5g_stats0_OFFSET 0x14
#define bb_chip_bb_top_sl_5g_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_bb_top_sl_5g_stats0_gt_disp_err_OFFSET 0x4
#define bb_chip_bb_top_sl_5g_stats0_gt_not_in_table_OFFSET 0x8
#define bb_chip_bb_top_sl_5g_stats0_gt_rxbyterealign_OFFSET 0xC
#define bb_chip_ge_uart_s_OFFSET 0x2500
#define bb_chip_ge_uart_version_OFFSET 0x0
#define bb_chip_ge_uart_tx_fifo_OFFSET 0x4
#define bb_chip_ge_uart_rx_fifo_OFFSET 0x8
#define bb_chip_ge_uart_tx_data_OFFSET 0xC
#define bb_chip_ge_uart_rx_data_OFFSET 0x10
#define bb_chip_ge_uart_control_OFFSET 0x14
#define bb_chip_ge_uart_timeout_OFFSET 0x18
#define bb_chip_ge_uart_errors_OFFSET 0x1C
#define bb_chip_link_layer_tx_s_OFFSET 0x3000
#define bb_chip_link_layer_tx_version_OFFSET 0x0
#define bb_chip_link_layer_tx_mac_OFFSET 0x4
#define bb_chip_link_layer_tx_mac_version_OFFSET 0x0
#define bb_chip_link_layer_tx_mac_mac_config_OFFSET 0x4
#define bb_chip_link_layer_tx_mac_pa_word1_OFFSET 0x8
#define bb_chip_link_layer_tx_mac_pa_word0_OFFSET 0xC
#define bb_chip_link_layer_tx_mac_sfd_OFFSET 0x10
#define bb_chip_link_layer_tx_mac_da_word1_OFFSET 0x14
#define bb_chip_link_layer_tx_mac_da_word0_OFFSET 0x18
#define bb_chip_link_layer_tx_mac_sa__word1_OFFSET 0x1C
#define bb_chip_link_layer_tx_mac_sa_word0_OFFSET 0x20
#define bb_chip_link_layer_tx_mac_lt_OFFSET 0x24
#define bb_chip_link_layer_tx_mac_idle_OFFSET 0x28
#define bb_chip_link_layer_tx_mac_frm_rate_OFFSET 0x2C
#define bb_chip_link_layer_tx_mac_bandwidth_gap_OFFSET 0x30
#define bb_chip_link_layer_tx_mac_bandwidth_limit_OFFSET 0x34
#define bb_chip_link_layer_tx_mac_stats0_OFFSET 0x38
#define bb_chip_link_layer_tx_mac_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_tx_mac_stats0_pause_frame_OFFSET 0x4
#define bb_chip_link_layer_tx_mac_stats0_out_eop_OFFSET 0x8
#define bb_chip_link_layer_tx_mac_stats0_out_sop_OFFSET 0xC
#define bb_chip_link_layer_tx_mac_stats0_stall_ptp_in_OFFSET 0x10
#define bb_chip_link_layer_tx_mac_stats0_in_eop_OFFSET 0x14
#define bb_chip_link_layer_tx_mac_stats0_in_sop_OFFSET 0x18
#define bb_chip_link_layer_tx_mac_stats0_fsm_count_beyond_ptp_OFFSET 0x1C
#define bb_chip_link_layer_tx_mac_stats0_fsm_rollover_OFFSET 0x20
#define bb_chip_link_layer_tx_media_rs_OFFSET 0x60
#define bb_chip_link_layer_tx_media_rs_version_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_enable_OFFSET 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_OFFSET 0x8
#define bb_chip_link_layer_tx_media_rs_pfifo_version_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_OFFSET 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_OFFSET 0xC
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_OFFSET 0x3C
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_OFFSET 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_link_layer_tx_media_rs_stats0_OFFSET 0x58
#define bb_chip_link_layer_tx_media_rs_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_eop_OFFSET 0x4
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_sop_OFFSET 0x8
#define bb_chip_link_layer_tx_media_rs_stats1_OFFSET 0x64
#define bb_chip_link_layer_tx_media_rs_stats1_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_eop_OFFSET 0x4
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_sop_OFFSET 0x8
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_done_OFFSET 0xC
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_start_OFFSET 0x10
#define bb_chip_link_layer_tx_media_rs_stats2_OFFSET 0x78
#define bb_chip_link_layer_tx_media_rs_stats2_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_OFFSET 0x4
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_OFFSET 0x8
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_done_OFFSET 0xC
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_start_OFFSET 0x10
#define bb_chip_link_layer_tx_ptp_guard_OFFSET 0xEC
#define bb_chip_link_layer_tx_ptp_guard_version_OFFSET 0x0
#define bb_chip_link_layer_tx_ptp_guard_config0_OFFSET 0x4
#define bb_chip_link_layer_tx_ptp_guard_config0_fix_ptp_violations_OFFSET 0x0
#define bb_chip_link_layer_tx_ptp_guard_config0_max_cycles_OFFSET 0x4
#define bb_chip_link_layer_tx_ptp_guard_stats0_OFFSET 0xC
#define bb_chip_link_layer_tx_ptp_guard_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_sop_err_OFFSET 0x4
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_eop_err_OFFSET 0x8
#define bb_chip_link_layer_tx_ptp_guard_stats0_max_cycle_err_OFFSET 0xC
#define bb_chip_link_layer_tx_ptp_guard_irq0_OFFSET 0x1C
#define bb_chip_link_layer_tx_ptp_guard_irq0_enable_OFFSET 0x0
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_OFFSET 0x4
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_irq_OFFSET 0x8
#define bb_chip_link_layer_tx_ptp_guard_irq0_raw_OFFSET 0xC
#define bb_chip_link_layer_tx_self_test_support_OFFSET 0x118
#define bb_chip_link_layer_tx_self_test_support_set_up_OFFSET 0x0
#define bb_chip_link_layer_tx_self_test_support_media_gen_OFFSET 0x4
#define bb_chip_link_layer_tx_self_test_support_media_gen_version_OFFSET 0x0
#define bb_chip_link_layer_tx_self_test_support_media_gen_mca_mgen_OFFSET 0x4
#define bb_chip_link_layer_tx_self_test_support_framer_OFFSET 0xC
#define bb_chip_link_layer_tx_self_test_support_framer_max_byte_OFFSET 0x0
#define bb_chip_link_layer_tx_self_test_support_framer_mac_dg_type_OFFSET 0x4
#define bb_chip_link_layer_tx_self_test_support_framer_timer_wait_OFFSET 0x8
#define bb_chip_link_layer_tx_self_test_support_framer_mtu_size_OFFSET 0xC
#define bb_chip_link_layer_tx_self_test_support_framer_max_mtu_size_OFFSET 0x10
#define bb_chip_link_layer_tx_control_OFFSET 0x138
#define bb_chip_link_layer_tx_irq0_OFFSET 0x13C
#define bb_chip_link_layer_tx_irq0_enable_OFFSET 0x0
#define bb_chip_link_layer_tx_irq0_pending_OFFSET 0x4
#define bb_chip_link_layer_tx_irq0_pending_irq_OFFSET 0x8
#define bb_chip_link_layer_tx_irq0_raw_OFFSET 0xC
#define bb_chip_link_layer_rx_s_OFFSET 0x3400
#define bb_chip_link_layer_rx_version_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_client_interface_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_client_interface_version_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_client_config_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word1_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word0_OFFSET 0x8
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word1_OFFSET 0xC
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word0_OFFSET 0x10
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word1_OFFSET 0x14
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word0_OFFSET 0x18
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word1_OFFSET 0x1C
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word0_OFFSET 0x20
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_OFFSET 0x24
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_mask_OFFSET 0x28
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_OFFSET 0x2C
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_eop_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_sop_OFFSET 0x8
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_filter_fifo_overflow_OFFSET 0xC
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_md_OFFSET 0x10
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_lt_OFFSET 0x14
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_sa_OFFSET 0x18
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_da_OFFSET 0x1C
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_one_cycle_pkt_OFFSET 0x20
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_in_fsm_rollover_OFFSET 0x24
#define bb_chip_link_layer_rx_mac_OFFSET 0x5C
#define bb_chip_link_layer_rx_mac_version_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_mac_config_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_da_word1_OFFSET 0x8
#define bb_chip_link_layer_rx_mac_da_word0_OFFSET 0xC
#define bb_chip_link_layer_rx_mac_pfifo_OFFSET 0x10
#define bb_chip_link_layer_rx_mac_pfifo_version_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_OFFSET 0xC
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_OFFSET 0x3C
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_link_layer_rx_mac_stats0_OFFSET 0x60
#define bb_chip_link_layer_rx_mac_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_rx_mac_stats0_pause_frame_OFFSET 0x4
#define bb_chip_link_layer_rx_mac_stats0_out_eop_OFFSET 0x8
#define bb_chip_link_layer_rx_mac_stats0_out_sop_OFFSET 0xC
#define bb_chip_link_layer_rx_mac_stats0_inbuf_eop_OFFSET 0x10
#define bb_chip_link_layer_rx_mac_stats0_inbuf_sop_OFFSET 0x14
#define bb_chip_link_layer_rx_mac_stats0_in_eop_OFFSET 0x18
#define bb_chip_link_layer_rx_mac_stats0_in_sop_OFFSET 0x1C
#define bb_chip_link_layer_rx_mac_stats0_crc_err_OFFSET 0x20
#define bb_chip_link_layer_rx_mac_stats0_out_fsm_rollover_OFFSET 0x24
#define bb_chip_link_layer_rx_mac_stats0_in_fsm_rollover_OFFSET 0x28
#define bb_chip_link_layer_rx_mac_stats0_dbg_seq_num_in_err_OFFSET 0x2C
#define bb_chip_link_layer_rx_media_rs_OFFSET 0xEC
#define bb_chip_link_layer_rx_media_rs_version_OFFSET 0x0
#define bb_chip_link_layer_rx_media_rs_enable_OFFSET 0x4
#define bb_chip_link_layer_rx_media_rs_pa_word1_OFFSET 0x8
#define bb_chip_link_layer_rx_media_rs_pa_word0_OFFSET 0xC
#define bb_chip_link_layer_rx_media_rs_sfd_OFFSET 0x10
#define bb_chip_link_layer_rx_media_rs_idle_OFFSET 0x14
#define bb_chip_link_layer_rx_media_rs_stats0_OFFSET 0x18
#define bb_chip_link_layer_rx_media_rs_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_eop_OFFSET 0x4
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_sop_OFFSET 0x8
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_data_error_OFFSET 0xC
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_missing_sfd_OFFSET 0x10
#define bb_chip_link_layer_rx_media_rs_stats1_OFFSET 0x2C
#define bb_chip_link_layer_rx_media_rs_stats1_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_eop_OFFSET 0x4
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_sop_OFFSET 0x8
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_data_error_OFFSET 0xC
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_missing_sfd_OFFSET 0x10
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_wrong_lane_start_OFFSET 0x14
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_ok_OFFSET 0x18
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_local_fault_OFFSET 0x1C
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_remote_fault_OFFSET 0x20
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_int_OFFSET 0x24
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_runt_frm_detected_OFFSET 0x28
#define bb_chip_link_layer_rx_ptp_guard_OFFSET 0x144
#define bb_chip_link_layer_rx_ptp_guard_version_OFFSET 0x0
#define bb_chip_link_layer_rx_ptp_guard_config0_OFFSET 0x4
#define bb_chip_link_layer_rx_ptp_guard_config0_fix_ptp_violations_OFFSET 0x0
#define bb_chip_link_layer_rx_ptp_guard_config0_max_cycles_OFFSET 0x4
#define bb_chip_link_layer_rx_ptp_guard_stats0_OFFSET 0xC
#define bb_chip_link_layer_rx_ptp_guard_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_sop_err_OFFSET 0x4
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_eop_err_OFFSET 0x8
#define bb_chip_link_layer_rx_ptp_guard_stats0_max_cycle_err_OFFSET 0xC
#define bb_chip_link_layer_rx_ptp_guard_irq0_OFFSET 0x1C
#define bb_chip_link_layer_rx_ptp_guard_irq0_enable_OFFSET 0x0
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_OFFSET 0x4
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_irq_OFFSET 0x8
#define bb_chip_link_layer_rx_ptp_guard_irq0_raw_OFFSET 0xC
#define bb_chip_link_layer_rx_self_test_support_OFFSET 0x170
#define bb_chip_link_layer_rx_self_test_support_set_up_OFFSET 0x0
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_OFFSET 0x4
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_version_OFFSET 0x0
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_OFFSET 0x4
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_lane_err_OFFSET 0x4
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_error_count_OFFSET 0x8
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_pkt_count_OFFSET 0xC
#define bb_chip_link_layer_rx_self_test_support_de_framer_OFFSET 0x18
#define bb_chip_link_layer_rx_self_test_support_de_framer_jumbo_lt_code_OFFSET 0x0
#define bb_chip_link_layer_rx_irq0_OFFSET 0x18C
#define bb_chip_link_layer_rx_irq0_enable_OFFSET 0x0
#define bb_chip_link_layer_rx_irq0_pending_OFFSET 0x4
#define bb_chip_link_layer_rx_irq0_pending_irq_OFFSET 0x8
#define bb_chip_link_layer_rx_irq0_raw_OFFSET 0xC
#define bb_chip_layer3_tx_s_OFFSET 0x3800
#define bb_chip_layer3_tx_version_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_version_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_config0_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_config0_max_byte_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_config0_mac_dg_type_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_config0_timer_wait_OFFSET 0x8
#define bb_chip_layer3_tx_eth_framer_config0_mtu_size_OFFSET 0xC
#define bb_chip_layer3_tx_eth_framer_config0_max_mtu_size_OFFSET 0x10
#define bb_chip_layer3_tx_eth_framer_stats0_OFFSET 0x18
#define bb_chip_layer3_tx_eth_framer_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_stats0_out_eop_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_stats0_out_sop_OFFSET 0x8
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_eop_OFFSET 0xC
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_sop_OFFSET 0x10
#define bb_chip_layer3_tx_eth_framer_stats0_in_eop_OFFSET 0x14
#define bb_chip_layer3_tx_eth_framer_stats0_in_sop_OFFSET 0x18
#define bb_chip_layer3_tx_eth_framer_stats0_mac_dg_size_err_OFFSET 0x1C
#define bb_chip_layer3_tx_eth_framer_pfifo_OFFSET 0x38
#define bb_chip_layer3_tx_eth_framer_pfifo_version_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_OFFSET 0xC
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_OFFSET 0x3C
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_layer3_tx_eth_framer_ptp_guard_OFFSET 0x88
#define bb_chip_layer3_tx_eth_framer_ptp_guard_version_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_fix_ptp_violations_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_max_cycles_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_OFFSET 0xC
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_sop_err_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_eop_err_OFFSET 0x8
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_max_cycle_err_OFFSET 0xC
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_OFFSET 0x1C
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_enable_OFFSET 0x0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_OFFSET 0x4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_irq_OFFSET 0x8
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_raw_OFFSET 0xC
#define bb_chip_layer3_tx_irq0_OFFSET 0xB8
#define bb_chip_layer3_tx_irq0_enable_OFFSET 0x0
#define bb_chip_layer3_tx_irq0_pending_OFFSET 0x4
#define bb_chip_layer3_tx_irq0_pending_irq_OFFSET 0x8
#define bb_chip_layer3_tx_irq0_raw_OFFSET 0xC
#define bb_chip_layer3_rx_s_OFFSET 0x3C00
#define bb_chip_layer3_rx_version_OFFSET 0x0
#define bb_chip_layer3_rx_eth_de_framer_OFFSET 0x4
#define bb_chip_layer3_rx_eth_de_framer_version_OFFSET 0x0
#define bb_chip_layer3_rx_eth_de_framer_config0_OFFSET 0x4
#define bb_chip_layer3_rx_eth_de_framer_config0_jumbo_lt_code_OFFSET 0x0
#define bb_chip_layer3_rx_eth_de_framer_stats0_OFFSET 0x8
#define bb_chip_layer3_rx_eth_de_framer_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_eop_OFFSET 0x4
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_sop_OFFSET 0x8
#define bb_chip_layer3_rx_eth_de_framer_stats0_non_eth_pkt_OFFSET 0xC
#define bb_chip_layer3_rx_ptp_guard_OFFSET 0x1C
#define bb_chip_layer3_rx_ptp_guard_version_OFFSET 0x0
#define bb_chip_layer3_rx_ptp_guard_config0_OFFSET 0x4
#define bb_chip_layer3_rx_ptp_guard_config0_fix_ptp_violations_OFFSET 0x0
#define bb_chip_layer3_rx_ptp_guard_config0_max_cycles_OFFSET 0x4
#define bb_chip_layer3_rx_ptp_guard_stats0_OFFSET 0xC
#define bb_chip_layer3_rx_ptp_guard_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_sop_err_OFFSET 0x4
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_eop_err_OFFSET 0x8
#define bb_chip_layer3_rx_ptp_guard_stats0_max_cycle_err_OFFSET 0xC
#define bb_chip_layer3_rx_ptp_guard_irq0_OFFSET 0x1C
#define bb_chip_layer3_rx_ptp_guard_irq0_enable_OFFSET 0x0
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_OFFSET 0x4
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_irq_OFFSET 0x8
#define bb_chip_layer3_rx_ptp_guard_irq0_raw_OFFSET 0xC
#define bb_chip_layer3_rx_irq0_OFFSET 0x48
#define bb_chip_layer3_rx_irq0_enable_OFFSET 0x0
#define bb_chip_layer3_rx_irq0_pending_OFFSET 0x4
#define bb_chip_layer3_rx_irq0_pending_irq_OFFSET 0x8
#define bb_chip_layer3_rx_irq0_raw_OFFSET 0xC
#define bb_chip_mca_core_s_OFFSET 0x3D00
#define bb_chip_mca_core_version_OFFSET 0x0
#define bb_chip_mca_core_control0_OFFSET 0x4
#define bb_chip_mca_core_status0_OFFSET 0x8
#define bb_chip_mca_core_link_OFFSET 0xC
#define bb_chip_mca_core_link_control0_OFFSET 0x0
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_pol_OFFSET 0x0
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_rec_OFFSET 0x4
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_OFFSET 0x8
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_act_rpt_OFFSET 0x0
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_rpt_OFFSET 0x4
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_OFFSET 0x8
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_OFFSET 0x14
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_act_rpt_OFFSET 0x0
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_rpt_OFFSET 0x4
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_OFFSET 0x8
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_OFFSET 0x20
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0ltimeout_OFFSET 0x0
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_pnd_OFFSET 0x4
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_crd_OFFSET 0x8
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0rectimeout_OFFSET 0xC
#define bb_chip_mca_core_link_control0_test_OFFSET 0x30
#define bb_chip_mca_core_link_control0_test_latency_OFFSET 0x0
#define bb_chip_mca_core_link_status0_OFFSET 0x34
#define bb_chip_mca_core_link_status0_cfg_OFFSET 0x0
#define bb_chip_mca_core_tx_OFFSET 0x44
#define bb_chip_mca_core_tx_control0_OFFSET 0x0
#define bb_chip_mca_core_tx_control0_dp_OFFSET 0x0
#define bb_chip_mca_core_tx_control0_bw_sample_timer_OFFSET 0x4
#define bb_chip_mca_core_tx_stats0_OFFSET 0x8
#define bb_chip_mca_core_tx_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_mca_core_tx_stats0_pfifo_OFFSET 0x4
#define bb_chip_mca_core_tx_stats0_nfifo_OFFSET 0x8
#define bb_chip_mca_core_tx_stats0_cmd_fifo_dcount_OFFSET 0xC
#define bb_chip_mca_core_tx_stats0_data_pkt_nrtry_OFFSET 0x10
#define bb_chip_mca_core_tx_stats0_data_pkt_rtry_OFFSET 0x14
#define bb_chip_mca_core_tx_stats0_idle_OFFSET 0x18
#define bb_chip_mca_core_tx_stats0_ts2_OFFSET 0x1C
#define bb_chip_mca_core_tx_stats0_ts1_OFFSET 0x20
#define bb_chip_mca_core_tx_stats0_lbad_OFFSET 0x24
#define bb_chip_mca_core_tx_stats0_lrtry_OFFSET 0x28
#define bb_chip_mca_core_tx_stats0_lcrd_OFFSET 0x2C
#define bb_chip_mca_core_tx_stats0_lgood_OFFSET 0x30
#define bb_chip_mca_core_tx_stats0_plu_OFFSET 0x34
#define bb_chip_mca_core_tx_stats0_bandwidth_OFFSET 0x38
#define bb_chip_mca_core_rx_OFFSET 0x88
#define bb_chip_mca_core_rx_control0_OFFSET 0x0
#define bb_chip_mca_core_rx_control0_dp_OFFSET 0x0
#define bb_chip_mca_core_rx_control0_rx_cmd_fifo_flc_OFFSET 0x4
#define bb_chip_mca_core_rx_stats0_OFFSET 0x8
#define bb_chip_mca_core_rx_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_mca_core_rx_stats0_cmd_fifo_dcount_OFFSET 0x4
#define bb_chip_mca_core_rx_stats0_data_pkt_nrtry_OFFSET 0x8
#define bb_chip_mca_core_rx_stats0_data_pkt_rtry_OFFSET 0xC
#define bb_chip_mca_core_rx_stats0_idle_OFFSET 0x10
#define bb_chip_mca_core_rx_stats0_ts2_OFFSET 0x14
#define bb_chip_mca_core_rx_stats0_ts1_OFFSET 0x18
#define bb_chip_mca_core_rx_stats0_lbad_OFFSET 0x1C
#define bb_chip_mca_core_rx_stats0_lrtry_OFFSET 0x20
#define bb_chip_mca_core_rx_stats0_lcrd_OFFSET 0x24
#define bb_chip_mca_core_rx_stats0_lgood_OFFSET 0x28
#define bb_chip_mca_core_rx_stats0_plu_OFFSET 0x2C
#define bb_chip_mca_core_rx_stats0_rx_cmd_fifo_flc_OFFSET 0x30
#define bb_chip_mca_core_irq0_OFFSET 0xC4
#define bb_chip_mca_core_irq0_enable_OFFSET 0x0
#define bb_chip_mca_core_irq0_pending_OFFSET 0x4
#define bb_chip_mca_core_irq0_pending_irq_OFFSET 0x8
#define bb_chip_mca_core_irq0_raw_OFFSET 0xC
#define bb_chip_mca_channel_s_OFFSET 0x3E00
#define bb_chip_mca_channel_version_OFFSET 0x0
#define bb_chip_mca_channel_control0_OFFSET 0x4
#define bb_chip_mca_channel_status0_OFFSET 0x8
#define bb_chip_mca_channel_link_OFFSET 0xC
#define bb_chip_mca_channel_link_control0_OFFSET 0x0
#define bb_chip_mca_channel_link_control0_ltssm_OFFSET 0x0
#define bb_chip_mca_channel_link_control0_test_OFFSET 0x4
#define bb_chip_mca_channel_link_status0_OFFSET 0x8
#define bb_chip_mca_channel_link_status0_ltssm_OFFSET 0x0
#define bb_chip_mca_channel_link_stats0_OFFSET 0xC
#define bb_chip_mca_channel_link_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_mca_channel_link_stats0_u0_to_rec_OFFSET 0x4
#define bb_chip_mca_channel_link_stats0_pol_fail_OFFSET 0x8
#define bb_chip_mca_channel_link_stats0_tx_frm_OFFSET 0xC
#define bb_chip_mca_channel_link_stats0_tx_mcup_OFFSET 0x10
#define bb_chip_mca_channel_link_stats0_rx_frm_OFFSET 0x14
#define bb_chip_mca_channel_link_stats0_rx_mcup_OFFSET 0x18
#define bb_chip_mca_channel_link_stats0_latency_OFFSET 0x1C
#define bb_chip_mca_channel_tx_OFFSET 0x38
#define bb_chip_mca_channel_tx_control0_OFFSET 0x0
#define bb_chip_mca_channel_tx_control0_dp_OFFSET 0x0
#define bb_chip_mca_channel_tx_control0_rtry_buf_OFFSET 0x4
#define bb_chip_mca_channel_tx_control0_fifo_hys_OFFSET 0x8
#define bb_chip_mca_channel_tx_control0_bandwidth_limit_OFFSET 0xC
#define bb_chip_mca_channel_tx_stats0_OFFSET 0x10
#define bb_chip_mca_channel_tx_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_mca_channel_tx_stats0_cmd_fifo_OFFSET 0x4
#define bb_chip_mca_channel_tx_stats0_dp_pfifo_OFFSET 0x8
#define bb_chip_mca_channel_tx_stats0_dp_nfifo_OFFSET 0xC
#define bb_chip_mca_channel_tx_stats0_dp_fifo_rd_drp_pkt_OFFSET 0x10
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_drp_pkt_OFFSET 0x14
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_pkt_err_OFFSET 0x18
#define bb_chip_mca_channel_tx_stats0_dp_fifo_fifo_full_err_OFFSET 0x1C
#define bb_chip_mca_channel_tx_stats0_dp_fifo_pkt_max_err_OFFSET 0x20
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_sop_err_OFFSET 0x24
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_eop_err_OFFSET 0x28
#define bb_chip_mca_channel_tx_stats0_dp_grd_max_err_OFFSET 0x2C
#define bb_chip_mca_channel_tx_stats0_bandwidth_OFFSET 0x30
#define bb_chip_mca_channel_rx_OFFSET 0x7C
#define bb_chip_mca_channel_rx_control0_OFFSET 0x0
#define bb_chip_mca_channel_rx_control0_dp_OFFSET 0x0
#define bb_chip_mca_channel_rx_control0_ntfy_mode_OFFSET 0x4
#define bb_chip_mca_channel_rx_control0_hys_lo_OFFSET 0x8
#define bb_chip_mca_channel_rx_control0_hys_hi_OFFSET 0xC
#define bb_chip_mca_channel_rx_stats0_OFFSET 0x10
#define bb_chip_mca_channel_rx_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_mca_channel_rx_stats0_dp_pfifo_OFFSET 0x4
#define bb_chip_mca_channel_rx_stats0_dp_nfifo_OFFSET 0x8
#define bb_chip_mca_channel_rx_stats0_dp_fifo_rd_drp_pkt_OFFSET 0xC
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_drp_pkt_OFFSET 0x10
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_pkt_err_OFFSET 0x14
#define bb_chip_mca_channel_rx_stats0_dp_fifo_fifo_full_err_OFFSET 0x18
#define bb_chip_mca_channel_rx_stats0_dp_fifo_pkt_max_err_OFFSET 0x1C
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_sop_err_OFFSET 0x20
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_eop_err_OFFSET 0x24
#define bb_chip_mca_channel_rx_stats0_dp_grd_max_err_OFFSET 0x28
#define bb_chip_mca_channel_irq0_OFFSET 0xB8
#define bb_chip_mca_channel_irq0_enable_OFFSET 0x0
#define bb_chip_mca_channel_irq0_pending_OFFSET 0x4
#define bb_chip_mca_channel_irq0_pending_irq_OFFSET 0x8
#define bb_chip_mca_channel_irq0_raw_OFFSET 0xC
#define bb_chip_mca_channel_test_mode_OFFSET 0xC8
#define bb_chip_mca_channel_test_mode_tx_OFFSET 0x0
#define bb_chip_mca_channel_test_mode_tx_version_OFFSET 0x0
#define bb_chip_mca_channel_test_mode_tx_config0_OFFSET 0x4
#define bb_chip_mca_channel_test_mode_tx_config0_iwg_cnt_OFFSET 0x0
#define bb_chip_mca_channel_test_mode_tx_config0_ifg_cnt_OFFSET 0x4
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_cnt_OFFSET 0x8
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_size_OFFSET 0xC
#define bb_chip_mca_channel_test_mode_tx_config0_ctrl0_OFFSET 0x10
#define bb_chip_mca_channel_test_mode_tx_stats0_OFFSET 0x18
#define bb_chip_mca_channel_test_mode_tx_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_mca_channel_test_mode_tx_stats0_wait_count_OFFSET 0x4
#define bb_chip_mca_channel_test_mode_tx_stats0_pkt_count_OFFSET 0x8
#define bb_chip_mca_channel_test_mode_rx_OFFSET 0x24
#define bb_chip_mca_channel_test_mode_rx_version_OFFSET 0x0
#define bb_chip_mca_channel_test_mode_rx_config0_OFFSET 0x4
#define bb_chip_mca_channel_test_mode_rx_config0_mgen_OFFSET 0x0
#define bb_chip_mca_channel_test_mode_rx_stats0_OFFSET 0x8
#define bb_chip_mca_channel_test_mode_rx_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_mca_channel_test_mode_rx_stats0_err_count_OFFSET 0x4
#define bb_chip_mca_channel_test_mode_rx_stats0_pkt_count_OFFSET 0x8
#define bb_chip_dp_sink_main_s_OFFSET 0x4400
#define bb_chip_dp_sink_main_version_OFFSET 0x0
#define bb_chip_dp_sink_main_configuration_OFFSET 0x4
#define bb_chip_dp_sink_main_aligner_OFFSET 0x8
#define bb_chip_dp_sink_main_aligner_control_OFFSET 0x0
#define bb_chip_dp_sink_main_aligner_status_OFFSET 0x4
#define bb_chip_dp_sink_main_aligner_stats_OFFSET 0x8
#define bb_chip_dp_sink_main_aligner_debug_OFFSET 0xC
#define bb_chip_dp_sink_main_aligner_debug_stats1_OFFSET 0x0
#define bb_chip_dp_sink_main_aligner_debug_stats2_OFFSET 0x4
#define bb_chip_dp_sink_main_aligner_debug_stats3_OFFSET 0x8
#define bb_chip_dp_sink_main_aligner_debug_stats4_OFFSET 0xC
#define bb_chip_dp_sink_main_aligner_fifo_status_OFFSET 0x1C
#define bb_chip_dp_sink_main_aligner_fifo_config_OFFSET 0x20
#define bb_chip_dp_sink_main_stats_OFFSET 0x2C
#define bb_chip_dp_sink_main_stats_flag_8b10b_OFFSET 0x0
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_0_OFFSET 0x4
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_1_OFFSET 0x8
#define bb_chip_dp_sink_main_stats_cnt_8b10b_0_OFFSET 0xC
#define bb_chip_dp_sink_main_stats_cnt_8b10b_1_OFFSET 0x10
#define bb_chip_dp_sink_main_stats_cnt_en_rst_gtp_OFFSET 0x14
#define bb_chip_dp_sink_main_stats_cnt_gtp_OFFSET 0x18
#define bb_chip_dp_sink_main_descrambler_OFFSET 0x48
#define bb_chip_dp_sink_main_stream_extractor_OFFSET 0x4C
#define bb_chip_dp_sink_main_stream_extractor_cfg_OFFSET 0x0
#define bb_chip_dp_sink_main_stream_extractor_alu_OFFSET 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_OFFSET 0x8
#define bb_chip_dp_sink_main_stream_extractor_msa_mvid_OFFSET 0x0
#define bb_chip_dp_sink_main_stream_extractor_msa_nvid_OFFSET 0x4
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_0_OFFSET 0x8
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_1_OFFSET 0xC
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_0_OFFSET 0x10
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_1_OFFSET 0x14
#define bb_chip_dp_sink_main_stream_extractor_msa_misc_OFFSET 0x18
#define bb_chip_dp_sink_main_stream_extractor_msa_status_OFFSET 0x1C
#define bb_chip_dp_sink_main_stream_extractor_msa_fps_OFFSET 0x20
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_OFFSET 0x2C
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_mvid_OFFSET 0x0
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_nvid_OFFSET 0x4
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_0_OFFSET 0x8
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_1_OFFSET 0xC
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_0_OFFSET 0x10
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_1_OFFSET 0x14
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_misc_OFFSET 0x18
#define bb_chip_dp_sink_main_stream_extractor_fsm_status_OFFSET 0x48
#define bb_chip_dp_sink_main_stream_extractor_vbd_OFFSET 0x4C
#define bb_chip_dp_sink_main_stream_extractor_vbd_vbid_OFFSET 0x0
#define bb_chip_dp_sink_main_stream_extractor_vbd_status_OFFSET 0x4
#define bb_chip_dp_sink_main_stream_extractor_vid_fifo_config_OFFSET 0x54
#define bb_chip_dp_sink_main_stream_extractor_sdp_OFFSET 0x58
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_status_OFFSET 0x0
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_status_OFFSET 0x4
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_config_OFFSET 0x8
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_config_OFFSET 0xC
#define bb_chip_dp_sink_main_stream_extractor_sdp_debug_OFFSET 0x10
#define bb_chip_dp_sink_main_stream_extractor_pixgen_OFFSET 0x6C
#define bb_chip_dp_sink_main_stream_extractor_debug_OFFSET 0x70
#define bb_chip_dp_sink_main_encoder_vfr_OFFSET 0xC0
#define bb_chip_dp_sink_main_encoder_vfr_handshake_OFFSET 0x0
#define bb_chip_dp_sink_main_encoder_vfr_pixel_OFFSET 0x4
#define bb_chip_dp_sink_main_encoder_vfr_line_OFFSET 0x8
#define bb_chip_dp_sink_main_stats0_OFFSET 0xCC
#define bb_chip_dp_sink_main_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_full_OFFSET 0x4
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_empty_OFFSET 0x8
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_overflow_OFFSET 0xC
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_underflow_OFFSET 0x10
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_OFFSET 0x14
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_watermark_OFFSET 0x18
#define bb_chip_dp_sink_main_stats0_vid_c0_sr_full_OFFSET 0x1C
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_full_OFFSET 0x20
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_empty_OFFSET 0x24
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_overflow_OFFSET 0x28
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_underflow_OFFSET 0x2C
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_OFFSET 0x30
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_watermark_OFFSET 0x34
#define bb_chip_dp_sink_main_stats0_vid_c1_sr_full_OFFSET 0x38
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_full_OFFSET 0x3C
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_empty_OFFSET 0x40
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_overflow_OFFSET 0x44
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_underflow_OFFSET 0x48
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_OFFSET 0x4C
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_watermark_OFFSET 0x50
#define bb_chip_dp_sink_main_stats0_vid_c2_sr_full_OFFSET 0x54
#define bb_chip_dp_sink_main_stats0_vbd_majority_fail_OFFSET 0x58
#define bb_chip_dp_sink_main_stats0_msa_majority_fail_OFFSET 0x5C
#define bb_chip_dp_sink_main_stats1_OFFSET 0x12C
#define bb_chip_dp_sink_main_stats1_rd2clr_config_OFFSET 0x0
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_OFFSET 0x4
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_watermark_OFFSET 0x8
#define bb_chip_dp_sink_main_stats1_sdp_ss_se_same_cycle_OFFSET 0xC
#define bb_chip_dp_sink_main_stats1_sdp_fifo_full_OFFSET 0x10
#define bb_chip_dp_sink_main_stats1_sdp_fifo_empty_OFFSET 0x14
#define bb_chip_dp_sink_main_stats1_sdp_fifo_overflow_OFFSET 0x18
#define bb_chip_dp_sink_main_stats1_sdp_fifo_underflow_OFFSET 0x1C
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_OFFSET 0x20
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_watermark_OFFSET 0x24
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_full_OFFSET 0x28
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_empty_OFFSET 0x2C
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_overflow_OFFSET 0x30
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_underflow_OFFSET 0x34
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_OFFSET 0x38
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_watermark_OFFSET 0x3C
#define bb_chip_dp_sink_main_irq_OFFSET 0x16C
#define bb_chip_dp_sink_main_irq_enable_OFFSET 0x0
#define bb_chip_dp_sink_main_irq_pending_OFFSET 0x4
#define bb_chip_dp_sink_main_irq_pending_irq_OFFSET 0x8
#define bb_chip_dp_sink_main_irq_raw_OFFSET 0xC
#define bb_chip_dp_sink_tico_s_OFFSET 0x4600
#define bb_chip_dp_sink_tico_tico_e_width_OFFSET 0x14
#define bb_chip_dp_sink_tico_tico_e_height_OFFSET 0x1C
#define bb_chip_dp_sink_tico_tico_e_comp_OFFSET 0x24
#define bb_chip_dp_sink_tico_tico_e_mode_OFFSET 0x2C
#define bb_chip_dp_sink_tico_tico_e_hlvls_OFFSET 0x34
#define bb_chip_dp_sink_tico_tico_e_vld_OFFSET 0x38
#define bb_chip_dp_sink_tico_tico_e_nbr_OFFSET 0x3C
#define bb_chip_dp_sink_tico_tico_e_bgt_OFFSET 0x44
#define bb_chip_dp_sink_tico_tico_e_vid_depth_OFFSET 0x48
#define bb_chip_dp_sink_tico_tico_e_play_mode_OFFSET 0x4C
#define bb_chip_dp_sink_tico_tico_e_lvl_weights_OFFSET 0x50
#define bb_chip_dp_sink_aux_hpd_s_OFFSET 0x4700
#define bb_chip_dp_sink_aux_hpd_version_OFFSET 0x0
#define bb_chip_dp_sink_aux_hpd_aux_status_OFFSET 0x4
#define bb_chip_dp_sink_aux_hpd_aux_ctrl1_OFFSET 0x8
#define bb_chip_dp_sink_aux_hpd_aux_ctrl2_OFFSET 0xC
#define bb_chip_dp_sink_aux_hpd_aux_ctrl3_OFFSET 0x10
#define bb_chip_dp_sink_aux_hpd_aux_rx_OFFSET 0x14
#define bb_chip_dp_sink_aux_hpd_aux_tx_OFFSET 0x18
#define bb_chip_dp_sink_aux_hpd_hpd_status_OFFSET 0x1C
#define bb_chip_dp_sink_aux_hpd_hpd_ctrl_OFFSET 0x20
#define bb_chip_dp_sink_aux_hpd_hpd_timer1_OFFSET 0x24
#define bb_chip_dp_sink_aux_hpd_hpd_timer2_OFFSET 0x28
#define bb_chip_dp_sink_aux_hpd_hpd_timer3_OFFSET 0x2C
#define bb_chip_dp_sink_aux_hpd_hpd_rise_det_OFFSET 0x30
#define bb_chip_dp_sink_aux_hpd_hpd_fall_det_OFFSET 0x34
#define bb_chip_dp_sink_aux_hpd_dp_source_connect_det_OFFSET 0x38
#define bb_chip_dp_sink_aux_hpd_dp_source_disconnect_det_OFFSET 0x3C
#define bb_chip_dp_sink_aux_hpd_irq_OFFSET 0x40
#define bb_chip_dp_sink_aux_hpd_irq_enable_OFFSET 0x0
#define bb_chip_dp_sink_aux_hpd_irq_pending_OFFSET 0x4
#define bb_chip_dp_sink_aux_hpd_irq_pending_irq_OFFSET 0x8
#define bb_chip_dp_sink_aux_hpd_irq_raw_OFFSET 0xC
#define bb_chip_dp_source_main_s_OFFSET 0x4800
#define bb_chip_dp_source_main_version_OFFSET 0x0
#define bb_chip_dp_source_main_configuration_OFFSET 0x4
#define bb_chip_dp_source_main_scrambler_OFFSET 0x8
#define bb_chip_dp_source_main_stream_generator_OFFSET 0xC
#define bb_chip_dp_source_main_stream_generator_cfg0_OFFSET 0x0
#define bb_chip_dp_source_main_stream_generator_cfg1_OFFSET 0x4
#define bb_chip_dp_source_main_stream_generator_cfg2_OFFSET 0x8
#define bb_chip_dp_source_main_stream_generator_cfg3_OFFSET 0xC
#define bb_chip_dp_source_main_stream_generator_cs_pkt_updated_interval_OFFSET 0x10
#define bb_chip_dp_source_main_stream_generator_dp_width_total_actual_OFFSET 0x14
#define bb_chip_dp_source_main_stream_generator_alu0_OFFSET 0x18
#define bb_chip_dp_source_main_stream_generator_alu1_OFFSET 0x1C
#define bb_chip_dp_source_main_stream_generator_alu2_OFFSET 0x20
#define bb_chip_dp_source_main_stream_generator_msa_OFFSET 0x24
#define bb_chip_dp_source_main_stream_generator_msa_control_0_OFFSET 0x0
#define bb_chip_dp_source_main_stream_generator_msa_control_1_OFFSET 0x4
#define bb_chip_dp_source_main_stream_generator_msa_mvid_OFFSET 0x8
#define bb_chip_dp_source_main_stream_generator_msa_nvid_OFFSET 0xC
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_0_OFFSET 0x10
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_1_OFFSET 0x14
#define bb_chip_dp_source_main_stream_generator_msa_vertical_0_OFFSET 0x18
#define bb_chip_dp_source_main_stream_generator_msa_vertical_1_OFFSET 0x1C
#define bb_chip_dp_source_main_stream_generator_msa_misc_OFFSET 0x20
#define bb_chip_dp_source_main_stream_generator_msa_dp_OFFSET 0x48
#define bb_chip_dp_source_main_stream_generator_msa_dp_mvid_OFFSET 0x0
#define bb_chip_dp_source_main_stream_generator_msa_dp_nvid_OFFSET 0x4
#define bb_chip_dp_source_main_stream_generator_fsm_status_OFFSET 0x50
#define bb_chip_dp_source_main_stream_generator_fifo_cs_level_OFFSET 0x54
#define bb_chip_dp_source_main_stream_generator_fifo_cs_status_OFFSET 0x58
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control0_OFFSET 0x5C
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control1_OFFSET 0x60
#define bb_chip_dp_source_main_stream_generator_fifo_cs_config_OFFSET 0x64
#define bb_chip_dp_source_main_stream_generator_fifo_pix_level_OFFSET 0x68
#define bb_chip_dp_source_main_stream_generator_fifo_pix_sr_status_OFFSET 0x6C
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control0_OFFSET 0x70
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control1_OFFSET 0x74
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control2_OFFSET 0x78
#define bb_chip_dp_source_main_stream_generator_fifo_pix_config_OFFSET 0x7C
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_status_OFFSET 0x80
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_status_OFFSET 0x84
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_config_OFFSET 0x88
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_config_OFFSET 0x8C
#define bb_chip_dp_source_main_stream_generator_sdp_ctrl_OFFSET 0x90
#define bb_chip_dp_source_main_stream_generator_idle_pattern_debug_OFFSET 0x94
#define bb_chip_dp_source_main_stream_generator_vbd_OFFSET 0x98
#define bb_chip_dp_source_main_decoder_error_status_OFFSET 0xA8
#define bb_chip_dp_source_main_decoder_error_status_handshake_OFFSET 0x0
#define bb_chip_dp_source_main_decoder_error_status_error_id_OFFSET 0x4
#define bb_chip_dp_source_main_compliance_OFFSET 0xB0
#define bb_chip_dp_source_main_compliance_custom_80bits_3_0_OFFSET 0x0
#define bb_chip_dp_source_main_compliance_custom_80bits_7_4_OFFSET 0x4
#define bb_chip_dp_source_main_compliance_custom_80bits_9_8_OFFSET 0x8
#define bb_chip_dp_source_main_stats0_OFFSET 0xBC
#define bb_chip_dp_source_main_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_dp_source_main_stats0_fifo_pix_0_full_OFFSET 0x4
#define bb_chip_dp_source_main_stats0_fifo_pix_0_empty_OFFSET 0x8
#define bb_chip_dp_source_main_stats0_fifo_pix_0_overflow_OFFSET 0xC
#define bb_chip_dp_source_main_stats0_fifo_pix_0_underflow_OFFSET 0x10
#define bb_chip_dp_source_main_stats0_pix_0_sr_underflow_OFFSET 0x14
#define bb_chip_dp_source_main_stats0_pix_1_sr_underflow_OFFSET 0x18
#define bb_chip_dp_source_main_stats0_pix_2_sr_underflow_OFFSET 0x1C
#define bb_chip_dp_source_main_stats0_pix_3_sr_underflow_OFFSET 0x20
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_OFFSET 0x24
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_watermark_OFFSET 0x28
#define bb_chip_dp_source_main_stats1_OFFSET 0xE8
#define bb_chip_dp_source_main_stats1_rd2clr_config_OFFSET 0x0
#define bb_chip_dp_source_main_stats1_fifo_cs_full_OFFSET 0x4
#define bb_chip_dp_source_main_stats1_fifo_cs_empty_OFFSET 0x8
#define bb_chip_dp_source_main_stats1_fifo_cs_overflow_OFFSET 0xC
#define bb_chip_dp_source_main_stats1_fifo_cs_underflow_OFFSET 0x10
#define bb_chip_dp_source_main_stats1_fifo_cs_ae0_OFFSET 0x14
#define bb_chip_dp_source_main_stats1_fifo_cs_ae1_OFFSET 0x18
#define bb_chip_dp_source_main_stats1_fifo_cs_af0_OFFSET 0x1C
#define bb_chip_dp_source_main_stats1_fifo_cs_af1_OFFSET 0x20
#define bb_chip_dp_source_main_stats1_fifo_cs_level_OFFSET 0x24
#define bb_chip_dp_source_main_stats1_fifo_cs_level_watermark_OFFSET 0x28
#define bb_chip_dp_source_main_stats1_fifo_sdp_full_OFFSET 0x2C
#define bb_chip_dp_source_main_stats1_fifo_sdp_empty_OFFSET 0x30
#define bb_chip_dp_source_main_stats1_fifo_sdp_overflow_OFFSET 0x34
#define bb_chip_dp_source_main_stats1_fifo_sdp_underflow_OFFSET 0x38
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_OFFSET 0x3C
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_watermark_OFFSET 0x40
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_full_OFFSET 0x44
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_empty_OFFSET 0x48
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_overflow_OFFSET 0x4C
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_underflow_OFFSET 0x50
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_OFFSET 0x54
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_watermark_OFFSET 0x58
#define bb_chip_dp_source_main_stats1_sdp_ptp_pkt_sop_in_OFFSET 0x5C
#define bb_chip_dp_source_main_irq_OFFSET 0x148
#define bb_chip_dp_source_main_irq_enable_OFFSET 0x0
#define bb_chip_dp_source_main_irq_pending_OFFSET 0x4
#define bb_chip_dp_source_main_irq_pending_irq_OFFSET 0x8
#define bb_chip_dp_source_main_irq_raw_OFFSET 0xC
#define bb_chip_dp_source_tico_s_OFFSET 0x4A00
#define bb_chip_dp_source_tico_tico_d_config_OFFSET 0x10
#define bb_chip_dp_source_tico_tico_d_width_OFFSET 0x14
#define bb_chip_dp_source_tico_tico_d_height_OFFSET 0x1C
#define bb_chip_dp_source_tico_tico_d_comp_OFFSET 0x24
#define bb_chip_dp_source_tico_tico_d_mode_OFFSET 0x2C
#define bb_chip_dp_source_tico_tico_d_hlvls_OFFSET 0x34
#define bb_chip_dp_source_tico_tico_d_vld_OFFSET 0x38
#define bb_chip_dp_source_tico_tico_d_nbr_OFFSET 0x3C
#define bb_chip_dp_source_tico_tico_d_bgt_OFFSET 0x44
#define bb_chip_dp_source_tico_tico_d_vid_depth_OFFSET 0x48
#define bb_chip_dp_source_tico_tico_d_play_mode_OFFSET 0x4C
#define bb_chip_dp_source_tico_tico_d_profile_OFFSET 0x58
#define bb_chip_dp_source_tico_tico_d_line_duration_OFFSET 0x80
#define bb_chip_dp_source_tico_tico_d_img_size_OFFSET 0x84
#define bb_chip_dp_source_aux_hpd_s_OFFSET 0x4B00
#define bb_chip_dp_source_aux_hpd_version_OFFSET 0x0
#define bb_chip_dp_source_aux_hpd_aux_status_OFFSET 0x4
#define bb_chip_dp_source_aux_hpd_aux_ctrl1_OFFSET 0x8
#define bb_chip_dp_source_aux_hpd_aux_ctrl2_OFFSET 0xC
#define bb_chip_dp_source_aux_hpd_aux_ctrl3_OFFSET 0x10
#define bb_chip_dp_source_aux_hpd_aux_rx_OFFSET 0x14
#define bb_chip_dp_source_aux_hpd_aux_tx_OFFSET 0x18
#define bb_chip_dp_source_aux_hpd_hpd_status_OFFSET 0x1C
#define bb_chip_dp_source_aux_hpd_hpd_ctrl_OFFSET 0x20
#define bb_chip_dp_source_aux_hpd_hpd_timer1_OFFSET 0x24
#define bb_chip_dp_source_aux_hpd_hpd_timer2_OFFSET 0x28
#define bb_chip_dp_source_aux_hpd_hpd_timer3_OFFSET 0x2C
#define bb_chip_dp_source_aux_hpd_hpd_rise_det_OFFSET 0x30
#define bb_chip_dp_source_aux_hpd_hpd_fall_det_OFFSET 0x34
#define bb_chip_dp_source_aux_hpd_dp_source_connect_det_OFFSET 0x38
#define bb_chip_dp_source_aux_hpd_dp_source_disconnect_det_OFFSET 0x3C
#define bb_chip_dp_source_aux_hpd_irq_OFFSET 0x40
#define bb_chip_dp_source_aux_hpd_irq_enable_OFFSET 0x0
#define bb_chip_dp_source_aux_hpd_irq_pending_OFFSET 0x4
#define bb_chip_dp_source_aux_hpd_irq_pending_irq_OFFSET 0x8
#define bb_chip_dp_source_aux_hpd_irq_raw_OFFSET 0xC
#define bb_chip_xusb3_s_OFFSET 0x4C00
#define bb_chip_xusb3_version_OFFSET 0x0
#define bb_chip_xusb3_configuration_OFFSET 0x4
#define bb_chip_xusb3_control_OFFSET 0x8
#define bb_chip_xusb3_rx_partner_fifo_OFFSET 0xC
#define bb_chip_xusb3_rx_partner_fifo_version_OFFSET 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_OFFSET 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_OFFSET 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_OFFSET 0xC
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_xusb3_rx_partner_fifo_read_engine_OFFSET 0x3C
#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_OFFSET 0x0
#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_OFFSET 0x4
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_xusb3_stats0_OFFSET 0x5C
#define bb_chip_xusb3_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_xusb3_stats0_link_partner_ptp_violated_OFFSET 0x4
#define bb_chip_xusb3_stats0_from_phy_in_sop_OFFSET 0x8
#define bb_chip_xusb3_stats0_from_phy_in_eop_OFFSET 0xC
#define bb_chip_xusb3_stats0_to_link_out_sop_OFFSET 0x10
#define bb_chip_xusb3_stats0_to_link_out_eop_OFFSET 0x14
#define bb_chip_xusb3_stats0_from_link_in_sop_OFFSET 0x18
#define bb_chip_xusb3_stats0_from_link_in_eop_OFFSET 0x1C
#define bb_chip_xusb3_stats0_unknown_pkt_drp_OFFSET 0x20
#define bb_chip_xusb3_stats0_dwn_stream_busy_drp_OFFSET 0x24
#define bb_chip_xusb3_stats0_drop_lone_dpp_OFFSET 0x28
#define bb_chip_xusb3_stats0_rcvd_lone_dph_OFFSET 0x2C
#define bb_chip_xusb3_stats0_timedout_2join_dpp_OFFSET 0x30
#define bb_chip_xusb3_stats0_not_rdy_pkt_drp_OFFSET 0x34
#define bb_chip_xusb3_ptp_guard_2core_OFFSET 0x94
#define bb_chip_xusb3_ptp_guard_2core_version_OFFSET 0x0
#define bb_chip_xusb3_ptp_guard_2core_config0_OFFSET 0x4
#define bb_chip_xusb3_ptp_guard_2core_config0_fix_ptp_violations_OFFSET 0x0
#define bb_chip_xusb3_ptp_guard_2core_config0_max_cycles_OFFSET 0x4
#define bb_chip_xusb3_ptp_guard_2core_stats0_OFFSET 0xC
#define bb_chip_xusb3_ptp_guard_2core_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_sop_err_OFFSET 0x4
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_eop_err_OFFSET 0x8
#define bb_chip_xusb3_ptp_guard_2core_stats0_max_cycle_err_OFFSET 0xC
#define bb_chip_xusb3_ptp_guard_2core_irq0_OFFSET 0x1C
#define bb_chip_xusb3_ptp_guard_2core_irq0_enable_OFFSET 0x0
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_OFFSET 0x4
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_irq_OFFSET 0x8
#define bb_chip_xusb3_ptp_guard_2core_irq0_raw_OFFSET 0xC
#define bb_chip_xusb3_buff_2ulp_OFFSET 0xC0
#define bb_chip_xusb3_buff_2ulp_control_OFFSET 0x0
#define bb_chip_xusb3_buff_2ulp_stats0_OFFSET 0x4
#define bb_chip_xusb3_buff_2ulp_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_xusb3_buff_2ulp_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_xusb3_buff_2ulp_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_xusb3_buff_2upp_OFFSET 0xD0
#define bb_chip_xusb3_buff_2upp_control_OFFSET 0x0
#define bb_chip_xusb3_buff_2upp_stats0_OFFSET 0x4
#define bb_chip_xusb3_buff_2upp_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_xusb3_buff_2upp_stats0_nfifo_scount_OFFSET 0x4
#define bb_chip_xusb3_buff_2upp_stats0_pfifo_scount_OFFSET 0x8
#define bb_chip_xusb3_irq0_OFFSET 0xE0
#define bb_chip_xusb3_irq0_enable_OFFSET 0x0
#define bb_chip_xusb3_irq0_pending_OFFSET 0x4
#define bb_chip_xusb3_irq0_pending_irq_OFFSET 0x8
#define bb_chip_xusb3_irq0_raw_OFFSET 0xC
#define bb_chip_upp_s_OFFSET 0x4E00
#define bb_chip_upp_version_OFFSET 0x0
#define bb_chip_upp_config0_OFFSET 0x4
#define bb_chip_upp_control_OFFSET 0x8
#define bb_chip_upp_id_mgr_fifo_OFFSET 0xC
#define bb_chip_upp_id_mgr_fifo_version_OFFSET 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_OFFSET 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_OFFSET 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_OFFSET 0xC
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_upp_id_mgr_fifo_read_engine_OFFSET 0x3C
#define bb_chip_upp_id_mgr_fifo_read_engine_config0_OFFSET 0x0
#define bb_chip_upp_id_mgr_fifo_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_OFFSET 0x4
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_0_OFFSET 0x5C
#define bb_chip_upp_iso_lex_fifo_0_version_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_upp_iso_lex_fifo_0_read_engine_OFFSET 0x3C
#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_1_OFFSET 0xAC
#define bb_chip_upp_iso_lex_fifo_1_version_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_upp_iso_lex_fifo_1_read_engine_OFFSET 0x3C
#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_2_OFFSET 0xFC
#define bb_chip_upp_iso_lex_fifo_2_version_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_upp_iso_lex_fifo_2_read_engine_OFFSET 0x3C
#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_3_OFFSET 0x14C
#define bb_chip_upp_iso_lex_fifo_3_version_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_upp_iso_lex_fifo_3_read_engine_OFFSET 0x3C
#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_upp_iso_rex_fifo_OFFSET 0x19C
#define bb_chip_upp_iso_rex_fifo_version_OFFSET 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_OFFSET 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_OFFSET 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_OFFSET 0xC
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_upp_iso_rex_fifo_read_engine_OFFSET 0x3C
#define bb_chip_upp_iso_rex_fifo_read_engine_config0_OFFSET 0x0
#define bb_chip_upp_iso_rex_fifo_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_OFFSET 0x4
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_upp_ctrl_trfr_h2d_fifo_OFFSET 0x1EC
#define bb_chip_upp_ctrl_trfr_h2d_fifo_version_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_OFFSET 0xC
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_OFFSET 0x3C
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_upp_ctrl_trfr_d2h_fifo_OFFSET 0x23C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_version_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_mode_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_notify_limit_OFFSET 0x8
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_OFFSET 0xC
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_nfifo_dcount_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pfifo_dcount_OFFSET 0x8
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_max_byte_cnt_err_OFFSET 0xC
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_fifo_full_err_OFFSET 0x10
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_err_OFFSET 0x14
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_sop_err_OFFSET 0x18
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_wflush_act_OFFSET 0x1C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_rd_OFFSET 0x20
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_wr_OFFSET 0x24
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_flow_ctrl_OFFSET 0x28
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_OFFSET 0x3C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_clear_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rflush_act_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_drp_pkt_OFFSET 0x8
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_flow_ctrl_OFFSET 0xC
#define bb_chip_upp_ctrl_trfr_OFFSET 0x28C
#define bb_chip_upp_ctrl_trfr_h2d_data_OFFSET 0x0
#define bb_chip_upp_ctrl_trfr_h2d_ctrl_OFFSET 0x4
#define bb_chip_upp_ctrl_trfr_h2d_skip_OFFSET 0x8
#define bb_chip_upp_ctrl_trfr_h2d_dbg_OFFSET 0xC
#define bb_chip_upp_ctrl_trfr_d2h_data_OFFSET 0x10
#define bb_chip_upp_ctrl_trfr_d2h_ctrl_OFFSET 0x14
#define bb_chip_upp_ctrl_trfr_d2h_skip_OFFSET 0x18
#define bb_chip_upp_ctrl_trfr_d2h_dbg_OFFSET 0x1C
#define bb_chip_upp_ctrl_trfr_cmpltd_OFFSET 0x20
#define bb_chip_upp_endpoint_tbl_OFFSET 0x2B0
#define bb_chip_upp_endpoint_tbl_config0_OFFSET 0x0
#define bb_chip_upp_endpoint_tbl_config1_OFFSET 0x4
#define bb_chip_upp_endpoint_tbl_total_qid_OFFSET 0x8
#define bb_chip_upp_endpoint_tbl_qid_assigned0_OFFSET 0xC
#define bb_chip_upp_stats0_OFFSET 0x2C0
#define bb_chip_upp_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_upp_stats0_missing_itp_OFFSET 0x4
#define bb_chip_upp_irq0_OFFSET 0x2C8
#define bb_chip_upp_irq0_enable_OFFSET 0x0
#define bb_chip_upp_irq0_pending_OFFSET 0x4
#define bb_chip_upp_irq0_pending_irq_OFFSET 0x8
#define bb_chip_upp_irq0_raw_OFFSET 0xC
#define bb_chip_upp_irq1_OFFSET 0x2D8
#define bb_chip_upp_irq1_enable_OFFSET 0x0
#define bb_chip_upp_irq1_pending_OFFSET 0x4
#define bb_chip_upp_irq1_pending_irq_OFFSET 0x8
#define bb_chip_upp_irq1_raw_OFFSET 0xC
#define bb_chip_ulp_core_s_OFFSET 0x5100
#define bb_chip_ulp_core_version_OFFSET 0x0
#define bb_chip_ulp_core_configuration_OFFSET 0x4
#define bb_chip_ulp_core_control_OFFSET 0x8
#define bb_chip_ulp_core_timer_correction_OFFSET 0xC
#define bb_chip_ulp_core_ltssm_state_OFFSET 0x10
#define bb_chip_ulp_core_stats0_OFFSET 0x14
#define bb_chip_ulp_core_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_ulp_core_stats0_tx_lfps_cnt_in_err_OFFSET 0x4
#define bb_chip_ulp_core_stats0_rx_lfps_cnt_in_err_OFFSET 0x8
#define bb_chip_ulp_core_stats0_tx_framer_ptp_violated_OFFSET 0xC
#define bb_chip_ulp_core_stats0_link_training_ptp_violated_OFFSET 0x10
#define bb_chip_ulp_core_stats0_link_command_ptp_violated_OFFSET 0x14
#define bb_chip_ulp_core_stats0_lmp_ptp_violated_OFFSET 0x18
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_overflow_OFFSET 0x1C
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_underflow_OFFSET 0x20
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_overflow_OFFSET 0x24
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_underflow_OFFSET 0x28
#define bb_chip_ulp_core_stats0_remote_rx_hdr_buff_crdt_cnt_in_err_OFFSET 0x2C
#define bb_chip_ulp_core_stats0_to_phy_out_sop_OFFSET 0x30
#define bb_chip_ulp_core_stats0_to_phy_out_eop_OFFSET 0x34
#define bb_chip_ulp_core_stats0_go2_u0_from_recovery_OFFSET 0x38
#define bb_chip_ulp_core_stats0_rx_go_recovery_OFFSET 0x3C
#define bb_chip_ulp_core_stats0_snt_lrty_OFFSET 0x40
#define bb_chip_ulp_core_stats0_snt_lbad_OFFSET 0x44
#define bb_chip_ulp_core_stats0_rcvd_lrty_OFFSET 0x48
#define bb_chip_ulp_core_stats0_rcvd_lbad_OFFSET 0x4C
#define bb_chip_ulp_core_ptp_guard_2core_OFFSET 0x64
#define bb_chip_ulp_core_ptp_guard_2core_version_OFFSET 0x0
#define bb_chip_ulp_core_ptp_guard_2core_config0_OFFSET 0x4
#define bb_chip_ulp_core_ptp_guard_2core_config0_fix_ptp_violations_OFFSET 0x0
#define bb_chip_ulp_core_ptp_guard_2core_config0_max_cycles_OFFSET 0x4
#define bb_chip_ulp_core_ptp_guard_2core_stats0_OFFSET 0xC
#define bb_chip_ulp_core_ptp_guard_2core_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_sop_err_OFFSET 0x4
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_eop_err_OFFSET 0x8
#define bb_chip_ulp_core_ptp_guard_2core_stats0_max_cycle_err_OFFSET 0xC
#define bb_chip_ulp_core_ptp_guard_2core_irq0_OFFSET 0x1C
#define bb_chip_ulp_core_ptp_guard_2core_irq0_enable_OFFSET 0x0
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_OFFSET 0x4
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_irq_OFFSET 0x8
#define bb_chip_ulp_core_ptp_guard_2core_irq0_raw_OFFSET 0xC
#define bb_chip_ulp_core_ptp_guard_2phy_OFFSET 0x90
#define bb_chip_ulp_core_ptp_guard_2phy_version_OFFSET 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_config0_OFFSET 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_config0_fix_ptp_violations_OFFSET 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_config0_max_cycles_OFFSET 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_OFFSET 0xC
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_sop_err_OFFSET 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_eop_err_OFFSET 0x8
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_max_cycle_err_OFFSET 0xC
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_OFFSET 0x1C
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_enable_OFFSET 0x0
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_OFFSET 0x4
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_irq_OFFSET 0x8
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_raw_OFFSET 0xC
#define bb_chip_ulp_core_irq0_OFFSET 0xBC
#define bb_chip_ulp_core_irq0_enable_OFFSET 0x0
#define bb_chip_ulp_core_irq0_pending_OFFSET 0x4
#define bb_chip_ulp_core_irq0_pending_irq_OFFSET 0x8
#define bb_chip_ulp_core_irq0_raw_OFFSET 0xC
#define bb_chip_ulp_core_irq1_OFFSET 0xCC
#define bb_chip_ulp_core_irq1_enable_OFFSET 0x0
#define bb_chip_ulp_core_irq1_pending_OFFSET 0x4
#define bb_chip_ulp_core_irq1_pending_irq_OFFSET 0x8
#define bb_chip_ulp_core_irq1_raw_OFFSET 0xC
#define bb_chip_ulp_phy_s_OFFSET 0x5300
#define bb_chip_ulp_phy_version_OFFSET 0x0
#define bb_chip_ulp_phy_pipe_ctrl_OFFSET 0x4
#define bb_chip_ulp_phy_compliancy_ctrl_OFFSET 0x8
#define bb_chip_ulp_phy_stats0_OFFSET 0xC
#define bb_chip_ulp_phy_stats0_rd2clr_config_OFFSET 0x0
#define bb_chip_ulp_phy_stats0_rx_8b10b_err_OFFSET 0x4
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_overflow_OFFSET 0x8
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_underflow_OFFSET 0xC
#define bb_chip_ulp_phy_stats0_rx_disparity_err_OFFSET 0x10
#define bb_chip_ulp_phy_stats1_OFFSET 0x20
#define bb_chip_ulp_phy_stats1_rd2clr_config_OFFSET 0x0
#define bb_chip_ulp_phy_stats1_skp_insert_in_err_OFFSET 0x4
#define bb_chip_ulp_phy_stats1_crc5_chk_failed_OFFSET 0x8
#define bb_chip_ulp_phy_stats1_crc16_chk_failed_OFFSET 0xC
#define bb_chip_ulp_phy_stats1_dpp_abort_OFFSET 0x10
#define bb_chip_ulp_phy_stats1_rx_framer_ptp_violated_OFFSET 0x14
#define bb_chip_ulp_phy_irq0_OFFSET 0x38
#define bb_chip_ulp_phy_irq0_enable_OFFSET 0x0
#define bb_chip_ulp_phy_irq0_pending_OFFSET 0x4
#define bb_chip_ulp_phy_irq0_pending_irq_OFFSET 0x8
#define bb_chip_ulp_phy_irq0_raw_OFFSET 0xC

#define bb_chip_s_ADDRESS 0x80000000
#define bb_chip_leon2_s_ADDRESS 0x80000000
#define bb_chip_leon2_mem_ctrl_ADDRESS 0x80000000
#define bb_chip_leon2_mem_ctrl_mcfg1_ADDRESS 0x80000000
#define bb_chip_leon2_mem_ctrl_mcfg2_ADDRESS 0x80000004
#define bb_chip_leon2_mem_ctrl_mcfg3_ADDRESS 0x80000008
#define bb_chip_leon2_ahb_stat_ADDRESS 0x8000000C
#define bb_chip_leon2_ahb_stat_ahb_failing_ADDRESS 0x8000000C
#define bb_chip_leon2_ahb_stat_ahb_status_ADDRESS 0x80000010
#define bb_chip_leon2_cache_controller_ADDRESS 0x80000014
#define bb_chip_leon2_cache_controller_cache_control_ADDRESS 0x80000014
#define bb_chip_leon2_cache_controller_power_down_ADDRESS 0x80000018
#define bb_chip_leon2_write_prot_ADDRESS 0x8000001C
#define bb_chip_leon2_write_prot_write_prot1_ADDRESS 0x8000001C
#define bb_chip_leon2_write_prot_write_prot2_ADDRESS 0x80000020
#define bb_chip_leon2_leon_config_ADDRESS 0x80000024
#define bb_chip_leon2_timers_ADDRESS 0x80000040
#define bb_chip_leon2_timers_timer1_counter_ADDRESS 0x80000040
#define bb_chip_leon2_timers_timer1_reload_ADDRESS 0x80000044
#define bb_chip_leon2_timers_timer1_control_ADDRESS 0x80000048
#define bb_chip_leon2_timers_watchdog_counter_ADDRESS 0x8000004C
#define bb_chip_leon2_timers_timer2_counter_ADDRESS 0x80000050
#define bb_chip_leon2_timers_timer2_reload_ADDRESS 0x80000054
#define bb_chip_leon2_timers_timer2_control_ADDRESS 0x80000058
#define bb_chip_leon2_timers_prescaler_counter_ADDRESS 0x80000060
#define bb_chip_leon2_timers_prescaler_reload_ADDRESS 0x80000064
#define bb_chip_leon2_uarts_ADDRESS 0x80000070
#define bb_chip_leon2_uarts_uart1_data_ADDRESS 0x80000070
#define bb_chip_leon2_uarts_uart1_status_ADDRESS 0x80000074
#define bb_chip_leon2_uarts_uart1_control_ADDRESS 0x80000078
#define bb_chip_leon2_uarts_uart1_scaler_ADDRESS 0x8000007C
#define bb_chip_leon2_uarts_uart2_data_ADDRESS 0x80000080
#define bb_chip_leon2_uarts_uart2_status_ADDRESS 0x80000084
#define bb_chip_leon2_uarts_uart2_control_ADDRESS 0x80000088
#define bb_chip_leon2_uarts_uart2_scaler_ADDRESS 0x8000008C
#define bb_chip_leon2_irqctrl_ADDRESS 0x80000090
#define bb_chip_leon2_irqctrl_int_mask_ADDRESS 0x80000090
#define bb_chip_leon2_irqctrl_int_pending_ADDRESS 0x80000094
#define bb_chip_leon2_irqctrl_int_force_ADDRESS 0x80000098
#define bb_chip_leon2_irqctrl_int_clear_ADDRESS 0x8000009C
#define bb_chip_leon2_io_port_ADDRESS 0x800000A0
#define bb_chip_leon2_io_port_io_val_ADDRESS 0x800000A0
#define bb_chip_leon2_io_port_io_dir_ADDRESS 0x800000A4
#define bb_chip_leon2_io_port_io_int_cfg_ADDRESS 0x800000A8
#define bb_chip_leon2_irqctrl2_ADDRESS 0x800000B0
#define bb_chip_leon2_irqctrl2_int_mask_ADDRESS 0x800000B0
#define bb_chip_leon2_irqctrl2_int_pending_ADDRESS 0x800000B4
#define bb_chip_leon2_irqctrl2_int_status_clear_ADDRESS 0x800000B8
#define bb_chip_leon2_dsu_uart_ADDRESS 0x800000C4
#define bb_chip_leon2_dsu_uart_dsu_status_ADDRESS 0x800000C4
#define bb_chip_leon2_dsu_uart_dsu_control_ADDRESS 0x800000C8
#define bb_chip_leon2_dsu_uart_dsu_scaler_ADDRESS 0x800000CC
#define bb_chip_uart_s_ADDRESS 0x80000500
#define bb_chip_uart_version_ADDRESS 0x80000500
#define bb_chip_uart_tx_fifo_ADDRESS 0x80000504
#define bb_chip_uart_rx_fifo_ADDRESS 0x80000508
#define bb_chip_uart_tx_data_ADDRESS 0x8000050C
#define bb_chip_uart_rx_data_ADDRESS 0x80000510
#define bb_chip_uart_control_ADDRESS 0x80000514
#define bb_chip_uart_timeout_ADDRESS 0x80000518
#define bb_chip_uart_errors_ADDRESS 0x8000051C
#define bb_chip_i2c_master_s_ADDRESS 0x80000600
#define bb_chip_i2c_master_version_ADDRESS 0x80000600
#define bb_chip_i2c_master_prescaler_ADDRESS 0x80000604
#define bb_chip_i2c_master_fifo_ADDRESS 0x80000608
#define bb_chip_i2c_master_control_ADDRESS 0x8000060C
#define bb_chip_i2c_master_wr_data_ADDRESS 0x80000610
#define bb_chip_i2c_master_rd_data_ADDRESS 0x80000614
#define bb_chip_i2c_master_irq_ADDRESS 0x80000618
#define bb_chip_i2c_master_irq_enable_ADDRESS 0x80000618
#define bb_chip_i2c_master_irq_pending_ADDRESS 0x8000061C
#define bb_chip_i2c_master_irq_pending_irq_ADDRESS 0x80000620
#define bb_chip_i2c_master_irq_raw_ADDRESS 0x80000624
#define bb_chip_i2c_slave_s_ADDRESS 0x80000700
#define bb_chip_i2c_slave_version_ADDRESS 0x80000700
#define bb_chip_i2c_slave_in_fifo_ADDRESS 0x80000704
#define bb_chip_i2c_slave_out_fifo_ADDRESS 0x80000708
#define bb_chip_i2c_slave_slave_config_ADDRESS 0x8000070C
#define bb_chip_i2c_slave_timeout_ADDRESS 0x80000710
#define bb_chip_i2c_slave_status_ADDRESS 0x80000714
#define bb_chip_i2c_slave_wr_data_ADDRESS 0x80000718
#define bb_chip_i2c_slave_rd_data_ADDRESS 0x8000071C
#define bb_chip_i2c_slave_irq_ADDRESS 0x80000720
#define bb_chip_i2c_slave_irq_enable_ADDRESS 0x80000720
#define bb_chip_i2c_slave_irq_pending_ADDRESS 0x80000724
#define bb_chip_i2c_slave_irq_pending_irq_ADDRESS 0x80000728
#define bb_chip_i2c_slave_irq_raw_ADDRESS 0x8000072C
#define bb_chip_mdio_master_s_ADDRESS 0x80000800
#define bb_chip_mdio_master_version_ADDRESS 0x80000800
#define bb_chip_mdio_master_timing_ADDRESS 0x80000804
#define bb_chip_mdio_master_control_ADDRESS 0x80000808
#define bb_chip_mdio_master_wr_data_ADDRESS 0x8000080C
#define bb_chip_mdio_master_rd_data_ADDRESS 0x80000810
#define bb_chip_mdio_master_irq_ADDRESS 0x80000814
#define bb_chip_mdio_master_irq_enable_ADDRESS 0x80000814
#define bb_chip_mdio_master_irq_pending_ADDRESS 0x80000818
#define bb_chip_mdio_master_irq_pending_irq_ADDRESS 0x8000081C
#define bb_chip_mdio_master_irq_raw_ADDRESS 0x80000820
#define bb_chip_spi_flash_ctrl_s_ADDRESS 0x80000900
#define bb_chip_spi_flash_ctrl_version_ADDRESS 0x80000900
#define bb_chip_spi_flash_ctrl_generic_cfg_ADDRESS 0x80000904
#define bb_chip_spi_flash_ctrl_addr_offset_ADDRESS 0x80000908
#define bb_chip_spi_flash_ctrl_addr_ADDRESS 0x8000090C
#define bb_chip_spi_flash_ctrl_basic_cfg_ADDRESS 0x80000910
#define bb_chip_spi_flash_ctrl_control_ADDRESS 0x80000914
#define bb_chip_spi_flash_ctrl_wr_data_ADDRESS 0x80000918
#define bb_chip_spi_flash_ctrl_rd_data_ADDRESS 0x8000091C
#define bb_chip_spi_flash_ctrl_in_fifo_ADDRESS 0x80000920
#define bb_chip_spi_flash_ctrl_out_fifo_ADDRESS 0x80000924
#define bb_chip_spi_flash_ctrl_mm_ADDRESS 0x80000928
#define bb_chip_spi_flash_ctrl_mm_addr_offset_ADDRESS 0x80000928
#define bb_chip_spi_flash_ctrl_mm_basic_cfg_ADDRESS 0x8000092C
#define bb_chip_spi_flash_ctrl_mm_xip_cfg_ADDRESS 0x80000930
#define bb_chip_spi_flash_ctrl_mm_suspend_cfg_ADDRESS 0x80000934
#define bb_chip_spi_flash_ctrl_irq_ADDRESS 0x80000938
#define bb_chip_spi_flash_ctrl_irq_enable_ADDRESS 0x80000938
#define bb_chip_spi_flash_ctrl_irq_pending_ADDRESS 0x8000093C
#define bb_chip_spi_flash_ctrl_irq_pending_irq_ADDRESS 0x80000940
#define bb_chip_spi_flash_ctrl_irq_raw_ADDRESS 0x80000944
#define bb_chip_gpio_ctrl_s_ADDRESS 0x80000A00
#define bb_chip_gpio_ctrl_version_ADDRESS 0x80000A00
#define bb_chip_gpio_ctrl_gpio_dir_ADDRESS 0x80000A04
#define bb_chip_gpio_ctrl_gpio_out_ADDRESS 0x80000A08
#define bb_chip_gpio_ctrl_gpio_in_ADDRESS 0x80000A0C
#define bb_chip_gpio_ctrl_irq_ADDRESS 0x80000A10
#define bb_chip_gpio_ctrl_irq_enable_ADDRESS 0x80000A10
#define bb_chip_gpio_ctrl_irq_pending_ADDRESS 0x80000A14
#define bb_chip_gpio_ctrl_irq_pending_irq_ADDRESS 0x80000A18
#define bb_chip_gpio_ctrl_irq_raw_ADDRESS 0x80000A1C
#define bb_chip_gpio_ctrl_irq_int_type_ADDRESS 0x80000A20
#define bb_chip_bb_core_s_ADDRESS 0x80001000
#define bb_chip_bb_core_version_ADDRESS 0x80001000
#define bb_chip_bb_core_cpu_freq_ADDRESS 0x80001004
#define bb_chip_bb_core_sys_config_ADDRESS 0x80001008
#define bb_chip_bb_core_feature_ADDRESS 0x8000100C
#define bb_chip_bb_core_module_version_ctrl_ADDRESS 0x80001010
#define bb_chip_bb_core_module_version_ADDRESS 0x80001014
#define bb_chip_bb_core_irq_ADDRESS 0x80001018
#define bb_chip_bb_core_irq_enable_ADDRESS 0x80001018
#define bb_chip_bb_core_irq_pending_ADDRESS 0x8000101C
#define bb_chip_bb_core_irq_pending_irq_ADDRESS 0x80001020
#define bb_chip_bb_core_irq_raw_ADDRESS 0x80001024
#define bb_chip_bb_core_cpu_comm_tx_ADDRESS 0x80001028
#define bb_chip_bb_core_cpu_comm_rx_ADDRESS 0x8000102C
#define bb_chip_bb_core_xmii_ctrl_ADDRESS 0x80001030
#define bb_chip_bb_core_rs232_ctrl_ADDRESS 0x80001034
#define bb_chip_bb_core_xgmii_idle_counter_ADDRESS 0x80001038
#define bb_chip_bb_core_xgmii_idle_counter_control_ADDRESS 0x80001038
#define bb_chip_bb_core_xgmii_idle_counter_status_ADDRESS 0x8000103C
#define bb_chip_bb_core_ahb_to_apb_ctrl_ADDRESS 0x80001040
#define bb_chip_bb_core_ge_ctrl_ADDRESS 0x80001044
#define bb_chip_bb_core_scratchpad_ADDRESS 0x80001048
#define bb_chip_bb_core_scratchpad_spr_ADDRESS 0x80001048
#define bb_chip_bb_top_s_ADDRESS 0x80002000
#define bb_chip_bb_top_version_ADDRESS 0x80002000
#define bb_chip_bb_top_sys_config_ADDRESS 0x80002004
#define bb_chip_bb_top_feature_ADDRESS 0x80002008
#define bb_chip_bb_top_icap_ADDRESS 0x8000200C
#define bb_chip_bb_top_icap_wdata_ADDRESS 0x8000200C
#define bb_chip_bb_top_icap_rdata_ADDRESS 0x80002010
#define bb_chip_bb_top_grm_ADDRESS 0x80002014
#define bb_chip_bb_top_grm_soft_rst_ctrl_ADDRESS 0x80002014
#define bb_chip_bb_top_gcm_ADDRESS 0x80002018
#define bb_chip_bb_top_gcm_control_ADDRESS 0x80002018
#define bb_chip_bb_top_gcm_status_ADDRESS 0x8000201C
#define bb_chip_bb_top_gcm_freq_det_ADDRESS 0x80002020
#define bb_chip_bb_top_gcm_freq_det_dp_ADDRESS 0x80002024
#define bb_chip_bb_top_gcm_freq_det_dp_auto_ADDRESS 0x80002028
#define bb_chip_bb_top_irq_ADDRESS 0x8000202C
#define bb_chip_bb_top_irq_enable_ADDRESS 0x8000202C
#define bb_chip_bb_top_irq_pending_ADDRESS 0x80002030
#define bb_chip_bb_top_irq_pending_irq_ADDRESS 0x80002034
#define bb_chip_bb_top_irq_raw_ADDRESS 0x80002038
#define bb_chip_bb_top_link_ctrl_ADDRESS 0x8000203C
#define bb_chip_bb_top_mdio_ctrl_ADDRESS 0x80002040
#define bb_chip_bb_top_i2c_ctrl_ADDRESS 0x80002044
#define bb_chip_bb_top_uart_ctrl_ADDRESS 0x80002048
#define bb_chip_bb_top_sfp_ctrl_ADDRESS 0x8000204C
#define bb_chip_bb_top_sfp_status_ADDRESS 0x80002050
#define bb_chip_bb_top_usb3phy_ctrl_ADDRESS 0x80002054
#define bb_chip_bb_top_ge_ctrl_ADDRESS 0x80002058
#define bb_chip_bb_top_xmii_ctrl_ADDRESS 0x8000205C
#define bb_chip_bb_top_rs232_ctrl_ADDRESS 0x80002060
#define bb_chip_bb_top_drp_ADDRESS 0x80002100
#define bb_chip_bb_top_drp_drp_ctrl_ADDRESS 0x80002100
#define bb_chip_bb_top_drp_drp_en_mask_ADDRESS 0x80002104
#define bb_chip_bb_top_drp_drp_read_data_ADDRESS 0x80002108
#define bb_chip_bb_top_dp_gtp_common_ADDRESS 0x8000210C
#define bb_chip_bb_top_dp_gtp_common_pll_ctrl_ADDRESS 0x8000210C
#define bb_chip_bb_top_dp_gtp_common_pll_status_ADDRESS 0x80002110
#define bb_chip_bb_top_dp_gtp_common_loopback_ctrl_ADDRESS 0x80002114
#define bb_chip_bb_top_dp_gtp_tx_ADDRESS 0x80002118
#define bb_chip_bb_top_dp_gtp_tx_tx_clk_ctrl_ADDRESS 0x80002118
#define bb_chip_bb_top_dp_gtp_tx_tx_rst_ctrl_ADDRESS 0x8000211C
#define bb_chip_bb_top_dp_gtp_tx_tx_status_ADDRESS 0x80002120
#define bb_chip_bb_top_dp_gtp_tx_tx_diff_ctrl_ADDRESS 0x80002124
#define bb_chip_bb_top_dp_gtp_tx_tx_post_cursor_ADDRESS 0x80002128
#define bb_chip_bb_top_dp_gtp_tx_tx_pre_cursor_ADDRESS 0x8000212C
#define bb_chip_bb_top_dp_gtp_tx_tx_prbs_ctrl_ADDRESS 0x80002130
#define bb_chip_bb_top_dp_gtp_tx_tx_misc_ctrl_ADDRESS 0x80002134
#define bb_chip_bb_top_dp_gtp_rx_ADDRESS 0x80002138
#define bb_chip_bb_top_dp_gtp_rx_rx_clk_ctrl_ADDRESS 0x80002138
#define bb_chip_bb_top_dp_gtp_rx_rx_rst_ctrl_ADDRESS 0x8000213C
#define bb_chip_bb_top_dp_gtp_rx_rx_status_ADDRESS 0x80002140
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_ctrl_ADDRESS 0x80002144
#define bb_chip_bb_top_dp_gtp_rx_rx_byte_align_status_ADDRESS 0x80002148
#define bb_chip_bb_top_dp_gtp_rx_rx_prbs_ctrl_ADDRESS 0x8000214C
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_monitor_ADDRESS 0x80002150
#define bb_chip_bb_top_dp_gtp_rx_rx_ph_slip_monitor_ADDRESS 0x80002154
#define bb_chip_bb_top_dp_gtp_rx_rx_dmonitor_out_ADDRESS 0x80002158
#define bb_chip_bb_top_dp_gtp_rx_rx_eq_ctrl_ADDRESS 0x8000215C
#define bb_chip_bb_top_dp_gtp_rx_rx_misc_ctrl_ADDRESS 0x80002160
#define bb_chip_bb_top_rxaui_ADDRESS 0x80002164
#define bb_chip_bb_top_rxaui_control_ADDRESS 0x80002164
#define bb_chip_bb_top_rxaui_status_ADDRESS 0x80002168
#define bb_chip_bb_top_rxaui_gt_rst_ctrl_ADDRESS 0x8000216C
#define bb_chip_bb_top_rxaui_gt_status_ADDRESS 0x80002170
#define bb_chip_bb_top_rxaui_gt_tx_diff_ctrl_ADDRESS 0x80002174
#define bb_chip_bb_top_rxaui_gt_tx_post_cursor_ADDRESS 0x80002178
#define bb_chip_bb_top_rxaui_gt_tx_pre_cursor_ADDRESS 0x8000217C
#define bb_chip_bb_top_rxaui_gt_rx_eq_ctrl_ADDRESS 0x80002180
#define bb_chip_bb_top_rxaui_gt_prbs_ctrl_ADDRESS 0x80002184
#define bb_chip_bb_top_rxaui_gt_misc_ctrl_ADDRESS 0x80002188
#define bb_chip_bb_top_rxaui_stats0_ADDRESS 0x8000218C
#define bb_chip_bb_top_rxaui_stats0_rd2clr_config_ADDRESS 0x8000218C
#define bb_chip_bb_top_rxaui_stats0_gt0_disp_err_ADDRESS 0x80002190
#define bb_chip_bb_top_rxaui_stats0_gt0_not_in_table_ADDRESS 0x80002194
#define bb_chip_bb_top_rxaui_stats0_gt1_disp_err_ADDRESS 0x80002198
#define bb_chip_bb_top_rxaui_stats0_gt1_not_in_table_ADDRESS 0x8000219C
#define bb_chip_bb_top_rxaui_stats0_missing_start_ADDRESS 0x800021A0
#define bb_chip_bb_top_sl_5g_ADDRESS 0x800021A4
#define bb_chip_bb_top_sl_5g_gt_rst_ctrl_ADDRESS 0x800021A4
#define bb_chip_bb_top_sl_5g_gt_tx_ctrl_ADDRESS 0x800021A8
#define bb_chip_bb_top_sl_5g_gt_rx_ctrl_ADDRESS 0x800021AC
#define bb_chip_bb_top_sl_5g_gt_misc_ctrl_ADDRESS 0x800021B0
#define bb_chip_bb_top_sl_5g_gt_status_ADDRESS 0x800021B4
#define bb_chip_bb_top_sl_5g_stats0_ADDRESS 0x800021B8
#define bb_chip_bb_top_sl_5g_stats0_rd2clr_config_ADDRESS 0x800021B8
#define bb_chip_bb_top_sl_5g_stats0_gt_disp_err_ADDRESS 0x800021BC
#define bb_chip_bb_top_sl_5g_stats0_gt_not_in_table_ADDRESS 0x800021C0
#define bb_chip_bb_top_sl_5g_stats0_gt_rxbyterealign_ADDRESS 0x800021C4
#define bb_chip_ge_uart_s_ADDRESS 0x80002500
#define bb_chip_ge_uart_version_ADDRESS 0x80002500
#define bb_chip_ge_uart_tx_fifo_ADDRESS 0x80002504
#define bb_chip_ge_uart_rx_fifo_ADDRESS 0x80002508
#define bb_chip_ge_uart_tx_data_ADDRESS 0x8000250C
#define bb_chip_ge_uart_rx_data_ADDRESS 0x80002510
#define bb_chip_ge_uart_control_ADDRESS 0x80002514
#define bb_chip_ge_uart_timeout_ADDRESS 0x80002518
#define bb_chip_ge_uart_errors_ADDRESS 0x8000251C
#define bb_chip_link_layer_tx_s_ADDRESS 0x80003000
#define bb_chip_link_layer_tx_version_ADDRESS 0x80003000
#define bb_chip_link_layer_tx_mac_ADDRESS 0x80003004
#define bb_chip_link_layer_tx_mac_version_ADDRESS 0x80003004
#define bb_chip_link_layer_tx_mac_mac_config_ADDRESS 0x80003008
#define bb_chip_link_layer_tx_mac_pa_word1_ADDRESS 0x8000300C
#define bb_chip_link_layer_tx_mac_pa_word0_ADDRESS 0x80003010
#define bb_chip_link_layer_tx_mac_sfd_ADDRESS 0x80003014
#define bb_chip_link_layer_tx_mac_da_word1_ADDRESS 0x80003018
#define bb_chip_link_layer_tx_mac_da_word0_ADDRESS 0x8000301C
#define bb_chip_link_layer_tx_mac_sa__word1_ADDRESS 0x80003020
#define bb_chip_link_layer_tx_mac_sa_word0_ADDRESS 0x80003024
#define bb_chip_link_layer_tx_mac_lt_ADDRESS 0x80003028
#define bb_chip_link_layer_tx_mac_idle_ADDRESS 0x8000302C
#define bb_chip_link_layer_tx_mac_frm_rate_ADDRESS 0x80003030
#define bb_chip_link_layer_tx_mac_bandwidth_gap_ADDRESS 0x80003034
#define bb_chip_link_layer_tx_mac_bandwidth_limit_ADDRESS 0x80003038
#define bb_chip_link_layer_tx_mac_stats0_ADDRESS 0x8000303C
#define bb_chip_link_layer_tx_mac_stats0_rd2clr_config_ADDRESS 0x8000303C
#define bb_chip_link_layer_tx_mac_stats0_pause_frame_ADDRESS 0x80003040
#define bb_chip_link_layer_tx_mac_stats0_out_eop_ADDRESS 0x80003044
#define bb_chip_link_layer_tx_mac_stats0_out_sop_ADDRESS 0x80003048
#define bb_chip_link_layer_tx_mac_stats0_stall_ptp_in_ADDRESS 0x8000304C
#define bb_chip_link_layer_tx_mac_stats0_in_eop_ADDRESS 0x80003050
#define bb_chip_link_layer_tx_mac_stats0_in_sop_ADDRESS 0x80003054
#define bb_chip_link_layer_tx_mac_stats0_fsm_count_beyond_ptp_ADDRESS 0x80003058
#define bb_chip_link_layer_tx_mac_stats0_fsm_rollover_ADDRESS 0x8000305C
#define bb_chip_link_layer_tx_media_rs_ADDRESS 0x80003060
#define bb_chip_link_layer_tx_media_rs_version_ADDRESS 0x80003060
#define bb_chip_link_layer_tx_media_rs_enable_ADDRESS 0x80003064
#define bb_chip_link_layer_tx_media_rs_pfifo_ADDRESS 0x80003068
#define bb_chip_link_layer_tx_media_rs_pfifo_version_ADDRESS 0x80003068
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_ADDRESS 0x8000306C
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_ADDRESS 0x8000306C
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_clear_ADDRESS 0x8000306C
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_mode_ADDRESS 0x80003070
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_config0_notify_limit_ADDRESS 0x80003074
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_ADDRESS 0x80003078
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_rd2clr_config_ADDRESS 0x80003078
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_nfifo_dcount_ADDRESS 0x8000307C
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pfifo_dcount_ADDRESS 0x80003080
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80003084
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_fifo_full_err_ADDRESS 0x80003088
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_err_ADDRESS 0x8000308C
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_pkt_sop_err_ADDRESS 0x80003090
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_wflush_act_ADDRESS 0x80003094
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_rd_ADDRESS 0x80003098
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_drp_pkt_wr_ADDRESS 0x8000309C
#define bb_chip_link_layer_tx_media_rs_pfifo_write_engine_stats0_flow_ctrl_ADDRESS 0x800030A0
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_ADDRESS 0x800030A4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_ADDRESS 0x800030A4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_config0_clear_ADDRESS 0x800030A4
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_ADDRESS 0x800030A8
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rd2clr_config_ADDRESS 0x800030A8
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_rflush_act_ADDRESS 0x800030AC
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_drp_pkt_ADDRESS 0x800030B0
#define bb_chip_link_layer_tx_media_rs_pfifo_read_engine_stats0_flow_ctrl_ADDRESS 0x800030B4
#define bb_chip_link_layer_tx_media_rs_stats0_ADDRESS 0x800030B8
#define bb_chip_link_layer_tx_media_rs_stats0_rd2clr_config_ADDRESS 0x800030B8
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_eop_ADDRESS 0x800030BC
#define bb_chip_link_layer_tx_media_rs_stats0_inbuff_sop_ADDRESS 0x800030C0
#define bb_chip_link_layer_tx_media_rs_stats1_ADDRESS 0x800030C4
#define bb_chip_link_layer_tx_media_rs_stats1_rd2clr_config_ADDRESS 0x800030C4
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_eop_ADDRESS 0x800030C8
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_outbuff_sop_ADDRESS 0x800030CC
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_done_ADDRESS 0x800030D0
#define bb_chip_link_layer_tx_media_rs_stats1_gmii_start_ADDRESS 0x800030D4
#define bb_chip_link_layer_tx_media_rs_stats2_ADDRESS 0x800030D8
#define bb_chip_link_layer_tx_media_rs_stats2_rd2clr_config_ADDRESS 0x800030D8
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_eop_ADDRESS 0x800030DC
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_outbuff_sop_ADDRESS 0x800030E0
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_done_ADDRESS 0x800030E4
#define bb_chip_link_layer_tx_media_rs_stats2_xgmii_start_ADDRESS 0x800030E8
#define bb_chip_link_layer_tx_ptp_guard_ADDRESS 0x800030EC
#define bb_chip_link_layer_tx_ptp_guard_version_ADDRESS 0x800030EC
#define bb_chip_link_layer_tx_ptp_guard_config0_ADDRESS 0x800030F0
#define bb_chip_link_layer_tx_ptp_guard_config0_fix_ptp_violations_ADDRESS 0x800030F0
#define bb_chip_link_layer_tx_ptp_guard_config0_max_cycles_ADDRESS 0x800030F4
#define bb_chip_link_layer_tx_ptp_guard_stats0_ADDRESS 0x800030F8
#define bb_chip_link_layer_tx_ptp_guard_stats0_rd2clr_config_ADDRESS 0x800030F8
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_sop_err_ADDRESS 0x800030FC
#define bb_chip_link_layer_tx_ptp_guard_stats0_missing_eop_err_ADDRESS 0x80003100
#define bb_chip_link_layer_tx_ptp_guard_stats0_max_cycle_err_ADDRESS 0x80003104
#define bb_chip_link_layer_tx_ptp_guard_irq0_ADDRESS 0x80003108
#define bb_chip_link_layer_tx_ptp_guard_irq0_enable_ADDRESS 0x80003108
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_ADDRESS 0x8000310C
#define bb_chip_link_layer_tx_ptp_guard_irq0_pending_irq_ADDRESS 0x80003110
#define bb_chip_link_layer_tx_ptp_guard_irq0_raw_ADDRESS 0x80003114
#define bb_chip_link_layer_tx_self_test_support_ADDRESS 0x80003118
#define bb_chip_link_layer_tx_self_test_support_set_up_ADDRESS 0x80003118
#define bb_chip_link_layer_tx_self_test_support_media_gen_ADDRESS 0x8000311C
#define bb_chip_link_layer_tx_self_test_support_media_gen_version_ADDRESS 0x8000311C
#define bb_chip_link_layer_tx_self_test_support_media_gen_mca_mgen_ADDRESS 0x80003120
#define bb_chip_link_layer_tx_self_test_support_framer_ADDRESS 0x80003124
#define bb_chip_link_layer_tx_self_test_support_framer_max_byte_ADDRESS 0x80003124
#define bb_chip_link_layer_tx_self_test_support_framer_mac_dg_type_ADDRESS 0x80003128
#define bb_chip_link_layer_tx_self_test_support_framer_timer_wait_ADDRESS 0x8000312C
#define bb_chip_link_layer_tx_self_test_support_framer_mtu_size_ADDRESS 0x80003130
#define bb_chip_link_layer_tx_self_test_support_framer_max_mtu_size_ADDRESS 0x80003134
#define bb_chip_link_layer_tx_control_ADDRESS 0x80003138
#define bb_chip_link_layer_tx_irq0_ADDRESS 0x8000313C
#define bb_chip_link_layer_tx_irq0_enable_ADDRESS 0x8000313C
#define bb_chip_link_layer_tx_irq0_pending_ADDRESS 0x80003140
#define bb_chip_link_layer_tx_irq0_pending_irq_ADDRESS 0x80003144
#define bb_chip_link_layer_tx_irq0_raw_ADDRESS 0x80003148
#define bb_chip_link_layer_rx_s_ADDRESS 0x80003400
#define bb_chip_link_layer_rx_version_ADDRESS 0x80003400
#define bb_chip_link_layer_rx_mac_client_interface_ADDRESS 0x80003404
#define bb_chip_link_layer_rx_mac_client_interface_version_ADDRESS 0x80003404
#define bb_chip_link_layer_rx_mac_client_interface_client_array_ADDRESS 0x80003408
#define bb_chip_link_layer_rx_mac_client_interface_client_array_client_config_ADDRESS 0x80003408
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word1_ADDRESS 0x8000340C
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_word0_ADDRESS 0x80003410
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word1_ADDRESS 0x80003414
#define bb_chip_link_layer_rx_mac_client_interface_client_array_da_filter_mask_word0_ADDRESS 0x80003418
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word1_ADDRESS 0x8000341C
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_word0_ADDRESS 0x80003420
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word1_ADDRESS 0x80003424
#define bb_chip_link_layer_rx_mac_client_interface_client_array_sa_filter_mask_word0_ADDRESS 0x80003428
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_ADDRESS 0x8000342C
#define bb_chip_link_layer_rx_mac_client_interface_client_array_lt_filter_mask_ADDRESS 0x80003430
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_ADDRESS 0x80003434
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_rd2clr_config_ADDRESS 0x80003434
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_eop_ADDRESS 0x80003438
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_out_sop_ADDRESS 0x8000343C
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_filter_fifo_overflow_ADDRESS 0x80003440
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_md_ADDRESS 0x80003444
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_lt_ADDRESS 0x80003448
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_sa_ADDRESS 0x8000344C
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_drop_pkt_da_ADDRESS 0x80003450
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_one_cycle_pkt_ADDRESS 0x80003454
#define bb_chip_link_layer_rx_mac_client_interface_client_array_stats0_in_fsm_rollover_ADDRESS 0x80003458
#define bb_chip_link_layer_rx_mac_ADDRESS 0x8000345C
#define bb_chip_link_layer_rx_mac_version_ADDRESS 0x8000345C
#define bb_chip_link_layer_rx_mac_mac_config_ADDRESS 0x80003460
#define bb_chip_link_layer_rx_mac_da_word1_ADDRESS 0x80003464
#define bb_chip_link_layer_rx_mac_da_word0_ADDRESS 0x80003468
#define bb_chip_link_layer_rx_mac_pfifo_ADDRESS 0x8000346C
#define bb_chip_link_layer_rx_mac_pfifo_version_ADDRESS 0x8000346C
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_ADDRESS 0x80003470
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_ADDRESS 0x80003470
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_clear_ADDRESS 0x80003470
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_mode_ADDRESS 0x80003474
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_config0_notify_limit_ADDRESS 0x80003478
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_ADDRESS 0x8000347C
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_rd2clr_config_ADDRESS 0x8000347C
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_nfifo_dcount_ADDRESS 0x80003480
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pfifo_dcount_ADDRESS 0x80003484
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80003488
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_fifo_full_err_ADDRESS 0x8000348C
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_err_ADDRESS 0x80003490
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_pkt_sop_err_ADDRESS 0x80003494
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_wflush_act_ADDRESS 0x80003498
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_rd_ADDRESS 0x8000349C
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_drp_pkt_wr_ADDRESS 0x800034A0
#define bb_chip_link_layer_rx_mac_pfifo_write_engine_stats0_flow_ctrl_ADDRESS 0x800034A4
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_ADDRESS 0x800034A8
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_ADDRESS 0x800034A8
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_config0_clear_ADDRESS 0x800034A8
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_ADDRESS 0x800034AC
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rd2clr_config_ADDRESS 0x800034AC
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_rflush_act_ADDRESS 0x800034B0
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_drp_pkt_ADDRESS 0x800034B4
#define bb_chip_link_layer_rx_mac_pfifo_read_engine_stats0_flow_ctrl_ADDRESS 0x800034B8
#define bb_chip_link_layer_rx_mac_stats0_ADDRESS 0x800034BC
#define bb_chip_link_layer_rx_mac_stats0_rd2clr_config_ADDRESS 0x800034BC
#define bb_chip_link_layer_rx_mac_stats0_pause_frame_ADDRESS 0x800034C0
#define bb_chip_link_layer_rx_mac_stats0_out_eop_ADDRESS 0x800034C4
#define bb_chip_link_layer_rx_mac_stats0_out_sop_ADDRESS 0x800034C8
#define bb_chip_link_layer_rx_mac_stats0_inbuf_eop_ADDRESS 0x800034CC
#define bb_chip_link_layer_rx_mac_stats0_inbuf_sop_ADDRESS 0x800034D0
#define bb_chip_link_layer_rx_mac_stats0_in_eop_ADDRESS 0x800034D4
#define bb_chip_link_layer_rx_mac_stats0_in_sop_ADDRESS 0x800034D8
#define bb_chip_link_layer_rx_mac_stats0_crc_err_ADDRESS 0x800034DC
#define bb_chip_link_layer_rx_mac_stats0_out_fsm_rollover_ADDRESS 0x800034E0
#define bb_chip_link_layer_rx_mac_stats0_in_fsm_rollover_ADDRESS 0x800034E4
#define bb_chip_link_layer_rx_mac_stats0_dbg_seq_num_in_err_ADDRESS 0x800034E8
#define bb_chip_link_layer_rx_media_rs_ADDRESS 0x800034EC
#define bb_chip_link_layer_rx_media_rs_version_ADDRESS 0x800034EC
#define bb_chip_link_layer_rx_media_rs_enable_ADDRESS 0x800034F0
#define bb_chip_link_layer_rx_media_rs_pa_word1_ADDRESS 0x800034F4
#define bb_chip_link_layer_rx_media_rs_pa_word0_ADDRESS 0x800034F8
#define bb_chip_link_layer_rx_media_rs_sfd_ADDRESS 0x800034FC
#define bb_chip_link_layer_rx_media_rs_idle_ADDRESS 0x80003500
#define bb_chip_link_layer_rx_media_rs_stats0_ADDRESS 0x80003504
#define bb_chip_link_layer_rx_media_rs_stats0_rd2clr_config_ADDRESS 0x80003504
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_eop_ADDRESS 0x80003508
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_out_sop_ADDRESS 0x8000350C
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_data_error_ADDRESS 0x80003510
#define bb_chip_link_layer_rx_media_rs_stats0_gmii_missing_sfd_ADDRESS 0x80003514
#define bb_chip_link_layer_rx_media_rs_stats1_ADDRESS 0x80003518
#define bb_chip_link_layer_rx_media_rs_stats1_rd2clr_config_ADDRESS 0x80003518
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_eop_ADDRESS 0x8000351C
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_out_sop_ADDRESS 0x80003520
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_data_error_ADDRESS 0x80003524
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_missing_sfd_ADDRESS 0x80003528
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_wrong_lane_start_ADDRESS 0x8000352C
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_ok_ADDRESS 0x80003530
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_local_fault_ADDRESS 0x80003534
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_remote_fault_ADDRESS 0x80003538
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_link_int_ADDRESS 0x8000353C
#define bb_chip_link_layer_rx_media_rs_stats1_xgmii_runt_frm_detected_ADDRESS 0x80003540
#define bb_chip_link_layer_rx_ptp_guard_ADDRESS 0x80003544
#define bb_chip_link_layer_rx_ptp_guard_version_ADDRESS 0x80003544
#define bb_chip_link_layer_rx_ptp_guard_config0_ADDRESS 0x80003548
#define bb_chip_link_layer_rx_ptp_guard_config0_fix_ptp_violations_ADDRESS 0x80003548
#define bb_chip_link_layer_rx_ptp_guard_config0_max_cycles_ADDRESS 0x8000354C
#define bb_chip_link_layer_rx_ptp_guard_stats0_ADDRESS 0x80003550
#define bb_chip_link_layer_rx_ptp_guard_stats0_rd2clr_config_ADDRESS 0x80003550
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_sop_err_ADDRESS 0x80003554
#define bb_chip_link_layer_rx_ptp_guard_stats0_missing_eop_err_ADDRESS 0x80003558
#define bb_chip_link_layer_rx_ptp_guard_stats0_max_cycle_err_ADDRESS 0x8000355C
#define bb_chip_link_layer_rx_ptp_guard_irq0_ADDRESS 0x80003560
#define bb_chip_link_layer_rx_ptp_guard_irq0_enable_ADDRESS 0x80003560
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_ADDRESS 0x80003564
#define bb_chip_link_layer_rx_ptp_guard_irq0_pending_irq_ADDRESS 0x80003568
#define bb_chip_link_layer_rx_ptp_guard_irq0_raw_ADDRESS 0x8000356C
#define bb_chip_link_layer_rx_self_test_support_ADDRESS 0x80003570
#define bb_chip_link_layer_rx_self_test_support_set_up_ADDRESS 0x80003570
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_ADDRESS 0x80003574
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_version_ADDRESS 0x80003574
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_ADDRESS 0x80003578
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_rd2clr_config_ADDRESS 0x80003578
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_lane_err_ADDRESS 0x8000357C
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_error_count_ADDRESS 0x80003580
#define bb_chip_link_layer_rx_self_test_support_media_analyzer_stats0_pkt_count_ADDRESS 0x80003584
#define bb_chip_link_layer_rx_self_test_support_de_framer_ADDRESS 0x80003588
#define bb_chip_link_layer_rx_self_test_support_de_framer_jumbo_lt_code_ADDRESS 0x80003588
#define bb_chip_link_layer_rx_irq0_ADDRESS 0x8000358C
#define bb_chip_link_layer_rx_irq0_enable_ADDRESS 0x8000358C
#define bb_chip_link_layer_rx_irq0_pending_ADDRESS 0x80003590
#define bb_chip_link_layer_rx_irq0_pending_irq_ADDRESS 0x80003594
#define bb_chip_link_layer_rx_irq0_raw_ADDRESS 0x80003598
#define bb_chip_layer3_tx_s_ADDRESS 0x80003800
#define bb_chip_layer3_tx_version_ADDRESS 0x80003800
#define bb_chip_layer3_tx_eth_framer_ADDRESS 0x80003804
#define bb_chip_layer3_tx_eth_framer_version_ADDRESS 0x80003804
#define bb_chip_layer3_tx_eth_framer_config0_ADDRESS 0x80003808
#define bb_chip_layer3_tx_eth_framer_config0_max_byte_ADDRESS 0x80003808
#define bb_chip_layer3_tx_eth_framer_config0_mac_dg_type_ADDRESS 0x8000380C
#define bb_chip_layer3_tx_eth_framer_config0_timer_wait_ADDRESS 0x80003810
#define bb_chip_layer3_tx_eth_framer_config0_mtu_size_ADDRESS 0x80003814
#define bb_chip_layer3_tx_eth_framer_config0_max_mtu_size_ADDRESS 0x80003818
#define bb_chip_layer3_tx_eth_framer_stats0_ADDRESS 0x8000381C
#define bb_chip_layer3_tx_eth_framer_stats0_rd2clr_config_ADDRESS 0x8000381C
#define bb_chip_layer3_tx_eth_framer_stats0_out_eop_ADDRESS 0x80003820
#define bb_chip_layer3_tx_eth_framer_stats0_out_sop_ADDRESS 0x80003824
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_eop_ADDRESS 0x80003828
#define bb_chip_layer3_tx_eth_framer_stats0_inbuff_sop_ADDRESS 0x8000382C
#define bb_chip_layer3_tx_eth_framer_stats0_in_eop_ADDRESS 0x80003830
#define bb_chip_layer3_tx_eth_framer_stats0_in_sop_ADDRESS 0x80003834
#define bb_chip_layer3_tx_eth_framer_stats0_mac_dg_size_err_ADDRESS 0x80003838
#define bb_chip_layer3_tx_eth_framer_pfifo_ADDRESS 0x8000383C
#define bb_chip_layer3_tx_eth_framer_pfifo_version_ADDRESS 0x8000383C
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_ADDRESS 0x80003840
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_ADDRESS 0x80003840
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_clear_ADDRESS 0x80003840
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_mode_ADDRESS 0x80003844
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_config0_notify_limit_ADDRESS 0x80003848
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_ADDRESS 0x8000384C
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_rd2clr_config_ADDRESS 0x8000384C
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_nfifo_dcount_ADDRESS 0x80003850
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pfifo_dcount_ADDRESS 0x80003854
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80003858
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_fifo_full_err_ADDRESS 0x8000385C
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_err_ADDRESS 0x80003860
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_pkt_sop_err_ADDRESS 0x80003864
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_wflush_act_ADDRESS 0x80003868
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_rd_ADDRESS 0x8000386C
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_drp_pkt_wr_ADDRESS 0x80003870
#define bb_chip_layer3_tx_eth_framer_pfifo_write_engine_stats0_flow_ctrl_ADDRESS 0x80003874
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_ADDRESS 0x80003878
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_ADDRESS 0x80003878
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_config0_clear_ADDRESS 0x80003878
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_ADDRESS 0x8000387C
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rd2clr_config_ADDRESS 0x8000387C
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_rflush_act_ADDRESS 0x80003880
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_drp_pkt_ADDRESS 0x80003884
#define bb_chip_layer3_tx_eth_framer_pfifo_read_engine_stats0_flow_ctrl_ADDRESS 0x80003888
#define bb_chip_layer3_tx_eth_framer_ptp_guard_ADDRESS 0x8000388C
#define bb_chip_layer3_tx_eth_framer_ptp_guard_version_ADDRESS 0x8000388C
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_ADDRESS 0x80003890
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_fix_ptp_violations_ADDRESS 0x80003890
#define bb_chip_layer3_tx_eth_framer_ptp_guard_config0_max_cycles_ADDRESS 0x80003894
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_ADDRESS 0x80003898
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_rd2clr_config_ADDRESS 0x80003898
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_sop_err_ADDRESS 0x8000389C
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_missing_eop_err_ADDRESS 0x800038A0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_stats0_max_cycle_err_ADDRESS 0x800038A4
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_ADDRESS 0x800038A8
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_enable_ADDRESS 0x800038A8
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_ADDRESS 0x800038AC
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_pending_irq_ADDRESS 0x800038B0
#define bb_chip_layer3_tx_eth_framer_ptp_guard_irq0_raw_ADDRESS 0x800038B4
#define bb_chip_layer3_tx_irq0_ADDRESS 0x800038B8
#define bb_chip_layer3_tx_irq0_enable_ADDRESS 0x800038B8
#define bb_chip_layer3_tx_irq0_pending_ADDRESS 0x800038BC
#define bb_chip_layer3_tx_irq0_pending_irq_ADDRESS 0x800038C0
#define bb_chip_layer3_tx_irq0_raw_ADDRESS 0x800038C4
#define bb_chip_layer3_rx_s_ADDRESS 0x80003C00
#define bb_chip_layer3_rx_version_ADDRESS 0x80003C00
#define bb_chip_layer3_rx_eth_de_framer_ADDRESS 0x80003C04
#define bb_chip_layer3_rx_eth_de_framer_version_ADDRESS 0x80003C04
#define bb_chip_layer3_rx_eth_de_framer_config0_ADDRESS 0x80003C08
#define bb_chip_layer3_rx_eth_de_framer_config0_jumbo_lt_code_ADDRESS 0x80003C08
#define bb_chip_layer3_rx_eth_de_framer_stats0_ADDRESS 0x80003C0C
#define bb_chip_layer3_rx_eth_de_framer_stats0_rd2clr_config_ADDRESS 0x80003C0C
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_eop_ADDRESS 0x80003C10
#define bb_chip_layer3_rx_eth_de_framer_stats0_out_sop_ADDRESS 0x80003C14
#define bb_chip_layer3_rx_eth_de_framer_stats0_non_eth_pkt_ADDRESS 0x80003C18
#define bb_chip_layer3_rx_ptp_guard_ADDRESS 0x80003C1C
#define bb_chip_layer3_rx_ptp_guard_version_ADDRESS 0x80003C1C
#define bb_chip_layer3_rx_ptp_guard_config0_ADDRESS 0x80003C20
#define bb_chip_layer3_rx_ptp_guard_config0_fix_ptp_violations_ADDRESS 0x80003C20
#define bb_chip_layer3_rx_ptp_guard_config0_max_cycles_ADDRESS 0x80003C24
#define bb_chip_layer3_rx_ptp_guard_stats0_ADDRESS 0x80003C28
#define bb_chip_layer3_rx_ptp_guard_stats0_rd2clr_config_ADDRESS 0x80003C28
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_sop_err_ADDRESS 0x80003C2C
#define bb_chip_layer3_rx_ptp_guard_stats0_missing_eop_err_ADDRESS 0x80003C30
#define bb_chip_layer3_rx_ptp_guard_stats0_max_cycle_err_ADDRESS 0x80003C34
#define bb_chip_layer3_rx_ptp_guard_irq0_ADDRESS 0x80003C38
#define bb_chip_layer3_rx_ptp_guard_irq0_enable_ADDRESS 0x80003C38
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_ADDRESS 0x80003C3C
#define bb_chip_layer3_rx_ptp_guard_irq0_pending_irq_ADDRESS 0x80003C40
#define bb_chip_layer3_rx_ptp_guard_irq0_raw_ADDRESS 0x80003C44
#define bb_chip_layer3_rx_irq0_ADDRESS 0x80003C48
#define bb_chip_layer3_rx_irq0_enable_ADDRESS 0x80003C48
#define bb_chip_layer3_rx_irq0_pending_ADDRESS 0x80003C4C
#define bb_chip_layer3_rx_irq0_pending_irq_ADDRESS 0x80003C50
#define bb_chip_layer3_rx_irq0_raw_ADDRESS 0x80003C54
#define bb_chip_mca_core_s_ADDRESS 0x80003D00
#define bb_chip_mca_core_version_ADDRESS 0x80003D00
#define bb_chip_mca_core_control0_ADDRESS 0x80003D04
#define bb_chip_mca_core_status0_ADDRESS 0x80003D08
#define bb_chip_mca_core_link_ADDRESS 0x80003D0C
#define bb_chip_mca_core_link_control0_ADDRESS 0x80003D0C
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_pol_ADDRESS 0x80003D0C
#define bb_chip_mca_core_link_control0_ltssm_pkt_mngt_rec_ADDRESS 0x80003D10
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_ADDRESS 0x80003D14
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_act_rpt_ADDRESS 0x80003D14
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_rpt_ADDRESS 0x80003D18
#define bb_chip_mca_core_link_control0_ltssm_pol_tmr_idle_ADDRESS 0x80003D1C
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_ADDRESS 0x80003D20
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_act_rpt_ADDRESS 0x80003D20
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_rpt_ADDRESS 0x80003D24
#define bb_chip_mca_core_link_control0_ltssm_rec_tmr_idle_ADDRESS 0x80003D28
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_ADDRESS 0x80003D2C
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0ltimeout_ADDRESS 0x80003D2C
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_pnd_ADDRESS 0x80003D30
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_crd_ADDRESS 0x80003D34
#define bb_chip_mca_core_link_control0_ltssm_u0_tmr_u0rectimeout_ADDRESS 0x80003D38
#define bb_chip_mca_core_link_control0_test_ADDRESS 0x80003D3C
#define bb_chip_mca_core_link_control0_test_latency_ADDRESS 0x80003D3C
#define bb_chip_mca_core_link_status0_ADDRESS 0x80003D40
#define bb_chip_mca_core_link_status0_cfg_ADDRESS 0x80003D40
#define bb_chip_mca_core_tx_ADDRESS 0x80003D44
#define bb_chip_mca_core_tx_control0_ADDRESS 0x80003D44
#define bb_chip_mca_core_tx_control0_dp_ADDRESS 0x80003D44
#define bb_chip_mca_core_tx_control0_bw_sample_timer_ADDRESS 0x80003D48
#define bb_chip_mca_core_tx_stats0_ADDRESS 0x80003D4C
#define bb_chip_mca_core_tx_stats0_rd2clr_config_ADDRESS 0x80003D4C
#define bb_chip_mca_core_tx_stats0_pfifo_ADDRESS 0x80003D50
#define bb_chip_mca_core_tx_stats0_nfifo_ADDRESS 0x80003D54
#define bb_chip_mca_core_tx_stats0_cmd_fifo_dcount_ADDRESS 0x80003D58
#define bb_chip_mca_core_tx_stats0_data_pkt_nrtry_ADDRESS 0x80003D5C
#define bb_chip_mca_core_tx_stats0_data_pkt_rtry_ADDRESS 0x80003D60
#define bb_chip_mca_core_tx_stats0_idle_ADDRESS 0x80003D64
#define bb_chip_mca_core_tx_stats0_ts2_ADDRESS 0x80003D68
#define bb_chip_mca_core_tx_stats0_ts1_ADDRESS 0x80003D6C
#define bb_chip_mca_core_tx_stats0_lbad_ADDRESS 0x80003D70
#define bb_chip_mca_core_tx_stats0_lrtry_ADDRESS 0x80003D74
#define bb_chip_mca_core_tx_stats0_lcrd_ADDRESS 0x80003D78
#define bb_chip_mca_core_tx_stats0_lgood_ADDRESS 0x80003D7C
#define bb_chip_mca_core_tx_stats0_plu_ADDRESS 0x80003D80
#define bb_chip_mca_core_tx_stats0_bandwidth_ADDRESS 0x80003D84
#define bb_chip_mca_core_rx_ADDRESS 0x80003D88
#define bb_chip_mca_core_rx_control0_ADDRESS 0x80003D88
#define bb_chip_mca_core_rx_control0_dp_ADDRESS 0x80003D88
#define bb_chip_mca_core_rx_control0_rx_cmd_fifo_flc_ADDRESS 0x80003D8C
#define bb_chip_mca_core_rx_stats0_ADDRESS 0x80003D90
#define bb_chip_mca_core_rx_stats0_rd2clr_config_ADDRESS 0x80003D90
#define bb_chip_mca_core_rx_stats0_cmd_fifo_dcount_ADDRESS 0x80003D94
#define bb_chip_mca_core_rx_stats0_data_pkt_nrtry_ADDRESS 0x80003D98
#define bb_chip_mca_core_rx_stats0_data_pkt_rtry_ADDRESS 0x80003D9C
#define bb_chip_mca_core_rx_stats0_idle_ADDRESS 0x80003DA0
#define bb_chip_mca_core_rx_stats0_ts2_ADDRESS 0x80003DA4
#define bb_chip_mca_core_rx_stats0_ts1_ADDRESS 0x80003DA8
#define bb_chip_mca_core_rx_stats0_lbad_ADDRESS 0x80003DAC
#define bb_chip_mca_core_rx_stats0_lrtry_ADDRESS 0x80003DB0
#define bb_chip_mca_core_rx_stats0_lcrd_ADDRESS 0x80003DB4
#define bb_chip_mca_core_rx_stats0_lgood_ADDRESS 0x80003DB8
#define bb_chip_mca_core_rx_stats0_plu_ADDRESS 0x80003DBC
#define bb_chip_mca_core_rx_stats0_rx_cmd_fifo_flc_ADDRESS 0x80003DC0
#define bb_chip_mca_core_irq0_ADDRESS 0x80003DC4
#define bb_chip_mca_core_irq0_enable_ADDRESS 0x80003DC4
#define bb_chip_mca_core_irq0_pending_ADDRESS 0x80003DC8
#define bb_chip_mca_core_irq0_pending_irq_ADDRESS 0x80003DCC
#define bb_chip_mca_core_irq0_raw_ADDRESS 0x80003DD0
#define bb_chip_mca_channel_s_ADDRESS 0x80003E00
#define bb_chip_mca_channel_version_ADDRESS 0x80003E00
#define bb_chip_mca_channel_control0_ADDRESS 0x80003E04
#define bb_chip_mca_channel_status0_ADDRESS 0x80003E08
#define bb_chip_mca_channel_link_ADDRESS 0x80003E0C
#define bb_chip_mca_channel_link_control0_ADDRESS 0x80003E0C
#define bb_chip_mca_channel_link_control0_ltssm_ADDRESS 0x80003E0C
#define bb_chip_mca_channel_link_control0_test_ADDRESS 0x80003E10
#define bb_chip_mca_channel_link_status0_ADDRESS 0x80003E14
#define bb_chip_mca_channel_link_status0_ltssm_ADDRESS 0x80003E14
#define bb_chip_mca_channel_link_stats0_ADDRESS 0x80003E18
#define bb_chip_mca_channel_link_stats0_rd2clr_config_ADDRESS 0x80003E18
#define bb_chip_mca_channel_link_stats0_u0_to_rec_ADDRESS 0x80003E1C
#define bb_chip_mca_channel_link_stats0_pol_fail_ADDRESS 0x80003E20
#define bb_chip_mca_channel_link_stats0_tx_frm_ADDRESS 0x80003E24
#define bb_chip_mca_channel_link_stats0_tx_mcup_ADDRESS 0x80003E28
#define bb_chip_mca_channel_link_stats0_rx_frm_ADDRESS 0x80003E2C
#define bb_chip_mca_channel_link_stats0_rx_mcup_ADDRESS 0x80003E30
#define bb_chip_mca_channel_link_stats0_latency_ADDRESS 0x80003E34
#define bb_chip_mca_channel_tx_ADDRESS 0x80003E38
#define bb_chip_mca_channel_tx_control0_ADDRESS 0x80003E38
#define bb_chip_mca_channel_tx_control0_dp_ADDRESS 0x80003E38
#define bb_chip_mca_channel_tx_control0_rtry_buf_ADDRESS 0x80003E3C
#define bb_chip_mca_channel_tx_control0_fifo_hys_ADDRESS 0x80003E40
#define bb_chip_mca_channel_tx_control0_bandwidth_limit_ADDRESS 0x80003E44
#define bb_chip_mca_channel_tx_stats0_ADDRESS 0x80003E48
#define bb_chip_mca_channel_tx_stats0_rd2clr_config_ADDRESS 0x80003E48
#define bb_chip_mca_channel_tx_stats0_cmd_fifo_ADDRESS 0x80003E4C
#define bb_chip_mca_channel_tx_stats0_dp_pfifo_ADDRESS 0x80003E50
#define bb_chip_mca_channel_tx_stats0_dp_nfifo_ADDRESS 0x80003E54
#define bb_chip_mca_channel_tx_stats0_dp_fifo_rd_drp_pkt_ADDRESS 0x80003E58
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_drp_pkt_ADDRESS 0x80003E5C
#define bb_chip_mca_channel_tx_stats0_dp_fifo_wr_pkt_err_ADDRESS 0x80003E60
#define bb_chip_mca_channel_tx_stats0_dp_fifo_fifo_full_err_ADDRESS 0x80003E64
#define bb_chip_mca_channel_tx_stats0_dp_fifo_pkt_max_err_ADDRESS 0x80003E68
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_sop_err_ADDRESS 0x80003E6C
#define bb_chip_mca_channel_tx_stats0_dp_grd_no_eop_err_ADDRESS 0x80003E70
#define bb_chip_mca_channel_tx_stats0_dp_grd_max_err_ADDRESS 0x80003E74
#define bb_chip_mca_channel_tx_stats0_bandwidth_ADDRESS 0x80003E78
#define bb_chip_mca_channel_rx_ADDRESS 0x80003E7C
#define bb_chip_mca_channel_rx_control0_ADDRESS 0x80003E7C
#define bb_chip_mca_channel_rx_control0_dp_ADDRESS 0x80003E7C
#define bb_chip_mca_channel_rx_control0_ntfy_mode_ADDRESS 0x80003E80
#define bb_chip_mca_channel_rx_control0_hys_lo_ADDRESS 0x80003E84
#define bb_chip_mca_channel_rx_control0_hys_hi_ADDRESS 0x80003E88
#define bb_chip_mca_channel_rx_stats0_ADDRESS 0x80003E8C
#define bb_chip_mca_channel_rx_stats0_rd2clr_config_ADDRESS 0x80003E8C
#define bb_chip_mca_channel_rx_stats0_dp_pfifo_ADDRESS 0x80003E90
#define bb_chip_mca_channel_rx_stats0_dp_nfifo_ADDRESS 0x80003E94
#define bb_chip_mca_channel_rx_stats0_dp_fifo_rd_drp_pkt_ADDRESS 0x80003E98
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_drp_pkt_ADDRESS 0x80003E9C
#define bb_chip_mca_channel_rx_stats0_dp_fifo_wr_pkt_err_ADDRESS 0x80003EA0
#define bb_chip_mca_channel_rx_stats0_dp_fifo_fifo_full_err_ADDRESS 0x80003EA4
#define bb_chip_mca_channel_rx_stats0_dp_fifo_pkt_max_err_ADDRESS 0x80003EA8
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_sop_err_ADDRESS 0x80003EAC
#define bb_chip_mca_channel_rx_stats0_dp_grd_no_eop_err_ADDRESS 0x80003EB0
#define bb_chip_mca_channel_rx_stats0_dp_grd_max_err_ADDRESS 0x80003EB4
#define bb_chip_mca_channel_irq0_ADDRESS 0x80003EB8
#define bb_chip_mca_channel_irq0_enable_ADDRESS 0x80003EB8
#define bb_chip_mca_channel_irq0_pending_ADDRESS 0x80003EBC
#define bb_chip_mca_channel_irq0_pending_irq_ADDRESS 0x80003EC0
#define bb_chip_mca_channel_irq0_raw_ADDRESS 0x80003EC4
#define bb_chip_mca_channel_test_mode_ADDRESS 0x80003EC8
#define bb_chip_mca_channel_test_mode_tx_ADDRESS 0x80003EC8
#define bb_chip_mca_channel_test_mode_tx_version_ADDRESS 0x80003EC8
#define bb_chip_mca_channel_test_mode_tx_config0_ADDRESS 0x80003ECC
#define bb_chip_mca_channel_test_mode_tx_config0_iwg_cnt_ADDRESS 0x80003ECC
#define bb_chip_mca_channel_test_mode_tx_config0_ifg_cnt_ADDRESS 0x80003ED0
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_cnt_ADDRESS 0x80003ED4
#define bb_chip_mca_channel_test_mode_tx_config0_pkt_size_ADDRESS 0x80003ED8
#define bb_chip_mca_channel_test_mode_tx_config0_ctrl0_ADDRESS 0x80003EDC
#define bb_chip_mca_channel_test_mode_tx_stats0_ADDRESS 0x80003EE0
#define bb_chip_mca_channel_test_mode_tx_stats0_rd2clr_config_ADDRESS 0x80003EE0
#define bb_chip_mca_channel_test_mode_tx_stats0_wait_count_ADDRESS 0x80003EE4
#define bb_chip_mca_channel_test_mode_tx_stats0_pkt_count_ADDRESS 0x80003EE8
#define bb_chip_mca_channel_test_mode_rx_ADDRESS 0x80003EEC
#define bb_chip_mca_channel_test_mode_rx_version_ADDRESS 0x80003EEC
#define bb_chip_mca_channel_test_mode_rx_config0_ADDRESS 0x80003EF0
#define bb_chip_mca_channel_test_mode_rx_config0_mgen_ADDRESS 0x80003EF0
#define bb_chip_mca_channel_test_mode_rx_stats0_ADDRESS 0x80003EF4
#define bb_chip_mca_channel_test_mode_rx_stats0_rd2clr_config_ADDRESS 0x80003EF4
#define bb_chip_mca_channel_test_mode_rx_stats0_err_count_ADDRESS 0x80003EF8
#define bb_chip_mca_channel_test_mode_rx_stats0_pkt_count_ADDRESS 0x80003EFC
#define bb_chip_dp_sink_main_s_ADDRESS 0x80004400
#define bb_chip_dp_sink_main_version_ADDRESS 0x80004400
#define bb_chip_dp_sink_main_configuration_ADDRESS 0x80004404
#define bb_chip_dp_sink_main_aligner_ADDRESS 0x80004408
#define bb_chip_dp_sink_main_aligner_control_ADDRESS 0x80004408
#define bb_chip_dp_sink_main_aligner_status_ADDRESS 0x8000440C
#define bb_chip_dp_sink_main_aligner_stats_ADDRESS 0x80004410
#define bb_chip_dp_sink_main_aligner_debug_ADDRESS 0x80004414
#define bb_chip_dp_sink_main_aligner_debug_stats1_ADDRESS 0x80004414
#define bb_chip_dp_sink_main_aligner_debug_stats2_ADDRESS 0x80004418
#define bb_chip_dp_sink_main_aligner_debug_stats3_ADDRESS 0x8000441C
#define bb_chip_dp_sink_main_aligner_debug_stats4_ADDRESS 0x80004420
#define bb_chip_dp_sink_main_aligner_fifo_status_ADDRESS 0x80004424
#define bb_chip_dp_sink_main_aligner_fifo_config_ADDRESS 0x80004428
#define bb_chip_dp_sink_main_stats_ADDRESS 0x8000442C
#define bb_chip_dp_sink_main_stats_flag_8b10b_ADDRESS 0x8000442C
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_0_ADDRESS 0x80004430
#define bb_chip_dp_sink_main_stats_cnt_en_rst_8b10b_1_ADDRESS 0x80004434
#define bb_chip_dp_sink_main_stats_cnt_8b10b_0_ADDRESS 0x80004438
#define bb_chip_dp_sink_main_stats_cnt_8b10b_1_ADDRESS 0x8000443C
#define bb_chip_dp_sink_main_stats_cnt_en_rst_gtp_ADDRESS 0x80004440
#define bb_chip_dp_sink_main_stats_cnt_gtp_ADDRESS 0x80004444
#define bb_chip_dp_sink_main_descrambler_ADDRESS 0x80004448
#define bb_chip_dp_sink_main_stream_extractor_ADDRESS 0x8000444C
#define bb_chip_dp_sink_main_stream_extractor_cfg_ADDRESS 0x8000444C
#define bb_chip_dp_sink_main_stream_extractor_alu_ADDRESS 0x80004450
#define bb_chip_dp_sink_main_stream_extractor_msa_ADDRESS 0x80004454
#define bb_chip_dp_sink_main_stream_extractor_msa_mvid_ADDRESS 0x80004454
#define bb_chip_dp_sink_main_stream_extractor_msa_nvid_ADDRESS 0x80004458
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_0_ADDRESS 0x8000445C
#define bb_chip_dp_sink_main_stream_extractor_msa_horizontal_1_ADDRESS 0x80004460
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_0_ADDRESS 0x80004464
#define bb_chip_dp_sink_main_stream_extractor_msa_vertical_1_ADDRESS 0x80004468
#define bb_chip_dp_sink_main_stream_extractor_msa_misc_ADDRESS 0x8000446C
#define bb_chip_dp_sink_main_stream_extractor_msa_status_ADDRESS 0x80004470
#define bb_chip_dp_sink_main_stream_extractor_msa_fps_ADDRESS 0x80004474
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_ADDRESS 0x80004478
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_mvid_ADDRESS 0x80004478
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_nvid_ADDRESS 0x8000447C
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_0_ADDRESS 0x80004480
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_horizontal_1_ADDRESS 0x80004484
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_0_ADDRESS 0x80004488
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_vertical_1_ADDRESS 0x8000448C
#define bb_chip_dp_sink_main_stream_extractor_debug_msa_misc_ADDRESS 0x80004490
#define bb_chip_dp_sink_main_stream_extractor_fsm_status_ADDRESS 0x80004494
#define bb_chip_dp_sink_main_stream_extractor_vbd_ADDRESS 0x80004498
#define bb_chip_dp_sink_main_stream_extractor_vbd_vbid_ADDRESS 0x80004498
#define bb_chip_dp_sink_main_stream_extractor_vbd_status_ADDRESS 0x8000449C
#define bb_chip_dp_sink_main_stream_extractor_vid_fifo_config_ADDRESS 0x800044A0
#define bb_chip_dp_sink_main_stream_extractor_sdp_ADDRESS 0x800044A4
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_status_ADDRESS 0x800044A4
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_status_ADDRESS 0x800044A8
#define bb_chip_dp_sink_main_stream_extractor_sdp_fifo_config_ADDRESS 0x800044AC
#define bb_chip_dp_sink_main_stream_extractor_sdp_tag_fifo_config_ADDRESS 0x800044B0
#define bb_chip_dp_sink_main_stream_extractor_sdp_debug_ADDRESS 0x800044B4
#define bb_chip_dp_sink_main_stream_extractor_pixgen_ADDRESS 0x800044B8
#define bb_chip_dp_sink_main_stream_extractor_debug_ADDRESS 0x800044BC
#define bb_chip_dp_sink_main_encoder_vfr_ADDRESS 0x800044C0
#define bb_chip_dp_sink_main_encoder_vfr_handshake_ADDRESS 0x800044C0
#define bb_chip_dp_sink_main_encoder_vfr_pixel_ADDRESS 0x800044C4
#define bb_chip_dp_sink_main_encoder_vfr_line_ADDRESS 0x800044C8
#define bb_chip_dp_sink_main_stats0_ADDRESS 0x800044CC
#define bb_chip_dp_sink_main_stats0_rd2clr_config_ADDRESS 0x800044CC
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_full_ADDRESS 0x800044D0
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_empty_ADDRESS 0x800044D4
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_overflow_ADDRESS 0x800044D8
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_underflow_ADDRESS 0x800044DC
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_ADDRESS 0x800044E0
#define bb_chip_dp_sink_main_stats0_vid_c0_fifo_level_watermark_ADDRESS 0x800044E4
#define bb_chip_dp_sink_main_stats0_vid_c0_sr_full_ADDRESS 0x800044E8
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_full_ADDRESS 0x800044EC
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_empty_ADDRESS 0x800044F0
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_overflow_ADDRESS 0x800044F4
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_underflow_ADDRESS 0x800044F8
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_ADDRESS 0x800044FC
#define bb_chip_dp_sink_main_stats0_vid_c1_fifo_level_watermark_ADDRESS 0x80004500
#define bb_chip_dp_sink_main_stats0_vid_c1_sr_full_ADDRESS 0x80004504
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_full_ADDRESS 0x80004508
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_empty_ADDRESS 0x8000450C
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_overflow_ADDRESS 0x80004510
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_underflow_ADDRESS 0x80004514
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_ADDRESS 0x80004518
#define bb_chip_dp_sink_main_stats0_vid_c2_fifo_level_watermark_ADDRESS 0x8000451C
#define bb_chip_dp_sink_main_stats0_vid_c2_sr_full_ADDRESS 0x80004520
#define bb_chip_dp_sink_main_stats0_vbd_majority_fail_ADDRESS 0x80004524
#define bb_chip_dp_sink_main_stats0_msa_majority_fail_ADDRESS 0x80004528
#define bb_chip_dp_sink_main_stats1_ADDRESS 0x8000452C
#define bb_chip_dp_sink_main_stats1_rd2clr_config_ADDRESS 0x8000452C
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_ADDRESS 0x80004530
#define bb_chip_dp_sink_main_stats1_sdp_pkt_sent_cnt_watermark_ADDRESS 0x80004534
#define bb_chip_dp_sink_main_stats1_sdp_ss_se_same_cycle_ADDRESS 0x80004538
#define bb_chip_dp_sink_main_stats1_sdp_fifo_full_ADDRESS 0x8000453C
#define bb_chip_dp_sink_main_stats1_sdp_fifo_empty_ADDRESS 0x80004540
#define bb_chip_dp_sink_main_stats1_sdp_fifo_overflow_ADDRESS 0x80004544
#define bb_chip_dp_sink_main_stats1_sdp_fifo_underflow_ADDRESS 0x80004548
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_ADDRESS 0x8000454C
#define bb_chip_dp_sink_main_stats1_sdp_fifo_level_watermark_ADDRESS 0x80004550
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_full_ADDRESS 0x80004554
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_empty_ADDRESS 0x80004558
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_overflow_ADDRESS 0x8000455C
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_underflow_ADDRESS 0x80004560
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_ADDRESS 0x80004564
#define bb_chip_dp_sink_main_stats1_sdp_tag_fifo_level_watermark_ADDRESS 0x80004568
#define bb_chip_dp_sink_main_irq_ADDRESS 0x8000456C
#define bb_chip_dp_sink_main_irq_enable_ADDRESS 0x8000456C
#define bb_chip_dp_sink_main_irq_pending_ADDRESS 0x80004570
#define bb_chip_dp_sink_main_irq_pending_irq_ADDRESS 0x80004574
#define bb_chip_dp_sink_main_irq_raw_ADDRESS 0x80004578
#define bb_chip_dp_sink_tico_s_ADDRESS 0x80004600
#define bb_chip_dp_sink_tico_tico_e_width_ADDRESS 0x80004614
#define bb_chip_dp_sink_tico_tico_e_height_ADDRESS 0x8000461C
#define bb_chip_dp_sink_tico_tico_e_comp_ADDRESS 0x80004624
#define bb_chip_dp_sink_tico_tico_e_mode_ADDRESS 0x8000462C
#define bb_chip_dp_sink_tico_tico_e_hlvls_ADDRESS 0x80004634
#define bb_chip_dp_sink_tico_tico_e_vld_ADDRESS 0x80004638
#define bb_chip_dp_sink_tico_tico_e_nbr_ADDRESS 0x8000463C
#define bb_chip_dp_sink_tico_tico_e_bgt_ADDRESS 0x80004644
#define bb_chip_dp_sink_tico_tico_e_vid_depth_ADDRESS 0x80004648
#define bb_chip_dp_sink_tico_tico_e_play_mode_ADDRESS 0x8000464C
#define bb_chip_dp_sink_tico_tico_e_lvl_weights_ADDRESS 0x80004650
#define bb_chip_dp_sink_aux_hpd_s_ADDRESS 0x80004700
#define bb_chip_dp_sink_aux_hpd_version_ADDRESS 0x80004700
#define bb_chip_dp_sink_aux_hpd_aux_status_ADDRESS 0x80004704
#define bb_chip_dp_sink_aux_hpd_aux_ctrl1_ADDRESS 0x80004708
#define bb_chip_dp_sink_aux_hpd_aux_ctrl2_ADDRESS 0x8000470C
#define bb_chip_dp_sink_aux_hpd_aux_ctrl3_ADDRESS 0x80004710
#define bb_chip_dp_sink_aux_hpd_aux_rx_ADDRESS 0x80004714
#define bb_chip_dp_sink_aux_hpd_aux_tx_ADDRESS 0x80004718
#define bb_chip_dp_sink_aux_hpd_hpd_status_ADDRESS 0x8000471C
#define bb_chip_dp_sink_aux_hpd_hpd_ctrl_ADDRESS 0x80004720
#define bb_chip_dp_sink_aux_hpd_hpd_timer1_ADDRESS 0x80004724
#define bb_chip_dp_sink_aux_hpd_hpd_timer2_ADDRESS 0x80004728
#define bb_chip_dp_sink_aux_hpd_hpd_timer3_ADDRESS 0x8000472C
#define bb_chip_dp_sink_aux_hpd_hpd_rise_det_ADDRESS 0x80004730
#define bb_chip_dp_sink_aux_hpd_hpd_fall_det_ADDRESS 0x80004734
#define bb_chip_dp_sink_aux_hpd_dp_source_connect_det_ADDRESS 0x80004738
#define bb_chip_dp_sink_aux_hpd_dp_source_disconnect_det_ADDRESS 0x8000473C
#define bb_chip_dp_sink_aux_hpd_irq_ADDRESS 0x80004740
#define bb_chip_dp_sink_aux_hpd_irq_enable_ADDRESS 0x80004740
#define bb_chip_dp_sink_aux_hpd_irq_pending_ADDRESS 0x80004744
#define bb_chip_dp_sink_aux_hpd_irq_pending_irq_ADDRESS 0x80004748
#define bb_chip_dp_sink_aux_hpd_irq_raw_ADDRESS 0x8000474C
#define bb_chip_dp_source_main_s_ADDRESS 0x80004800
#define bb_chip_dp_source_main_version_ADDRESS 0x80004800
#define bb_chip_dp_source_main_configuration_ADDRESS 0x80004804
#define bb_chip_dp_source_main_scrambler_ADDRESS 0x80004808
#define bb_chip_dp_source_main_stream_generator_ADDRESS 0x8000480C
#define bb_chip_dp_source_main_stream_generator_cfg0_ADDRESS 0x8000480C
#define bb_chip_dp_source_main_stream_generator_cfg1_ADDRESS 0x80004810
#define bb_chip_dp_source_main_stream_generator_cfg2_ADDRESS 0x80004814
#define bb_chip_dp_source_main_stream_generator_cfg3_ADDRESS 0x80004818
#define bb_chip_dp_source_main_stream_generator_cs_pkt_updated_interval_ADDRESS 0x8000481C
#define bb_chip_dp_source_main_stream_generator_dp_width_total_actual_ADDRESS 0x80004820
#define bb_chip_dp_source_main_stream_generator_alu0_ADDRESS 0x80004824
#define bb_chip_dp_source_main_stream_generator_alu1_ADDRESS 0x80004828
#define bb_chip_dp_source_main_stream_generator_alu2_ADDRESS 0x8000482C
#define bb_chip_dp_source_main_stream_generator_msa_ADDRESS 0x80004830
#define bb_chip_dp_source_main_stream_generator_msa_control_0_ADDRESS 0x80004830
#define bb_chip_dp_source_main_stream_generator_msa_control_1_ADDRESS 0x80004834
#define bb_chip_dp_source_main_stream_generator_msa_mvid_ADDRESS 0x80004838
#define bb_chip_dp_source_main_stream_generator_msa_nvid_ADDRESS 0x8000483C
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_0_ADDRESS 0x80004840
#define bb_chip_dp_source_main_stream_generator_msa_horizontal_1_ADDRESS 0x80004844
#define bb_chip_dp_source_main_stream_generator_msa_vertical_0_ADDRESS 0x80004848
#define bb_chip_dp_source_main_stream_generator_msa_vertical_1_ADDRESS 0x8000484C
#define bb_chip_dp_source_main_stream_generator_msa_misc_ADDRESS 0x80004850
#define bb_chip_dp_source_main_stream_generator_msa_dp_ADDRESS 0x80004854
#define bb_chip_dp_source_main_stream_generator_msa_dp_mvid_ADDRESS 0x80004854
#define bb_chip_dp_source_main_stream_generator_msa_dp_nvid_ADDRESS 0x80004858
#define bb_chip_dp_source_main_stream_generator_fsm_status_ADDRESS 0x8000485C
#define bb_chip_dp_source_main_stream_generator_fifo_cs_level_ADDRESS 0x80004860
#define bb_chip_dp_source_main_stream_generator_fifo_cs_status_ADDRESS 0x80004864
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control0_ADDRESS 0x80004868
#define bb_chip_dp_source_main_stream_generator_fifo_cs_control1_ADDRESS 0x8000486C
#define bb_chip_dp_source_main_stream_generator_fifo_cs_config_ADDRESS 0x80004870
#define bb_chip_dp_source_main_stream_generator_fifo_pix_level_ADDRESS 0x80004874
#define bb_chip_dp_source_main_stream_generator_fifo_pix_sr_status_ADDRESS 0x80004878
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control0_ADDRESS 0x8000487C
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control1_ADDRESS 0x80004880
#define bb_chip_dp_source_main_stream_generator_fifo_pix_control2_ADDRESS 0x80004884
#define bb_chip_dp_source_main_stream_generator_fifo_pix_config_ADDRESS 0x80004888
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_status_ADDRESS 0x8000488C
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_status_ADDRESS 0x80004890
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_config_ADDRESS 0x80004894
#define bb_chip_dp_source_main_stream_generator_fifo_sdp_tag_config_ADDRESS 0x80004898
#define bb_chip_dp_source_main_stream_generator_sdp_ctrl_ADDRESS 0x8000489C
#define bb_chip_dp_source_main_stream_generator_idle_pattern_debug_ADDRESS 0x800048A0
#define bb_chip_dp_source_main_stream_generator_vbd_ADDRESS 0x800048A4
#define bb_chip_dp_source_main_decoder_error_status_ADDRESS 0x800048A8
#define bb_chip_dp_source_main_decoder_error_status_handshake_ADDRESS 0x800048A8
#define bb_chip_dp_source_main_decoder_error_status_error_id_ADDRESS 0x800048AC
#define bb_chip_dp_source_main_compliance_ADDRESS 0x800048B0
#define bb_chip_dp_source_main_compliance_custom_80bits_3_0_ADDRESS 0x800048B0
#define bb_chip_dp_source_main_compliance_custom_80bits_7_4_ADDRESS 0x800048B4
#define bb_chip_dp_source_main_compliance_custom_80bits_9_8_ADDRESS 0x800048B8
#define bb_chip_dp_source_main_stats0_ADDRESS 0x800048BC
#define bb_chip_dp_source_main_stats0_rd2clr_config_ADDRESS 0x800048BC
#define bb_chip_dp_source_main_stats0_fifo_pix_0_full_ADDRESS 0x800048C0
#define bb_chip_dp_source_main_stats0_fifo_pix_0_empty_ADDRESS 0x800048C4
#define bb_chip_dp_source_main_stats0_fifo_pix_0_overflow_ADDRESS 0x800048C8
#define bb_chip_dp_source_main_stats0_fifo_pix_0_underflow_ADDRESS 0x800048CC
#define bb_chip_dp_source_main_stats0_pix_0_sr_underflow_ADDRESS 0x800048D0
#define bb_chip_dp_source_main_stats0_pix_1_sr_underflow_ADDRESS 0x800048D4
#define bb_chip_dp_source_main_stats0_pix_2_sr_underflow_ADDRESS 0x800048D8
#define bb_chip_dp_source_main_stats0_pix_3_sr_underflow_ADDRESS 0x800048DC
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_ADDRESS 0x800048E0
#define bb_chip_dp_source_main_stats0_fifo_pix_0_level_watermark_ADDRESS 0x800048E4
#define bb_chip_dp_source_main_stats1_ADDRESS 0x800048E8
#define bb_chip_dp_source_main_stats1_rd2clr_config_ADDRESS 0x800048E8
#define bb_chip_dp_source_main_stats1_fifo_cs_full_ADDRESS 0x800048EC
#define bb_chip_dp_source_main_stats1_fifo_cs_empty_ADDRESS 0x800048F0
#define bb_chip_dp_source_main_stats1_fifo_cs_overflow_ADDRESS 0x800048F4
#define bb_chip_dp_source_main_stats1_fifo_cs_underflow_ADDRESS 0x800048F8
#define bb_chip_dp_source_main_stats1_fifo_cs_ae0_ADDRESS 0x800048FC
#define bb_chip_dp_source_main_stats1_fifo_cs_ae1_ADDRESS 0x80004900
#define bb_chip_dp_source_main_stats1_fifo_cs_af0_ADDRESS 0x80004904
#define bb_chip_dp_source_main_stats1_fifo_cs_af1_ADDRESS 0x80004908
#define bb_chip_dp_source_main_stats1_fifo_cs_level_ADDRESS 0x8000490C
#define bb_chip_dp_source_main_stats1_fifo_cs_level_watermark_ADDRESS 0x80004910
#define bb_chip_dp_source_main_stats1_fifo_sdp_full_ADDRESS 0x80004914
#define bb_chip_dp_source_main_stats1_fifo_sdp_empty_ADDRESS 0x80004918
#define bb_chip_dp_source_main_stats1_fifo_sdp_overflow_ADDRESS 0x8000491C
#define bb_chip_dp_source_main_stats1_fifo_sdp_underflow_ADDRESS 0x80004920
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_ADDRESS 0x80004924
#define bb_chip_dp_source_main_stats1_fifo_sdp_level_watermark_ADDRESS 0x80004928
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_full_ADDRESS 0x8000492C
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_empty_ADDRESS 0x80004930
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_overflow_ADDRESS 0x80004934
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_underflow_ADDRESS 0x80004938
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_ADDRESS 0x8000493C
#define bb_chip_dp_source_main_stats1_fifo_sdp_tag_level_watermark_ADDRESS 0x80004940
#define bb_chip_dp_source_main_stats1_sdp_ptp_pkt_sop_in_ADDRESS 0x80004944
#define bb_chip_dp_source_main_irq_ADDRESS 0x80004948
#define bb_chip_dp_source_main_irq_enable_ADDRESS 0x80004948
#define bb_chip_dp_source_main_irq_pending_ADDRESS 0x8000494C
#define bb_chip_dp_source_main_irq_pending_irq_ADDRESS 0x80004950
#define bb_chip_dp_source_main_irq_raw_ADDRESS 0x80004954
#define bb_chip_dp_source_tico_s_ADDRESS 0x80004A00
#define bb_chip_dp_source_tico_tico_d_config_ADDRESS 0x80004A10
#define bb_chip_dp_source_tico_tico_d_width_ADDRESS 0x80004A14
#define bb_chip_dp_source_tico_tico_d_height_ADDRESS 0x80004A1C
#define bb_chip_dp_source_tico_tico_d_comp_ADDRESS 0x80004A24
#define bb_chip_dp_source_tico_tico_d_mode_ADDRESS 0x80004A2C
#define bb_chip_dp_source_tico_tico_d_hlvls_ADDRESS 0x80004A34
#define bb_chip_dp_source_tico_tico_d_vld_ADDRESS 0x80004A38
#define bb_chip_dp_source_tico_tico_d_nbr_ADDRESS 0x80004A3C
#define bb_chip_dp_source_tico_tico_d_bgt_ADDRESS 0x80004A44
#define bb_chip_dp_source_tico_tico_d_vid_depth_ADDRESS 0x80004A48
#define bb_chip_dp_source_tico_tico_d_play_mode_ADDRESS 0x80004A4C
#define bb_chip_dp_source_tico_tico_d_profile_ADDRESS 0x80004A58
#define bb_chip_dp_source_tico_tico_d_line_duration_ADDRESS 0x80004A80
#define bb_chip_dp_source_tico_tico_d_img_size_ADDRESS 0x80004A84
#define bb_chip_dp_source_aux_hpd_s_ADDRESS 0x80004B00
#define bb_chip_dp_source_aux_hpd_version_ADDRESS 0x80004B00
#define bb_chip_dp_source_aux_hpd_aux_status_ADDRESS 0x80004B04
#define bb_chip_dp_source_aux_hpd_aux_ctrl1_ADDRESS 0x80004B08
#define bb_chip_dp_source_aux_hpd_aux_ctrl2_ADDRESS 0x80004B0C
#define bb_chip_dp_source_aux_hpd_aux_ctrl3_ADDRESS 0x80004B10
#define bb_chip_dp_source_aux_hpd_aux_rx_ADDRESS 0x80004B14
#define bb_chip_dp_source_aux_hpd_aux_tx_ADDRESS 0x80004B18
#define bb_chip_dp_source_aux_hpd_hpd_status_ADDRESS 0x80004B1C
#define bb_chip_dp_source_aux_hpd_hpd_ctrl_ADDRESS 0x80004B20
#define bb_chip_dp_source_aux_hpd_hpd_timer1_ADDRESS 0x80004B24
#define bb_chip_dp_source_aux_hpd_hpd_timer2_ADDRESS 0x80004B28
#define bb_chip_dp_source_aux_hpd_hpd_timer3_ADDRESS 0x80004B2C
#define bb_chip_dp_source_aux_hpd_hpd_rise_det_ADDRESS 0x80004B30
#define bb_chip_dp_source_aux_hpd_hpd_fall_det_ADDRESS 0x80004B34
#define bb_chip_dp_source_aux_hpd_dp_source_connect_det_ADDRESS 0x80004B38
#define bb_chip_dp_source_aux_hpd_dp_source_disconnect_det_ADDRESS 0x80004B3C
#define bb_chip_dp_source_aux_hpd_irq_ADDRESS 0x80004B40
#define bb_chip_dp_source_aux_hpd_irq_enable_ADDRESS 0x80004B40
#define bb_chip_dp_source_aux_hpd_irq_pending_ADDRESS 0x80004B44
#define bb_chip_dp_source_aux_hpd_irq_pending_irq_ADDRESS 0x80004B48
#define bb_chip_dp_source_aux_hpd_irq_raw_ADDRESS 0x80004B4C
#define bb_chip_xusb3_s_ADDRESS 0x80004C00
#define bb_chip_xusb3_version_ADDRESS 0x80004C00
#define bb_chip_xusb3_configuration_ADDRESS 0x80004C04
#define bb_chip_xusb3_control_ADDRESS 0x80004C08
#define bb_chip_xusb3_rx_partner_fifo_ADDRESS 0x80004C0C
#define bb_chip_xusb3_rx_partner_fifo_version_ADDRESS 0x80004C0C
#define bb_chip_xusb3_rx_partner_fifo_write_engine_ADDRESS 0x80004C10
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_ADDRESS 0x80004C10
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_clear_ADDRESS 0x80004C10
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_mode_ADDRESS 0x80004C14
#define bb_chip_xusb3_rx_partner_fifo_write_engine_config0_notify_limit_ADDRESS 0x80004C18
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_ADDRESS 0x80004C1C
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_rd2clr_config_ADDRESS 0x80004C1C
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_nfifo_dcount_ADDRESS 0x80004C20
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pfifo_dcount_ADDRESS 0x80004C24
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80004C28
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_fifo_full_err_ADDRESS 0x80004C2C
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_err_ADDRESS 0x80004C30
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_pkt_sop_err_ADDRESS 0x80004C34
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_wflush_act_ADDRESS 0x80004C38
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_rd_ADDRESS 0x80004C3C
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_drp_pkt_wr_ADDRESS 0x80004C40
#define bb_chip_xusb3_rx_partner_fifo_write_engine_stats0_flow_ctrl_ADDRESS 0x80004C44
#define bb_chip_xusb3_rx_partner_fifo_read_engine_ADDRESS 0x80004C48
#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_ADDRESS 0x80004C48
#define bb_chip_xusb3_rx_partner_fifo_read_engine_config0_clear_ADDRESS 0x80004C48
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_ADDRESS 0x80004C4C
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rd2clr_config_ADDRESS 0x80004C4C
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_rflush_act_ADDRESS 0x80004C50
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_drp_pkt_ADDRESS 0x80004C54
#define bb_chip_xusb3_rx_partner_fifo_read_engine_stats0_flow_ctrl_ADDRESS 0x80004C58
#define bb_chip_xusb3_stats0_ADDRESS 0x80004C5C
#define bb_chip_xusb3_stats0_rd2clr_config_ADDRESS 0x80004C5C
#define bb_chip_xusb3_stats0_link_partner_ptp_violated_ADDRESS 0x80004C60
#define bb_chip_xusb3_stats0_from_phy_in_sop_ADDRESS 0x80004C64
#define bb_chip_xusb3_stats0_from_phy_in_eop_ADDRESS 0x80004C68
#define bb_chip_xusb3_stats0_to_link_out_sop_ADDRESS 0x80004C6C
#define bb_chip_xusb3_stats0_to_link_out_eop_ADDRESS 0x80004C70
#define bb_chip_xusb3_stats0_from_link_in_sop_ADDRESS 0x80004C74
#define bb_chip_xusb3_stats0_from_link_in_eop_ADDRESS 0x80004C78
#define bb_chip_xusb3_stats0_unknown_pkt_drp_ADDRESS 0x80004C7C
#define bb_chip_xusb3_stats0_dwn_stream_busy_drp_ADDRESS 0x80004C80
#define bb_chip_xusb3_stats0_drop_lone_dpp_ADDRESS 0x80004C84
#define bb_chip_xusb3_stats0_rcvd_lone_dph_ADDRESS 0x80004C88
#define bb_chip_xusb3_stats0_timedout_2join_dpp_ADDRESS 0x80004C8C
#define bb_chip_xusb3_stats0_not_rdy_pkt_drp_ADDRESS 0x80004C90
#define bb_chip_xusb3_ptp_guard_2core_ADDRESS 0x80004C94
#define bb_chip_xusb3_ptp_guard_2core_version_ADDRESS 0x80004C94
#define bb_chip_xusb3_ptp_guard_2core_config0_ADDRESS 0x80004C98
#define bb_chip_xusb3_ptp_guard_2core_config0_fix_ptp_violations_ADDRESS 0x80004C98
#define bb_chip_xusb3_ptp_guard_2core_config0_max_cycles_ADDRESS 0x80004C9C
#define bb_chip_xusb3_ptp_guard_2core_stats0_ADDRESS 0x80004CA0
#define bb_chip_xusb3_ptp_guard_2core_stats0_rd2clr_config_ADDRESS 0x80004CA0
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_sop_err_ADDRESS 0x80004CA4
#define bb_chip_xusb3_ptp_guard_2core_stats0_missing_eop_err_ADDRESS 0x80004CA8
#define bb_chip_xusb3_ptp_guard_2core_stats0_max_cycle_err_ADDRESS 0x80004CAC
#define bb_chip_xusb3_ptp_guard_2core_irq0_ADDRESS 0x80004CB0
#define bb_chip_xusb3_ptp_guard_2core_irq0_enable_ADDRESS 0x80004CB0
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_ADDRESS 0x80004CB4
#define bb_chip_xusb3_ptp_guard_2core_irq0_pending_irq_ADDRESS 0x80004CB8
#define bb_chip_xusb3_ptp_guard_2core_irq0_raw_ADDRESS 0x80004CBC
#define bb_chip_xusb3_buff_2ulp_ADDRESS 0x80004CC0
#define bb_chip_xusb3_buff_2ulp_control_ADDRESS 0x80004CC0
#define bb_chip_xusb3_buff_2ulp_stats0_ADDRESS 0x80004CC4
#define bb_chip_xusb3_buff_2ulp_stats0_rd2clr_config_ADDRESS 0x80004CC4
#define bb_chip_xusb3_buff_2ulp_stats0_nfifo_dcount_ADDRESS 0x80004CC8
#define bb_chip_xusb3_buff_2ulp_stats0_pfifo_dcount_ADDRESS 0x80004CCC
#define bb_chip_xusb3_buff_2upp_ADDRESS 0x80004CD0
#define bb_chip_xusb3_buff_2upp_control_ADDRESS 0x80004CD0
#define bb_chip_xusb3_buff_2upp_stats0_ADDRESS 0x80004CD4
#define bb_chip_xusb3_buff_2upp_stats0_rd2clr_config_ADDRESS 0x80004CD4
#define bb_chip_xusb3_buff_2upp_stats0_nfifo_scount_ADDRESS 0x80004CD8
#define bb_chip_xusb3_buff_2upp_stats0_pfifo_scount_ADDRESS 0x80004CDC
#define bb_chip_xusb3_irq0_ADDRESS 0x80004CE0
#define bb_chip_xusb3_irq0_enable_ADDRESS 0x80004CE0
#define bb_chip_xusb3_irq0_pending_ADDRESS 0x80004CE4
#define bb_chip_xusb3_irq0_pending_irq_ADDRESS 0x80004CE8
#define bb_chip_xusb3_irq0_raw_ADDRESS 0x80004CEC
#define bb_chip_upp_s_ADDRESS 0x80004E00
#define bb_chip_upp_version_ADDRESS 0x80004E00
#define bb_chip_upp_config0_ADDRESS 0x80004E04
#define bb_chip_upp_control_ADDRESS 0x80004E08
#define bb_chip_upp_id_mgr_fifo_ADDRESS 0x80004E0C
#define bb_chip_upp_id_mgr_fifo_version_ADDRESS 0x80004E0C
#define bb_chip_upp_id_mgr_fifo_write_engine_ADDRESS 0x80004E10
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_ADDRESS 0x80004E10
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_clear_ADDRESS 0x80004E10
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_mode_ADDRESS 0x80004E14
#define bb_chip_upp_id_mgr_fifo_write_engine_config0_notify_limit_ADDRESS 0x80004E18
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_ADDRESS 0x80004E1C
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_rd2clr_config_ADDRESS 0x80004E1C
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_nfifo_dcount_ADDRESS 0x80004E20
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pfifo_dcount_ADDRESS 0x80004E24
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80004E28
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_fifo_full_err_ADDRESS 0x80004E2C
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_err_ADDRESS 0x80004E30
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_pkt_sop_err_ADDRESS 0x80004E34
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_wflush_act_ADDRESS 0x80004E38
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_rd_ADDRESS 0x80004E3C
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_drp_pkt_wr_ADDRESS 0x80004E40
#define bb_chip_upp_id_mgr_fifo_write_engine_stats0_flow_ctrl_ADDRESS 0x80004E44
#define bb_chip_upp_id_mgr_fifo_read_engine_ADDRESS 0x80004E48
#define bb_chip_upp_id_mgr_fifo_read_engine_config0_ADDRESS 0x80004E48
#define bb_chip_upp_id_mgr_fifo_read_engine_config0_clear_ADDRESS 0x80004E48
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_ADDRESS 0x80004E4C
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rd2clr_config_ADDRESS 0x80004E4C
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_rflush_act_ADDRESS 0x80004E50
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_drp_pkt_ADDRESS 0x80004E54
#define bb_chip_upp_id_mgr_fifo_read_engine_stats0_flow_ctrl_ADDRESS 0x80004E58
#define bb_chip_upp_iso_lex_fifo_0_ADDRESS 0x80004E5C
#define bb_chip_upp_iso_lex_fifo_0_version_ADDRESS 0x80004E5C
#define bb_chip_upp_iso_lex_fifo_0_write_engine_ADDRESS 0x80004E60
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_ADDRESS 0x80004E60
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_clear_ADDRESS 0x80004E60
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_mode_ADDRESS 0x80004E64
#define bb_chip_upp_iso_lex_fifo_0_write_engine_config0_notify_limit_ADDRESS 0x80004E68
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_ADDRESS 0x80004E6C
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_rd2clr_config_ADDRESS 0x80004E6C
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_nfifo_dcount_ADDRESS 0x80004E70
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pfifo_dcount_ADDRESS 0x80004E74
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80004E78
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_fifo_full_err_ADDRESS 0x80004E7C
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_err_ADDRESS 0x80004E80
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_pkt_sop_err_ADDRESS 0x80004E84
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_wflush_act_ADDRESS 0x80004E88
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_rd_ADDRESS 0x80004E8C
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_drp_pkt_wr_ADDRESS 0x80004E90
#define bb_chip_upp_iso_lex_fifo_0_write_engine_stats0_flow_ctrl_ADDRESS 0x80004E94
#define bb_chip_upp_iso_lex_fifo_0_read_engine_ADDRESS 0x80004E98
#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_ADDRESS 0x80004E98
#define bb_chip_upp_iso_lex_fifo_0_read_engine_config0_clear_ADDRESS 0x80004E98
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_ADDRESS 0x80004E9C
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rd2clr_config_ADDRESS 0x80004E9C
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_rflush_act_ADDRESS 0x80004EA0
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_drp_pkt_ADDRESS 0x80004EA4
#define bb_chip_upp_iso_lex_fifo_0_read_engine_stats0_flow_ctrl_ADDRESS 0x80004EA8
#define bb_chip_upp_iso_lex_fifo_1_ADDRESS 0x80004EAC
#define bb_chip_upp_iso_lex_fifo_1_version_ADDRESS 0x80004EAC
#define bb_chip_upp_iso_lex_fifo_1_write_engine_ADDRESS 0x80004EB0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_ADDRESS 0x80004EB0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_clear_ADDRESS 0x80004EB0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_mode_ADDRESS 0x80004EB4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_config0_notify_limit_ADDRESS 0x80004EB8
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_ADDRESS 0x80004EBC
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_rd2clr_config_ADDRESS 0x80004EBC
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_nfifo_dcount_ADDRESS 0x80004EC0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pfifo_dcount_ADDRESS 0x80004EC4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80004EC8
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_fifo_full_err_ADDRESS 0x80004ECC
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_err_ADDRESS 0x80004ED0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_pkt_sop_err_ADDRESS 0x80004ED4
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_wflush_act_ADDRESS 0x80004ED8
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_rd_ADDRESS 0x80004EDC
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_drp_pkt_wr_ADDRESS 0x80004EE0
#define bb_chip_upp_iso_lex_fifo_1_write_engine_stats0_flow_ctrl_ADDRESS 0x80004EE4
#define bb_chip_upp_iso_lex_fifo_1_read_engine_ADDRESS 0x80004EE8
#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_ADDRESS 0x80004EE8
#define bb_chip_upp_iso_lex_fifo_1_read_engine_config0_clear_ADDRESS 0x80004EE8
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_ADDRESS 0x80004EEC
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rd2clr_config_ADDRESS 0x80004EEC
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_rflush_act_ADDRESS 0x80004EF0
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_drp_pkt_ADDRESS 0x80004EF4
#define bb_chip_upp_iso_lex_fifo_1_read_engine_stats0_flow_ctrl_ADDRESS 0x80004EF8
#define bb_chip_upp_iso_lex_fifo_2_ADDRESS 0x80004EFC
#define bb_chip_upp_iso_lex_fifo_2_version_ADDRESS 0x80004EFC
#define bb_chip_upp_iso_lex_fifo_2_write_engine_ADDRESS 0x80004F00
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_ADDRESS 0x80004F00
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_clear_ADDRESS 0x80004F00
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_mode_ADDRESS 0x80004F04
#define bb_chip_upp_iso_lex_fifo_2_write_engine_config0_notify_limit_ADDRESS 0x80004F08
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_ADDRESS 0x80004F0C
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_rd2clr_config_ADDRESS 0x80004F0C
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_nfifo_dcount_ADDRESS 0x80004F10
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pfifo_dcount_ADDRESS 0x80004F14
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80004F18
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_fifo_full_err_ADDRESS 0x80004F1C
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_err_ADDRESS 0x80004F20
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_pkt_sop_err_ADDRESS 0x80004F24
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_wflush_act_ADDRESS 0x80004F28
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_rd_ADDRESS 0x80004F2C
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_drp_pkt_wr_ADDRESS 0x80004F30
#define bb_chip_upp_iso_lex_fifo_2_write_engine_stats0_flow_ctrl_ADDRESS 0x80004F34
#define bb_chip_upp_iso_lex_fifo_2_read_engine_ADDRESS 0x80004F38
#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_ADDRESS 0x80004F38
#define bb_chip_upp_iso_lex_fifo_2_read_engine_config0_clear_ADDRESS 0x80004F38
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_ADDRESS 0x80004F3C
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rd2clr_config_ADDRESS 0x80004F3C
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_rflush_act_ADDRESS 0x80004F40
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_drp_pkt_ADDRESS 0x80004F44
#define bb_chip_upp_iso_lex_fifo_2_read_engine_stats0_flow_ctrl_ADDRESS 0x80004F48
#define bb_chip_upp_iso_lex_fifo_3_ADDRESS 0x80004F4C
#define bb_chip_upp_iso_lex_fifo_3_version_ADDRESS 0x80004F4C
#define bb_chip_upp_iso_lex_fifo_3_write_engine_ADDRESS 0x80004F50
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_ADDRESS 0x80004F50
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_clear_ADDRESS 0x80004F50
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_mode_ADDRESS 0x80004F54
#define bb_chip_upp_iso_lex_fifo_3_write_engine_config0_notify_limit_ADDRESS 0x80004F58
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_ADDRESS 0x80004F5C
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_rd2clr_config_ADDRESS 0x80004F5C
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_nfifo_dcount_ADDRESS 0x80004F60
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pfifo_dcount_ADDRESS 0x80004F64
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80004F68
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_fifo_full_err_ADDRESS 0x80004F6C
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_err_ADDRESS 0x80004F70
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_pkt_sop_err_ADDRESS 0x80004F74
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_wflush_act_ADDRESS 0x80004F78
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_rd_ADDRESS 0x80004F7C
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_drp_pkt_wr_ADDRESS 0x80004F80
#define bb_chip_upp_iso_lex_fifo_3_write_engine_stats0_flow_ctrl_ADDRESS 0x80004F84
#define bb_chip_upp_iso_lex_fifo_3_read_engine_ADDRESS 0x80004F88
#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_ADDRESS 0x80004F88
#define bb_chip_upp_iso_lex_fifo_3_read_engine_config0_clear_ADDRESS 0x80004F88
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_ADDRESS 0x80004F8C
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rd2clr_config_ADDRESS 0x80004F8C
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_rflush_act_ADDRESS 0x80004F90
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_drp_pkt_ADDRESS 0x80004F94
#define bb_chip_upp_iso_lex_fifo_3_read_engine_stats0_flow_ctrl_ADDRESS 0x80004F98
#define bb_chip_upp_iso_rex_fifo_ADDRESS 0x80004F9C
#define bb_chip_upp_iso_rex_fifo_version_ADDRESS 0x80004F9C
#define bb_chip_upp_iso_rex_fifo_write_engine_ADDRESS 0x80004FA0
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_ADDRESS 0x80004FA0
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_clear_ADDRESS 0x80004FA0
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_mode_ADDRESS 0x80004FA4
#define bb_chip_upp_iso_rex_fifo_write_engine_config0_notify_limit_ADDRESS 0x80004FA8
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_ADDRESS 0x80004FAC
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_rd2clr_config_ADDRESS 0x80004FAC
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_nfifo_dcount_ADDRESS 0x80004FB0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pfifo_dcount_ADDRESS 0x80004FB4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80004FB8
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_fifo_full_err_ADDRESS 0x80004FBC
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_err_ADDRESS 0x80004FC0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_pkt_sop_err_ADDRESS 0x80004FC4
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_wflush_act_ADDRESS 0x80004FC8
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_rd_ADDRESS 0x80004FCC
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_drp_pkt_wr_ADDRESS 0x80004FD0
#define bb_chip_upp_iso_rex_fifo_write_engine_stats0_flow_ctrl_ADDRESS 0x80004FD4
#define bb_chip_upp_iso_rex_fifo_read_engine_ADDRESS 0x80004FD8
#define bb_chip_upp_iso_rex_fifo_read_engine_config0_ADDRESS 0x80004FD8
#define bb_chip_upp_iso_rex_fifo_read_engine_config0_clear_ADDRESS 0x80004FD8
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_ADDRESS 0x80004FDC
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rd2clr_config_ADDRESS 0x80004FDC
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_rflush_act_ADDRESS 0x80004FE0
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_drp_pkt_ADDRESS 0x80004FE4
#define bb_chip_upp_iso_rex_fifo_read_engine_stats0_flow_ctrl_ADDRESS 0x80004FE8
#define bb_chip_upp_ctrl_trfr_h2d_fifo_ADDRESS 0x80004FEC
#define bb_chip_upp_ctrl_trfr_h2d_fifo_version_ADDRESS 0x80004FEC
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_ADDRESS 0x80004FF0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_ADDRESS 0x80004FF0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_clear_ADDRESS 0x80004FF0
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_mode_ADDRESS 0x80004FF4
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_config0_notify_limit_ADDRESS 0x80004FF8
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_ADDRESS 0x80004FFC
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_rd2clr_config_ADDRESS 0x80004FFC
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_nfifo_dcount_ADDRESS 0x80005000
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pfifo_dcount_ADDRESS 0x80005004
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80005008
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_fifo_full_err_ADDRESS 0x8000500C
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_err_ADDRESS 0x80005010
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_pkt_sop_err_ADDRESS 0x80005014
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_wflush_act_ADDRESS 0x80005018
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_rd_ADDRESS 0x8000501C
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_drp_pkt_wr_ADDRESS 0x80005020
#define bb_chip_upp_ctrl_trfr_h2d_fifo_write_engine_stats0_flow_ctrl_ADDRESS 0x80005024
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_ADDRESS 0x80005028
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_ADDRESS 0x80005028
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_config0_clear_ADDRESS 0x80005028
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_ADDRESS 0x8000502C
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rd2clr_config_ADDRESS 0x8000502C
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_rflush_act_ADDRESS 0x80005030
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_drp_pkt_ADDRESS 0x80005034
#define bb_chip_upp_ctrl_trfr_h2d_fifo_read_engine_stats0_flow_ctrl_ADDRESS 0x80005038
#define bb_chip_upp_ctrl_trfr_d2h_fifo_ADDRESS 0x8000503C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_version_ADDRESS 0x8000503C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_ADDRESS 0x80005040
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_ADDRESS 0x80005040
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_clear_ADDRESS 0x80005040
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_mode_ADDRESS 0x80005044
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_config0_notify_limit_ADDRESS 0x80005048
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_ADDRESS 0x8000504C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_rd2clr_config_ADDRESS 0x8000504C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_nfifo_dcount_ADDRESS 0x80005050
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pfifo_dcount_ADDRESS 0x80005054
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_max_byte_cnt_err_ADDRESS 0x80005058
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_fifo_full_err_ADDRESS 0x8000505C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_err_ADDRESS 0x80005060
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_pkt_sop_err_ADDRESS 0x80005064
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_wflush_act_ADDRESS 0x80005068
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_rd_ADDRESS 0x8000506C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_drp_pkt_wr_ADDRESS 0x80005070
#define bb_chip_upp_ctrl_trfr_d2h_fifo_write_engine_stats0_flow_ctrl_ADDRESS 0x80005074
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_ADDRESS 0x80005078
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_ADDRESS 0x80005078
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_config0_clear_ADDRESS 0x80005078
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_ADDRESS 0x8000507C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rd2clr_config_ADDRESS 0x8000507C
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_rflush_act_ADDRESS 0x80005080
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_drp_pkt_ADDRESS 0x80005084
#define bb_chip_upp_ctrl_trfr_d2h_fifo_read_engine_stats0_flow_ctrl_ADDRESS 0x80005088
#define bb_chip_upp_ctrl_trfr_ADDRESS 0x8000508C
#define bb_chip_upp_ctrl_trfr_h2d_data_ADDRESS 0x8000508C
#define bb_chip_upp_ctrl_trfr_h2d_ctrl_ADDRESS 0x80005090
#define bb_chip_upp_ctrl_trfr_h2d_skip_ADDRESS 0x80005094
#define bb_chip_upp_ctrl_trfr_h2d_dbg_ADDRESS 0x80005098
#define bb_chip_upp_ctrl_trfr_d2h_data_ADDRESS 0x8000509C
#define bb_chip_upp_ctrl_trfr_d2h_ctrl_ADDRESS 0x800050A0
#define bb_chip_upp_ctrl_trfr_d2h_skip_ADDRESS 0x800050A4
#define bb_chip_upp_ctrl_trfr_d2h_dbg_ADDRESS 0x800050A8
#define bb_chip_upp_ctrl_trfr_cmpltd_ADDRESS 0x800050AC
#define bb_chip_upp_endpoint_tbl_ADDRESS 0x800050B0
#define bb_chip_upp_endpoint_tbl_config0_ADDRESS 0x800050B0
#define bb_chip_upp_endpoint_tbl_config1_ADDRESS 0x800050B4
#define bb_chip_upp_endpoint_tbl_total_qid_ADDRESS 0x800050B8
#define bb_chip_upp_endpoint_tbl_qid_assigned0_ADDRESS 0x800050BC
#define bb_chip_upp_stats0_ADDRESS 0x800050C0
#define bb_chip_upp_stats0_rd2clr_config_ADDRESS 0x800050C0
#define bb_chip_upp_stats0_missing_itp_ADDRESS 0x800050C4
#define bb_chip_upp_irq0_ADDRESS 0x800050C8
#define bb_chip_upp_irq0_enable_ADDRESS 0x800050C8
#define bb_chip_upp_irq0_pending_ADDRESS 0x800050CC
#define bb_chip_upp_irq0_pending_irq_ADDRESS 0x800050D0
#define bb_chip_upp_irq0_raw_ADDRESS 0x800050D4
#define bb_chip_upp_irq1_ADDRESS 0x800050D8
#define bb_chip_upp_irq1_enable_ADDRESS 0x800050D8
#define bb_chip_upp_irq1_pending_ADDRESS 0x800050DC
#define bb_chip_upp_irq1_pending_irq_ADDRESS 0x800050E0
#define bb_chip_upp_irq1_raw_ADDRESS 0x800050E4
#define bb_chip_ulp_core_s_ADDRESS 0x80005100
#define bb_chip_ulp_core_version_ADDRESS 0x80005100
#define bb_chip_ulp_core_configuration_ADDRESS 0x80005104
#define bb_chip_ulp_core_control_ADDRESS 0x80005108
#define bb_chip_ulp_core_timer_correction_ADDRESS 0x8000510C
#define bb_chip_ulp_core_ltssm_state_ADDRESS 0x80005110
#define bb_chip_ulp_core_stats0_ADDRESS 0x80005114
#define bb_chip_ulp_core_stats0_rd2clr_config_ADDRESS 0x80005114
#define bb_chip_ulp_core_stats0_tx_lfps_cnt_in_err_ADDRESS 0x80005118
#define bb_chip_ulp_core_stats0_rx_lfps_cnt_in_err_ADDRESS 0x8000511C
#define bb_chip_ulp_core_stats0_tx_framer_ptp_violated_ADDRESS 0x80005120
#define bb_chip_ulp_core_stats0_link_training_ptp_violated_ADDRESS 0x80005124
#define bb_chip_ulp_core_stats0_link_command_ptp_violated_ADDRESS 0x80005128
#define bb_chip_ulp_core_stats0_lmp_ptp_violated_ADDRESS 0x8000512C
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_overflow_ADDRESS 0x80005130
#define bb_chip_ulp_core_stats0_link_command_rx_event_fifo_underflow_ADDRESS 0x80005134
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_overflow_ADDRESS 0x80005138
#define bb_chip_ulp_core_stats0_lmp_rx_event_fifo_underflow_ADDRESS 0x8000513C
#define bb_chip_ulp_core_stats0_remote_rx_hdr_buff_crdt_cnt_in_err_ADDRESS 0x80005140
#define bb_chip_ulp_core_stats0_to_phy_out_sop_ADDRESS 0x80005144
#define bb_chip_ulp_core_stats0_to_phy_out_eop_ADDRESS 0x80005148
#define bb_chip_ulp_core_stats0_go2_u0_from_recovery_ADDRESS 0x8000514C
#define bb_chip_ulp_core_stats0_rx_go_recovery_ADDRESS 0x80005150
#define bb_chip_ulp_core_stats0_snt_lrty_ADDRESS 0x80005154
#define bb_chip_ulp_core_stats0_snt_lbad_ADDRESS 0x80005158
#define bb_chip_ulp_core_stats0_rcvd_lrty_ADDRESS 0x8000515C
#define bb_chip_ulp_core_stats0_rcvd_lbad_ADDRESS 0x80005160
#define bb_chip_ulp_core_ptp_guard_2core_ADDRESS 0x80005164
#define bb_chip_ulp_core_ptp_guard_2core_version_ADDRESS 0x80005164
#define bb_chip_ulp_core_ptp_guard_2core_config0_ADDRESS 0x80005168
#define bb_chip_ulp_core_ptp_guard_2core_config0_fix_ptp_violations_ADDRESS 0x80005168
#define bb_chip_ulp_core_ptp_guard_2core_config0_max_cycles_ADDRESS 0x8000516C
#define bb_chip_ulp_core_ptp_guard_2core_stats0_ADDRESS 0x80005170
#define bb_chip_ulp_core_ptp_guard_2core_stats0_rd2clr_config_ADDRESS 0x80005170
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_sop_err_ADDRESS 0x80005174
#define bb_chip_ulp_core_ptp_guard_2core_stats0_missing_eop_err_ADDRESS 0x80005178
#define bb_chip_ulp_core_ptp_guard_2core_stats0_max_cycle_err_ADDRESS 0x8000517C
#define bb_chip_ulp_core_ptp_guard_2core_irq0_ADDRESS 0x80005180
#define bb_chip_ulp_core_ptp_guard_2core_irq0_enable_ADDRESS 0x80005180
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_ADDRESS 0x80005184
#define bb_chip_ulp_core_ptp_guard_2core_irq0_pending_irq_ADDRESS 0x80005188
#define bb_chip_ulp_core_ptp_guard_2core_irq0_raw_ADDRESS 0x8000518C
#define bb_chip_ulp_core_ptp_guard_2phy_ADDRESS 0x80005190
#define bb_chip_ulp_core_ptp_guard_2phy_version_ADDRESS 0x80005190
#define bb_chip_ulp_core_ptp_guard_2phy_config0_ADDRESS 0x80005194
#define bb_chip_ulp_core_ptp_guard_2phy_config0_fix_ptp_violations_ADDRESS 0x80005194
#define bb_chip_ulp_core_ptp_guard_2phy_config0_max_cycles_ADDRESS 0x80005198
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_ADDRESS 0x8000519C
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_rd2clr_config_ADDRESS 0x8000519C
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_sop_err_ADDRESS 0x800051A0
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_missing_eop_err_ADDRESS 0x800051A4
#define bb_chip_ulp_core_ptp_guard_2phy_stats0_max_cycle_err_ADDRESS 0x800051A8
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_ADDRESS 0x800051AC
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_enable_ADDRESS 0x800051AC
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_ADDRESS 0x800051B0
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_pending_irq_ADDRESS 0x800051B4
#define bb_chip_ulp_core_ptp_guard_2phy_irq0_raw_ADDRESS 0x800051B8
#define bb_chip_ulp_core_irq0_ADDRESS 0x800051BC
#define bb_chip_ulp_core_irq0_enable_ADDRESS 0x800051BC
#define bb_chip_ulp_core_irq0_pending_ADDRESS 0x800051C0
#define bb_chip_ulp_core_irq0_pending_irq_ADDRESS 0x800051C4
#define bb_chip_ulp_core_irq0_raw_ADDRESS 0x800051C8
#define bb_chip_ulp_core_irq1_ADDRESS 0x800051CC
#define bb_chip_ulp_core_irq1_enable_ADDRESS 0x800051CC
#define bb_chip_ulp_core_irq1_pending_ADDRESS 0x800051D0
#define bb_chip_ulp_core_irq1_pending_irq_ADDRESS 0x800051D4
#define bb_chip_ulp_core_irq1_raw_ADDRESS 0x800051D8
#define bb_chip_ulp_phy_s_ADDRESS 0x80005300
#define bb_chip_ulp_phy_version_ADDRESS 0x80005300
#define bb_chip_ulp_phy_pipe_ctrl_ADDRESS 0x80005304
#define bb_chip_ulp_phy_compliancy_ctrl_ADDRESS 0x80005308
#define bb_chip_ulp_phy_stats0_ADDRESS 0x8000530C
#define bb_chip_ulp_phy_stats0_rd2clr_config_ADDRESS 0x8000530C
#define bb_chip_ulp_phy_stats0_rx_8b10b_err_ADDRESS 0x80005310
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_overflow_ADDRESS 0x80005314
#define bb_chip_ulp_phy_stats0_rx_elastic_buff_underflow_ADDRESS 0x80005318
#define bb_chip_ulp_phy_stats0_rx_disparity_err_ADDRESS 0x8000531C
#define bb_chip_ulp_phy_stats1_ADDRESS 0x80005320
#define bb_chip_ulp_phy_stats1_rd2clr_config_ADDRESS 0x80005320
#define bb_chip_ulp_phy_stats1_skp_insert_in_err_ADDRESS 0x80005324
#define bb_chip_ulp_phy_stats1_crc5_chk_failed_ADDRESS 0x80005328
#define bb_chip_ulp_phy_stats1_crc16_chk_failed_ADDRESS 0x8000532C
#define bb_chip_ulp_phy_stats1_dpp_abort_ADDRESS 0x80005330
#define bb_chip_ulp_phy_stats1_rx_framer_ptp_violated_ADDRESS 0x80005334
#define bb_chip_ulp_phy_irq0_ADDRESS 0x80005338
#define bb_chip_ulp_phy_irq0_enable_ADDRESS 0x80005338
#define bb_chip_ulp_phy_irq0_pending_ADDRESS 0x8000533C
#define bb_chip_ulp_phy_irq0_pending_irq_ADDRESS 0x80005340
#define bb_chip_ulp_phy_irq0_raw_ADDRESS 0x80005344

#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_IO_BUS_WIDTH_OFFSET 27
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_IO_BUS_WIDTH_MASK 0x18000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_BUS_RDY_EN_OFFSET 26
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_BUS_RDY_EN_MASK 0x4000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_BUS_RDY_EN 0x4000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_BUS_ERR_EN_OFFSET 25
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_BUS_ERR_EN_MASK 0x2000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_BUS_ERR_EN 0x2000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_IO_WS_OFFSET 20
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_IO_WS_MASK 0xF00000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_IO_EN_OFFSET 19
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_IO_EN_MASK 0x80000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_IO_EN 0x80000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_PROM_WR_EN_OFFSET 11
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_PROM_WR_EN_MASK 0x800
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_PROM_WR_EN 0x800
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_PROM_WIDTH_OFFSET 8
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_PROM_WIDTH_MASK 0x300
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_PROM_WR_WS_OFFSET 4
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_PROM_WR_WS_MASK 0xF0
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_PROM_RD_WS_OFFSET 0
#define BB_CHIP_LEON2_MEM_CTRL_MCFG1_PROM_RD_WS_MASK 0xF
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_REFRESH_OFFSET 31
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_REFRESH_MASK 0x80000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_REFRESH 0x80000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_TRP_OFFSET 30
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_TRP_MASK 0x40000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_TRP 0x40000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_TRFC_OFFSET 27
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_TRFC_MASK 0x38000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_CAS_DLY_OFFSET 26
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_CAS_DLY_MASK 0x4000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_CAS_DLY 0x4000000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_BANK_SIZE_OFFSET 23
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_BANK_SIZE_MASK 0x3800000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_COL_SIZE_OFFSET 21
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_COL_SIZE_MASK 0x600000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_CMD_OFFSET 19
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_CMD_MASK 0x180000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_64_OFFSET 18
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_64_MASK 0x40000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_64 0x40000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_ENABLE_OFFSET 14
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_ENABLE_MASK 0x4000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SDRAM_ENABLE 0x4000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SRAM_DISABLE_OFFSET 13
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SRAM_DISABLE_MASK 0x2000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_SRAM_DISABLE 0x2000
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RAM_BANK_SIZE_OFFSET 9
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RAM_BANK_SIZE_MASK 0x1E00
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_BUS_RDY_EN_OFFSET 7
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_BUS_RDY_EN_MASK 0x80
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_BUS_RDY_EN 0x80
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RMW_OFFSET 6
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RMW_MASK 0x40
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RMW 0x40
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RAM_WIDTH_OFFSET 4
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RAM_WIDTH_MASK 0x30
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RAM_WR_WS_OFFSET 2
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RAM_WR_WS_MASK 0xC
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RAM_RD_WS_OFFSET 0
#define BB_CHIP_LEON2_MEM_CTRL_MCFG2_RAM_RD_WS_MASK 0x3
#define BB_CHIP_LEON2_MEM_CTRL_MCFG3_SDRAM_REFRESH_VAL_OFFSET 12
#define BB_CHIP_LEON2_MEM_CTRL_MCFG3_SDRAM_REFRESH_VAL_MASK 0x7FFF000
#define BB_CHIP_LEON2_AHB_STAT_AHB_FAILING_AHB_FAILING_OFFSET 0
#define BB_CHIP_LEON2_AHB_STAT_AHB_FAILING_AHB_FAILING_MASK 0xFFFFFFFF
#define BB_CHIP_LEON2_AHB_STAT_AHB_STATUS_ERROR_OFFSET 8
#define BB_CHIP_LEON2_AHB_STAT_AHB_STATUS_ERROR_MASK 0x100
#define BB_CHIP_LEON2_AHB_STAT_AHB_STATUS_ERROR 0x100
#define BB_CHIP_LEON2_AHB_STAT_AHB_STATUS_RW_OFFSET 7
#define BB_CHIP_LEON2_AHB_STAT_AHB_STATUS_RW_MASK 0x80
#define BB_CHIP_LEON2_AHB_STAT_AHB_STATUS_RW 0x80
#define BB_CHIP_LEON2_AHB_STAT_AHB_STATUS_HMASTER_OFFSET 3
#define BB_CHIP_LEON2_AHB_STAT_AHB_STATUS_HMASTER_MASK 0x78
#define BB_CHIP_LEON2_AHB_STAT_AHB_STATUS_HSIZE_OFFSET 0
#define BB_CHIP_LEON2_AHB_STAT_AHB_STATUS_HSIZE_MASK 0x7
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DREPL_OFFSET 30
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DREPL_MASK 0xC0000000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_IREPL_OFFSET 28
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_IREPL_MASK 0x30000000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_ISETS_OFFSET 26
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_ISETS_MASK 0xC000000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DSETS_OFFSET 24
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DSETS_MASK 0x3000000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DS_OFFSET 23
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DS_MASK 0x800000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DS 0x800000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_FD_OFFSET 22
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_FD_MASK 0x400000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_FD 0x400000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_FI_OFFSET 21
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_FI_MASK 0x200000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_FI 0x200000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_IB_OFFSET 16
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_IB_MASK 0x10000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_IB 0x10000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_IP_OFFSET 15
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_IP_MASK 0x8000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_IP 0x8000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DP_OFFSET 14
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DP_MASK 0x4000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DP 0x4000
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DCF_OFFSET 5
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DCF_MASK 0x20
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DCF 0x20
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_ICF_OFFSET 4
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_ICF_MASK 0x10
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_ICF 0x10
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DCS_OFFSET 2
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_DCS_MASK 0xC
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_ICS_OFFSET 0
#define BB_CHIP_LEON2_CACHE_CONTROLLER_CACHE_CONTROL_ICS_MASK 0x3
#define BB_CHIP_LEON2_CACHE_CONTROLLER_POWER_DOWN_PD_OFFSET 0
#define BB_CHIP_LEON2_CACHE_CONTROLLER_POWER_DOWN_PD_MASK 0xFFFFFFFF
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT1_EN_OFFSET 31
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT1_EN_MASK 0x80000000
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT1_EN 0x80000000
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT1_BP_OFFSET 30
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT1_BP_MASK 0x40000000
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT1_BP 0x40000000
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT1_TAG_OFFSET 15
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT1_TAG_MASK 0x3FFF8000
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT1_MASK_OFFSET 0
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT1_MASK_MASK 0x7FFF
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT2_EN_OFFSET 31
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT2_EN_MASK 0x80000000
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT2_EN 0x80000000
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT2_BP_OFFSET 30
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT2_BP_MASK 0x40000000
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT2_BP 0x40000000
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT2_TAG_OFFSET 15
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT2_TAG_MASK 0x3FFF8000
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT2_MASK_OFFSET 0
#define BB_CHIP_LEON2_WRITE_PROT_WRITE_PROT2_MASK_MASK 0x7FFF
#define BB_CHIP_LEON2_LEON_CONFIG_DSU_OFFSET 30
#define BB_CHIP_LEON2_LEON_CONFIG_DSU_MASK 0x40000000
#define BB_CHIP_LEON2_LEON_CONFIG_DSU 0x40000000
#define BB_CHIP_LEON2_LEON_CONFIG_SDRAM_CTRL_OFFSET 29
#define BB_CHIP_LEON2_LEON_CONFIG_SDRAM_CTRL_MASK 0x20000000
#define BB_CHIP_LEON2_LEON_CONFIG_SDRAM_CTRL 0x20000000
#define BB_CHIP_LEON2_LEON_CONFIG_NUM_WP_OFFSET 26
#define BB_CHIP_LEON2_LEON_CONFIG_NUM_WP_MASK 0x1C000000
#define BB_CHIP_LEON2_LEON_CONFIG_MAC_OFFSET 25
#define BB_CHIP_LEON2_LEON_CONFIG_MAC_MASK 0x2000000
#define BB_CHIP_LEON2_LEON_CONFIG_MAC 0x2000000
#define BB_CHIP_LEON2_LEON_CONFIG_NWINDOWS_OFFSET 20
#define BB_CHIP_LEON2_LEON_CONFIG_NWINDOWS_MASK 0x1F00000
#define BB_CHIP_LEON2_LEON_CONFIG_ICSZ_OFFSET 17
#define BB_CHIP_LEON2_LEON_CONFIG_ICSZ_MASK 0xE0000
#define BB_CHIP_LEON2_LEON_CONFIG_ILSZ_OFFSET 15
#define BB_CHIP_LEON2_LEON_CONFIG_ILSZ_MASK 0x18000
#define BB_CHIP_LEON2_LEON_CONFIG_DCSZ_OFFSET 12
#define BB_CHIP_LEON2_LEON_CONFIG_DCSZ_MASK 0x7000
#define BB_CHIP_LEON2_LEON_CONFIG_DLSZ_OFFSET 10
#define BB_CHIP_LEON2_LEON_CONFIG_DLSZ_MASK 0xC00
#define BB_CHIP_LEON2_LEON_CONFIG_DIV_OFFSET 9
#define BB_CHIP_LEON2_LEON_CONFIG_DIV_MASK 0x200
#define BB_CHIP_LEON2_LEON_CONFIG_DIV 0x200
#define BB_CHIP_LEON2_LEON_CONFIG_MUL_OFFSET 8
#define BB_CHIP_LEON2_LEON_CONFIG_MUL_MASK 0x100
#define BB_CHIP_LEON2_LEON_CONFIG_MUL 0x100
#define BB_CHIP_LEON2_LEON_CONFIG_AHB_STAT_OFFSET 6
#define BB_CHIP_LEON2_LEON_CONFIG_AHB_STAT_MASK 0x40
#define BB_CHIP_LEON2_LEON_CONFIG_AHB_STAT 0x40
#define BB_CHIP_LEON2_LEON_CONFIG_FPU_OFFSET 4
#define BB_CHIP_LEON2_LEON_CONFIG_FPU_MASK 0x30
#define BB_CHIP_LEON2_LEON_CONFIG_PCI_CORE_OFFSET 2
#define BB_CHIP_LEON2_LEON_CONFIG_PCI_CORE_MASK 0xC
#define BB_CHIP_LEON2_LEON_CONFIG_WRITE_PROT_OFFSET 0
#define BB_CHIP_LEON2_LEON_CONFIG_WRITE_PROT_MASK 0x3
#define BB_CHIP_LEON2_TIMERS_TIMER1_COUNTER_COUNTER_OFFSET 0
#define BB_CHIP_LEON2_TIMERS_TIMER1_COUNTER_COUNTER_MASK 0xFFFFFF
#define BB_CHIP_LEON2_TIMERS_TIMER1_RELOAD_RELOAD_OFFSET 0
#define BB_CHIP_LEON2_TIMERS_TIMER1_RELOAD_RELOAD_MASK 0xFFFFFF
#define BB_CHIP_LEON2_TIMERS_TIMER1_CONTROL_LD_OFFSET 2
#define BB_CHIP_LEON2_TIMERS_TIMER1_CONTROL_LD_MASK 0x4
#define BB_CHIP_LEON2_TIMERS_TIMER1_CONTROL_LD 0x4
#define BB_CHIP_LEON2_TIMERS_TIMER1_CONTROL_RL_OFFSET 1
#define BB_CHIP_LEON2_TIMERS_TIMER1_CONTROL_RL_MASK 0x2
#define BB_CHIP_LEON2_TIMERS_TIMER1_CONTROL_RL 0x2
#define BB_CHIP_LEON2_TIMERS_TIMER1_CONTROL_EN_OFFSET 0
#define BB_CHIP_LEON2_TIMERS_TIMER1_CONTROL_EN_MASK 0x1
#define BB_CHIP_LEON2_TIMERS_TIMER1_CONTROL_EN 0x1
#define BB_CHIP_LEON2_TIMERS_WATCHDOG_COUNTER_COUNTER_OFFSET 0
#define BB_CHIP_LEON2_TIMERS_WATCHDOG_COUNTER_COUNTER_MASK 0xFFFFFF
#define BB_CHIP_LEON2_TIMERS_TIMER2_COUNTER_COUNTER_OFFSET 0
#define BB_CHIP_LEON2_TIMERS_TIMER2_COUNTER_COUNTER_MASK 0xFFFFFF
#define BB_CHIP_LEON2_TIMERS_TIMER2_RELOAD_RELOAD_OFFSET 0
#define BB_CHIP_LEON2_TIMERS_TIMER2_RELOAD_RELOAD_MASK 0xFFFFFF
#define BB_CHIP_LEON2_TIMERS_TIMER2_CONTROL_LD_OFFSET 2
#define BB_CHIP_LEON2_TIMERS_TIMER2_CONTROL_LD_MASK 0x4
#define BB_CHIP_LEON2_TIMERS_TIMER2_CONTROL_LD 0x4
#define BB_CHIP_LEON2_TIMERS_TIMER2_CONTROL_RL_OFFSET 1
#define BB_CHIP_LEON2_TIMERS_TIMER2_CONTROL_RL_MASK 0x2
#define BB_CHIP_LEON2_TIMERS_TIMER2_CONTROL_RL 0x2
#define BB_CHIP_LEON2_TIMERS_TIMER2_CONTROL_EN_OFFSET 0
#define BB_CHIP_LEON2_TIMERS_TIMER2_CONTROL_EN_MASK 0x1
#define BB_CHIP_LEON2_TIMERS_TIMER2_CONTROL_EN 0x1
#define BB_CHIP_LEON2_TIMERS_PRESCALER_COUNTER_COUNTER_OFFSET 0
#define BB_CHIP_LEON2_TIMERS_PRESCALER_COUNTER_COUNTER_MASK 0x3FF
#define BB_CHIP_LEON2_TIMERS_PRESCALER_RELOAD_RELOAD_OFFSET 0
#define BB_CHIP_LEON2_TIMERS_PRESCALER_RELOAD_RELOAD_MASK 0x3FF
#define BB_CHIP_LEON2_UARTS_UART1_DATA_DATA_OFFSET 0
#define BB_CHIP_LEON2_UARTS_UART1_DATA_DATA_MASK 0xFF
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_FE_OFFSET 6
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_FE_MASK 0x40
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_FE 0x40
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_PE_OFFSET 5
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_PE_MASK 0x20
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_PE 0x20
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_OV_OFFSET 4
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_OV_MASK 0x10
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_OV 0x10
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_BR_OFFSET 3
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_BR_MASK 0x8
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_BR 0x8
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_TH_OFFSET 2
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_TH_MASK 0x4
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_TH 0x4
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_TS_OFFSET 1
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_TS_MASK 0x2
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_TS 0x2
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_DR_OFFSET 0
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_DR_MASK 0x1
#define BB_CHIP_LEON2_UARTS_UART1_STATUS_DR 0x1
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_EC_OFFSET 8
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_EC_MASK 0x100
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_EC 0x100
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_LB_OFFSET 7
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_LB_MASK 0x80
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_LB 0x80
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_FL_OFFSET 6
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_FL_MASK 0x40
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_FL 0x40
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_PE_OFFSET 5
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_PE_MASK 0x20
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_PE 0x20
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_PS_OFFSET 4
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_PS_MASK 0x10
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_PS 0x10
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_TI_OFFSET 3
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_TI_MASK 0x8
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_TI 0x8
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_RI_OFFSET 2
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_RI_MASK 0x4
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_RI 0x4
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_TE_OFFSET 1
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_TE_MASK 0x2
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_TE 0x2
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_RE_OFFSET 0
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_RE_MASK 0x1
#define BB_CHIP_LEON2_UARTS_UART1_CONTROL_RE 0x1
#define BB_CHIP_LEON2_UARTS_UART1_SCALER_SCALER_OFFSET 0
#define BB_CHIP_LEON2_UARTS_UART1_SCALER_SCALER_MASK 0xFFF
#define BB_CHIP_LEON2_UARTS_UART2_DATA_DATA_OFFSET 0
#define BB_CHIP_LEON2_UARTS_UART2_DATA_DATA_MASK 0xFF
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_FE_OFFSET 6
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_FE_MASK 0x40
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_FE 0x40
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_PE_OFFSET 5
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_PE_MASK 0x20
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_PE 0x20
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_OV_OFFSET 4
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_OV_MASK 0x10
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_OV 0x10
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_BR_OFFSET 3
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_BR_MASK 0x8
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_BR 0x8
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_TH_OFFSET 2
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_TH_MASK 0x4
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_TH 0x4
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_TS_OFFSET 1
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_TS_MASK 0x2
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_TS 0x2
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_DR_OFFSET 0
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_DR_MASK 0x1
#define BB_CHIP_LEON2_UARTS_UART2_STATUS_DR 0x1
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_EC_OFFSET 8
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_EC_MASK 0x100
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_EC 0x100
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_LB_OFFSET 7
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_LB_MASK 0x80
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_LB 0x80
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_FL_OFFSET 6
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_FL_MASK 0x40
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_FL 0x40
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_PE_OFFSET 5
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_PE_MASK 0x20
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_PE 0x20
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_PS_OFFSET 4
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_PS_MASK 0x10
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_PS 0x10
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_TI_OFFSET 3
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_TI_MASK 0x8
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_TI 0x8
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_RI_OFFSET 2
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_RI_MASK 0x4
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_RI 0x4
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_TE_OFFSET 1
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_TE_MASK 0x2
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_TE 0x2
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_RE_OFFSET 0
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_RE_MASK 0x1
#define BB_CHIP_LEON2_UARTS_UART2_CONTROL_RE 0x1
#define BB_CHIP_LEON2_UARTS_UART2_SCALER_SCALER_OFFSET 0
#define BB_CHIP_LEON2_UARTS_UART2_SCALER_SCALER_MASK 0xFFF
#define BB_CHIP_LEON2_IRQCTRL_INT_MASK_ILEVEL_OFFSET 17
#define BB_CHIP_LEON2_IRQCTRL_INT_MASK_ILEVEL_MASK 0xFFFE0000
#define BB_CHIP_LEON2_IRQCTRL_INT_MASK_IMASK_OFFSET 1
#define BB_CHIP_LEON2_IRQCTRL_INT_MASK_IMASK_MASK 0xFFFE
#define BB_CHIP_LEON2_IRQCTRL_INT_PENDING_IPEND_OFFSET 1
#define BB_CHIP_LEON2_IRQCTRL_INT_PENDING_IPEND_MASK 0xFFFE
#define BB_CHIP_LEON2_IRQCTRL_INT_FORCE_IFORCE_OFFSET 1
#define BB_CHIP_LEON2_IRQCTRL_INT_FORCE_IFORCE_MASK 0xFFFE
#define BB_CHIP_LEON2_IRQCTRL_INT_CLEAR_ICLEAR_OFFSET 1
#define BB_CHIP_LEON2_IRQCTRL_INT_CLEAR_ICLEAR_MASK 0xFFFE
#define BB_CHIP_LEON2_IO_PORT_IO_VAL_IOVAL_OFFSET 0
#define BB_CHIP_LEON2_IO_PORT_IO_VAL_IOVAL_MASK 0xFFFF
#define BB_CHIP_LEON2_IO_PORT_IO_DIR_IODIR_OFFSET 0
#define BB_CHIP_LEON2_IO_PORT_IO_DIR_IODIR_MASK 0x3FFFF
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN3_OFFSET 31
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN3_MASK 0x80000000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN3 0x80000000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE3_OFFSET 30
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE3_MASK 0x40000000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE3 0x40000000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL3_OFFSET 29
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL3_MASK 0x20000000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL3 0x20000000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_ISEL3_OFFSET 24
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_ISEL3_MASK 0x1F000000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN2_OFFSET 23
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN2_MASK 0x800000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN2 0x800000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE2_OFFSET 22
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE2_MASK 0x400000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE2 0x400000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL2_OFFSET 21
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL2_MASK 0x200000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL2 0x200000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_ISEL2_OFFSET 16
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_ISEL2_MASK 0x1F0000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN1_OFFSET 15
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN1_MASK 0x8000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN1 0x8000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE1_OFFSET 14
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE1_MASK 0x4000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE1 0x4000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL1_OFFSET 13
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL1_MASK 0x2000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL1 0x2000
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_ISEL1_OFFSET 8
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_ISEL1_MASK 0x1F00
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN0_OFFSET 7
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN0_MASK 0x80
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_EN0 0x80
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE0_OFFSET 6
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE0_MASK 0x40
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_LE0 0x40
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL0_OFFSET 5
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL0_MASK 0x20
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_PL0 0x20
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_ISEL0_OFFSET 0
#define BB_CHIP_LEON2_IO_PORT_IO_INT_CFG_ISEL0_MASK 0x1F
#define BB_CHIP_LEON2_IRQCTRL2_INT_MASK_IMASK_OFFSET 0
#define BB_CHIP_LEON2_IRQCTRL2_INT_MASK_IMASK_MASK 0xFFFFFFFF
#define BB_CHIP_LEON2_IRQCTRL2_INT_PENDING_IPEND_OFFSET 0
#define BB_CHIP_LEON2_IRQCTRL2_INT_PENDING_IPEND_MASK 0xFFFFFFFF
#define BB_CHIP_LEON2_IRQCTRL2_INT_STATUS_CLEAR_ICLEAR_OFFSET 6
#define BB_CHIP_LEON2_IRQCTRL2_INT_STATUS_CLEAR_ICLEAR_MASK 0xFFFFFFC0
#define BB_CHIP_LEON2_IRQCTRL2_INT_STATUS_CLEAR_IP_OR_ICLEAR_OFFSET 5
#define BB_CHIP_LEON2_IRQCTRL2_INT_STATUS_CLEAR_IP_OR_ICLEAR_MASK 0x20
#define BB_CHIP_LEON2_IRQCTRL2_INT_STATUS_CLEAR_IP_OR_ICLEAR 0x20
#define BB_CHIP_LEON2_IRQCTRL2_INT_STATUS_CLEAR_IRL_OR_ICLEAR_OFFSET 0
#define BB_CHIP_LEON2_IRQCTRL2_INT_STATUS_CLEAR_IRL_OR_ICLEAR_MASK 0x1F
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_FE_OFFSET 6
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_FE_MASK 0x40
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_FE 0x40
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_OV_OFFSET 4
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_OV_MASK 0x10
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_OV 0x10
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_TH_OFFSET 2
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_TH_MASK 0x4
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_TH 0x4
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_TS_OFFSET 1
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_TS_MASK 0x2
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_TS 0x2
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_DR_OFFSET 0
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_DR_MASK 0x1
#define BB_CHIP_LEON2_DSU_UART_DSU_STATUS_DR 0x1
#define BB_CHIP_LEON2_DSU_UART_DSU_CONTROL_BL_OFFSET 1
#define BB_CHIP_LEON2_DSU_UART_DSU_CONTROL_BL_MASK 0x2
#define BB_CHIP_LEON2_DSU_UART_DSU_CONTROL_BL 0x2
#define BB_CHIP_LEON2_DSU_UART_DSU_CONTROL_EN_OFFSET 0
#define BB_CHIP_LEON2_DSU_UART_DSU_CONTROL_EN_MASK 0x1
#define BB_CHIP_LEON2_DSU_UART_DSU_CONTROL_EN 0x1
#define BB_CHIP_LEON2_DSU_UART_DSU_SCALER_SCALER_OFFSET 0
#define BB_CHIP_LEON2_DSU_UART_DSU_SCALER_SCALER_MASK 0x3FFF
#define BB_CHIP_UART_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_UART_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_UART_VERSION_MINOR_OFFSET 8
#define BB_CHIP_UART_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_UART_VERSION_PATCH_OFFSET 0
#define BB_CHIP_UART_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_UART_TX_FIFO_FIFO_CLEAR_OFFSET 31
#define BB_CHIP_UART_TX_FIFO_FIFO_CLEAR_MASK 0x80000000
#define BB_CHIP_UART_TX_FIFO_FIFO_CLEAR 0x80000000
#define BB_CHIP_UART_TX_FIFO_FIFO_AF_OFFSET 27
#define BB_CHIP_UART_TX_FIFO_FIFO_AF_MASK 0x8000000
#define BB_CHIP_UART_TX_FIFO_FIFO_AF 0x8000000
#define BB_CHIP_UART_TX_FIFO_FIFO_AE_OFFSET 26
#define BB_CHIP_UART_TX_FIFO_FIFO_AE_MASK 0x4000000
#define BB_CHIP_UART_TX_FIFO_FIFO_AE 0x4000000
#define BB_CHIP_UART_TX_FIFO_FIFO_FULL_OFFSET 25
#define BB_CHIP_UART_TX_FIFO_FIFO_FULL_MASK 0x2000000
#define BB_CHIP_UART_TX_FIFO_FIFO_FULL 0x2000000
#define BB_CHIP_UART_TX_FIFO_FIFO_EMPTY_OFFSET 24
#define BB_CHIP_UART_TX_FIFO_FIFO_EMPTY_MASK 0x1000000
#define BB_CHIP_UART_TX_FIFO_FIFO_EMPTY 0x1000000
#define BB_CHIP_UART_TX_FIFO_FIFO_AFT_OFFSET 16
#define BB_CHIP_UART_TX_FIFO_FIFO_AFT_MASK 0xFF0000
#define BB_CHIP_UART_TX_FIFO_FIFO_AET_OFFSET 8
#define BB_CHIP_UART_TX_FIFO_FIFO_AET_MASK 0xFF00
#define BB_CHIP_UART_TX_FIFO_FIFO_DEPTH_OFFSET 0
#define BB_CHIP_UART_TX_FIFO_FIFO_DEPTH_MASK 0xFF
#define BB_CHIP_UART_RX_FIFO_FIFO_CLEAR_OFFSET 31
#define BB_CHIP_UART_RX_FIFO_FIFO_CLEAR_MASK 0x80000000
#define BB_CHIP_UART_RX_FIFO_FIFO_CLEAR 0x80000000
#define BB_CHIP_UART_RX_FIFO_FIFO_AF_OFFSET 27
#define BB_CHIP_UART_RX_FIFO_FIFO_AF_MASK 0x8000000
#define BB_CHIP_UART_RX_FIFO_FIFO_AF 0x8000000
#define BB_CHIP_UART_RX_FIFO_FIFO_AE_OFFSET 26
#define BB_CHIP_UART_RX_FIFO_FIFO_AE_MASK 0x4000000
#define BB_CHIP_UART_RX_FIFO_FIFO_AE 0x4000000
#define BB_CHIP_UART_RX_FIFO_FIFO_FULL_OFFSET 25
#define BB_CHIP_UART_RX_FIFO_FIFO_FULL_MASK 0x2000000
#define BB_CHIP_UART_RX_FIFO_FIFO_FULL 0x2000000
#define BB_CHIP_UART_RX_FIFO_FIFO_EMPTY_OFFSET 24
#define BB_CHIP_UART_RX_FIFO_FIFO_EMPTY_MASK 0x1000000
#define BB_CHIP_UART_RX_FIFO_FIFO_EMPTY 0x1000000
#define BB_CHIP_UART_RX_FIFO_FIFO_AFT_OFFSET 16
#define BB_CHIP_UART_RX_FIFO_FIFO_AFT_MASK 0xFF0000
#define BB_CHIP_UART_RX_FIFO_FIFO_AET_OFFSET 8
#define BB_CHIP_UART_RX_FIFO_FIFO_AET_MASK 0xFF00
#define BB_CHIP_UART_RX_FIFO_FIFO_DEPTH_OFFSET 0
#define BB_CHIP_UART_RX_FIFO_FIFO_DEPTH_MASK 0xFF
#define BB_CHIP_UART_TX_DATA_VAL_OFFSET 0
#define BB_CHIP_UART_TX_DATA_VAL_MASK 0xFF
#define BB_CHIP_UART_RX_DATA_VAL_OFFSET 0
#define BB_CHIP_UART_RX_DATA_VAL_MASK 0xFF
#define BB_CHIP_UART_CONTROL_PRESCALER_OFFSET 16
#define BB_CHIP_UART_CONTROL_PRESCALER_MASK 0xFFFF0000
#define BB_CHIP_UART_CONTROL_TX_IRQ_EN_OFFSET 3
#define BB_CHIP_UART_CONTROL_TX_IRQ_EN_MASK 0x8
#define BB_CHIP_UART_CONTROL_TX_IRQ_EN 0x8
#define BB_CHIP_UART_CONTROL_RX_IRQ_EN_OFFSET 2
#define BB_CHIP_UART_CONTROL_RX_IRQ_EN_MASK 0x4
#define BB_CHIP_UART_CONTROL_RX_IRQ_EN 0x4
#define BB_CHIP_UART_CONTROL_TX_EN_OFFSET 1
#define BB_CHIP_UART_CONTROL_TX_EN_MASK 0x2
#define BB_CHIP_UART_CONTROL_TX_EN 0x2
#define BB_CHIP_UART_CONTROL_RX_EN_OFFSET 0
#define BB_CHIP_UART_CONTROL_RX_EN_MASK 0x1
#define BB_CHIP_UART_CONTROL_RX_EN 0x1
#define BB_CHIP_UART_TIMEOUT_VAL_OFFSET 0
#define BB_CHIP_UART_TIMEOUT_VAL_MASK 0xFFFFFFFF
#define BB_CHIP_UART_ERRORS_OVERRUN_ERR_OFFSET 2
#define BB_CHIP_UART_ERRORS_OVERRUN_ERR_MASK 0x4
#define BB_CHIP_UART_ERRORS_OVERRUN_ERR 0x4
#define BB_CHIP_UART_ERRORS_STOP_ERR_OFFSET 1
#define BB_CHIP_UART_ERRORS_STOP_ERR_MASK 0x2
#define BB_CHIP_UART_ERRORS_STOP_ERR 0x2
#define BB_CHIP_UART_ERRORS_START_ERR_OFFSET 0
#define BB_CHIP_UART_ERRORS_START_ERR_MASK 0x1
#define BB_CHIP_UART_ERRORS_START_ERR 0x1
#define BB_CHIP_I2C_MASTER_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_I2C_MASTER_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_I2C_MASTER_VERSION_MINOR_OFFSET 8
#define BB_CHIP_I2C_MASTER_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_I2C_MASTER_VERSION_PATCH_OFFSET 0
#define BB_CHIP_I2C_MASTER_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_I2C_MASTER_PRESCALER_PRESCALER_OFFSET 0
#define BB_CHIP_I2C_MASTER_PRESCALER_PRESCALER_MASK 0xFFFF
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_AF_OFFSET 27
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_AF_MASK 0x8000000
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_AF 0x8000000
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_AE_OFFSET 26
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_AE_MASK 0x4000000
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_AE 0x4000000
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_FULL_OFFSET 25
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_FULL_MASK 0x2000000
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_FULL 0x2000000
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_EMPTY_OFFSET 24
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_EMPTY_MASK 0x1000000
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_EMPTY 0x1000000
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_AFT_OFFSET 16
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_AFT_MASK 0xFF0000
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_AET_OFFSET 8
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_AET_MASK 0xFF00
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_DEPTH_OFFSET 0
#define BB_CHIP_I2C_MASTER_FIFO_FIFO_DEPTH_MASK 0xFF
#define BB_CHIP_I2C_MASTER_CONTROL_ERROR_OFFSET 31
#define BB_CHIP_I2C_MASTER_CONTROL_ERROR_MASK 0x80000000
#define BB_CHIP_I2C_MASTER_CONTROL_ERROR 0x80000000
#define BB_CHIP_I2C_MASTER_CONTROL_CLOCK_STRETCH_ACTIVE_OFFSET 30
#define BB_CHIP_I2C_MASTER_CONTROL_CLOCK_STRETCH_ACTIVE_MASK 0x40000000
#define BB_CHIP_I2C_MASTER_CONTROL_CLOCK_STRETCH_ACTIVE 0x40000000
#define BB_CHIP_I2C_MASTER_CONTROL_FORCE_SDA_LOW_OFFSET 25
#define BB_CHIP_I2C_MASTER_CONTROL_FORCE_SDA_LOW_MASK 0x2000000
#define BB_CHIP_I2C_MASTER_CONTROL_FORCE_SDA_LOW 0x2000000
#define BB_CHIP_I2C_MASTER_CONTROL_SLAVE_ADDR_OFFSET 14
#define BB_CHIP_I2C_MASTER_CONTROL_SLAVE_ADDR_MASK 0x1FC000
#define BB_CHIP_I2C_MASTER_CONTROL_READ_BYTE_COUNT_OFFSET 6
#define BB_CHIP_I2C_MASTER_CONTROL_READ_BYTE_COUNT_MASK 0x3FC0
#define BB_CHIP_I2C_MASTER_CONTROL_CLEAR_OFFSET 5
#define BB_CHIP_I2C_MASTER_CONTROL_CLEAR_MASK 0x20
#define BB_CHIP_I2C_MASTER_CONTROL_CLEAR 0x20
#define BB_CHIP_I2C_MASTER_CONTROL_OPMODE_OFFSET 2
#define BB_CHIP_I2C_MASTER_CONTROL_OPMODE_MASK 0xC
#define BB_CHIP_I2C_MASTER_CONTROL_CLOCK_STRETCH_EN_OFFSET 1
#define BB_CHIP_I2C_MASTER_CONTROL_CLOCK_STRETCH_EN_MASK 0x2
#define BB_CHIP_I2C_MASTER_CONTROL_CLOCK_STRETCH_EN 0x2
#define BB_CHIP_I2C_MASTER_CONTROL_GO_OFFSET 0
#define BB_CHIP_I2C_MASTER_CONTROL_GO_MASK 0x1
#define BB_CHIP_I2C_MASTER_CONTROL_GO 0x1
#define BB_CHIP_I2C_MASTER_WR_DATA_WR_DATA_OFFSET 0
#define BB_CHIP_I2C_MASTER_WR_DATA_WR_DATA_MASK 0xFF
#define BB_CHIP_I2C_MASTER_RD_DATA_RD_DATA_OFFSET 0
#define BB_CHIP_I2C_MASTER_RD_DATA_RD_DATA_MASK 0xFF
#define BB_CHIP_I2C_MASTER_IRQ_ENABLE_FIFO_AE_OFFSET 2
#define BB_CHIP_I2C_MASTER_IRQ_ENABLE_FIFO_AE_MASK 0x4
#define BB_CHIP_I2C_MASTER_IRQ_ENABLE_FIFO_AE 0x4
#define BB_CHIP_I2C_MASTER_IRQ_ENABLE_FIFO_AF_OFFSET 1
#define BB_CHIP_I2C_MASTER_IRQ_ENABLE_FIFO_AF_MASK 0x2
#define BB_CHIP_I2C_MASTER_IRQ_ENABLE_FIFO_AF 0x2
#define BB_CHIP_I2C_MASTER_IRQ_ENABLE_DONE_OFFSET 0
#define BB_CHIP_I2C_MASTER_IRQ_ENABLE_DONE_MASK 0x1
#define BB_CHIP_I2C_MASTER_IRQ_ENABLE_DONE 0x1
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_FIFO_AE_OFFSET 2
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_FIFO_AE_MASK 0x4
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_FIFO_AE 0x4
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_FIFO_AF_OFFSET 1
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_FIFO_AF_MASK 0x2
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_FIFO_AF 0x2
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_DONE_OFFSET 0
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_DONE_MASK 0x1
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_DONE 0x1
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_IRQ_FIFO_AE_OFFSET 2
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_IRQ_FIFO_AE_MASK 0x4
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_IRQ_FIFO_AE 0x4
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_IRQ_FIFO_AF_OFFSET 1
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_IRQ_FIFO_AF_MASK 0x2
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_IRQ_FIFO_AF 0x2
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_IRQ_DONE_OFFSET 0
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_IRQ_DONE_MASK 0x1
#define BB_CHIP_I2C_MASTER_IRQ_PENDING_IRQ_DONE 0x1
#define BB_CHIP_I2C_MASTER_IRQ_RAW_FIFO_AE_OFFSET 2
#define BB_CHIP_I2C_MASTER_IRQ_RAW_FIFO_AE_MASK 0x4
#define BB_CHIP_I2C_MASTER_IRQ_RAW_FIFO_AE 0x4
#define BB_CHIP_I2C_MASTER_IRQ_RAW_FIFO_AF_OFFSET 1
#define BB_CHIP_I2C_MASTER_IRQ_RAW_FIFO_AF_MASK 0x2
#define BB_CHIP_I2C_MASTER_IRQ_RAW_FIFO_AF 0x2
#define BB_CHIP_I2C_MASTER_IRQ_RAW_DONE_OFFSET 0
#define BB_CHIP_I2C_MASTER_IRQ_RAW_DONE_MASK 0x1
#define BB_CHIP_I2C_MASTER_IRQ_RAW_DONE 0x1
#define BB_CHIP_I2C_SLAVE_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_I2C_SLAVE_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_I2C_SLAVE_VERSION_MINOR_OFFSET 8
#define BB_CHIP_I2C_SLAVE_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_I2C_SLAVE_VERSION_PATCH_OFFSET 0
#define BB_CHIP_I2C_SLAVE_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_CLEAR_OFFSET 31
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_CLEAR_MASK 0x80000000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_CLEAR 0x80000000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_AF_OFFSET 27
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_AF_MASK 0x8000000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_AF 0x8000000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_AE_OFFSET 26
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_AE_MASK 0x4000000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_AE 0x4000000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_FULL_OFFSET 25
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_FULL_MASK 0x2000000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_FULL 0x2000000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_EMPTY_OFFSET 24
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_EMPTY_MASK 0x1000000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_EMPTY 0x1000000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_AFT_OFFSET 16
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_AFT_MASK 0xFF0000
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_AET_OFFSET 8
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_AET_MASK 0xFF00
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_DEPTH_OFFSET 0
#define BB_CHIP_I2C_SLAVE_IN_FIFO_FIFO_DEPTH_MASK 0xFF
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_CLEAR_OFFSET 31
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_CLEAR_MASK 0x80000000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_CLEAR 0x80000000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_AF_OFFSET 27
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_AF_MASK 0x8000000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_AF 0x8000000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_AE_OFFSET 26
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_AE_MASK 0x4000000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_AE 0x4000000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_FULL_OFFSET 25
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_FULL_MASK 0x2000000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_FULL 0x2000000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_EMPTY_OFFSET 24
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_EMPTY_MASK 0x1000000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_EMPTY 0x1000000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_AFT_OFFSET 16
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_AFT_MASK 0xFF0000
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_AET_OFFSET 8
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_AET_MASK 0xFF00
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_DEPTH_OFFSET 0
#define BB_CHIP_I2C_SLAVE_OUT_FIFO_FIFO_DEPTH_MASK 0xFF
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_NO_DEVICE_BUSY_OFFSET 30
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_NO_DEVICE_BUSY_MASK 0x40000000
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_NO_DEVICE_BUSY 0x40000000
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_NO_REPLY_DATA_RDY_OFFSET 29
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_NO_REPLY_DATA_RDY_MASK 0x20000000
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_NO_REPLY_DATA_RDY 0x20000000
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_NO_STATUS_OFFSET 28
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_NO_STATUS_MASK 0x10000000
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_NO_STATUS 0x10000000
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_STOP_CLKS_OFFSET 24
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_STOP_CLKS_MASK 0xF000000
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_START_CLKS_OFFSET 20
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_START_CLKS_MASK 0xF00000
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_SDA_GLITCH_OFFSET 16
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_SDA_GLITCH_MASK 0xF0000
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_SCL_GLITCH_OFFSET 12
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_SCL_GLITCH_MASK 0xF000
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_CLOCK_STRETCH_EN_OFFSET 9
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_CLOCK_STRETCH_EN_MASK 0x200
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_CLOCK_STRETCH_EN 0x200
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_SLAVE_ADDR_ACK_OFFSET 8
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_SLAVE_ADDR_ACK_MASK 0x100
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_SLAVE_ADDR_ACK 0x100
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_SLAVE_ADDR_OFFSET 0
#define BB_CHIP_I2C_SLAVE_SLAVE_CONFIG_SLAVE_ADDR_MASK 0x7F
#define BB_CHIP_I2C_SLAVE_TIMEOUT_VAL_OFFSET 0
#define BB_CHIP_I2C_SLAVE_TIMEOUT_VAL_MASK 0xFFFFFFFF
#define BB_CHIP_I2C_SLAVE_STATUS_DEVICE_BUSY_OFFSET 7
#define BB_CHIP_I2C_SLAVE_STATUS_DEVICE_BUSY_MASK 0x80
#define BB_CHIP_I2C_SLAVE_STATUS_DEVICE_BUSY 0x80
#define BB_CHIP_I2C_SLAVE_STATUS_REQ_NAK_OFFSET 6
#define BB_CHIP_I2C_SLAVE_STATUS_REQ_NAK_MASK 0x40
#define BB_CHIP_I2C_SLAVE_STATUS_REQ_NAK 0x40
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD5_OFFSET 5
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD5_MASK 0x20
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD5 0x20
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD4_OFFSET 4
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD4_MASK 0x10
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD4 0x10
#define BB_CHIP_I2C_SLAVE_STATUS_REPLY_DATA_RDY_OFFSET 3
#define BB_CHIP_I2C_SLAVE_STATUS_REPLY_DATA_RDY_MASK 0x8
#define BB_CHIP_I2C_SLAVE_STATUS_REPLY_DATA_RDY 0x8
#define BB_CHIP_I2C_SLAVE_STATUS_REPLY_REQ_OFFSET 2
#define BB_CHIP_I2C_SLAVE_STATUS_REPLY_REQ_MASK 0x4
#define BB_CHIP_I2C_SLAVE_STATUS_REPLY_REQ 0x4
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD1_OFFSET 1
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD1_MASK 0x2
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD1 0x2
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD0_OFFSET 0
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD0_MASK 0x1
#define BB_CHIP_I2C_SLAVE_STATUS_RSVD0 0x1
#define BB_CHIP_I2C_SLAVE_WR_DATA_WR_DATA_OFFSET 0
#define BB_CHIP_I2C_SLAVE_WR_DATA_WR_DATA_MASK 0xFF
#define BB_CHIP_I2C_SLAVE_RD_DATA_RD_DATA_OFFSET 0
#define BB_CHIP_I2C_SLAVE_RD_DATA_RD_DATA_MASK 0xFF
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_REPLY_DATA_RDY_OFFSET 17
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_REPLY_DATA_RDY_MASK 0x20000
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_REPLY_DATA_RDY 0x20000
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_DEVICE_BUSY_OFFSET 16
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_DEVICE_BUSY_MASK 0x10000
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_DEVICE_BUSY 0x10000
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AF_OFFSET 11
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AF_MASK 0x800
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AF 0x800
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AE_OFFSET 10
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AE_MASK 0x400
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_OUT_FIFO_AE 0x400
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AF_OFFSET 9
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AF_MASK 0x200
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AF 0x200
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AE_OFFSET 8
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AE_MASK 0x100
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_IN_FIFO_AE 0x100
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_WRITE_NACK_OFFSET 7
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_WRITE_NACK_MASK 0x80
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_WRITE_NACK 0x80
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_READ_NACK_OFFSET 6
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_READ_NACK_MASK 0x40
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_READ_NACK 0x40
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_NO_READ_DATA_OFFSET 5
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_NO_READ_DATA_MASK 0x20
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_NO_READ_DATA 0x20
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_TIMEOUT_OFFSET 4
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_TIMEOUT_MASK 0x10
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_TIMEOUT 0x10
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_WRITE_OFFSET 3
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_WRITE_MASK 0x8
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_WRITE 0x8
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_READ_OFFSET 2
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_READ_MASK 0x4
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_READ 0x4
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_STOP_OFFSET 1
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_STOP_MASK 0x2
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_STOP 0x2
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_START_OFFSET 0
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_START_MASK 0x1
#define BB_CHIP_I2C_SLAVE_IRQ_ENABLE_START 0x1
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_REPLY_DATA_RDY_OFFSET 17
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_REPLY_DATA_RDY_MASK 0x20000
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_REPLY_DATA_RDY 0x20000
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_DEVICE_BUSY_OFFSET 16
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_DEVICE_BUSY_MASK 0x10000
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_DEVICE_BUSY 0x10000
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AF_OFFSET 11
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AF_MASK 0x800
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AF 0x800
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AE_OFFSET 10
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AE_MASK 0x400
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_OUT_FIFO_AE 0x400
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IN_FIFO_AF_OFFSET 9
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IN_FIFO_AF_MASK 0x200
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IN_FIFO_AF 0x200
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IN_FIFO_AE_OFFSET 8
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IN_FIFO_AE_MASK 0x100
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IN_FIFO_AE 0x100
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_WRITE_NACK_OFFSET 7
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_WRITE_NACK_MASK 0x80
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_WRITE_NACK 0x80
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_READ_NACK_OFFSET 6
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_READ_NACK_MASK 0x40
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_READ_NACK 0x40
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_NO_READ_DATA_OFFSET 5
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_NO_READ_DATA_MASK 0x20
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_NO_READ_DATA 0x20
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_TIMEOUT_OFFSET 4
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_TIMEOUT_MASK 0x10
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_TIMEOUT 0x10
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_WRITE_OFFSET 3
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_WRITE_MASK 0x8
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_WRITE 0x8
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_READ_OFFSET 2
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_READ_MASK 0x4
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_READ 0x4
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_STOP_OFFSET 1
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_STOP_MASK 0x2
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_STOP 0x2
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_START_OFFSET 0
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_START_MASK 0x1
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_START 0x1
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_REPLY_DATA_RDY_OFFSET 17
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_REPLY_DATA_RDY_MASK 0x20000
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_REPLY_DATA_RDY 0x20000
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_DEVICE_BUSY_OFFSET 16
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_DEVICE_BUSY_MASK 0x10000
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_DEVICE_BUSY 0x10000
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AF_OFFSET 11
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AF_MASK 0x800
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AF 0x800
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AE_OFFSET 10
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AE_MASK 0x400
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_OUT_FIFO_AE 0x400
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AF_OFFSET 9
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AF_MASK 0x200
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AF 0x200
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AE_OFFSET 8
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AE_MASK 0x100
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_IN_FIFO_AE 0x100
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_WRITE_NACK_OFFSET 7
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_WRITE_NACK_MASK 0x80
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_WRITE_NACK 0x80
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_READ_NACK_OFFSET 6
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_READ_NACK_MASK 0x40
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_READ_NACK 0x40
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_NO_READ_DATA_OFFSET 5
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_NO_READ_DATA_MASK 0x20
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_NO_READ_DATA 0x20
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_TIMEOUT_OFFSET 4
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_TIMEOUT_MASK 0x10
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_TIMEOUT 0x10
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_WRITE_OFFSET 3
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_WRITE_MASK 0x8
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_WRITE 0x8
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_READ_OFFSET 2
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_READ_MASK 0x4
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_READ 0x4
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_STOP_OFFSET 1
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_STOP_MASK 0x2
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_STOP 0x2
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_START_OFFSET 0
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_START_MASK 0x1
#define BB_CHIP_I2C_SLAVE_IRQ_PENDING_IRQ_START 0x1
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_REPLY_DATA_RDY_OFFSET 17
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_REPLY_DATA_RDY_MASK 0x20000
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_REPLY_DATA_RDY 0x20000
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_DEVICE_BUSY_OFFSET 16
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_DEVICE_BUSY_MASK 0x10000
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_DEVICE_BUSY 0x10000
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_OUT_FIFO_AF_OFFSET 11
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_OUT_FIFO_AF_MASK 0x800
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_OUT_FIFO_AF 0x800
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_OUT_FIFO_AE_OFFSET 10
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_OUT_FIFO_AE_MASK 0x400
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_OUT_FIFO_AE 0x400
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_IN_FIFO_AF_OFFSET 9
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_IN_FIFO_AF_MASK 0x200
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_IN_FIFO_AF 0x200
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_IN_FIFO_AE_OFFSET 8
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_IN_FIFO_AE_MASK 0x100
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_IN_FIFO_AE 0x100
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_WRITE_NACK_OFFSET 7
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_WRITE_NACK_MASK 0x80
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_WRITE_NACK 0x80
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_READ_NACK_OFFSET 6
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_READ_NACK_MASK 0x40
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_READ_NACK 0x40
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_NO_READ_DATA_OFFSET 5
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_NO_READ_DATA_MASK 0x20
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_NO_READ_DATA 0x20
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_TIMEOUT_OFFSET 4
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_TIMEOUT_MASK 0x10
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_TIMEOUT 0x10
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_WRITE_OFFSET 3
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_WRITE_MASK 0x8
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_WRITE 0x8
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_READ_OFFSET 2
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_READ_MASK 0x4
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_READ 0x4
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_STOP_OFFSET 1
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_STOP_MASK 0x2
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_STOP 0x2
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_START_OFFSET 0
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_START_MASK 0x1
#define BB_CHIP_I2C_SLAVE_IRQ_RAW_START 0x1
#define BB_CHIP_MDIO_MASTER_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_MDIO_MASTER_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_MDIO_MASTER_VERSION_MINOR_OFFSET 8
#define BB_CHIP_MDIO_MASTER_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_MDIO_MASTER_VERSION_PATCH_OFFSET 0
#define BB_CHIP_MDIO_MASTER_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_MDIO_MASTER_TIMING_HOLD_CLKS_OFFSET 16
#define BB_CHIP_MDIO_MASTER_TIMING_HOLD_CLKS_MASK 0xFF0000
#define BB_CHIP_MDIO_MASTER_TIMING_SETUP_CLKS_OFFSET 8
#define BB_CHIP_MDIO_MASTER_TIMING_SETUP_CLKS_MASK 0xFF00
#define BB_CHIP_MDIO_MASTER_TIMING_HALF_MDC_CLKS_OFFSET 0
#define BB_CHIP_MDIO_MASTER_TIMING_HALF_MDC_CLKS_MASK 0xFF
#define BB_CHIP_MDIO_MASTER_CONTROL_PHYAD_OFFSET 20
#define BB_CHIP_MDIO_MASTER_CONTROL_PHYAD_MASK 0x1F00000
#define BB_CHIP_MDIO_MASTER_CONTROL_REGAD_OFFSET 12
#define BB_CHIP_MDIO_MASTER_CONTROL_REGAD_MASK 0x1F000
#define BB_CHIP_MDIO_MASTER_CONTROL_OP_OFFSET 8
#define BB_CHIP_MDIO_MASTER_CONTROL_OP_MASK 0x300
#define BB_CHIP_MDIO_MASTER_CONTROL_ST_OFFSET 4
#define BB_CHIP_MDIO_MASTER_CONTROL_ST_MASK 0x30
#define BB_CHIP_MDIO_MASTER_CONTROL_GO_OFFSET 0
#define BB_CHIP_MDIO_MASTER_CONTROL_GO_MASK 0x1
#define BB_CHIP_MDIO_MASTER_CONTROL_GO 0x1
#define BB_CHIP_MDIO_MASTER_WR_DATA_WR_DATA_OFFSET 0
#define BB_CHIP_MDIO_MASTER_WR_DATA_WR_DATA_MASK 0xFFFF
#define BB_CHIP_MDIO_MASTER_RD_DATA_RD_DATA_OFFSET 0
#define BB_CHIP_MDIO_MASTER_RD_DATA_RD_DATA_MASK 0xFFFF
#define BB_CHIP_MDIO_MASTER_IRQ_ENABLE_DONE_OFFSET 0
#define BB_CHIP_MDIO_MASTER_IRQ_ENABLE_DONE_MASK 0x1
#define BB_CHIP_MDIO_MASTER_IRQ_ENABLE_DONE 0x1
#define BB_CHIP_MDIO_MASTER_IRQ_PENDING_DONE_OFFSET 0
#define BB_CHIP_MDIO_MASTER_IRQ_PENDING_DONE_MASK 0x1
#define BB_CHIP_MDIO_MASTER_IRQ_PENDING_DONE 0x1
#define BB_CHIP_MDIO_MASTER_IRQ_PENDING_IRQ_DONE_OFFSET 0
#define BB_CHIP_MDIO_MASTER_IRQ_PENDING_IRQ_DONE_MASK 0x1
#define BB_CHIP_MDIO_MASTER_IRQ_PENDING_IRQ_DONE 0x1
#define BB_CHIP_MDIO_MASTER_IRQ_RAW_DONE_OFFSET 0
#define BB_CHIP_MDIO_MASTER_IRQ_RAW_DONE_MASK 0x1
#define BB_CHIP_MDIO_MASTER_IRQ_RAW_DONE 0x1
#define BB_CHIP_SPI_FLASH_CTRL_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_SPI_FLASH_CTRL_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_SPI_FLASH_CTRL_VERSION_MINOR_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_SPI_FLASH_CTRL_VERSION_PATCH_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_SCK_FREERUN_OFFSET 31
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_SCK_FREERUN_MASK 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_SCK_FREERUN 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_IO_OUT_DEFAULTS_OFFSET 20
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_IO_OUT_DEFAULTS_MASK 0xF00000
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_IO_TRI_DEFAULTS_OFFSET 16
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_IO_TRI_DEFAULTS_MASK 0xF0000
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_SCK_OE_DEASSERT_CFG_OFFSET 12
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_SCK_OE_DEASSERT_CFG_MASK 0xF000
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_CS_DEASSERT_CFG_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_CS_DEASSERT_CFG_MASK 0xF00
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_SCK_OE_ASSERT_CFG_OFFSET 4
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_SCK_OE_ASSERT_CFG_MASK 0xF0
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_CS_ASSERT_CFG_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_GENERIC_CFG_CS_ASSERT_CFG_MASK 0xF
#define BB_CHIP_SPI_FLASH_CTRL_ADDR_OFFSET_VAL_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_ADDR_OFFSET_VAL_MASK 0xFFFFFFFF
#define BB_CHIP_SPI_FLASH_CTRL_ADDR_VAL_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_ADDR_VAL_MASK 0xFFFFFFFF
#define BB_CHIP_SPI_FLASH_CTRL_BASIC_CFG_TR_GAP_P3_OFFSET 16
#define BB_CHIP_SPI_FLASH_CTRL_BASIC_CFG_TR_GAP_P3_MASK 0xFFFF0000
#define BB_CHIP_SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_DATA_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_DATA_MASK 0xF00
#define BB_CHIP_SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_ADDR_OFFSET 4
#define BB_CHIP_SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_ADDR_MASK 0xF0
#define BB_CHIP_SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_CMD_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_CMD_MASK 0xF
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_GO_OFFSET 31
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_GO_MASK 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_GO 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_ADDR_MODE_OFFSET 25
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_ADDR_MODE_MASK 0x2000000
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_ADDR_MODE 0x2000000
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_WRITE_OFFSET 24
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_WRITE_MASK 0x1000000
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_WRITE 0x1000000
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_NUM_DUMMY_CLKS_OFFSET 16
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_NUM_DUMMY_CLKS_MASK 0x7F0000
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_NUM_BYTES_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_NUM_BYTES_MASK 0xFF00
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_CMD_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_CONTROL_CMD_MASK 0xFF
#define BB_CHIP_SPI_FLASH_CTRL_WR_DATA_VAL_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_WR_DATA_VAL_MASK 0xFFFFFFFF
#define BB_CHIP_SPI_FLASH_CTRL_RD_DATA_VAL_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_RD_DATA_VAL_MASK 0xFFFFFFFF
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_CLEAR_OFFSET 31
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_CLEAR_MASK 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_CLEAR 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_AF_OFFSET 27
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_AF_MASK 0x8000000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_AF 0x8000000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_AE_OFFSET 26
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_AE_MASK 0x4000000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_AE 0x4000000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_FULL_OFFSET 25
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_FULL_MASK 0x2000000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_FULL 0x2000000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_EMPTY_OFFSET 24
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_EMPTY_MASK 0x1000000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_EMPTY 0x1000000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_AFT_OFFSET 16
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_AFT_MASK 0xFF0000
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_AET_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_AET_MASK 0xFF00
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_DEPTH_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_IN_FIFO_FIFO_DEPTH_MASK 0xFF
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_CLEAR_OFFSET 31
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_CLEAR_MASK 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_CLEAR 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_AF_OFFSET 27
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_AF_MASK 0x8000000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_AF 0x8000000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_AE_OFFSET 26
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_AE_MASK 0x4000000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_AE 0x4000000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_FULL_OFFSET 25
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_FULL_MASK 0x2000000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_FULL 0x2000000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_EMPTY_OFFSET 24
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_EMPTY_MASK 0x1000000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_EMPTY 0x1000000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_AFT_OFFSET 16
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_AFT_MASK 0xFF0000
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_AET_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_AET_MASK 0xFF00
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_DEPTH_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_OUT_FIFO_FIFO_DEPTH_MASK 0xFF
#define BB_CHIP_SPI_FLASH_CTRL_MM_ADDR_OFFSET_VAL_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_MM_ADDR_OFFSET_VAL_MASK 0xFFFFFFFF
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_ADDR_MODE_OFFSET 31
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_ADDR_MODE_MASK 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_ADDR_MODE 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_NUM_DUMMY_CLKS_OFFSET 24
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_NUM_DUMMY_CLKS_MASK 0x7F000000
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_TR_GAP_P3_OFFSET 20
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_TR_GAP_P3_MASK 0xF00000
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_DATA_OFFSET 16
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_DATA_MASK 0xF0000
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_ADDR_OFFSET 12
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_ADDR_MASK 0xF000
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_CMD_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_CMD_MASK 0xF00
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_READ_CMD_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_MM_BASIC_CFG_READ_CMD_MASK 0xFF
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_XIP_EN_OFFSET 31
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_XIP_EN_MASK 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_XIP_EN 0x80000000
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_IO_MASK_MODE_OFFSET 20
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_IO_MASK_MODE_MASK 0xF00000
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_NUM_MODE_BITS_OFFSET 16
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_NUM_MODE_BITS_MASK 0xF0000
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_MODE_XIP_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_MODE_XIP_MASK 0xFF00
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_MODE_NORMAL_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_MM_XIP_CFG_MODE_NORMAL_MASK 0xFF
#define BB_CHIP_SPI_FLASH_CTRL_MM_SUSPEND_CFG_TR_GAP_P3_OFFSET 16
#define BB_CHIP_SPI_FLASH_CTRL_MM_SUSPEND_CFG_TR_GAP_P3_MASK 0xFFFF0000
#define BB_CHIP_SPI_FLASH_CTRL_MM_SUSPEND_CFG_ENABLE_OFFSET 12
#define BB_CHIP_SPI_FLASH_CTRL_MM_SUSPEND_CFG_ENABLE_MASK 0x1000
#define BB_CHIP_SPI_FLASH_CTRL_MM_SUSPEND_CFG_ENABLE 0x1000
#define BB_CHIP_SPI_FLASH_CTRL_MM_SUSPEND_CFG_IO_MASK_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_MM_SUSPEND_CFG_IO_MASK_MASK 0xF00
#define BB_CHIP_SPI_FLASH_CTRL_MM_SUSPEND_CFG_CMD_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_MM_SUSPEND_CFG_CMD_MASK 0xFF
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_APB_TR_DONE_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_APB_TR_DONE_MASK 0x100
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_APB_TR_DONE 0x100
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AF_OFFSET 5
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AF_MASK 0x20
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AF 0x20
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AE_OFFSET 4
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AE_MASK 0x10
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AE 0x10
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AF_OFFSET 1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AF_MASK 0x2
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AF 0x2
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AE_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AE_MASK 0x1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AE 0x1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_APB_TR_DONE_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_APB_TR_DONE_MASK 0x100
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_APB_TR_DONE 0x100
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AF_OFFSET 5
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AF_MASK 0x20
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AF 0x20
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AE_OFFSET 4
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AE_MASK 0x10
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AE 0x10
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AF_OFFSET 1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AF_MASK 0x2
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AF 0x2
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AE_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AE_MASK 0x1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AE 0x1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_APB_TR_DONE_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_APB_TR_DONE_MASK 0x100
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_APB_TR_DONE 0x100
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AF_OFFSET 5
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AF_MASK 0x20
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AF 0x20
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AE_OFFSET 4
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AE_MASK 0x10
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AE 0x10
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AF_OFFSET 1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AF_MASK 0x2
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AF 0x2
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AE_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AE_MASK 0x1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AE 0x1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_APB_TR_DONE_OFFSET 8
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_APB_TR_DONE_MASK 0x100
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_APB_TR_DONE 0x100
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AF_OFFSET 5
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AF_MASK 0x20
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AF 0x20
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AE_OFFSET 4
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AE_MASK 0x10
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AE 0x10
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AF_OFFSET 1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AF_MASK 0x2
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AF 0x2
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AE_OFFSET 0
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AE_MASK 0x1
#define BB_CHIP_SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AE 0x1
#define BB_CHIP_GPIO_CTRL_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_GPIO_CTRL_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_GPIO_CTRL_VERSION_MINOR_OFFSET 8
#define BB_CHIP_GPIO_CTRL_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_GPIO_CTRL_VERSION_PATCH_OFFSET 0
#define BB_CHIP_GPIO_CTRL_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_GPIO_CTRL_GPIO_DIR_DIR_OFFSET 0
#define BB_CHIP_GPIO_CTRL_GPIO_DIR_DIR_MASK 0xFFFFFFFF
#define BB_CHIP_GPIO_CTRL_GPIO_OUT_OUT_OFFSET 0
#define BB_CHIP_GPIO_CTRL_GPIO_OUT_OUT_MASK 0xFFFFFFFF
#define BB_CHIP_GPIO_CTRL_GPIO_IN_IN_OFFSET 0
#define BB_CHIP_GPIO_CTRL_GPIO_IN_IN_MASK 0xFFFFFFFF
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO31_OFFSET 31
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO31_MASK 0x80000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO31 0x80000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO30_OFFSET 30
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO30_MASK 0x40000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO30 0x40000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO29_OFFSET 29
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO29_MASK 0x20000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO29 0x20000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO28_OFFSET 28
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO28_MASK 0x10000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO28 0x10000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO27_OFFSET 27
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO27_MASK 0x8000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO27 0x8000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO26_OFFSET 26
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO26_MASK 0x4000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO26 0x4000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO25_OFFSET 25
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO25_MASK 0x2000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO25 0x2000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO24_OFFSET 24
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO24_MASK 0x1000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO24 0x1000000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO23_OFFSET 23
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO23_MASK 0x800000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO23 0x800000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO22_OFFSET 22
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO22_MASK 0x400000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO22 0x400000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO21_OFFSET 21
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO21_MASK 0x200000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO21 0x200000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO20_OFFSET 20
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO20_MASK 0x100000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO20 0x100000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO19_OFFSET 19
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO19_MASK 0x80000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO19 0x80000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO18_OFFSET 18
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO18_MASK 0x40000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO18 0x40000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO17_OFFSET 17
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO17_MASK 0x20000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO17 0x20000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO16_OFFSET 16
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO16_MASK 0x10000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO16 0x10000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO15_OFFSET 15
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO15_MASK 0x8000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO15 0x8000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO14_OFFSET 14
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO14_MASK 0x4000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO14 0x4000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO13_OFFSET 13
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO13_MASK 0x2000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO13 0x2000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO12_OFFSET 12
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO12_MASK 0x1000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO12 0x1000
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO11_OFFSET 11
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO11_MASK 0x800
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO11 0x800
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO10_OFFSET 10
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO10_MASK 0x400
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO10 0x400
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO9_OFFSET 9
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO9_MASK 0x200
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO9 0x200
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO8_OFFSET 8
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO8_MASK 0x100
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO8 0x100
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO7_OFFSET 7
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO7_MASK 0x80
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO7 0x80
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO6_OFFSET 6
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO6_MASK 0x40
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO6 0x40
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO5_OFFSET 5
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO5_MASK 0x20
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO5 0x20
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO4_OFFSET 4
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO4_MASK 0x10
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO4 0x10
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO3_OFFSET 3
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO3_MASK 0x8
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO3 0x8
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO2_OFFSET 2
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO2_MASK 0x4
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO2 0x4
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO1_OFFSET 1
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO1_MASK 0x2
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO1 0x2
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO0_OFFSET 0
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO0_MASK 0x1
#define BB_CHIP_GPIO_CTRL_IRQ_ENABLE_GPIO0 0x1
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO31_OFFSET 31
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO31_MASK 0x80000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO31 0x80000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO30_OFFSET 30
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO30_MASK 0x40000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO30 0x40000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO29_OFFSET 29
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO29_MASK 0x20000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO29 0x20000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO28_OFFSET 28
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO28_MASK 0x10000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO28 0x10000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO27_OFFSET 27
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO27_MASK 0x8000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO27 0x8000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO26_OFFSET 26
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO26_MASK 0x4000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO26 0x4000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO25_OFFSET 25
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO25_MASK 0x2000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO25 0x2000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO24_OFFSET 24
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO24_MASK 0x1000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO24 0x1000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO23_OFFSET 23
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO23_MASK 0x800000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO23 0x800000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO22_OFFSET 22
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO22_MASK 0x400000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO22 0x400000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO21_OFFSET 21
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO21_MASK 0x200000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO21 0x200000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO20_OFFSET 20
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO20_MASK 0x100000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO20 0x100000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO19_OFFSET 19
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO19_MASK 0x80000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO19 0x80000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO18_OFFSET 18
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO18_MASK 0x40000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO18 0x40000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO17_OFFSET 17
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO17_MASK 0x20000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO17 0x20000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO16_OFFSET 16
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO16_MASK 0x10000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO16 0x10000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO15_OFFSET 15
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO15_MASK 0x8000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO15 0x8000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO14_OFFSET 14
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO14_MASK 0x4000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO14 0x4000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO13_OFFSET 13
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO13_MASK 0x2000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO13 0x2000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO12_OFFSET 12
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO12_MASK 0x1000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO12 0x1000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO11_OFFSET 11
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO11_MASK 0x800
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO11 0x800
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO10_OFFSET 10
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO10_MASK 0x400
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO10 0x400
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO9_OFFSET 9
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO9_MASK 0x200
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO9 0x200
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO8_OFFSET 8
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO8_MASK 0x100
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO8 0x100
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO7_OFFSET 7
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO7_MASK 0x80
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO7 0x80
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO6_OFFSET 6
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO6_MASK 0x40
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO6 0x40
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO5_OFFSET 5
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO5_MASK 0x20
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO5 0x20
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO4_OFFSET 4
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO4_MASK 0x10
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO4 0x10
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO3_OFFSET 3
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO3_MASK 0x8
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO3 0x8
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO2_OFFSET 2
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO2_MASK 0x4
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO2 0x4
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO1_OFFSET 1
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO1_MASK 0x2
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO1 0x2
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO0_OFFSET 0
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO0_MASK 0x1
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_GPIO0 0x1
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO31_OFFSET 31
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO31_MASK 0x80000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO31 0x80000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO30_OFFSET 30
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO30_MASK 0x40000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO30 0x40000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO29_OFFSET 29
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO29_MASK 0x20000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO29 0x20000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO28_OFFSET 28
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO28_MASK 0x10000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO28 0x10000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO27_OFFSET 27
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO27_MASK 0x8000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO27 0x8000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO26_OFFSET 26
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO26_MASK 0x4000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO26 0x4000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO25_OFFSET 25
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO25_MASK 0x2000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO25 0x2000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO24_OFFSET 24
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO24_MASK 0x1000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO24 0x1000000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO23_OFFSET 23
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO23_MASK 0x800000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO23 0x800000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO22_OFFSET 22
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO22_MASK 0x400000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO22 0x400000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO21_OFFSET 21
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO21_MASK 0x200000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO21 0x200000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO20_OFFSET 20
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO20_MASK 0x100000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO20 0x100000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO19_OFFSET 19
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO19_MASK 0x80000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO19 0x80000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO18_OFFSET 18
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO18_MASK 0x40000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO18 0x40000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO17_OFFSET 17
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO17_MASK 0x20000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO17 0x20000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO16_OFFSET 16
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO16_MASK 0x10000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO16 0x10000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO15_OFFSET 15
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO15_MASK 0x8000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO15 0x8000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO14_OFFSET 14
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO14_MASK 0x4000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO14 0x4000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO13_OFFSET 13
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO13_MASK 0x2000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO13 0x2000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO12_OFFSET 12
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO12_MASK 0x1000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO12 0x1000
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO11_OFFSET 11
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO11_MASK 0x800
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO11 0x800
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO10_OFFSET 10
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO10_MASK 0x400
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO10 0x400
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO9_OFFSET 9
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO9_MASK 0x200
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO9 0x200
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO8_OFFSET 8
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO8_MASK 0x100
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO8 0x100
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO7_OFFSET 7
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO7_MASK 0x80
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO7 0x80
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO6_OFFSET 6
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO6_MASK 0x40
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO6 0x40
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO5_OFFSET 5
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO5_MASK 0x20
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO5 0x20
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO4_OFFSET 4
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO4_MASK 0x10
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO4 0x10
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO3_OFFSET 3
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO3_MASK 0x8
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO3 0x8
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO2_OFFSET 2
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO2_MASK 0x4
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO2 0x4
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO1_OFFSET 1
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO1_MASK 0x2
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO1 0x2
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO0_OFFSET 0
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO0_MASK 0x1
#define BB_CHIP_GPIO_CTRL_IRQ_PENDING_IRQ_GPIO0 0x1
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO31_OFFSET 31
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO31_MASK 0x80000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO31 0x80000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO30_OFFSET 30
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO30_MASK 0x40000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO30 0x40000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO29_OFFSET 29
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO29_MASK 0x20000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO29 0x20000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO28_OFFSET 28
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO28_MASK 0x10000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO28 0x10000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO27_OFFSET 27
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO27_MASK 0x8000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO27 0x8000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO26_OFFSET 26
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO26_MASK 0x4000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO26 0x4000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO25_OFFSET 25
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO25_MASK 0x2000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO25 0x2000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO24_OFFSET 24
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO24_MASK 0x1000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO24 0x1000000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO23_OFFSET 23
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO23_MASK 0x800000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO23 0x800000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO22_OFFSET 22
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO22_MASK 0x400000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO22 0x400000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO21_OFFSET 21
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO21_MASK 0x200000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO21 0x200000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO20_OFFSET 20
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO20_MASK 0x100000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO20 0x100000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO19_OFFSET 19
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO19_MASK 0x80000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO19 0x80000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO18_OFFSET 18
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO18_MASK 0x40000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO18 0x40000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO17_OFFSET 17
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO17_MASK 0x20000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO17 0x20000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO16_OFFSET 16
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO16_MASK 0x10000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO16 0x10000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO15_OFFSET 15
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO15_MASK 0x8000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO15 0x8000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO14_OFFSET 14
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO14_MASK 0x4000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO14 0x4000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO13_OFFSET 13
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO13_MASK 0x2000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO13 0x2000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO12_OFFSET 12
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO12_MASK 0x1000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO12 0x1000
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO11_OFFSET 11
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO11_MASK 0x800
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO11 0x800
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO10_OFFSET 10
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO10_MASK 0x400
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO10 0x400
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO9_OFFSET 9
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO9_MASK 0x200
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO9 0x200
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO8_OFFSET 8
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO8_MASK 0x100
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO8 0x100
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO7_OFFSET 7
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO7_MASK 0x80
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO7 0x80
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO6_OFFSET 6
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO6_MASK 0x40
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO6 0x40
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO5_OFFSET 5
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO5_MASK 0x20
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO5 0x20
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO4_OFFSET 4
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO4_MASK 0x10
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO4 0x10
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO3_OFFSET 3
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO3_MASK 0x8
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO3 0x8
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO2_OFFSET 2
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO2_MASK 0x4
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO2 0x4
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO1_OFFSET 1
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO1_MASK 0x2
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO1 0x2
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO0_OFFSET 0
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO0_MASK 0x1
#define BB_CHIP_GPIO_CTRL_IRQ_RAW_GPIO0 0x1
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO7_OFFSET 28
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO7_MASK 0xF0000000
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO6_OFFSET 24
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO6_MASK 0xF000000
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO5_OFFSET 20
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO5_MASK 0xF00000
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO4_OFFSET 16
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO4_MASK 0xF0000
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO3_OFFSET 12
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO3_MASK 0xF000
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO2_OFFSET 8
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO2_MASK 0xF00
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO1_OFFSET 4
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO1_MASK 0xF0
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO0_OFFSET 0
#define BB_CHIP_GPIO_CTRL_IRQ_INT_TYPE_GPIO0_MASK 0xF
#define BB_CHIP_BB_CORE_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_BB_CORE_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_BB_CORE_VERSION_MINOR_OFFSET 8
#define BB_CHIP_BB_CORE_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_BB_CORE_VERSION_PATCH_OFFSET 0
#define BB_CHIP_BB_CORE_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_BB_CORE_CPU_FREQ_VALUE_OFFSET 0
#define BB_CHIP_BB_CORE_CPU_FREQ_VALUE_MASK 0xFFFFFFFF
#define BB_CHIP_BB_CORE_SYS_CONFIG_LINK_RATE_OFFSET 16
#define BB_CHIP_BB_CORE_SYS_CONFIG_LINK_RATE_MASK 0xF0000
#define BB_CHIP_BB_CORE_SYS_CONFIG_LINK_MODE_OFFSET 8
#define BB_CHIP_BB_CORE_SYS_CONFIG_LINK_MODE_MASK 0x1F00
#define BB_CHIP_BB_CORE_SYS_CONFIG_BOOT_SEL_OFFSET 4
#define BB_CHIP_BB_CORE_SYS_CONFIG_BOOT_SEL_MASK 0x30
#define BB_CHIP_BB_CORE_SYS_CONFIG_REX_LEX_N_OFFSET 0
#define BB_CHIP_BB_CORE_SYS_CONFIG_REX_LEX_N_MASK 0x1
#define BB_CHIP_BB_CORE_SYS_CONFIG_REX_LEX_N 0x1
#define BB_CHIP_BB_CORE_FEATURE_XGMII_RX_IDLE_COUNTER_OFFSET 16
#define BB_CHIP_BB_CORE_FEATURE_XGMII_RX_IDLE_COUNTER_MASK 0x10000
#define BB_CHIP_BB_CORE_FEATURE_XGMII_RX_IDLE_COUNTER 0x10000
#define BB_CHIP_BB_CORE_FEATURE_RS232_EXTENDER_OFFSET 15
#define BB_CHIP_BB_CORE_FEATURE_RS232_EXTENDER_MASK 0x8000
#define BB_CHIP_BB_CORE_FEATURE_RS232_EXTENDER 0x8000
#define BB_CHIP_BB_CORE_FEATURE_GE_UART_OFFSET 14
#define BB_CHIP_BB_CORE_FEATURE_GE_UART_MASK 0x4000
#define BB_CHIP_BB_CORE_FEATURE_GE_UART 0x4000
#define BB_CHIP_BB_CORE_FEATURE_GE_ADAPTER_OFFSET 13
#define BB_CHIP_BB_CORE_FEATURE_GE_ADAPTER_MASK 0x2000
#define BB_CHIP_BB_CORE_FEATURE_GE_ADAPTER 0x2000
#define BB_CHIP_BB_CORE_FEATURE_XMII_ADAPTER_OFFSET 12
#define BB_CHIP_BB_CORE_FEATURE_XMII_ADAPTER_MASK 0x1000
#define BB_CHIP_BB_CORE_FEATURE_XMII_ADAPTER 0x1000
#define BB_CHIP_BB_CORE_FEATURE_DP_SOURCE_OFFSET 11
#define BB_CHIP_BB_CORE_FEATURE_DP_SOURCE_MASK 0x800
#define BB_CHIP_BB_CORE_FEATURE_DP_SOURCE 0x800
#define BB_CHIP_BB_CORE_FEATURE_DP_SINK_OFFSET 10
#define BB_CHIP_BB_CORE_FEATURE_DP_SINK_MASK 0x400
#define BB_CHIP_BB_CORE_FEATURE_DP_SINK 0x400
#define BB_CHIP_BB_CORE_FEATURE_XUSB3_OFFSET 9
#define BB_CHIP_BB_CORE_FEATURE_XUSB3_MASK 0x200
#define BB_CHIP_BB_CORE_FEATURE_XUSB3 0x200
#define BB_CHIP_BB_CORE_FEATURE_MCA_OFFSET 8
#define BB_CHIP_BB_CORE_FEATURE_MCA_MASK 0x100
#define BB_CHIP_BB_CORE_FEATURE_MCA 0x100
#define BB_CHIP_BB_CORE_FEATURE_LAYER3_OFFSET 7
#define BB_CHIP_BB_CORE_FEATURE_LAYER3_MASK 0x80
#define BB_CHIP_BB_CORE_FEATURE_LAYER3 0x80
#define BB_CHIP_BB_CORE_FEATURE_LINK_LAYER_OFFSET 6
#define BB_CHIP_BB_CORE_FEATURE_LINK_LAYER_MASK 0x40
#define BB_CHIP_BB_CORE_FEATURE_LINK_LAYER 0x40
#define BB_CHIP_BB_CORE_FEATURE_GPIO_CTRL_OFFSET 5
#define BB_CHIP_BB_CORE_FEATURE_GPIO_CTRL_MASK 0x20
#define BB_CHIP_BB_CORE_FEATURE_GPIO_CTRL 0x20
#define BB_CHIP_BB_CORE_FEATURE_SPI_FLASH_CTRL_OFFSET 4
#define BB_CHIP_BB_CORE_FEATURE_SPI_FLASH_CTRL_MASK 0x10
#define BB_CHIP_BB_CORE_FEATURE_SPI_FLASH_CTRL 0x10
#define BB_CHIP_BB_CORE_FEATURE_MDIO_MASTER_OFFSET 3
#define BB_CHIP_BB_CORE_FEATURE_MDIO_MASTER_MASK 0x8
#define BB_CHIP_BB_CORE_FEATURE_MDIO_MASTER 0x8
#define BB_CHIP_BB_CORE_FEATURE_I2C_SLAVE_OFFSET 2
#define BB_CHIP_BB_CORE_FEATURE_I2C_SLAVE_MASK 0x4
#define BB_CHIP_BB_CORE_FEATURE_I2C_SLAVE 0x4
#define BB_CHIP_BB_CORE_FEATURE_I2C_MASTER_OFFSET 1
#define BB_CHIP_BB_CORE_FEATURE_I2C_MASTER_MASK 0x2
#define BB_CHIP_BB_CORE_FEATURE_I2C_MASTER 0x2
#define BB_CHIP_BB_CORE_FEATURE_BB_UART_OFFSET 0
#define BB_CHIP_BB_CORE_FEATURE_BB_UART_MASK 0x1
#define BB_CHIP_BB_CORE_FEATURE_BB_UART 0x1
#define BB_CHIP_BB_CORE_MODULE_VERSION_CTRL_VERSION_SEL_OFFSET 8
#define BB_CHIP_BB_CORE_MODULE_VERSION_CTRL_VERSION_SEL_MASK 0xFF00
#define BB_CHIP_BB_CORE_MODULE_VERSION_CTRL_MODULE_SEL_OFFSET 0
#define BB_CHIP_BB_CORE_MODULE_VERSION_CTRL_MODULE_SEL_MASK 0xFF
#define BB_CHIP_BB_CORE_MODULE_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_BB_CORE_MODULE_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_BB_CORE_MODULE_VERSION_MINOR_OFFSET 8
#define BB_CHIP_BB_CORE_MODULE_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_BB_CORE_MODULE_VERSION_PATCH_OFFSET 0
#define BB_CHIP_BB_CORE_MODULE_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_BB_CORE_IRQ_ENABLE_RS232_UNDERRUN_ERR_OFFSET 1
#define BB_CHIP_BB_CORE_IRQ_ENABLE_RS232_UNDERRUN_ERR_MASK 0x2
#define BB_CHIP_BB_CORE_IRQ_ENABLE_RS232_UNDERRUN_ERR 0x2
#define BB_CHIP_BB_CORE_IRQ_ENABLE_MCA_RX_CPU_SRDY_OFFSET 0
#define BB_CHIP_BB_CORE_IRQ_ENABLE_MCA_RX_CPU_SRDY_MASK 0x1
#define BB_CHIP_BB_CORE_IRQ_ENABLE_MCA_RX_CPU_SRDY 0x1
#define BB_CHIP_BB_CORE_IRQ_PENDING_RS232_UNDERRUN_ERR_OFFSET 1
#define BB_CHIP_BB_CORE_IRQ_PENDING_RS232_UNDERRUN_ERR_MASK 0x2
#define BB_CHIP_BB_CORE_IRQ_PENDING_RS232_UNDERRUN_ERR 0x2
#define BB_CHIP_BB_CORE_IRQ_PENDING_MCA_RX_CPU_SRDY_OFFSET 0
#define BB_CHIP_BB_CORE_IRQ_PENDING_MCA_RX_CPU_SRDY_MASK 0x1
#define BB_CHIP_BB_CORE_IRQ_PENDING_MCA_RX_CPU_SRDY 0x1
#define BB_CHIP_BB_CORE_IRQ_PENDING_IRQ_RS232_UNDERRUN_ERR_OFFSET 1
#define BB_CHIP_BB_CORE_IRQ_PENDING_IRQ_RS232_UNDERRUN_ERR_MASK 0x2
#define BB_CHIP_BB_CORE_IRQ_PENDING_IRQ_RS232_UNDERRUN_ERR 0x2
#define BB_CHIP_BB_CORE_IRQ_PENDING_IRQ_MCA_RX_CPU_SRDY_OFFSET 0
#define BB_CHIP_BB_CORE_IRQ_PENDING_IRQ_MCA_RX_CPU_SRDY_MASK 0x1
#define BB_CHIP_BB_CORE_IRQ_PENDING_IRQ_MCA_RX_CPU_SRDY 0x1
#define BB_CHIP_BB_CORE_IRQ_RAW_RS232_UNDERRUN_ERR_OFFSET 1
#define BB_CHIP_BB_CORE_IRQ_RAW_RS232_UNDERRUN_ERR_MASK 0x2
#define BB_CHIP_BB_CORE_IRQ_RAW_RS232_UNDERRUN_ERR 0x2
#define BB_CHIP_BB_CORE_IRQ_RAW_MCA_RX_CPU_SRDY_OFFSET 0
#define BB_CHIP_BB_CORE_IRQ_RAW_MCA_RX_CPU_SRDY_MASK 0x1
#define BB_CHIP_BB_CORE_IRQ_RAW_MCA_RX_CPU_SRDY 0x1
#define BB_CHIP_BB_CORE_CPU_COMM_TX_EOP_OFFSET 9
#define BB_CHIP_BB_CORE_CPU_COMM_TX_EOP_MASK 0x200
#define BB_CHIP_BB_CORE_CPU_COMM_TX_EOP 0x200
#define BB_CHIP_BB_CORE_CPU_COMM_TX_SOP_OFFSET 8
#define BB_CHIP_BB_CORE_CPU_COMM_TX_SOP_MASK 0x100
#define BB_CHIP_BB_CORE_CPU_COMM_TX_SOP 0x100
#define BB_CHIP_BB_CORE_CPU_COMM_TX_DATA_OFFSET 0
#define BB_CHIP_BB_CORE_CPU_COMM_TX_DATA_MASK 0xFF
#define BB_CHIP_BB_CORE_CPU_COMM_RX_EOP_OFFSET 9
#define BB_CHIP_BB_CORE_CPU_COMM_RX_EOP_MASK 0x200
#define BB_CHIP_BB_CORE_CPU_COMM_RX_EOP 0x200
#define BB_CHIP_BB_CORE_CPU_COMM_RX_SOP_OFFSET 8
#define BB_CHIP_BB_CORE_CPU_COMM_RX_SOP_MASK 0x100
#define BB_CHIP_BB_CORE_CPU_COMM_RX_SOP 0x100
#define BB_CHIP_BB_CORE_CPU_COMM_RX_DATA_OFFSET 0
#define BB_CHIP_BB_CORE_CPU_COMM_RX_DATA_MASK 0xFF
#define BB_CHIP_BB_CORE_XMII_CTRL_IPG_M1_OFFSET 8
#define BB_CHIP_BB_CORE_XMII_CTRL_IPG_M1_MASK 0xFF00
#define BB_CHIP_BB_CORE_XMII_CTRL_MODE_OFFSET 0
#define BB_CHIP_BB_CORE_XMII_CTRL_MODE_MASK 0x3
#define BB_CHIP_BB_CORE_RS232_CTRL_CLK_DOWN_SCALE_OFFSET 16
#define BB_CHIP_BB_CORE_RS232_CTRL_CLK_DOWN_SCALE_MASK 0xFFFF0000
#define BB_CHIP_BB_CORE_RS232_CTRL_ENABLE_OFFSET 0
#define BB_CHIP_BB_CORE_RS232_CTRL_ENABLE_MASK 0x1
#define BB_CHIP_BB_CORE_RS232_CTRL_ENABLE 0x1
#define BB_CHIP_BB_CORE_XGMII_IDLE_COUNTER_CONTROL_NUM_XGMII_CLKS_OFFSET 1
#define BB_CHIP_BB_CORE_XGMII_IDLE_COUNTER_CONTROL_NUM_XGMII_CLKS_MASK 0xFFFFFFFE
#define BB_CHIP_BB_CORE_XGMII_IDLE_COUNTER_CONTROL_GO_OFFSET 0
#define BB_CHIP_BB_CORE_XGMII_IDLE_COUNTER_CONTROL_GO_MASK 0x1
#define BB_CHIP_BB_CORE_XGMII_IDLE_COUNTER_CONTROL_GO 0x1
#define BB_CHIP_BB_CORE_XGMII_IDLE_COUNTER_STATUS_IDLE_COUNT_OFFSET 0
#define BB_CHIP_BB_CORE_XGMII_IDLE_COUNTER_STATUS_IDLE_COUNT_MASK 0xFFFFFFFF
#define BB_CHIP_BB_CORE_AHB_TO_APB_CTRL_TIMEOUT_HRESP_OFFSET 0
#define BB_CHIP_BB_CORE_AHB_TO_APB_CTRL_TIMEOUT_HRESP_MASK 0x1
#define BB_CHIP_BB_CORE_AHB_TO_APB_CTRL_TIMEOUT_HRESP 0x1
#define BB_CHIP_BB_CORE_GE_CTRL_CLEI_TX_OFFSET 1
#define BB_CHIP_BB_CORE_GE_CTRL_CLEI_TX_MASK 0x2
#define BB_CHIP_BB_CORE_GE_CTRL_CLEI_TX 0x2
#define BB_CHIP_BB_CORE_GE_CTRL_CLEI_RX_OFFSET 0
#define BB_CHIP_BB_CORE_GE_CTRL_CLEI_RX_MASK 0x1
#define BB_CHIP_BB_CORE_GE_CTRL_CLEI_RX 0x1
#define BB_CHIP_BB_CORE_SCRATCHPAD_SPR_VALUE_OFFSET 0
#define BB_CHIP_BB_CORE_SCRATCHPAD_SPR_VALUE_MASK 0xFFFFFFFF
#define BB_CHIP_BB_TOP_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_BB_TOP_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_BB_TOP_VERSION_MINOR_OFFSET 8
#define BB_CHIP_BB_TOP_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_BB_TOP_VERSION_PATCH_OFFSET 0
#define BB_CHIP_BB_TOP_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_BB_TOP_SYS_CONFIG_ENV_INFO_OFFSET 24
#define BB_CHIP_BB_TOP_SYS_CONFIG_ENV_INFO_MASK 0xFF000000
#define BB_CHIP_BB_TOP_SYS_CONFIG_PLATFORM_SUPPORT_OFFSET 16
#define BB_CHIP_BB_TOP_SYS_CONFIG_PLATFORM_SUPPORT_MASK 0xFF0000
#define BB_CHIP_BB_TOP_SYS_CONFIG_BASE_PLATFORM_OFFSET 10
#define BB_CHIP_BB_TOP_SYS_CONFIG_BASE_PLATFORM_MASK 0x3C00
#define BB_CHIP_BB_TOP_SYS_CONFIG_IMAGE_TYPE_OFFSET 8
#define BB_CHIP_BB_TOP_SYS_CONFIG_IMAGE_TYPE_MASK 0x300
#define BB_CHIP_BB_TOP_SYS_CONFIG_PART_NUMBER_OFFSET 4
#define BB_CHIP_BB_TOP_SYS_CONFIG_PART_NUMBER_MASK 0xF0
#define BB_CHIP_BB_TOP_SYS_CONFIG_VENDOR_OFFSET 2
#define BB_CHIP_BB_TOP_SYS_CONFIG_VENDOR_MASK 0xC
#define BB_CHIP_BB_TOP_SYS_CONFIG_TECHNOLOGY_OFFSET 0
#define BB_CHIP_BB_TOP_SYS_CONFIG_TECHNOLOGY_MASK 0x1
#define BB_CHIP_BB_TOP_SYS_CONFIG_TECHNOLOGY 0x1
#define BB_CHIP_BB_TOP_FEATURE_DP_GTP_OFFSET 4
#define BB_CHIP_BB_TOP_FEATURE_DP_GTP_MASK 0x10
#define BB_CHIP_BB_TOP_FEATURE_DP_GTP 0x10
#define BB_CHIP_BB_TOP_FEATURE_XADC_OFFSET 3
#define BB_CHIP_BB_TOP_FEATURE_XADC_MASK 0x8
#define BB_CHIP_BB_TOP_FEATURE_XADC 0x8
#define BB_CHIP_BB_TOP_FEATURE_SL_5G_OFFSET 2
#define BB_CHIP_BB_TOP_FEATURE_SL_5G_MASK 0x4
#define BB_CHIP_BB_TOP_FEATURE_SL_5G 0x4
#define BB_CHIP_BB_TOP_FEATURE_RXAUI_L0_T1_OFFSET 1
#define BB_CHIP_BB_TOP_FEATURE_RXAUI_L0_T1_MASK 0x2
#define BB_CHIP_BB_TOP_FEATURE_RXAUI_L0_T1 0x2
#define BB_CHIP_BB_TOP_FEATURE_RXAUI_L0_T0_OFFSET 0
#define BB_CHIP_BB_TOP_FEATURE_RXAUI_L0_T0_MASK 0x1
#define BB_CHIP_BB_TOP_FEATURE_RXAUI_L0_T0 0x1
#define BB_CHIP_BB_TOP_ICAP_WDATA_VAL_OFFSET 0
#define BB_CHIP_BB_TOP_ICAP_WDATA_VAL_MASK 0xFFFFFFFF
#define BB_CHIP_BB_TOP_ICAP_RDATA_VAL_OFFSET 0
#define BB_CHIP_BB_TOP_ICAP_RDATA_VAL_MASK 0xFFFFFFFF
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_CPU_RST_OFFSET 31
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_CPU_RST_MASK 0x80000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_CPU_RST 0x80000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_LINK_STATS_RX_RST_OFFSET 29
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_LINK_STATS_RX_RST_MASK 0x20000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_LINK_STATS_RX_RST 0x20000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_SL_5G_RX_RST_OFFSET 28
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_SL_5G_RX_RST_MASK 0x10000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_SL_5G_RX_RST 0x10000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_SL_5G_TX_RST_OFFSET 27
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_SL_5G_TX_RST_MASK 0x8000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_SL_5G_TX_RST 0x8000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_XMII_RX_RST_OFFSET 26
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_XMII_RX_RST_MASK 0x4000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_XMII_RX_RST 0x4000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_XMII_TX_RST_OFFSET 25
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_XMII_TX_RST_MASK 0x2000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_XMII_TX_RST 0x2000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GE_CLM_RX_RST_OFFSET 24
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GE_CLM_RX_RST_MASK 0x1000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GE_CLM_RX_RST 0x1000000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GE_CLM_TX_RST_OFFSET 23
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GE_CLM_TX_RST_MASK 0x800000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GE_CLM_TX_RST 0x800000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_RS232_RST_OFFSET 22
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_RS232_RST_MASK 0x400000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_RS232_RST 0x400000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_ULP_PHY_RST_OFFSET 21
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_ULP_PHY_RST_MASK 0x200000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_ULP_PHY_RST 0x200000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_ULP_CORE_RST_OFFSET 20
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_ULP_CORE_RST_MASK 0x100000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_ULP_CORE_RST 0x100000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_UPP_RST_OFFSET 19
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_UPP_RST_MASK 0x80000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_UPP_RST 0x80000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_XUSB_RST_OFFSET 18
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_XUSB_RST_MASK 0x40000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_XUSB_RST 0x40000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_TICO_D_CTRL_RST_OFFSET 17
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_TICO_D_CTRL_RST_MASK 0x20000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_TICO_D_CTRL_RST 0x20000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DP_SOURCE_RST_OFFSET 16
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DP_SOURCE_RST_MASK 0x10000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DP_SOURCE_RST 0x10000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_TICO_E_CTRL_RST_OFFSET 15
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_TICO_E_CTRL_RST_MASK 0x8000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_TICO_E_CTRL_RST 0x8000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DP_SINK_RST_OFFSET 14
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DP_SINK_RST_MASK 0x4000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DP_SINK_RST 0x4000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DP_AUX_HPD_RST_OFFSET 13
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DP_AUX_HPD_RST_MASK 0x2000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DP_AUX_HPD_RST 0x2000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_MCA_CORE_RX_RST_OFFSET 12
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_MCA_CORE_RX_RST_MASK 0x1000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_MCA_CORE_RX_RST 0x1000
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_MCA_CORE_TX_RST_OFFSET 11
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_MCA_CORE_TX_RST_MASK 0x800
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_MCA_CORE_TX_RST 0x800
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_L3_RX_RST_OFFSET 10
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_L3_RX_RST_MASK 0x400
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_L3_RX_RST 0x400
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_L3_TX_RST_OFFSET 9
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_L3_TX_RST_MASK 0x200
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_L3_TX_RST 0x200
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DLL_RX_RST_OFFSET 8
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DLL_RX_RST_MASK 0x100
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DLL_RX_RST 0x100
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DLL_TX_RST_OFFSET 7
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DLL_TX_RST_MASK 0x80
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_DLL_TX_RST 0x80
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GPIO_CTRL_RST_OFFSET 6
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GPIO_CTRL_RST_MASK 0x40
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GPIO_CTRL_RST 0x40
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_SPI_FLASH_CTRL_RST_OFFSET 5
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_SPI_FLASH_CTRL_RST_MASK 0x20
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_SPI_FLASH_CTRL_RST 0x20
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_MDIO_MASTER_RST_OFFSET 4
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_MDIO_MASTER_RST_MASK 0x10
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_MDIO_MASTER_RST 0x10
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_I2C_SLAVE_RST_OFFSET 3
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_I2C_SLAVE_RST_MASK 0x8
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_I2C_SLAVE_RST 0x8
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_I2C_MASTER_RST_OFFSET 2
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_I2C_MASTER_RST_MASK 0x4
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_I2C_MASTER_RST 0x4
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GE_UART_RST_OFFSET 1
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GE_UART_RST_MASK 0x2
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_GE_UART_RST 0x2
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_BB_UART_RST_OFFSET 0
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_BB_UART_RST_MASK 0x1
#define BB_CHIP_BB_TOP_GRM_SOFT_RST_CTRL_BB_UART_RST 0x1
#define BB_CHIP_BB_TOP_GCM_CONTROL_LINK_GT_COMMON_PLL0RESET_OFFSET 8
#define BB_CHIP_BB_TOP_GCM_CONTROL_LINK_GT_COMMON_PLL0RESET_MASK 0x100
#define BB_CHIP_BB_TOP_GCM_CONTROL_LINK_GT_COMMON_PLL0RESET 0x100
#define BB_CHIP_BB_TOP_GCM_CONTROL_XMII_TX_CLK_SEL_OFFSET 4
#define BB_CHIP_BB_TOP_GCM_CONTROL_XMII_TX_CLK_SEL_MASK 0x10
#define BB_CHIP_BB_TOP_GCM_CONTROL_XMII_TX_CLK_SEL 0x10
#define BB_CHIP_BB_TOP_GCM_CONTROL_ULP_PHY_CLK_PLL_RST_OFFSET 0
#define BB_CHIP_BB_TOP_GCM_CONTROL_ULP_PHY_CLK_PLL_RST_MASK 0x1
#define BB_CHIP_BB_TOP_GCM_CONTROL_ULP_PHY_CLK_PLL_RST 0x1
#define BB_CHIP_BB_TOP_GCM_STATUS_LINK_MMCM_LOCK_OFFSET 10
#define BB_CHIP_BB_TOP_GCM_STATUS_LINK_MMCM_LOCK_MASK 0x400
#define BB_CHIP_BB_TOP_GCM_STATUS_LINK_MMCM_LOCK 0x400
#define BB_CHIP_BB_TOP_GCM_STATUS_LINK_GT_COMMON_PLL0REFCLKLOST_OFFSET 9
#define BB_CHIP_BB_TOP_GCM_STATUS_LINK_GT_COMMON_PLL0REFCLKLOST_MASK 0x200
#define BB_CHIP_BB_TOP_GCM_STATUS_LINK_GT_COMMON_PLL0REFCLKLOST 0x200
#define BB_CHIP_BB_TOP_GCM_STATUS_LINK_GT_COMMON_PLL0LOCK_OFFSET 8
#define BB_CHIP_BB_TOP_GCM_STATUS_LINK_GT_COMMON_PLL0LOCK_MASK 0x100
#define BB_CHIP_BB_TOP_GCM_STATUS_LINK_GT_COMMON_PLL0LOCK 0x100
#define BB_CHIP_BB_TOP_GCM_STATUS_ULP_PHY_CLK_LOCK_OFFSET 4
#define BB_CHIP_BB_TOP_GCM_STATUS_ULP_PHY_CLK_LOCK_MASK 0x10
#define BB_CHIP_BB_TOP_GCM_STATUS_ULP_PHY_CLK_LOCK 0x10
#define BB_CHIP_BB_TOP_GCM_STATUS_CPU_CLK_LOCK_OFFSET 0
#define BB_CHIP_BB_TOP_GCM_STATUS_CPU_CLK_LOCK_MASK 0x1
#define BB_CHIP_BB_TOP_GCM_STATUS_CPU_CLK_LOCK 0x1
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_COUNT_OFFSET 16
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_COUNT_MASK 0xFF0000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_REF_CLK_FASTER_OFFSET 12
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_REF_CLK_FASTER_MASK 0x1000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_REF_CLK_FASTER 0x1000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_MAX_COUNT_OFFSET 4
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_MAX_COUNT_MASK 0xFF0
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_CLK_SEL_OFFSET 1
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_CLK_SEL_MASK 0xE
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_GO_OFFSET 0
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_GO_MASK 0x1
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_GO 0x1
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_COUNT_OFFSET 18
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_COUNT_MASK 0xFFFC0000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_REF_CLK_FASTER_OFFSET 16
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_REF_CLK_FASTER_MASK 0x10000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_REF_CLK_FASTER 0x10000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_MAX_COUNT_OFFSET 2
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_MAX_COUNT_MASK 0xFFFC
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_CLK_SEL_OFFSET 1
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_CLK_SEL_MASK 0x2
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_CLK_SEL 0x2
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_GO_OFFSET 0
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_GO_MASK 0x1
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_GO 0x1
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_AUTO_AUTO_ENABLE_OFFSET 31
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_AUTO_AUTO_ENABLE_MASK 0x80000000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_AUTO_AUTO_ENABLE 0x80000000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_AUTO_COMP_REF_CLK_FASTER_OFFSET 30
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_AUTO_COMP_REF_CLK_FASTER_MASK 0x40000000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_AUTO_COMP_REF_CLK_FASTER 0x40000000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_AUTO_COMP_COUNT_MAX_OFFSET 16
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_AUTO_COMP_COUNT_MAX_MASK 0x3FFF0000
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_AUTO_COMP_COUNT_MIN_OFFSET 0
#define BB_CHIP_BB_TOP_GCM_FREQ_DET_DP_AUTO_COMP_COUNT_MIN_MASK 0x3FFF
#define BB_CHIP_BB_TOP_IRQ_ENABLE_FREQ_DET_DP_OOR_OFFSET 18
#define BB_CHIP_BB_TOP_IRQ_ENABLE_FREQ_DET_DP_OOR_MASK 0x40000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_FREQ_DET_DP_OOR 0x40000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT1_RX_BUF_OVERFLOW_OFFSET 17
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT1_RX_BUF_OVERFLOW_MASK 0x20000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT1_RX_BUF_OVERFLOW 0x20000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT1_RX_BUF_UNDERFLOW_OFFSET 16
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT1_RX_BUF_UNDERFLOW_MASK 0x10000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT1_RX_BUF_UNDERFLOW 0x10000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT0_RX_BUF_OVERFLOW_OFFSET 15
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT0_RX_BUF_OVERFLOW_MASK 0x8000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT0_RX_BUF_OVERFLOW 0x8000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT0_RX_BUF_UNDERFLOW_OFFSET 14
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT0_RX_BUF_UNDERFLOW_MASK 0x4000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_GT0_RX_BUF_UNDERFLOW 0x4000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_RX_BUF_OVERFLOW_OFFSET 13
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_RX_BUF_OVERFLOW_MASK 0x2000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_RX_BUF_OVERFLOW 0x2000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_RX_BUF_UNDERFLOW_OFFSET 12
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_RX_BUF_UNDERFLOW_MASK 0x1000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_RX_BUF_UNDERFLOW 0x1000
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_RX_FSM_RESET_DONE_OFFSET 11
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_RX_FSM_RESET_DONE_MASK 0x800
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_RX_FSM_RESET_DONE 0x800
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_TX_FSM_RESET_DONE_OFFSET 10
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_TX_FSM_RESET_DONE_MASK 0x400
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SL_5G_TX_FSM_RESET_DONE 0x400
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_ALIGN_STATUS_OFFSET 9
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_ALIGN_STATUS_MASK 0x200
#define BB_CHIP_BB_TOP_IRQ_ENABLE_RXAUI_ALIGN_STATUS 0x200
#define BB_CHIP_BB_TOP_IRQ_ENABLE_ULP_PHY_CLK_LOCK_OFFSET 8
#define BB_CHIP_BB_TOP_IRQ_ENABLE_ULP_PHY_CLK_LOCK_MASK 0x100
#define BB_CHIP_BB_TOP_IRQ_ENABLE_ULP_PHY_CLK_LOCK 0x100
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_OT_OFFSET 7
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_OT_MASK 0x80
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_OT 0x80
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_VBRAM_OFFSET 6
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_VBRAM_MASK 0x40
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_VBRAM 0x40
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_VCCAUX_OFFSET 5
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_VCCAUX_MASK 0x20
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_VCCAUX 0x20
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_VCCINT_OFFSET 4
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_VCCINT_MASK 0x10
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_VCCINT 0x10
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_USER_TEMP_OFFSET 3
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_USER_TEMP_MASK 0x8
#define BB_CHIP_BB_TOP_IRQ_ENABLE_XADC_USER_TEMP 0x8
#define BB_CHIP_BB_TOP_IRQ_ENABLE_USB_VBUS_DETECT_OFFSET 2
#define BB_CHIP_BB_TOP_IRQ_ENABLE_USB_VBUS_DETECT_MASK 0x4
#define BB_CHIP_BB_TOP_IRQ_ENABLE_USB_VBUS_DETECT 0x4
#define BB_CHIP_BB_TOP_IRQ_ENABLE_MDIO_INT_B_OFFSET 1
#define BB_CHIP_BB_TOP_IRQ_ENABLE_MDIO_INT_B_MASK 0x2
#define BB_CHIP_BB_TOP_IRQ_ENABLE_MDIO_INT_B 0x2
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SFP_LOS_OFFSET 0
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SFP_LOS_MASK 0x1
#define BB_CHIP_BB_TOP_IRQ_ENABLE_SFP_LOS 0x1
#define BB_CHIP_BB_TOP_IRQ_PENDING_FREQ_DET_DP_OOR_OFFSET 18
#define BB_CHIP_BB_TOP_IRQ_PENDING_FREQ_DET_DP_OOR_MASK 0x40000
#define BB_CHIP_BB_TOP_IRQ_PENDING_FREQ_DET_DP_OOR 0x40000
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT1_RX_BUF_OVERFLOW_OFFSET 17
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT1_RX_BUF_OVERFLOW_MASK 0x20000
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT1_RX_BUF_OVERFLOW 0x20000
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT1_RX_BUF_UNDERFLOW_OFFSET 16
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT1_RX_BUF_UNDERFLOW_MASK 0x10000
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT1_RX_BUF_UNDERFLOW 0x10000
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT0_RX_BUF_OVERFLOW_OFFSET 15
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT0_RX_BUF_OVERFLOW_MASK 0x8000
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT0_RX_BUF_OVERFLOW 0x8000
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT0_RX_BUF_UNDERFLOW_OFFSET 14
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT0_RX_BUF_UNDERFLOW_MASK 0x4000
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_GT0_RX_BUF_UNDERFLOW 0x4000
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_RX_BUF_OVERFLOW_OFFSET 13
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_RX_BUF_OVERFLOW_MASK 0x2000
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_RX_BUF_OVERFLOW 0x2000
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_RX_BUF_UNDERFLOW_OFFSET 12
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_RX_BUF_UNDERFLOW_MASK 0x1000
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_RX_BUF_UNDERFLOW 0x1000
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_RX_FSM_RESET_DONE_OFFSET 11
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_RX_FSM_RESET_DONE_MASK 0x800
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_RX_FSM_RESET_DONE 0x800
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_TX_FSM_RESET_DONE_OFFSET 10
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_TX_FSM_RESET_DONE_MASK 0x400
#define BB_CHIP_BB_TOP_IRQ_PENDING_SL_5G_TX_FSM_RESET_DONE 0x400
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_ALIGN_STATUS_OFFSET 9
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_ALIGN_STATUS_MASK 0x200
#define BB_CHIP_BB_TOP_IRQ_PENDING_RXAUI_ALIGN_STATUS 0x200
#define BB_CHIP_BB_TOP_IRQ_PENDING_ULP_PHY_CLK_LOCK_OFFSET 8
#define BB_CHIP_BB_TOP_IRQ_PENDING_ULP_PHY_CLK_LOCK_MASK 0x100
#define BB_CHIP_BB_TOP_IRQ_PENDING_ULP_PHY_CLK_LOCK 0x100
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_OT_OFFSET 7
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_OT_MASK 0x80
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_OT 0x80
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_VBRAM_OFFSET 6
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_VBRAM_MASK 0x40
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_VBRAM 0x40
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_VCCAUX_OFFSET 5
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_VCCAUX_MASK 0x20
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_VCCAUX 0x20
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_VCCINT_OFFSET 4
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_VCCINT_MASK 0x10
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_VCCINT 0x10
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_USER_TEMP_OFFSET 3
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_USER_TEMP_MASK 0x8
#define BB_CHIP_BB_TOP_IRQ_PENDING_XADC_USER_TEMP 0x8
#define BB_CHIP_BB_TOP_IRQ_PENDING_USB_VBUS_DETECT_OFFSET 2
#define BB_CHIP_BB_TOP_IRQ_PENDING_USB_VBUS_DETECT_MASK 0x4
#define BB_CHIP_BB_TOP_IRQ_PENDING_USB_VBUS_DETECT 0x4
#define BB_CHIP_BB_TOP_IRQ_PENDING_MDIO_INT_B_OFFSET 1
#define BB_CHIP_BB_TOP_IRQ_PENDING_MDIO_INT_B_MASK 0x2
#define BB_CHIP_BB_TOP_IRQ_PENDING_MDIO_INT_B 0x2
#define BB_CHIP_BB_TOP_IRQ_PENDING_SFP_LOS_OFFSET 0
#define BB_CHIP_BB_TOP_IRQ_PENDING_SFP_LOS_MASK 0x1
#define BB_CHIP_BB_TOP_IRQ_PENDING_SFP_LOS 0x1
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_FREQ_DET_DP_OOR_OFFSET 18
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_FREQ_DET_DP_OOR_MASK 0x40000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_FREQ_DET_DP_OOR 0x40000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT1_RX_BUF_OVERFLOW_OFFSET 17
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT1_RX_BUF_OVERFLOW_MASK 0x20000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT1_RX_BUF_OVERFLOW 0x20000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT1_RX_BUF_UNDERFLOW_OFFSET 16
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT1_RX_BUF_UNDERFLOW_MASK 0x10000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT1_RX_BUF_UNDERFLOW 0x10000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT0_RX_BUF_OVERFLOW_OFFSET 15
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT0_RX_BUF_OVERFLOW_MASK 0x8000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT0_RX_BUF_OVERFLOW 0x8000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT0_RX_BUF_UNDERFLOW_OFFSET 14
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT0_RX_BUF_UNDERFLOW_MASK 0x4000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_GT0_RX_BUF_UNDERFLOW 0x4000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_RX_BUF_OVERFLOW_OFFSET 13
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_RX_BUF_OVERFLOW_MASK 0x2000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_RX_BUF_OVERFLOW 0x2000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_RX_BUF_UNDERFLOW_OFFSET 12
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_RX_BUF_UNDERFLOW_MASK 0x1000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_RX_BUF_UNDERFLOW 0x1000
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_RX_FSM_RESET_DONE_OFFSET 11
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_RX_FSM_RESET_DONE_MASK 0x800
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_RX_FSM_RESET_DONE 0x800
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_TX_FSM_RESET_DONE_OFFSET 10
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_TX_FSM_RESET_DONE_MASK 0x400
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SL_5G_TX_FSM_RESET_DONE 0x400
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_ALIGN_STATUS_OFFSET 9
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_ALIGN_STATUS_MASK 0x200
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_RXAUI_ALIGN_STATUS 0x200
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_ULP_PHY_CLK_LOCK_OFFSET 8
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_ULP_PHY_CLK_LOCK_MASK 0x100
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_ULP_PHY_CLK_LOCK 0x100
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_OT_OFFSET 7
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_OT_MASK 0x80
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_OT 0x80
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_VBRAM_OFFSET 6
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_VBRAM_MASK 0x40
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_VBRAM 0x40
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_VCCAUX_OFFSET 5
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_VCCAUX_MASK 0x20
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_VCCAUX 0x20
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_VCCINT_OFFSET 4
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_VCCINT_MASK 0x10
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_VCCINT 0x10
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_USER_TEMP_OFFSET 3
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_USER_TEMP_MASK 0x8
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_XADC_USER_TEMP 0x8
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_USB_VBUS_DETECT_OFFSET 2
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_USB_VBUS_DETECT_MASK 0x4
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_USB_VBUS_DETECT 0x4
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_MDIO_INT_B_OFFSET 1
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_MDIO_INT_B_MASK 0x2
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_MDIO_INT_B 0x2
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SFP_LOS_OFFSET 0
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SFP_LOS_MASK 0x1
#define BB_CHIP_BB_TOP_IRQ_PENDING_IRQ_SFP_LOS 0x1
#define BB_CHIP_BB_TOP_IRQ_RAW_FREQ_DET_DP_OOR_OFFSET 18
#define BB_CHIP_BB_TOP_IRQ_RAW_FREQ_DET_DP_OOR_MASK 0x40000
#define BB_CHIP_BB_TOP_IRQ_RAW_FREQ_DET_DP_OOR 0x40000
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT1_RX_BUF_OVERFLOW_OFFSET 17
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT1_RX_BUF_OVERFLOW_MASK 0x20000
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT1_RX_BUF_OVERFLOW 0x20000
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT1_RX_BUF_UNDERFLOW_OFFSET 16
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT1_RX_BUF_UNDERFLOW_MASK 0x10000
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT1_RX_BUF_UNDERFLOW 0x10000
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT0_RX_BUF_OVERFLOW_OFFSET 15
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT0_RX_BUF_OVERFLOW_MASK 0x8000
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT0_RX_BUF_OVERFLOW 0x8000
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT0_RX_BUF_UNDERFLOW_OFFSET 14
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT0_RX_BUF_UNDERFLOW_MASK 0x4000
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_GT0_RX_BUF_UNDERFLOW 0x4000
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_RX_BUF_OVERFLOW_OFFSET 13
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_RX_BUF_OVERFLOW_MASK 0x2000
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_RX_BUF_OVERFLOW 0x2000
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_RX_BUF_UNDERFLOW_OFFSET 12
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_RX_BUF_UNDERFLOW_MASK 0x1000
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_RX_BUF_UNDERFLOW 0x1000
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_RX_FSM_RESET_DONE_OFFSET 11
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_RX_FSM_RESET_DONE_MASK 0x800
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_RX_FSM_RESET_DONE 0x800
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_TX_FSM_RESET_DONE_OFFSET 10
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_TX_FSM_RESET_DONE_MASK 0x400
#define BB_CHIP_BB_TOP_IRQ_RAW_SL_5G_TX_FSM_RESET_DONE 0x400
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_ALIGN_STATUS_OFFSET 9
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_ALIGN_STATUS_MASK 0x200
#define BB_CHIP_BB_TOP_IRQ_RAW_RXAUI_ALIGN_STATUS 0x200
#define BB_CHIP_BB_TOP_IRQ_RAW_ULP_PHY_CLK_LOCK_OFFSET 8
#define BB_CHIP_BB_TOP_IRQ_RAW_ULP_PHY_CLK_LOCK_MASK 0x100
#define BB_CHIP_BB_TOP_IRQ_RAW_ULP_PHY_CLK_LOCK 0x100
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_OT_OFFSET 7
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_OT_MASK 0x80
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_OT 0x80
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_VBRAM_OFFSET 6
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_VBRAM_MASK 0x40
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_VBRAM 0x40
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_VCCAUX_OFFSET 5
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_VCCAUX_MASK 0x20
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_VCCAUX 0x20
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_VCCINT_OFFSET 4
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_VCCINT_MASK 0x10
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_VCCINT 0x10
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_USER_TEMP_OFFSET 3
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_USER_TEMP_MASK 0x8
#define BB_CHIP_BB_TOP_IRQ_RAW_XADC_USER_TEMP 0x8
#define BB_CHIP_BB_TOP_IRQ_RAW_USB_VBUS_DETECT_OFFSET 2
#define BB_CHIP_BB_TOP_IRQ_RAW_USB_VBUS_DETECT_MASK 0x4
#define BB_CHIP_BB_TOP_IRQ_RAW_USB_VBUS_DETECT 0x4
#define BB_CHIP_BB_TOP_IRQ_RAW_MDIO_INT_B_OFFSET 1
#define BB_CHIP_BB_TOP_IRQ_RAW_MDIO_INT_B_MASK 0x2
#define BB_CHIP_BB_TOP_IRQ_RAW_MDIO_INT_B 0x2
#define BB_CHIP_BB_TOP_IRQ_RAW_SFP_LOS_OFFSET 0
#define BB_CHIP_BB_TOP_IRQ_RAW_SFP_LOS_MASK 0x1
#define BB_CHIP_BB_TOP_IRQ_RAW_SFP_LOS 0x1
#define BB_CHIP_BB_TOP_LINK_CTRL_SEL_OFFSET 0
#define BB_CHIP_BB_TOP_LINK_CTRL_SEL_MASK 0x1
#define BB_CHIP_BB_TOP_LINK_CTRL_SEL 0x1
#define BB_CHIP_BB_TOP_MDIO_CTRL_MASTER_BUS_SEL_OFFSET 4
#define BB_CHIP_BB_TOP_MDIO_CTRL_MASTER_BUS_SEL_MASK 0x10
#define BB_CHIP_BB_TOP_MDIO_CTRL_MASTER_BUS_SEL 0x10
#define BB_CHIP_BB_TOP_MDIO_CTRL_MASTER_MDC_TRI_OFFSET 0
#define BB_CHIP_BB_TOP_MDIO_CTRL_MASTER_MDC_TRI_MASK 0x1
#define BB_CHIP_BB_TOP_MDIO_CTRL_MASTER_MDC_TRI 0x1
#define BB_CHIP_BB_TOP_I2C_CTRL_MASTER_BUS_SEL_OFFSET 4
#define BB_CHIP_BB_TOP_I2C_CTRL_MASTER_BUS_SEL_MASK 0x10
#define BB_CHIP_BB_TOP_I2C_CTRL_MASTER_BUS_SEL 0x10
#define BB_CHIP_BB_TOP_I2C_CTRL_MASTER_SCL_TRI_OFFSET 0
#define BB_CHIP_BB_TOP_I2C_CTRL_MASTER_SCL_TRI_MASK 0x1
#define BB_CHIP_BB_TOP_I2C_CTRL_MASTER_SCL_TRI 0x1
#define BB_CHIP_BB_TOP_UART_CTRL_GE_UART_SEL_OFFSET 0
#define BB_CHIP_BB_TOP_UART_CTRL_GE_UART_SEL_MASK 0x1
#define BB_CHIP_BB_TOP_UART_CTRL_GE_UART_SEL 0x1
#define BB_CHIP_BB_TOP_SFP_CTRL_TX_DISABLE_OFFSET 4
#define BB_CHIP_BB_TOP_SFP_CTRL_TX_DISABLE_MASK 0x10
#define BB_CHIP_BB_TOP_SFP_CTRL_TX_DISABLE 0x10
#define BB_CHIP_BB_TOP_SFP_CTRL_RS1_OFFSET 1
#define BB_CHIP_BB_TOP_SFP_CTRL_RS1_MASK 0x2
#define BB_CHIP_BB_TOP_SFP_CTRL_RS1 0x2
#define BB_CHIP_BB_TOP_SFP_CTRL_RS0_OFFSET 0
#define BB_CHIP_BB_TOP_SFP_CTRL_RS0_MASK 0x1
#define BB_CHIP_BB_TOP_SFP_CTRL_RS0 0x1
#define BB_CHIP_BB_TOP_SFP_STATUS_RX_LOS_OFFSET 8
#define BB_CHIP_BB_TOP_SFP_STATUS_RX_LOS_MASK 0x100
#define BB_CHIP_BB_TOP_SFP_STATUS_RX_LOS 0x100
#define BB_CHIP_BB_TOP_SFP_STATUS_TX_FAULT_OFFSET 4
#define BB_CHIP_BB_TOP_SFP_STATUS_TX_FAULT_MASK 0x10
#define BB_CHIP_BB_TOP_SFP_STATUS_TX_FAULT 0x10
#define BB_CHIP_BB_TOP_SFP_STATUS_MOD_ABS_OFFSET 0
#define BB_CHIP_BB_TOP_SFP_STATUS_MOD_ABS_MASK 0x1
#define BB_CHIP_BB_TOP_SFP_STATUS_MOD_ABS 0x1
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_FORCE_TX_ELEC_IDLE_OFFSET 20
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_FORCE_TX_ELEC_IDLE_MASK 0x100000
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_FORCE_TX_ELEC_IDLE 0x100000
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_STRAPPING_DONE_OFFSET 18
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_STRAPPING_DONE_MASK 0x40000
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_STRAPPING_DONE 0x40000
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_XTAL_DIS_OFFSET 17
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_XTAL_DIS_MASK 0x20000
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_XTAL_DIS 0x20000
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_SSC_DIS_OFFSET 16
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_SSC_DIS_MASK 0x10000
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_SSC_DIS 0x10000
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_POWER_PRESENT_OFFSET 9
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_POWER_PRESENT_MASK 0x200
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_POWER_PRESENT 0x200
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_POWER_PRESENT_SEL_OFFSET 8
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_POWER_PRESENT_SEL_MASK 0x100
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_POWER_PRESENT_SEL 0x100
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_OUT_ENABLE_OFFSET 4
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_OUT_ENABLE_MASK 0x10
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_OUT_ENABLE 0x10
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_TX_CLK_EN_OFFSET 1
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_TX_CLK_EN_MASK 0x2
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_TX_CLK_EN 0x2
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_RST_B_OFFSET 0
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_RST_B_MASK 0x1
#define BB_CHIP_BB_TOP_USB3PHY_CTRL_RST_B 0x1
#define BB_CHIP_BB_TOP_GE_CTRL_INT_N_OFFSET 8
#define BB_CHIP_BB_TOP_GE_CTRL_INT_N_MASK 0x100
#define BB_CHIP_BB_TOP_GE_CTRL_INT_N 0x100
#define BB_CHIP_BB_TOP_GE_CTRL_VBUS_DET_OFFSET 4
#define BB_CHIP_BB_TOP_GE_CTRL_VBUS_DET_MASK 0x10
#define BB_CHIP_BB_TOP_GE_CTRL_VBUS_DET 0x10
#define BB_CHIP_BB_TOP_GE_CTRL_CLM_TX_CLK_EN_OFFSET 3
#define BB_CHIP_BB_TOP_GE_CTRL_CLM_TX_CLK_EN_MASK 0x8
#define BB_CHIP_BB_TOP_GE_CTRL_CLM_TX_CLK_EN 0x8
#define BB_CHIP_BB_TOP_GE_CTRL_REF_CLK_EN_OFFSET 2
#define BB_CHIP_BB_TOP_GE_CTRL_REF_CLK_EN_MASK 0x4
#define BB_CHIP_BB_TOP_GE_CTRL_REF_CLK_EN 0x4
#define BB_CHIP_BB_TOP_GE_CTRL_BOOT_SEL_OFFSET 1
#define BB_CHIP_BB_TOP_GE_CTRL_BOOT_SEL_MASK 0x2
#define BB_CHIP_BB_TOP_GE_CTRL_BOOT_SEL 0x2
#define BB_CHIP_BB_TOP_GE_CTRL_RST_B_OFFSET 0
#define BB_CHIP_BB_TOP_GE_CTRL_RST_B_MASK 0x1
#define BB_CHIP_BB_TOP_GE_CTRL_RST_B 0x1
#define BB_CHIP_BB_TOP_XMII_CTRL_TXD_TRI_OFFSET 8
#define BB_CHIP_BB_TOP_XMII_CTRL_TXD_TRI_MASK 0xFF00
#define BB_CHIP_BB_TOP_XMII_CTRL_TX_ER_TRI_OFFSET 5
#define BB_CHIP_BB_TOP_XMII_CTRL_TX_ER_TRI_MASK 0x20
#define BB_CHIP_BB_TOP_XMII_CTRL_TX_ER_TRI 0x20
#define BB_CHIP_BB_TOP_XMII_CTRL_TX_EN_TRI_OFFSET 4
#define BB_CHIP_BB_TOP_XMII_CTRL_TX_EN_TRI_MASK 0x10
#define BB_CHIP_BB_TOP_XMII_CTRL_TX_EN_TRI 0x10
#define BB_CHIP_BB_TOP_XMII_CTRL_GTX_CLK_EN_OFFSET 1
#define BB_CHIP_BB_TOP_XMII_CTRL_GTX_CLK_EN_MASK 0x2
#define BB_CHIP_BB_TOP_XMII_CTRL_GTX_CLK_EN 0x2
#define BB_CHIP_BB_TOP_XMII_CTRL_RST_B_OFFSET 0
#define BB_CHIP_BB_TOP_XMII_CTRL_RST_B_MASK 0x1
#define BB_CHIP_BB_TOP_XMII_CTRL_RST_B 0x1
#define BB_CHIP_BB_TOP_RS232_CTRL_INVALID_B_OFFSET 4
#define BB_CHIP_BB_TOP_RS232_CTRL_INVALID_B_MASK 0x10
#define BB_CHIP_BB_TOP_RS232_CTRL_INVALID_B 0x10
#define BB_CHIP_BB_TOP_RS232_CTRL_FORCE_OFF_B_OFFSET 1
#define BB_CHIP_BB_TOP_RS232_CTRL_FORCE_OFF_B_MASK 0x2
#define BB_CHIP_BB_TOP_RS232_CTRL_FORCE_OFF_B 0x2
#define BB_CHIP_BB_TOP_RS232_CTRL_EN_B_OFFSET 0
#define BB_CHIP_BB_TOP_RS232_CTRL_EN_B_MASK 0x1
#define BB_CHIP_BB_TOP_RS232_CTRL_EN_B 0x1
#define BB_CHIP_BB_TOP_DRP_DRP_CTRL_DRP_DI_OFFSET 16
#define BB_CHIP_BB_TOP_DRP_DRP_CTRL_DRP_DI_MASK 0xFFFF0000
#define BB_CHIP_BB_TOP_DRP_DRP_CTRL_DRP_WE_OFFSET 12
#define BB_CHIP_BB_TOP_DRP_DRP_CTRL_DRP_WE_MASK 0x1000
#define BB_CHIP_BB_TOP_DRP_DRP_CTRL_DRP_WE 0x1000
#define BB_CHIP_BB_TOP_DRP_DRP_CTRL_DRP_ADDR_OFFSET 0
#define BB_CHIP_BB_TOP_DRP_DRP_CTRL_DRP_ADDR_MASK 0x1FF
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_XADC_OFFSET 12
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_XADC_MASK 0x1000
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_XADC 0x1000
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_SL_5G_GT0_OFFSET 11
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_SL_5G_GT0_MASK 0x800
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_SL_5G_GT0 0x800
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_RXAUI_GT1_OFFSET 10
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_RXAUI_GT1_MASK 0x400
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_RXAUI_GT1 0x400
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_RXAUI_GT0_OFFSET 9
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_RXAUI_GT0_MASK 0x200
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_RXAUI_GT0 0x200
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_LINK_MMCM_OFFSET 8
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_LINK_MMCM_MASK 0x100
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_LINK_MMCM 0x100
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_LINK_GT_COMMON_OFFSET 7
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_LINK_GT_COMMON_MASK 0x80
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_LINK_GT_COMMON 0x80
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT_RXOUTCLK_MMCM_OFFSET 6
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT_RXOUTCLK_MMCM_MASK 0x40
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT_RXOUTCLK_MMCM 0x40
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT_TXOUTCLK_MMCM_OFFSET 5
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT_TXOUTCLK_MMCM_MASK 0x20
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT_TXOUTCLK_MMCM 0x20
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT_COMMON_OFFSET 4
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT_COMMON_MASK 0x10
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT_COMMON 0x10
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT3_OFFSET 3
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT3_MASK 0x8
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT3 0x8
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT2_OFFSET 2
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT2_MASK 0x4
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT2 0x4
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT1_OFFSET 1
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT1_MASK 0x2
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT1 0x2
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT0_OFFSET 0
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT0_MASK 0x1
#define BB_CHIP_BB_TOP_DRP_DRP_EN_MASK_DP_GT0 0x1
#define BB_CHIP_BB_TOP_DRP_DRP_READ_DATA_DRP_DO_OFFSET 0
#define BB_CHIP_BB_TOP_DRP_DRP_READ_DATA_DRP_DO_MASK 0xFFFF
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_CTRL_PLL1REFCLKSEL_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_CTRL_PLL1REFCLKSEL_MASK 0x700
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_CTRL_PLL0REFCLKSEL_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_CTRL_PLL0REFCLKSEL_MASK 0x70
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_CTRL_PLL1PD_OFFSET 1
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_CTRL_PLL1PD_MASK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_CTRL_PLL1PD 0x2
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_CTRL_PLL0PD_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_CTRL_PLL0PD_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_CTRL_PLL0PD 0x1
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL1REFCLKLOST_OFFSET 5
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL1REFCLKLOST_MASK 0x20
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL1REFCLKLOST 0x20
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL0REFCLKLOST_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL0REFCLKLOST_MASK 0x10
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL0REFCLKLOST 0x10
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL1LOCK_OFFSET 1
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL1LOCK_MASK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL1LOCK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL0LOCK_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL0LOCK_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_PLL_STATUS_PLL0LOCK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_LOOPBACK_CTRL_GT3_LOOPBACK_OFFSET 12
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_LOOPBACK_CTRL_GT3_LOOPBACK_MASK 0x7000
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_LOOPBACK_CTRL_GT2_LOOPBACK_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_LOOPBACK_CTRL_GT2_LOOPBACK_MASK 0x700
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_LOOPBACK_CTRL_GT1_LOOPBACK_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_LOOPBACK_CTRL_GT1_LOOPBACK_MASK 0x70
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_LOOPBACK_CTRL_GT0_LOOPBACK_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_COMMON_LOOPBACK_CTRL_GT0_LOOPBACK_MASK 0x7
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_CLK_CTRL_GT3_TXSYSCLKSEL_OFFSET 6
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_CLK_CTRL_GT3_TXSYSCLKSEL_MASK 0xC0
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_CLK_CTRL_GT2_TXSYSCLKSEL_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_CLK_CTRL_GT2_TXSYSCLKSEL_MASK 0x30
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_CLK_CTRL_GT1_TXSYSCLKSEL_OFFSET 2
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_CLK_CTRL_GT1_TXSYSCLKSEL_MASK 0xC
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_CLK_CTRL_GT0_TXSYSCLKSEL_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_CLK_CTRL_GT0_TXSYSCLKSEL_MASK 0x3
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT3_TXPCSRESET_OFFSET 7
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT3_TXPCSRESET_MASK 0x80
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT3_TXPCSRESET 0x80
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT2_TXPCSRESET_OFFSET 6
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT2_TXPCSRESET_MASK 0x40
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT2_TXPCSRESET 0x40
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT1_TXPCSRESET_OFFSET 5
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT1_TXPCSRESET_MASK 0x20
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT1_TXPCSRESET 0x20
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT0_TXPCSRESET_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT0_TXPCSRESET_MASK 0x10
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_GT0_TXPCSRESET 0x10
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_SOFT_RESET_TX_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_SOFT_RESET_TX_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_RST_CTRL_SOFT_RESET_TX 0x1
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT_TXOUTCLK_MMCM_LOCK_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT_TXOUTCLK_MMCM_LOCK_MASK 0x100
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT_TXOUTCLK_MMCM_LOCK 0x100
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT3_TX_FSM_RESET_DONE_OFFSET 7
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT3_TX_FSM_RESET_DONE_MASK 0x80
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT3_TX_FSM_RESET_DONE 0x80
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT2_TX_FSM_RESET_DONE_OFFSET 6
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT2_TX_FSM_RESET_DONE_MASK 0x40
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT2_TX_FSM_RESET_DONE 0x40
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT1_TX_FSM_RESET_DONE_OFFSET 5
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT1_TX_FSM_RESET_DONE_MASK 0x20
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT1_TX_FSM_RESET_DONE 0x20
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT0_TX_FSM_RESET_DONE_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT0_TX_FSM_RESET_DONE_MASK 0x10
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT0_TX_FSM_RESET_DONE 0x10
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT3_TXRESETDONE_OFFSET 3
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT3_TXRESETDONE_MASK 0x8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT3_TXRESETDONE 0x8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT2_TXRESETDONE_OFFSET 2
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT2_TXRESETDONE_MASK 0x4
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT2_TXRESETDONE 0x4
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT1_TXRESETDONE_OFFSET 1
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT1_TXRESETDONE_MASK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT1_TXRESETDONE 0x2
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT0_TXRESETDONE_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT0_TXRESETDONE_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_STATUS_GT0_TXRESETDONE 0x1
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_DIFF_CTRL_GT3_TXDIFFCTRL_OFFSET 12
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_DIFF_CTRL_GT3_TXDIFFCTRL_MASK 0xF000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_DIFF_CTRL_GT2_TXDIFFCTRL_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_DIFF_CTRL_GT2_TXDIFFCTRL_MASK 0xF00
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_DIFF_CTRL_GT1_TXDIFFCTRL_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_DIFF_CTRL_GT1_TXDIFFCTRL_MASK 0xF0
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_DIFF_CTRL_GT0_TXDIFFCTRL_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_DIFF_CTRL_GT0_TXDIFFCTRL_MASK 0xF
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_POST_CURSOR_GT3_TXPOSTCURSOR_OFFSET 24
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_POST_CURSOR_GT3_TXPOSTCURSOR_MASK 0x1F000000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_POST_CURSOR_GT2_TXPOSTCURSOR_OFFSET 15
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_POST_CURSOR_GT2_TXPOSTCURSOR_MASK 0xF8000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_POST_CURSOR_GT1_TXPOSTCURSOR_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_POST_CURSOR_GT1_TXPOSTCURSOR_MASK 0x1F00
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_POST_CURSOR_GT0_TXPOSTCURSOR_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_POST_CURSOR_GT0_TXPOSTCURSOR_MASK 0x1F
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRE_CURSOR_GT3_TXPRECURSOR_OFFSET 24
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRE_CURSOR_GT3_TXPRECURSOR_MASK 0x1F000000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRE_CURSOR_GT2_TXPRECURSOR_OFFSET 15
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRE_CURSOR_GT2_TXPRECURSOR_MASK 0xF8000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRE_CURSOR_GT1_TXPRECURSOR_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRE_CURSOR_GT1_TXPRECURSOR_MASK 0x1F00
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRE_CURSOR_GT0_TXPRECURSOR_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRE_CURSOR_GT0_TXPRECURSOR_MASK 0x1F
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT3_TXPRBSFORCEERR_OFFSET 15
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT3_TXPRBSFORCEERR_MASK 0x8000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT3_TXPRBSFORCEERR 0x8000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT3_TXPRBSSEL_OFFSET 12
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT3_TXPRBSSEL_MASK 0x7000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT2_TXPRBSFORCEERR_OFFSET 11
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT2_TXPRBSFORCEERR_MASK 0x800
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT2_TXPRBSFORCEERR 0x800
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT2_TXPRBSSEL_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT2_TXPRBSSEL_MASK 0x700
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT1_TXPRBSFORCEERR_OFFSET 7
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT1_TXPRBSFORCEERR_MASK 0x80
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT1_TXPRBSFORCEERR 0x80
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT1_TXPRBSSEL_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT1_TXPRBSSEL_MASK 0x70
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT0_TXPRBSFORCEERR_OFFSET 3
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT0_TXPRBSFORCEERR_MASK 0x8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT0_TXPRBSFORCEERR 0x8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT0_TXPRBSSEL_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_PRBS_CTRL_GT0_TXPRBSSEL_MASK 0x7
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TXINHIBIT_OFFSET 19
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TXINHIBIT_MASK 0x80000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TXINHIBIT 0x80000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TXINHIBIT_OFFSET 18
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TXINHIBIT_MASK 0x40000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TXINHIBIT 0x40000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TXINHIBIT_OFFSET 17
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TXINHIBIT_MASK 0x20000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TXINHIBIT 0x20000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TXINHIBIT_OFFSET 16
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TXINHIBIT_MASK 0x10000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TXINHIBIT 0x10000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TXPD_OFFSET 14
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TXPD_MASK 0xC000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TXPD_OFFSET 12
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TXPD_MASK 0x3000
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TXPD_OFFSET 10
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TXPD_MASK 0xC00
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TXPD_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TXPD_MASK 0x300
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TX8B10BEN_OFFSET 7
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TX8B10BEN_MASK 0x80
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TX8B10BEN 0x80
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TX8B10BEN_OFFSET 6
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TX8B10BEN_MASK 0x40
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TX8B10BEN 0x40
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TX8B10BEN_OFFSET 5
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TX8B10BEN_MASK 0x20
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TX8B10BEN 0x20
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TX8B10BEN_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TX8B10BEN_MASK 0x10
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TX8B10BEN 0x10
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TXPOLARITY_OFFSET 3
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TXPOLARITY_MASK 0x8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT3_TXPOLARITY 0x8
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TXPOLARITY_OFFSET 2
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TXPOLARITY_MASK 0x4
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT2_TXPOLARITY 0x4
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TXPOLARITY_OFFSET 1
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TXPOLARITY_MASK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT1_TXPOLARITY 0x2
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TXPOLARITY_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TXPOLARITY_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_TX_TX_MISC_CTRL_GT0_TXPOLARITY 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_CLK_CTRL_GT3_RXSYSCLKSEL_OFFSET 6
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_CLK_CTRL_GT3_RXSYSCLKSEL_MASK 0xC0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_CLK_CTRL_GT2_RXSYSCLKSEL_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_CLK_CTRL_GT2_RXSYSCLKSEL_MASK 0x30
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_CLK_CTRL_GT1_RXSYSCLKSEL_OFFSET 2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_CLK_CTRL_GT1_RXSYSCLKSEL_MASK 0xC
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_CLK_CTRL_GT0_RXSYSCLKSEL_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_CLK_CTRL_GT0_RXSYSCLKSEL_MASK 0x3
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_RXLPMRESET_OFFSET 19
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_RXLPMRESET_MASK 0x80000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_RXLPMRESET 0x80000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_RXLPMRESET_OFFSET 18
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_RXLPMRESET_MASK 0x40000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_RXLPMRESET 0x40000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_RXLPMRESET_OFFSET 17
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_RXLPMRESET_MASK 0x20000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_RXLPMRESET 0x20000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_RXLPMRESET_OFFSET 16
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_RXLPMRESET_MASK 0x10000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_RXLPMRESET 0x10000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_EYESCANRESET_OFFSET 15
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_EYESCANRESET_MASK 0x8000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_EYESCANRESET 0x8000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_EYESCANRESET_OFFSET 14
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_EYESCANRESET_MASK 0x4000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_EYESCANRESET 0x4000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_EYESCANRESET_OFFSET 13
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_EYESCANRESET_MASK 0x2000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_EYESCANRESET 0x2000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_EYESCANRESET_OFFSET 12
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_EYESCANRESET_MASK 0x1000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_EYESCANRESET 0x1000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_RXPMARESET_OFFSET 11
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_RXPMARESET_MASK 0x800
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_RXPMARESET 0x800
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_RXPMARESET_OFFSET 10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_RXPMARESET_MASK 0x400
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_RXPMARESET 0x400
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_RXPMARESET_OFFSET 9
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_RXPMARESET_MASK 0x200
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_RXPMARESET 0x200
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_RXPMARESET_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_RXPMARESET_MASK 0x100
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_RXPMARESET 0x100
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_RXPCSRESET_OFFSET 7
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_RXPCSRESET_MASK 0x80
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT3_RXPCSRESET 0x80
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_RXPCSRESET_OFFSET 6
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_RXPCSRESET_MASK 0x40
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT2_RXPCSRESET 0x40
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_RXPCSRESET_OFFSET 5
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_RXPCSRESET_MASK 0x20
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT1_RXPCSRESET 0x20
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_RXPCSRESET_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_RXPCSRESET_MASK 0x10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_GT0_RXPCSRESET 0x10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_DONT_RESET_ON_DATA_ERROR_OFFSET 1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_DONT_RESET_ON_DATA_ERROR_MASK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_DONT_RESET_ON_DATA_ERROR 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_SOFT_RESET_RX_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_SOFT_RESET_RX_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_RST_CTRL_SOFT_RESET_RX 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT_RXOUTCLK_MMCM_LOCK_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT_RXOUTCLK_MMCM_LOCK_MASK 0x100
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT_RXOUTCLK_MMCM_LOCK 0x100
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT3_RX_FSM_RESET_DONE_OFFSET 7
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT3_RX_FSM_RESET_DONE_MASK 0x80
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT3_RX_FSM_RESET_DONE 0x80
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT2_RX_FSM_RESET_DONE_OFFSET 6
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT2_RX_FSM_RESET_DONE_MASK 0x40
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT2_RX_FSM_RESET_DONE 0x40
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT1_RX_FSM_RESET_DONE_OFFSET 5
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT1_RX_FSM_RESET_DONE_MASK 0x20
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT1_RX_FSM_RESET_DONE 0x20
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT0_RX_FSM_RESET_DONE_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT0_RX_FSM_RESET_DONE_MASK 0x10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT0_RX_FSM_RESET_DONE 0x10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT3_RXRESETDONE_OFFSET 3
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT3_RXRESETDONE_MASK 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT3_RXRESETDONE 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT2_RXRESETDONE_OFFSET 2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT2_RXRESETDONE_MASK 0x4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT2_RXRESETDONE 0x4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT1_RXRESETDONE_OFFSET 1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT1_RXRESETDONE_MASK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT1_RXRESETDONE 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT0_RXRESETDONE_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT0_RXRESETDONE_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_STATUS_GT0_RXRESETDONE 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT3_RXPCOMMAALIGNEN_OFFSET 7
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT3_RXPCOMMAALIGNEN_MASK 0x80
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT3_RXPCOMMAALIGNEN 0x80
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT2_RXPCOMMAALIGNEN_OFFSET 6
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT2_RXPCOMMAALIGNEN_MASK 0x40
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT2_RXPCOMMAALIGNEN 0x40
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT1_RXPCOMMAALIGNEN_OFFSET 5
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT1_RXPCOMMAALIGNEN_MASK 0x20
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT1_RXPCOMMAALIGNEN 0x20
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT0_RXPCOMMAALIGNEN_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT0_RXPCOMMAALIGNEN_MASK 0x10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT0_RXPCOMMAALIGNEN 0x10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT3_RXMCOMMAALIGNEN_OFFSET 3
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT3_RXMCOMMAALIGNEN_MASK 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT3_RXMCOMMAALIGNEN 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT2_RXMCOMMAALIGNEN_OFFSET 2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT2_RXMCOMMAALIGNEN_MASK 0x4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT2_RXMCOMMAALIGNEN 0x4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT1_RXMCOMMAALIGNEN_OFFSET 1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT1_RXMCOMMAALIGNEN_MASK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT1_RXMCOMMAALIGNEN 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT0_RXMCOMMAALIGNEN_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT0_RXMCOMMAALIGNEN_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_CTRL_GT0_RXMCOMMAALIGNEN 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT3_RXBYTEISALIGNED_OFFSET 3
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT3_RXBYTEISALIGNED_MASK 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT3_RXBYTEISALIGNED 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT2_RXBYTEISALIGNED_OFFSET 2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT2_RXBYTEISALIGNED_MASK 0x4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT2_RXBYTEISALIGNED 0x4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT1_RXBYTEISALIGNED_OFFSET 1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT1_RXBYTEISALIGNED_MASK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT1_RXBYTEISALIGNED 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT0_RXBYTEISALIGNED_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT0_RXBYTEISALIGNED_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_BYTE_ALIGN_STATUS_GT0_RXBYTEISALIGNED 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT3_RXPRBSCNTRESET_OFFSET 15
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT3_RXPRBSCNTRESET_MASK 0x8000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT3_RXPRBSCNTRESET 0x8000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT3_RXPRBSSEL_OFFSET 12
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT3_RXPRBSSEL_MASK 0x7000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT2_RXPRBSCNTRESET_OFFSET 11
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT2_RXPRBSCNTRESET_MASK 0x800
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT2_RXPRBSCNTRESET 0x800
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT2_RXPRBSSEL_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT2_RXPRBSSEL_MASK 0x700
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT1_RXPRBSCNTRESET_OFFSET 7
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT1_RXPRBSCNTRESET_MASK 0x80
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT1_RXPRBSCNTRESET 0x80
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT1_RXPRBSSEL_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT1_RXPRBSSEL_MASK 0x70
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT0_RXPRBSCNTRESET_OFFSET 3
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT0_RXPRBSCNTRESET_MASK 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT0_RXPRBSCNTRESET 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT0_RXPRBSSEL_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PRBS_CTRL_GT0_RXPRBSSEL_MASK 0x7
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_MONITOR_GT3_RXPHMONITOR_OFFSET 24
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_MONITOR_GT3_RXPHMONITOR_MASK 0x1F000000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_MONITOR_GT2_RXPHMONITOR_OFFSET 16
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_MONITOR_GT2_RXPHMONITOR_MASK 0x1F0000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_MONITOR_GT1_RXPHMONITOR_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_MONITOR_GT1_RXPHMONITOR_MASK 0x1F00
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_MONITOR_GT0_RXPHMONITOR_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_MONITOR_GT0_RXPHMONITOR_MASK 0x1F
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_SLIP_MONITOR_GT3_RXPHSLIPMONITOR_OFFSET 24
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_SLIP_MONITOR_GT3_RXPHSLIPMONITOR_MASK 0x1F000000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_SLIP_MONITOR_GT2_RXPHSLIPMONITOR_OFFSET 16
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_SLIP_MONITOR_GT2_RXPHSLIPMONITOR_MASK 0x1F0000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_SLIP_MONITOR_GT1_RXPHSLIPMONITOR_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_SLIP_MONITOR_GT1_RXPHSLIPMONITOR_MASK 0x1F00
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_SLIP_MONITOR_GT0_RXPHSLIPMONITOR_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_PH_SLIP_MONITOR_GT0_RXPHSLIPMONITOR_MASK 0x1F
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_DMONITOR_OUT_GT3_DMONITOROUT_OFFSET 24
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_DMONITOR_OUT_GT3_DMONITOROUT_MASK 0xFF000000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_DMONITOR_OUT_GT2_DMONITOROUT_OFFSET 16
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_DMONITOR_OUT_GT2_DMONITOROUT_MASK 0xFF0000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_DMONITOR_OUT_GT1_DMONITOROUT_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_DMONITOR_OUT_GT1_DMONITOROUT_MASK 0xFF00
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_DMONITOR_OUT_GT0_DMONITOROUT_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_DMONITOR_OUT_GT0_DMONITOROUT_MASK 0xFF
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT3_RXLPMLFHOLD_OFFSET 11
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT3_RXLPMLFHOLD_MASK 0x800
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT3_RXLPMLFHOLD 0x800
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT2_RXLPMLFHOLD_OFFSET 10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT2_RXLPMLFHOLD_MASK 0x400
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT2_RXLPMLFHOLD 0x400
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT1_RXLPMLFHOLD_OFFSET 9
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT1_RXLPMLFHOLD_MASK 0x200
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT1_RXLPMLFHOLD 0x200
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT0_RXLPMLFHOLD_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT0_RXLPMLFHOLD_MASK 0x100
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT0_RXLPMLFHOLD 0x100
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT3_RXLPMHFOVRDEN_OFFSET 7
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT3_RXLPMHFOVRDEN_MASK 0x80
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT3_RXLPMHFOVRDEN 0x80
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT2_RXLPMHFOVRDEN_OFFSET 6
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT2_RXLPMHFOVRDEN_MASK 0x40
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT2_RXLPMHFOVRDEN 0x40
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT1_RXLPMHFOVRDEN_OFFSET 5
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT1_RXLPMHFOVRDEN_MASK 0x20
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT1_RXLPMHFOVRDEN 0x20
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT0_RXLPMHFOVRDEN_OFFSET 4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT0_RXLPMHFOVRDEN_MASK 0x10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT0_RXLPMHFOVRDEN 0x10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT3_RXLPMHFHOLD_OFFSET 3
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT3_RXLPMHFHOLD_MASK 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT3_RXLPMHFHOLD 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT2_RXLPMHFHOLD_OFFSET 2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT2_RXLPMHFHOLD_MASK 0x4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT2_RXLPMHFHOLD 0x4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT1_RXLPMHFHOLD_OFFSET 1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT1_RXLPMHFHOLD_MASK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT1_RXLPMHFHOLD 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT0_RXLPMHFHOLD_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT0_RXLPMHFHOLD_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_EQ_CTRL_GT0_RXLPMHFHOLD 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT_DATA_VALID_EN_OFFSET 31
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT_DATA_VALID_EN_MASK 0x80000000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT_DATA_VALID_EN 0x80000000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT3_RXCDRHOLD_OFFSET 19
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT3_RXCDRHOLD_MASK 0x80000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT3_RXCDRHOLD 0x80000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT2_RXCDRHOLD_OFFSET 18
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT2_RXCDRHOLD_MASK 0x40000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT2_RXCDRHOLD 0x40000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT1_RXCDRHOLD_OFFSET 17
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT1_RXCDRHOLD_MASK 0x20000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT1_RXCDRHOLD 0x20000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT0_RXCDRHOLD_OFFSET 16
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT0_RXCDRHOLD_MASK 0x10000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT0_RXCDRHOLD 0x10000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT3_RXPD_OFFSET 14
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT3_RXPD_MASK 0xC000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT2_RXPD_OFFSET 12
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT2_RXPD_MASK 0x3000
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT1_RXPD_OFFSET 10
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT1_RXPD_MASK 0xC00
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT0_RXPD_OFFSET 8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT0_RXPD_MASK 0x300
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT3_RXPOLARITY_OFFSET 3
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT3_RXPOLARITY_MASK 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT3_RXPOLARITY 0x8
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT2_RXPOLARITY_OFFSET 2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT2_RXPOLARITY_MASK 0x4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT2_RXPOLARITY 0x4
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT1_RXPOLARITY_OFFSET 1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT1_RXPOLARITY_MASK 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT1_RXPOLARITY 0x2
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT0_RXPOLARITY_OFFSET 0
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT0_RXPOLARITY_MASK 0x1
#define BB_CHIP_BB_TOP_DP_GTP_RX_RX_MISC_CTRL_GT0_RXPOLARITY 0x1
#define BB_CHIP_BB_TOP_RXAUI_CONTROL_FIX_MISSING_START_OFFSET 8
#define BB_CHIP_BB_TOP_RXAUI_CONTROL_FIX_MISSING_START_MASK 0x100
#define BB_CHIP_BB_TOP_RXAUI_CONTROL_FIX_MISSING_START 0x100
#define BB_CHIP_BB_TOP_RXAUI_CONTROL_TYPE_SEL_OFFSET 4
#define BB_CHIP_BB_TOP_RXAUI_CONTROL_TYPE_SEL_MASK 0x30
#define BB_CHIP_BB_TOP_RXAUI_CONTROL_RESET_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_CONTROL_RESET_MASK 0x1
#define BB_CHIP_BB_TOP_RXAUI_CONTROL_RESET 0x1
#define BB_CHIP_BB_TOP_RXAUI_STATUS_DEBUG_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_STATUS_DEBUG_MASK 0x3F
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GTRXRESET_OFFSET 31
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GTRXRESET_MASK 0x80000000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GTRXRESET 0x80000000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXBUFRESET_OFFSET 21
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXBUFRESET_MASK 0x200000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXBUFRESET 0x200000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXBUFRESET_OFFSET 20
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXBUFRESET_MASK 0x100000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXBUFRESET 0x100000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXLPMRESET_OFFSET 17
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXLPMRESET_MASK 0x20000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXLPMRESET 0x20000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXLPMRESET_OFFSET 16
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXLPMRESET_MASK 0x10000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXLPMRESET 0x10000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXPCSRESET_OFFSET 13
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXPCSRESET_MASK 0x2000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXPCSRESET 0x2000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXPCSRESET_OFFSET 12
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXPCSRESET_MASK 0x1000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXPCSRESET 0x1000
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXPMARESET_OFFSET 9
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXPMARESET_MASK 0x200
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_RXPMARESET 0x200
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXPMARESET_OFFSET 8
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXPMARESET_MASK 0x100
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_RXPMARESET 0x100
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_TXPCSRESET_OFFSET 5
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_TXPCSRESET_MASK 0x20
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_TXPCSRESET 0x20
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_TXPCSRESET_OFFSET 4
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_TXPCSRESET_MASK 0x10
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_TXPCSRESET 0x10
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_TXPMARESET_OFFSET 1
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_TXPMARESET_MASK 0x2
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT1_TXPMARESET 0x2
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_TXPMARESET_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_TXPMARESET_MASK 0x1
#define BB_CHIP_BB_TOP_RXAUI_GT_RST_CTRL_GT0_TXPMARESET 0x1
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_RXPMARESETDONE_OFFSET 19
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_RXPMARESETDONE_MASK 0x80000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_RXPMARESETDONE 0x80000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_RXPMARESETDONE_OFFSET 18
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_RXPMARESETDONE_MASK 0x40000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_RXPMARESETDONE 0x40000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXDLYSRESETDONE_OFFSET 17
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXDLYSRESETDONE_MASK 0x20000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXDLYSRESETDONE 0x20000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXDLYSRESETDONE_OFFSET 16
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXDLYSRESETDONE_MASK 0x10000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXDLYSRESETDONE 0x10000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXPHINITDONE_OFFSET 15
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXPHINITDONE_MASK 0x8000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXPHINITDONE 0x8000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXPHINITDONE_OFFSET 14
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXPHINITDONE_MASK 0x4000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXPHINITDONE 0x4000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXPHALIGNDONE_OFFSET 13
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXPHALIGNDONE_MASK 0x2000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXPHALIGNDONE 0x2000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXPHALIGNDONE_OFFSET 12
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXPHALIGNDONE_MASK 0x1000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXPHALIGNDONE 0x1000
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_RXBUFSTATUS_OFFSET 8
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_RXBUFSTATUS_MASK 0x700
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_RXBUFSTATUS_OFFSET 4
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_RXBUFSTATUS_MASK 0x70
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_RXRESETDONE_OFFSET 3
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_RXRESETDONE_MASK 0x8
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_RXRESETDONE 0x8
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_RXRESETDONE_OFFSET 2
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_RXRESETDONE_MASK 0x4
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_RXRESETDONE 0x4
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXRESETDONE_OFFSET 1
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXRESETDONE_MASK 0x2
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT1_TXRESETDONE 0x2
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXRESETDONE_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXRESETDONE_MASK 0x1
#define BB_CHIP_BB_TOP_RXAUI_GT_STATUS_GT0_TXRESETDONE 0x1
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_DIFF_CTRL_GT1_TXDIFFCTRL_OFFSET 4
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_DIFF_CTRL_GT1_TXDIFFCTRL_MASK 0xF0
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_DIFF_CTRL_GT0_TXDIFFCTRL_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_DIFF_CTRL_GT0_TXDIFFCTRL_MASK 0xF
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_POST_CURSOR_GT1_TXPOSTCURSOR_OFFSET 8
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_POST_CURSOR_GT1_TXPOSTCURSOR_MASK 0x1F00
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_POST_CURSOR_GT0_TXPOSTCURSOR_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_POST_CURSOR_GT0_TXPOSTCURSOR_MASK 0x1F
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_PRE_CURSOR_GT1_TXPRECURSOR_OFFSET 8
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_PRE_CURSOR_GT1_TXPRECURSOR_MASK 0x1F00
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_PRE_CURSOR_GT0_TXPRECURSOR_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_GT_TX_PRE_CURSOR_GT0_TXPRECURSOR_MASK 0x1F
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMLFOVRDEN_OFFSET 13
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMLFOVRDEN_MASK 0x2000
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMLFOVRDEN 0x2000
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMLFOVRDEN_OFFSET 12
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMLFOVRDEN_MASK 0x1000
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMLFOVRDEN 0x1000
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMLFHOLD_OFFSET 9
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMLFHOLD_MASK 0x200
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMLFHOLD 0x200
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMLFHOLD_OFFSET 8
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMLFHOLD_MASK 0x100
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMLFHOLD 0x100
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMHFOVRDEN_OFFSET 5
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMHFOVRDEN_MASK 0x20
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMHFOVRDEN 0x20
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMHFOVRDEN_OFFSET 4
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMHFOVRDEN_MASK 0x10
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMHFOVRDEN 0x10
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMHFHOLD_OFFSET 1
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMHFHOLD_MASK 0x2
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT1_RXLPMHFHOLD 0x2
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMHFHOLD_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMHFHOLD_MASK 0x1
#define BB_CHIP_BB_TOP_RXAUI_GT_RX_EQ_CTRL_GT0_RXLPMHFHOLD 0x1
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT1_RXPRBSCNTRESET_OFFSET 15
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT1_RXPRBSCNTRESET_MASK 0x8000
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT1_RXPRBSCNTRESET 0x8000
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT1_RXPRBSSEL_OFFSET 12
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT1_RXPRBSSEL_MASK 0x7000
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT0_RXPRBSCNTRESET_OFFSET 11
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT0_RXPRBSCNTRESET_MASK 0x800
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT0_RXPRBSCNTRESET 0x800
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT0_RXPRBSSEL_OFFSET 8
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT0_RXPRBSSEL_MASK 0x700
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT1_TXPRBSFORCEERR_OFFSET 7
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT1_TXPRBSFORCEERR_MASK 0x80
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT1_TXPRBSFORCEERR 0x80
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT1_TXPRBSSEL_OFFSET 4
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT1_TXPRBSSEL_MASK 0x70
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT0_TXPRBSFORCEERR_OFFSET 3
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT0_TXPRBSFORCEERR_MASK 0x8
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT0_TXPRBSFORCEERR 0x8
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT0_TXPRBSSEL_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_GT_PRBS_CTRL_GT0_TXPRBSSEL_MASK 0x7
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_RXCDRHOLD_OFFSET 25
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_RXCDRHOLD_MASK 0x2000000
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_RXCDRHOLD 0x2000000
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_RXCDRHOLD_OFFSET 24
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_RXCDRHOLD_MASK 0x1000000
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_RXCDRHOLD 0x1000000
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_RXRATE_OFFSET 20
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_RXRATE_MASK 0x700000
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_RXRATE_OFFSET 16
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_RXRATE_MASK 0x70000
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_RXPOLARITY_OFFSET 13
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_RXPOLARITY_MASK 0x2000
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_RXPOLARITY 0x2000
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_RXPOLARITY_OFFSET 12
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_RXPOLARITY_MASK 0x1000
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_RXPOLARITY 0x1000
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_LOOPBACK_OFFSET 8
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_LOOPBACK_MASK 0x700
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_LOOPBACK_OFFSET 4
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_LOOPBACK_MASK 0x70
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_TXPOLARITY_OFFSET 3
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_TXPOLARITY_MASK 0x8
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_TXPOLARITY 0x8
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_TXPOLARITY_OFFSET 2
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_TXPOLARITY_MASK 0x4
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_TXPOLARITY 0x4
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_TXINHIBIT_OFFSET 1
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_TXINHIBIT_MASK 0x2
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT1_TXINHIBIT 0x2
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_TXINHIBIT_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_TXINHIBIT_MASK 0x1
#define BB_CHIP_BB_TOP_RXAUI_GT_MISC_CTRL_GT0_TXINHIBIT 0x1
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_MISSING_START_OFFSET 4
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_MISSING_START_MASK 0x10
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_MISSING_START 0x10
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT1_NOT_IN_TABLE_OFFSET 3
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT1_NOT_IN_TABLE_MASK 0x8
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT1_NOT_IN_TABLE 0x8
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT1_DISP_ERR_OFFSET 2
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT1_DISP_ERR_MASK 0x4
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT1_DISP_ERR 0x4
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT0_NOT_IN_TABLE_OFFSET 1
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT0_NOT_IN_TABLE_MASK 0x2
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT0_NOT_IN_TABLE 0x2
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT0_DISP_ERR_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT0_DISP_ERR_MASK 0x1
#define BB_CHIP_BB_TOP_RXAUI_STATS0_RD2CLR_CONFIG_GT0_DISP_ERR 0x1
#define BB_CHIP_BB_TOP_RXAUI_STATS0_GT0_DISP_ERR_GT0_DISP_ERR_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_STATS0_GT0_DISP_ERR_GT0_DISP_ERR_MASK 0xFFFFFFFF
#define BB_CHIP_BB_TOP_RXAUI_STATS0_GT0_NOT_IN_TABLE_GT0_NOT_IN_TABLE_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_STATS0_GT0_NOT_IN_TABLE_GT0_NOT_IN_TABLE_MASK 0xFFFFFFFF
#define BB_CHIP_BB_TOP_RXAUI_STATS0_GT1_DISP_ERR_GT1_DISP_ERR_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_STATS0_GT1_DISP_ERR_GT1_DISP_ERR_MASK 0xFFFFFFFF
#define BB_CHIP_BB_TOP_RXAUI_STATS0_GT1_NOT_IN_TABLE_GT1_NOT_IN_TABLE_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_STATS0_GT1_NOT_IN_TABLE_GT1_NOT_IN_TABLE_MASK 0xFFFFFFFF
#define BB_CHIP_BB_TOP_RXAUI_STATS0_MISSING_START_MISSING_START_OFFSET 0
#define BB_CHIP_BB_TOP_RXAUI_STATS0_MISSING_START_MISSING_START_MASK 0xFFFFFFFF
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXBUFRESET_OFFSET 10
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXBUFRESET_MASK 0x400
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXBUFRESET 0x400
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXLPMRESET_OFFSET 9
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXLPMRESET_MASK 0x200
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXLPMRESET 0x200
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_EYESCANRESET_OFFSET 8
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_EYESCANRESET_MASK 0x100
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_EYESCANRESET 0x100
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXPMARESET_OFFSET 7
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXPMARESET_MASK 0x80
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXPMARESET 0x80
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXPCSRESET_OFFSET 6
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXPCSRESET_MASK 0x40
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_RXPCSRESET 0x40
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_DONT_RESET_ON_DATA_ERROR_OFFSET 5
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_DONT_RESET_ON_DATA_ERROR_MASK 0x20
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_DONT_RESET_ON_DATA_ERROR 0x20
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_SOFT_RESET_RX_OFFSET 4
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_SOFT_RESET_RX_MASK 0x10
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_SOFT_RESET_RX 0x10
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_TXPMARESET_OFFSET 2
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_TXPMARESET_MASK 0x4
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_TXPMARESET 0x4
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_TXPCSRESET_OFFSET 1
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_TXPCSRESET_MASK 0x2
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_TXPCSRESET 0x2
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_SOFT_RESET_TX_OFFSET 0
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_SOFT_RESET_TX_MASK 0x1
#define BB_CHIP_BB_TOP_SL_5G_GT_RST_CTRL_SOFT_RESET_TX 0x1
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPRBSFORCEERR_OFFSET 27
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPRBSFORCEERR_MASK 0x8000000
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPRBSFORCEERR 0x8000000
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPRBSSEL_OFFSET 24
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPRBSSEL_MASK 0x7000000
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPOSTCURSOR_OFFSET 16
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPOSTCURSOR_MASK 0x1F0000
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPRECURSOR_OFFSET 8
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPRECURSOR_MASK 0x1F00
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXDIFFCTRL_OFFSET 4
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXDIFFCTRL_MASK 0xF0
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXINHIBIT_OFFSET 3
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXINHIBIT_MASK 0x8
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXINHIBIT 0x8
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPOLARITY_OFFSET 2
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPOLARITY_MASK 0x4
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPOLARITY 0x4
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPD_OFFSET 0
#define BB_CHIP_BB_TOP_SL_5G_GT_TX_CTRL_TXPD_MASK 0x3
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXPRBSCNTRESET_OFFSET 11
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXPRBSCNTRESET_MASK 0x800
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXPRBSCNTRESET 0x800
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXPRBSSEL_OFFSET 8
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXPRBSSEL_MASK 0x700
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXLPMLFHOLD_OFFSET 7
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXLPMLFHOLD_MASK 0x80
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXLPMLFHOLD 0x80
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXLPMHFOVRDEN_OFFSET 6
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXLPMHFOVRDEN_MASK 0x40
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXLPMHFOVRDEN 0x40
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXLPMHFHOLD_OFFSET 5
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXLPMHFHOLD_MASK 0x20
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXLPMHFHOLD 0x20
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXCDRHOLD_OFFSET 4
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXCDRHOLD_MASK 0x10
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXCDRHOLD 0x10
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_DATA_VALID_EN_OFFSET 3
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_DATA_VALID_EN_MASK 0x8
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_DATA_VALID_EN 0x8
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXPOLARITY_OFFSET 2
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXPOLARITY_MASK 0x4
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXPOLARITY 0x4
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXPD_OFFSET 0
#define BB_CHIP_BB_TOP_SL_5G_GT_RX_CTRL_RXPD_MASK 0x3
#define BB_CHIP_BB_TOP_SL_5G_GT_MISC_CTRL_LOOPBACK_OFFSET 0
#define BB_CHIP_BB_TOP_SL_5G_GT_MISC_CTRL_LOOPBACK_MASK 0x7
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_DMONITOROUT_OFFSET 16
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_DMONITOROUT_MASK 0xFF0000
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RXBYTEISALIGNED_OFFSET 12
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RXBYTEISALIGNED_MASK 0x1000
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RXBYTEISALIGNED 0x1000
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RXBUFSTATUS_OFFSET 8
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RXBUFSTATUS_MASK 0x700
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RXCLKCORCNT_OFFSET 4
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RXCLKCORCNT_MASK 0x30
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RX_FSM_RESET_DONE_OFFSET 3
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RX_FSM_RESET_DONE_MASK 0x8
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RX_FSM_RESET_DONE 0x8
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_TX_FSM_RESET_DONE_OFFSET 2
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_TX_FSM_RESET_DONE_MASK 0x4
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_TX_FSM_RESET_DONE 0x4
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RXRESETDONE_OFFSET 1
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RXRESETDONE_MASK 0x2
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_RXRESETDONE 0x2
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_TXRESETDONE_OFFSET 0
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_TXRESETDONE_MASK 0x1
#define BB_CHIP_BB_TOP_SL_5G_GT_STATUS_TXRESETDONE 0x1
#define BB_CHIP_BB_TOP_SL_5G_STATS0_RD2CLR_CONFIG_GT_RXBYTEREALIGN_OFFSET 2
#define BB_CHIP_BB_TOP_SL_5G_STATS0_RD2CLR_CONFIG_GT_RXBYTEREALIGN_MASK 0x4
#define BB_CHIP_BB_TOP_SL_5G_STATS0_RD2CLR_CONFIG_GT_RXBYTEREALIGN 0x4
#define BB_CHIP_BB_TOP_SL_5G_STATS0_RD2CLR_CONFIG_GT_NOT_IN_TABLE_OFFSET 1
#define BB_CHIP_BB_TOP_SL_5G_STATS0_RD2CLR_CONFIG_GT_NOT_IN_TABLE_MASK 0x2
#define BB_CHIP_BB_TOP_SL_5G_STATS0_RD2CLR_CONFIG_GT_NOT_IN_TABLE 0x2
#define BB_CHIP_BB_TOP_SL_5G_STATS0_RD2CLR_CONFIG_GT_DISP_ERR_OFFSET 0
#define BB_CHIP_BB_TOP_SL_5G_STATS0_RD2CLR_CONFIG_GT_DISP_ERR_MASK 0x1
#define BB_CHIP_BB_TOP_SL_5G_STATS0_RD2CLR_CONFIG_GT_DISP_ERR 0x1
#define BB_CHIP_BB_TOP_SL_5G_STATS0_GT_DISP_ERR_GT_DISP_ERR_OFFSET 0
#define BB_CHIP_BB_TOP_SL_5G_STATS0_GT_DISP_ERR_GT_DISP_ERR_MASK 0xFFFFFFFF
#define BB_CHIP_BB_TOP_SL_5G_STATS0_GT_NOT_IN_TABLE_GT_NOT_IN_TABLE_OFFSET 0
#define BB_CHIP_BB_TOP_SL_5G_STATS0_GT_NOT_IN_TABLE_GT_NOT_IN_TABLE_MASK 0xFFFFFFFF
#define BB_CHIP_BB_TOP_SL_5G_STATS0_GT_RXBYTEREALIGN_GT_RXBYTEREALIGN_OFFSET 0
#define BB_CHIP_BB_TOP_SL_5G_STATS0_GT_RXBYTEREALIGN_GT_RXBYTEREALIGN_MASK 0xFFFFFFFF
#define BB_CHIP_GE_UART_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_GE_UART_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_GE_UART_VERSION_MINOR_OFFSET 8
#define BB_CHIP_GE_UART_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_GE_UART_VERSION_PATCH_OFFSET 0
#define BB_CHIP_GE_UART_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_CLEAR_OFFSET 31
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_CLEAR_MASK 0x80000000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_CLEAR 0x80000000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_AF_OFFSET 27
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_AF_MASK 0x8000000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_AF 0x8000000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_AE_OFFSET 26
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_AE_MASK 0x4000000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_AE 0x4000000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_FULL_OFFSET 25
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_FULL_MASK 0x2000000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_FULL 0x2000000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_EMPTY_OFFSET 24
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_EMPTY_MASK 0x1000000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_EMPTY 0x1000000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_AFT_OFFSET 16
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_AFT_MASK 0xFF0000
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_AET_OFFSET 8
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_AET_MASK 0xFF00
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_DEPTH_OFFSET 0
#define BB_CHIP_GE_UART_TX_FIFO_FIFO_DEPTH_MASK 0xFF
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_CLEAR_OFFSET 31
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_CLEAR_MASK 0x80000000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_CLEAR 0x80000000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_AF_OFFSET 27
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_AF_MASK 0x8000000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_AF 0x8000000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_AE_OFFSET 26
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_AE_MASK 0x4000000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_AE 0x4000000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_FULL_OFFSET 25
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_FULL_MASK 0x2000000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_FULL 0x2000000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_EMPTY_OFFSET 24
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_EMPTY_MASK 0x1000000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_EMPTY 0x1000000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_AFT_OFFSET 16
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_AFT_MASK 0xFF0000
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_AET_OFFSET 8
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_AET_MASK 0xFF00
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_DEPTH_OFFSET 0
#define BB_CHIP_GE_UART_RX_FIFO_FIFO_DEPTH_MASK 0xFF
#define BB_CHIP_GE_UART_TX_DATA_VAL_OFFSET 0
#define BB_CHIP_GE_UART_TX_DATA_VAL_MASK 0xFF
#define BB_CHIP_GE_UART_RX_DATA_VAL_OFFSET 0
#define BB_CHIP_GE_UART_RX_DATA_VAL_MASK 0xFF
#define BB_CHIP_GE_UART_CONTROL_PRESCALER_OFFSET 16
#define BB_CHIP_GE_UART_CONTROL_PRESCALER_MASK 0xFFFF0000
#define BB_CHIP_GE_UART_CONTROL_TX_IRQ_EN_OFFSET 3
#define BB_CHIP_GE_UART_CONTROL_TX_IRQ_EN_MASK 0x8
#define BB_CHIP_GE_UART_CONTROL_TX_IRQ_EN 0x8
#define BB_CHIP_GE_UART_CONTROL_RX_IRQ_EN_OFFSET 2
#define BB_CHIP_GE_UART_CONTROL_RX_IRQ_EN_MASK 0x4
#define BB_CHIP_GE_UART_CONTROL_RX_IRQ_EN 0x4
#define BB_CHIP_GE_UART_CONTROL_TX_EN_OFFSET 1
#define BB_CHIP_GE_UART_CONTROL_TX_EN_MASK 0x2
#define BB_CHIP_GE_UART_CONTROL_TX_EN 0x2
#define BB_CHIP_GE_UART_CONTROL_RX_EN_OFFSET 0
#define BB_CHIP_GE_UART_CONTROL_RX_EN_MASK 0x1
#define BB_CHIP_GE_UART_CONTROL_RX_EN 0x1
#define BB_CHIP_GE_UART_TIMEOUT_VAL_OFFSET 0
#define BB_CHIP_GE_UART_TIMEOUT_VAL_MASK 0xFFFFFFFF
#define BB_CHIP_GE_UART_ERRORS_OVERRUN_ERR_OFFSET 2
#define BB_CHIP_GE_UART_ERRORS_OVERRUN_ERR_MASK 0x4
#define BB_CHIP_GE_UART_ERRORS_OVERRUN_ERR 0x4
#define BB_CHIP_GE_UART_ERRORS_STOP_ERR_OFFSET 1
#define BB_CHIP_GE_UART_ERRORS_STOP_ERR_MASK 0x2
#define BB_CHIP_GE_UART_ERRORS_STOP_ERR 0x2
#define BB_CHIP_GE_UART_ERRORS_START_ERR_OFFSET 0
#define BB_CHIP_GE_UART_ERRORS_START_ERR_MASK 0x1
#define BB_CHIP_GE_UART_ERRORS_START_ERR 0x1
#define BB_CHIP_LINK_LAYER_TX_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_TX_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_TX_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MAC_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_MAC_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_TX_MAC_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_MAC_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_TX_MAC_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_INJECT_CRC32_ERR_OFFSET 4
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_INJECT_CRC32_ERR_MASK 0x10
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_INJECT_CRC32_ERR 0x10
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_DISABLE_CRC32_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_DISABLE_CRC32_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_DISABLE_CRC32 0x8
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_CRC32_IMPLMNTD_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_CRC32_IMPLMNTD_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_CRC32_IMPLMNTD 0x4
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_DBG_SEQ_NUM_EN_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_DBG_SEQ_NUM_EN_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_DBG_SEQ_NUM_EN 0x2
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_EN_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_EN_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MAC_MAC_CONFIG_EN 0x1
#define BB_CHIP_LINK_LAYER_TX_MAC_PA_WORD1_PA_WORD1_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_PA_WORD1_PA_WORD1_MASK 0xFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_PA_WORD0_PA_WORD0_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_PA_WORD0_PA_WORD0_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_SFD_SFD_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_SFD_SFD_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MAC_DA_WORD1_DA_W1_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_DA_WORD1_DA_W1_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_DA_WORD0_DA_W0_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_DA_WORD0_DA_W0_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_SA__WORD1_SA_W1_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_SA__WORD1_SA_W1_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_SA_WORD0_SA_W0_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_SA_WORD0_SA_W0_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_LT_LT_MODE_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_MAC_LT_LT_MODE_MASK 0x10000
#define BB_CHIP_LINK_LAYER_TX_MAC_LT_LT_MODE 0x10000
#define BB_CHIP_LINK_LAYER_TX_MAC_LT_LT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_LT_LT_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_IDLE_IDLE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_IDLE_IDLE_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MAC_FRM_RATE_FRM_RATE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_FRM_RATE_FRM_RATE_MASK 0xFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_BANDWIDTH_GAP_BANDWIDTH_GAP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_BANDWIDTH_GAP_BANDWIDTH_GAP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_BANDWIDTH_LIMIT_BANDWIDTH_LIMIT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_BANDWIDTH_LIMIT_BANDWIDTH_LIMIT_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_ROLLOVER_OFFSET 7
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_ROLLOVER_MASK 0x80
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_ROLLOVER 0x80
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_COUNT_BEYOND_PTP_OFFSET 6
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_COUNT_BEYOND_PTP_MASK 0x40
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_FSM_COUNT_BEYOND_PTP 0x40
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_SOP_OFFSET 5
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_SOP_MASK 0x20
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_SOP 0x20
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_EOP_OFFSET 4
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_EOP_MASK 0x10
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_IN_EOP 0x10
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_STALL_PTP_IN_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_STALL_PTP_IN_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_STALL_PTP_IN 0x8
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_SOP_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_SOP_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_SOP 0x4
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_EOP_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_EOP_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_OUT_EOP 0x2
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_PAUSE_FRAME_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_PAUSE_FRAME_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_RD2CLR_CONFIG_PAUSE_FRAME 0x1
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_PAUSE_FRAME_PAUSE_FRAME_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_PAUSE_FRAME_PAUSE_FRAME_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_OUT_EOP_OUT_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_OUT_EOP_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_OUT_SOP_OUT_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_OUT_SOP_OUT_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_STALL_PTP_IN_STALL_PTP_IN_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_STALL_PTP_IN_STALL_PTP_IN_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_IN_EOP_IN_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_IN_EOP_IN_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_IN_SOP_IN_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_IN_SOP_IN_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_FSM_COUNT_BEYOND_PTP_FSM_COUNT_BEYOND_PTP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_FSM_COUNT_BEYOND_PTP_FSM_COUNT_BEYOND_PTP_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_FSM_ROLLOVER_FSM_ROLLOVER_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MAC_STATS0_FSM_ROLLOVER_FSM_ROLLOVER_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_XGMII_EN_OFFSET 4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_XGMII_EN_MASK 0x10
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_XGMII_EN 0x10
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_GMII_EN_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_GMII_EN_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_ENABLE_TX_GMII_EN 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_SOP_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_SOP_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_SOP 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_EOP_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS0_RD2CLR_CONFIG_INBUFF_EOP 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS0_INBUFF_EOP_INBUFF_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS0_INBUFF_EOP_INBUFF_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS0_INBUFF_SOP_INBUFF_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS0_INBUFF_SOP_INBUFF_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_START_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_START_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_START 0x8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_DONE_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_DONE_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_DONE 0x4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_SOP_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_SOP_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_SOP 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_EOP_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_RD2CLR_CONFIG_GMII_OUTBUFF_EOP 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_OUTBUFF_EOP_GMII_OUT_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_OUTBUFF_EOP_GMII_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_OUTBUFF_SOP_GMII_OUTBUFF_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_OUTBUFF_SOP_GMII_OUTBUFF_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_DONE_GMII_DONE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_DONE_GMII_DONE_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_START_GMII_START_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS1_GMII_START_GMII_START_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_START_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_START_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_START 0x8
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_DONE_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_DONE_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_DONE 0x4
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_SOP_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_SOP_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_SOP 0x2
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_EOP_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_RD2CLR_CONFIG_XGMII_OUTBUFF_EOP 0x1
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_OUTBUFF_EOP_XGMII_OUT_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_OUTBUFF_EOP_XGMII_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_OUTBUFF_SOP_XGMII_OUTBUFF_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_OUTBUFF_SOP_XGMII_OUTBUFF_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_DONE_XGMII_DONE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_DONE_XGMII_DONE_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_START_XGMII_START_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_MEDIA_RS_STATS2_XGMII_START_XGMII_START_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_MASK 0xF0000
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLES_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLES_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR 0x2
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR 0x1
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_SET_UP_ENABLE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_SET_UP_ENABLE_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_SET_UP_ENABLE 0x1
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_IWG_CNT_OFFSET 10
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_IWG_CNT_MASK 0xC00
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_IFG_CNT_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_IFG_CNT_MASK 0x300
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_PKT_CNT_OFFSET 6
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_PKT_CNT_MASK 0xC0
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_PKT_SIZE_OFFSET 4
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_PKT_SIZE_MASK 0x30
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_THROTTLE_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_THROTTLE_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_THROTTLE 0x8
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_MODE_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_MODE_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_MODE 0x4
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_ENABLE_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_ENABLE_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_ENABLE 0x2
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_GO_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_GO_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_MEDIA_GEN_MCA_MGEN_GO 0x1
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAX_BYTE_MAX_BYTE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAX_BYTE_MAX_BYTE_MASK 0x3FFF
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAC_DG_TYPE_MAC_DG_TYPE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAC_DG_TYPE_MAC_DG_TYPE_MASK 0xFF
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_TIMER_WAIT_TIMER_WAIT_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_TIMER_WAIT_TIMER_WAIT_MASK 0xFFF
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MTU_SIZE_MTU_SIZE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MTU_SIZE_MTU_SIZE_MASK 0x3FFF
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAX_MTU_SIZE_MAX_MTU_SIZE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_SELF_TEST_SUPPORT_FRAMER_MAX_MTU_SIZE_MAX_MTU_SIZE_MASK 0x3FFF
#define BB_CHIP_LINK_LAYER_TX_CONTROL_FORCE_XGMII_RF_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_CONTROL_FORCE_XGMII_RF_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_CONTROL_FORCE_XGMII_RF 0x2
#define BB_CHIP_LINK_LAYER_TX_CONTROL_FORCE_XGMII_IDLE_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_CONTROL_FORCE_XGMII_IDLE_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_CONTROL_FORCE_XGMII_IDLE 0x1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_PAUSE_FRAME_IRQ_ROLLOVER_OFFSET 28
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_PAUSE_FRAME_IRQ_ROLLOVER_MASK 0x10000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_PAUSE_FRAME_IRQ_ROLLOVER 0x10000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_EOP_IRQ_ROLLOVER_OFFSET 27
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_EOP_IRQ_ROLLOVER_MASK 0x8000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_EOP_IRQ_ROLLOVER 0x8000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_SOP_IRQ_ROLLOVER_OFFSET 26
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_SOP_IRQ_ROLLOVER_MASK 0x4000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_OUT_SOP_IRQ_ROLLOVER 0x4000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_STALL_PTP_IN_IRQ_ROLLOVER_OFFSET 25
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_STALL_PTP_IN_IRQ_ROLLOVER_MASK 0x2000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_STALL_PTP_IN_IRQ_ROLLOVER 0x2000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_EOP_IRQ_ROLLOVER_OFFSET 24
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_EOP_IRQ_ROLLOVER_MASK 0x1000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_EOP_IRQ_ROLLOVER 0x1000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_SOP_IRQ_ROLLOVER_OFFSET 23
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_SOP_IRQ_ROLLOVER_MASK 0x800000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_IN_SOP_IRQ_ROLLOVER 0x800000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_OFFSET 22
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_MASK 0x400000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER 0x400000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_OFFSET 21
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_MASK 0x200000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_MAC_FSM_ROLLOVER_IRQ_ROLLOVER 0x200000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x100000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_NFIFO_DCOUNT_IRQ_ROLLOVER 0x100000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 19
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x80000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PFIFO_DCOUNT_IRQ_ROLLOVER 0x80000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 18
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x40000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x40000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 17
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x20000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_FIFO_FULL_ERR_IRQ_ROLLOVER 0x20000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_ERR_IRQ_ROLLOVER_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_ERR_IRQ_ROLLOVER_MASK 0x10000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_ERR_IRQ_ROLLOVER 0x10000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 15
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x8000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_PKT_SOP_ERR_IRQ_ROLLOVER 0x8000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 14
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_WFLUSH_ACT_IRQ_ROLLOVER 0x4000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 13
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x2000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_RD_IRQ_ROLLOVER 0x2000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 12
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x1000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_WR_IRQ_ROLLOVER 0x1000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 11
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x800
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_RFLUSH_ACT_IRQ_ROLLOVER 0x800
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_IRQ_ROLLOVER_OFFSET 10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_IRQ_ROLLOVER_MASK 0x400
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_DRP_PKT_IRQ_ROLLOVER 0x400
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 9
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x200
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_EOP_IRQ_ROLLOVER 0x200
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x100
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_INBUFF_SOP_IRQ_ROLLOVER 0x100
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 7
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x80
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x80
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 6
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x40
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x40
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_DONE_IRQ_ROLLOVER_OFFSET 5
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_DONE_IRQ_ROLLOVER_MASK 0x20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_DONE_IRQ_ROLLOVER 0x20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_START_IRQ_ROLLOVER_OFFSET 4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_START_IRQ_ROLLOVER_MASK 0x10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_GMII_START_IRQ_ROLLOVER 0x10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_DONE_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_DONE_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_DONE_IRQ_ROLLOVER 0x2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_START_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_START_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_ENABLE_RS_XGMII_START_IRQ_ROLLOVER 0x1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_PAUSE_FRAME_IRQ_ROLLOVER_OFFSET 28
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_PAUSE_FRAME_IRQ_ROLLOVER_MASK 0x10000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_PAUSE_FRAME_IRQ_ROLLOVER 0x10000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_EOP_IRQ_ROLLOVER_OFFSET 27
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_EOP_IRQ_ROLLOVER_MASK 0x8000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_EOP_IRQ_ROLLOVER 0x8000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_SOP_IRQ_ROLLOVER_OFFSET 26
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_SOP_IRQ_ROLLOVER_MASK 0x4000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_OUT_SOP_IRQ_ROLLOVER 0x4000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_STALL_PTP_IN_IRQ_ROLLOVER_OFFSET 25
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_STALL_PTP_IN_IRQ_ROLLOVER_MASK 0x2000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_STALL_PTP_IN_IRQ_ROLLOVER 0x2000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_EOP_IRQ_ROLLOVER_OFFSET 24
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_EOP_IRQ_ROLLOVER_MASK 0x1000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_EOP_IRQ_ROLLOVER 0x1000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_SOP_IRQ_ROLLOVER_OFFSET 23
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_SOP_IRQ_ROLLOVER_MASK 0x800000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_IN_SOP_IRQ_ROLLOVER 0x800000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_OFFSET 22
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_MASK 0x400000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER 0x400000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_OFFSET 21
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_MASK 0x200000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_MAC_FSM_ROLLOVER_IRQ_ROLLOVER 0x200000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x100000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_NFIFO_DCOUNT_IRQ_ROLLOVER 0x100000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 19
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x80000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PFIFO_DCOUNT_IRQ_ROLLOVER 0x80000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 18
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x40000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x40000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 17
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x20000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_FIFO_FULL_ERR_IRQ_ROLLOVER 0x20000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_ERR_IRQ_ROLLOVER_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_ERR_IRQ_ROLLOVER_MASK 0x10000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_ERR_IRQ_ROLLOVER 0x10000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 15
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x8000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_PKT_SOP_ERR_IRQ_ROLLOVER 0x8000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 14
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_WFLUSH_ACT_IRQ_ROLLOVER 0x4000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 13
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x2000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_RD_IRQ_ROLLOVER 0x2000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 12
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x1000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_WR_IRQ_ROLLOVER 0x1000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 11
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x800
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_RFLUSH_ACT_IRQ_ROLLOVER 0x800
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_IRQ_ROLLOVER_OFFSET 10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_IRQ_ROLLOVER_MASK 0x400
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_DRP_PKT_IRQ_ROLLOVER 0x400
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 9
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x200
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_EOP_IRQ_ROLLOVER 0x200
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x100
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_INBUFF_SOP_IRQ_ROLLOVER 0x100
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 7
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x80
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x80
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 6
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x40
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x40
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_DONE_IRQ_ROLLOVER_OFFSET 5
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_DONE_IRQ_ROLLOVER_MASK 0x20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_DONE_IRQ_ROLLOVER 0x20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_START_IRQ_ROLLOVER_OFFSET 4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_START_IRQ_ROLLOVER_MASK 0x10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_GMII_START_IRQ_ROLLOVER 0x10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_DONE_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_DONE_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_DONE_IRQ_ROLLOVER 0x2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_START_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_START_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_RS_XGMII_START_IRQ_ROLLOVER 0x1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_PAUSE_FRAME_IRQ_ROLLOVER_OFFSET 28
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_PAUSE_FRAME_IRQ_ROLLOVER_MASK 0x10000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_PAUSE_FRAME_IRQ_ROLLOVER 0x10000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_EOP_IRQ_ROLLOVER_OFFSET 27
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_EOP_IRQ_ROLLOVER_MASK 0x8000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_EOP_IRQ_ROLLOVER 0x8000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_SOP_IRQ_ROLLOVER_OFFSET 26
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_SOP_IRQ_ROLLOVER_MASK 0x4000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_OUT_SOP_IRQ_ROLLOVER 0x4000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_STALL_PTP_IN_IRQ_ROLLOVER_OFFSET 25
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_STALL_PTP_IN_IRQ_ROLLOVER_MASK 0x2000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_STALL_PTP_IN_IRQ_ROLLOVER 0x2000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_EOP_IRQ_ROLLOVER_OFFSET 24
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_EOP_IRQ_ROLLOVER_MASK 0x1000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_EOP_IRQ_ROLLOVER 0x1000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_SOP_IRQ_ROLLOVER_OFFSET 23
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_SOP_IRQ_ROLLOVER_MASK 0x800000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_IN_SOP_IRQ_ROLLOVER 0x800000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_OFFSET 22
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_MASK 0x400000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER 0x400000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_OFFSET 21
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_MASK 0x200000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_MAC_FSM_ROLLOVER_IRQ_ROLLOVER 0x200000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x100000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_NFIFO_DCOUNT_IRQ_ROLLOVER 0x100000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 19
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x80000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PFIFO_DCOUNT_IRQ_ROLLOVER 0x80000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 18
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x40000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x40000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 17
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x20000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_FIFO_FULL_ERR_IRQ_ROLLOVER 0x20000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_ERR_IRQ_ROLLOVER_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_ERR_IRQ_ROLLOVER_MASK 0x10000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_ERR_IRQ_ROLLOVER 0x10000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 15
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x8000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_PKT_SOP_ERR_IRQ_ROLLOVER 0x8000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 14
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_WFLUSH_ACT_IRQ_ROLLOVER 0x4000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 13
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x2000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_RD_IRQ_ROLLOVER 0x2000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 12
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x1000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_WR_IRQ_ROLLOVER 0x1000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 11
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x800
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_RFLUSH_ACT_IRQ_ROLLOVER 0x800
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_IRQ_ROLLOVER_OFFSET 10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_IRQ_ROLLOVER_MASK 0x400
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_DRP_PKT_IRQ_ROLLOVER 0x400
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 9
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x200
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_EOP_IRQ_ROLLOVER 0x200
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x100
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_INBUFF_SOP_IRQ_ROLLOVER 0x100
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 7
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x80
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x80
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 6
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x40
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x40
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_DONE_IRQ_ROLLOVER_OFFSET 5
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_DONE_IRQ_ROLLOVER_MASK 0x20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_DONE_IRQ_ROLLOVER 0x20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_START_IRQ_ROLLOVER_OFFSET 4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_START_IRQ_ROLLOVER_MASK 0x10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_GMII_START_IRQ_ROLLOVER 0x10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_DONE_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_DONE_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_DONE_IRQ_ROLLOVER 0x2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_START_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_START_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_PENDING_IRQ_RS_XGMII_START_IRQ_ROLLOVER 0x1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_PAUSE_FRAME_IRQ_ROLLOVER_OFFSET 28
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_PAUSE_FRAME_IRQ_ROLLOVER_MASK 0x10000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_PAUSE_FRAME_IRQ_ROLLOVER 0x10000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_EOP_IRQ_ROLLOVER_OFFSET 27
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_EOP_IRQ_ROLLOVER_MASK 0x8000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_EOP_IRQ_ROLLOVER 0x8000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_SOP_IRQ_ROLLOVER_OFFSET 26
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_SOP_IRQ_ROLLOVER_MASK 0x4000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_OUT_SOP_IRQ_ROLLOVER 0x4000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_STALL_PTP_IN_IRQ_ROLLOVER_OFFSET 25
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_STALL_PTP_IN_IRQ_ROLLOVER_MASK 0x2000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_STALL_PTP_IN_IRQ_ROLLOVER 0x2000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_IN_EOP_IRQ_ROLLOVER_OFFSET 24
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_IN_EOP_IRQ_ROLLOVER_MASK 0x1000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_IN_EOP_IRQ_ROLLOVER 0x1000000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_IN_SOP_IRQ_ROLLOVER_OFFSET 23
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_IN_SOP_IRQ_ROLLOVER_MASK 0x800000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_IN_SOP_IRQ_ROLLOVER 0x800000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_OFFSET 22
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER_MASK 0x400000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_COUNT_BEYOND_PTP_IRQ_ROLLOVER 0x400000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_OFFSET 21
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_ROLLOVER_IRQ_ROLLOVER_MASK 0x200000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_MAC_FSM_ROLLOVER_IRQ_ROLLOVER 0x200000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x100000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_NFIFO_DCOUNT_IRQ_ROLLOVER 0x100000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 19
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x80000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PFIFO_DCOUNT_IRQ_ROLLOVER 0x80000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 18
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x40000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x40000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 17
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x20000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_FIFO_FULL_ERR_IRQ_ROLLOVER 0x20000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PKT_ERR_IRQ_ROLLOVER_OFFSET 16
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PKT_ERR_IRQ_ROLLOVER_MASK 0x10000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PKT_ERR_IRQ_ROLLOVER 0x10000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 15
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x8000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_PKT_SOP_ERR_IRQ_ROLLOVER 0x8000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 14
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_WFLUSH_ACT_IRQ_ROLLOVER 0x4000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 13
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x2000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_RD_IRQ_ROLLOVER 0x2000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 12
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x1000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_WR_IRQ_ROLLOVER 0x1000
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 11
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x800
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_RFLUSH_ACT_IRQ_ROLLOVER 0x800
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_IRQ_ROLLOVER_OFFSET 10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_IRQ_ROLLOVER_MASK 0x400
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_DRP_PKT_IRQ_ROLLOVER 0x400
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 9
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x200
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_EOP_IRQ_ROLLOVER 0x200
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x100
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_INBUFF_SOP_IRQ_ROLLOVER 0x100
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 7
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x80
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x80
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 6
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x40
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x40
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_DONE_IRQ_ROLLOVER_OFFSET 5
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_DONE_IRQ_ROLLOVER_MASK 0x20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_DONE_IRQ_ROLLOVER 0x20
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_START_IRQ_ROLLOVER_OFFSET 4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_START_IRQ_ROLLOVER_MASK 0x10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_GMII_START_IRQ_ROLLOVER 0x10
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_OFFSET 3
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER_MASK 0x8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_EOP_IRQ_ROLLOVER 0x8
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_OUTBUFF_SOP_IRQ_ROLLOVER 0x4
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_DONE_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_DONE_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_DONE_IRQ_ROLLOVER 0x2
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_START_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_START_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LINK_LAYER_TX_IRQ0_RAW_RS_XGMII_START_IRQ_ROLLOVER 0x1
#define BB_CHIP_LINK_LAYER_RX_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_RX_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_RX_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_RX_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_CLIENT_CONFIG_CLIENT_FLOW_CTRL_EN_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_CLIENT_CONFIG_CLIENT_FLOW_CTRL_EN_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_CLIENT_CONFIG_CLIENT_FLOW_CTRL_EN 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_CLIENT_CONFIG_CLIENT_EN_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_CLIENT_CONFIG_CLIENT_EN_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_CLIENT_CONFIG_CLIENT_EN 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_DA_FILTER_WORD1_DA_FILTER_W1_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_DA_FILTER_WORD1_DA_FILTER_W1_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_DA_FILTER_WORD0_DA_FILTER_W0_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_DA_FILTER_WORD0_DA_FILTER_W0_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_DA_FILTER_MASK_WORD1_DA_FILTER_MASK_W1_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_DA_FILTER_MASK_WORD1_DA_FILTER_MASK_W1_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_DA_FILTER_MASK_WORD0_DA_FILTER_MASK_W0_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_DA_FILTER_MASK_WORD0_DA_FILTER_MASK_W0_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_SA_FILTER_WORD1_SA_FILTER_W1_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_SA_FILTER_WORD1_SA_FILTER_W1_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_SA_FILTER_WORD0_SA_FILTER_W0_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_SA_FILTER_WORD0_SA_FILTER_W0_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_SA_FILTER_MASK_WORD1_SA_FILTER_MASK_W1_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_SA_FILTER_MASK_WORD1_SA_FILTER_MASK_W1_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_SA_FILTER_MASK_WORD0_SA_FILTER_MASK_W0_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_SA_FILTER_MASK_WORD0_SA_FILTER_MASK_W0_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_LT_FILTER_LT_FILTER_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_LT_FILTER_LT_FILTER_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_LT_FILTER_MASK_LT_FILTER_MASK_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_LT_FILTER_MASK_LT_FILTER_MASK_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_IN_FSM_ROLLOVER_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_IN_FSM_ROLLOVER_MASK 0x100
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_IN_FSM_ROLLOVER 0x100
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_ONE_CYCLE_PKT_OFFSET 7
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_ONE_CYCLE_PKT_MASK 0x80
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_ONE_CYCLE_PKT 0x80
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_DA_OFFSET 6
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_DA_MASK 0x40
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_DA 0x40
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_SA_OFFSET 5
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_SA_MASK 0x20
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_SA 0x20
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_LT_OFFSET 4
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_LT_MASK 0x10
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_LT 0x10
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_MD_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_MD_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_DROP_PKT_MD 0x8
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_FILTER_FIFO_OVERFLOW_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_FILTER_FIFO_OVERFLOW_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_FILTER_FIFO_OVERFLOW 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_OUT_SOP_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_OUT_SOP_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_OUT_SOP 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_OUT_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_OUT_EOP_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_RD2CLR_CONFIG_OUT_EOP 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_OUT_EOP_OUT_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_OUT_EOP_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_OUT_SOP_OUT_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_OUT_SOP_OUT_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_FILTER_FIFO_OVERFLOW_FILTER_FIFO_OVERFLOW_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_FILTER_FIFO_OVERFLOW_FILTER_FIFO_OVERFLOW_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_DROP_PKT_MD_DROP_PKT_MD_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_DROP_PKT_MD_DROP_PKT_MD_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_DROP_PKT_LT_DROP_PKT_LT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_DROP_PKT_LT_DROP_PKT_LT_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_DROP_PKT_SA_DROP_PKT_SA_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_DROP_PKT_SA_DROP_PKT_SA_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_DROP_PKT_DA_DROP_PKT_DA_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_DROP_PKT_DA_DROP_PKT_DA_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_ONE_CYCLE_PKT_ONE_CYCLE_PKT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_ONE_CYCLE_PKT_ONE_CYCLE_PKT_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_IN_FSM_ROLLOVER_IN_FSM_ROLLOVER_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_CLIENT_INTERFACE_CLIENT_ARRAY_STATS0_IN_FSM_ROLLOVER_IN_FSM_ROLLOVER_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_RX_MAC_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_RX_MAC_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_MAC_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_RX_MAC_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_INJECT_CRC32_ERR_OFFSET 4
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_INJECT_CRC32_ERR_MASK 0x10
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_INJECT_CRC32_ERR 0x10
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_DISABLE_CRC32_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_DISABLE_CRC32_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_DISABLE_CRC32 0x8
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_CRC32_IMPLMNTD_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_CRC32_IMPLMNTD_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_CRC32_IMPLMNTD 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_DBG_SEQ_NUM_EN_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_DBG_SEQ_NUM_EN_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_DBG_SEQ_NUM_EN 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_EN_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_EN_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_MAC_CONFIG_EN 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_DA_WORD1_DA_W1_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_DA_WORD1_DA_W1_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_DA_WORD0_DA_W0_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_DA_WORD0_DA_W0_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_DBG_SEQ_NUM_IN_ERR_OFFSET 10
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_DBG_SEQ_NUM_IN_ERR_MASK 0x400
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_DBG_SEQ_NUM_IN_ERR 0x400
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_IN_FSM_ROLLOVER_OFFSET 9
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_IN_FSM_ROLLOVER_MASK 0x200
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_IN_FSM_ROLLOVER 0x200
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_OUT_FSM_ROLLOVER_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_OUT_FSM_ROLLOVER_MASK 0x100
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_OUT_FSM_ROLLOVER 0x100
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_CRC_ERR_OFFSET 7
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_CRC_ERR_MASK 0x80
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_CRC_ERR 0x80
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_IN_SOP_OFFSET 6
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_IN_SOP_MASK 0x40
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_IN_SOP 0x40
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_IN_EOP_OFFSET 5
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_IN_EOP_MASK 0x20
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_IN_EOP 0x20
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_INBUFF_SOP_OFFSET 4
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_INBUFF_SOP_MASK 0x10
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_INBUFF_SOP 0x10
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_INBUF_EOP_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_INBUF_EOP_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_INBUF_EOP 0x8
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_OUT_SOP_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_OUT_SOP_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_OUT_SOP 0x4
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_OUT_EOP_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_OUT_EOP_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_OUT_EOP 0x2
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_PAUSE_FRAME_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_PAUSE_FRAME_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_RD2CLR_CONFIG_PAUSE_FRAME 0x1
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_PAUSE_FRAME_PAUSE_FRAME_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_PAUSE_FRAME_PAUSE_FRAME_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_OUT_EOP_OUT_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_OUT_EOP_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_OUT_SOP_OUT_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_OUT_SOP_OUT_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_INBUF_EOP_INBUF_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_INBUF_EOP_INBUF_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_INBUF_SOP_INBUF_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_INBUF_SOP_INBUF_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_IN_EOP_IN_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_IN_EOP_IN_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_IN_SOP_IN_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_IN_SOP_IN_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_CRC_ERR_CRC_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_CRC_ERR_CRC_ERR_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_OUT_FSM_ROLLOVER_OUT_FSM_ROLLOVER_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_OUT_FSM_ROLLOVER_OUT_FSM_ROLLOVER_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_IN_FSM_ROLLOVER_IN_FSM_ROLLOVER_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_IN_FSM_ROLLOVER_IN_FSM_ROLLOVER_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_DBG_SEQ_NUM_IN_ERR_DBG_SEQ_NUM_IN_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MAC_STATS0_DBG_SEQ_NUM_IN_ERR_DBG_SEQ_NUM_IN_ERR_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_ENABLE_RX_XGMII_EN_OFFSET 4
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_ENABLE_RX_XGMII_EN_MASK 0x10
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_ENABLE_RX_XGMII_EN 0x10
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_ENABLE_RX_GMII_EN_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_ENABLE_RX_GMII_EN_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_ENABLE_RX_GMII_EN 0x1
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_PA_WORD1_PA_WORD1_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_PA_WORD1_PA_WORD1_MASK 0xFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_PA_WORD0_PA_WORD0_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_PA_WORD0_PA_WORD0_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_SFD_SFD_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_SFD_SFD_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_IDLE_IDLE_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_IDLE_IDLE_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_MISSING_SFD_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_MISSING_SFD_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_MISSING_SFD 0x8
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_DATA_ERROR_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_DATA_ERROR_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_DATA_ERROR 0x4
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_OUT_SOP_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_OUT_SOP_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_OUT_SOP 0x2
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_OUT_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_OUT_EOP_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_RD2CLR_CONFIG_GMII_OUT_EOP 0x1
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_GMII_OUT_EOP_GMII_OUT_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_GMII_OUT_EOP_GMII_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_GMII_OUT_SOP_GMII_OUT_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_GMII_OUT_SOP_GMII_OUT_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_GMII_DATA_ERROR_GMII_DATA_ERROR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_GMII_DATA_ERROR_GMII_DATA_ERROR_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_GMII_MISSING_SFD_GMII_MISSING_SFD_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS0_GMII_MISSING_SFD_GMII_MISSING_SFD_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_RUNT_FRM_DETECTED_OFFSET 9
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_RUNT_FRM_DETECTED_MASK 0x200
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_RUNT_FRM_DETECTED 0x200
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_LINK_INT_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_LINK_INT_MASK 0x100
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_LINK_INT 0x100
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_REMOTE_FAULT_OFFSET 7
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_REMOTE_FAULT_MASK 0x80
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_REMOTE_FAULT 0x80
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_LOCAL_FAULT_OFFSET 6
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_LOCAL_FAULT_MASK 0x40
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_LOCAL_FAULT 0x40
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_LINK_OK_OFFSET 5
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_LINK_OK_MASK 0x20
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_LINK_OK 0x20
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_WRONG_LANE_START_OFFSET 4
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_WRONG_LANE_START_MASK 0x10
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_WRONG_LANE_START 0x10
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_MISSING_SFD_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_MISSING_SFD_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_MISSING_SFD 0x8
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_DATA_ERROR_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_DATA_ERROR_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_DATA_ERROR 0x4
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_OUT_SOP_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_OUT_SOP_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_OUT_SOP 0x2
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_OUT_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_OUT_EOP_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_RD2CLR_CONFIG_XGMII_OUT_EOP 0x1
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_OUT_EOP_XGMII_OUT_EOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_OUT_EOP_XGMII_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_OUT_SOP_XGMII_OUT_SOP_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_OUT_SOP_XGMII_OUT_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_DATA_ERROR_XGMII_DATA_ERROR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_DATA_ERROR_XGMII_DATA_ERROR_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_MISSING_SFD_XGMII_MISSING_SFD_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_MISSING_SFD_XGMII_MISSING_SFD_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_WRONG_LANE_START_XGMII_WRONG_LANE_START_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_WRONG_LANE_START_XGMII_WRONG_LANE_START_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_LINK_OK_XGMII_LINK_OK_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_LINK_OK_XGMII_LINK_OK_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_LOCAL_FAULT_XGMII_LOCAL_FAULT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_LOCAL_FAULT_XGMII_LOCAL_FAULT_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_REMOTE_FAULT_XGMII_REMOTE_FAULT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_REMOTE_FAULT_XGMII_REMOTE_FAULT_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_LINK_INT_XGMII_LINK_INT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_LINK_INT_XGMII_LINK_INT_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_RUNT_FRM_DETECTED_XGMII_RUNT_FRM_DETECTED_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_MEDIA_RS_STATS1_XGMII_RUNT_FRM_DETECTED_XGMII_RUNT_FRM_DETECTED_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_OFFSET 16
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_MASK 0xF0000
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLES_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLES_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR 0x2
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR 0x1
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_SET_UP_ENABLE_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_SET_UP_ENABLE_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_SET_UP_ENABLE 0x1
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_RD2CLR_CONFIG_PKT_COUNT_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_RD2CLR_CONFIG_PKT_COUNT_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_RD2CLR_CONFIG_PKT_COUNT 0x4
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_RD2CLR_CONFIG_ERROR_COUNT_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_RD2CLR_CONFIG_ERROR_COUNT_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_RD2CLR_CONFIG_ERROR_COUNT 0x2
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_RD2CLR_CONFIG_LANE_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_RD2CLR_CONFIG_LANE_ERR_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_RD2CLR_CONFIG_LANE_ERR 0x1
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_LANE_ERR_LANE_ERR_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_LANE_ERR_LANE_ERR_MASK 0xFF
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_ERROR_COUNT_ERROR_COUNT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_ERROR_COUNT_ERROR_COUNT_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_PKT_COUNT_COUNT_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_MEDIA_ANALYZER_STATS0_PKT_COUNT_COUNT_MASK 0xFFFFFFFF
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_DE_FRAMER_JUMBO_LT_CODE_JUMBO_LT_CODE_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_SELF_TEST_SUPPORT_DE_FRAMER_JUMBO_LT_CODE_JUMBO_LT_CODE_MASK 0xFFFF
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_LINK_INT_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_LINK_INT_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_LINK_INT 0x8
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_REMOTE_FAULT_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_REMOTE_FAULT_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_REMOTE_FAULT 0x4
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_LOCAL_FAULT_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_LOCAL_FAULT_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_LOCAL_FAULT 0x2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_LINK_OK_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_LINK_OK_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_ENABLE_LINK_OK 0x1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_LINK_INT_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_LINK_INT_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_LINK_INT 0x8
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_REMOTE_FAULT_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_REMOTE_FAULT_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_REMOTE_FAULT 0x4
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_LOCAL_FAULT_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_LOCAL_FAULT_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_LOCAL_FAULT 0x2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_LINK_OK_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_LINK_OK_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_LINK_OK 0x1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_LINK_INT_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_LINK_INT_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_LINK_INT 0x8
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_REMOTE_FAULT_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_REMOTE_FAULT_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_REMOTE_FAULT 0x4
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_LOCAL_FAULT_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_LOCAL_FAULT_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_LOCAL_FAULT 0x2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_LINK_OK_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_LINK_OK_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_PENDING_IRQ_LINK_OK 0x1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_LINK_INT_OFFSET 3
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_LINK_INT_MASK 0x8
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_LINK_INT 0x8
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_REMOTE_FAULT_OFFSET 2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_REMOTE_FAULT_MASK 0x4
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_REMOTE_FAULT 0x4
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_LOCAL_FAULT_OFFSET 1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_LOCAL_FAULT_MASK 0x2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_LOCAL_FAULT 0x2
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_LINK_OK_OFFSET 0
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_LINK_OK_MASK 0x1
#define BB_CHIP_LINK_LAYER_RX_IRQ0_RAW_LINK_OK 0x1
#define BB_CHIP_LAYER3_TX_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LAYER3_TX_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LAYER3_TX_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LAYER3_TX_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LAYER3_TX_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LAYER3_TX_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_CONFIG0_MAX_BYTE_MAX_BYTE_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_CONFIG0_MAX_BYTE_MAX_BYTE_MASK 0x3FFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_CONFIG0_MAC_DG_TYPE_MAC_DG_TYPE_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_CONFIG0_MAC_DG_TYPE_MAC_DG_TYPE_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_CONFIG0_TIMER_WAIT_TIMER_WAIT_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_CONFIG0_TIMER_WAIT_TIMER_WAIT_MASK 0xFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_CONFIG0_MTU_SIZE_MTU_SIZE_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_CONFIG0_MTU_SIZE_MTU_SIZE_MASK 0x3FFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_CONFIG0_MAX_MTU_SIZE_MAX_MTU_SIZE_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_CONFIG0_MAX_MTU_SIZE_MAX_MTU_SIZE_MASK 0x3FFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_MAC_DG_SIZE_ERR_OFFSET 6
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_MAC_DG_SIZE_ERR_MASK 0x40
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_MAC_DG_SIZE_ERR 0x40
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_IN_SOP_OFFSET 5
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_IN_SOP_MASK 0x20
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_IN_SOP 0x20
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_IN_EOP_OFFSET 4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_IN_EOP_MASK 0x10
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_IN_EOP 0x10
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_INBUFF_SOP_OFFSET 3
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_INBUFF_SOP_MASK 0x8
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_INBUFF_SOP 0x8
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_INBUFF_EOP_OFFSET 2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_INBUFF_EOP_MASK 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_INBUFF_EOP 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_OUT_SOP_OFFSET 1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_OUT_SOP_MASK 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_OUT_SOP 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_OUT_EOP_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_OUT_EOP_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_RD2CLR_CONFIG_OUT_EOP 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_OUT_EOP_OUT_EOP_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_OUT_EOP_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_OUT_SOP_OUT_SOP_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_OUT_SOP_OUT_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_INBUFF_EOP_INBUFF_EOP_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_INBUFF_EOP_INBUFF_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_INBUFF_SOP_INBUFF_SOP_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_INBUFF_SOP_INBUFF_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_IN_EOP_IN_EOP_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_IN_EOP_IN_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_IN_SOP_IN_SOP_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_IN_SOP_IN_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_MAC_DG_SIZE_ERR_MAC_DG_SIZE_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_STATS0_MAC_DG_SIZE_ERR_MAC_DG_SIZE_ERR_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_OFFSET 1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_MASK 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_OFFSET 16
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_MASK 0xF0000
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLES_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLES_MASK 0xFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_MASK 0xFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_MASK 0xFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_MASK 0xFFFF
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR 0x2
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LAYER3_TX_ETH_FRAMER_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR 0x1
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_OFFSET 18
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_MASK 0x40000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER 0x40000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_OFFSET 17
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_MASK 0x20000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER 0x20000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 16
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x10000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER 0x10000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 15
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x8000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER 0x8000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER_OFFSET 14
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER_MASK 0x4000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER 0x4000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER_OFFSET 13
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER_MASK 0x2000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER 0x2000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 12
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x1000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER 0x1000
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 11
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x800
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER 0x800
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 10
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x400
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x400
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 9
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x200
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER 0x200
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER_OFFSET 8
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER_MASK 0x100
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER 0x100
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 7
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x80
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER 0x80
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 6
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x40
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER 0x40
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 5
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x20
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER 0x20
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 4
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x10
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER 0x10
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_OFFSET 3
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_MASK 0x8
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER 0x8
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER 0x4
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER 0x2
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LAYER3_TX_IRQ0_ENABLE_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER 0x1
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_OFFSET 18
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_MASK 0x40000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER 0x40000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_OFFSET 17
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_MASK 0x20000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER 0x20000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 16
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x10000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER 0x10000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 15
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x8000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER 0x8000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER_OFFSET 14
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER_MASK 0x4000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER 0x4000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER_OFFSET 13
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER_MASK 0x2000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER 0x2000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 12
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x1000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER 0x1000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 11
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x800
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER 0x800
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 10
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x400
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x400
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 9
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x200
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER 0x200
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER_OFFSET 8
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER_MASK 0x100
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER 0x100
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 7
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x80
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER 0x80
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 6
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x40
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER 0x40
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 5
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x20
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER 0x20
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 4
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x10
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER 0x10
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_OFFSET 3
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_MASK 0x8
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER 0x8
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER 0x4
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER 0x2
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER 0x1
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_OFFSET 18
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_MASK 0x40000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER 0x40000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_OFFSET 17
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_MASK 0x20000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER 0x20000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 16
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x10000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER 0x10000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 15
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x8000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER 0x8000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER_OFFSET 14
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER_MASK 0x4000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER 0x4000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER_OFFSET 13
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER_MASK 0x2000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER 0x2000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 12
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x1000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER 0x1000
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 11
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x800
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER 0x800
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 10
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x400
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x400
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 9
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x200
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER 0x200
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER_OFFSET 8
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER_MASK 0x100
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER 0x100
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 7
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x80
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER 0x80
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 6
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x40
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER 0x40
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 5
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x20
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER 0x20
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 4
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x10
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER 0x10
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_OFFSET 3
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_MASK 0x8
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER 0x8
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER 0x4
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER 0x2
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LAYER3_TX_IRQ0_PENDING_IRQ_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER 0x1
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_OFFSET 18
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_MASK 0x40000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER 0x40000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_OFFSET 17
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_MASK 0x20000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER 0x20000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER_OFFSET 16
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER_MASK 0x10000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_INBUFF_EOP_IRQ_ROLLOVER 0x10000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER_OFFSET 15
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER_MASK 0x8000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_INBUFF_SOP_IRQ_ROLLOVER 0x8000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER_OFFSET 14
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER_MASK 0x4000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_IN_EOP_IRQ_ROLLOVER 0x4000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER_OFFSET 13
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER_MASK 0x2000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_STATS0_IN_SOP_IRQ_ROLLOVER 0x2000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 12
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x1000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_IRQ_ROLLOVER 0x1000
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER_OFFSET 11
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER_MASK 0x800
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_IRQ_ROLLOVER 0x800
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_OFFSET 10
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER_MASK 0x400
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_IRQ_ROLLOVER 0x400
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER_OFFSET 9
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER_MASK 0x200
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_IRQ_ROLLOVER 0x200
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER_OFFSET 8
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER_MASK 0x100
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_ERR_IRQ_ROLLOVER 0x100
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER_OFFSET 7
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER_MASK 0x80
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_IRQ_ROLLOVER 0x80
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER_OFFSET 6
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER_MASK 0x40
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_IRQ_ROLLOVER 0x40
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER_OFFSET 5
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER_MASK 0x20
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_IRQ_ROLLOVER 0x20
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER_OFFSET 4
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER_MASK 0x10
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_IRQ_ROLLOVER 0x10
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_OFFSET 3
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_MASK 0x8
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER 0x8
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_READ_ENGINE_STATS0_RFLUSH_ACT_IRQ_ROLLOVER 0x4
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_READ_ENGINE_STATS0_DRP_PKT_IRQ_ROLLOVER 0x2
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LAYER3_TX_IRQ0_RAW_FRAMER_PFIFO_READ_ENGINE_STATS0_FLOW_CTRL_IRQ_ROLLOVER 0x1
#define BB_CHIP_LAYER3_RX_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LAYER3_RX_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LAYER3_RX_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LAYER3_RX_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LAYER3_RX_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LAYER3_RX_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_CONFIG0_JUMBO_LT_CODE_JUMBO_LT_CODE_OFFSET 0
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_CONFIG0_JUMBO_LT_CODE_JUMBO_LT_CODE_MASK 0xFFFF
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_RD2CLR_CONFIG_NON_ETH_PKT_OFFSET 2
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_RD2CLR_CONFIG_NON_ETH_PKT_MASK 0x4
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_RD2CLR_CONFIG_NON_ETH_PKT 0x4
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_RD2CLR_CONFIG_OUT_SOP_OFFSET 1
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_RD2CLR_CONFIG_OUT_SOP_MASK 0x2
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_RD2CLR_CONFIG_OUT_SOP 0x2
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_RD2CLR_CONFIG_OUT_EOP_OFFSET 0
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_RD2CLR_CONFIG_OUT_EOP_MASK 0x1
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_RD2CLR_CONFIG_OUT_EOP 0x1
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_OUT_EOP_OUT_EOP_OFFSET 0
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_OUT_EOP_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_OUT_SOP_OUT_SOP_OFFSET 0
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_OUT_SOP_OUT_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_NON_ETH_PKT_NON_ETH_PKT_OFFSET 0
#define BB_CHIP_LAYER3_RX_ETH_DE_FRAMER_STATS0_NON_ETH_PKT_NON_ETH_PKT_MASK 0xFFFF
#define BB_CHIP_LAYER3_RX_PTP_GUARD_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_LAYER3_RX_PTP_GUARD_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_LAYER3_RX_PTP_GUARD_VERSION_MINOR_OFFSET 8
#define BB_CHIP_LAYER3_RX_PTP_GUARD_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_LAYER3_RX_PTP_GUARD_VERSION_PATCH_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_LAYER3_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_OFFSET 1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_MASK 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_MASK 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_OFFSET 16
#define BB_CHIP_LAYER3_RX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_MASK 0xF0000
#define BB_CHIP_LAYER3_RX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLES_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_CONFIG0_MAX_CYCLES_MAX_CYCLES_MASK 0xFFFF
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_MASK 0xFFFF
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_MASK 0xFFFF
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_MASK 0xFFFF
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_ENABLE_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_EOP_ERR 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_ENABLE_MISSING_SOP_ERR 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_MISSING_EOP_ERR 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_MISSING_SOP_ERR 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_EOP_ERR 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_PENDING_IRQ_MISSING_SOP_ERR 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_RAW_MAX_CYCLE_ERR 0x4
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_RAW_MISSING_EOP_ERR 0x2
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_LAYER3_RX_PTP_GUARD_IRQ0_RAW_MISSING_SOP_ERR 0x1
#define BB_CHIP_LAYER3_RX_IRQ0_ENABLE_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LAYER3_RX_IRQ0_ENABLE_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LAYER3_RX_IRQ0_ENABLE_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER 0x4
#define BB_CHIP_LAYER3_RX_IRQ0_ENABLE_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LAYER3_RX_IRQ0_ENABLE_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LAYER3_RX_IRQ0_ENABLE_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER 0x2
#define BB_CHIP_LAYER3_RX_IRQ0_ENABLE_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LAYER3_RX_IRQ0_ENABLE_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LAYER3_RX_IRQ0_ENABLE_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER 0x1
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER 0x4
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER 0x2
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER 0x1
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_IRQ_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_IRQ_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_IRQ_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER 0x4
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_IRQ_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_IRQ_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_IRQ_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER 0x2
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_IRQ_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_IRQ_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LAYER3_RX_IRQ0_PENDING_IRQ_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER 0x1
#define BB_CHIP_LAYER3_RX_IRQ0_RAW_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_OFFSET 2
#define BB_CHIP_LAYER3_RX_IRQ0_RAW_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER_MASK 0x4
#define BB_CHIP_LAYER3_RX_IRQ0_RAW_DE_FRAMER_STATS0_OUT_EOP_IRQ_ROLLOVER 0x4
#define BB_CHIP_LAYER3_RX_IRQ0_RAW_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_OFFSET 1
#define BB_CHIP_LAYER3_RX_IRQ0_RAW_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER_MASK 0x2
#define BB_CHIP_LAYER3_RX_IRQ0_RAW_DE_FRAMER_STATS0_OUT_SOP_IRQ_ROLLOVER 0x2
#define BB_CHIP_LAYER3_RX_IRQ0_RAW_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER_OFFSET 0
#define BB_CHIP_LAYER3_RX_IRQ0_RAW_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER_MASK 0x1
#define BB_CHIP_LAYER3_RX_IRQ0_RAW_DE_FRAMER_STATS0_NON_ETH_PKT_IRQ_ROLLOVER 0x1
#define BB_CHIP_MCA_CORE_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_MCA_CORE_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_MCA_CORE_VERSION_MINOR_OFFSET 8
#define BB_CHIP_MCA_CORE_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_MCA_CORE_VERSION_PATCH_OFFSET 0
#define BB_CHIP_MCA_CORE_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_MCA_CORE_CONTROL0_DP_RX_EN_OFFSET 1
#define BB_CHIP_MCA_CORE_CONTROL0_DP_RX_EN_MASK 0x2
#define BB_CHIP_MCA_CORE_CONTROL0_DP_RX_EN 0x2
#define BB_CHIP_MCA_CORE_CONTROL0_DP_TX_EN_OFFSET 0
#define BB_CHIP_MCA_CORE_CONTROL0_DP_TX_EN_MASK 0x1
#define BB_CHIP_MCA_CORE_CONTROL0_DP_TX_EN 0x1
#define BB_CHIP_MCA_CORE_STATUS0_DP_RX_READY_OFFSET 1
#define BB_CHIP_MCA_CORE_STATUS0_DP_RX_READY_MASK 0x2
#define BB_CHIP_MCA_CORE_STATUS0_DP_RX_READY 0x2
#define BB_CHIP_MCA_CORE_STATUS0_DP_TX_READY_OFFSET 0
#define BB_CHIP_MCA_CORE_STATUS0_DP_TX_READY_MASK 0x1
#define BB_CHIP_MCA_CORE_STATUS0_DP_TX_READY 0x1
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_IDL_EN_MIN_OFFSET 20
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_IDL_EN_MIN_MASK 0xF00000
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_TX_IDL_MIN_OFFSET 16
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_TX_IDL_MIN_MASK 0xF0000
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_IDL_MIN_OFFSET 12
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_IDL_MIN_MASK 0xF000
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_TS1_EN_MIN_OFFSET 8
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_TS1_EN_MIN_MASK 0xF00
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_TX_TS1_MIN_OFFSET 4
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_TX_TS1_MIN_MASK 0xF0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_TS1_MIN_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_POL_RX_TS1_MIN_MASK 0xF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_IDL_EN_MAX_LMT_OFFSET 20
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_IDL_EN_MAX_LMT_MASK 0xF00000
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_TX_IDL_MAX_LMT_OFFSET 16
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_TX_IDL_MAX_LMT_MASK 0xF0000
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_IDL_MAX_LMT_OFFSET 12
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_IDL_MAX_LMT_MASK 0xF000
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_TS2_EN_MAX_LMT_OFFSET 8
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_TS2_EN_MAX_LMT_MASK 0xF00
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_TX_TS2_MAX_LMT_OFFSET 4
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_TX_TS2_MAX_LMT_MASK 0xF0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_TS2_MAX_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_PKT_MNGT_REC_RX_TS2_MAX_LMT_MASK 0xF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_POL_TMR_ACT_RPT_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_POL_TMR_ACT_RPT_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_POL_TMR_IDLE_RPT_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_POL_TMR_IDLE_RPT_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_POL_TMR_IDLE_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_POL_TMR_IDLE_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_REC_TMR_ACT_RPT_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_REC_TMR_ACT_RPT_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_REC_TMR_IDLE_RPT_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_REC_TMR_IDLE_RPT_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_REC_TMR_IDLE_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_REC_TMR_IDLE_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_U0_TMR_U0LTIMEOUT_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_U0_TMR_U0LTIMEOUT_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_U0_TMR_PND_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_U0_TMR_PND_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_U0_TMR_CRD_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_U0_TMR_CRD_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_U0_TMR_U0RECTIMEOUT_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_LTSSM_U0_TMR_U0RECTIMEOUT_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_TEST_LATENCY_LMT_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_CONTROL0_TEST_LATENCY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_LINK_STATUS0_CFG_ACTIVE_CHANNELS_OFFSET 0
#define BB_CHIP_MCA_CORE_LINK_STATUS0_CFG_ACTIVE_CHANNELS_MASK 0x1F
#define BB_CHIP_MCA_CORE_TX_CONTROL0_DP_STATS_CHID_EN_OFFSET 8
#define BB_CHIP_MCA_CORE_TX_CONTROL0_DP_STATS_CHID_EN_MASK 0xFFFF00
#define BB_CHIP_MCA_CORE_TX_CONTROL0_DP_BW_PKT_TYPE_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_CONTROL0_DP_BW_PKT_TYPE_MASK 0xF
#define BB_CHIP_MCA_CORE_TX_CONTROL0_BW_SAMPLE_TIMER_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_CONTROL0_BW_SAMPLE_TIMER_CNT_MASK 0xFFFF
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH_OFFSET 13
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH_MASK 0x2000
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH 0x2000
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_PLU_OFFSET 12
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_PLU_MASK 0x1000
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_PLU 0x1000
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LGOOD_OFFSET 11
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LGOOD_MASK 0x800
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LGOOD 0x800
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LCRD_OFFSET 10
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LCRD_MASK 0x400
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LCRD 0x400
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LRTRY_OFFSET 9
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LRTRY_MASK 0x200
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LRTRY 0x200
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LBAD_OFFSET 8
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LBAD_MASK 0x100
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_LBAD 0x100
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_TS1_OFFSET 7
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_TS1_MASK 0x80
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_TS1 0x80
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_TS2_OFFSET 6
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_TS2_MASK 0x40
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_TS2 0x40
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_IDLE_OFFSET 5
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_IDLE_MASK 0x20
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_IDLE 0x20
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY_OFFSET 4
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY_MASK 0x10
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY 0x10
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY_OFFSET 3
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY_MASK 0x8
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY 0x8
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT_OFFSET 2
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT_MASK 0x4
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT 0x4
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_NFIFO_OFFSET 1
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_NFIFO_MASK 0x2
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_NFIFO 0x2
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_PFIFO_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_PFIFO_MASK 0x1
#define BB_CHIP_MCA_CORE_TX_STATS0_RD2CLR_CONFIG_PFIFO 0x1
#define BB_CHIP_MCA_CORE_TX_STATS0_PFIFO_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_PFIFO_CNT_MASK 0xF
#define BB_CHIP_MCA_CORE_TX_STATS0_NFIFO_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_NFIFO_CNT_MASK 0xF
#define BB_CHIP_MCA_CORE_TX_STATS0_CMD_FIFO_DCOUNT_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_CMD_FIFO_DCOUNT_CNT_MASK 0xFFFF
#define BB_CHIP_MCA_CORE_TX_STATS0_DATA_PKT_NRTRY_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_DATA_PKT_NRTRY_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_TX_STATS0_DATA_PKT_RTRY_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_DATA_PKT_RTRY_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_TX_STATS0_IDLE_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_IDLE_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_TX_STATS0_TS2_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_TS2_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_TX_STATS0_TS1_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_TS1_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_TX_STATS0_LBAD_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_LBAD_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_TX_STATS0_LRTRY_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_LRTRY_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_TX_STATS0_LCRD_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_LCRD_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_TX_STATS0_LGOOD_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_LGOOD_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_TX_STATS0_PLU_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_PLU_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_TX_STATS0_BANDWIDTH_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_TX_STATS0_BANDWIDTH_CNT_MASK 0xFFFF
#define BB_CHIP_MCA_CORE_RX_CONTROL0_DP_STATS_CHID_EN_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_CONTROL0_DP_STATS_CHID_EN_MASK 0xFFFF
#define BB_CHIP_MCA_CORE_RX_CONTROL0_RX_CMD_FIFO_FLC_HI_OFFSET 16
#define BB_CHIP_MCA_CORE_RX_CONTROL0_RX_CMD_FIFO_FLC_HI_MASK 0xFFFF0000
#define BB_CHIP_MCA_CORE_RX_CONTROL0_RX_CMD_FIFO_FLC_LO_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_CONTROL0_RX_CMD_FIFO_FLC_LO_MASK 0xFFFF
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_RX_CMD_FIFO_FLC_OFFSET 11
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_RX_CMD_FIFO_FLC_MASK 0x800
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_RX_CMD_FIFO_FLC 0x800
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_PLU_OFFSET 10
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_PLU_MASK 0x400
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_PLU 0x400
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LGOOD_OFFSET 9
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LGOOD_MASK 0x200
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LGOOD 0x200
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LCRD_OFFSET 8
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LCRD_MASK 0x100
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LCRD 0x100
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LRTRY_OFFSET 7
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LRTRY_MASK 0x80
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LRTRY 0x80
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LBAD_OFFSET 6
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LBAD_MASK 0x40
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_LBAD 0x40
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_TS1_OFFSET 5
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_TS1_MASK 0x20
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_TS1 0x20
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_TS2_OFFSET 4
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_TS2_MASK 0x10
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_TS2 0x10
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_IDLE_OFFSET 3
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_IDLE_MASK 0x8
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_IDLE 0x8
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY_OFFSET 2
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY_MASK 0x4
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_RTRY 0x4
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY_OFFSET 1
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY_MASK 0x2
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_DATA_PKT_NRTRY 0x2
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT_MASK 0x1
#define BB_CHIP_MCA_CORE_RX_STATS0_RD2CLR_CONFIG_CMD_FIFO_DCOUNT 0x1
#define BB_CHIP_MCA_CORE_RX_STATS0_CMD_FIFO_DCOUNT_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_CMD_FIFO_DCOUNT_CNT_MASK 0xFFFF
#define BB_CHIP_MCA_CORE_RX_STATS0_DATA_PKT_NRTRY_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_DATA_PKT_NRTRY_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_RX_STATS0_DATA_PKT_RTRY_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_DATA_PKT_RTRY_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_RX_STATS0_IDLE_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_IDLE_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_RX_STATS0_TS2_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_TS2_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_RX_STATS0_TS1_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_TS1_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_RX_STATS0_LBAD_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_LBAD_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_RX_STATS0_LRTRY_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_LRTRY_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_RX_STATS0_LCRD_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_LCRD_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_RX_STATS0_LGOOD_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_LGOOD_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CORE_RX_STATS0_PLU_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_PLU_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_RX_STATS0_RX_CMD_FIFO_FLC_CNT_OFFSET 0
#define BB_CHIP_MCA_CORE_RX_STATS0_RX_CMD_FIFO_FLC_CNT_MASK 0xFF
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_DP_GRD_SOP_ERR_OFFSET 17
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_DP_GRD_SOP_ERR_MASK 0x20000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_DP_GRD_SOP_ERR 0x20000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_DP_GRD_EOP_ERR_OFFSET 16
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_DP_GRD_EOP_ERR_MASK 0x10000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_DP_GRD_EOP_ERR 0x10000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_DP_GRD_MAX_ERR_OFFSET 15
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_DP_GRD_MAX_ERR_MASK 0x8000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_DP_GRD_MAX_ERR 0x8000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_LNK_CMD_FIFO_FULL_ERR_OFFSET 14
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_LNK_CMD_FIFO_FULL_ERR_MASK 0x4000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_RX_LNK_CMD_FIFO_FULL_ERR 0x4000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_LNK_CMD_FIFO_FULL_ERR_OFFSET 13
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_LNK_CMD_FIFO_FULL_ERR_MASK 0x2000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_LNK_CMD_FIFO_FULL_ERR 0x2000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_GRD_SOP_ERR_OFFSET 12
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_GRD_SOP_ERR_MASK 0x1000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_GRD_SOP_ERR 0x1000
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_GRD_EOP_ERR_OFFSET 11
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_GRD_EOP_ERR_MASK 0x800
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_GRD_EOP_ERR 0x800
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_GRD_MAX_ERR_OFFSET 10
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_GRD_MAX_ERR_MASK 0x400
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_GRD_MAX_ERR 0x400
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_WR_OFFSET 9
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_WR_MASK 0x200
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_WR 0x200
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_RD_OFFSET 8
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_RD_MASK 0x100
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_DRP_PKT_RD 0x100
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_SOP_ERR_OFFSET 7
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_SOP_ERR_MASK 0x80
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_SOP_ERR 0x80
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_ERR_OFFSET 6
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_ERR_MASK 0x40
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_ERR 0x40
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_FULL_ERR_OFFSET 5
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_FULL_ERR_MASK 0x20
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_FULL_ERR 0x20
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_MAX_SZ_ERR_OFFSET 4
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_MAX_SZ_ERR_MASK 0x10
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_TX_DP_FIFO_PKT_MAX_SZ_ERR 0x10
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_FIFO_DRP_PKT_OFFSET 3
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_FIFO_DRP_PKT_MASK 0x8
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_FIFO_DRP_PKT 0x8
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_DP_READY_OFFSET 2
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_DP_READY_MASK 0x4
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_DP_READY 0x4
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_DP_RX_READY_OFFSET 1
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_DP_RX_READY_MASK 0x2
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_DP_RX_READY 0x2
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_DP_TX_READY_OFFSET 0
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_DP_TX_READY_MASK 0x1
#define BB_CHIP_MCA_CORE_IRQ0_ENABLE_DP_TX_READY 0x1
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_DP_GRD_SOP_ERR_OFFSET 17
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_DP_GRD_SOP_ERR_MASK 0x20000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_DP_GRD_SOP_ERR 0x20000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_DP_GRD_EOP_ERR_OFFSET 16
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_DP_GRD_EOP_ERR_MASK 0x10000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_DP_GRD_EOP_ERR 0x10000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_DP_GRD_MAX_ERR_OFFSET 15
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_DP_GRD_MAX_ERR_MASK 0x8000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_DP_GRD_MAX_ERR 0x8000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_LNK_CMD_FIFO_FULL_ERR_OFFSET 14
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_LNK_CMD_FIFO_FULL_ERR_MASK 0x4000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_RX_LNK_CMD_FIFO_FULL_ERR 0x4000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_LNK_CMD_FIFO_FULL_ERR_OFFSET 13
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_LNK_CMD_FIFO_FULL_ERR_MASK 0x2000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_LNK_CMD_FIFO_FULL_ERR 0x2000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_GRD_SOP_ERR_OFFSET 12
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_GRD_SOP_ERR_MASK 0x1000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_GRD_SOP_ERR 0x1000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_GRD_EOP_ERR_OFFSET 11
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_GRD_EOP_ERR_MASK 0x800
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_GRD_EOP_ERR 0x800
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_GRD_MAX_ERR_OFFSET 10
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_GRD_MAX_ERR_MASK 0x400
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_GRD_MAX_ERR 0x400
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_WR_OFFSET 9
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_WR_MASK 0x200
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_WR 0x200
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_RD_OFFSET 8
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_RD_MASK 0x100
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_DRP_PKT_RD 0x100
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_SOP_ERR_OFFSET 7
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_SOP_ERR_MASK 0x80
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_SOP_ERR 0x80
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_ERR_OFFSET 6
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_ERR_MASK 0x40
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_ERR 0x40
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_FULL_ERR_OFFSET 5
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_FULL_ERR_MASK 0x20
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_FULL_ERR 0x20
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_MAX_SZ_ERR_OFFSET 4
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_MAX_SZ_ERR_MASK 0x10
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_TX_DP_FIFO_PKT_MAX_SZ_ERR 0x10
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_FIFO_DRP_PKT_OFFSET 3
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_FIFO_DRP_PKT_MASK 0x8
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_FIFO_DRP_PKT 0x8
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_DP_READY_OFFSET 2
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_DP_READY_MASK 0x4
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_DP_READY 0x4
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_DP_RX_READY_OFFSET 1
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_DP_RX_READY_MASK 0x2
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_DP_RX_READY 0x2
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_DP_TX_READY_OFFSET 0
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_DP_TX_READY_MASK 0x1
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_DP_TX_READY 0x1
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_SOP_ERR_OFFSET 17
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_SOP_ERR_MASK 0x20000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_SOP_ERR 0x20000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_EOP_ERR_OFFSET 16
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_EOP_ERR_MASK 0x10000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_EOP_ERR 0x10000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_MAX_ERR_OFFSET 15
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_MAX_ERR_MASK 0x8000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_DP_GRD_MAX_ERR 0x8000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_LNK_CMD_FIFO_FULL_ERR_OFFSET 14
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_LNK_CMD_FIFO_FULL_ERR_MASK 0x4000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_RX_LNK_CMD_FIFO_FULL_ERR 0x4000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_LNK_CMD_FIFO_FULL_ERR_OFFSET 13
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_LNK_CMD_FIFO_FULL_ERR_MASK 0x2000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_LNK_CMD_FIFO_FULL_ERR 0x2000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_SOP_ERR_OFFSET 12
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_SOP_ERR_MASK 0x1000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_SOP_ERR 0x1000
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_EOP_ERR_OFFSET 11
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_EOP_ERR_MASK 0x800
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_EOP_ERR 0x800
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_MAX_ERR_OFFSET 10
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_MAX_ERR_MASK 0x400
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_GRD_MAX_ERR 0x400
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_WR_OFFSET 9
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_WR_MASK 0x200
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_WR 0x200
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_RD_OFFSET 8
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_RD_MASK 0x100
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_DRP_PKT_RD 0x100
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_SOP_ERR_OFFSET 7
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_SOP_ERR_MASK 0x80
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_SOP_ERR 0x80
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_ERR_OFFSET 6
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_ERR_MASK 0x40
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_ERR 0x40
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_FULL_ERR_OFFSET 5
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_FULL_ERR_MASK 0x20
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_FULL_ERR 0x20
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_MAX_SZ_ERR_OFFSET 4
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_MAX_SZ_ERR_MASK 0x10
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_TX_DP_FIFO_PKT_MAX_SZ_ERR 0x10
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_FIFO_DRP_PKT_OFFSET 3
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_FIFO_DRP_PKT_MASK 0x8
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_FIFO_DRP_PKT 0x8
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_DP_READY_OFFSET 2
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_DP_READY_MASK 0x4
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_DP_READY 0x4
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_DP_RX_READY_OFFSET 1
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_DP_RX_READY_MASK 0x2
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_DP_RX_READY 0x2
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_DP_TX_READY_OFFSET 0
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_DP_TX_READY_MASK 0x1
#define BB_CHIP_MCA_CORE_IRQ0_PENDING_IRQ_DP_TX_READY 0x1
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_DP_GRD_SOP_ERR_OFFSET 17
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_DP_GRD_SOP_ERR_MASK 0x20000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_DP_GRD_SOP_ERR 0x20000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_DP_GRD_EOP_ERR_OFFSET 16
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_DP_GRD_EOP_ERR_MASK 0x10000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_DP_GRD_EOP_ERR 0x10000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_DP_GRD_MAX_ERR_OFFSET 15
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_DP_GRD_MAX_ERR_MASK 0x8000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_DP_GRD_MAX_ERR 0x8000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_LNK_CMD_FIFO_FULL_ERR_OFFSET 14
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_LNK_CMD_FIFO_FULL_ERR_MASK 0x4000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_RX_LNK_CMD_FIFO_FULL_ERR 0x4000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_LNK_CMD_FIFO_FULL_ERR_OFFSET 13
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_LNK_CMD_FIFO_FULL_ERR_MASK 0x2000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_LNK_CMD_FIFO_FULL_ERR 0x2000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_GRD_SOP_ERR_OFFSET 12
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_GRD_SOP_ERR_MASK 0x1000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_GRD_SOP_ERR 0x1000
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_GRD_EOP_ERR_OFFSET 11
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_GRD_EOP_ERR_MASK 0x800
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_GRD_EOP_ERR 0x800
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_GRD_MAX_ERR_OFFSET 10
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_GRD_MAX_ERR_MASK 0x400
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_GRD_MAX_ERR 0x400
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_WR_OFFSET 9
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_WR_MASK 0x200
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_WR 0x200
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_RD_OFFSET 8
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_RD_MASK 0x100
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_RD 0x100
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_PKT_SOP_ERR_OFFSET 7
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_PKT_SOP_ERR_MASK 0x80
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_PKT_SOP_ERR 0x80
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_PKT_ERR_OFFSET 6
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_PKT_ERR_MASK 0x40
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_PKT_ERR 0x40
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_FULL_ERR_OFFSET 5
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_FULL_ERR_MASK 0x20
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_FULL_ERR 0x20
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_PKT_MAX_SZ_ERR_OFFSET 4
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_PKT_MAX_SZ_ERR_MASK 0x10
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_PKT_MAX_SZ_ERR 0x10
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_OFFSET 3
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT_MASK 0x8
#define BB_CHIP_MCA_CORE_IRQ0_RAW_TX_DP_FIFO_DRP_PKT 0x8
#define BB_CHIP_MCA_CORE_IRQ0_RAW_DP_READY_OFFSET 2
#define BB_CHIP_MCA_CORE_IRQ0_RAW_DP_READY_MASK 0x4
#define BB_CHIP_MCA_CORE_IRQ0_RAW_DP_READY 0x4
#define BB_CHIP_MCA_CORE_IRQ0_RAW_DP_RX_READY_OFFSET 1
#define BB_CHIP_MCA_CORE_IRQ0_RAW_DP_RX_READY_MASK 0x2
#define BB_CHIP_MCA_CORE_IRQ0_RAW_DP_RX_READY 0x2
#define BB_CHIP_MCA_CORE_IRQ0_RAW_DP_TX_READY_OFFSET 0
#define BB_CHIP_MCA_CORE_IRQ0_RAW_DP_TX_READY_MASK 0x1
#define BB_CHIP_MCA_CORE_IRQ0_RAW_DP_TX_READY 0x1
#define BB_CHIP_MCA_CHANNEL_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_MCA_CHANNEL_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_MCA_CHANNEL_VERSION_MINOR_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_MCA_CHANNEL_VERSION_PATCH_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_CONTROL0_AUTO_RECONNECT_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_CONTROL0_AUTO_RECONNECT_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_CONTROL0_AUTO_RECONNECT 0x10
#define BB_CHIP_MCA_CHANNEL_CONTROL0_TX_EN_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_CONTROL0_TX_EN_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_CONTROL0_TX_EN 0x4
#define BB_CHIP_MCA_CHANNEL_CONTROL0_RX_EN_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_CONTROL0_RX_EN_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_CONTROL0_RX_EN 0x2
#define BB_CHIP_MCA_CHANNEL_CONTROL0_LNK_EN_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_CONTROL0_LNK_EN_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_CONTROL0_LNK_EN 0x1
#define BB_CHIP_MCA_CHANNEL_STATUS0_RX_RDY_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_STATUS0_RX_RDY_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_STATUS0_RX_RDY 0x8
#define BB_CHIP_MCA_CHANNEL_STATUS0_TX_RDY_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_STATUS0_TX_RDY_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_STATUS0_TX_RDY 0x4
#define BB_CHIP_MCA_CHANNEL_STATUS0_LNK_RDY_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_STATUS0_LNK_RDY_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_STATUS0_LNK_RDY 0x2
#define BB_CHIP_MCA_CHANNEL_STATUS0_CH_RDY_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_STATUS0_CH_RDY_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_STATUS0_CH_RDY 0x1
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_CRD_LMT_EN_OFFSET 11
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_CRD_LMT_EN_MASK 0x800
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_CRD_LMT_EN 0x800
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_PND_LMT_EN_OFFSET 10
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_PND_LMT_EN_MASK 0x400
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_PND_LMT_EN 0x400
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_U0RECTIMEOUT_LMT_EN_OFFSET 9
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_U0RECTIMEOUT_LMT_EN_MASK 0x200
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_U0RECTIMEOUT_LMT_EN 0x200
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_U0LTIMEOUT_LMT_EN_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_U0LTIMEOUT_LMT_EN_MASK 0x100
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_U0LTIMEOUT_LMT_EN 0x100
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_LMT_EN_OFFSET 6
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_LMT_EN_MASK 0x40
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_LMT_EN 0x40
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_RPT_EN_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_RPT_EN_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_REC_IDL_RPT_EN 0x20
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_REC_ACT_RPT_EN_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_REC_ACT_RPT_EN_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_REC_ACT_RPT_EN 0x10
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_LMT_EN_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_LMT_EN_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_LMT_EN 0x4
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_RPT_EN_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_RPT_EN_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_POL_IDL_RPT_EN 0x2
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_POL_ACT_RPT_EN_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_POL_ACT_RPT_EN_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_LTSSM_POL_ACT_RPT_EN 0x1
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LCRD_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LCRD_MASK 0x100
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LCRD 0x100
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LGOOD_OFFSET 7
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LGOOD_MASK 0x80
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_LGOOD 0x80
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_NRTRY_OFFSET 6
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_NRTRY_MASK 0x40
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_NRTRY 0x40
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_RTRY_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_RTRY_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_FORCE_BAD_DATA_RTRY 0x20
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_GO2_RECOVERY_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_GO2_RECOVERY_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_GO2_RECOVERY 0x10
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_DP_TX_HDR_OVRD_TIME_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_DP_TX_HDR_OVRD_TIME_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_DP_TX_HDR_OVRD_TIME 0x2
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_MEASURE_LATENCY_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_MEASURE_LATENCY_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_LINK_CONTROL0_TEST_MEASURE_LATENCY 0x1
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_REC_IDL_OFFSET 6
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_REC_IDL_MASK 0x40
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_REC_IDL 0x40
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_REC_ACT_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_REC_ACT_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_REC_ACT 0x20
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_U0_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_U0_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_U0 0x10
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_POL_IDL_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_POL_IDL_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_POL_IDL 0x8
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_POL_ACT_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_POL_ACT_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_POL_ACT 0x4
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_DIS_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_DIS_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_DIS 0x2
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_INACT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_INACT_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_LINK_STATUS0_LTSSM_INACT 0x1
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_LATENCY_OFFSET 6
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_LATENCY_MASK 0x40
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_LATENCY 0x40
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_MCUP_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_MCUP_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_MCUP 0x20
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_FRM_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_FRM_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_RX_FRM 0x10
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_MCUP_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_MCUP_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_MCUP 0x8
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_FRM_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_FRM_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_TX_FRM 0x4
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_POL_FAIL_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_POL_FAIL_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_POL_FAIL 0x2
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_U0_TO_REC_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_U0_TO_REC_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RD2CLR_CONFIG_U0_TO_REC 0x1
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_U0_TO_REC_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_U0_TO_REC_CNT_MASK 0xFFFF
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_POL_FAIL_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_POL_FAIL_CNT_MASK 0xFFFF
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_TX_FRM_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_TX_FRM_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_TX_MCUP_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_TX_MCUP_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RX_FRM_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RX_FRM_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RX_MCUP_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_RX_MCUP_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_LATENCY_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_LINK_STATS0_LATENCY_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_MCUP_PLD_MAX_CYCLES_OFFSET 16
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_MCUP_PLD_MAX_CYCLES_MASK 0xF0000
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_FORCE_RETRY_OFFSET 13
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_FORCE_RETRY_MASK 0x2000
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_FORCE_RETRY 0x2000
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_BLOCK_RETRY_OFFSET 12
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_BLOCK_RETRY_MASK 0x1000
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_BLOCK_RETRY 0x1000
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_BW_SRC_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_BW_SRC_MASK 0x100
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_BW_SRC 0x100
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_DRP_ON_PKT_ERR_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_DRP_ON_PKT_ERR_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_DRP_ON_PKT_ERR 0x20
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_FLW_CTRL_EN_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_FLW_CTRL_EN_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_FLW_CTRL_EN 0x10
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_HYS_EN_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_HYS_EN_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_HYS_EN 0x2
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_DRP_ON_SOP_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_DRP_ON_SOP_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_DP_DRP_ON_SOP 0x1
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_RTRY_BUF_BASE_ADDR_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_RTRY_BUF_BASE_ADDR_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_FIFO_HYS_HI_OFFSET 16
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_FIFO_HYS_HI_MASK 0xFFFF0000
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_FIFO_HYS_LO_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_FIFO_HYS_LO_MASK 0xFFFF
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_BANDWIDTH_LIMIT_HI_OFFSET 16
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_BANDWIDTH_LIMIT_HI_MASK 0xFFFF0000
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_BANDWIDTH_LIMIT_LO_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_CONTROL0_BANDWIDTH_LIMIT_LO_MASK 0xFFFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH_OFFSET 11
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH_MASK 0x800
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_BANDWIDTH 0x800
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR_OFFSET 10
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR_MASK 0x400
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR 0x400
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR_OFFSET 9
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR_MASK 0x200
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR 0x200
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR_MASK 0x100
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR 0x100
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR_OFFSET 7
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR_MASK 0x80
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR 0x80
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR_OFFSET 6
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR_MASK 0x40
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR 0x40
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR 0x20
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT 0x10
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT 0x8
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_NFIFO_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_NFIFO_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_NFIFO 0x4
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_PFIFO_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_PFIFO_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_DP_PFIFO 0x2
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_RD2CLR_CONFIG_CMD_FIFO 0x1
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_CMD_FIFO_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_CMD_FIFO_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_PFIFO_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_PFIFO_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_NFIFO_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_NFIFO_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_FIFO_RD_DRP_PKT_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_FIFO_RD_DRP_PKT_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_FIFO_WR_DRP_PKT_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_FIFO_WR_DRP_PKT_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_FIFO_WR_PKT_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_FIFO_WR_PKT_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_FIFO_FIFO_FULL_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_FIFO_FIFO_FULL_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_FIFO_PKT_MAX_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_FIFO_PKT_MAX_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_GRD_NO_SOP_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_GRD_NO_SOP_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_GRD_NO_EOP_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_GRD_NO_EOP_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_GRD_MAX_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_DP_GRD_MAX_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_BANDWIDTH_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TX_STATS0_BANDWIDTH_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_HYS_EN_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_HYS_EN_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_HYS_EN 0x20
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_MIN_LVL_MODE_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_MIN_LVL_MODE_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_MIN_LVL_MODE 0x10
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_DRP_ON_PKT_ERR_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_DRP_ON_PKT_ERR_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_DRP_ON_PKT_ERR 0x8
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_DRP_ON_SOP_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_DRP_ON_SOP_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_DRP_ON_SOP 0x4
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_PKT_STRM_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_PKT_STRM_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_DP_PKT_STRM 0x2
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_NTFY_MODE_LMT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_NTFY_MODE_LMT_MASK 0xFFFF
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_HYS_LO_LVL_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_HYS_LO_LVL_MASK 0xFFFF
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_HYS_HI_LVL_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_CONTROL0_HYS_HI_LVL_MASK 0xFFFF
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR_OFFSET 10
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR_MASK 0x400
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_MAX_ERR 0x400
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR_OFFSET 9
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR_MASK 0x200
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_EOP_ERR 0x200
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR_MASK 0x100
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_GRD_NO_SOP_ERR 0x100
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR_OFFSET 7
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR_MASK 0x80
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_PKT_MAX_ERR 0x80
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR_OFFSET 6
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR_MASK 0x40
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_FIFO_FULL_ERR 0x40
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_PKT_ERR 0x20
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT_WR_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT_WR_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_WR_DRP_PKT_WR 0x10
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_FIFO_RD_DRP_PKT 0x8
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_NFIFO_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_NFIFO_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_NFIFO 0x2
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_PFIFO_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_PFIFO_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_RD2CLR_CONFIG_DP_PFIFO 0x1
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_PFIFO_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_PFIFO_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_NFIFO_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_NFIFO_CNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_FIFO_RD_DRP_PKT_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_FIFO_RD_DRP_PKT_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_FIFO_WR_DRP_PKT_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_FIFO_WR_DRP_PKT_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_FIFO_WR_PKT_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_FIFO_WR_PKT_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_FIFO_FIFO_FULL_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_FIFO_FIFO_FULL_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_FIFO_PKT_MAX_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_FIFO_PKT_MAX_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_GRD_NO_SOP_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_GRD_NO_SOP_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_GRD_NO_EOP_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_GRD_NO_EOP_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_GRD_MAX_ERR_CNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_RX_STATS0_DP_GRD_MAX_ERR_CNT_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LATENCY_MEASUREMENT_OFFSET 20
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LATENCY_MEASUREMENT_MASK 0x100000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LATENCY_MEASUREMENT 0x100000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_WR_FLOW_CTRL_OFFSET 19
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_WR_FLOW_CTRL_MASK 0x80000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_WR_FLOW_CTRL 0x80000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_GRD_MAX_ERR_OFFSET 18
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_GRD_MAX_ERR_MASK 0x40000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_GRD_MAX_ERR 0x40000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_EOP_ERR_OFFSET 17
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_EOP_ERR_MASK 0x20000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_EOP_ERR 0x20000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_SOP_ERR_OFFSET 16
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_SOP_ERR_MASK 0x10000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_GRD_NO_SOP_ERR 0x10000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_FULL_ERR_OFFSET 15
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_FULL_ERR_MASK 0x8000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_FIFO_FULL_ERR 0x8000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_GRD_MAX_ERR_OFFSET 14
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_GRD_MAX_ERR_MASK 0x4000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_GRD_MAX_ERR 0x4000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_EOP_ERR_OFFSET 13
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_EOP_ERR_MASK 0x2000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_EOP_ERR 0x2000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_SOP_ERR_OFFSET 12
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_SOP_ERR_MASK 0x1000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_GRD_NO_SOP_ERR 0x1000
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_CMD_FIFO_FULL_ERR_OFFSET 11
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_CMD_FIFO_FULL_ERR_MASK 0x800
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_CMD_FIFO_FULL_ERR 0x800
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_FIFO_FULL_ERR_OFFSET 10
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_FIFO_FULL_ERR_MASK 0x400
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_FIFO_FULL_ERR 0x400
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_REC_IDL_OFFSET 9
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_REC_IDL_MASK 0x200
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_REC_IDL 0x200
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_REC_ACT_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_REC_ACT_MASK 0x100
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_REC_ACT 0x100
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_U0_OFFSET 7
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_U0_MASK 0x80
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_U0 0x80
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_POL_IDL_OFFSET 6
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_POL_IDL_MASK 0x40
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_POL_IDL 0x40
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_POL_ACT_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_POL_ACT_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_POL_ACT 0x20
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_DIS_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_DIS_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_DIS 0x10
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_INACT_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_INACT_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_LTSSM_INACT 0x8
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_READY_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_READY_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_READY 0x4
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_READY_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_READY_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_RX_READY 0x2
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_READY_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_READY_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_IRQ0_ENABLE_CH_TX_READY 0x1
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LATENCY_MEASUREMENT_OFFSET 20
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LATENCY_MEASUREMENT_MASK 0x100000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LATENCY_MEASUREMENT 0x100000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_FIFO_WR_FLOW_CTRL_OFFSET 19
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_FIFO_WR_FLOW_CTRL_MASK 0x80000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_FIFO_WR_FLOW_CTRL 0x80000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_GRD_MAX_ERR_OFFSET 18
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_GRD_MAX_ERR_MASK 0x40000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_GRD_MAX_ERR 0x40000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_EOP_ERR_OFFSET 17
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_EOP_ERR_MASK 0x20000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_EOP_ERR 0x20000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_SOP_ERR_OFFSET 16
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_SOP_ERR_MASK 0x10000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_GRD_NO_SOP_ERR 0x10000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_FIFO_FULL_ERR_OFFSET 15
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_FIFO_FULL_ERR_MASK 0x8000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_FIFO_FULL_ERR 0x8000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_GRD_MAX_ERR_OFFSET 14
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_GRD_MAX_ERR_MASK 0x4000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_GRD_MAX_ERR 0x4000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_EOP_ERR_OFFSET 13
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_EOP_ERR_MASK 0x2000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_EOP_ERR 0x2000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_SOP_ERR_OFFSET 12
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_SOP_ERR_MASK 0x1000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_GRD_NO_SOP_ERR 0x1000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_CMD_FIFO_FULL_ERR_OFFSET 11
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_CMD_FIFO_FULL_ERR_MASK 0x800
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_CMD_FIFO_FULL_ERR 0x800
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_FIFO_FULL_ERR_OFFSET 10
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_FIFO_FULL_ERR_MASK 0x400
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_FIFO_FULL_ERR 0x400
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_REC_IDL_OFFSET 9
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_REC_IDL_MASK 0x200
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_REC_IDL 0x200
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_REC_ACT_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_REC_ACT_MASK 0x100
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_REC_ACT 0x100
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_U0_OFFSET 7
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_U0_MASK 0x80
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_U0 0x80
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_POL_IDL_OFFSET 6
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_POL_IDL_MASK 0x40
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_POL_IDL 0x40
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_POL_ACT_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_POL_ACT_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_POL_ACT 0x20
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_DIS_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_DIS_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_DIS 0x10
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_INACT_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_INACT_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_LTSSM_INACT 0x8
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_READY_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_READY_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_READY 0x4
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_READY_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_READY_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_RX_READY 0x2
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_READY_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_READY_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_CH_TX_READY 0x1
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LATENCY_MEASUREMENT_OFFSET 20
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LATENCY_MEASUREMENT_MASK 0x100000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LATENCY_MEASUREMENT 0x100000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_WR_FLOW_CTRL_OFFSET 19
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_WR_FLOW_CTRL_MASK 0x80000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_WR_FLOW_CTRL 0x80000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_MAX_ERR_OFFSET 18
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_MAX_ERR_MASK 0x40000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_MAX_ERR 0x40000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_EOP_ERR_OFFSET 17
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_EOP_ERR_MASK 0x20000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_EOP_ERR 0x20000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_SOP_ERR_OFFSET 16
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_SOP_ERR_MASK 0x10000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_GRD_NO_SOP_ERR 0x10000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_FULL_ERR_OFFSET 15
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_FULL_ERR_MASK 0x8000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_FIFO_FULL_ERR 0x8000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_MAX_ERR_OFFSET 14
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_MAX_ERR_MASK 0x4000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_MAX_ERR 0x4000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_EOP_ERR_OFFSET 13
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_EOP_ERR_MASK 0x2000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_EOP_ERR 0x2000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_SOP_ERR_OFFSET 12
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_SOP_ERR_MASK 0x1000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_GRD_NO_SOP_ERR 0x1000
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_CMD_FIFO_FULL_ERR_OFFSET 11
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_CMD_FIFO_FULL_ERR_MASK 0x800
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_CMD_FIFO_FULL_ERR 0x800
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_FIFO_FULL_ERR_OFFSET 10
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_FIFO_FULL_ERR_MASK 0x400
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_FIFO_FULL_ERR 0x400
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_IDL_OFFSET 9
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_IDL_MASK 0x200
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_IDL 0x200
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_ACT_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_ACT_MASK 0x100
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_REC_ACT 0x100
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_U0_OFFSET 7
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_U0_MASK 0x80
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_U0 0x80
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_IDL_OFFSET 6
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_IDL_MASK 0x40
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_IDL 0x40
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_ACT_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_ACT_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_POL_ACT 0x20
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_DIS_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_DIS_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_DIS 0x10
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_INACT_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_INACT_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_LTSSM_INACT 0x8
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_READY_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_READY_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_READY 0x4
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_READY_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_READY_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_RX_READY 0x2
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_READY_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_READY_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_IRQ0_PENDING_IRQ_CH_TX_READY 0x1
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LATENCY_MEASUREMENT_OFFSET 20
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LATENCY_MEASUREMENT_MASK 0x100000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LATENCY_MEASUREMENT 0x100000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_FIFO_WR_FLOW_CTRL_OFFSET 19
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_FIFO_WR_FLOW_CTRL_MASK 0x80000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_FIFO_WR_FLOW_CTRL 0x80000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_GRD_MAX_ERR_OFFSET 18
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_GRD_MAX_ERR_MASK 0x40000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_GRD_MAX_ERR 0x40000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_EOP_ERR_OFFSET 17
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_EOP_ERR_MASK 0x20000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_EOP_ERR 0x20000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_SOP_ERR_OFFSET 16
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_SOP_ERR_MASK 0x10000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_GRD_NO_SOP_ERR 0x10000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_FIFO_FULL_ERR_OFFSET 15
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_FIFO_FULL_ERR_MASK 0x8000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_FIFO_FULL_ERR 0x8000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_GRD_MAX_ERR_OFFSET 14
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_GRD_MAX_ERR_MASK 0x4000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_GRD_MAX_ERR 0x4000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_EOP_ERR_OFFSET 13
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_EOP_ERR_MASK 0x2000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_EOP_ERR 0x2000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_SOP_ERR_OFFSET 12
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_SOP_ERR_MASK 0x1000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_GRD_NO_SOP_ERR 0x1000
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_CMD_FIFO_FULL_ERR_OFFSET 11
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_CMD_FIFO_FULL_ERR_MASK 0x800
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_CMD_FIFO_FULL_ERR 0x800
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_FIFO_FULL_ERR_OFFSET 10
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_FIFO_FULL_ERR_MASK 0x400
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_FIFO_FULL_ERR 0x400
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_REC_IDL_OFFSET 9
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_REC_IDL_MASK 0x200
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_REC_IDL 0x200
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_REC_ACT_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_REC_ACT_MASK 0x100
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_REC_ACT 0x100
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_U0_OFFSET 7
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_U0_MASK 0x80
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_U0 0x80
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_POL_IDL_OFFSET 6
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_POL_IDL_MASK 0x40
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_POL_IDL 0x40
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_POL_ACT_OFFSET 5
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_POL_ACT_MASK 0x20
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_POL_ACT 0x20
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_DIS_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_DIS_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_DIS 0x10
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_INACT_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_INACT_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_LTSSM_INACT 0x8
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_READY_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_READY_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_READY 0x4
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_READY_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_READY_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_RX_READY 0x2
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_READY_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_READY_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_IRQ0_RAW_CH_TX_READY 0x1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_VERSION_MINOR_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_VERSION_PATCH_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_IWG_CNT_SETTING_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_IWG_CNT_SETTING_MASK 0x7FF
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_IFG_CNT_SETTING_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_IFG_CNT_SETTING_MASK 0x7FF
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_PKT_CNT_SETTING_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_PKT_CNT_SETTING_MASK 0x7FF
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_PKT_SIZE_SETTING_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_PKT_SIZE_SETTING_MASK 0x7FF
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_RANDOM_OFFSET 4
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_RANDOM_MASK 0x10
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_RANDOM 0x10
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_THROTTLE_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_THROTTLE_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_THROTTLE 0x8
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_MODE_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_MODE_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_MODE 0x4
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_ENABLE_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_ENABLE_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_ENABLE 0x2
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_GO_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_GO_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_CONFIG0_CTRL0_GO 0x1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_WAIT_COUNT_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_WAIT_COUNT_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_WAIT_COUNT 0x2
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_PKT_COUNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_PKT_COUNT_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_STATS0_RD2CLR_CONFIG_PKT_COUNT 0x1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_STATS0_WAIT_COUNT_WAIT_COUNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_STATS0_WAIT_COUNT_WAIT_COUNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_STATS0_PKT_COUNT_PKT_COUNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_TX_STATS0_PKT_COUNT_PKT_COUNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_VERSION_MINOR_OFFSET 8
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_VERSION_PATCH_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_EN_RXFLW_OFFSET 3
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_EN_RXFLW_MASK 0x8
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_EN_RXFLW 0x8
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_MODE_OFFSET 2
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_MODE_MASK 0x4
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_MODE 0x4
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_ENABLE_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_ENABLE_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_ENABLE 0x2
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_GO_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_GO_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_CONFIG0_MGEN_GO 0x1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_ERR_COUNT_OFFSET 1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_ERR_COUNT_MASK 0x2
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_ERR_COUNT 0x2
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_PKT_COUNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_PKT_COUNT_MASK 0x1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_STATS0_RD2CLR_CONFIG_PKT_COUNT 0x1
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_STATS0_ERR_COUNT_ERR_COUNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_STATS0_ERR_COUNT_ERR_COUNT_MASK 0xFFFFFFFF
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_STATS0_PKT_COUNT_PKT_COUNT_OFFSET 0
#define BB_CHIP_MCA_CHANNEL_TEST_MODE_RX_STATS0_PKT_COUNT_PKT_COUNT_MASK 0xFFFFFFFF
#define BB_CHIP_DP_SINK_MAIN_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_DP_SINK_MAIN_VERSION_MINOR_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_DP_SINK_MAIN_VERSION_PATCH_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_DEBUG_MSA_EN_OFFSET 31
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_DEBUG_MSA_EN_MASK 0x80000000
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_DEBUG_MSA_EN 0x80000000
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_TU_MEASURED_OFFSET 17
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_TU_MEASURED_MASK 0x20000
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_TU_MEASURED 0x20000
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_TICO_CTRL_RST_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_TICO_CTRL_RST_MASK 0x10000
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_TICO_CTRL_RST 0x10000
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_VID_COLOR_FORMAT_OFFSET 14
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_VID_COLOR_FORMAT_MASK 0xC000
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_VID_BIT_PER_COMPONENT_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_VID_BIT_PER_COMPONENT_MASK 0x700
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_VID_STREAM_EXTRACTOR_EN_OFFSET 7
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_VID_STREAM_EXTRACTOR_EN_MASK 0x80
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_VID_STREAM_EXTRACTOR_EN 0x80
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_STREAM_EXTRACTOR_EN_OFFSET 6
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_STREAM_EXTRACTOR_EN_MASK 0x40
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_STREAM_EXTRACTOR_EN 0x40
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_APB_TO_AXI_MODE_SELECT_OFFSET 5
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_APB_TO_AXI_MODE_SELECT_MASK 0x20
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_APB_TO_AXI_MODE_SELECT 0x20
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_ENH_FRM_EN_OFFSET 4
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_ENH_FRM_EN_MASK 0x10
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_ENH_FRM_EN 0x10
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_LANE_BIT_RATE_OFFSET 2
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_LANE_BIT_RATE_MASK 0xC
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_LANE_NUM_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_CONFIGURATION_LANE_NUM_MASK 0x3
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_CONTROL_TPS3_N_TPS2_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_CONTROL_TPS3_N_TPS2_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_CONTROL_TPS3_N_TPS2 0x2
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_CONTROL_ALIGN_EN_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_CONTROL_ALIGN_EN_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_CONTROL_ALIGN_EN 0x1
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATUS_LANES_NOT_ALIGNED_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATUS_LANES_NOT_ALIGNED_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATUS_LANES_NOT_ALIGNED 0x2
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATUS_BOND_ALIGN_DONE_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATUS_BOND_ALIGN_DONE_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATUS_BOND_ALIGN_DONE 0x1
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATS_LANES_NOT_ALIGNED_CNT_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATS_LANES_NOT_ALIGNED_CNT_MASK 0xFF00
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATS_LANES_NOT_ALIGNED_CNT_RST_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATS_LANES_NOT_ALIGNED_CNT_RST_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATS_LANES_NOT_ALIGNED_CNT_RST 0x2
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATS_LANES_ALIGN_DET_EN_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATS_LANES_ALIGN_DET_EN_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_STATS_LANES_ALIGN_DET_EN 0x1
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_DEBUG_STATS1_STATE_DBG_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_DEBUG_STATS1_STATE_DBG_MASK 0xFFFFFFFF
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_DEBUG_STATS2_FIFO_RD_EN_DBG_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_DEBUG_STATS2_FIFO_RD_EN_DBG_MASK 0xFFFFFFFF
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_DEBUG_STATS3_COM_DET_DBG_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_DEBUG_STATS3_COM_DET_DBG_MASK 0xFFFFFFFF
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_DEBUG_STATS4_BOND_ALIGN_DEBUG_STATS_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_DEBUG_STATS4_BOND_ALIGN_DEBUG_STATS_MASK 0xFFFFFF
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_FIFO_STATUS_OVERFLOW_OFFSET 12
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_FIFO_STATUS_OVERFLOW_MASK 0xF000
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_FIFO_STATUS_UNDERFLOW_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_FIFO_STATUS_UNDERFLOW_MASK 0xF00
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_FIFO_STATUS_FULL_OFFSET 4
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_FIFO_STATUS_FULL_MASK 0xF0
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_FIFO_STATUS_EMPTY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_FIFO_STATUS_EMPTY_MASK 0xF
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_FIFO_CONFIG_DEPTH_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ALIGNER_FIFO_CONFIG_DEPTH_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS_FLAG_8B10B_LANES_WITH_8B10B_NIT_ERR_POST_CR_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_STATS_FLAG_8B10B_LANES_WITH_8B10B_NIT_ERR_POST_CR_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_STATS_FLAG_8B10B_LANES_WITH_8B10B_NIT_ERR_POST_CR 0x2
#define BB_CHIP_DP_SINK_MAIN_STATS_FLAG_8B10B_LANES_WITH_8B10B_DIS_ERR_POST_CR_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS_FLAG_8B10B_LANES_WITH_8B10B_DIS_ERR_POST_CR_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS_FLAG_8B10B_LANES_WITH_8B10B_DIS_ERR_POST_CR 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE3_8B10B_DIS_ERR_POST_CR_CNT_RST_OFFSET 11
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE3_8B10B_DIS_ERR_POST_CR_CNT_RST_MASK 0x800
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE3_8B10B_DIS_ERR_POST_CR_CNT_RST 0x800
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE2_8B10B_DIS_ERR_POST_CR_CNT_RST_OFFSET 10
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE2_8B10B_DIS_ERR_POST_CR_CNT_RST_MASK 0x400
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE2_8B10B_DIS_ERR_POST_CR_CNT_RST 0x400
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE1_8B10B_DIS_ERR_POST_CR_CNT_RST_OFFSET 9
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE1_8B10B_DIS_ERR_POST_CR_CNT_RST_MASK 0x200
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE1_8B10B_DIS_ERR_POST_CR_CNT_RST 0x200
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE0_8B10B_DIS_ERR_POST_CR_CNT_RST_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE0_8B10B_DIS_ERR_POST_CR_CNT_RST_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANE0_8B10B_DIS_ERR_POST_CR_CNT_RST 0x100
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANES_8B10B_DIS_ERR_DET_EN_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANES_8B10B_DIS_ERR_DET_EN_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_0_LANES_8B10B_DIS_ERR_DET_EN 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE3_8B10B_NIT_ERR_POST_CR_CNT_RST_OFFSET 11
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE3_8B10B_NIT_ERR_POST_CR_CNT_RST_MASK 0x800
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE3_8B10B_NIT_ERR_POST_CR_CNT_RST 0x800
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE2_8B10B_NIT_ERR_POST_CR_CNT_RST_OFFSET 10
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE2_8B10B_NIT_ERR_POST_CR_CNT_RST_MASK 0x400
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE2_8B10B_NIT_ERR_POST_CR_CNT_RST 0x400
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE1_8B10B_NIT_ERR_POST_CR_CNT_RST_OFFSET 9
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE1_8B10B_NIT_ERR_POST_CR_CNT_RST_MASK 0x200
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE1_8B10B_NIT_ERR_POST_CR_CNT_RST 0x200
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE0_8B10B_NIT_ERR_POST_CR_CNT_RST_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE0_8B10B_NIT_ERR_POST_CR_CNT_RST_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANE0_8B10B_NIT_ERR_POST_CR_CNT_RST 0x100
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANES_8B10B_NIT_ERR_DET_EN_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANES_8B10B_NIT_ERR_DET_EN_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_8B10B_1_LANES_8B10B_NIT_ERR_DET_EN 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_0_LANE3_8B10B_DIS_ERR_POST_CR_CNT_OFFSET 24
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_0_LANE3_8B10B_DIS_ERR_POST_CR_CNT_MASK 0xFF000000
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_0_LANE2_8B10B_DIS_ERR_POST_CR_CNT_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_0_LANE2_8B10B_DIS_ERR_POST_CR_CNT_MASK 0xFF0000
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_0_LANE1_8B10B_DIS_ERR_POST_CR_CNT_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_0_LANE1_8B10B_DIS_ERR_POST_CR_CNT_MASK 0xFF00
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_0_LANE0_8B10B_DIS_ERR_POST_CR_CNT_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_0_LANE0_8B10B_DIS_ERR_POST_CR_CNT_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_1_LANE3_8B10B_NIT_ERR_POST_CR_CNT_OFFSET 24
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_1_LANE3_8B10B_NIT_ERR_POST_CR_CNT_MASK 0xFF000000
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_1_LANE2_8B10B_NIT_ERR_POST_CR_CNT_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_1_LANE2_8B10B_NIT_ERR_POST_CR_CNT_MASK 0xFF0000
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_1_LANE1_8B10B_NIT_ERR_POST_CR_CNT_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_1_LANE1_8B10B_NIT_ERR_POST_CR_CNT_MASK 0xFF00
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_1_LANE0_8B10B_NIT_ERR_POST_CR_CNT_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_8B10B_1_LANE0_8B10B_NIT_ERR_POST_CR_CNT_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_RST_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_RST_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_RST 0x2
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_EN_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_EN_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_EN_RST_GTP_DP_GT_RXBYTEREALIGN_CNT_EN 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_GTP_DP_GT3_RXBYTEREALIGN_CNT_OFFSET 24
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_GTP_DP_GT3_RXBYTEREALIGN_CNT_MASK 0xFF000000
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_GTP_DP_GT2_RXBYTEREALIGN_CNT_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_GTP_DP_GT2_RXBYTEREALIGN_CNT_MASK 0xFF0000
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_GTP_DP_GT1_RXBYTEREALIGN_CNT_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_GTP_DP_GT1_RXBYTEREALIGN_CNT_MASK 0xFF00
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_GTP_DP_GT0_RXBYTEREALIGN_CNT_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS_CNT_GTP_DP_GT0_RXBYTEREALIGN_CNT_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_DESCRAMBLER_ENABLE_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_DESCRAMBLER_ENABLE_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_DESCRAMBLER_ENABLE 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_SDP_EN_OFFSET 24
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_SDP_EN_MASK 0x1000000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_SDP_EN 0x1000000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_DROP_SDP_PTP_PKT_OFFSET 17
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_DROP_SDP_PTP_PKT_MASK 0x20000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_DROP_SDP_PTP_PKT 0x20000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_DROP_CS_PTP_PKT_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_DROP_CS_PTP_PKT_MASK 0x10000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_DROP_CS_PTP_PKT 0x10000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_CS_PKT_LENGTH_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_CFG_CS_PKT_LENGTH_MASK 0xFFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_ALU_ENCODER_PROGRAM_DONE_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_ALU_ENCODER_PROGRAM_DONE_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_ALU_ENCODER_PROGRAM_DONE 0x100
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_ALU_TU_SIZE_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_ALU_TU_SIZE_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MVID_MVID_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MVID_MVID_MASK 0xFFFFFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_NVID_NVID_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_NVID_NVID_MASK 0xFFFFFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_0_TOTAL_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_0_TOTAL_MASK 0xFFFF0000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_0_START_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_0_START_MASK 0xFFFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_WIDTH_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_WIDTH_MASK 0xFFFF0000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_POLARITY_OFFSET 15
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_POLARITY_MASK 0x8000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_POLARITY 0x8000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_SYNC_WIDTH_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_HORIZONTAL_1_SYNC_WIDTH_MASK 0x7FFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_0_TOTAL_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_0_TOTAL_MASK 0xFFFF0000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_0_START_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_0_START_MASK 0xFFFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_1_HEIGHT_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_1_HEIGHT_MASK 0xFFFF0000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_1_POLARITY_OFFSET 15
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_1_POLARITY_MASK 0x8000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_1_POLARITY 0x8000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_1_SYNC_WIDTH_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_VERTICAL_1_SYNC_WIDTH_MASK 0x7FFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_Y_ONLY_OFFSET 11
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_Y_ONLY_MASK 0x800
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_Y_ONLY 0x800
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_STEREO_OFFSET 9
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_STEREO_MASK 0x600
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_INT_TOTAL_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_INT_TOTAL_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_INT_TOTAL 0x100
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_COLOR_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_COLOR_MASK 0xFE
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_CLK_SYNC_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_CLK_SYNC_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_MISC_CLK_SYNC 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_STATUS_MSA_MAJORITY_FAIL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_STATUS_MSA_MAJORITY_FAIL_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_STATUS_MSA_MAJORITY_FAIL 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_FPS_COUNT_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_FPS_COUNT_MASK 0xFFFFFF00
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_FPS_COUNT_EN_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_FPS_COUNT_EN_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_MSA_FPS_COUNT_EN 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MVID_MVID_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MVID_MVID_MASK 0xFFFFFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_NVID_NVID_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_NVID_NVID_MASK 0xFFFFFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_0_TOTAL_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_0_TOTAL_MASK 0xFFFF0000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_0_START_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_0_START_MASK 0xFFFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_WIDTH_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_WIDTH_MASK 0xFFFF0000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_POLARITY_OFFSET 15
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_POLARITY_MASK 0x8000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_POLARITY 0x8000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_SYNC_WIDTH_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_HORIZONTAL_1_SYNC_WIDTH_MASK 0x7FFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_0_TOTAL_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_0_TOTAL_MASK 0xFFFF0000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_0_START_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_0_START_MASK 0xFFFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_HEIGHT_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_HEIGHT_MASK 0xFFFF0000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_POLARITY_OFFSET 15
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_POLARITY_MASK 0x8000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_POLARITY 0x8000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_SYNC_WIDTH_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_VERTICAL_1_SYNC_WIDTH_MASK 0x7FFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_Y_ONLY_OFFSET 11
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_Y_ONLY_MASK 0x800
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_Y_ONLY 0x800
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_STEREO_OFFSET 9
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_STEREO_MASK 0x600
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_INT_TOTAL_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_INT_TOTAL_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_INT_TOTAL 0x100
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_COLOR_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_COLOR_MASK 0xFE
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_CLK_SYNC_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_CLK_SYNC_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_MSA_MISC_CLK_SYNC 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_FSM_STATUS_STATE_VID_STATUS_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_FSM_STATUS_STATE_VID_STATUS_MASK 0x700
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_FSM_STATUS_STATE_PTP_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_FSM_STATUS_STATE_PTP_MASK 0x3
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VBD_VBID_VBID_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VBD_VBID_VBID_MASK 0xFF0000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VBD_VBID_MAUD_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VBD_VBID_MAUD_MASK 0xFF00
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VBD_VBID_MVID_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VBD_VBID_MVID_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VBD_STATUS_VBD_MAJORITY_FAIL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VBD_STATUS_VBD_MAJORITY_FAIL_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VBD_STATUS_VBD_MAJORITY_FAIL 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VID_FIFO_CONFIG_DEPTH_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_VID_FIFO_CONFIG_DEPTH_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_OVERFLOW_OFFSET 3
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_OVERFLOW_MASK 0x8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_OVERFLOW 0x8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_UNDERFLOW_OFFSET 2
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_UNDERFLOW_MASK 0x4
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_UNDERFLOW 0x4
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_FULL_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_FULL_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_FULL 0x2
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_EMPTY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_EMPTY_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_STATUS_EMPTY 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_OVERFLOW_OFFSET 3
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_OVERFLOW_MASK 0x8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_OVERFLOW 0x8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_UNDERFLOW_OFFSET 2
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_UNDERFLOW_MASK 0x4
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_UNDERFLOW 0x4
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_FULL_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_FULL_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_FULL 0x2
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_EMPTY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_EMPTY_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_STATUS_EMPTY 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_CONFIG_DEPTH_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_FIFO_CONFIG_DEPTH_MASK 0x1FF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_CONFIG_DEPTH_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_TAG_FIFO_CONFIG_DEPTH_MASK 0x7F
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_DEBUG_SS_SE_SAME_CYCLE_BYTE_NUM_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_SDP_DEBUG_SS_SE_SAME_CYCLE_BYTE_NUM_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_PIXGEN_EN_OFFSET 31
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_PIXGEN_EN_MASK 0x80000000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_PIXGEN_EN 0x80000000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_PIXGEN_BLUE_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_PIXGEN_BLUE_MASK 0xFF0000
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_PIXGEN_GREEN_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_PIXGEN_GREEN_MASK 0xFF00
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_PIXGEN_RED_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_PIXGEN_RED_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_IDLE_PATTERN_CNT_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_IDLE_PATTERN_CNT_MASK 0xFF00
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_IDLE_PATTERN_CNT_RST_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_IDLE_PATTERN_CNT_RST_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STREAM_EXTRACTOR_DEBUG_IDLE_PATTERN_CNT_RST 0x1
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_HANDSHAKE_HANDSHAKE_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_HANDSHAKE_HANDSHAKE_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_PIXEL_LAST_EARLY_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_PIXEL_LAST_EARLY_MASK 0xFF0000
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_PIXEL_LAST_LATE_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_PIXEL_LAST_LATE_MASK 0xFF00
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_PIXEL_FIRST_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_PIXEL_FIRST_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_LINE_LAST_EARLY_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_LINE_LAST_EARLY_MASK 0xFF0000
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_LINE_LAST_LATE_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_LINE_LAST_LATE_MASK 0xFF00
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_LINE_FIRST_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_ENCODER_VFR_LINE_FIRST_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_MSA_MAJORITY_FAIL_OFFSET 22
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_MSA_MAJORITY_FAIL_MASK 0x400000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_MSA_MAJORITY_FAIL 0x400000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VBD_MAJORITY_FAIL_OFFSET 21
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VBD_MAJORITY_FAIL_MASK 0x200000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VBD_MAJORITY_FAIL 0x200000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_SR_FULL_OFFSET 20
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_SR_FULL_MASK 0x100000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_SR_FULL 0x100000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL_WATERMARK_OFFSET 19
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL_WATERMARK_MASK 0x80000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL_WATERMARK 0x80000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL_OFFSET 18
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL_MASK 0x40000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_LEVEL 0x40000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_UNDERFLOW_OFFSET 17
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_UNDERFLOW_MASK 0x20000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_UNDERFLOW 0x20000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_OVERFLOW_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_OVERFLOW_MASK 0x10000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_OVERFLOW 0x10000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_EMPTY_OFFSET 15
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_EMPTY_MASK 0x8000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_EMPTY 0x8000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_FULL_OFFSET 14
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_FULL_MASK 0x4000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_FULL 0x4000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_SR_FULL_OFFSET 13
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_SR_FULL_MASK 0x2000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_SR_FULL 0x2000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL_WATERMARK_OFFSET 12
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL_WATERMARK_MASK 0x1000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL_WATERMARK 0x1000
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL_OFFSET 11
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL_MASK 0x800
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_LEVEL 0x800
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_UNDERFLOW_OFFSET 10
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_UNDERFLOW_MASK 0x400
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_UNDERFLOW 0x400
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_OVERFLOW_OFFSET 9
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_OVERFLOW_MASK 0x200
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_OVERFLOW 0x200
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_EMPTY_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_EMPTY_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_EMPTY 0x100
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_FULL_OFFSET 7
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_FULL_MASK 0x80
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_FULL 0x80
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_SR_FULL_OFFSET 6
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_SR_FULL_MASK 0x40
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_SR_FULL 0x40
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL_WATERMARK_OFFSET 5
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL_WATERMARK_MASK 0x20
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL_WATERMARK 0x20
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL_OFFSET 4
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL_MASK 0x10
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_LEVEL 0x10
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_UNDERFLOW_OFFSET 3
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_UNDERFLOW_MASK 0x8
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_UNDERFLOW 0x8
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_OVERFLOW_OFFSET 2
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_OVERFLOW_MASK 0x4
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_OVERFLOW 0x4
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_EMPTY_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_EMPTY_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_EMPTY 0x2
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_FULL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_FULL_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_FULL 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_FULL_VID_C0_FIFO_FULL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_FULL_VID_C0_FIFO_FULL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_EMPTY_VID_C0_FIFO_EMPTY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_EMPTY_VID_C0_FIFO_EMPTY_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_OVERFLOW_VID_C0_FIFO_OVERFLOW_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_OVERFLOW_VID_C0_FIFO_OVERFLOW_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_UNDERFLOW_VID_C0_FIFO_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_UNDERFLOW_VID_C0_FIFO_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_LEVEL_VID_C0_FIFO_LEVEL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_LEVEL_VID_C0_FIFO_LEVEL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_LEVEL_WATERMARK_VID_C0_FIFO_LEVEL_WATERMARK_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_FIFO_LEVEL_WATERMARK_VID_C0_FIFO_LEVEL_WATERMARK_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_SR_FULL_VID_C0_SR_FULL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C0_SR_FULL_VID_C0_SR_FULL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_FULL_VID_C1_FIFO_FULL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_FULL_VID_C1_FIFO_FULL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_EMPTY_VID_C1_FIFO_EMPTY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_EMPTY_VID_C1_FIFO_EMPTY_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_OVERFLOW_VID_C1_FIFO_OVERFLOW_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_OVERFLOW_VID_C1_FIFO_OVERFLOW_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_UNDERFLOW_VID_C1_FIFO_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_UNDERFLOW_VID_C1_FIFO_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_LEVEL_VID_C1_FIFO_LEVEL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_LEVEL_VID_C1_FIFO_LEVEL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_LEVEL_WATERMARK_VID_C1_FIFO_LEVEL_WATERMARK_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_FIFO_LEVEL_WATERMARK_VID_C1_FIFO_LEVEL_WATERMARK_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_SR_FULL_VID_C1_SR_FULL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C1_SR_FULL_VID_C1_SR_FULL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_FULL_VID_C2_FIFO_FULL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_FULL_VID_C2_FIFO_FULL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_EMPTY_VID_C2_FIFO_EMPTY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_EMPTY_VID_C2_FIFO_EMPTY_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_OVERFLOW_VID_C2_FIFO_OVERFLOW_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_OVERFLOW_VID_C2_FIFO_OVERFLOW_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_UNDERFLOW_VID_C2_FIFO_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_UNDERFLOW_VID_C2_FIFO_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_LEVEL_VID_C2_FIFO_LEVEL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_LEVEL_VID_C2_FIFO_LEVEL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_LEVEL_WATERMARK_VID_C2_FIFO_LEVEL_WATERMARK_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_FIFO_LEVEL_WATERMARK_VID_C2_FIFO_LEVEL_WATERMARK_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_SR_FULL_VID_C2_SR_FULL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VID_C2_SR_FULL_VID_C2_SR_FULL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_VBD_MAJORITY_FAIL_VBD_MAJORITY_FAIL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_VBD_MAJORITY_FAIL_VBD_MAJORITY_FAIL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS0_MSA_MAJORITY_FAIL_MSA_MAJORITY_FAIL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS0_MSA_MAJORITY_FAIL_MSA_MAJORITY_FAIL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL_WATERMARK_OFFSET 14
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL_WATERMARK_MASK 0x4000
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL_WATERMARK 0x4000
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL_OFFSET 13
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL_MASK 0x2000
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_LEVEL 0x2000
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_UNDERFLOW_OFFSET 12
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_UNDERFLOW_MASK 0x1000
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_UNDERFLOW 0x1000
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_OVERFLOW_OFFSET 11
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_OVERFLOW_MASK 0x800
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_OVERFLOW 0x800
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_EMPTY_OFFSET 10
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_EMPTY_MASK 0x400
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_EMPTY 0x400
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_FULL_OFFSET 9
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_FULL_MASK 0x200
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_TAG_FIFO_FULL 0x200
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL_WATERMARK_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL_WATERMARK_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL_WATERMARK 0x100
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL_OFFSET 7
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL_MASK 0x80
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_LEVEL 0x80
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_UNDERFLOW_OFFSET 6
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_UNDERFLOW_MASK 0x40
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_UNDERFLOW 0x40
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_OVERFLOW_OFFSET 5
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_OVERFLOW_MASK 0x20
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_OVERFLOW 0x20
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_EMPTY_OFFSET 4
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_EMPTY_MASK 0x10
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_EMPTY 0x10
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_FULL_OFFSET 3
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_FULL_MASK 0x8
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_FIFO_FULL 0x8
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_SS_SE_SAME_CYCLE_OFFSET 2
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_SS_SE_SAME_CYCLE_MASK 0x4
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_SS_SE_SAME_CYCLE 0x4
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT_WATERMARK_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT_WATERMARK_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT_WATERMARK 0x2
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS1_RD2CLR_CONFIG_SDP_PKT_SENT_CNT 0x1
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_PKT_SENT_CNT_SDP_PKT_SENT_CNT_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_PKT_SENT_CNT_SDP_PKT_SENT_CNT_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_PKT_SENT_CNT_WATERMARK_SDP_PKT_SENT_CNT_WATERMARK_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_PKT_SENT_CNT_WATERMARK_SDP_PKT_SENT_CNT_WATERMARK_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_SS_SE_SAME_CYCLE_SDP_SS_SE_SAME_CYCLE_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_SS_SE_SAME_CYCLE_SDP_SS_SE_SAME_CYCLE_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_FULL_SDP_FIFO_FULL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_FULL_SDP_FIFO_FULL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_EMPTY_SDP_FIFO_EMPTY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_EMPTY_SDP_FIFO_EMPTY_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_OVERFLOW_SDP_FIFO_OVERFLOW_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_OVERFLOW_SDP_FIFO_OVERFLOW_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_UNDERFLOW_SDP_FIFO_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_UNDERFLOW_SDP_FIFO_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_LEVEL_SDP_FIFO_LEVEL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_LEVEL_SDP_FIFO_LEVEL_MASK 0xFFFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_LEVEL_WATERMARK_SDP_FIFO_LEVEL_WATERMARK_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_FIFO_LEVEL_WATERMARK_SDP_FIFO_LEVEL_WATERMARK_MASK 0xFFFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_FULL_SDP_TAG_FIFO_FULL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_FULL_SDP_TAG_FIFO_FULL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_EMPTY_SDP_TAG_FIFO_EMPTY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_EMPTY_SDP_TAG_FIFO_EMPTY_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_OVERFLOW_SDP_TAG_FIFO_OVERFLOW_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_OVERFLOW_SDP_TAG_FIFO_OVERFLOW_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_UNDERFLOW_SDP_TAG_FIFO_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_UNDERFLOW_SDP_TAG_FIFO_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_LEVEL_SDP_TAG_FIFO_LEVEL_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_LEVEL_SDP_TAG_FIFO_LEVEL_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_LEVEL_WATERMARK_SDP_TAG_FIFO_LEVEL_WATERMARK_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_STATS1_SDP_TAG_FIFO_LEVEL_WATERMARK_SDP_TAG_FIFO_LEVEL_WATERMARK_MASK 0xFF
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_AUDIOMUTE_OFFSET 31
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_AUDIOMUTE_MASK 0x80000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_AUDIOMUTE 0x80000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_NOVIDEOSTREAM_OFFSET 30
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_NOVIDEOSTREAM_MASK 0x40000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_NOVIDEOSTREAM 0x40000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_DP_GT_RXBYTEREALIGN_OFFSET 29
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_DP_GT_RXBYTEREALIGN_MASK 0x20000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_DP_GT_RXBYTEREALIGN 0x20000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_FIRST_IDLE_PATTERN_OFFSET 28
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_FIRST_IDLE_PATTERN_MASK 0x10000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_FIRST_IDLE_PATTERN 0x10000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_LANES_WITH_8B10B_ERR_POST_CR_OFFSET 27
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_LANES_WITH_8B10B_ERR_POST_CR_MASK 0x8000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_LANES_WITH_8B10B_ERR_POST_CR 0x8000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_LANES_NOT_ALIGNED_OFFSET 25
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_LANES_NOT_ALIGNED_MASK 0x2000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_LANES_NOT_ALIGNED 0x2000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_BOND_ALIGN_DONE_OFFSET 24
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_BOND_ALIGN_DONE_MASK 0x1000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_BOND_ALIGN_DONE 0x1000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_OFFSET 23
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_MASK 0x800000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3 0x800000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_OFFSET 22
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_MASK 0x400000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2 0x400000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_OFFSET 21
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_MASK 0x200000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1 0x200000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_OFFSET 20
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK 0x100000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0 0x100000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_OFFSET 19
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_MASK 0x80000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3 0x80000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_OFFSET 18
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_MASK 0x40000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2 0x40000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_OFFSET 17
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_MASK 0x20000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1 0x20000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK 0x10000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0 0x10000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW3_OFFSET 15
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW3_MASK 0x8000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW3 0x8000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW2_OFFSET 14
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW2_MASK 0x4000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW2 0x4000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW1_OFFSET 13
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW1_MASK 0x2000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW1 0x2000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW0_OFFSET 12
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW0_MASK 0x1000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_UNDERFLOW0 0x1000
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW3_OFFSET 11
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW3_MASK 0x800
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW3 0x800
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW2_OFFSET 10
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW2_MASK 0x400
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW2 0x400
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW1_OFFSET 9
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW1_MASK 0x200
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW1 0x200
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW0_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW0_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_ALIGNER_FIFO_OVERFLOW0 0x100
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_TAG_FIFO_UNDERFLOW_OFFSET 7
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_TAG_FIFO_UNDERFLOW_MASK 0x80
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_TAG_FIFO_UNDERFLOW 0x80
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_TAG_FIFO_OVERFLOW_OFFSET 6
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_TAG_FIFO_OVERFLOW_MASK 0x40
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_TAG_FIFO_OVERFLOW 0x40
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_FIFO_UNDERFLOW_OFFSET 5
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_FIFO_UNDERFLOW_MASK 0x20
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_FIFO_UNDERFLOW 0x20
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_FIFO_OVERFLOW_OFFSET 4
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_FIFO_OVERFLOW_MASK 0x10
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_SDP_FIFO_OVERFLOW 0x10
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_MSA_MAJORITY_FAIL_OFFSET 2
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_MSA_MAJORITY_FAIL_MASK 0x4
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_MSA_MAJORITY_FAIL 0x4
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_VBD_MAJORITY_FAIL_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_VBD_MAJORITY_FAIL_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_VBD_MAJORITY_FAIL 0x2
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_TU_SIZE_RDY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_TU_SIZE_RDY_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_IRQ_ENABLE_TU_SIZE_RDY 0x1
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_AUDIOMUTE_OFFSET 31
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_AUDIOMUTE_MASK 0x80000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_AUDIOMUTE 0x80000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_NOVIDEOSTREAM_OFFSET 30
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_NOVIDEOSTREAM_MASK 0x40000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_NOVIDEOSTREAM 0x40000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_DP_GT_RXBYTEREALIGN_OFFSET 29
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_DP_GT_RXBYTEREALIGN_MASK 0x20000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_DP_GT_RXBYTEREALIGN 0x20000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_FIRST_IDLE_PATTERN_OFFSET 28
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_FIRST_IDLE_PATTERN_MASK 0x10000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_FIRST_IDLE_PATTERN 0x10000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_LANES_WITH_8B10B_ERR_POST_CR_OFFSET 27
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_LANES_WITH_8B10B_ERR_POST_CR_MASK 0x8000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_LANES_WITH_8B10B_ERR_POST_CR 0x8000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_LANES_NOT_ALIGNED_OFFSET 25
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_LANES_NOT_ALIGNED_MASK 0x2000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_LANES_NOT_ALIGNED 0x2000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_BOND_ALIGN_DONE_OFFSET 24
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_BOND_ALIGN_DONE_MASK 0x1000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_BOND_ALIGN_DONE 0x1000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_OFFSET 23
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_MASK 0x800000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3 0x800000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_OFFSET 22
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_MASK 0x400000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2 0x400000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_OFFSET 21
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_MASK 0x200000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1 0x200000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_OFFSET 20
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK 0x100000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0 0x100000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_OFFSET 19
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_MASK 0x80000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3 0x80000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_OFFSET 18
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_MASK 0x40000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2 0x40000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_OFFSET 17
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_MASK 0x20000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1 0x20000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK 0x10000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0 0x10000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW3_OFFSET 15
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW3_MASK 0x8000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW3 0x8000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW2_OFFSET 14
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW2_MASK 0x4000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW2 0x4000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW1_OFFSET 13
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW1_MASK 0x2000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW1 0x2000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW0_OFFSET 12
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW0_MASK 0x1000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_UNDERFLOW0 0x1000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW3_OFFSET 11
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW3_MASK 0x800
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW3 0x800
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW2_OFFSET 10
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW2_MASK 0x400
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW2 0x400
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW1_OFFSET 9
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW1_MASK 0x200
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW1 0x200
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW0_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW0_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_ALIGNER_FIFO_OVERFLOW0 0x100
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_TAG_FIFO_UNDERFLOW_OFFSET 7
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_TAG_FIFO_UNDERFLOW_MASK 0x80
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_TAG_FIFO_UNDERFLOW 0x80
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_TAG_FIFO_OVERFLOW_OFFSET 6
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_TAG_FIFO_OVERFLOW_MASK 0x40
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_TAG_FIFO_OVERFLOW 0x40
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_FIFO_UNDERFLOW_OFFSET 5
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_FIFO_UNDERFLOW_MASK 0x20
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_FIFO_UNDERFLOW 0x20
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_FIFO_OVERFLOW_OFFSET 4
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_FIFO_OVERFLOW_MASK 0x10
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_SDP_FIFO_OVERFLOW 0x10
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_MSA_MAJORITY_FAIL_OFFSET 2
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_MSA_MAJORITY_FAIL_MASK 0x4
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_MSA_MAJORITY_FAIL 0x4
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_VBD_MAJORITY_FAIL_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_VBD_MAJORITY_FAIL_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_VBD_MAJORITY_FAIL 0x2
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_TU_SIZE_RDY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_TU_SIZE_RDY_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_TU_SIZE_RDY 0x1
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_AUDIOMUTE_OFFSET 31
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_AUDIOMUTE_MASK 0x80000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_AUDIOMUTE 0x80000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_NOVIDEOSTREAM_OFFSET 30
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_NOVIDEOSTREAM_MASK 0x40000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_NOVIDEOSTREAM 0x40000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_DP_GT_RXBYTEREALIGN_OFFSET 29
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_DP_GT_RXBYTEREALIGN_MASK 0x20000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_DP_GT_RXBYTEREALIGN 0x20000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_FIRST_IDLE_PATTERN_OFFSET 28
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_FIRST_IDLE_PATTERN_MASK 0x10000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_FIRST_IDLE_PATTERN 0x10000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_LANES_WITH_8B10B_ERR_POST_CR_OFFSET 27
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_LANES_WITH_8B10B_ERR_POST_CR_MASK 0x8000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_LANES_WITH_8B10B_ERR_POST_CR 0x8000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_LANES_NOT_ALIGNED_OFFSET 25
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_LANES_NOT_ALIGNED_MASK 0x2000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_LANES_NOT_ALIGNED 0x2000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_BOND_ALIGN_DONE_OFFSET 24
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_BOND_ALIGN_DONE_MASK 0x1000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_BOND_ALIGN_DONE 0x1000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_OFFSET 23
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_MASK 0x800000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3 0x800000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_OFFSET 22
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_MASK 0x400000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2 0x400000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_OFFSET 21
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_MASK 0x200000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1 0x200000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_OFFSET 20
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK 0x100000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0 0x100000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_OFFSET 19
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_MASK 0x80000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3 0x80000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_OFFSET 18
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_MASK 0x40000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2 0x40000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_OFFSET 17
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_MASK 0x20000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1 0x20000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK 0x10000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0 0x10000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW3_OFFSET 15
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW3_MASK 0x8000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW3 0x8000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW2_OFFSET 14
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW2_MASK 0x4000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW2 0x4000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW1_OFFSET 13
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW1_MASK 0x2000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW1 0x2000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW0_OFFSET 12
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW0_MASK 0x1000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_UNDERFLOW0 0x1000
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW3_OFFSET 11
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW3_MASK 0x800
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW3 0x800
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW2_OFFSET 10
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW2_MASK 0x400
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW2 0x400
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW1_OFFSET 9
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW1_MASK 0x200
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW1 0x200
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW0_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW0_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_ALIGNER_FIFO_OVERFLOW0 0x100
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_TAG_FIFO_UNDERFLOW_OFFSET 7
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_TAG_FIFO_UNDERFLOW_MASK 0x80
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_TAG_FIFO_UNDERFLOW 0x80
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_TAG_FIFO_OVERFLOW_OFFSET 6
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_TAG_FIFO_OVERFLOW_MASK 0x40
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_TAG_FIFO_OVERFLOW 0x40
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_FIFO_UNDERFLOW_OFFSET 5
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_FIFO_UNDERFLOW_MASK 0x20
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_FIFO_UNDERFLOW 0x20
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_FIFO_OVERFLOW_OFFSET 4
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_FIFO_OVERFLOW_MASK 0x10
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_SDP_FIFO_OVERFLOW 0x10
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_MSA_MAJORITY_FAIL_OFFSET 2
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_MSA_MAJORITY_FAIL_MASK 0x4
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_MSA_MAJORITY_FAIL 0x4
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_VBD_MAJORITY_FAIL_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_VBD_MAJORITY_FAIL_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_VBD_MAJORITY_FAIL 0x2
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_TU_SIZE_RDY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_TU_SIZE_RDY_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_IRQ_PENDING_IRQ_TU_SIZE_RDY 0x1
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_AUDIOMUTE_OFFSET 31
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_AUDIOMUTE_MASK 0x80000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_AUDIOMUTE 0x80000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_NOVIDEOSTREAM_OFFSET 30
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_NOVIDEOSTREAM_MASK 0x40000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_NOVIDEOSTREAM 0x40000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_DP_GT_RXBYTEREALIGN_OFFSET 29
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_DP_GT_RXBYTEREALIGN_MASK 0x20000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_DP_GT_RXBYTEREALIGN 0x20000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_FIRST_IDLE_PATTERN_OFFSET 28
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_FIRST_IDLE_PATTERN_MASK 0x10000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_FIRST_IDLE_PATTERN 0x10000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_LANES_WITH_8B10B_ERR_POST_CR_OFFSET 27
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_LANES_WITH_8B10B_ERR_POST_CR_MASK 0x8000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_LANES_WITH_8B10B_ERR_POST_CR 0x8000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_LANES_NOT_ALIGNED_OFFSET 25
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_LANES_NOT_ALIGNED_MASK 0x2000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_LANES_NOT_ALIGNED 0x2000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_BOND_ALIGN_DONE_OFFSET 24
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_BOND_ALIGN_DONE_MASK 0x1000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_BOND_ALIGN_DONE 0x1000000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_OFFSET 23
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_MASK 0x800000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3 0x800000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_OFFSET 22
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_MASK 0x400000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2 0x400000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_OFFSET 21
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_MASK 0x200000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1 0x200000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_OFFSET 20
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK 0x100000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0 0x100000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_OFFSET 19
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_MASK 0x80000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3 0x80000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_OFFSET 18
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_MASK 0x40000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2 0x40000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_OFFSET 17
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_MASK 0x20000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1 0x20000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_OFFSET 16
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK 0x10000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0 0x10000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW3_OFFSET 15
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW3_MASK 0x8000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW3 0x8000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW2_OFFSET 14
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW2_MASK 0x4000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW2 0x4000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW1_OFFSET 13
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW1_MASK 0x2000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW1 0x2000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW0_OFFSET 12
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW0_MASK 0x1000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_UNDERFLOW0 0x1000
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW3_OFFSET 11
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW3_MASK 0x800
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW3 0x800
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW2_OFFSET 10
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW2_MASK 0x400
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW2 0x400
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW1_OFFSET 9
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW1_MASK 0x200
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW1 0x200
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW0_OFFSET 8
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW0_MASK 0x100
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_ALIGNER_FIFO_OVERFLOW0 0x100
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_TAG_FIFO_UNDERFLOW_OFFSET 7
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_TAG_FIFO_UNDERFLOW_MASK 0x80
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_TAG_FIFO_UNDERFLOW 0x80
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_TAG_FIFO_OVERFLOW_OFFSET 6
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_TAG_FIFO_OVERFLOW_MASK 0x40
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_TAG_FIFO_OVERFLOW 0x40
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_FIFO_UNDERFLOW_OFFSET 5
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_FIFO_UNDERFLOW_MASK 0x20
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_FIFO_UNDERFLOW 0x20
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_FIFO_OVERFLOW_OFFSET 4
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_FIFO_OVERFLOW_MASK 0x10
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_SDP_FIFO_OVERFLOW 0x10
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_MSA_MAJORITY_FAIL_OFFSET 2
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_MSA_MAJORITY_FAIL_MASK 0x4
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_MSA_MAJORITY_FAIL 0x4
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_VBD_MAJORITY_FAIL_OFFSET 1
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_VBD_MAJORITY_FAIL_MASK 0x2
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_VBD_MAJORITY_FAIL 0x2
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_TU_SIZE_RDY_OFFSET 0
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_TU_SIZE_RDY_MASK 0x1
#define BB_CHIP_DP_SINK_MAIN_IRQ_RAW_TU_SIZE_RDY 0x1
#define BB_CHIP_DP_SINK_TICO_TICO_E_WIDTH_TICO_E_WIDTH_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_WIDTH_TICO_E_WIDTH_MASK 0xFFFF
#define BB_CHIP_DP_SINK_TICO_TICO_E_HEIGHT_TICO_E_HEIGHT_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_HEIGHT_TICO_E_HEIGHT_MASK 0xFFFF
#define BB_CHIP_DP_SINK_TICO_TICO_E_COMP_TICO_E_COMP_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_COMP_TICO_E_COMP_MASK 0x3
#define BB_CHIP_DP_SINK_TICO_TICO_E_MODE_TICO_E_MODE_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_MODE_TICO_E_MODE_MASK 0xF
#define BB_CHIP_DP_SINK_TICO_TICO_E_HLVLS_TICO_E_HLVLS_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_HLVLS_TICO_E_HLVLS_MASK 0x7
#define BB_CHIP_DP_SINK_TICO_TICO_E_VLD_TICO_E_VLD_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_VLD_TICO_E_VLD_MASK 0x1
#define BB_CHIP_DP_SINK_TICO_TICO_E_VLD_TICO_E_VLD 0x1
#define BB_CHIP_DP_SINK_TICO_TICO_E_NBR_TICO_E_NBR_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_NBR_TICO_E_NBR_MASK 0xFFFF
#define BB_CHIP_DP_SINK_TICO_TICO_E_BGT_TICO_E_BGT_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_BGT_TICO_E_BGT_MASK 0xFFFFFFFF
#define BB_CHIP_DP_SINK_TICO_TICO_E_VID_DEPTH_TICO_E_VID_DEPTH_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_VID_DEPTH_TICO_E_VID_DEPTH_MASK 0xF
#define BB_CHIP_DP_SINK_TICO_TICO_E_PLAY_MODE_TICO_E_PLAY_MODE_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_PLAY_MODE_TICO_E_PLAY_MODE_MASK 0x1
#define BB_CHIP_DP_SINK_TICO_TICO_E_PLAY_MODE_TICO_E_PLAY_MODE 0x1
#define BB_CHIP_DP_SINK_TICO_TICO_E_LVL_WEIGHTS_TICO_E_LVL_WEIGHTS_OFFSET 0
#define BB_CHIP_DP_SINK_TICO_TICO_E_LVL_WEIGHTS_TICO_E_LVL_WEIGHTS_MASK 0xFFFFFFFF
#define BB_CHIP_DP_SINK_AUX_HPD_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_DP_SINK_AUX_HPD_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_DP_SINK_AUX_HPD_VERSION_MINOR_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_DP_SINK_AUX_HPD_VERSION_PATCH_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_DEBOUNCE_OFFSET 31
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_DEBOUNCE_MASK 0x80000000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_DEBOUNCE 0x80000000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_DEBOUNCE_OFFSET 30
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_DEBOUNCE_MASK 0x40000000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_DEBOUNCE 0x40000000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_OFFSET 29
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_MASK 0x20000000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN 0x20000000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_OFFSET 28
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_MASK 0x10000000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN 0x10000000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_SENT_DEFER_CNT_OFFSET 24
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_SENT_DEFER_CNT_MASK 0xF000000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_RESPONSE_TIMEOUT_CNT_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_STATUS_RESPONSE_TIMEOUT_CNT_MASK 0x1FFFF
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_CTRL1_REPLY_TIMER_OFFSET 19
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_CTRL1_REPLY_TIMER_MASK 0xFFF80000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_CTRL1_RESPONSE_TIMER_OFFSET 3
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_CTRL1_RESPONSE_TIMER_MASK 0xFFF8
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_CTRL2_PRE_CHARGE_LENGTH_OFFSET 16
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_CTRL2_PRE_CHARGE_LENGTH_MASK 0x1F0000
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_CTRL3_DP_AUX_HPD_CLK_FREQ_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_CTRL3_DP_AUX_HPD_CLK_FREQ_MASK 0xFF
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_RX_RX_FLAG_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_RX_RX_FLAG_MASK 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_RX_RX_FLAG 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_RX_RX_DATA_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_RX_RX_DATA_MASK 0xFF
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_TX_GO_BIT_OFFSET 9
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_TX_GO_BIT_MASK 0x200
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_TX_GO_BIT 0x200
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_TX_TX_FLAG_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_TX_TX_FLAG_MASK 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_TX_TX_FLAG 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_TX_TX_DATA_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_AUX_TX_TX_DATA_MASK 0xFF
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_STATUS_HPD_LINE_OUT_OFFSET 2
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_STATUS_HPD_LINE_OUT_MASK 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_STATUS_HPD_LINE_OUT 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_STATUS_HPD_LINE_IN_DEBOUNCE_OFFSET 1
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_STATUS_HPD_LINE_IN_DEBOUNCE_MASK 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_STATUS_HPD_LINE_IN_DEBOUNCE 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_STATUS_HPD_LINE_IN_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_STATUS_HPD_LINE_IN_MASK 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_STATUS_HPD_LINE_IN 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_LOW_OFFSET 3
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_LOW_MASK 0x8
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_LOW 0x8
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_HIGH_OFFSET 2
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_HIGH_MASK 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_HIGH 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_REPLUG_OFFSET 1
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_REPLUG_MASK 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_REPLUG 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_IRQ_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_IRQ_MASK 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_CTRL_HPD_IRQ 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER1_HPD_IRQ_TO_IRQ_MIN_GAP_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER1_HPD_IRQ_TO_IRQ_MIN_GAP_MASK 0x3F00
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER1_HPD_IRQ_PULSE_WIDTH_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER1_HPD_IRQ_PULSE_WIDTH_MASK 0xF
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER2_HPD_REPLUG_PULSE_WIDTH_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER2_HPD_REPLUG_PULSE_WIDTH_MASK 0xFF
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER3_HPD_IRQ_RISING_DETECT_OFFSET 16
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER3_HPD_IRQ_RISING_DETECT_MASK 0x3F0000
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER3_HPD_IRQ_FALLING_DETECT_OFFSET 12
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER3_HPD_IRQ_FALLING_DETECT_MASK 0xF000
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER3_HPD_AUX_DEBOUNCE_PERIOD_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_TIMER3_HPD_AUX_DEBOUNCE_PERIOD_MASK 0x7FF
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_RISE_DET_CNT_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_RISE_DET_CNT_MASK 0xFF00
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_RISE_DET_RST_OFFSET 4
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_RISE_DET_RST_MASK 0x10
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_RISE_DET_RST 0x10
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_RISE_DET_CTRL_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_RISE_DET_CTRL_MASK 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_RISE_DET_CTRL 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_FALL_DET_CNT_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_FALL_DET_CNT_MASK 0xFF00
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_FALL_DET_RST_OFFSET 4
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_FALL_DET_RST_MASK 0x10
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_FALL_DET_RST 0x10
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_FALL_DET_CTRL_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_FALL_DET_CTRL_MASK 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_HPD_FALL_DET_CTRL 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_CONNECT_DET_CNT_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_CONNECT_DET_CNT_MASK 0xFF00
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_CONNECT_DET_RST_OFFSET 4
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_CONNECT_DET_RST_MASK 0x10
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_CONNECT_DET_RST 0x10
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_CONNECT_DET_CTRL_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_CONNECT_DET_CTRL_MASK 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_CONNECT_DET_CTRL 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CNT_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CNT_MASK 0xFF00
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_DISCONNECT_DET_RST_OFFSET 4
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_DISCONNECT_DET_RST_MASK 0x10
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_DISCONNECT_DET_RST 0x10
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CTRL_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CTRL_MASK 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CTRL 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET_OFFSET 17
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET 0x20000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET 0x10000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET_OFFSET 15
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET_MASK 0x8000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET 0x8000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET_OFFSET 14
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET_MASK 0x4000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET 0x4000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED_OFFSET 13
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED_MASK 0x2000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED 0x2000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_OFFSET 12
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_MASK 0x1000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED 0x1000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT_OFFSET 11
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT_MASK 0x800
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT 0x800
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_CONNECT_OFFSET 10
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_CONNECT_MASK 0x400
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_CONNECT 0x400
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_IRQ_OFFSET 9
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_IRQ_MASK 0x200
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_IRQ 0x200
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_REPLUG_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_REPLUG_MASK 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_REPLUG 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW 0x80
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT_OFFSET 3
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT_MASK 0x8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT 0x8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DEFER_SENT_OFFSET 2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DEFER_SENT_MASK 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DEFER_SENT 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR_OFFSET 1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR_MASK 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_CONNECT_DET_OFFSET 17
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_CONNECT_DET 0x20000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_DISCONNECT_DET 0x10000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_RISE_DET_OFFSET 15
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_RISE_DET_MASK 0x8000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_RISE_DET 0x8000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_FALL_DET_OFFSET 14
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_FALL_DET_MASK 0x4000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_FALL_DET 0x4000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_POWERED_OFFSET 13
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_POWERED_MASK 0x2000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_POWERED 0x2000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_DETECTED_OFFSET 12
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_DETECTED_MASK 0x1000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_DETECTED 0x1000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT_OFFSET 11
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT_MASK 0x800
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT 0x800
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_CONNECT_OFFSET 10
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_CONNECT_MASK 0x400
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_CONNECT 0x400
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_IRQ_OFFSET 9
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_IRQ_MASK 0x200
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_IRQ 0x200
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_REPLUG_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_REPLUG_MASK 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_REPLUG 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW 0x80
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT_OFFSET 3
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT_MASK 0x8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT 0x8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DEFER_SENT_OFFSET 2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DEFER_SENT_MASK 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DEFER_SENT 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR_OFFSET 1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR_MASK 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_CONNECT_DET_OFFSET 17
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_CONNECT_DET 0x20000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DISCONNECT_DET 0x10000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_RISE_DET_OFFSET 15
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_RISE_DET_MASK 0x8000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_RISE_DET 0x8000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_FALL_DET_OFFSET 14
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_FALL_DET_MASK 0x4000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_FALL_DET 0x4000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_POWERED_OFFSET 13
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_POWERED_MASK 0x2000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_POWERED 0x2000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DETECTED_OFFSET 12
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DETECTED_MASK 0x1000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DETECTED 0x1000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_DISCONNECT_OFFSET 11
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_DISCONNECT_MASK 0x800
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_DISCONNECT 0x800
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_CONNECT_OFFSET 10
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_CONNECT_MASK 0x400
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_CONNECT 0x400
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_IRQ_OFFSET 9
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_IRQ_MASK 0x200
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_IRQ 0x200
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_REPLUG_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_REPLUG_MASK 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_HPD_REPLUG 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_OVERFLOW 0x80
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_REPLY_TIMEOUT_OFFSET 3
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_REPLY_TIMEOUT_MASK 0x8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_REPLY_TIMEOUT 0x8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DEFER_SENT_OFFSET 2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DEFER_SENT_MASK 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_DEFER_SENT 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_GO_BIT_CLEAR_OFFSET 1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_GO_BIT_CLEAR_MASK 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_GO_BIT_CLEAR 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_PKT_RECEIVED 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_CONNECT_DET_OFFSET 17
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_CONNECT_DET 0x20000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_DISCONNECT_DET 0x10000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_RISE_DET_OFFSET 15
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_RISE_DET_MASK 0x8000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_RISE_DET 0x8000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_FALL_DET_OFFSET 14
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_FALL_DET_MASK 0x4000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_FALL_DET 0x4000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_POWERED_OFFSET 13
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_POWERED_MASK 0x2000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_POWERED 0x2000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_DETECTED_OFFSET 12
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_DETECTED_MASK 0x1000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DP_SOURCE_DETECTED 0x1000
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_DISCONNECT_OFFSET 11
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_DISCONNECT_MASK 0x800
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_DISCONNECT 0x800
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_CONNECT_OFFSET 10
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_CONNECT_MASK 0x400
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_CONNECT 0x400
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_IRQ_OFFSET 9
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_IRQ_MASK 0x200
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_IRQ 0x200
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_REPLUG_OFFSET 8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_REPLUG_MASK 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_HPD_REPLUG 0x100
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_RX_FIFO_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_RX_FIFO_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_RX_FIFO_OVERFLOW 0x80
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_REPLY_TIMEOUT_OFFSET 3
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_REPLY_TIMEOUT_MASK 0x8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_REPLY_TIMEOUT 0x8
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DEFER_SENT_OFFSET 2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DEFER_SENT_MASK 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_DEFER_SENT 0x4
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_GO_BIT_CLEAR_OFFSET 1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_GO_BIT_CLEAR_MASK 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_GO_BIT_CLEAR 0x2
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define BB_CHIP_DP_SINK_AUX_HPD_IRQ_RAW_RX_FIFO_PKT_RECEIVED 0x1
#define BB_CHIP_DP_SOURCE_MAIN_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_DP_SOURCE_MAIN_VERSION_MINOR_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_MAIN_VERSION_PATCH_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DEBUG_SEL_OFFSET 28
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DEBUG_SEL_MASK 0xF0000000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DP_TRAINING_DONE_OFFSET 24
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DP_TRAINING_DONE_MASK 0x1000000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DP_TRAINING_DONE 0x1000000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_VID_STREAM_END_OFFSET 17
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_VID_STREAM_END_MASK 0x20000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_VID_STREAM_END 0x20000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_APB_TO_AXI_MODE_SELECT_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_APB_TO_AXI_MODE_SELECT_MASK 0x10000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_APB_TO_AXI_MODE_SELECT 0x10000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_PIX_GEN_MODE_OFFSET 14
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_PIX_GEN_MODE_MASK 0xC000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_PIX_GEN_SEL_OFFSET 13
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_PIX_GEN_SEL_MASK 0x2000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_PIX_GEN_SEL 0x2000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DP_ENH_FRM_EN_OFFSET 12
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DP_ENH_FRM_EN_MASK 0x1000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DP_ENH_FRM_EN 0x1000
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DECODER_ERROR_INJECT_OFFSET 11
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DECODER_ERROR_INJECT_MASK 0x800
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_DECODER_ERROR_INJECT 0x800
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_VID_STREAM_GENERATOR_EN_OFFSET 10
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_VID_STREAM_GENERATOR_EN_MASK 0x400
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_VID_STREAM_GENERATOR_EN 0x400
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_SYN_STREAM_GENERATOR_EN_OFFSET 9
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_SYN_STREAM_GENERATOR_EN_MASK 0x200
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_SYN_STREAM_GENERATOR_EN 0x200
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_SDP_EN_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_SDP_EN_MASK 0x100
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_SDP_EN 0x100
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_LANE_BIT_RATE_OFFSET 6
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_LANE_BIT_RATE_MASK 0xC0
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_TPS_SEL_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_TPS_SEL_MASK 0x3C
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_LANE_NUM_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_CONFIGURATION_LANE_NUM_MASK 0x3
#define BB_CHIP_DP_SOURCE_MAIN_SCRAMBLER_ENABLE_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_SCRAMBLER_ENABLE_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_SCRAMBLER_ENABLE 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG0_CS_START_LEVEL_OFFSET 20
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG0_CS_START_LEVEL_MASK 0xFFF00000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG0_CS_PKT_LENGTH_OFFSET 10
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG0_CS_PKT_LENGTH_MASK 0xFFC00
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG0_PIX_START_LEVEL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG0_PIX_START_LEVEL_MASK 0x3FF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG1_CS_FIFO_LEVEL_CHECK_FREQUENCY_OFFSET 13
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG1_CS_FIFO_LEVEL_CHECK_FREQUENCY_MASK 0x7FE000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG1_CS_PKT_INTERVAL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG1_CS_PKT_INTERVAL_MASK 0x1FFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG2_CS_PKT_INTERVAL_FEEDBACK_CTRL_OFFSET 31
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG2_CS_PKT_INTERVAL_FEEDBACK_CTRL_MASK 0x80000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG2_CS_PKT_INTERVAL_FEEDBACK_CTRL 0x80000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG2_CS_PKT_INTERVAL_FEEDBACK_CTRL_DEBUG_OFFSET 27
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG2_CS_PKT_INTERVAL_FEEDBACK_CTRL_DEBUG_MASK 0x78000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG2_CS_PKT_INTERVAL_MINUS_OFFSET0_OFFSET 4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG2_CS_PKT_INTERVAL_MINUS_OFFSET0_MASK 0xF0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG2_CS_PKT_INTERVAL_PLUS_OFFSET0_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG2_CS_PKT_INTERVAL_PLUS_OFFSET0_MASK 0xF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_FEEDBACK_CTRL_OFFSET 31
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_FEEDBACK_CTRL_MASK 0x80000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_FEEDBACK_CTRL 0x80000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_FEEDBACK_CTRL_DEBUG_OFFSET 27
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_FEEDBACK_CTRL_DEBUG_MASK 0x78000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_MINUS_OFFSET1_OFFSET 12
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_MINUS_OFFSET1_MASK 0xF000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_PLUS_OFFSET1_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_PLUS_OFFSET1_MASK 0xF00
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_MINUS_OFFSET0_OFFSET 4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_MINUS_OFFSET0_MASK 0xF0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_PLUS_OFFSET0_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CFG3_DP_WIDTH_TOTAL_PLUS_OFFSET0_MASK 0xF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CS_PKT_UPDATED_INTERVAL_DEBUG_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_CS_PKT_UPDATED_INTERVAL_DEBUG_MASK 0x1FFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_DP_WIDTH_TOTAL_ACTUAL_DEBUG_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_DP_WIDTH_TOTAL_ACTUAL_DEBUG_MASK 0x7FFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU0_DP_WIDTH_ACTIVE_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU0_DP_WIDTH_ACTIVE_MASK 0x7FFF0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU0_DP_WIDTH_TOTAL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU0_DP_WIDTH_TOTAL_MASK 0x7FFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU1_FULL_TU_SIZE_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU1_FULL_TU_SIZE_MASK 0x7F0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU1_LAST_TU_SIZE_OFFSET 9
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU1_LAST_TU_SIZE_MASK 0xFE00
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU1_FULL_TU_NUM_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU1_FULL_TU_NUM_MASK 0x1FF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU2_CPU_MATH_RESULT_RDY_OFFSET 31
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU2_CPU_MATH_RESULT_RDY_MASK 0x80000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU2_CPU_MATH_RESULT_RDY 0x80000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU2_VALID_BYTES_REPEAT_NUM_OFFSET 22
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU2_VALID_BYTES_REPEAT_NUM_MASK 0x7FC00000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU2_VALID_BYTES_PER_FULL_TU_OFFSET 15
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU2_VALID_BYTES_PER_FULL_TU_MASK 0x3F8000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU2_VALID_BYTES_NUM_PER_LANE_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_ALU2_VALID_BYTES_NUM_PER_LANE_MASK 0x7FFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_0_NVID_SEL_OFFSET 26
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_0_NVID_SEL_MASK 0x4000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_0_NVID_SEL 0x4000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_0_MVID_SEL_OFFSET 24
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_0_MVID_SEL_MASK 0x3000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_0_MVID_SET_VALUE_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_0_MVID_SET_VALUE_MASK 0xFFFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_1_INSERT_LINE_SEL_OFFSET 24
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_1_INSERT_LINE_SEL_MASK 0xFF000000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_1_NVID_SET_VALUE_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_CONTROL_1_NVID_SET_VALUE_MASK 0xFFFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MVID_MVID_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MVID_MVID_MASK 0xFFFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_NVID_NVID_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_NVID_NVID_MASK 0xFFFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_0_TOTAL_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_0_TOTAL_MASK 0xFFFF0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_0_START_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_0_START_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_1_WIDTH_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_1_WIDTH_MASK 0xFFFF0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_1_POLARITY_OFFSET 15
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_1_POLARITY_MASK 0x8000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_1_POLARITY 0x8000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_1_SYNC_WIDTH_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_HORIZONTAL_1_SYNC_WIDTH_MASK 0x7FFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_0_TOTAL_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_0_TOTAL_MASK 0xFFFF0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_0_START_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_0_START_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_1_HEIGHT_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_1_HEIGHT_MASK 0xFFFF0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_1_POLARITY_OFFSET 15
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_1_POLARITY_MASK 0x8000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_1_POLARITY 0x8000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_1_SYNC_WIDTH_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_VERTICAL_1_SYNC_WIDTH_MASK 0x7FFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_RESERVED_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_RESERVED_MASK 0x70000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_VSC_SDP_OFFSET 12
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_VSC_SDP_MASK 0x1000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_VSC_SDP 0x1000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_Y_ONLY_OFFSET 11
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_Y_ONLY_MASK 0x800
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_Y_ONLY 0x800
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_STEREO_OFFSET 9
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_STEREO_MASK 0x600
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_INT_TOTAL_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_INT_TOTAL_MASK 0x100
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_INT_TOTAL 0x100
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_COLOR_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_COLOR_MASK 0xFE
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_CLK_SYNC_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_CLK_SYNC_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_MISC_CLK_SYNC 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_DP_MVID_MVID_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_DP_MVID_MVID_MASK 0xFFFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_DP_NVID_NVID_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_MSA_DP_NVID_NVID_MASK 0xFFFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FSM_STATUS_STATE_VID_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FSM_STATUS_STATE_VID_MASK 0x300
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FSM_STATUS_STATE_DP_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FSM_STATUS_STATE_DP_MASK 0x3
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_LEVEL_LEVEL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_LEVEL_LEVEL_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AE1_OFFSET 7
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AE1_MASK 0x80
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AE1 0x80
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AF1_OFFSET 6
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AF1_MASK 0x40
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AF1 0x40
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AE0_OFFSET 5
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AE0_MASK 0x20
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AE0 0x20
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AF0_OFFSET 4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AF0_MASK 0x10
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_AF0 0x10
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_OVERFLOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_OVERFLOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_OVERFLOW 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_UNDERFLOW_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_UNDERFLOW_MASK 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_UNDERFLOW 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_FULL_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_FULL_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_FULL 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_EMPTY_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_EMPTY_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_STATUS_EMPTY 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_CONTROL0_AET0_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_CONTROL0_AET0_MASK 0xFFFF0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_CONTROL0_AFT0_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_CONTROL0_AFT0_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_CONTROL1_AET1_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_CONTROL1_AET1_MASK 0xFFFF0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_CONTROL1_AFT1_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_CONTROL1_AFT1_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_CONFIG_DEPTH_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_CS_CONFIG_DEPTH_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_LEVEL_LEVEL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_LEVEL_LEVEL_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_0_UNDERFLOW_OFFSET 11
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_0_UNDERFLOW_MASK 0x800
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_0_UNDERFLOW 0x800
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_1_UNDERFLOW_OFFSET 10
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_1_UNDERFLOW_MASK 0x400
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_1_UNDERFLOW 0x400
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_2_UNDERFLOW_OFFSET 9
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_2_UNDERFLOW_MASK 0x200
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_2_UNDERFLOW 0x200
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_3_UNDERFLOW_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_3_UNDERFLOW_MASK 0x100
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_SR_3_UNDERFLOW 0x100
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AE1_OFFSET 7
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AE1_MASK 0x80
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AE1 0x80
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AF1_OFFSET 6
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AF1_MASK 0x40
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AF1 0x40
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AE0_OFFSET 5
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AE0_MASK 0x20
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AE0 0x20
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AF0_OFFSET 4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AF0_MASK 0x10
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_AF0 0x10
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_OVERFLOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_OVERFLOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_OVERFLOW 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_UNDERFLOW_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_UNDERFLOW_MASK 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_UNDERFLOW 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_FULL_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_FULL_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_FULL 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_EMPTY_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_EMPTY_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_SR_STATUS_FIFO_0_EMPTY 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONTROL0_AET0_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONTROL0_AET0_MASK 0xFFFF0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONTROL0_AFT0_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONTROL0_AFT0_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONTROL1_AET1_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONTROL1_AET1_MASK 0xFFFF0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONTROL1_AFT1_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONTROL1_AFT1_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONTROL2_OFFSET_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONTROL2_OFFSET_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONFIG_DEPTH_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_PIX_CONFIG_DEPTH_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_OVERFLOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_OVERFLOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_OVERFLOW 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_UNDERFLOW_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_UNDERFLOW_MASK 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_UNDERFLOW 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_FULL_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_FULL_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_FULL 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_EMPTY_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_EMPTY_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_STATUS_EMPTY 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_OVERFLOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_OVERFLOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_OVERFLOW 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_UNDERFLOW_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_UNDERFLOW_MASK 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_UNDERFLOW 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_FULL_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_FULL_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_FULL 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_EMPTY_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_EMPTY_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_STATUS_EMPTY 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_CONFIG_DEPTH_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_CONFIG_DEPTH_MASK 0x7FF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_CONFIG_DEPTH_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_FIFO_SDP_TAG_CONFIG_DEPTH_MASK 0x1FF
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_SDP_CTRL_MAUD_SET_VALUE_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_SDP_CTRL_MAUD_SET_VALUE_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_SDP_CTRL_MAUD_METHOD_SEL_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_SDP_CTRL_MAUD_METHOD_SEL_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_SDP_CTRL_MAUD_METHOD_SEL 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_SDP_CTRL_AUDIOMUTE_FLAG_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_SDP_CTRL_AUDIOMUTE_FLAG_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_SDP_CTRL_AUDIOMUTE_FLAG 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_IDLE_PATTERN_DEBUG_CNT_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_IDLE_PATTERN_DEBUG_CNT_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_IDLE_PATTERN_DEBUG_CNT_RST_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_IDLE_PATTERN_DEBUG_CNT_RST_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_IDLE_PATTERN_DEBUG_CNT_RST 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_VBD_VBID_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_VBD_VBID_MASK 0xFF0000
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_VBD_MAUD_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_VBD_MAUD_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_VBD_MVID_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STREAM_GENERATOR_VBD_MVID_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_DECODER_ERROR_STATUS_HANDSHAKE_VFR_HANDSHAKE_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_DECODER_ERROR_STATUS_HANDSHAKE_VFR_HANDSHAKE_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_MAIN_DECODER_ERROR_STATUS_HANDSHAKE_CFR_HANDSHAKE_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_DECODER_ERROR_STATUS_HANDSHAKE_CFR_HANDSHAKE_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_DECODER_ERROR_STATUS_ERROR_ID_ERR_ID_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_DECODER_ERROR_STATUS_ERROR_ID_ERR_ID_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_MAIN_DECODER_ERROR_STATUS_ERROR_ID_ERR_FLAG_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_DECODER_ERROR_STATUS_ERROR_ID_ERR_FLAG_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_DECODER_ERROR_STATUS_ERROR_ID_ERR_FLAG 0x1
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_3_0_BYTE3_OFFSET 24
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_3_0_BYTE3_MASK 0xFF000000
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_3_0_BYTE2_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_3_0_BYTE2_MASK 0xFF0000
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_3_0_BYTE1_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_3_0_BYTE1_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_3_0_BYTE0_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_3_0_BYTE0_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_7_4_BYTE7_OFFSET 24
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_7_4_BYTE7_MASK 0xFF000000
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_7_4_BYTE6_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_7_4_BYTE6_MASK 0xFF0000
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_7_4_BYTE5_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_7_4_BYTE5_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_7_4_BYTE4_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_7_4_BYTE4_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_9_8_BYTE9_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_9_8_BYTE9_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_9_8_BYTE8_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_COMPLIANCE_CUSTOM_80BITS_9_8_BYTE8_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_LEVEL_WATERMARK_OFFSET 9
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_LEVEL_WATERMARK_MASK 0x200
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_LEVEL_WATERMARK 0x200
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_LEVEL_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_LEVEL_MASK 0x100
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_LEVEL 0x100
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_0_SR_UNDERFLOW_OFFSET 7
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_0_SR_UNDERFLOW_MASK 0x80
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_0_SR_UNDERFLOW 0x80
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_1_SR_UNDERFLOW_OFFSET 6
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_1_SR_UNDERFLOW_MASK 0x40
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_1_SR_UNDERFLOW 0x40
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_2_SR_UNDERFLOW_OFFSET 5
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_2_SR_UNDERFLOW_MASK 0x20
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_2_SR_UNDERFLOW 0x20
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_3_SR_UNDERFLOW_OFFSET 4
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_3_SR_UNDERFLOW_MASK 0x10
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_PIX_3_SR_UNDERFLOW 0x10
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_UNDERFLOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_UNDERFLOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_UNDERFLOW 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_OVERFLOW_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_OVERFLOW_MASK 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_OVERFLOW 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_EMPTY_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_EMPTY_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_EMPTY 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_FULL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_FULL_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_RD2CLR_CONFIG_FIFO_PIX_0_FULL 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_FULL_FIFO_PIX_0_FULL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_FULL_FIFO_PIX_0_FULL_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_EMPTY_FIFO_PIX_0_EMPTY_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_EMPTY_FIFO_PIX_0_EMPTY_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_OVERFLOW_FIFO_PIX_0_OVERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_OVERFLOW_FIFO_PIX_0_OVERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_UNDERFLOW_FIFO_PIX_0_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_UNDERFLOW_FIFO_PIX_0_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_PIX_0_SR_UNDERFLOW_PIX_0_SR_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_PIX_0_SR_UNDERFLOW_PIX_0_SR_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_PIX_1_SR_UNDERFLOW_PIX_1_SR_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_PIX_1_SR_UNDERFLOW_PIX_1_SR_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_PIX_2_SR_UNDERFLOW_PIX_2_SR_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_PIX_2_SR_UNDERFLOW_PIX_2_SR_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_PIX_3_SR_UNDERFLOW_PIX_3_SR_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_PIX_3_SR_UNDERFLOW_PIX_3_SR_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_LEVEL_FIFO_PIX_0_LEVEL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_LEVEL_FIFO_PIX_0_LEVEL_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_LEVEL_WATERMARK_FIFO_PIX_0_LEVEL_WATERMARK_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS0_FIFO_PIX_0_LEVEL_WATERMARK_FIFO_PIX_0_LEVEL_WATERMARK_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_SDP_PTP_PKT_SOP_IN_OFFSET 22
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_SDP_PTP_PKT_SOP_IN_MASK 0x400000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_SDP_PTP_PKT_SOP_IN 0x400000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_LEVEL_WATERMARK_OFFSET 21
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_LEVEL_WATERMARK_MASK 0x200000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_LEVEL_WATERMARK 0x200000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_LEVEL_OFFSET 20
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_LEVEL_MASK 0x100000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_LEVEL 0x100000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_UNDERFLOW_OFFSET 19
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_UNDERFLOW_MASK 0x80000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_UNDERFLOW 0x80000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_OVERFLOW_OFFSET 18
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_OVERFLOW_MASK 0x40000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_OVERFLOW 0x40000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_EMPTY_OFFSET 17
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_EMPTY_MASK 0x20000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_EMPTY 0x20000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_FULL_OFFSET 16
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_FULL_MASK 0x10000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_TAG_FULL 0x10000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_LEVEL_WATERMARK_OFFSET 15
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_LEVEL_WATERMARK_MASK 0x8000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_LEVEL_WATERMARK 0x8000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_LEVEL_OFFSET 14
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_LEVEL_MASK 0x4000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_LEVEL 0x4000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_UNDERFLOW_OFFSET 13
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_UNDERFLOW_MASK 0x2000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_UNDERFLOW 0x2000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_OVERFLOW_OFFSET 12
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_OVERFLOW_MASK 0x1000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_OVERFLOW 0x1000
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_EMPTY_OFFSET 11
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_EMPTY_MASK 0x800
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_EMPTY 0x800
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_FULL_OFFSET 10
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_FULL_MASK 0x400
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_SDP_FULL 0x400
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_LEVEL_WATERMARK_OFFSET 9
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_LEVEL_WATERMARK_MASK 0x200
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_LEVEL_WATERMARK 0x200
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_LEVEL_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_LEVEL_MASK 0x100
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_LEVEL 0x100
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AF1_OFFSET 7
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AF1_MASK 0x80
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AF1 0x80
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AF0_OFFSET 6
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AF0_MASK 0x40
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AF0 0x40
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AE1_OFFSET 5
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AE1_MASK 0x20
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AE1 0x20
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AE0_OFFSET 4
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AE0_MASK 0x10
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_AE0 0x10
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_UNDERFLOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_UNDERFLOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_UNDERFLOW 0x8
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_OVERFLOW_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_OVERFLOW_MASK 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_OVERFLOW 0x4
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_EMPTY_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_EMPTY_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_EMPTY 0x2
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_FULL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_FULL_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_RD2CLR_CONFIG_FIFO_CS_FULL 0x1
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_FULL_FIFO_CS_FULL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_FULL_FIFO_CS_FULL_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_EMPTY_FIFO_CS_EMPTY_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_EMPTY_FIFO_CS_EMPTY_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_OVERFLOW_FIFO_CS_OVERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_OVERFLOW_FIFO_CS_OVERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_UNDERFLOW_FIFO_CS_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_UNDERFLOW_FIFO_CS_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_AE0_FIFO_CS_AE0_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_AE0_FIFO_CS_AE0_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_AE1_FIFO_CS_AE1_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_AE1_FIFO_CS_AE1_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_AF0_FIFO_CS_AF0_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_AF0_FIFO_CS_AF0_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_AF1_FIFO_CS_AF1_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_AF1_FIFO_CS_AF1_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_LEVEL_FIFO_CS_LEVEL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_LEVEL_FIFO_CS_LEVEL_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_LEVEL_WATERMARK_FIFO_CS_LEVEL_WATERMARK_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_CS_LEVEL_WATERMARK_FIFO_CS_LEVEL_WATERMARK_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_FULL_FIFO_SDP_FULL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_FULL_FIFO_SDP_FULL_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_EMPTY_FIFO_SDP_EMPTY_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_EMPTY_FIFO_SDP_EMPTY_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_OVERFLOW_FIFO_SDP_OVERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_OVERFLOW_FIFO_SDP_OVERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_UNDERFLOW_FIFO_SDP_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_UNDERFLOW_FIFO_SDP_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_LEVEL_FIFO_SDP_LEVEL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_LEVEL_FIFO_SDP_LEVEL_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_LEVEL_WATERMARK_FIFO_SDP_LEVEL_WATERMARK_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_LEVEL_WATERMARK_FIFO_SDP_LEVEL_WATERMARK_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_FULL_FIFO_SDP_TAG_FULL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_FULL_FIFO_SDP_TAG_FULL_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_EMPTY_FIFO_SDP_TAG_EMPTY_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_EMPTY_FIFO_SDP_TAG_EMPTY_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_OVERFLOW_FIFO_SDP_TAG_OVERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_OVERFLOW_FIFO_SDP_TAG_OVERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_UNDERFLOW_FIFO_SDP_TAG_UNDERFLOW_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_UNDERFLOW_FIFO_SDP_TAG_UNDERFLOW_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_LEVEL_FIFO_SDP_TAG_LEVEL_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_LEVEL_FIFO_SDP_TAG_LEVEL_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_LEVEL_WATERMARK_FIFO_SDP_TAG_LEVEL_WATERMARK_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_FIFO_SDP_TAG_LEVEL_WATERMARK_FIFO_SDP_TAG_LEVEL_WATERMARK_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_SDP_PTP_PKT_SOP_IN_SDP_PTP_PKT_SOP_IN_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_STATS1_SDP_PTP_PKT_SOP_IN_SDP_PTP_PKT_SOP_IN_MASK 0xFF
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_MSA_DP_MVID_MEASURED_UPDATE_OFFSET 11
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_MSA_DP_MVID_MEASURED_UPDATE_MASK 0x800
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_MSA_DP_MVID_MEASURED_UPDATE 0x800
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIRST_IDLE_PATTERN_SENT_OFFSET 10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIRST_IDLE_PATTERN_SENT_MASK 0x400
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIRST_IDLE_PATTERN_SENT 0x400
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_DECODER_ERR_FLAG_OFFSET 9
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_DECODER_ERR_FLAG_MASK 0x200
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_DECODER_ERR_FLAG 0x200
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_PIX_0_UNDERFLOW_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_PIX_0_UNDERFLOW_MASK 0x100
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_PIX_0_UNDERFLOW 0x100
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_PIX_0_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_PIX_0_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_PIX_0_OVERFLOW 0x80
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_UNDERFLOW_OFFSET 6
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_UNDERFLOW_MASK 0x40
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_UNDERFLOW 0x40
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_OVERFLOW_OFFSET 5
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_OVERFLOW_MASK 0x20
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_OVERFLOW 0x20
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_TAG_UNDERFLOW_OFFSET 4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_TAG_UNDERFLOW_MASK 0x10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_TAG_UNDERFLOW 0x10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_TAG_OVERFLOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_TAG_OVERFLOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_SDP_TAG_OVERFLOW 0x8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_CS_UNDERFLOW_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_CS_UNDERFLOW_MASK 0x4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_CS_UNDERFLOW 0x4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_CS_OVERFLOW_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_CS_OVERFLOW_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_FIFO_CS_OVERFLOW 0x2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_VIDEO_STREAM_END_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_VIDEO_STREAM_END_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_ENABLE_VIDEO_STREAM_END 0x1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_MSA_DP_MVID_MEASURED_UPDATE_OFFSET 11
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_MSA_DP_MVID_MEASURED_UPDATE_MASK 0x800
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_MSA_DP_MVID_MEASURED_UPDATE 0x800
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIRST_IDLE_PATTERN_SENT_OFFSET 10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIRST_IDLE_PATTERN_SENT_MASK 0x400
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIRST_IDLE_PATTERN_SENT 0x400
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_DECODER_ERR_FLAG_OFFSET 9
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_DECODER_ERR_FLAG_MASK 0x200
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_DECODER_ERR_FLAG 0x200
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_PIX_0_UNDERFLOW_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_PIX_0_UNDERFLOW_MASK 0x100
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_PIX_0_UNDERFLOW 0x100
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_PIX_0_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_PIX_0_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_PIX_0_OVERFLOW 0x80
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_UNDERFLOW_OFFSET 6
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_UNDERFLOW_MASK 0x40
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_UNDERFLOW 0x40
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_OVERFLOW_OFFSET 5
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_OVERFLOW_MASK 0x20
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_OVERFLOW 0x20
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_TAG_UNDERFLOW_OFFSET 4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_TAG_UNDERFLOW_MASK 0x10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_TAG_UNDERFLOW 0x10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_TAG_OVERFLOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_TAG_OVERFLOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_SDP_TAG_OVERFLOW 0x8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_CS_UNDERFLOW_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_CS_UNDERFLOW_MASK 0x4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_CS_UNDERFLOW 0x4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_CS_OVERFLOW_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_CS_OVERFLOW_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_FIFO_CS_OVERFLOW 0x2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_VIDEO_STREAM_END_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_VIDEO_STREAM_END_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_VIDEO_STREAM_END 0x1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_MSA_DP_MVID_MEASURED_UPDATE_OFFSET 11
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_MSA_DP_MVID_MEASURED_UPDATE_MASK 0x800
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_MSA_DP_MVID_MEASURED_UPDATE 0x800
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIRST_IDLE_PATTERN_SENT_OFFSET 10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIRST_IDLE_PATTERN_SENT_MASK 0x400
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIRST_IDLE_PATTERN_SENT 0x400
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_DECODER_ERR_FLAG_OFFSET 9
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_DECODER_ERR_FLAG_MASK 0x200
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_DECODER_ERR_FLAG 0x200
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_PIX_0_UNDERFLOW_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_PIX_0_UNDERFLOW_MASK 0x100
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_PIX_0_UNDERFLOW 0x100
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_PIX_0_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_PIX_0_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_PIX_0_OVERFLOW 0x80
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_UNDERFLOW_OFFSET 6
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_UNDERFLOW_MASK 0x40
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_UNDERFLOW 0x40
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_OVERFLOW_OFFSET 5
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_OVERFLOW_MASK 0x20
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_OVERFLOW 0x20
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_TAG_UNDERFLOW_OFFSET 4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_TAG_UNDERFLOW_MASK 0x10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_TAG_UNDERFLOW 0x10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_TAG_OVERFLOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_TAG_OVERFLOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_SDP_TAG_OVERFLOW 0x8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_CS_UNDERFLOW_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_CS_UNDERFLOW_MASK 0x4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_CS_UNDERFLOW 0x4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_CS_OVERFLOW_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_CS_OVERFLOW_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_FIFO_CS_OVERFLOW 0x2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_VIDEO_STREAM_END_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_VIDEO_STREAM_END_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_PENDING_IRQ_VIDEO_STREAM_END 0x1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_MSA_DP_MVID_MEASURED_UPDATE_OFFSET 11
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_MSA_DP_MVID_MEASURED_UPDATE_MASK 0x800
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_MSA_DP_MVID_MEASURED_UPDATE 0x800
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIRST_IDLE_PATTERN_SENT_OFFSET 10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIRST_IDLE_PATTERN_SENT_MASK 0x400
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIRST_IDLE_PATTERN_SENT 0x400
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_DECODER_ERR_FLAG_OFFSET 9
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_DECODER_ERR_FLAG_MASK 0x200
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_DECODER_ERR_FLAG 0x200
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_PIX_0_UNDERFLOW_OFFSET 8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_PIX_0_UNDERFLOW_MASK 0x100
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_PIX_0_UNDERFLOW 0x100
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_PIX_0_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_PIX_0_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_PIX_0_OVERFLOW 0x80
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_UNDERFLOW_OFFSET 6
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_UNDERFLOW_MASK 0x40
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_UNDERFLOW 0x40
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_OVERFLOW_OFFSET 5
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_OVERFLOW_MASK 0x20
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_OVERFLOW 0x20
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_TAG_UNDERFLOW_OFFSET 4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_TAG_UNDERFLOW_MASK 0x10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_TAG_UNDERFLOW 0x10
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_TAG_OVERFLOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_TAG_OVERFLOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_SDP_TAG_OVERFLOW 0x8
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_CS_UNDERFLOW_OFFSET 2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_CS_UNDERFLOW_MASK 0x4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_CS_UNDERFLOW 0x4
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_CS_OVERFLOW_OFFSET 1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_CS_OVERFLOW_MASK 0x2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_FIFO_CS_OVERFLOW 0x2
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_VIDEO_STREAM_END_OFFSET 0
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_VIDEO_STREAM_END_MASK 0x1
#define BB_CHIP_DP_SOURCE_MAIN_IRQ_RAW_VIDEO_STREAM_END 0x1
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_CONFIG_TICO_D_CONFIG_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_CONFIG_TICO_D_CONFIG_MASK 0x3
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_WIDTH_TICO_D_WIDTH_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_WIDTH_TICO_D_WIDTH_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_HEIGHT_TICO_D_HEIGHT_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_HEIGHT_TICO_D_HEIGHT_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_COMP_TICO_D_COMP_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_COMP_TICO_D_COMP_MASK 0x3
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_MODE_TICO_D_MODE_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_MODE_TICO_D_MODE_MASK 0x3
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_HLVLS_TICO_D_HLVLS_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_HLVLS_TICO_D_HLVLS_MASK 0x7
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_VLD_TICO_D_VLD_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_VLD_TICO_D_VLD_MASK 0x1
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_VLD_TICO_D_VLD 0x1
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_NBR_TICO_D_NBR_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_NBR_TICO_D_NBR_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_BGT_TICO_D_BGT_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_BGT_TICO_D_BGT_MASK 0xFFFFFFFF
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_VID_DEPTH_TICO_D_VID_DEPTH_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_VID_DEPTH_TICO_D_VID_DEPTH_MASK 0xF
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_PLAY_MODE_TICO_D_PLAY_MODE_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_PLAY_MODE_TICO_D_PLAY_MODE_MASK 0x1
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_PLAY_MODE_TICO_D_PLAY_MODE 0x1
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_PROFILE_TICO_D_PROFILE_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_PROFILE_TICO_D_PROFILE_MASK 0x3
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_LINE_DURATION_TICO_D_LINE_DURATION_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_LINE_DURATION_TICO_D_LINE_DURATION_MASK 0xFFFF
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_IMG_SIZE_TICO_D_LINE_DURATION_OFFSET 0
#define BB_CHIP_DP_SOURCE_TICO_TICO_D_IMG_SIZE_TICO_D_LINE_DURATION_MASK 0xFFFFFFFF
#define BB_CHIP_DP_SOURCE_AUX_HPD_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_DP_SOURCE_AUX_HPD_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_DP_SOURCE_AUX_HPD_VERSION_MINOR_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_AUX_HPD_VERSION_PATCH_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_DEBOUNCE_OFFSET 31
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_DEBOUNCE_MASK 0x80000000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_DEBOUNCE 0x80000000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_DEBOUNCE_OFFSET 30
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_DEBOUNCE_MASK 0x40000000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_DEBOUNCE 0x40000000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_OFFSET 29
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN_MASK 0x20000000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_P_IN 0x20000000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_OFFSET 28
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN_MASK 0x10000000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_AUX_SENSE_N_IN 0x10000000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_SENT_DEFER_CNT_OFFSET 24
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_SENT_DEFER_CNT_MASK 0xF000000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_RESPONSE_TIMEOUT_CNT_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_STATUS_RESPONSE_TIMEOUT_CNT_MASK 0x1FFFF
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_CTRL1_REPLY_TIMER_OFFSET 19
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_CTRL1_REPLY_TIMER_MASK 0xFFF80000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_CTRL1_RESPONSE_TIMER_OFFSET 3
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_CTRL1_RESPONSE_TIMER_MASK 0xFFF8
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_CTRL2_PRE_CHARGE_LENGTH_OFFSET 16
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_CTRL2_PRE_CHARGE_LENGTH_MASK 0x1F0000
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_CTRL3_DP_AUX_HPD_CLK_FREQ_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_CTRL3_DP_AUX_HPD_CLK_FREQ_MASK 0xFF
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_RX_RX_FLAG_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_RX_RX_FLAG_MASK 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_RX_RX_FLAG 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_RX_RX_DATA_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_RX_RX_DATA_MASK 0xFF
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_TX_GO_BIT_OFFSET 9
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_TX_GO_BIT_MASK 0x200
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_TX_GO_BIT 0x200
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_TX_TX_FLAG_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_TX_TX_FLAG_MASK 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_TX_TX_FLAG 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_TX_TX_DATA_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_AUX_TX_TX_DATA_MASK 0xFF
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_STATUS_HPD_LINE_OUT_OFFSET 2
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_STATUS_HPD_LINE_OUT_MASK 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_STATUS_HPD_LINE_OUT 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_STATUS_HPD_LINE_IN_DEBOUNCE_OFFSET 1
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_STATUS_HPD_LINE_IN_DEBOUNCE_MASK 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_STATUS_HPD_LINE_IN_DEBOUNCE 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_STATUS_HPD_LINE_IN_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_STATUS_HPD_LINE_IN_MASK 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_STATUS_HPD_LINE_IN 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_LOW_OFFSET 3
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_LOW_MASK 0x8
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_LOW 0x8
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_HIGH_OFFSET 2
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_HIGH_MASK 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_HIGH 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_REPLUG_OFFSET 1
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_REPLUG_MASK 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_REPLUG 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_IRQ_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_IRQ_MASK 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_CTRL_HPD_IRQ 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER1_HPD_IRQ_TO_IRQ_MIN_GAP_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER1_HPD_IRQ_TO_IRQ_MIN_GAP_MASK 0x3F00
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER1_HPD_IRQ_PULSE_WIDTH_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER1_HPD_IRQ_PULSE_WIDTH_MASK 0xF
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER2_HPD_REPLUG_PULSE_WIDTH_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER2_HPD_REPLUG_PULSE_WIDTH_MASK 0xFF
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER3_HPD_IRQ_RISING_DETECT_OFFSET 16
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER3_HPD_IRQ_RISING_DETECT_MASK 0x3F0000
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER3_HPD_IRQ_FALLING_DETECT_OFFSET 12
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER3_HPD_IRQ_FALLING_DETECT_MASK 0xF000
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER3_HPD_AUX_DEBOUNCE_PERIOD_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_TIMER3_HPD_AUX_DEBOUNCE_PERIOD_MASK 0x7FF
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_RISE_DET_CNT_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_RISE_DET_CNT_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_RISE_DET_RST_OFFSET 4
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_RISE_DET_RST_MASK 0x10
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_RISE_DET_RST 0x10
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_RISE_DET_CTRL_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_RISE_DET_CTRL_MASK 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_RISE_DET_CTRL 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_FALL_DET_CNT_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_FALL_DET_CNT_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_FALL_DET_RST_OFFSET 4
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_FALL_DET_RST_MASK 0x10
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_FALL_DET_RST 0x10
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_FALL_DET_CTRL_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_FALL_DET_CTRL_MASK 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_HPD_FALL_DET_CTRL 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_CONNECT_DET_CNT_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_CONNECT_DET_CNT_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_CONNECT_DET_RST_OFFSET 4
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_CONNECT_DET_RST_MASK 0x10
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_CONNECT_DET_RST 0x10
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_CONNECT_DET_CTRL_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_CONNECT_DET_CTRL_MASK 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_CONNECT_DET_CTRL 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CNT_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CNT_MASK 0xFF00
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_DISCONNECT_DET_RST_OFFSET 4
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_DISCONNECT_DET_RST_MASK 0x10
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_DISCONNECT_DET_RST 0x10
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CTRL_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CTRL_MASK 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_DP_SOURCE_DISCONNECT_DET_CTRL 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET_OFFSET 17
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET 0x20000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET 0x10000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET_OFFSET 15
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET_MASK 0x8000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET 0x8000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET_OFFSET 14
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET_MASK 0x4000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET 0x4000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED_OFFSET 13
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED_MASK 0x2000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED 0x2000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_OFFSET 12
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_MASK 0x1000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED 0x1000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT_OFFSET 11
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT_MASK 0x800
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT 0x800
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_CONNECT_OFFSET 10
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_CONNECT_MASK 0x400
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_CONNECT 0x400
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_IRQ_OFFSET 9
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_IRQ_MASK 0x200
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_IRQ 0x200
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_REPLUG_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_REPLUG_MASK 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_REPLUG 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW 0x80
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT_OFFSET 3
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT_MASK 0x8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT 0x8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DEFER_SENT_OFFSET 2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DEFER_SENT_MASK 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DEFER_SENT 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR_OFFSET 1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR_MASK 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_CONNECT_DET_OFFSET 17
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_CONNECT_DET 0x20000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_DISCONNECT_DET 0x10000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_RISE_DET_OFFSET 15
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_RISE_DET_MASK 0x8000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_RISE_DET 0x8000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_FALL_DET_OFFSET 14
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_FALL_DET_MASK 0x4000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_FALL_DET 0x4000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_POWERED_OFFSET 13
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_POWERED_MASK 0x2000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_POWERED 0x2000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_DETECTED_OFFSET 12
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_DETECTED_MASK 0x1000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DP_SOURCE_DETECTED 0x1000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT_OFFSET 11
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT_MASK 0x800
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT 0x800
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_CONNECT_OFFSET 10
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_CONNECT_MASK 0x400
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_CONNECT 0x400
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_IRQ_OFFSET 9
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_IRQ_MASK 0x200
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_IRQ 0x200
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_REPLUG_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_REPLUG_MASK 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_HPD_REPLUG 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW 0x80
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT_OFFSET 3
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT_MASK 0x8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT 0x8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DEFER_SENT_OFFSET 2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DEFER_SENT_MASK 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_DEFER_SENT 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR_OFFSET 1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR_MASK 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_CONNECT_DET_OFFSET 17
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_CONNECT_DET 0x20000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DISCONNECT_DET 0x10000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_RISE_DET_OFFSET 15
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_RISE_DET_MASK 0x8000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_RISE_DET 0x8000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_FALL_DET_OFFSET 14
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_FALL_DET_MASK 0x4000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_FALL_DET 0x4000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_POWERED_OFFSET 13
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_POWERED_MASK 0x2000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_POWERED 0x2000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DETECTED_OFFSET 12
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DETECTED_MASK 0x1000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DP_SOURCE_DETECTED 0x1000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_DISCONNECT_OFFSET 11
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_DISCONNECT_MASK 0x800
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_DISCONNECT 0x800
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_CONNECT_OFFSET 10
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_CONNECT_MASK 0x400
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_CONNECT 0x400
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_IRQ_OFFSET 9
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_IRQ_MASK 0x200
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_IRQ 0x200
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_REPLUG_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_REPLUG_MASK 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_HPD_REPLUG 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_OVERFLOW 0x80
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_REPLY_TIMEOUT_OFFSET 3
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_REPLY_TIMEOUT_MASK 0x8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_REPLY_TIMEOUT 0x8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DEFER_SENT_OFFSET 2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DEFER_SENT_MASK 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_DEFER_SENT 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_GO_BIT_CLEAR_OFFSET 1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_GO_BIT_CLEAR_MASK 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_GO_BIT_CLEAR 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_IRQ_RX_FIFO_PKT_RECEIVED 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_CONNECT_DET_OFFSET 17
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_CONNECT_DET_MASK 0x20000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_CONNECT_DET 0x20000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_DISCONNECT_DET_OFFSET 16
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_DISCONNECT_DET_MASK 0x10000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_DISCONNECT_DET 0x10000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_RISE_DET_OFFSET 15
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_RISE_DET_MASK 0x8000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_RISE_DET 0x8000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_FALL_DET_OFFSET 14
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_FALL_DET_MASK 0x4000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_FALL_DET 0x4000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_POWERED_OFFSET 13
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_POWERED_MASK 0x2000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_POWERED 0x2000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_DETECTED_OFFSET 12
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_DETECTED_MASK 0x1000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DP_SOURCE_DETECTED 0x1000
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_DISCONNECT_OFFSET 11
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_DISCONNECT_MASK 0x800
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_DISCONNECT 0x800
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_CONNECT_OFFSET 10
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_CONNECT_MASK 0x400
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_CONNECT 0x400
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_IRQ_OFFSET 9
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_IRQ_MASK 0x200
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_IRQ 0x200
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_REPLUG_OFFSET 8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_REPLUG_MASK 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_HPD_REPLUG 0x100
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_RX_FIFO_OVERFLOW_OFFSET 7
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_RX_FIFO_OVERFLOW_MASK 0x80
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_RX_FIFO_OVERFLOW 0x80
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_REPLY_TIMEOUT_OFFSET 3
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_REPLY_TIMEOUT_MASK 0x8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_REPLY_TIMEOUT 0x8
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DEFER_SENT_OFFSET 2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DEFER_SENT_MASK 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_DEFER_SENT 0x4
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_GO_BIT_CLEAR_OFFSET 1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_GO_BIT_CLEAR_MASK 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_GO_BIT_CLEAR 0x2
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_RX_FIFO_PKT_RECEIVED_OFFSET 0
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_RX_FIFO_PKT_RECEIVED_MASK 0x1
#define BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_RAW_RX_FIFO_PKT_RECEIVED 0x1
#define BB_CHIP_XUSB3_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_XUSB3_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_XUSB3_VERSION_MINOR_OFFSET 8
#define BB_CHIP_XUSB3_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_XUSB3_VERSION_PATCH_OFFSET 0
#define BB_CHIP_XUSB3_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_XUSB3_CONFIGURATION_RX_BUFF_NEAR_FULL_LIMIT_OFFSET 22
#define BB_CHIP_XUSB3_CONFIGURATION_RX_BUFF_NEAR_FULL_LIMIT_MASK 0x3FC00000
#define BB_CHIP_XUSB3_CONFIGURATION_UPP_BYPASS_OFFSET 21
#define BB_CHIP_XUSB3_CONFIGURATION_UPP_BYPASS_MASK 0x200000
#define BB_CHIP_XUSB3_CONFIGURATION_UPP_BYPASS 0x200000
#define BB_CHIP_XUSB3_CONFIGURATION_UPP_IS_PRESENT_OFFSET 20
#define BB_CHIP_XUSB3_CONFIGURATION_UPP_IS_PRESENT_MASK 0x100000
#define BB_CHIP_XUSB3_CONFIGURATION_UPP_IS_PRESENT 0x100000
#define BB_CHIP_XUSB3_CONFIGURATION_SPLIT_DP_WAIT_TIME_OFFSET 4
#define BB_CHIP_XUSB3_CONFIGURATION_SPLIT_DP_WAIT_TIME_MASK 0xFFFF0
#define BB_CHIP_XUSB3_CONFIGURATION_SPLIT_DP_MODE_OFFSET 3
#define BB_CHIP_XUSB3_CONFIGURATION_SPLIT_DP_MODE_MASK 0x8
#define BB_CHIP_XUSB3_CONFIGURATION_SPLIT_DP_MODE 0x8
#define BB_CHIP_XUSB3_CONFIGURATION_ALLOW_RX_BUFF_FILL_OFFSET 2
#define BB_CHIP_XUSB3_CONFIGURATION_ALLOW_RX_BUFF_FILL_MASK 0x4
#define BB_CHIP_XUSB3_CONFIGURATION_ALLOW_RX_BUFF_FILL 0x4
#define BB_CHIP_XUSB3_CONFIGURATION_DROP_ITP_PKTS_OFFSET 1
#define BB_CHIP_XUSB3_CONFIGURATION_DROP_ITP_PKTS_MASK 0x2
#define BB_CHIP_XUSB3_CONFIGURATION_DROP_ITP_PKTS 0x2
#define BB_CHIP_XUSB3_CONFIGURATION_UPSTREAM_PORT_OFFSET 0
#define BB_CHIP_XUSB3_CONFIGURATION_UPSTREAM_PORT_MASK 0x1
#define BB_CHIP_XUSB3_CONFIGURATION_UPSTREAM_PORT 0x1
#define BB_CHIP_XUSB3_CONTROL_REMOVE_CRDTS_OFFSET 0
#define BB_CHIP_XUSB3_CONTROL_REMOVE_CRDTS_MASK 0x1
#define BB_CHIP_XUSB3_CONTROL_REMOVE_CRDTS 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_VERSION_MINOR_OFFSET 8
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_VERSION_PATCH_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_XUSB3_RX_PARTNER_FIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_NOT_RDY_PKT_DRP_OFFSET 12
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_NOT_RDY_PKT_DRP_MASK 0x1000
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_NOT_RDY_PKT_DRP 0x1000
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_TIMEDOUT_2JOIN_DPP_OFFSET 11
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_TIMEDOUT_2JOIN_DPP_MASK 0x800
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_TIMEDOUT_2JOIN_DPP 0x800
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_RCVD_LONE_DPH_OFFSET 10
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_RCVD_LONE_DPH_MASK 0x400
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_RCVD_LONE_DPH 0x400
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_DROP_LONE_DPP_OFFSET 9
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_DROP_LONE_DPP_MASK 0x200
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_DROP_LONE_DPP 0x200
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_DWN_STREAM_BUSY_DRP_OFFSET 8
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_DWN_STREAM_BUSY_DRP_MASK 0x100
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_DWN_STREAM_BUSY_DRP 0x100
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_UNKNOWN_PKT_DRP_OFFSET 7
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_UNKNOWN_PKT_DRP_MASK 0x80
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_UNKNOWN_PKT_DRP 0x80
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_LINK_IN_EOP_OFFSET 6
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_LINK_IN_EOP_MASK 0x40
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_LINK_IN_EOP 0x40
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_LINK_IN_SOP_OFFSET 5
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_LINK_IN_SOP_MASK 0x20
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_LINK_IN_SOP 0x20
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_TO_LINK_OUT_EOP_OFFSET 4
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_TO_LINK_OUT_EOP_MASK 0x10
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_TO_LINK_OUT_EOP 0x10
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_TO_LINK_OUT_SOP_OFFSET 3
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_TO_LINK_OUT_SOP_MASK 0x8
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_TO_LINK_OUT_SOP 0x8
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_PHY_IN_EOP_OFFSET 2
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_PHY_IN_EOP_MASK 0x4
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_PHY_IN_EOP 0x4
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_PHY_IN_SOP_OFFSET 1
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_PHY_IN_SOP_MASK 0x2
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_FROM_PHY_IN_SOP 0x2
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_LINK_PARTNER_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_LINK_PARTNER_PTP_VIOLATED_MASK 0x1
#define BB_CHIP_XUSB3_STATS0_RD2CLR_CONFIG_LINK_PARTNER_PTP_VIOLATED 0x1
#define BB_CHIP_XUSB3_STATS0_LINK_PARTNER_PTP_VIOLATED_LINK_PARTNER_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_LINK_PARTNER_PTP_VIOLATED_LINK_PARTNER_PTP_VIOLATED_MASK 0xFF
#define BB_CHIP_XUSB3_STATS0_FROM_PHY_IN_SOP_FROM_PHY_IN_SOP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_FROM_PHY_IN_SOP_FROM_PHY_IN_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_XUSB3_STATS0_FROM_PHY_IN_EOP_FROM_PHY_IN_EOP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_FROM_PHY_IN_EOP_FROM_PHY_IN_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_XUSB3_STATS0_TO_LINK_OUT_SOP_TO_LINK_OUT_SOP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_TO_LINK_OUT_SOP_TO_LINK_OUT_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_XUSB3_STATS0_TO_LINK_OUT_EOP_TO_LINK_OUT_EOP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_TO_LINK_OUT_EOP_TO_LINK_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_XUSB3_STATS0_FROM_LINK_IN_SOP_FROM_LINK_IN_SOP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_FROM_LINK_IN_SOP_FROM_LINK_IN_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_XUSB3_STATS0_FROM_LINK_IN_EOP_FROM_LINK_IN_EOP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_FROM_LINK_IN_EOP_FROM_LINK_IN_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_XUSB3_STATS0_UNKNOWN_PKT_DRP_UNKNOWN_PKT_DRP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_UNKNOWN_PKT_DRP_UNKNOWN_PKT_DRP_MASK 0xFFFF
#define BB_CHIP_XUSB3_STATS0_DWN_STREAM_BUSY_DRP_DWN_STREAM_BUSY_DRP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_DWN_STREAM_BUSY_DRP_DWN_STREAM_BUSY_DRP_MASK 0xFFFF
#define BB_CHIP_XUSB3_STATS0_DROP_LONE_DPP_DROP_LONE_DPP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_DROP_LONE_DPP_DROP_LONE_DPP_MASK 0xFFFF
#define BB_CHIP_XUSB3_STATS0_RCVD_LONE_DPH_RCVD_LONE_DPH_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_RCVD_LONE_DPH_RCVD_LONE_DPH_MASK 0xFFFF
#define BB_CHIP_XUSB3_STATS0_TIMEDOUT_2JOIN_DPP_TIMEDOUT_2JOIN_DPP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_TIMEDOUT_2JOIN_DPP_TIMEDOUT_2JOIN_DPP_MASK 0xFFFF
#define BB_CHIP_XUSB3_STATS0_NOT_RDY_PKT_DRP_NOT_RDY_PKT_DRP_OFFSET 0
#define BB_CHIP_XUSB3_STATS0_NOT_RDY_PKT_DRP_NOT_RDY_PKT_DRP_MASK 0xFFFF
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_VERSION_MINOR_OFFSET 8
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_VERSION_PATCH_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_OFFSET 1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_MASK 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_MASK 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_OFFSET 16
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_MASK 0xF0000
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_CONFIG0_MAX_CYCLES_MAX_CYCLES_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_CONFIG0_MAX_CYCLES_MAX_CYCLES_MASK 0xFFFF
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR 0x4
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_MASK 0xFFFF
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_MASK 0xFFFF
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_MASK 0xFFFF
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_ENABLE_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_ENABLE_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_ENABLE_MAX_CYCLE_ERR 0x4
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_EOP_ERR 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_SOP_ERR 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_MAX_CYCLE_ERR 0x4
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_EOP_ERR 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_SOP_ERR 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR 0x4
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_EOP_ERR 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_SOP_ERR 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_RAW_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_RAW_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_RAW_MAX_CYCLE_ERR 0x4
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_EOP_ERR 0x2
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_XUSB3_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_SOP_ERR 0x1
#define BB_CHIP_XUSB3_BUFF_2ULP_CONTROL_CLR_OFFSET 0
#define BB_CHIP_XUSB3_BUFF_2ULP_CONTROL_CLR_MASK 0x1
#define BB_CHIP_XUSB3_BUFF_2ULP_CONTROL_CLR 0x1
#define BB_CHIP_XUSB3_BUFF_2ULP_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_XUSB3_BUFF_2ULP_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_XUSB3_BUFF_2ULP_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_XUSB3_BUFF_2ULP_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_XUSB3_BUFF_2ULP_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_XUSB3_BUFF_2ULP_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_XUSB3_BUFF_2ULP_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_XUSB3_BUFF_2ULP_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_XUSB3_BUFF_2ULP_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_XUSB3_BUFF_2ULP_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_XUSB3_BUFF_2UPP_CONTROL_CLR_OFFSET 0
#define BB_CHIP_XUSB3_BUFF_2UPP_CONTROL_CLR_MASK 0x1
#define BB_CHIP_XUSB3_BUFF_2UPP_CONTROL_CLR 0x1
#define BB_CHIP_XUSB3_BUFF_2UPP_STATS0_RD2CLR_CONFIG_PFIFO_SCOUNT_OFFSET 1
#define BB_CHIP_XUSB3_BUFF_2UPP_STATS0_RD2CLR_CONFIG_PFIFO_SCOUNT_MASK 0x2
#define BB_CHIP_XUSB3_BUFF_2UPP_STATS0_RD2CLR_CONFIG_PFIFO_SCOUNT 0x2
#define BB_CHIP_XUSB3_BUFF_2UPP_STATS0_RD2CLR_CONFIG_NFIFO_SCOUNT_OFFSET 0
#define BB_CHIP_XUSB3_BUFF_2UPP_STATS0_RD2CLR_CONFIG_NFIFO_SCOUNT_MASK 0x1
#define BB_CHIP_XUSB3_BUFF_2UPP_STATS0_RD2CLR_CONFIG_NFIFO_SCOUNT 0x1
#define BB_CHIP_XUSB3_BUFF_2UPP_STATS0_NFIFO_SCOUNT_NFIFO_SCOUNT_OFFSET 0
#define BB_CHIP_XUSB3_BUFF_2UPP_STATS0_NFIFO_SCOUNT_NFIFO_SCOUNT_MASK 0xFFFF
#define BB_CHIP_XUSB3_BUFF_2UPP_STATS0_PFIFO_SCOUNT_PFIFO_SCOUNT_OFFSET 0
#define BB_CHIP_XUSB3_BUFF_2UPP_STATS0_PFIFO_SCOUNT_PFIFO_SCOUNT_MASK 0xFFFF
#define BB_CHIP_XUSB3_IRQ0_ENABLE_LINK_PARTNER_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_XUSB3_IRQ0_ENABLE_LINK_PARTNER_PTP_VIOLATED_MASK 0x1
#define BB_CHIP_XUSB3_IRQ0_ENABLE_LINK_PARTNER_PTP_VIOLATED 0x1
#define BB_CHIP_XUSB3_IRQ0_PENDING_LINK_PARTNER_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_XUSB3_IRQ0_PENDING_LINK_PARTNER_PTP_VIOLATED_MASK 0x1
#define BB_CHIP_XUSB3_IRQ0_PENDING_LINK_PARTNER_PTP_VIOLATED 0x1
#define BB_CHIP_XUSB3_IRQ0_PENDING_IRQ_LINK_PARTNER_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_XUSB3_IRQ0_PENDING_IRQ_LINK_PARTNER_PTP_VIOLATED_MASK 0x1
#define BB_CHIP_XUSB3_IRQ0_PENDING_IRQ_LINK_PARTNER_PTP_VIOLATED 0x1
#define BB_CHIP_XUSB3_IRQ0_RAW_LINK_PARTNER_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_XUSB3_IRQ0_RAW_LINK_PARTNER_PTP_VIOLATED_MASK 0x1
#define BB_CHIP_XUSB3_IRQ0_RAW_LINK_PARTNER_PTP_VIOLATED 0x1
#define BB_CHIP_UPP_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_UPP_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_UPP_VERSION_MINOR_OFFSET 8
#define BB_CHIP_UPP_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_UPP_VERSION_PATCH_OFFSET 0
#define BB_CHIP_UPP_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_UPP_CONFIG0_PING_NON_RSPNS_CNT_OFFSET 16
#define BB_CHIP_UPP_CONFIG0_PING_NON_RSPNS_CNT_MASK 0xF0000
#define BB_CHIP_UPP_CONFIG0_DP_MAX_NUMB_CNT_OFFSET 9
#define BB_CHIP_UPP_CONFIG0_DP_MAX_NUMB_CNT_MASK 0xFE00
#define BB_CHIP_UPP_CONFIG0_DP_MAX_TIME_CNT_OFFSET 0
#define BB_CHIP_UPP_CONFIG0_DP_MAX_TIME_CNT_MASK 0x1FF
#define BB_CHIP_UPP_CONTROL_LIMIT_NUM_PINGS_SNT_OFFSET 30
#define BB_CHIP_UPP_CONTROL_LIMIT_NUM_PINGS_SNT_MASK 0x40000000
#define BB_CHIP_UPP_CONTROL_LIMIT_NUM_PINGS_SNT 0x40000000
#define BB_CHIP_UPP_CONTROL_ISO_DEV_NON_RSPNS_CNT_OFFSET 26
#define BB_CHIP_UPP_CONTROL_ISO_DEV_NON_RSPNS_CNT_MASK 0x3C000000
#define BB_CHIP_UPP_CONTROL_LEX_BUFF_MAX_CNT_OFFSET 20
#define BB_CHIP_UPP_CONTROL_LEX_BUFF_MAX_CNT_MASK 0x3F00000
#define BB_CHIP_UPP_CONTROL_DISABLE_ITP_DELTA_OFFSET 19
#define BB_CHIP_UPP_CONTROL_DISABLE_ITP_DELTA_MASK 0x80000
#define BB_CHIP_UPP_CONTROL_DISABLE_ITP_DELTA 0x80000
#define BB_CHIP_UPP_CONTROL_MAX_ITP_DEVIATION_2FIX_OFFSET 9
#define BB_CHIP_UPP_CONTROL_MAX_ITP_DEVIATION_2FIX_MASK 0x7FE00
#define BB_CHIP_UPP_CONTROL_LIMIT_MAX_BURST_OFFSET 8
#define BB_CHIP_UPP_CONTROL_LIMIT_MAX_BURST_MASK 0x100
#define BB_CHIP_UPP_CONTROL_LIMIT_MAX_BURST 0x100
#define BB_CHIP_UPP_CONTROL_BULK_TERM_EN_OFFSET 7
#define BB_CHIP_UPP_CONTROL_BULK_TERM_EN_MASK 0x80
#define BB_CHIP_UPP_CONTROL_BULK_TERM_EN 0x80
#define BB_CHIP_UPP_CONTROL_PING_TERM_EN_OFFSET 6
#define BB_CHIP_UPP_CONTROL_PING_TERM_EN_MASK 0x40
#define BB_CHIP_UPP_CONTROL_PING_TERM_EN 0x40
#define BB_CHIP_UPP_CONTROL_CTRL_TRFR_INT_MODE_OFFSET 5
#define BB_CHIP_UPP_CONTROL_CTRL_TRFR_INT_MODE_MASK 0x20
#define BB_CHIP_UPP_CONTROL_CTRL_TRFR_INT_MODE 0x20
#define BB_CHIP_UPP_CONTROL_INIT_EPT_OFFSET 4
#define BB_CHIP_UPP_CONTROL_INIT_EPT_MASK 0x10
#define BB_CHIP_UPP_CONTROL_INIT_EPT 0x10
#define BB_CHIP_UPP_CONTROL_ITP_GEN_OFFSET 3
#define BB_CHIP_UPP_CONTROL_ITP_GEN_MASK 0x8
#define BB_CHIP_UPP_CONTROL_ITP_GEN 0x8
#define BB_CHIP_UPP_CONTROL_ITP_MANAGER_EN_OFFSET 2
#define BB_CHIP_UPP_CONTROL_ITP_MANAGER_EN_MASK 0x4
#define BB_CHIP_UPP_CONTROL_ITP_MANAGER_EN 0x4
#define BB_CHIP_UPP_CONTROL_CTRL_MANAGER_EN_OFFSET 1
#define BB_CHIP_UPP_CONTROL_CTRL_MANAGER_EN_MASK 0x2
#define BB_CHIP_UPP_CONTROL_CTRL_MANAGER_EN 0x2
#define BB_CHIP_UPP_CONTROL_CLR_CTRL_TRFR_MGR_OFFSET 0
#define BB_CHIP_UPP_CONTROL_CLR_CTRL_TRFR_MGR_MASK 0x1
#define BB_CHIP_UPP_CONTROL_CLR_CTRL_TRFR_MGR 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_UPP_ID_MGR_FIFO_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_UPP_ID_MGR_FIFO_VERSION_MINOR_OFFSET 8
#define BB_CHIP_UPP_ID_MGR_FIFO_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_UPP_ID_MGR_FIFO_VERSION_PATCH_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ID_MGR_FIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_VERSION_MINOR_OFFSET 8
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_VERSION_PATCH_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_0_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_VERSION_MINOR_OFFSET 8
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_VERSION_PATCH_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_1_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_VERSION_MINOR_OFFSET 8
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_VERSION_PATCH_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_2_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_VERSION_MINOR_OFFSET 8
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_VERSION_PATCH_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ISO_LEX_FIFO_3_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_REX_FIFO_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_UPP_ISO_REX_FIFO_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_UPP_ISO_REX_FIFO_VERSION_MINOR_OFFSET 8
#define BB_CHIP_UPP_ISO_REX_FIFO_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_UPP_ISO_REX_FIFO_VERSION_PATCH_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_ISO_REX_FIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_VERSION_MINOR_OFFSET 8
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_VERSION_PATCH_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_FIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_VERSION_MINOR_OFFSET 8
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_VERSION_PATCH_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_CLEAR_WCLR 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_OFFSET 3
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP_MASK 0x8
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_SOP 0x8
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_OFFSET 2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR_MASK 0x4
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_DRP_ON_PKT_ERR 0x4
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_OFFSET 1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM_MASK 0x2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_PKT_STRM 0x2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_MODE_FLW_CTRL_EN 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_CONFIG0_NOTIFY_LIMIT_NTFY_LMT_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 9
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x200
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x200
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_OFFSET 8
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR_MASK 0x100
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_WR 0x100
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_OFFSET 7
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD_MASK 0x80
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_RD 0x80
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_OFFSET 6
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT_MASK 0x40
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_WFLUSH_ACT 0x40
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_OFFSET 5
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR_MASK 0x20
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_SOP_ERR 0x20
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_OFFSET 4
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR_MASK 0x10
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_ERR 0x10
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_OFFSET 3
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR_MASK 0x8
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_FIFO_FULL_ERR 0x8
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_OFFSET 2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR_MASK 0x4
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PKT_MAX_BYTE_CNT_ERR 0x4
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_OFFSET 1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT_MASK 0x2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_PFIFO_DCOUNT 0x2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_RD2CLR_CONFIG_NFIFO_DCOUNT 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_NFIFO_DCOUNT_NFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_PFIFO_DCOUNT_PFIFO_DCOUNT_MASK 0xFFFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_PKT_MAX_BYTE_CNT_ERR_PKT_MAX_BYTE_CNT_ERR_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_FIFO_FULL_ERR_FIFO_FULL_ERR_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_PKT_ERR_PKT_ERR_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_PKT_SOP_ERR_PKT_SOP_ERR_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_WFLUSH_ACT_WFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_RD_DRP_PKT_RD_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_DRP_PKT_WR_DRP_PKT_WR_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_WRITE_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_CONFIG0_CLEAR_RCLR 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_OFFSET 2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL_MASK 0x4
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_FLOW_CTRL 0x4
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_OFFSET 1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT_MASK 0x2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_DRP_PKT 0x2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RD2CLR_CONFIG_RFLUSH_ACT 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_RFLUSH_ACT_RFLUSH_ACT_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_DRP_PKT_DRP_PKT_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_FIFO_READ_ENGINE_STATS0_FLOW_CTRL_FLOW_CTRL_MASK 0xFFFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_DATA_H2D_DATA_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_DATA_H2D_DATA_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_SRDY_OFFSET 16
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_SRDY_MASK 0x10000
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_SRDY 0x10000
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_TIME_TAG_OFFSET 4
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_TIME_TAG_MASK 0xFFF0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_VLANE_OFFSET 2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_VLANE_MASK 0xC
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_EOP_OFFSET 1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_EOP_MASK 0x2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_EOP 0x2
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_SOP_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_SOP_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_CTRL_SOP 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_SKIP_CYCLES_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_SKIP_CYCLES_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_H2D_DBG_SQUELCH_EN_OFFSET 11
#define BB_CHIP_UPP_CTRL_TRFR_H2D_DBG_SQUELCH_EN_MASK 0x800
#define BB_CHIP_UPP_CTRL_TRFR_H2D_DBG_SQUELCH_EN 0x800
#define BB_CHIP_UPP_CTRL_TRFR_H2D_DBG_CRC32_TERM_VALUE_OFFSET 1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_DBG_CRC32_TERM_VALUE_MASK 0x7FE
#define BB_CHIP_UPP_CTRL_TRFR_H2D_DBG_CRC32_ERR_INJ_EN_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_H2D_DBG_CRC32_ERR_INJ_EN_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_H2D_DBG_CRC32_ERR_INJ_EN 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_DATA_D2H_DATA_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_DATA_D2H_DATA_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_SRDY_OFFSET 16
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_SRDY_MASK 0x10000
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_SRDY 0x10000
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_TIME_TAG_OFFSET 4
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_TIME_TAG_MASK 0xFFF0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_VLANE_OFFSET 2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_VLANE_MASK 0xC
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_EOP_OFFSET 1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_EOP_MASK 0x2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_EOP 0x2
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_SOP_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_SOP_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_CTRL_SOP 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_SKIP_CYCLES_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_SKIP_CYCLES_MASK 0xFF
#define BB_CHIP_UPP_CTRL_TRFR_D2H_DBG_SQUELCH_EN_OFFSET 11
#define BB_CHIP_UPP_CTRL_TRFR_D2H_DBG_SQUELCH_EN_MASK 0x800
#define BB_CHIP_UPP_CTRL_TRFR_D2H_DBG_SQUELCH_EN 0x800
#define BB_CHIP_UPP_CTRL_TRFR_D2H_DBG_CRC32_TERM_VALUE_OFFSET 1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_DBG_CRC32_TERM_VALUE_MASK 0x7FE
#define BB_CHIP_UPP_CTRL_TRFR_D2H_DBG_CRC32_ERR_INJ_EN_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_D2H_DBG_CRC32_ERR_INJ_EN_MASK 0x1
#define BB_CHIP_UPP_CTRL_TRFR_D2H_DBG_CRC32_ERR_INJ_EN 0x1
#define BB_CHIP_UPP_CTRL_TRFR_CMPLTD_DEVICE_ADDR_OFFSET 0
#define BB_CHIP_UPP_CTRL_TRFR_CMPLTD_DEVICE_ADDR_MASK 0x7F
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_NULL_EN_OFFSET 21
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_NULL_EN_MASK 0x200000
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_NULL_EN 0x200000
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_BM_ATTRIBUTES_TT_OFFSET 19
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_BM_ATTRIBUTES_TT_MASK 0x180000
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_QID_OFFSET 11
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_QID_MASK 0x7F800
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_DEVICE_ADDR_OFFSET 4
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_DEVICE_ADDR_MASK 0x7F0
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_EPT_NUM_OFFSET 0
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG0_EPT_NUM_MASK 0xF
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG1_CRDT_CHK_VALUE_OFFSET 20
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG1_CRDT_CHK_VALUE_MASK 0x300000
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG1_MAX_BURST_OFFSET 16
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG1_MAX_BURST_MASK 0xF0000
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG1_CODED_BINTERVAL_OFFSET 0
#define BB_CHIP_UPP_ENDPOINT_TBL_CONFIG1_CODED_BINTERVAL_MASK 0xFFFF
#define BB_CHIP_UPP_ENDPOINT_TBL_TOTAL_QID_TOTAL_QID_OFFSET 0
#define BB_CHIP_UPP_ENDPOINT_TBL_TOTAL_QID_TOTAL_QID_MASK 0xFF
#define BB_CHIP_UPP_ENDPOINT_TBL_QID_ASSIGNED0_QID_ASSIGNED0_OFFSET 0
#define BB_CHIP_UPP_ENDPOINT_TBL_QID_ASSIGNED0_QID_ASSIGNED0_MASK 0xFFFFFFFF
#define BB_CHIP_UPP_STATS0_RD2CLR_CONFIG_MISSING_ITP_OFFSET 0
#define BB_CHIP_UPP_STATS0_RD2CLR_CONFIG_MISSING_ITP_MASK 0x1
#define BB_CHIP_UPP_STATS0_RD2CLR_CONFIG_MISSING_ITP 0x1
#define BB_CHIP_UPP_STATS0_MISSING_ITP_MISSING_ITP_OFFSET 0
#define BB_CHIP_UPP_STATS0_MISSING_ITP_MISSING_ITP_MASK 0xFFFF
#define BB_CHIP_UPP_IRQ0_ENABLE_D2H_PKT_OFFSET 1
#define BB_CHIP_UPP_IRQ0_ENABLE_D2H_PKT_MASK 0x2
#define BB_CHIP_UPP_IRQ0_ENABLE_D2H_PKT 0x2
#define BB_CHIP_UPP_IRQ0_ENABLE_H2D_PKT_OFFSET 0
#define BB_CHIP_UPP_IRQ0_ENABLE_H2D_PKT_MASK 0x1
#define BB_CHIP_UPP_IRQ0_ENABLE_H2D_PKT 0x1
#define BB_CHIP_UPP_IRQ0_PENDING_D2H_PKT_OFFSET 1
#define BB_CHIP_UPP_IRQ0_PENDING_D2H_PKT_MASK 0x2
#define BB_CHIP_UPP_IRQ0_PENDING_D2H_PKT 0x2
#define BB_CHIP_UPP_IRQ0_PENDING_H2D_PKT_OFFSET 0
#define BB_CHIP_UPP_IRQ0_PENDING_H2D_PKT_MASK 0x1
#define BB_CHIP_UPP_IRQ0_PENDING_H2D_PKT 0x1
#define BB_CHIP_UPP_IRQ0_PENDING_IRQ_D2H_PKT_OFFSET 1
#define BB_CHIP_UPP_IRQ0_PENDING_IRQ_D2H_PKT_MASK 0x2
#define BB_CHIP_UPP_IRQ0_PENDING_IRQ_D2H_PKT 0x2
#define BB_CHIP_UPP_IRQ0_PENDING_IRQ_H2D_PKT_OFFSET 0
#define BB_CHIP_UPP_IRQ0_PENDING_IRQ_H2D_PKT_MASK 0x1
#define BB_CHIP_UPP_IRQ0_PENDING_IRQ_H2D_PKT 0x1
#define BB_CHIP_UPP_IRQ0_RAW_D2H_PKT_OFFSET 1
#define BB_CHIP_UPP_IRQ0_RAW_D2H_PKT_MASK 0x2
#define BB_CHIP_UPP_IRQ0_RAW_D2H_PKT 0x2
#define BB_CHIP_UPP_IRQ0_RAW_H2D_PKT_OFFSET 0
#define BB_CHIP_UPP_IRQ0_RAW_H2D_PKT_MASK 0x1
#define BB_CHIP_UPP_IRQ0_RAW_H2D_PKT 0x1
#define BB_CHIP_UPP_IRQ1_ENABLE_PING_NOT_RESPOND_OFFSET 16
#define BB_CHIP_UPP_IRQ1_ENABLE_PING_NOT_RESPOND_MASK 0xFFFF0000
#define BB_CHIP_UPP_IRQ1_ENABLE_ISO_NOT_RESPOND_OFFSET 0
#define BB_CHIP_UPP_IRQ1_ENABLE_ISO_NOT_RESPOND_MASK 0xFFFF
#define BB_CHIP_UPP_IRQ1_PENDING_PING_NOT_RESPOND_OFFSET 16
#define BB_CHIP_UPP_IRQ1_PENDING_PING_NOT_RESPOND_MASK 0xFFFF0000
#define BB_CHIP_UPP_IRQ1_PENDING_ISO_NOT_RESPOND_OFFSET 0
#define BB_CHIP_UPP_IRQ1_PENDING_ISO_NOT_RESPOND_MASK 0xFFFF
#define BB_CHIP_UPP_IRQ1_PENDING_IRQ_PING_NOT_RESPOND_OFFSET 16
#define BB_CHIP_UPP_IRQ1_PENDING_IRQ_PING_NOT_RESPOND_MASK 0xFFFF0000
#define BB_CHIP_UPP_IRQ1_PENDING_IRQ_ISO_NOT_RESPOND_OFFSET 0
#define BB_CHIP_UPP_IRQ1_PENDING_IRQ_ISO_NOT_RESPOND_MASK 0xFFFF
#define BB_CHIP_UPP_IRQ1_RAW_PING_NOT_RESPOND_OFFSET 16
#define BB_CHIP_UPP_IRQ1_RAW_PING_NOT_RESPOND_MASK 0xFFFF0000
#define BB_CHIP_UPP_IRQ1_RAW_ISO_NOT_RESPOND_OFFSET 0
#define BB_CHIP_UPP_IRQ1_RAW_ISO_NOT_RESPOND_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_ULP_CORE_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_ULP_CORE_VERSION_MINOR_OFFSET 8
#define BB_CHIP_ULP_CORE_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_ULP_CORE_VERSION_PATCH_OFFSET 0
#define BB_CHIP_ULP_CORE_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_ULP_CORE_CONFIGURATION_CREDIT_HP_TIMER_EN_OFFSET 8
#define BB_CHIP_ULP_CORE_CONFIGURATION_CREDIT_HP_TIMER_EN_MASK 0x100
#define BB_CHIP_ULP_CORE_CONFIGURATION_CREDIT_HP_TIMER_EN 0x100
#define BB_CHIP_ULP_CORE_CONFIGURATION_PENDING_HP_TIMER_EN_OFFSET 7
#define BB_CHIP_ULP_CORE_CONFIGURATION_PENDING_HP_TIMER_EN_MASK 0x80
#define BB_CHIP_ULP_CORE_CONFIGURATION_PENDING_HP_TIMER_EN 0x80
#define BB_CHIP_ULP_CORE_CONFIGURATION_INTERNAL_LOOPBACK_EN_OFFSET 6
#define BB_CHIP_ULP_CORE_CONFIGURATION_INTERNAL_LOOPBACK_EN_MASK 0x40
#define BB_CHIP_ULP_CORE_CONFIGURATION_INTERNAL_LOOPBACK_EN 0x40
#define BB_CHIP_ULP_CORE_CONFIGURATION_QUASI_SS_DISABLED_MODE_OFFSET 5
#define BB_CHIP_ULP_CORE_CONFIGURATION_QUASI_SS_DISABLED_MODE_MASK 0x20
#define BB_CHIP_ULP_CORE_CONFIGURATION_QUASI_SS_DISABLED_MODE 0x20
#define BB_CHIP_ULP_CORE_CONFIGURATION_QUASI_U3_MODE_OFFSET 4
#define BB_CHIP_ULP_CORE_CONFIGURATION_QUASI_U3_MODE_MASK 0x10
#define BB_CHIP_ULP_CORE_CONFIGURATION_QUASI_U3_MODE 0x10
#define BB_CHIP_ULP_CORE_CONFIGURATION_ALLOW_U2_OFFSET 3
#define BB_CHIP_ULP_CORE_CONFIGURATION_ALLOW_U2_MASK 0x8
#define BB_CHIP_ULP_CORE_CONFIGURATION_ALLOW_U2 0x8
#define BB_CHIP_ULP_CORE_CONFIGURATION_ALLOW_U1_OFFSET 2
#define BB_CHIP_ULP_CORE_CONFIGURATION_ALLOW_U1_MASK 0x4
#define BB_CHIP_ULP_CORE_CONFIGURATION_ALLOW_U1 0x4
#define BB_CHIP_ULP_CORE_CONFIGURATION_DFP_COMPLIANCE_MODE_EN_OFFSET 1
#define BB_CHIP_ULP_CORE_CONFIGURATION_DFP_COMPLIANCE_MODE_EN_MASK 0x2
#define BB_CHIP_ULP_CORE_CONFIGURATION_DFP_COMPLIANCE_MODE_EN 0x2
#define BB_CHIP_ULP_CORE_CONFIGURATION_USE_TRX_DETECT_QUIET_DFP_MAX_OFFSET 0
#define BB_CHIP_ULP_CORE_CONFIGURATION_USE_TRX_DETECT_QUIET_DFP_MAX_MASK 0x1
#define BB_CHIP_ULP_CORE_CONFIGURATION_USE_TRX_DETECT_QUIET_DFP_MAX 0x1
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_POLLING_LFPS_OFFSET 21
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_POLLING_LFPS_MASK 0x200000
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_POLLING_LFPS 0x200000
#define BB_CHIP_ULP_CORE_CONTROL_EXIT_LOW_POWER_OFFSET 20
#define BB_CHIP_ULP_CORE_CONTROL_EXIT_LOW_POWER_MASK 0x100000
#define BB_CHIP_ULP_CORE_CONTROL_EXIT_LOW_POWER 0x100000
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_U3_OFFSET 19
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_U3_MASK 0x80000
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_U3 0x80000
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_U1_U2_OFFSET 18
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_U1_U2_MASK 0x40000
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_U1_U2 0x40000
#define BB_CHIP_ULP_CORE_CONTROL_DELAY_U3_WAKEUP_OFFSET 17
#define BB_CHIP_ULP_CORE_CONTROL_DELAY_U3_WAKEUP_MASK 0x20000
#define BB_CHIP_ULP_CORE_CONTROL_DELAY_U3_WAKEUP 0x20000
#define BB_CHIP_ULP_CORE_CONTROL_GO_U3_OFFSET 16
#define BB_CHIP_ULP_CORE_CONTROL_GO_U3_MASK 0x10000
#define BB_CHIP_ULP_CORE_CONTROL_GO_U3 0x10000
#define BB_CHIP_ULP_CORE_CONTROL_GO_U2_OFFSET 15
#define BB_CHIP_ULP_CORE_CONTROL_GO_U2_MASK 0x8000
#define BB_CHIP_ULP_CORE_CONTROL_GO_U2 0x8000
#define BB_CHIP_ULP_CORE_CONTROL_GO_U1_OFFSET 14
#define BB_CHIP_ULP_CORE_CONTROL_GO_U1_MASK 0x4000
#define BB_CHIP_ULP_CORE_CONTROL_GO_U1 0x4000
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_HOT_RESET_OFFSET 13
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_HOT_RESET_MASK 0x2000
#define BB_CHIP_ULP_CORE_CONTROL_WAIT_IN_HOT_RESET 0x2000
#define BB_CHIP_ULP_CORE_CONTROL_GEN_WARM_RESET_OFFSET 12
#define BB_CHIP_ULP_CORE_CONTROL_GEN_WARM_RESET_MASK 0x1000
#define BB_CHIP_ULP_CORE_CONTROL_GEN_WARM_RESET 0x1000
#define BB_CHIP_ULP_CORE_CONTROL_ALLOW_RX_TERM_EN_HW_CLR_OFFSET 11
#define BB_CHIP_ULP_CORE_CONTROL_ALLOW_RX_TERM_EN_HW_CLR_MASK 0x800
#define BB_CHIP_ULP_CORE_CONTROL_ALLOW_RX_TERM_EN_HW_CLR 0x800
#define BB_CHIP_ULP_CORE_CONTROL_RX_TERMINATION_EN_OFFSET 10
#define BB_CHIP_ULP_CORE_CONTROL_RX_TERMINATION_EN_MASK 0x400
#define BB_CHIP_ULP_CORE_CONTROL_RX_TERMINATION_EN 0x400
#define BB_CHIP_ULP_CORE_CONTROL_GO2_SS_INACTIVE_OFFSET 9
#define BB_CHIP_ULP_CORE_CONTROL_GO2_SS_INACTIVE_MASK 0x200
#define BB_CHIP_ULP_CORE_CONTROL_GO2_SS_INACTIVE 0x200
#define BB_CHIP_ULP_CORE_CONTROL_GO2_RECOVERY_OFFSET 8
#define BB_CHIP_ULP_CORE_CONTROL_GO2_RECOVERY_MASK 0x100
#define BB_CHIP_ULP_CORE_CONTROL_GO2_RECOVERY 0x100
#define BB_CHIP_ULP_CORE_CONTROL_GO2_HOT_RESET_OFFSET 7
#define BB_CHIP_ULP_CORE_CONTROL_GO2_HOT_RESET_MASK 0x80
#define BB_CHIP_ULP_CORE_CONTROL_GO2_HOT_RESET 0x80
#define BB_CHIP_ULP_CORE_CONTROL_GO2_LOOPBACK_OFFSET 6
#define BB_CHIP_ULP_CORE_CONTROL_GO2_LOOPBACK_MASK 0x40
#define BB_CHIP_ULP_CORE_CONTROL_GO2_LOOPBACK 0x40
#define BB_CHIP_ULP_CORE_CONTROL_GO2_SS_DISABLED_OFFSET 5
#define BB_CHIP_ULP_CORE_CONTROL_GO2_SS_DISABLED_MASK 0x20
#define BB_CHIP_ULP_CORE_CONTROL_GO2_SS_DISABLED 0x20
#define BB_CHIP_ULP_CORE_CONTROL_DISABLE_SCRAMBLING_OFFSET 4
#define BB_CHIP_ULP_CORE_CONTROL_DISABLE_SCRAMBLING_MASK 0x10
#define BB_CHIP_ULP_CORE_CONTROL_DISABLE_SCRAMBLING 0x10
#define BB_CHIP_ULP_CORE_CONTROL_SET_TS2_DISABLE_SCRAMBLE_BIT_OFFSET 3
#define BB_CHIP_ULP_CORE_CONTROL_SET_TS2_DISABLE_SCRAMBLE_BIT_MASK 0x8
#define BB_CHIP_ULP_CORE_CONTROL_SET_TS2_DISABLE_SCRAMBLE_BIT 0x8
#define BB_CHIP_ULP_CORE_CONTROL_SET_TS2_LOOPBK_BIT_OFFSET 2
#define BB_CHIP_ULP_CORE_CONTROL_SET_TS2_LOOPBK_BIT_MASK 0x4
#define BB_CHIP_ULP_CORE_CONTROL_SET_TS2_LOOPBK_BIT 0x4
#define BB_CHIP_ULP_CORE_CONTROL_SET_TS2_LINK_CONFIG_FIELD_OFFSET 1
#define BB_CHIP_ULP_CORE_CONTROL_SET_TS2_LINK_CONFIG_FIELD_MASK 0x2
#define BB_CHIP_ULP_CORE_CONTROL_SET_TS2_LINK_CONFIG_FIELD 0x2
#define BB_CHIP_ULP_CORE_CONTROL_GO2_RX_DETECT_OFFSET 0
#define BB_CHIP_ULP_CORE_CONTROL_GO2_RX_DETECT_MASK 0x1
#define BB_CHIP_ULP_CORE_CONTROL_GO2_RX_DETECT 0x1
#define BB_CHIP_ULP_CORE_TIMER_CORRECTION_ADD_2_CHT_OFFSET 5
#define BB_CHIP_ULP_CORE_TIMER_CORRECTION_ADD_2_CHT_MASK 0x3E0
#define BB_CHIP_ULP_CORE_TIMER_CORRECTION_ADD_2_PHT_OFFSET 0
#define BB_CHIP_ULP_CORE_TIMER_CORRECTION_ADD_2_PHT_MASK 0x1F
#define BB_CHIP_ULP_CORE_LTSSM_STATE_MAIN_STATE_OFFSET 4
#define BB_CHIP_ULP_CORE_LTSSM_STATE_MAIN_STATE_MASK 0xF0
#define BB_CHIP_ULP_CORE_LTSSM_STATE_SUB_STATE_OFFSET 0
#define BB_CHIP_ULP_CORE_LTSSM_STATE_SUB_STATE_MASK 0xF
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RCVD_LBAD_OFFSET 18
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RCVD_LBAD_MASK 0x40000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RCVD_LBAD 0x40000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RCVD_LRTY_OFFSET 17
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RCVD_LRTY_MASK 0x20000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RCVD_LRTY 0x20000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_SNT_LBAD_OFFSET 16
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_SNT_LBAD_MASK 0x10000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_SNT_LBAD 0x10000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_SNT_LRTY_OFFSET 15
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_SNT_LRTY_MASK 0x8000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_SNT_LRTY 0x8000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RX_GO_RECOVERY_OFFSET 14
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RX_GO_RECOVERY_MASK 0x4000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RX_GO_RECOVERY 0x4000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_GO2_U0_FROM_RECOVERY_OFFSET 13
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_GO2_U0_FROM_RECOVERY_MASK 0x2000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_GO2_U0_FROM_RECOVERY 0x2000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TO_PHY_OUT_EOP_OFFSET 12
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TO_PHY_OUT_EOP_MASK 0x1000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TO_PHY_OUT_EOP 0x1000
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TO_PHY_OUT_SOP_OFFSET 11
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TO_PHY_OUT_SOP_MASK 0x800
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TO_PHY_OUT_SOP 0x800
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_OFFSET 10
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_MASK 0x400
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR 0x400
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LMP_RX_EVENT_FIFO_UNDERFLOW_OFFSET 9
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LMP_RX_EVENT_FIFO_UNDERFLOW_MASK 0x200
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LMP_RX_EVENT_FIFO_UNDERFLOW 0x200
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LMP_RX_EVENT_FIFO_OVERFLOW_OFFSET 8
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LMP_RX_EVENT_FIFO_OVERFLOW_MASK 0x100
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LMP_RX_EVENT_FIFO_OVERFLOW 0x100
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_OFFSET 7
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_MASK 0x80
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW 0x80
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_OFFSET 6
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_MASK 0x40
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW 0x40
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LMP_PTP_VIOLATED_OFFSET 5
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LMP_PTP_VIOLATED_MASK 0x20
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LMP_PTP_VIOLATED 0x20
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_COMMAND_PTP_VIOLATED_OFFSET 4
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_COMMAND_PTP_VIOLATED_MASK 0x10
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_COMMAND_PTP_VIOLATED 0x10
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_TRAINING_PTP_VIOLATED_OFFSET 3
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_TRAINING_PTP_VIOLATED_MASK 0x8
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_LINK_TRAINING_PTP_VIOLATED 0x8
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TX_FRAMER_PTP_VIOLATED_OFFSET 2
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TX_FRAMER_PTP_VIOLATED_MASK 0x4
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TX_FRAMER_PTP_VIOLATED 0x4
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RX_LFPS_CNT_IN_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RX_LFPS_CNT_IN_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_RX_LFPS_CNT_IN_ERR 0x2
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TX_LFPS_CNT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TX_LFPS_CNT_IN_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_STATS0_RD2CLR_CONFIG_TX_LFPS_CNT_IN_ERR 0x1
#define BB_CHIP_ULP_CORE_STATS0_TX_LFPS_CNT_IN_ERR_TX_LFPS_CNT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_TX_LFPS_CNT_IN_ERR_TX_LFPS_CNT_IN_ERR_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_RX_LFPS_CNT_IN_ERR_RX_LFPS_CNT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_RX_LFPS_CNT_IN_ERR_RX_LFPS_CNT_IN_ERR_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_TX_FRAMER_PTP_VIOLATED_TX_FRAMER_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_TX_FRAMER_PTP_VIOLATED_TX_FRAMER_PTP_VIOLATED_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_LINK_TRAINING_PTP_VIOLATED_LINK_TRAINING_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_LINK_TRAINING_PTP_VIOLATED_LINK_TRAINING_PTP_VIOLATED_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_LINK_COMMAND_PTP_VIOLATED_LINK_COMMAND_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_LINK_COMMAND_PTP_VIOLATED_LINK_COMMAND_PTP_VIOLATED_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_LMP_PTP_VIOLATED_LMP_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_LMP_PTP_VIOLATED_LMP_PTP_VIOLATED_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_LMP_RX_EVENT_FIFO_OVERFLOW_LMP_RX_EVENT_FIFO_OVERFLOW_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_LMP_RX_EVENT_FIFO_OVERFLOW_LMP_RX_EVENT_FIFO_OVERFLOW_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_LMP_RX_EVENT_FIFO_UNDERFLOW_LMP_RX_EVENT_FIFO_UNDERFLOW_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_LMP_RX_EVENT_FIFO_UNDERFLOW_LMP_RX_EVENT_FIFO_UNDERFLOW_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_MASK 0xFF
#define BB_CHIP_ULP_CORE_STATS0_TO_PHY_OUT_SOP_TO_PHY_OUT_SOP_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_TO_PHY_OUT_SOP_TO_PHY_OUT_SOP_MASK 0xFFFFFFFF
#define BB_CHIP_ULP_CORE_STATS0_TO_PHY_OUT_EOP_TO_PHY_OUT_EOP_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_TO_PHY_OUT_EOP_TO_PHY_OUT_EOP_MASK 0xFFFFFFFF
#define BB_CHIP_ULP_CORE_STATS0_GO2_U0_FROM_RECOVERY_GO2_U0_FROM_RECOVERY_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_GO2_U0_FROM_RECOVERY_GO2_U0_FROM_RECOVERY_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_STATS0_RX_GO_RECOVERY_RX_GO_RECOVERY_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_RX_GO_RECOVERY_RX_GO_RECOVERY_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_STATS0_SNT_LRTY_SNT_LRTY_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_SNT_LRTY_SNT_LRTY_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_STATS0_SNT_LBAD_SNT_LBAD_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_SNT_LBAD_SNT_LBAD_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_STATS0_RCVD_LRTY_RCVD_LRTY_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_RCVD_LRTY_RCVD_LRTY_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_STATS0_RCVD_LBAD_RCVD_LBAD_OFFSET 0
#define BB_CHIP_ULP_CORE_STATS0_RCVD_LBAD_RCVD_LBAD_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_VERSION_MINOR_OFFSET 8
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_VERSION_PATCH_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_OFFSET 16
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_MASK 0xF0000
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_CONFIG0_MAX_CYCLES_MAX_CYCLES_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_CONFIG0_MAX_CYCLES_MAX_CYCLES_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_ENABLE_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_ENABLE_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_ENABLE_MAX_CYCLE_ERR 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_EOP_ERR 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_ENABLE_MISSING_SOP_ERR 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_MAX_CYCLE_ERR 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_EOP_ERR 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_MISSING_SOP_ERR 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_EOP_ERR 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_PENDING_IRQ_MISSING_SOP_ERR 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_RAW_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_RAW_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_RAW_MAX_CYCLE_ERR 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_EOP_ERR 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2CORE_IRQ0_RAW_MISSING_SOP_ERR 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_VERSION_MINOR_OFFSET 8
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_VERSION_PATCH_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_CONFIG0_FIX_PTP_VIOLATIONS_IMPLEMENTED 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_CONFIG0_FIX_PTP_VIOLATIONS_ACTIVATE 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_OFFSET 16
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_CONFIG0_MAX_CYCLES_MAX_CYCLE_MODE_MASK 0xF0000
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_CONFIG0_MAX_CYCLES_MAX_CYCLES_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_CONFIG0_MAX_CYCLES_MAX_CYCLES_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_RD2CLR_CONFIG_MAX_CYCLE_ERR 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_RD2CLR_CONFIG_MISSING_EOP_ERR 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_RD2CLR_CONFIG_MISSING_SOP_ERR 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_MISSING_SOP_ERR_MISSING_SOP_ERR_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_MISSING_EOP_ERR_MISSING_EOP_ERR_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_STATS0_MAX_CYCLE_ERR_MAX_CYCLE_ERR_MASK 0xFFFF
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_ENABLE_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_ENABLE_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_ENABLE_MAX_CYCLE_ERR 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_ENABLE_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_ENABLE_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_ENABLE_MISSING_EOP_ERR 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_ENABLE_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_ENABLE_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_ENABLE_MISSING_SOP_ERR 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_MAX_CYCLE_ERR 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_MISSING_EOP_ERR 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_MISSING_SOP_ERR 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_IRQ_MAX_CYCLE_ERR 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_IRQ_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_IRQ_MISSING_EOP_ERR 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_IRQ_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_PENDING_IRQ_MISSING_SOP_ERR 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_RAW_MAX_CYCLE_ERR_OFFSET 2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_RAW_MAX_CYCLE_ERR_MASK 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_RAW_MAX_CYCLE_ERR 0x4
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_RAW_MISSING_EOP_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_RAW_MISSING_EOP_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_RAW_MISSING_EOP_ERR 0x2
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_RAW_MISSING_SOP_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_RAW_MISSING_SOP_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_PTP_GUARD_2PHY_IRQ0_RAW_MISSING_SOP_ERR 0x1
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_CORE_CLK_MODE_OFFSET 29
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_CORE_CLK_MODE_MASK 0x20000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_CORE_CLK_MODE 0x20000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_EXIT_COMPLETED_OFFSET 28
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_EXIT_COMPLETED_MASK 0x10000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_EXIT_COMPLETED 0x10000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_AS_SLAVE_EXIT_FAILED_OFFSET 27
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_AS_SLAVE_EXIT_FAILED_MASK 0x8000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_AS_SLAVE_EXIT_FAILED 0x8000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_AS_MASTER_EXIT_FAILED_OFFSET 26
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_AS_MASTER_EXIT_FAILED_MASK 0x4000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_AS_MASTER_EXIT_FAILED 0x4000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_EXIT_INITIATED_OFFSET 25
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_EXIT_INITIATED_MASK 0x2000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_EXIT_INITIATED 0x2000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_U3_OFFSET 24
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_U3_MASK 0x1000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_U3 0x1000000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_ENTRY_FAILED_OFFSET 23
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_ENTRY_FAILED_MASK 0x800000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_ENTRY_FAILED 0x800000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_ENTRY_RECEIVED_OFFSET 22
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_ENTRY_RECEIVED_MASK 0x400000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U3_ENTRY_RECEIVED 0x400000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_U2_OFFSET 21
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_U2_MASK 0x200000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_U2 0x200000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U2_ENTRY_REJECTED_OFFSET 20
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U2_ENTRY_REJECTED_MASK 0x100000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U2_ENTRY_REJECTED 0x100000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U2_ENTRY_RECEIVED_OFFSET 19
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U2_ENTRY_RECEIVED_MASK 0x80000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U2_ENTRY_RECEIVED 0x80000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_U1_OFFSET 18
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_U1_MASK 0x40000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_U1 0x40000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U1_ENTRY_REJECTED_OFFSET 17
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U1_ENTRY_REJECTED_MASK 0x20000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U1_ENTRY_REJECTED 0x20000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U1_ENTRY_RECEIVED_OFFSET 16
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U1_ENTRY_RECEIVED_MASK 0x10000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_U1_ENTRY_RECEIVED 0x10000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_COMPLETED_HOT_RESET_OFFSET 15
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_COMPLETED_HOT_RESET_MASK 0x8000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_COMPLETED_HOT_RESET 0x8000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_HOT_RESET_OFFSET 14
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_HOT_RESET_MASK 0x4000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_HOT_RESET 0x4000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_COMPLETED_WARM_RESET_OFFSET 13
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_COMPLETED_WARM_RESET_MASK 0x2000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_COMPLETED_WARM_RESET 0x2000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_WARM_RESET_OFFSET 12
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_WARM_RESET_MASK 0x1000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_IN_WARM_RESET 0x1000
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_RX_TERMINATION_DET_OFFSET 11
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_RX_TERMINATION_DET_MASK 0x800
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_RX_TERMINATION_DET 0x800
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_OFFSET 10
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_MASK 0x400
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR 0x400
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LMP_RX_EVENT_FIFO_UNDERFLOW_OFFSET 9
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LMP_RX_EVENT_FIFO_UNDERFLOW_MASK 0x200
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LMP_RX_EVENT_FIFO_UNDERFLOW 0x200
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LMP_RX_EVENT_FIFO_OVERFLOW_OFFSET 8
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LMP_RX_EVENT_FIFO_OVERFLOW_MASK 0x100
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LMP_RX_EVENT_FIFO_OVERFLOW 0x100
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_OFFSET 7
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_MASK 0x80
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW 0x80
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_OFFSET 6
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_MASK 0x40
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW 0x40
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LMP_PTP_VIOLATED_OFFSET 5
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LMP_PTP_VIOLATED_MASK 0x20
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LMP_PTP_VIOLATED 0x20
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_COMMAND_PTP_VIOLATED_OFFSET 4
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_COMMAND_PTP_VIOLATED_MASK 0x10
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_COMMAND_PTP_VIOLATED 0x10
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_TRAINING_PTP_VIOLATED_OFFSET 3
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_TRAINING_PTP_VIOLATED_MASK 0x8
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_LINK_TRAINING_PTP_VIOLATED 0x8
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_TX_FRAMER_PTP_VIOLATED_OFFSET 2
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_TX_FRAMER_PTP_VIOLATED_MASK 0x4
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_TX_FRAMER_PTP_VIOLATED 0x4
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_RX_LFPS_CNT_IN_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_RX_LFPS_CNT_IN_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_RX_LFPS_CNT_IN_ERR 0x2
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_TX_LFPS_CNT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_TX_LFPS_CNT_IN_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_IRQ0_ENABLE_TX_LFPS_CNT_IN_ERR 0x1
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_CORE_CLK_MODE_OFFSET 29
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_CORE_CLK_MODE_MASK 0x20000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_CORE_CLK_MODE 0x20000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_EXIT_COMPLETED_OFFSET 28
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_EXIT_COMPLETED_MASK 0x10000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_EXIT_COMPLETED 0x10000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_AS_SLAVE_EXIT_FAILED_OFFSET 27
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_AS_SLAVE_EXIT_FAILED_MASK 0x8000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_AS_SLAVE_EXIT_FAILED 0x8000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_AS_MASTER_EXIT_FAILED_OFFSET 26
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_AS_MASTER_EXIT_FAILED_MASK 0x4000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_AS_MASTER_EXIT_FAILED 0x4000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_EXIT_INITIATED_OFFSET 25
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_EXIT_INITIATED_MASK 0x2000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_EXIT_INITIATED 0x2000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_U3_OFFSET 24
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_U3_MASK 0x1000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_U3 0x1000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_ENTRY_FAILED_OFFSET 23
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_ENTRY_FAILED_MASK 0x800000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_ENTRY_FAILED 0x800000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_ENTRY_RECEIVED_OFFSET 22
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_ENTRY_RECEIVED_MASK 0x400000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U3_ENTRY_RECEIVED 0x400000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_U2_OFFSET 21
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_U2_MASK 0x200000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_U2 0x200000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U2_ENTRY_REJECTED_OFFSET 20
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U2_ENTRY_REJECTED_MASK 0x100000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U2_ENTRY_REJECTED 0x100000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U2_ENTRY_RECEIVED_OFFSET 19
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U2_ENTRY_RECEIVED_MASK 0x80000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U2_ENTRY_RECEIVED 0x80000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_U1_OFFSET 18
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_U1_MASK 0x40000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_U1 0x40000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U1_ENTRY_REJECTED_OFFSET 17
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U1_ENTRY_REJECTED_MASK 0x20000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U1_ENTRY_REJECTED 0x20000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U1_ENTRY_RECEIVED_OFFSET 16
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U1_ENTRY_RECEIVED_MASK 0x10000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_U1_ENTRY_RECEIVED 0x10000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_COMPLETED_HOT_RESET_OFFSET 15
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_COMPLETED_HOT_RESET_MASK 0x8000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_COMPLETED_HOT_RESET 0x8000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_HOT_RESET_OFFSET 14
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_HOT_RESET_MASK 0x4000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_HOT_RESET 0x4000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_COMPLETED_WARM_RESET_OFFSET 13
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_COMPLETED_WARM_RESET_MASK 0x2000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_COMPLETED_WARM_RESET 0x2000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_WARM_RESET_OFFSET 12
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_WARM_RESET_MASK 0x1000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IN_WARM_RESET 0x1000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_RX_TERMINATION_DET_OFFSET 11
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_RX_TERMINATION_DET_MASK 0x800
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_RX_TERMINATION_DET 0x800
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_OFFSET 10
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_MASK 0x400
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR 0x400
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LMP_RX_EVENT_FIFO_UNDERFLOW_OFFSET 9
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LMP_RX_EVENT_FIFO_UNDERFLOW_MASK 0x200
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LMP_RX_EVENT_FIFO_UNDERFLOW 0x200
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LMP_RX_EVENT_FIFO_OVERFLOW_OFFSET 8
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LMP_RX_EVENT_FIFO_OVERFLOW_MASK 0x100
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LMP_RX_EVENT_FIFO_OVERFLOW 0x100
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_OFFSET 7
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_MASK 0x80
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW 0x80
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_OFFSET 6
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_MASK 0x40
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW 0x40
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LMP_PTP_VIOLATED_OFFSET 5
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LMP_PTP_VIOLATED_MASK 0x20
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LMP_PTP_VIOLATED 0x20
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_COMMAND_PTP_VIOLATED_OFFSET 4
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_COMMAND_PTP_VIOLATED_MASK 0x10
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_COMMAND_PTP_VIOLATED 0x10
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_TRAINING_PTP_VIOLATED_OFFSET 3
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_TRAINING_PTP_VIOLATED_MASK 0x8
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_LINK_TRAINING_PTP_VIOLATED 0x8
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_TX_FRAMER_PTP_VIOLATED_OFFSET 2
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_TX_FRAMER_PTP_VIOLATED_MASK 0x4
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_TX_FRAMER_PTP_VIOLATED 0x4
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_RX_LFPS_CNT_IN_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_RX_LFPS_CNT_IN_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_RX_LFPS_CNT_IN_ERR 0x2
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_TX_LFPS_CNT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_TX_LFPS_CNT_IN_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_TX_LFPS_CNT_IN_ERR 0x1
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_CORE_CLK_MODE_OFFSET 29
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_CORE_CLK_MODE_MASK 0x20000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_CORE_CLK_MODE 0x20000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_EXIT_COMPLETED_OFFSET 28
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_EXIT_COMPLETED_MASK 0x10000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_EXIT_COMPLETED 0x10000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_AS_SLAVE_EXIT_FAILED_OFFSET 27
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_AS_SLAVE_EXIT_FAILED_MASK 0x8000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_AS_SLAVE_EXIT_FAILED 0x8000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_AS_MASTER_EXIT_FAILED_OFFSET 26
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_AS_MASTER_EXIT_FAILED_MASK 0x4000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_AS_MASTER_EXIT_FAILED 0x4000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_EXIT_INITIATED_OFFSET 25
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_EXIT_INITIATED_MASK 0x2000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_EXIT_INITIATED 0x2000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_U3_OFFSET 24
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_U3_MASK 0x1000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_U3 0x1000000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_ENTRY_FAILED_OFFSET 23
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_ENTRY_FAILED_MASK 0x800000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_ENTRY_FAILED 0x800000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_ENTRY_RECEIVED_OFFSET 22
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_ENTRY_RECEIVED_MASK 0x400000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U3_ENTRY_RECEIVED 0x400000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_U2_OFFSET 21
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_U2_MASK 0x200000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_U2 0x200000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U2_ENTRY_REJECTED_OFFSET 20
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U2_ENTRY_REJECTED_MASK 0x100000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U2_ENTRY_REJECTED 0x100000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U2_ENTRY_RECEIVED_OFFSET 19
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U2_ENTRY_RECEIVED_MASK 0x80000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U2_ENTRY_RECEIVED 0x80000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_U1_OFFSET 18
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_U1_MASK 0x40000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_U1 0x40000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U1_ENTRY_REJECTED_OFFSET 17
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U1_ENTRY_REJECTED_MASK 0x20000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U1_ENTRY_REJECTED 0x20000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U1_ENTRY_RECEIVED_OFFSET 16
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U1_ENTRY_RECEIVED_MASK 0x10000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_U1_ENTRY_RECEIVED 0x10000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_COMPLETED_HOT_RESET_OFFSET 15
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_COMPLETED_HOT_RESET_MASK 0x8000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_COMPLETED_HOT_RESET 0x8000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_HOT_RESET_OFFSET 14
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_HOT_RESET_MASK 0x4000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_HOT_RESET 0x4000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_COMPLETED_WARM_RESET_OFFSET 13
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_COMPLETED_WARM_RESET_MASK 0x2000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_COMPLETED_WARM_RESET 0x2000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_WARM_RESET_OFFSET 12
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_WARM_RESET_MASK 0x1000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_IN_WARM_RESET 0x1000
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_RX_TERMINATION_DET_OFFSET 11
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_RX_TERMINATION_DET_MASK 0x800
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_RX_TERMINATION_DET 0x800
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_OFFSET 10
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_MASK 0x400
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR 0x400
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LMP_RX_EVENT_FIFO_UNDERFLOW_OFFSET 9
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LMP_RX_EVENT_FIFO_UNDERFLOW_MASK 0x200
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LMP_RX_EVENT_FIFO_UNDERFLOW 0x200
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LMP_RX_EVENT_FIFO_OVERFLOW_OFFSET 8
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LMP_RX_EVENT_FIFO_OVERFLOW_MASK 0x100
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LMP_RX_EVENT_FIFO_OVERFLOW 0x100
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_OFFSET 7
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_MASK 0x80
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW 0x80
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_OFFSET 6
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_MASK 0x40
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW 0x40
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LMP_PTP_VIOLATED_OFFSET 5
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LMP_PTP_VIOLATED_MASK 0x20
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LMP_PTP_VIOLATED 0x20
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_COMMAND_PTP_VIOLATED_OFFSET 4
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_COMMAND_PTP_VIOLATED_MASK 0x10
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_COMMAND_PTP_VIOLATED 0x10
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_TRAINING_PTP_VIOLATED_OFFSET 3
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_TRAINING_PTP_VIOLATED_MASK 0x8
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_LINK_TRAINING_PTP_VIOLATED 0x8
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_TX_FRAMER_PTP_VIOLATED_OFFSET 2
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_TX_FRAMER_PTP_VIOLATED_MASK 0x4
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_TX_FRAMER_PTP_VIOLATED 0x4
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_RX_LFPS_CNT_IN_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_RX_LFPS_CNT_IN_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_RX_LFPS_CNT_IN_ERR 0x2
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_TX_LFPS_CNT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_TX_LFPS_CNT_IN_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_IRQ0_PENDING_IRQ_TX_LFPS_CNT_IN_ERR 0x1
#define BB_CHIP_ULP_CORE_IRQ0_RAW_CORE_CLK_MODE_OFFSET 29
#define BB_CHIP_ULP_CORE_IRQ0_RAW_CORE_CLK_MODE_MASK 0x20000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_CORE_CLK_MODE 0x20000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_EXIT_COMPLETED_OFFSET 28
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_EXIT_COMPLETED_MASK 0x10000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_EXIT_COMPLETED 0x10000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_AS_SLAVE_EXIT_FAILED_OFFSET 27
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_AS_SLAVE_EXIT_FAILED_MASK 0x8000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_AS_SLAVE_EXIT_FAILED 0x8000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_AS_MASTER_EXIT_FAILED_OFFSET 26
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_AS_MASTER_EXIT_FAILED_MASK 0x4000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_AS_MASTER_EXIT_FAILED 0x4000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_EXIT_INITIATED_OFFSET 25
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_EXIT_INITIATED_MASK 0x2000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_EXIT_INITIATED 0x2000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_U3_OFFSET 24
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_U3_MASK 0x1000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_U3 0x1000000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_ENTRY_FAILED_OFFSET 23
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_ENTRY_FAILED_MASK 0x800000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_ENTRY_FAILED 0x800000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_ENTRY_RECEIVED_OFFSET 22
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_ENTRY_RECEIVED_MASK 0x400000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U3_ENTRY_RECEIVED 0x400000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_U2_OFFSET 21
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_U2_MASK 0x200000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_U2 0x200000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U2_ENTRY_REJECTED_OFFSET 20
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U2_ENTRY_REJECTED_MASK 0x100000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U2_ENTRY_REJECTED 0x100000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U2_ENTRY_RECEIVED_OFFSET 19
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U2_ENTRY_RECEIVED_MASK 0x80000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U2_ENTRY_RECEIVED 0x80000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_U1_OFFSET 18
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_U1_MASK 0x40000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_U1 0x40000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U1_ENTRY_REJECTED_OFFSET 17
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U1_ENTRY_REJECTED_MASK 0x20000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U1_ENTRY_REJECTED 0x20000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U1_ENTRY_RECEIVED_OFFSET 16
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U1_ENTRY_RECEIVED_MASK 0x10000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_U1_ENTRY_RECEIVED 0x10000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_COMPLETED_HOT_RESET_OFFSET 15
#define BB_CHIP_ULP_CORE_IRQ0_RAW_COMPLETED_HOT_RESET_MASK 0x8000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_COMPLETED_HOT_RESET 0x8000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_HOT_RESET_OFFSET 14
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_HOT_RESET_MASK 0x4000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_HOT_RESET 0x4000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_COMPLETED_WARM_RESET_OFFSET 13
#define BB_CHIP_ULP_CORE_IRQ0_RAW_COMPLETED_WARM_RESET_MASK 0x2000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_COMPLETED_WARM_RESET 0x2000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_WARM_RESET_OFFSET 12
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_WARM_RESET_MASK 0x1000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_IN_WARM_RESET 0x1000
#define BB_CHIP_ULP_CORE_IRQ0_RAW_RX_TERMINATION_DET_OFFSET 11
#define BB_CHIP_ULP_CORE_IRQ0_RAW_RX_TERMINATION_DET_MASK 0x800
#define BB_CHIP_ULP_CORE_IRQ0_RAW_RX_TERMINATION_DET 0x800
#define BB_CHIP_ULP_CORE_IRQ0_RAW_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_OFFSET 10
#define BB_CHIP_ULP_CORE_IRQ0_RAW_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR_MASK 0x400
#define BB_CHIP_ULP_CORE_IRQ0_RAW_REMOTE_RX_HDR_BUFF_CRDT_CNT_IN_ERR 0x400
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LMP_RX_EVENT_FIFO_UNDERFLOW_OFFSET 9
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LMP_RX_EVENT_FIFO_UNDERFLOW_MASK 0x200
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LMP_RX_EVENT_FIFO_UNDERFLOW 0x200
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LMP_RX_EVENT_FIFO_OVERFLOW_OFFSET 8
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LMP_RX_EVENT_FIFO_OVERFLOW_MASK 0x100
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LMP_RX_EVENT_FIFO_OVERFLOW 0x100
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_OFFSET 7
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW_MASK 0x80
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_COMMAND_RX_EVENT_FIFO_UNDERFLOW 0x80
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_OFFSET 6
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW_MASK 0x40
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_COMMAND_RX_EVENT_FIFO_OVERFLOW 0x40
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LMP_PTP_VIOLATED_OFFSET 5
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LMP_PTP_VIOLATED_MASK 0x20
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LMP_PTP_VIOLATED 0x20
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_COMMAND_PTP_VIOLATED_OFFSET 4
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_COMMAND_PTP_VIOLATED_MASK 0x10
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_COMMAND_PTP_VIOLATED 0x10
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_TRAINING_PTP_VIOLATED_OFFSET 3
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_TRAINING_PTP_VIOLATED_MASK 0x8
#define BB_CHIP_ULP_CORE_IRQ0_RAW_LINK_TRAINING_PTP_VIOLATED 0x8
#define BB_CHIP_ULP_CORE_IRQ0_RAW_TX_FRAMER_PTP_VIOLATED_OFFSET 2
#define BB_CHIP_ULP_CORE_IRQ0_RAW_TX_FRAMER_PTP_VIOLATED_MASK 0x4
#define BB_CHIP_ULP_CORE_IRQ0_RAW_TX_FRAMER_PTP_VIOLATED 0x4
#define BB_CHIP_ULP_CORE_IRQ0_RAW_RX_LFPS_CNT_IN_ERR_OFFSET 1
#define BB_CHIP_ULP_CORE_IRQ0_RAW_RX_LFPS_CNT_IN_ERR_MASK 0x2
#define BB_CHIP_ULP_CORE_IRQ0_RAW_RX_LFPS_CNT_IN_ERR 0x2
#define BB_CHIP_ULP_CORE_IRQ0_RAW_TX_LFPS_CNT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_CORE_IRQ0_RAW_TX_LFPS_CNT_IN_ERR_MASK 0x1
#define BB_CHIP_ULP_CORE_IRQ0_RAW_TX_LFPS_CNT_IN_ERR 0x1
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_RECOVERY_OFFSET 7
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_RECOVERY_MASK 0x80
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_RECOVERY 0x80
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_LOOPBACK_OFFSET 6
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_LOOPBACK_MASK 0x40
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_LOOPBACK 0x40
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_COMPLIANCE_OFFSET 5
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_COMPLIANCE_MASK 0x20
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_COMPLIANCE 0x20
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_DISABLED_OFFSET 4
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_DISABLED_MASK 0x10
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_DISABLED 0x10
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_U0_OFFSET 3
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_U0_MASK 0x8
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_U0 0x8
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_POLLING_OFFSET 2
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_POLLING_MASK 0x4
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_POLLING 0x4
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_RX_DETECT_OFFSET 1
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_RX_DETECT_MASK 0x2
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_RX_DETECT 0x2
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_INACTIVE_OFFSET 0
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_INACTIVE_MASK 0x1
#define BB_CHIP_ULP_CORE_IRQ1_ENABLE_IN_INACTIVE 0x1
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_RECOVERY_OFFSET 7
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_RECOVERY_MASK 0x80
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_RECOVERY 0x80
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_LOOPBACK_OFFSET 6
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_LOOPBACK_MASK 0x40
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_LOOPBACK 0x40
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_COMPLIANCE_OFFSET 5
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_COMPLIANCE_MASK 0x20
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_COMPLIANCE 0x20
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_DISABLED_OFFSET 4
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_DISABLED_MASK 0x10
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_DISABLED 0x10
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_U0_OFFSET 3
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_U0_MASK 0x8
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_U0 0x8
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_POLLING_OFFSET 2
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_POLLING_MASK 0x4
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_POLLING 0x4
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_RX_DETECT_OFFSET 1
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_RX_DETECT_MASK 0x2
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_RX_DETECT 0x2
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_INACTIVE_OFFSET 0
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_INACTIVE_MASK 0x1
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IN_INACTIVE 0x1
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_RECOVERY_OFFSET 7
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_RECOVERY_MASK 0x80
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_RECOVERY 0x80
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_LOOPBACK_OFFSET 6
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_LOOPBACK_MASK 0x40
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_LOOPBACK 0x40
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_COMPLIANCE_OFFSET 5
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_COMPLIANCE_MASK 0x20
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_COMPLIANCE 0x20
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_DISABLED_OFFSET 4
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_DISABLED_MASK 0x10
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_DISABLED 0x10
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_U0_OFFSET 3
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_U0_MASK 0x8
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_U0 0x8
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_POLLING_OFFSET 2
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_POLLING_MASK 0x4
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_POLLING 0x4
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_RX_DETECT_OFFSET 1
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_RX_DETECT_MASK 0x2
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_RX_DETECT 0x2
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_INACTIVE_OFFSET 0
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_INACTIVE_MASK 0x1
#define BB_CHIP_ULP_CORE_IRQ1_PENDING_IRQ_IN_INACTIVE 0x1
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_RECOVERY_OFFSET 7
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_RECOVERY_MASK 0x80
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_RECOVERY 0x80
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_LOOPBACK_OFFSET 6
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_LOOPBACK_MASK 0x40
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_LOOPBACK 0x40
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_COMPLIANCE_OFFSET 5
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_COMPLIANCE_MASK 0x20
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_COMPLIANCE 0x20
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_DISABLED_OFFSET 4
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_DISABLED_MASK 0x10
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_DISABLED 0x10
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_U0_OFFSET 3
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_U0_MASK 0x8
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_U0 0x8
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_POLLING_OFFSET 2
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_POLLING_MASK 0x4
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_POLLING 0x4
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_RX_DETECT_OFFSET 1
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_RX_DETECT_MASK 0x2
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_RX_DETECT 0x2
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_INACTIVE_OFFSET 0
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_INACTIVE_MASK 0x1
#define BB_CHIP_ULP_CORE_IRQ1_RAW_IN_INACTIVE 0x1
#define BB_CHIP_ULP_PHY_VERSION_MAJOR_OFFSET 16
#define BB_CHIP_ULP_PHY_VERSION_MAJOR_MASK 0xFF0000
#define BB_CHIP_ULP_PHY_VERSION_MINOR_OFFSET 8
#define BB_CHIP_ULP_PHY_VERSION_MINOR_MASK 0xFF00
#define BB_CHIP_ULP_PHY_VERSION_PATCH_OFFSET 0
#define BB_CHIP_ULP_PHY_VERSION_PATCH_MASK 0xFF
#define BB_CHIP_ULP_PHY_PIPE_CTRL_TX_SWING_OFFSET 12
#define BB_CHIP_ULP_PHY_PIPE_CTRL_TX_SWING_MASK 0x1000
#define BB_CHIP_ULP_PHY_PIPE_CTRL_TX_SWING 0x1000
#define BB_CHIP_ULP_PHY_PIPE_CTRL_TX_MARGIN_OFFSET 8
#define BB_CHIP_ULP_PHY_PIPE_CTRL_TX_MARGIN_MASK 0x700
#define BB_CHIP_ULP_PHY_PIPE_CTRL_TX_DEEMPH_OFFSET 4
#define BB_CHIP_ULP_PHY_PIPE_CTRL_TX_DEEMPH_MASK 0x30
#define BB_CHIP_ULP_PHY_PIPE_CTRL_RESET_N_OFFSET 2
#define BB_CHIP_ULP_PHY_PIPE_CTRL_RESET_N_MASK 0x4
#define BB_CHIP_ULP_PHY_PIPE_CTRL_RESET_N 0x4
#define BB_CHIP_ULP_PHY_PIPE_CTRL_RX_EQ_TRAINING_OFFSET 1
#define BB_CHIP_ULP_PHY_PIPE_CTRL_RX_EQ_TRAINING_MASK 0x2
#define BB_CHIP_ULP_PHY_PIPE_CTRL_RX_EQ_TRAINING 0x2
#define BB_CHIP_ULP_PHY_PIPE_CTRL_ELAS_BUF_MODE_OFFSET 0
#define BB_CHIP_ULP_PHY_PIPE_CTRL_ELAS_BUF_MODE_MASK 0x1
#define BB_CHIP_ULP_PHY_PIPE_CTRL_ELAS_BUF_MODE 0x1
#define BB_CHIP_ULP_PHY_COMPLIANCY_CTRL_GEN_LFPS_PING_OFFSET 0
#define BB_CHIP_ULP_PHY_COMPLIANCY_CTRL_GEN_LFPS_PING_MASK 0x1
#define BB_CHIP_ULP_PHY_COMPLIANCY_CTRL_GEN_LFPS_PING 0x1
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_DISPARITY_ERR_OFFSET 3
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_DISPARITY_ERR_MASK 0x8
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_DISPARITY_ERR 0x8
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_UNDERFLOW_OFFSET 2
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_UNDERFLOW_MASK 0x4
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_UNDERFLOW 0x4
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_OVERFLOW_OFFSET 1
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_OVERFLOW_MASK 0x2
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_OVERFLOW 0x2
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_8B10B_ERR_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_8B10B_ERR_MASK 0x1
#define BB_CHIP_ULP_PHY_STATS0_RD2CLR_CONFIG_RX_8B10B_ERR 0x1
#define BB_CHIP_ULP_PHY_STATS0_RX_8B10B_ERR_RX_8B10B_ERR_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS0_RX_8B10B_ERR_RX_8B10B_ERR_MASK 0xFFFF
#define BB_CHIP_ULP_PHY_STATS0_RX_ELASTIC_BUFF_OVERFLOW_RX_ELASTIC_BUFF_OVERFLOW_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS0_RX_ELASTIC_BUFF_OVERFLOW_RX_ELASTIC_BUFF_OVERFLOW_MASK 0xFFFF
#define BB_CHIP_ULP_PHY_STATS0_RX_ELASTIC_BUFF_UNDERFLOW_RX_ELASTIC_BUFF_UNDERFLOW_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS0_RX_ELASTIC_BUFF_UNDERFLOW_RX_ELASTIC_BUFF_UNDERFLOW_MASK 0xFFFF
#define BB_CHIP_ULP_PHY_STATS0_RX_DISPARITY_ERR_RX_DISPARITY_ERR_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS0_RX_DISPARITY_ERR_RX_DISPARITY_ERR_MASK 0xFFFF
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_RX_FRAMER_PTP_VIOLATED_OFFSET 4
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_RX_FRAMER_PTP_VIOLATED_MASK 0x10
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_RX_FRAMER_PTP_VIOLATED 0x10
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_DPP_ABORT_OFFSET 3
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_DPP_ABORT_MASK 0x8
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_DPP_ABORT 0x8
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_CRC16_CHK_FAILED_OFFSET 2
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_CRC16_CHK_FAILED_MASK 0x4
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_CRC16_CHK_FAILED 0x4
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_CRC5_CHK_FAILED_OFFSET 1
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_CRC5_CHK_FAILED_MASK 0x2
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_CRC5_CHK_FAILED 0x2
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_SKP_INSERT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_SKP_INSERT_IN_ERR_MASK 0x1
#define BB_CHIP_ULP_PHY_STATS1_RD2CLR_CONFIG_SKP_INSERT_IN_ERR 0x1
#define BB_CHIP_ULP_PHY_STATS1_SKP_INSERT_IN_ERR_SKP_INSERT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS1_SKP_INSERT_IN_ERR_SKP_INSERT_IN_ERR_MASK 0xFFFF
#define BB_CHIP_ULP_PHY_STATS1_CRC5_CHK_FAILED_CRC5_CHK_FAILED_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS1_CRC5_CHK_FAILED_CRC5_CHK_FAILED_MASK 0xFF
#define BB_CHIP_ULP_PHY_STATS1_CRC16_CHK_FAILED_CRC16_CHK_FAILED_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS1_CRC16_CHK_FAILED_CRC16_CHK_FAILED_MASK 0xFF
#define BB_CHIP_ULP_PHY_STATS1_DPP_ABORT_DPP_ABORT_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS1_DPP_ABORT_DPP_ABORT_MASK 0xFF
#define BB_CHIP_ULP_PHY_STATS1_RX_FRAMER_PTP_VIOLATED_RX_FRAMER_PTP_VIOLATED_OFFSET 0
#define BB_CHIP_ULP_PHY_STATS1_RX_FRAMER_PTP_VIOLATED_RX_FRAMER_PTP_VIOLATED_MASK 0xFF
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_RX_FRAMER_PTP_VIOLATED_OFFSET 4
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_RX_FRAMER_PTP_VIOLATED_MASK 0x10
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_RX_FRAMER_PTP_VIOLATED 0x10
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_DPP_ABORT_OFFSET 3
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_DPP_ABORT_MASK 0x8
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_DPP_ABORT 0x8
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_CRC16_CHK_FAILED_OFFSET 2
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_CRC16_CHK_FAILED_MASK 0x4
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_CRC16_CHK_FAILED 0x4
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_CRC5_CHK_FAILED_OFFSET 1
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_CRC5_CHK_FAILED_MASK 0x2
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_CRC5_CHK_FAILED 0x2
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_SKP_INSERT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_SKP_INSERT_IN_ERR_MASK 0x1
#define BB_CHIP_ULP_PHY_IRQ0_ENABLE_SKP_INSERT_IN_ERR 0x1
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_RX_FRAMER_PTP_VIOLATED_OFFSET 4
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_RX_FRAMER_PTP_VIOLATED_MASK 0x10
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_RX_FRAMER_PTP_VIOLATED 0x10
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_DPP_ABORT_OFFSET 3
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_DPP_ABORT_MASK 0x8
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_DPP_ABORT 0x8
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_CRC16_CHK_FAILED_OFFSET 2
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_CRC16_CHK_FAILED_MASK 0x4
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_CRC16_CHK_FAILED 0x4
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_CRC5_CHK_FAILED_OFFSET 1
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_CRC5_CHK_FAILED_MASK 0x2
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_CRC5_CHK_FAILED 0x2
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_SKP_INSERT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_SKP_INSERT_IN_ERR_MASK 0x1
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_SKP_INSERT_IN_ERR 0x1
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_RX_FRAMER_PTP_VIOLATED_OFFSET 4
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_RX_FRAMER_PTP_VIOLATED_MASK 0x10
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_RX_FRAMER_PTP_VIOLATED 0x10
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_DPP_ABORT_OFFSET 3
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_DPP_ABORT_MASK 0x8
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_DPP_ABORT 0x8
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_CRC16_CHK_FAILED_OFFSET 2
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_CRC16_CHK_FAILED_MASK 0x4
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_CRC16_CHK_FAILED 0x4
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_CRC5_CHK_FAILED_OFFSET 1
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_CRC5_CHK_FAILED_MASK 0x2
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_CRC5_CHK_FAILED 0x2
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_SKP_INSERT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_SKP_INSERT_IN_ERR_MASK 0x1
#define BB_CHIP_ULP_PHY_IRQ0_PENDING_IRQ_SKP_INSERT_IN_ERR 0x1
#define BB_CHIP_ULP_PHY_IRQ0_RAW_RX_FRAMER_PTP_VIOLATED_OFFSET 4
#define BB_CHIP_ULP_PHY_IRQ0_RAW_RX_FRAMER_PTP_VIOLATED_MASK 0x10
#define BB_CHIP_ULP_PHY_IRQ0_RAW_RX_FRAMER_PTP_VIOLATED 0x10
#define BB_CHIP_ULP_PHY_IRQ0_RAW_DPP_ABORT_OFFSET 3
#define BB_CHIP_ULP_PHY_IRQ0_RAW_DPP_ABORT_MASK 0x8
#define BB_CHIP_ULP_PHY_IRQ0_RAW_DPP_ABORT 0x8
#define BB_CHIP_ULP_PHY_IRQ0_RAW_CRC16_CHK_FAILED_OFFSET 2
#define BB_CHIP_ULP_PHY_IRQ0_RAW_CRC16_CHK_FAILED_MASK 0x4
#define BB_CHIP_ULP_PHY_IRQ0_RAW_CRC16_CHK_FAILED 0x4
#define BB_CHIP_ULP_PHY_IRQ0_RAW_CRC5_CHK_FAILED_OFFSET 1
#define BB_CHIP_ULP_PHY_IRQ0_RAW_CRC5_CHK_FAILED_MASK 0x2
#define BB_CHIP_ULP_PHY_IRQ0_RAW_CRC5_CHK_FAILED 0x2
#define BB_CHIP_ULP_PHY_IRQ0_RAW_SKP_INSERT_IN_ERR_OFFSET 0
#define BB_CHIP_ULP_PHY_IRQ0_RAW_SKP_INSERT_IN_ERR_MASK 0x1
#define BB_CHIP_ULP_PHY_IRQ0_RAW_SKP_INSERT_IN_ERR 0x1
#endif /* _BB_CHIP_REGS_H_ */

/* end */
