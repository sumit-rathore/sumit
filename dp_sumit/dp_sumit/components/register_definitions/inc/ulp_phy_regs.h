/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Mohsen Nahvi*/
/* generated by      : Mohsen.Nahvi*/
/* generated from    : C:\cygwin64\home\Mohsen.Nahvi\blackbird_current\m_ulp\regs\ids\ulp_phy\ulp_phy_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/*block : ulp_phy */

#ifndef _ULP_PHY_REGS_H_
#define _ULP_PHY_REGS_H_

#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x3 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x3 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv13 : 19;
            uint32_t tx_swing : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t tx_margin : 3;           /* 10:8 SW=rw HW=ro 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t tx_deemph : 2;           /* 5:4 SW=rw HW=ro 0x1 */
            
            uint32_t resv3 : 1;
            uint32_t reset_n : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rx_eq_training : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t elas_buf_mode : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t elas_buf_mode : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rx_eq_training : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t reset_n : 1;           /* 2 SW=rw HW=ro 0x0 */
            
            uint32_t resv3 : 1;
            uint32_t tx_deemph : 2;           /* 4:5 SW=rw HW=ro 0x1 */
            
            uint32_t resv6 : 2;
            uint32_t tx_margin : 3;           /* 8:10 SW=rw HW=ro 0x0 */
            
            uint32_t resv11 : 1;
            uint32_t tx_swing : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t resv13 : 19;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_pipe_ctrl;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv1 : 31;
            uint32_t gen_lfps_ping : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t gen_lfps_ping : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t resv1 : 31;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_compliancy_ctrl;

/*section : stats0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv4 : 28;
            uint32_t rx_disparity_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rx_elastic_buff_underflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rx_elastic_buff_overflow : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rx_8b10b_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_8b10b_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t rx_elastic_buff_overflow : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rx_elastic_buff_underflow : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t rx_disparity_err : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t resv4 : 28;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats0_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rx_8b10b_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_8b10b_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats0_rx_8b10b_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rx_elastic_buff_overflow : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_elastic_buff_overflow : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats0_rx_elastic_buff_overflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rx_elastic_buff_underflow : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_elastic_buff_underflow : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats0_rx_elastic_buff_underflow;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t rx_disparity_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_disparity_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats0_rx_disparity_err;

typedef struct {
    ulp_phy_stats0_rd2clr_config  rd2clr_config;
    ulp_phy_stats0_rx_8b10b_err  rx_8b10b_err;
    ulp_phy_stats0_rx_elastic_buff_overflow  rx_elastic_buff_overflow;
    ulp_phy_stats0_rx_elastic_buff_underflow  rx_elastic_buff_underflow;
    ulp_phy_stats0_rx_disparity_err  rx_disparity_err;
    
    
    
} ulp_phy_stats0;


/*section : stats1 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t skp_insert_in_err : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=rw HW=ro 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats1_rd2clr_config;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv16 : 16;
            uint32_t skp_insert_in_err : 16;           /* 15:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 16;           /* 0:15 SW=ro HW=wo 0x0 */
            uint32_t resv16 : 16;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats1_skp_insert_in_err;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t crc5_chk_failed : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t crc5_chk_failed : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats1_crc5_chk_failed;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t crc16_chk_failed : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t crc16_chk_failed : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats1_crc16_chk_failed;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t dpp_abort : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t dpp_abort : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats1_dpp_abort;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t rx_framer_ptp_violated : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_framer_ptp_violated : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_stats1_rx_framer_ptp_violated;

typedef struct {
    ulp_phy_stats1_rd2clr_config  rd2clr_config;
    ulp_phy_stats1_skp_insert_in_err  skp_insert_in_err;
    ulp_phy_stats1_crc5_chk_failed  crc5_chk_failed;
    ulp_phy_stats1_crc16_chk_failed  crc16_chk_failed;
    ulp_phy_stats1_dpp_abort  dpp_abort;
    ulp_phy_stats1_rx_framer_ptp_violated  rx_framer_ptp_violated;
    
    
    
} ulp_phy_stats1;


/*section : irq0 */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t skp_insert_in_err : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=rw HW=na 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=rw HW=na 0x0 */
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_irq0_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t skp_insert_in_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=r/w1c HW=wo 0x0 */
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_irq0_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t skp_insert_in_err : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=ro HW=na 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=ro HW=na 0x0 */
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_irq0_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv5 : 27;
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t skp_insert_in_err : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t skp_insert_in_err : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t crc5_chk_failed : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t crc16_chk_failed : 1;           /* 2 SW=ro HW=wo 0x0 */
            uint32_t dpp_abort : 1;           /* 3 SW=ro HW=wo 0x0 */
            uint32_t rx_framer_ptp_violated : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t resv5 : 27;
        } bf;
        
    #endif
    uint32_t  dw;
} ulp_phy_irq0_raw;

typedef struct {
    ulp_phy_irq0_enable  enable;
    ulp_phy_irq0_pending  pending;
    ulp_phy_irq0_pending_irq  pending_irq;
    ulp_phy_irq0_raw  raw;
    
    
    
} ulp_phy_irq0;


typedef struct {
    ulp_phy_version  version;
    ulp_phy_pipe_ctrl  pipe_ctrl;
    ulp_phy_compliancy_ctrl  compliancy_ctrl;
    
    union {
        ulp_phy_stats0 s;
        uint8_t filler[0x14];
    } stats0;
    
    union {
        ulp_phy_stats1 s;
        uint8_t filler[0x18];
    } stats1;
    
    union {
        ulp_phy_irq0 s;
        uint8_t filler[0x10];
    } irq0;
    
    
    uint8_t filler11[0xB8];
    
    
} ulp_phy_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define ulp_phy_version_READMASK 0xFFFFFF
#define ulp_phy_version_WRITEMASK 0x0
#define ulp_phy_version_VOLATILEMASK 0x0
#define ulp_phy_version_RESETMASK 0xFFFFFF
#define ulp_phy_version_DEFAULT 0x00030200

#define ulp_phy_pipe_ctrl_READMASK 0x1737
#define ulp_phy_pipe_ctrl_WRITEMASK 0x1737
#define ulp_phy_pipe_ctrl_VOLATILEMASK 0x0
#define ulp_phy_pipe_ctrl_RESETMASK 0x1737
#define ulp_phy_pipe_ctrl_DEFAULT 0x00000010

#define ulp_phy_compliancy_ctrl_READMASK 0x1
#define ulp_phy_compliancy_ctrl_WRITEMASK 0x1
#define ulp_phy_compliancy_ctrl_VOLATILEMASK 0x0
#define ulp_phy_compliancy_ctrl_RESETMASK 0x1
#define ulp_phy_compliancy_ctrl_DEFAULT 0x00000000

#define ulp_phy_stats0_rd2clr_config_READMASK 0xF
#define ulp_phy_stats0_rd2clr_config_WRITEMASK 0xF
#define ulp_phy_stats0_rd2clr_config_VOLATILEMASK 0x0
#define ulp_phy_stats0_rd2clr_config_RESETMASK 0xF
#define ulp_phy_stats0_rd2clr_config_DEFAULT 0x00000000

#define ulp_phy_stats0_rx_8b10b_err_READMASK 0xFFFF
#define ulp_phy_stats0_rx_8b10b_err_WRITEMASK 0x0
#define ulp_phy_stats0_rx_8b10b_err_VOLATILEMASK 0xFFFF
#define ulp_phy_stats0_rx_8b10b_err_RESETMASK 0xFFFF
#define ulp_phy_stats0_rx_8b10b_err_DEFAULT 0x00000000

#define ulp_phy_stats0_rx_elastic_buff_overflow_READMASK 0xFFFF
#define ulp_phy_stats0_rx_elastic_buff_overflow_WRITEMASK 0x0
#define ulp_phy_stats0_rx_elastic_buff_overflow_VOLATILEMASK 0xFFFF
#define ulp_phy_stats0_rx_elastic_buff_overflow_RESETMASK 0xFFFF
#define ulp_phy_stats0_rx_elastic_buff_overflow_DEFAULT 0x00000000

#define ulp_phy_stats0_rx_elastic_buff_underflow_READMASK 0xFFFF
#define ulp_phy_stats0_rx_elastic_buff_underflow_WRITEMASK 0x0
#define ulp_phy_stats0_rx_elastic_buff_underflow_VOLATILEMASK 0xFFFF
#define ulp_phy_stats0_rx_elastic_buff_underflow_RESETMASK 0xFFFF
#define ulp_phy_stats0_rx_elastic_buff_underflow_DEFAULT 0x00000000

#define ulp_phy_stats0_rx_disparity_err_READMASK 0xFFFF
#define ulp_phy_stats0_rx_disparity_err_WRITEMASK 0x0
#define ulp_phy_stats0_rx_disparity_err_VOLATILEMASK 0xFFFF
#define ulp_phy_stats0_rx_disparity_err_RESETMASK 0xFFFF
#define ulp_phy_stats0_rx_disparity_err_DEFAULT 0x00000000

#define ulp_phy_stats1_rd2clr_config_READMASK 0x1F
#define ulp_phy_stats1_rd2clr_config_WRITEMASK 0x1F
#define ulp_phy_stats1_rd2clr_config_VOLATILEMASK 0x0
#define ulp_phy_stats1_rd2clr_config_RESETMASK 0x1F
#define ulp_phy_stats1_rd2clr_config_DEFAULT 0x00000000

#define ulp_phy_stats1_skp_insert_in_err_READMASK 0xFFFF
#define ulp_phy_stats1_skp_insert_in_err_WRITEMASK 0x0
#define ulp_phy_stats1_skp_insert_in_err_VOLATILEMASK 0xFFFF
#define ulp_phy_stats1_skp_insert_in_err_RESETMASK 0xFFFF
#define ulp_phy_stats1_skp_insert_in_err_DEFAULT 0x00000000

#define ulp_phy_stats1_crc5_chk_failed_READMASK 0xFF
#define ulp_phy_stats1_crc5_chk_failed_WRITEMASK 0x0
#define ulp_phy_stats1_crc5_chk_failed_VOLATILEMASK 0xFF
#define ulp_phy_stats1_crc5_chk_failed_RESETMASK 0xFF
#define ulp_phy_stats1_crc5_chk_failed_DEFAULT 0x00000000

#define ulp_phy_stats1_crc16_chk_failed_READMASK 0xFF
#define ulp_phy_stats1_crc16_chk_failed_WRITEMASK 0x0
#define ulp_phy_stats1_crc16_chk_failed_VOLATILEMASK 0xFF
#define ulp_phy_stats1_crc16_chk_failed_RESETMASK 0xFF
#define ulp_phy_stats1_crc16_chk_failed_DEFAULT 0x00000000

#define ulp_phy_stats1_dpp_abort_READMASK 0xFF
#define ulp_phy_stats1_dpp_abort_WRITEMASK 0x0
#define ulp_phy_stats1_dpp_abort_VOLATILEMASK 0xFF
#define ulp_phy_stats1_dpp_abort_RESETMASK 0xFF
#define ulp_phy_stats1_dpp_abort_DEFAULT 0x00000000

#define ulp_phy_stats1_rx_framer_ptp_violated_READMASK 0xFF
#define ulp_phy_stats1_rx_framer_ptp_violated_WRITEMASK 0x0
#define ulp_phy_stats1_rx_framer_ptp_violated_VOLATILEMASK 0xFF
#define ulp_phy_stats1_rx_framer_ptp_violated_RESETMASK 0xFF
#define ulp_phy_stats1_rx_framer_ptp_violated_DEFAULT 0x00000000

#define ulp_phy_irq0_enable_READMASK 0x1F
#define ulp_phy_irq0_enable_WRITEMASK 0x1F
#define ulp_phy_irq0_enable_VOLATILEMASK 0x0
#define ulp_phy_irq0_enable_RESETMASK 0x1F
#define ulp_phy_irq0_enable_DEFAULT 0x00000000

#define ulp_phy_irq0_pending_READMASK 0x1F
#define ulp_phy_irq0_pending_WRITEMASK 0x1F
#define ulp_phy_irq0_pending_VOLATILEMASK 0x1F
#define ulp_phy_irq0_pending_RESETMASK 0x1F
#define ulp_phy_irq0_pending_DEFAULT 0x00000000

#define ulp_phy_irq0_pending_irq_READMASK 0x1F
#define ulp_phy_irq0_pending_irq_WRITEMASK 0x0
#define ulp_phy_irq0_pending_irq_VOLATILEMASK 0x0
#define ulp_phy_irq0_pending_irq_RESETMASK 0x1F
#define ulp_phy_irq0_pending_irq_DEFAULT 0x00000000

#define ulp_phy_irq0_raw_READMASK 0x1F
#define ulp_phy_irq0_raw_WRITEMASK 0x0
#define ulp_phy_irq0_raw_VOLATILEMASK 0x1F
#define ulp_phy_irq0_raw_RESETMASK 0x1F
#define ulp_phy_irq0_raw_DEFAULT 0x00000000

#define ulp_phy_s_SIZE 0x100
#define ulp_phy_version_SIZE 0x4
#define ulp_phy_pipe_ctrl_SIZE 0x4
#define ulp_phy_compliancy_ctrl_SIZE 0x4
#define ulp_phy_stats0_SIZE 0x14
#define ulp_phy_stats0_rd2clr_config_SIZE 0x4
#define ulp_phy_stats0_rx_8b10b_err_SIZE 0x4
#define ulp_phy_stats0_rx_elastic_buff_overflow_SIZE 0x4
#define ulp_phy_stats0_rx_elastic_buff_underflow_SIZE 0x4
#define ulp_phy_stats0_rx_disparity_err_SIZE 0x4
#define ulp_phy_stats1_SIZE 0x18
#define ulp_phy_stats1_rd2clr_config_SIZE 0x4
#define ulp_phy_stats1_skp_insert_in_err_SIZE 0x4
#define ulp_phy_stats1_crc5_chk_failed_SIZE 0x4
#define ulp_phy_stats1_crc16_chk_failed_SIZE 0x4
#define ulp_phy_stats1_dpp_abort_SIZE 0x4
#define ulp_phy_stats1_rx_framer_ptp_violated_SIZE 0x4
#define ulp_phy_irq0_SIZE 0x10
#define ulp_phy_irq0_enable_SIZE 0x4
#define ulp_phy_irq0_pending_SIZE 0x4
#define ulp_phy_irq0_pending_irq_SIZE 0x4
#define ulp_phy_irq0_raw_SIZE 0x4

#define ulp_phy_s_OFFSET 0x0
#define ulp_phy_version_OFFSET 0x0
#define ulp_phy_pipe_ctrl_OFFSET 0x4
#define ulp_phy_compliancy_ctrl_OFFSET 0x8
#define ulp_phy_stats0_OFFSET 0xC
#define ulp_phy_stats0_rd2clr_config_OFFSET 0x0
#define ulp_phy_stats0_rx_8b10b_err_OFFSET 0x4
#define ulp_phy_stats0_rx_elastic_buff_overflow_OFFSET 0x8
#define ulp_phy_stats0_rx_elastic_buff_underflow_OFFSET 0xC
#define ulp_phy_stats0_rx_disparity_err_OFFSET 0x10
#define ulp_phy_stats1_OFFSET 0x20
#define ulp_phy_stats1_rd2clr_config_OFFSET 0x0
#define ulp_phy_stats1_skp_insert_in_err_OFFSET 0x4
#define ulp_phy_stats1_crc5_chk_failed_OFFSET 0x8
#define ulp_phy_stats1_crc16_chk_failed_OFFSET 0xC
#define ulp_phy_stats1_dpp_abort_OFFSET 0x10
#define ulp_phy_stats1_rx_framer_ptp_violated_OFFSET 0x14
#define ulp_phy_irq0_OFFSET 0x38
#define ulp_phy_irq0_enable_OFFSET 0x0
#define ulp_phy_irq0_pending_OFFSET 0x4
#define ulp_phy_irq0_pending_irq_OFFSET 0x8
#define ulp_phy_irq0_raw_OFFSET 0xC

#define ulp_phy_s_ADDRESS 0x000
#define ulp_phy_version_ADDRESS 0x000
#define ulp_phy_pipe_ctrl_ADDRESS 0x004
#define ulp_phy_compliancy_ctrl_ADDRESS 0x008
#define ulp_phy_stats0_ADDRESS 0x00C
#define ulp_phy_stats0_rd2clr_config_ADDRESS 0x00C
#define ulp_phy_stats0_rx_8b10b_err_ADDRESS 0x010
#define ulp_phy_stats0_rx_elastic_buff_overflow_ADDRESS 0x014
#define ulp_phy_stats0_rx_elastic_buff_underflow_ADDRESS 0x018
#define ulp_phy_stats0_rx_disparity_err_ADDRESS 0x01C
#define ulp_phy_stats1_ADDRESS 0x020
#define ulp_phy_stats1_rd2clr_config_ADDRESS 0x020
#define ulp_phy_stats1_skp_insert_in_err_ADDRESS 0x024
#define ulp_phy_stats1_crc5_chk_failed_ADDRESS 0x028
#define ulp_phy_stats1_crc16_chk_failed_ADDRESS 0x02C
#define ulp_phy_stats1_dpp_abort_ADDRESS 0x030
#define ulp_phy_stats1_rx_framer_ptp_violated_ADDRESS 0x034
#define ulp_phy_irq0_ADDRESS 0x038
#define ulp_phy_irq0_enable_ADDRESS 0x038
#define ulp_phy_irq0_pending_ADDRESS 0x03C
#define ulp_phy_irq0_pending_irq_ADDRESS 0x040
#define ulp_phy_irq0_raw_ADDRESS 0x044
#define ULP_PHY_VERSION_MAJOR_OFFSET 16
#define ULP_PHY_VERSION_MAJOR_MASK 0xFF0000
#define ULP_PHY_VERSION_MINOR_OFFSET 8
#define ULP_PHY_VERSION_MINOR_MASK 0xFF00
#define ULP_PHY_VERSION_PATCH_OFFSET 0
#define ULP_PHY_VERSION_PATCH_MASK 0xFF
#define ULP_PHY_PIPE_CTRL_TX_SWING_OFFSET 12
#define ULP_PHY_PIPE_CTRL_TX_SWING_MASK 0x1000
#define ULP_PHY_PIPE_CTRL_TX_SWING 0x1000
#define ULP_PHY_PIPE_CTRL_TX_MARGIN_OFFSET 8
#define ULP_PHY_PIPE_CTRL_TX_MARGIN_MASK 0x700
#define ULP_PHY_PIPE_CTRL_TX_DEEMPH_OFFSET 4
#define ULP_PHY_PIPE_CTRL_TX_DEEMPH_MASK 0x30
#define ULP_PHY_PIPE_CTRL_RESET_N_OFFSET 2
#define ULP_PHY_PIPE_CTRL_RESET_N_MASK 0x4
#define ULP_PHY_PIPE_CTRL_RESET_N 0x4
#define ULP_PHY_PIPE_CTRL_RX_EQ_TRAINING_OFFSET 1
#define ULP_PHY_PIPE_CTRL_RX_EQ_TRAINING_MASK 0x2
#define ULP_PHY_PIPE_CTRL_RX_EQ_TRAINING 0x2
#define ULP_PHY_PIPE_CTRL_ELAS_BUF_MODE_OFFSET 0
#define ULP_PHY_PIPE_CTRL_ELAS_BUF_MODE_MASK 0x1
#define ULP_PHY_PIPE_CTRL_ELAS_BUF_MODE 0x1
#define ULP_PHY_COMPLIANCY_CTRL_GEN_LFPS_PING_OFFSET 0
#define ULP_PHY_COMPLIANCY_CTRL_GEN_LFPS_PING_MASK 0x1
#define ULP_PHY_COMPLIANCY_CTRL_GEN_LFPS_PING 0x1
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_DISPARITY_ERR_OFFSET 3
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_DISPARITY_ERR_MASK 0x8
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_DISPARITY_ERR 0x8
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_UNDERFLOW_OFFSET 2
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_UNDERFLOW_MASK 0x4
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_UNDERFLOW 0x4
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_OVERFLOW_OFFSET 1
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_OVERFLOW_MASK 0x2
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_ELASTIC_BUFF_OVERFLOW 0x2
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_8B10B_ERR_OFFSET 0
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_8B10B_ERR_MASK 0x1
#define ULP_PHY_STATS0_RD2CLR_CONFIG_RX_8B10B_ERR 0x1
#define ULP_PHY_STATS0_RX_8B10B_ERR_RX_8B10B_ERR_OFFSET 0
#define ULP_PHY_STATS0_RX_8B10B_ERR_RX_8B10B_ERR_MASK 0xFFFF
#define ULP_PHY_STATS0_RX_ELASTIC_BUFF_OVERFLOW_RX_ELASTIC_BUFF_OVERFLOW_OFFSET 0
#define ULP_PHY_STATS0_RX_ELASTIC_BUFF_OVERFLOW_RX_ELASTIC_BUFF_OVERFLOW_MASK 0xFFFF
#define ULP_PHY_STATS0_RX_ELASTIC_BUFF_UNDERFLOW_RX_ELASTIC_BUFF_UNDERFLOW_OFFSET 0
#define ULP_PHY_STATS0_RX_ELASTIC_BUFF_UNDERFLOW_RX_ELASTIC_BUFF_UNDERFLOW_MASK 0xFFFF
#define ULP_PHY_STATS0_RX_DISPARITY_ERR_RX_DISPARITY_ERR_OFFSET 0
#define ULP_PHY_STATS0_RX_DISPARITY_ERR_RX_DISPARITY_ERR_MASK 0xFFFF
#define ULP_PHY_STATS1_RD2CLR_CONFIG_RX_FRAMER_PTP_VIOLATED_OFFSET 4
#define ULP_PHY_STATS1_RD2CLR_CONFIG_RX_FRAMER_PTP_VIOLATED_MASK 0x10
#define ULP_PHY_STATS1_RD2CLR_CONFIG_RX_FRAMER_PTP_VIOLATED 0x10
#define ULP_PHY_STATS1_RD2CLR_CONFIG_DPP_ABORT_OFFSET 3
#define ULP_PHY_STATS1_RD2CLR_CONFIG_DPP_ABORT_MASK 0x8
#define ULP_PHY_STATS1_RD2CLR_CONFIG_DPP_ABORT 0x8
#define ULP_PHY_STATS1_RD2CLR_CONFIG_CRC16_CHK_FAILED_OFFSET 2
#define ULP_PHY_STATS1_RD2CLR_CONFIG_CRC16_CHK_FAILED_MASK 0x4
#define ULP_PHY_STATS1_RD2CLR_CONFIG_CRC16_CHK_FAILED 0x4
#define ULP_PHY_STATS1_RD2CLR_CONFIG_CRC5_CHK_FAILED_OFFSET 1
#define ULP_PHY_STATS1_RD2CLR_CONFIG_CRC5_CHK_FAILED_MASK 0x2
#define ULP_PHY_STATS1_RD2CLR_CONFIG_CRC5_CHK_FAILED 0x2
#define ULP_PHY_STATS1_RD2CLR_CONFIG_SKP_INSERT_IN_ERR_OFFSET 0
#define ULP_PHY_STATS1_RD2CLR_CONFIG_SKP_INSERT_IN_ERR_MASK 0x1
#define ULP_PHY_STATS1_RD2CLR_CONFIG_SKP_INSERT_IN_ERR 0x1
#define ULP_PHY_STATS1_SKP_INSERT_IN_ERR_SKP_INSERT_IN_ERR_OFFSET 0
#define ULP_PHY_STATS1_SKP_INSERT_IN_ERR_SKP_INSERT_IN_ERR_MASK 0xFFFF
#define ULP_PHY_STATS1_CRC5_CHK_FAILED_CRC5_CHK_FAILED_OFFSET 0
#define ULP_PHY_STATS1_CRC5_CHK_FAILED_CRC5_CHK_FAILED_MASK 0xFF
#define ULP_PHY_STATS1_CRC16_CHK_FAILED_CRC16_CHK_FAILED_OFFSET 0
#define ULP_PHY_STATS1_CRC16_CHK_FAILED_CRC16_CHK_FAILED_MASK 0xFF
#define ULP_PHY_STATS1_DPP_ABORT_DPP_ABORT_OFFSET 0
#define ULP_PHY_STATS1_DPP_ABORT_DPP_ABORT_MASK 0xFF
#define ULP_PHY_STATS1_RX_FRAMER_PTP_VIOLATED_RX_FRAMER_PTP_VIOLATED_OFFSET 0
#define ULP_PHY_STATS1_RX_FRAMER_PTP_VIOLATED_RX_FRAMER_PTP_VIOLATED_MASK 0xFF
#define ULP_PHY_IRQ0_ENABLE_RX_FRAMER_PTP_VIOLATED_OFFSET 4
#define ULP_PHY_IRQ0_ENABLE_RX_FRAMER_PTP_VIOLATED_MASK 0x10
#define ULP_PHY_IRQ0_ENABLE_RX_FRAMER_PTP_VIOLATED 0x10
#define ULP_PHY_IRQ0_ENABLE_DPP_ABORT_OFFSET 3
#define ULP_PHY_IRQ0_ENABLE_DPP_ABORT_MASK 0x8
#define ULP_PHY_IRQ0_ENABLE_DPP_ABORT 0x8
#define ULP_PHY_IRQ0_ENABLE_CRC16_CHK_FAILED_OFFSET 2
#define ULP_PHY_IRQ0_ENABLE_CRC16_CHK_FAILED_MASK 0x4
#define ULP_PHY_IRQ0_ENABLE_CRC16_CHK_FAILED 0x4
#define ULP_PHY_IRQ0_ENABLE_CRC5_CHK_FAILED_OFFSET 1
#define ULP_PHY_IRQ0_ENABLE_CRC5_CHK_FAILED_MASK 0x2
#define ULP_PHY_IRQ0_ENABLE_CRC5_CHK_FAILED 0x2
#define ULP_PHY_IRQ0_ENABLE_SKP_INSERT_IN_ERR_OFFSET 0
#define ULP_PHY_IRQ0_ENABLE_SKP_INSERT_IN_ERR_MASK 0x1
#define ULP_PHY_IRQ0_ENABLE_SKP_INSERT_IN_ERR 0x1
#define ULP_PHY_IRQ0_PENDING_RX_FRAMER_PTP_VIOLATED_OFFSET 4
#define ULP_PHY_IRQ0_PENDING_RX_FRAMER_PTP_VIOLATED_MASK 0x10
#define ULP_PHY_IRQ0_PENDING_RX_FRAMER_PTP_VIOLATED 0x10
#define ULP_PHY_IRQ0_PENDING_DPP_ABORT_OFFSET 3
#define ULP_PHY_IRQ0_PENDING_DPP_ABORT_MASK 0x8
#define ULP_PHY_IRQ0_PENDING_DPP_ABORT 0x8
#define ULP_PHY_IRQ0_PENDING_CRC16_CHK_FAILED_OFFSET 2
#define ULP_PHY_IRQ0_PENDING_CRC16_CHK_FAILED_MASK 0x4
#define ULP_PHY_IRQ0_PENDING_CRC16_CHK_FAILED 0x4
#define ULP_PHY_IRQ0_PENDING_CRC5_CHK_FAILED_OFFSET 1
#define ULP_PHY_IRQ0_PENDING_CRC5_CHK_FAILED_MASK 0x2
#define ULP_PHY_IRQ0_PENDING_CRC5_CHK_FAILED 0x2
#define ULP_PHY_IRQ0_PENDING_SKP_INSERT_IN_ERR_OFFSET 0
#define ULP_PHY_IRQ0_PENDING_SKP_INSERT_IN_ERR_MASK 0x1
#define ULP_PHY_IRQ0_PENDING_SKP_INSERT_IN_ERR 0x1
#define ULP_PHY_IRQ0_PENDING_IRQ_RX_FRAMER_PTP_VIOLATED_OFFSET 4
#define ULP_PHY_IRQ0_PENDING_IRQ_RX_FRAMER_PTP_VIOLATED_MASK 0x10
#define ULP_PHY_IRQ0_PENDING_IRQ_RX_FRAMER_PTP_VIOLATED 0x10
#define ULP_PHY_IRQ0_PENDING_IRQ_DPP_ABORT_OFFSET 3
#define ULP_PHY_IRQ0_PENDING_IRQ_DPP_ABORT_MASK 0x8
#define ULP_PHY_IRQ0_PENDING_IRQ_DPP_ABORT 0x8
#define ULP_PHY_IRQ0_PENDING_IRQ_CRC16_CHK_FAILED_OFFSET 2
#define ULP_PHY_IRQ0_PENDING_IRQ_CRC16_CHK_FAILED_MASK 0x4
#define ULP_PHY_IRQ0_PENDING_IRQ_CRC16_CHK_FAILED 0x4
#define ULP_PHY_IRQ0_PENDING_IRQ_CRC5_CHK_FAILED_OFFSET 1
#define ULP_PHY_IRQ0_PENDING_IRQ_CRC5_CHK_FAILED_MASK 0x2
#define ULP_PHY_IRQ0_PENDING_IRQ_CRC5_CHK_FAILED 0x2
#define ULP_PHY_IRQ0_PENDING_IRQ_SKP_INSERT_IN_ERR_OFFSET 0
#define ULP_PHY_IRQ0_PENDING_IRQ_SKP_INSERT_IN_ERR_MASK 0x1
#define ULP_PHY_IRQ0_PENDING_IRQ_SKP_INSERT_IN_ERR 0x1
#define ULP_PHY_IRQ0_RAW_RX_FRAMER_PTP_VIOLATED_OFFSET 4
#define ULP_PHY_IRQ0_RAW_RX_FRAMER_PTP_VIOLATED_MASK 0x10
#define ULP_PHY_IRQ0_RAW_RX_FRAMER_PTP_VIOLATED 0x10
#define ULP_PHY_IRQ0_RAW_DPP_ABORT_OFFSET 3
#define ULP_PHY_IRQ0_RAW_DPP_ABORT_MASK 0x8
#define ULP_PHY_IRQ0_RAW_DPP_ABORT 0x8
#define ULP_PHY_IRQ0_RAW_CRC16_CHK_FAILED_OFFSET 2
#define ULP_PHY_IRQ0_RAW_CRC16_CHK_FAILED_MASK 0x4
#define ULP_PHY_IRQ0_RAW_CRC16_CHK_FAILED 0x4
#define ULP_PHY_IRQ0_RAW_CRC5_CHK_FAILED_OFFSET 1
#define ULP_PHY_IRQ0_RAW_CRC5_CHK_FAILED_MASK 0x2
#define ULP_PHY_IRQ0_RAW_CRC5_CHK_FAILED 0x2
#define ULP_PHY_IRQ0_RAW_SKP_INSERT_IN_ERR_OFFSET 0
#define ULP_PHY_IRQ0_RAW_SKP_INSERT_IN_ERR_MASK 0x1
#define ULP_PHY_IRQ0_RAW_SKP_INSERT_IN_ERR 0x1
#endif /* _ULP_PHY_REGS_H_ */

/* end */
