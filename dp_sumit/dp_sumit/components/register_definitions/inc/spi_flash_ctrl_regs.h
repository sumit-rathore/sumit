/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Remco van Steeden*/
/* generated by      : Remco.vanSteeden*/
/* generated from    : C:\cygwin64\home\Remco.VanSteeden\blackbird_vc707\m_spi_flash_ctrl\regs\ids\spi_flash_ctrl_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/*block : spi_flash_ctrl */

#ifndef _SPI_FLASH_CTRL_REGS_H_
#define _SPI_FLASH_CTRL_REGS_H_

#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x2 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x2 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x3 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x3 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x2 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x2 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t sck_freerun : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv24 : 7;
            uint32_t io_out_defaults : 4;           /* 23:20 SW=rw HW=ro 0xF */
            uint32_t io_tri_defaults : 4;           /* 19:16 SW=rw HW=ro 0xF */
            uint32_t sck_oe_deassert_cfg : 4;           /* 15:12 SW=rw HW=ro 0x1 */
            uint32_t cs_deassert_cfg : 4;           /* 11:8 SW=rw HW=ro 0x2 */
            uint32_t sck_oe_assert_cfg : 4;           /* 7:4 SW=rw HW=ro 0x1 */
            uint32_t cs_assert_cfg : 4;           /* 3:0 SW=rw HW=ro 0x2 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cs_assert_cfg : 4;           /* 0:3 SW=rw HW=ro 0x2 */
            uint32_t sck_oe_assert_cfg : 4;           /* 4:7 SW=rw HW=ro 0x1 */
            uint32_t cs_deassert_cfg : 4;           /* 8:11 SW=rw HW=ro 0x2 */
            uint32_t sck_oe_deassert_cfg : 4;           /* 12:15 SW=rw HW=ro 0x1 */
            uint32_t io_tri_defaults : 4;           /* 16:19 SW=rw HW=ro 0xF */
            uint32_t io_out_defaults : 4;           /* 20:23 SW=rw HW=ro 0xF */
            
            uint32_t resv24 : 7;
            uint32_t sck_freerun : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_generic_cfg;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} spi_flash_ctrl_addr_offset;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} spi_flash_ctrl_addr;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t tr_gap_p3 : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv12 : 4;
            uint32_t io_mask_data : 4;           /* 11:8 SW=rw HW=ro 0x2 */
            uint32_t io_mask_addr : 4;           /* 7:4 SW=rw HW=ro 0x1 */
            uint32_t io_mask_cmd : 4;           /* 3:0 SW=rw HW=ro 0x1 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t io_mask_cmd : 4;           /* 0:3 SW=rw HW=ro 0x1 */
            uint32_t io_mask_addr : 4;           /* 4:7 SW=rw HW=ro 0x1 */
            uint32_t io_mask_data : 4;           /* 8:11 SW=rw HW=ro 0x2 */
            
            uint32_t resv12 : 4;
            uint32_t tr_gap_p3 : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_basic_cfg;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t go : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv26 : 5;
            uint32_t addr_mode : 1;           /* 25 SW=rw HW=ro 0x0 */
            uint32_t write : 1;           /* 24 SW=rw HW=ro 0x0 */
            
            uint32_t resv23 : 1;
            uint32_t num_dummy_clks : 7;           /* 22:16 SW=rw HW=ro 0x8 */
            uint32_t num_bytes : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t cmd : 8;           /* 7:0 SW=rw HW=ro 0xB */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cmd : 8;           /* 0:7 SW=rw HW=ro 0xB */
            uint32_t num_bytes : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t num_dummy_clks : 7;           /* 16:22 SW=rw HW=ro 0x8 */
            
            uint32_t resv23 : 1;
            uint32_t write : 1;           /* 24 SW=rw HW=ro 0x0 */
            uint32_t addr_mode : 1;           /* 25 SW=rw HW=ro 0x0 */
            
            uint32_t resv26 : 5;
            uint32_t go : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_control;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=wo HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} spi_flash_ctrl_wr_data;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=ro HW=wo 0x0 */
    } bf;
    uint32_t  dw;
} spi_flash_ctrl_rd_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_in_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_out_fifo;

/*section : mm */

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} spi_flash_ctrl_mm_addr_offset;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t addr_mode : 1;           /* 31 SW=rw HW=ro 0x0 */
            uint32_t num_dummy_clks : 7;           /* 30:24 SW=rw HW=ro 0x8 */
            uint32_t tr_gap_p3 : 4;           /* 23:20 SW=rw HW=ro 0xF */
            uint32_t io_mask_data : 4;           /* 19:16 SW=rw HW=ro 0x2 */
            uint32_t io_mask_addr : 4;           /* 15:12 SW=rw HW=ro 0x1 */
            uint32_t io_mask_cmd : 4;           /* 11:8 SW=rw HW=ro 0x1 */
            uint32_t read_cmd : 8;           /* 7:0 SW=rw HW=ro 0xB */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t read_cmd : 8;           /* 0:7 SW=rw HW=ro 0xB */
            uint32_t io_mask_cmd : 4;           /* 8:11 SW=rw HW=ro 0x1 */
            uint32_t io_mask_addr : 4;           /* 12:15 SW=rw HW=ro 0x1 */
            uint32_t io_mask_data : 4;           /* 16:19 SW=rw HW=ro 0x2 */
            uint32_t tr_gap_p3 : 4;           /* 20:23 SW=rw HW=ro 0xF */
            uint32_t num_dummy_clks : 7;           /* 24:30 SW=rw HW=ro 0x8 */
            uint32_t addr_mode : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_mm_basic_cfg;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t xip_en : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv24 : 7;
            uint32_t io_mask_mode : 4;           /* 23:20 SW=rw HW=ro 0x1 */
            uint32_t num_mode_bits : 4;           /* 19:16 SW=rw HW=ro 0x0 */
            uint32_t mode_xip : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t mode_normal : 8;           /* 7:0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t mode_normal : 8;           /* 0:7 SW=rw HW=ro 0x0 */
            uint32_t mode_xip : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t num_mode_bits : 4;           /* 16:19 SW=rw HW=ro 0x0 */
            uint32_t io_mask_mode : 4;           /* 20:23 SW=rw HW=ro 0x1 */
            
            uint32_t resv24 : 7;
            uint32_t xip_en : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_mm_xip_cfg;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t tr_gap_p3 : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t enable : 1;           /* 12 SW=rw HW=ro 0x0 */
            uint32_t io_mask : 4;           /* 11:8 SW=rw HW=ro 0x1 */
            uint32_t cmd : 8;           /* 7:0 SW=rw HW=ro 0x75 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t cmd : 8;           /* 0:7 SW=rw HW=ro 0x75 */
            uint32_t io_mask : 4;           /* 8:11 SW=rw HW=ro 0x1 */
            uint32_t enable : 1;           /* 12 SW=rw HW=ro 0x0 */
            
            uint32_t resv13 : 3;
            uint32_t tr_gap_p3 : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_mm_suspend_cfg;

typedef struct {
    spi_flash_ctrl_mm_addr_offset  addr_offset;
    spi_flash_ctrl_mm_basic_cfg  basic_cfg;
    spi_flash_ctrl_mm_xip_cfg  xip_cfg;
    spi_flash_ctrl_mm_suspend_cfg  suspend_cfg;
    
    
    
} spi_flash_ctrl_mm;


/*section : irq */

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t apb_tr_done : 1;           /* 8 SW=rw HW=na 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t out_fifo_af : 1;           /* 5 SW=rw HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 4 SW=rw HW=na 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t in_fifo_af : 1;           /* 1 SW=rw HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 0 SW=rw HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_fifo_ae : 1;           /* 0 SW=rw HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 1 SW=rw HW=na 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t out_fifo_ae : 1;           /* 4 SW=rw HW=na 0x0 */
            uint32_t out_fifo_af : 1;           /* 5 SW=rw HW=na 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t apb_tr_done : 1;           /* 8 SW=rw HW=na 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_irq_enable;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t apb_tr_done : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t out_fifo_af : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t in_fifo_af : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_fifo_ae : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t out_fifo_ae : 1;           /* 4 SW=r/w1c HW=wo 0x0 */
            uint32_t out_fifo_af : 1;           /* 5 SW=r/w1c HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t apb_tr_done : 1;           /* 8 SW=r/w1c HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_irq_pending;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t apb_tr_done : 1;           /* 8 SW=ro HW=na 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t out_fifo_af : 1;           /* 5 SW=ro HW=na 0x0 */
            uint32_t out_fifo_ae : 1;           /* 4 SW=ro HW=na 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t in_fifo_af : 1;           /* 1 SW=ro HW=na 0x0 */
            uint32_t in_fifo_ae : 1;           /* 0 SW=ro HW=na 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_fifo_ae : 1;           /* 0 SW=ro HW=na 0x0 */
            uint32_t in_fifo_af : 1;           /* 1 SW=ro HW=na 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t out_fifo_ae : 1;           /* 4 SW=ro HW=na 0x0 */
            uint32_t out_fifo_af : 1;           /* 5 SW=ro HW=na 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t apb_tr_done : 1;           /* 8 SW=ro HW=na 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_irq_pending_irq;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv9 : 23;
            uint32_t apb_tr_done : 1;           /* 8 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t out_fifo_af : 1;           /* 5 SW=ro HW=wo 0x0 */
            uint32_t out_fifo_ae : 1;           /* 4 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t in_fifo_af : 1;           /* 1 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_ae : 1;           /* 0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t in_fifo_ae : 1;           /* 0 SW=ro HW=wo 0x0 */
            uint32_t in_fifo_af : 1;           /* 1 SW=ro HW=wo 0x0 */
            
            uint32_t resv2 : 2;
            uint32_t out_fifo_ae : 1;           /* 4 SW=ro HW=wo 0x0 */
            uint32_t out_fifo_af : 1;           /* 5 SW=ro HW=wo 0x0 */
            
            uint32_t resv6 : 2;
            uint32_t apb_tr_done : 1;           /* 8 SW=ro HW=wo 0x0 */
            uint32_t resv9 : 23;
        } bf;
        
    #endif
    uint32_t  dw;
} spi_flash_ctrl_irq_raw;

typedef struct {
    spi_flash_ctrl_irq_enable  enable;
    spi_flash_ctrl_irq_pending  pending;
    spi_flash_ctrl_irq_pending_irq  pending_irq;
    spi_flash_ctrl_irq_raw  raw;
    
    
    
} spi_flash_ctrl_irq;


typedef struct {
    spi_flash_ctrl_version  version;
    spi_flash_ctrl_generic_cfg  generic_cfg;
    spi_flash_ctrl_addr_offset  addr_offset;
    spi_flash_ctrl_addr  addr;
    spi_flash_ctrl_basic_cfg  basic_cfg;
    spi_flash_ctrl_control  control;
    spi_flash_ctrl_wr_data  wr_data;
    spi_flash_ctrl_rd_data  rd_data;
    spi_flash_ctrl_in_fifo  in_fifo;
    spi_flash_ctrl_out_fifo  out_fifo;
    
    union {
        spi_flash_ctrl_mm s;
        uint8_t filler[0x10];
    } mm;
    
    union {
        spi_flash_ctrl_irq s;
        uint8_t filler[0x10];
    } irq;
    
    
    uint8_t filler11[0xB8];
    
    
} spi_flash_ctrl_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define spi_flash_ctrl_version_READMASK 0xFFFFFF
#define spi_flash_ctrl_version_WRITEMASK 0x0
#define spi_flash_ctrl_version_VOLATILEMASK 0x0
#define spi_flash_ctrl_version_RESETMASK 0xFFFFFF
#define spi_flash_ctrl_version_DEFAULT 0x00020203

#define spi_flash_ctrl_generic_cfg_READMASK 0x80FFFFFF
#define spi_flash_ctrl_generic_cfg_WRITEMASK 0x80FFFFFF
#define spi_flash_ctrl_generic_cfg_VOLATILEMASK 0x0
#define spi_flash_ctrl_generic_cfg_RESETMASK 0x80FFFFFF
#define spi_flash_ctrl_generic_cfg_DEFAULT 0x00FF1212

#define spi_flash_ctrl_addr_offset_READMASK 0xFFFFFFFF
#define spi_flash_ctrl_addr_offset_WRITEMASK 0xFFFFFFFF
#define spi_flash_ctrl_addr_offset_VOLATILEMASK 0x0
#define spi_flash_ctrl_addr_offset_RESETMASK 0xFFFFFFFF
#define spi_flash_ctrl_addr_offset_DEFAULT 0x00000000

#define spi_flash_ctrl_addr_READMASK 0xFFFFFFFF
#define spi_flash_ctrl_addr_WRITEMASK 0xFFFFFFFF
#define spi_flash_ctrl_addr_VOLATILEMASK 0x0
#define spi_flash_ctrl_addr_RESETMASK 0xFFFFFFFF
#define spi_flash_ctrl_addr_DEFAULT 0x00000000

#define spi_flash_ctrl_basic_cfg_READMASK 0xFFFF0FFF
#define spi_flash_ctrl_basic_cfg_WRITEMASK 0xFFFF0FFF
#define spi_flash_ctrl_basic_cfg_VOLATILEMASK 0x0
#define spi_flash_ctrl_basic_cfg_RESETMASK 0xFFFF0FFF
#define spi_flash_ctrl_basic_cfg_DEFAULT 0x00000211

#define spi_flash_ctrl_control_READMASK 0x837FFFFF
#define spi_flash_ctrl_control_WRITEMASK 0x837FFFFF
#define spi_flash_ctrl_control_VOLATILEMASK 0x0
#define spi_flash_ctrl_control_RESETMASK 0x837FFFFF
#define spi_flash_ctrl_control_DEFAULT 0x0008000B

#define spi_flash_ctrl_wr_data_READMASK 0x0
#define spi_flash_ctrl_wr_data_WRITEMASK 0xFFFFFFFF
#define spi_flash_ctrl_wr_data_VOLATILEMASK 0x0
#define spi_flash_ctrl_wr_data_RESETMASK 0xFFFFFFFF
#define spi_flash_ctrl_wr_data_DEFAULT 0x00000000

#define spi_flash_ctrl_rd_data_READMASK 0xFFFFFFFF
#define spi_flash_ctrl_rd_data_WRITEMASK 0x0
#define spi_flash_ctrl_rd_data_VOLATILEMASK 0xFFFFFFFF
#define spi_flash_ctrl_rd_data_RESETMASK 0xFFFFFFFF
#define spi_flash_ctrl_rd_data_DEFAULT 0x00000000

#define spi_flash_ctrl_in_fifo_READMASK 0x8FFFFFFF
#define spi_flash_ctrl_in_fifo_WRITEMASK 0x80FFFF00
#define spi_flash_ctrl_in_fifo_VOLATILEMASK 0xF0000FF
#define spi_flash_ctrl_in_fifo_RESETMASK 0x8FFFFFFF
#define spi_flash_ctrl_in_fifo_DEFAULT 0x00000000

#define spi_flash_ctrl_out_fifo_READMASK 0x8FFFFFFF
#define spi_flash_ctrl_out_fifo_WRITEMASK 0x80FFFF00
#define spi_flash_ctrl_out_fifo_VOLATILEMASK 0xF0000FF
#define spi_flash_ctrl_out_fifo_RESETMASK 0x8FFFFFFF
#define spi_flash_ctrl_out_fifo_DEFAULT 0x00000000

#define spi_flash_ctrl_mm_addr_offset_READMASK 0xFFFFFFFF
#define spi_flash_ctrl_mm_addr_offset_WRITEMASK 0xFFFFFFFF
#define spi_flash_ctrl_mm_addr_offset_VOLATILEMASK 0x0
#define spi_flash_ctrl_mm_addr_offset_RESETMASK 0xFFFFFFFF
#define spi_flash_ctrl_mm_addr_offset_DEFAULT 0x00000000

#define spi_flash_ctrl_mm_basic_cfg_READMASK 0xFFFFFFFF
#define spi_flash_ctrl_mm_basic_cfg_WRITEMASK 0xFFFFFFFF
#define spi_flash_ctrl_mm_basic_cfg_VOLATILEMASK 0x0
#define spi_flash_ctrl_mm_basic_cfg_RESETMASK 0xFFFFFFFF
#define spi_flash_ctrl_mm_basic_cfg_DEFAULT 0x08F2110B

#define spi_flash_ctrl_mm_xip_cfg_READMASK 0x80FFFFFF
#define spi_flash_ctrl_mm_xip_cfg_WRITEMASK 0x80FFFFFF
#define spi_flash_ctrl_mm_xip_cfg_VOLATILEMASK 0x0
#define spi_flash_ctrl_mm_xip_cfg_RESETMASK 0x80FFFFFF
#define spi_flash_ctrl_mm_xip_cfg_DEFAULT 0x00100000

#define spi_flash_ctrl_mm_suspend_cfg_READMASK 0xFFFF1FFF
#define spi_flash_ctrl_mm_suspend_cfg_WRITEMASK 0xFFFF1FFF
#define spi_flash_ctrl_mm_suspend_cfg_VOLATILEMASK 0x0
#define spi_flash_ctrl_mm_suspend_cfg_RESETMASK 0xFFFF1FFF
#define spi_flash_ctrl_mm_suspend_cfg_DEFAULT 0x00000175

#define spi_flash_ctrl_irq_enable_READMASK 0x133
#define spi_flash_ctrl_irq_enable_WRITEMASK 0x133
#define spi_flash_ctrl_irq_enable_VOLATILEMASK 0x0
#define spi_flash_ctrl_irq_enable_RESETMASK 0x133
#define spi_flash_ctrl_irq_enable_DEFAULT 0x00000000

#define spi_flash_ctrl_irq_pending_READMASK 0x133
#define spi_flash_ctrl_irq_pending_WRITEMASK 0x133
#define spi_flash_ctrl_irq_pending_VOLATILEMASK 0x133
#define spi_flash_ctrl_irq_pending_RESETMASK 0x133
#define spi_flash_ctrl_irq_pending_DEFAULT 0x00000000

#define spi_flash_ctrl_irq_pending_irq_READMASK 0x133
#define spi_flash_ctrl_irq_pending_irq_WRITEMASK 0x0
#define spi_flash_ctrl_irq_pending_irq_VOLATILEMASK 0x0
#define spi_flash_ctrl_irq_pending_irq_RESETMASK 0x133
#define spi_flash_ctrl_irq_pending_irq_DEFAULT 0x00000000

#define spi_flash_ctrl_irq_raw_READMASK 0x133
#define spi_flash_ctrl_irq_raw_WRITEMASK 0x0
#define spi_flash_ctrl_irq_raw_VOLATILEMASK 0x133
#define spi_flash_ctrl_irq_raw_RESETMASK 0x133
#define spi_flash_ctrl_irq_raw_DEFAULT 0x00000000

#define spi_flash_ctrl_s_SIZE 0x100
#define spi_flash_ctrl_version_SIZE 0x4
#define spi_flash_ctrl_generic_cfg_SIZE 0x4
#define spi_flash_ctrl_addr_offset_SIZE 0x4
#define spi_flash_ctrl_addr_SIZE 0x4
#define spi_flash_ctrl_basic_cfg_SIZE 0x4
#define spi_flash_ctrl_control_SIZE 0x4
#define spi_flash_ctrl_wr_data_SIZE 0x4
#define spi_flash_ctrl_rd_data_SIZE 0x4
#define spi_flash_ctrl_in_fifo_SIZE 0x4
#define spi_flash_ctrl_out_fifo_SIZE 0x4
#define spi_flash_ctrl_mm_SIZE 0x10
#define spi_flash_ctrl_mm_addr_offset_SIZE 0x4
#define spi_flash_ctrl_mm_basic_cfg_SIZE 0x4
#define spi_flash_ctrl_mm_xip_cfg_SIZE 0x4
#define spi_flash_ctrl_mm_suspend_cfg_SIZE 0x4
#define spi_flash_ctrl_irq_SIZE 0x10
#define spi_flash_ctrl_irq_enable_SIZE 0x4
#define spi_flash_ctrl_irq_pending_SIZE 0x4
#define spi_flash_ctrl_irq_pending_irq_SIZE 0x4
#define spi_flash_ctrl_irq_raw_SIZE 0x4

#define spi_flash_ctrl_s_OFFSET 0x0
#define spi_flash_ctrl_version_OFFSET 0x0
#define spi_flash_ctrl_generic_cfg_OFFSET 0x4
#define spi_flash_ctrl_addr_offset_OFFSET 0x8
#define spi_flash_ctrl_addr_OFFSET 0xC
#define spi_flash_ctrl_basic_cfg_OFFSET 0x10
#define spi_flash_ctrl_control_OFFSET 0x14
#define spi_flash_ctrl_wr_data_OFFSET 0x18
#define spi_flash_ctrl_rd_data_OFFSET 0x1C
#define spi_flash_ctrl_in_fifo_OFFSET 0x20
#define spi_flash_ctrl_out_fifo_OFFSET 0x24
#define spi_flash_ctrl_mm_OFFSET 0x28
#define spi_flash_ctrl_mm_addr_offset_OFFSET 0x0
#define spi_flash_ctrl_mm_basic_cfg_OFFSET 0x4
#define spi_flash_ctrl_mm_xip_cfg_OFFSET 0x8
#define spi_flash_ctrl_mm_suspend_cfg_OFFSET 0xC
#define spi_flash_ctrl_irq_OFFSET 0x38
#define spi_flash_ctrl_irq_enable_OFFSET 0x0
#define spi_flash_ctrl_irq_pending_OFFSET 0x4
#define spi_flash_ctrl_irq_pending_irq_OFFSET 0x8
#define spi_flash_ctrl_irq_raw_OFFSET 0xC

#define spi_flash_ctrl_s_ADDRESS 0x000
#define spi_flash_ctrl_version_ADDRESS 0x000
#define spi_flash_ctrl_generic_cfg_ADDRESS 0x004
#define spi_flash_ctrl_addr_offset_ADDRESS 0x008
#define spi_flash_ctrl_addr_ADDRESS 0x00C
#define spi_flash_ctrl_basic_cfg_ADDRESS 0x010
#define spi_flash_ctrl_control_ADDRESS 0x014
#define spi_flash_ctrl_wr_data_ADDRESS 0x018
#define spi_flash_ctrl_rd_data_ADDRESS 0x01C
#define spi_flash_ctrl_in_fifo_ADDRESS 0x020
#define spi_flash_ctrl_out_fifo_ADDRESS 0x024
#define spi_flash_ctrl_mm_ADDRESS 0x028
#define spi_flash_ctrl_mm_addr_offset_ADDRESS 0x028
#define spi_flash_ctrl_mm_basic_cfg_ADDRESS 0x02C
#define spi_flash_ctrl_mm_xip_cfg_ADDRESS 0x030
#define spi_flash_ctrl_mm_suspend_cfg_ADDRESS 0x034
#define spi_flash_ctrl_irq_ADDRESS 0x038
#define spi_flash_ctrl_irq_enable_ADDRESS 0x038
#define spi_flash_ctrl_irq_pending_ADDRESS 0x03C
#define spi_flash_ctrl_irq_pending_irq_ADDRESS 0x040
#define spi_flash_ctrl_irq_raw_ADDRESS 0x044
#define SPI_FLASH_CTRL_VERSION_MAJOR_OFFSET 16
#define SPI_FLASH_CTRL_VERSION_MAJOR_MASK 0xFF0000
#define SPI_FLASH_CTRL_VERSION_MINOR_OFFSET 8
#define SPI_FLASH_CTRL_VERSION_MINOR_MASK 0xFF00
#define SPI_FLASH_CTRL_VERSION_PATCH_OFFSET 0
#define SPI_FLASH_CTRL_VERSION_PATCH_MASK 0xFF
#define SPI_FLASH_CTRL_GENERIC_CFG_SCK_FREERUN_OFFSET 31
#define SPI_FLASH_CTRL_GENERIC_CFG_SCK_FREERUN_MASK 0x80000000
#define SPI_FLASH_CTRL_GENERIC_CFG_SCK_FREERUN 0x80000000
#define SPI_FLASH_CTRL_GENERIC_CFG_IO_OUT_DEFAULTS_OFFSET 20
#define SPI_FLASH_CTRL_GENERIC_CFG_IO_OUT_DEFAULTS_MASK 0xF00000
#define SPI_FLASH_CTRL_GENERIC_CFG_IO_TRI_DEFAULTS_OFFSET 16
#define SPI_FLASH_CTRL_GENERIC_CFG_IO_TRI_DEFAULTS_MASK 0xF0000
#define SPI_FLASH_CTRL_GENERIC_CFG_SCK_OE_DEASSERT_CFG_OFFSET 12
#define SPI_FLASH_CTRL_GENERIC_CFG_SCK_OE_DEASSERT_CFG_MASK 0xF000
#define SPI_FLASH_CTRL_GENERIC_CFG_CS_DEASSERT_CFG_OFFSET 8
#define SPI_FLASH_CTRL_GENERIC_CFG_CS_DEASSERT_CFG_MASK 0xF00
#define SPI_FLASH_CTRL_GENERIC_CFG_SCK_OE_ASSERT_CFG_OFFSET 4
#define SPI_FLASH_CTRL_GENERIC_CFG_SCK_OE_ASSERT_CFG_MASK 0xF0
#define SPI_FLASH_CTRL_GENERIC_CFG_CS_ASSERT_CFG_OFFSET 0
#define SPI_FLASH_CTRL_GENERIC_CFG_CS_ASSERT_CFG_MASK 0xF
#define SPI_FLASH_CTRL_ADDR_OFFSET_VAL_OFFSET 0
#define SPI_FLASH_CTRL_ADDR_OFFSET_VAL_MASK 0xFFFFFFFF
#define SPI_FLASH_CTRL_ADDR_VAL_OFFSET 0
#define SPI_FLASH_CTRL_ADDR_VAL_MASK 0xFFFFFFFF
#define SPI_FLASH_CTRL_BASIC_CFG_TR_GAP_P3_OFFSET 16
#define SPI_FLASH_CTRL_BASIC_CFG_TR_GAP_P3_MASK 0xFFFF0000
#define SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_DATA_OFFSET 8
#define SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_DATA_MASK 0xF00
#define SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_ADDR_OFFSET 4
#define SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_ADDR_MASK 0xF0
#define SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_CMD_OFFSET 0
#define SPI_FLASH_CTRL_BASIC_CFG_IO_MASK_CMD_MASK 0xF
#define SPI_FLASH_CTRL_CONTROL_GO_OFFSET 31
#define SPI_FLASH_CTRL_CONTROL_GO_MASK 0x80000000
#define SPI_FLASH_CTRL_CONTROL_GO 0x80000000
#define SPI_FLASH_CTRL_CONTROL_ADDR_MODE_OFFSET 25
#define SPI_FLASH_CTRL_CONTROL_ADDR_MODE_MASK 0x2000000
#define SPI_FLASH_CTRL_CONTROL_ADDR_MODE 0x2000000
#define SPI_FLASH_CTRL_CONTROL_WRITE_OFFSET 24
#define SPI_FLASH_CTRL_CONTROL_WRITE_MASK 0x1000000
#define SPI_FLASH_CTRL_CONTROL_WRITE 0x1000000
#define SPI_FLASH_CTRL_CONTROL_NUM_DUMMY_CLKS_OFFSET 16
#define SPI_FLASH_CTRL_CONTROL_NUM_DUMMY_CLKS_MASK 0x7F0000
#define SPI_FLASH_CTRL_CONTROL_NUM_BYTES_OFFSET 8
#define SPI_FLASH_CTRL_CONTROL_NUM_BYTES_MASK 0xFF00
#define SPI_FLASH_CTRL_CONTROL_CMD_OFFSET 0
#define SPI_FLASH_CTRL_CONTROL_CMD_MASK 0xFF
#define SPI_FLASH_CTRL_WR_DATA_VAL_OFFSET 0
#define SPI_FLASH_CTRL_WR_DATA_VAL_MASK 0xFFFFFFFF
#define SPI_FLASH_CTRL_RD_DATA_VAL_OFFSET 0
#define SPI_FLASH_CTRL_RD_DATA_VAL_MASK 0xFFFFFFFF
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_CLEAR_OFFSET 31
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_CLEAR_MASK 0x80000000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_CLEAR 0x80000000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_AF_OFFSET 27
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_AF_MASK 0x8000000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_AF 0x8000000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_AE_OFFSET 26
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_AE_MASK 0x4000000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_AE 0x4000000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_FULL_OFFSET 25
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_FULL_MASK 0x2000000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_FULL 0x2000000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_EMPTY_OFFSET 24
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_EMPTY_MASK 0x1000000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_EMPTY 0x1000000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_AFT_OFFSET 16
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_AFT_MASK 0xFF0000
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_AET_OFFSET 8
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_AET_MASK 0xFF00
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_DEPTH_OFFSET 0
#define SPI_FLASH_CTRL_IN_FIFO_FIFO_DEPTH_MASK 0xFF
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_CLEAR_OFFSET 31
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_CLEAR_MASK 0x80000000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_CLEAR 0x80000000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_AF_OFFSET 27
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_AF_MASK 0x8000000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_AF 0x8000000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_AE_OFFSET 26
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_AE_MASK 0x4000000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_AE 0x4000000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_FULL_OFFSET 25
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_FULL_MASK 0x2000000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_FULL 0x2000000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_EMPTY_OFFSET 24
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_EMPTY_MASK 0x1000000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_EMPTY 0x1000000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_AFT_OFFSET 16
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_AFT_MASK 0xFF0000
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_AET_OFFSET 8
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_AET_MASK 0xFF00
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_DEPTH_OFFSET 0
#define SPI_FLASH_CTRL_OUT_FIFO_FIFO_DEPTH_MASK 0xFF
#define SPI_FLASH_CTRL_MM_ADDR_OFFSET_VAL_OFFSET 0
#define SPI_FLASH_CTRL_MM_ADDR_OFFSET_VAL_MASK 0xFFFFFFFF
#define SPI_FLASH_CTRL_MM_BASIC_CFG_ADDR_MODE_OFFSET 31
#define SPI_FLASH_CTRL_MM_BASIC_CFG_ADDR_MODE_MASK 0x80000000
#define SPI_FLASH_CTRL_MM_BASIC_CFG_ADDR_MODE 0x80000000
#define SPI_FLASH_CTRL_MM_BASIC_CFG_NUM_DUMMY_CLKS_OFFSET 24
#define SPI_FLASH_CTRL_MM_BASIC_CFG_NUM_DUMMY_CLKS_MASK 0x7F000000
#define SPI_FLASH_CTRL_MM_BASIC_CFG_TR_GAP_P3_OFFSET 20
#define SPI_FLASH_CTRL_MM_BASIC_CFG_TR_GAP_P3_MASK 0xF00000
#define SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_DATA_OFFSET 16
#define SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_DATA_MASK 0xF0000
#define SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_ADDR_OFFSET 12
#define SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_ADDR_MASK 0xF000
#define SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_CMD_OFFSET 8
#define SPI_FLASH_CTRL_MM_BASIC_CFG_IO_MASK_CMD_MASK 0xF00
#define SPI_FLASH_CTRL_MM_BASIC_CFG_READ_CMD_OFFSET 0
#define SPI_FLASH_CTRL_MM_BASIC_CFG_READ_CMD_MASK 0xFF
#define SPI_FLASH_CTRL_MM_XIP_CFG_XIP_EN_OFFSET 31
#define SPI_FLASH_CTRL_MM_XIP_CFG_XIP_EN_MASK 0x80000000
#define SPI_FLASH_CTRL_MM_XIP_CFG_XIP_EN 0x80000000
#define SPI_FLASH_CTRL_MM_XIP_CFG_IO_MASK_MODE_OFFSET 20
#define SPI_FLASH_CTRL_MM_XIP_CFG_IO_MASK_MODE_MASK 0xF00000
#define SPI_FLASH_CTRL_MM_XIP_CFG_NUM_MODE_BITS_OFFSET 16
#define SPI_FLASH_CTRL_MM_XIP_CFG_NUM_MODE_BITS_MASK 0xF0000
#define SPI_FLASH_CTRL_MM_XIP_CFG_MODE_XIP_OFFSET 8
#define SPI_FLASH_CTRL_MM_XIP_CFG_MODE_XIP_MASK 0xFF00
#define SPI_FLASH_CTRL_MM_XIP_CFG_MODE_NORMAL_OFFSET 0
#define SPI_FLASH_CTRL_MM_XIP_CFG_MODE_NORMAL_MASK 0xFF
#define SPI_FLASH_CTRL_MM_SUSPEND_CFG_TR_GAP_P3_OFFSET 16
#define SPI_FLASH_CTRL_MM_SUSPEND_CFG_TR_GAP_P3_MASK 0xFFFF0000
#define SPI_FLASH_CTRL_MM_SUSPEND_CFG_ENABLE_OFFSET 12
#define SPI_FLASH_CTRL_MM_SUSPEND_CFG_ENABLE_MASK 0x1000
#define SPI_FLASH_CTRL_MM_SUSPEND_CFG_ENABLE 0x1000
#define SPI_FLASH_CTRL_MM_SUSPEND_CFG_IO_MASK_OFFSET 8
#define SPI_FLASH_CTRL_MM_SUSPEND_CFG_IO_MASK_MASK 0xF00
#define SPI_FLASH_CTRL_MM_SUSPEND_CFG_CMD_OFFSET 0
#define SPI_FLASH_CTRL_MM_SUSPEND_CFG_CMD_MASK 0xFF
#define SPI_FLASH_CTRL_IRQ_ENABLE_APB_TR_DONE_OFFSET 8
#define SPI_FLASH_CTRL_IRQ_ENABLE_APB_TR_DONE_MASK 0x100
#define SPI_FLASH_CTRL_IRQ_ENABLE_APB_TR_DONE 0x100
#define SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AF_OFFSET 5
#define SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AF_MASK 0x20
#define SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AF 0x20
#define SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AE_OFFSET 4
#define SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AE_MASK 0x10
#define SPI_FLASH_CTRL_IRQ_ENABLE_OUT_FIFO_AE 0x10
#define SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AF_OFFSET 1
#define SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AF_MASK 0x2
#define SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AF 0x2
#define SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AE_OFFSET 0
#define SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AE_MASK 0x1
#define SPI_FLASH_CTRL_IRQ_ENABLE_IN_FIFO_AE 0x1
#define SPI_FLASH_CTRL_IRQ_PENDING_APB_TR_DONE_OFFSET 8
#define SPI_FLASH_CTRL_IRQ_PENDING_APB_TR_DONE_MASK 0x100
#define SPI_FLASH_CTRL_IRQ_PENDING_APB_TR_DONE 0x100
#define SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AF_OFFSET 5
#define SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AF_MASK 0x20
#define SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AF 0x20
#define SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AE_OFFSET 4
#define SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AE_MASK 0x10
#define SPI_FLASH_CTRL_IRQ_PENDING_OUT_FIFO_AE 0x10
#define SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AF_OFFSET 1
#define SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AF_MASK 0x2
#define SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AF 0x2
#define SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AE_OFFSET 0
#define SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AE_MASK 0x1
#define SPI_FLASH_CTRL_IRQ_PENDING_IN_FIFO_AE 0x1
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_APB_TR_DONE_OFFSET 8
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_APB_TR_DONE_MASK 0x100
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_APB_TR_DONE 0x100
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AF_OFFSET 5
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AF_MASK 0x20
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AF 0x20
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AE_OFFSET 4
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AE_MASK 0x10
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_OUT_FIFO_AE 0x10
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AF_OFFSET 1
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AF_MASK 0x2
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AF 0x2
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AE_OFFSET 0
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AE_MASK 0x1
#define SPI_FLASH_CTRL_IRQ_PENDING_IRQ_IN_FIFO_AE 0x1
#define SPI_FLASH_CTRL_IRQ_RAW_APB_TR_DONE_OFFSET 8
#define SPI_FLASH_CTRL_IRQ_RAW_APB_TR_DONE_MASK 0x100
#define SPI_FLASH_CTRL_IRQ_RAW_APB_TR_DONE 0x100
#define SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AF_OFFSET 5
#define SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AF_MASK 0x20
#define SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AF 0x20
#define SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AE_OFFSET 4
#define SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AE_MASK 0x10
#define SPI_FLASH_CTRL_IRQ_RAW_OUT_FIFO_AE 0x10
#define SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AF_OFFSET 1
#define SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AF_MASK 0x2
#define SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AF 0x2
#define SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AE_OFFSET 0
#define SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AE_MASK 0x1
#define SPI_FLASH_CTRL_IRQ_RAW_IN_FIFO_AE 0x1
#endif /* _SPI_FLASH_CTRL_REGS_H_ */

/* end */
