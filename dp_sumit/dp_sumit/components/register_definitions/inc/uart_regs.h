/*Icron Technologies ***** Copyright 2015 All Rights Reserved. ******/
/**/
/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ****/
/* created by        : Remco van Steeden*/
/* generated by      : Remco.vanSteeden*/
/* generated from    : C:\cygwin64\home\Remco.VanSteeden\BLACKBIRD_20190320T085422\m_uart\regs\ids\uart_regs.docx*/
/* IDesignSpec rev   : 6.8.10.0*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : uint%d_t*/
/* Bus Type                   : APB*/
/* BigEndian                  : true*/
/* LittleEndian               : true*/
/* Dist. Decode and Readback  : false*/
/*--------------------------------------------------------------------------------------------------------------- */

/*block : uart */

#ifndef _UART_REGS_H_
#define _UART_REGS_H_

#ifndef __ASSEMBLER__
#ifndef __ASSEMBLER__
typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv24 : 8;
            uint32_t major : 8;           /* 23:16 SW=ro HW=ro 0x4 */
            uint32_t minor : 8;           /* 15:8 SW=ro HW=ro 0x0 */
            uint32_t patch : 8;           /* 7:0 SW=ro HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t patch : 8;           /* 0:7 SW=ro HW=ro 0x0 */
            uint32_t minor : 8;           /* 8:15 SW=ro HW=ro 0x0 */
            uint32_t major : 8;           /* 16:23 SW=ro HW=ro 0x4 */
            uint32_t resv24 : 8;
        } bf;
        
    #endif
    uint32_t  dw;
} uart_version;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} uart_tx_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_aft : 8;           /* 23:16 SW=rw HW=ro 0x0 */
            uint32_t fifo_aet : 8;           /* 15:8 SW=rw HW=ro 0x0 */
            uint32_t fifo_depth : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t fifo_depth : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t fifo_aet : 8;           /* 8:15 SW=rw HW=ro 0x0 */
            uint32_t fifo_aft : 8;           /* 16:23 SW=rw HW=ro 0x0 */
            uint32_t fifo_empty : 1;           /* 24 SW=ro HW=wo 0x0 */
            uint32_t fifo_full : 1;           /* 25 SW=ro HW=wo 0x0 */
            uint32_t fifo_ae : 1;           /* 26 SW=ro HW=wo 0x0 */
            uint32_t fifo_af : 1;           /* 27 SW=ro HW=wo 0x0 */
            
            uint32_t resv28 : 3;
            uint32_t fifo_clear : 1;           /* 31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} uart_rx_fifo;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t val : 8;           /* 7:0 SW=wo HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t val : 8;           /* 0:7 SW=wo HW=ro 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} uart_tx_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv8 : 24;
            uint32_t val : 8;           /* 7:0 SW=ro HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t val : 8;           /* 0:7 SW=ro HW=wo 0x0 */
            uint32_t resv8 : 24;
        } bf;
        
    #endif
    uint32_t  dw;
} uart_rx_data;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            uint32_t prescaler : 16;           /* 31:16 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 12;
            uint32_t tx_irq_en : 1;           /* 3 SW=rw HW=ro 0x0 */
            uint32_t rx_irq_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t tx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rx_en : 1;           /* 0 SW=rw HW=ro 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t rx_en : 1;           /* 0 SW=rw HW=ro 0x0 */
            uint32_t tx_en : 1;           /* 1 SW=rw HW=ro 0x0 */
            uint32_t rx_irq_en : 1;           /* 2 SW=rw HW=ro 0x0 */
            uint32_t tx_irq_en : 1;           /* 3 SW=rw HW=ro 0x0 */
            
            uint32_t resv4 : 12;
            uint32_t prescaler : 16;           /* 16:31 SW=rw HW=ro 0x0 */
        } bf;
        
    #endif
    uint32_t  dw;
} uart_control;

typedef union {
    struct {
        uint32_t val : 32;           /* 31:0 SW=rw HW=ro 0x0 */
    } bf;
    uint32_t  dw;
} uart_timeout;

typedef union {
    #ifdef IDS_BIG_ENDIAN
        struct {
            
            uint32_t resv3 : 29;
            uint32_t overrun_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t stop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t start_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
        } bf;
        
    #else     /* IDS_LITTLE_ENDIAN */
        struct {
            uint32_t start_err : 1;           /* 0 SW=r/w1c HW=wo 0x0 */
            uint32_t stop_err : 1;           /* 1 SW=r/w1c HW=wo 0x0 */
            uint32_t overrun_err : 1;           /* 2 SW=r/w1c HW=wo 0x0 */
            uint32_t resv3 : 29;
        } bf;
        
    #endif
    uint32_t  dw;
} uart_errors;

typedef struct {
    uart_version  version;
    uart_tx_fifo  tx_fifo;
    uart_rx_fifo  rx_fifo;
    uart_tx_data  tx_data;
    uart_rx_data  rx_data;
    uart_control  control;
    uart_timeout  timeout;
    uart_errors  errors;
    
    
    uint8_t filler11[0xE0];
    
    
} uart_s;


#endif   //__ASSEMBLER__


#endif // __ASSEMBLER__
#define uart_version_READMASK 0xFFFFFF
#define uart_version_WRITEMASK 0x0
#define uart_version_VOLATILEMASK 0x0
#define uart_version_RESETMASK 0xFFFFFF
#define uart_version_DEFAULT 0x00040000

#define uart_tx_fifo_READMASK 0x8FFFFFFF
#define uart_tx_fifo_WRITEMASK 0x80FFFF00
#define uart_tx_fifo_VOLATILEMASK 0xF0000FF
#define uart_tx_fifo_RESETMASK 0x8FFFFFFF
#define uart_tx_fifo_DEFAULT 0x00000000

#define uart_rx_fifo_READMASK 0x8FFFFFFF
#define uart_rx_fifo_WRITEMASK 0x80FFFF00
#define uart_rx_fifo_VOLATILEMASK 0xF0000FF
#define uart_rx_fifo_RESETMASK 0x8FFFFFFF
#define uart_rx_fifo_DEFAULT 0x00000000

#define uart_tx_data_READMASK 0x0
#define uart_tx_data_WRITEMASK 0xFF
#define uart_tx_data_VOLATILEMASK 0x0
#define uart_tx_data_RESETMASK 0xFF
#define uart_tx_data_DEFAULT 0x00000000

#define uart_rx_data_READMASK 0xFF
#define uart_rx_data_WRITEMASK 0x0
#define uart_rx_data_VOLATILEMASK 0xFF
#define uart_rx_data_RESETMASK 0xFF
#define uart_rx_data_DEFAULT 0x00000000

#define uart_control_READMASK 0xFFFF000F
#define uart_control_WRITEMASK 0xFFFF000F
#define uart_control_VOLATILEMASK 0x0
#define uart_control_RESETMASK 0xFFFF000F
#define uart_control_DEFAULT 0x00000000

#define uart_timeout_READMASK 0xFFFFFFFF
#define uart_timeout_WRITEMASK 0xFFFFFFFF
#define uart_timeout_VOLATILEMASK 0x0
#define uart_timeout_RESETMASK 0xFFFFFFFF
#define uart_timeout_DEFAULT 0x00000000

#define uart_errors_READMASK 0x7
#define uart_errors_WRITEMASK 0x7
#define uart_errors_VOLATILEMASK 0x7
#define uart_errors_RESETMASK 0x7
#define uart_errors_DEFAULT 0x00000000

#define uart_s_SIZE 0x100
#define uart_version_SIZE 0x4
#define uart_tx_fifo_SIZE 0x4
#define uart_rx_fifo_SIZE 0x4
#define uart_tx_data_SIZE 0x4
#define uart_rx_data_SIZE 0x4
#define uart_control_SIZE 0x4
#define uart_timeout_SIZE 0x4
#define uart_errors_SIZE 0x4

#define uart_s_OFFSET 0x0
#define uart_version_OFFSET 0x0
#define uart_tx_fifo_OFFSET 0x4
#define uart_rx_fifo_OFFSET 0x8
#define uart_tx_data_OFFSET 0xC
#define uart_rx_data_OFFSET 0x10
#define uart_control_OFFSET 0x14
#define uart_timeout_OFFSET 0x18
#define uart_errors_OFFSET 0x1C

#define uart_s_ADDRESS 0x000
#define uart_version_ADDRESS 0x000
#define uart_tx_fifo_ADDRESS 0x004
#define uart_rx_fifo_ADDRESS 0x008
#define uart_tx_data_ADDRESS 0x00C
#define uart_rx_data_ADDRESS 0x010
#define uart_control_ADDRESS 0x014
#define uart_timeout_ADDRESS 0x018
#define uart_errors_ADDRESS 0x01C
#define UART_VERSION_MAJOR_OFFSET 16
#define UART_VERSION_MAJOR_MASK 0xFF0000
#define UART_VERSION_MINOR_OFFSET 8
#define UART_VERSION_MINOR_MASK 0xFF00
#define UART_VERSION_PATCH_OFFSET 0
#define UART_VERSION_PATCH_MASK 0xFF
#define UART_TX_FIFO_FIFO_CLEAR_OFFSET 31
#define UART_TX_FIFO_FIFO_CLEAR_MASK 0x80000000
#define UART_TX_FIFO_FIFO_CLEAR 0x80000000
#define UART_TX_FIFO_FIFO_AF_OFFSET 27
#define UART_TX_FIFO_FIFO_AF_MASK 0x8000000
#define UART_TX_FIFO_FIFO_AF 0x8000000
#define UART_TX_FIFO_FIFO_AE_OFFSET 26
#define UART_TX_FIFO_FIFO_AE_MASK 0x4000000
#define UART_TX_FIFO_FIFO_AE 0x4000000
#define UART_TX_FIFO_FIFO_FULL_OFFSET 25
#define UART_TX_FIFO_FIFO_FULL_MASK 0x2000000
#define UART_TX_FIFO_FIFO_FULL 0x2000000
#define UART_TX_FIFO_FIFO_EMPTY_OFFSET 24
#define UART_TX_FIFO_FIFO_EMPTY_MASK 0x1000000
#define UART_TX_FIFO_FIFO_EMPTY 0x1000000
#define UART_TX_FIFO_FIFO_AFT_OFFSET 16
#define UART_TX_FIFO_FIFO_AFT_MASK 0xFF0000
#define UART_TX_FIFO_FIFO_AET_OFFSET 8
#define UART_TX_FIFO_FIFO_AET_MASK 0xFF00
#define UART_TX_FIFO_FIFO_DEPTH_OFFSET 0
#define UART_TX_FIFO_FIFO_DEPTH_MASK 0xFF
#define UART_RX_FIFO_FIFO_CLEAR_OFFSET 31
#define UART_RX_FIFO_FIFO_CLEAR_MASK 0x80000000
#define UART_RX_FIFO_FIFO_CLEAR 0x80000000
#define UART_RX_FIFO_FIFO_AF_OFFSET 27
#define UART_RX_FIFO_FIFO_AF_MASK 0x8000000
#define UART_RX_FIFO_FIFO_AF 0x8000000
#define UART_RX_FIFO_FIFO_AE_OFFSET 26
#define UART_RX_FIFO_FIFO_AE_MASK 0x4000000
#define UART_RX_FIFO_FIFO_AE 0x4000000
#define UART_RX_FIFO_FIFO_FULL_OFFSET 25
#define UART_RX_FIFO_FIFO_FULL_MASK 0x2000000
#define UART_RX_FIFO_FIFO_FULL 0x2000000
#define UART_RX_FIFO_FIFO_EMPTY_OFFSET 24
#define UART_RX_FIFO_FIFO_EMPTY_MASK 0x1000000
#define UART_RX_FIFO_FIFO_EMPTY 0x1000000
#define UART_RX_FIFO_FIFO_AFT_OFFSET 16
#define UART_RX_FIFO_FIFO_AFT_MASK 0xFF0000
#define UART_RX_FIFO_FIFO_AET_OFFSET 8
#define UART_RX_FIFO_FIFO_AET_MASK 0xFF00
#define UART_RX_FIFO_FIFO_DEPTH_OFFSET 0
#define UART_RX_FIFO_FIFO_DEPTH_MASK 0xFF
#define UART_TX_DATA_VAL_OFFSET 0
#define UART_TX_DATA_VAL_MASK 0xFF
#define UART_RX_DATA_VAL_OFFSET 0
#define UART_RX_DATA_VAL_MASK 0xFF
#define UART_CONTROL_PRESCALER_OFFSET 16
#define UART_CONTROL_PRESCALER_MASK 0xFFFF0000
#define UART_CONTROL_TX_IRQ_EN_OFFSET 3
#define UART_CONTROL_TX_IRQ_EN_MASK 0x8
#define UART_CONTROL_TX_IRQ_EN 0x8
#define UART_CONTROL_RX_IRQ_EN_OFFSET 2
#define UART_CONTROL_RX_IRQ_EN_MASK 0x4
#define UART_CONTROL_RX_IRQ_EN 0x4
#define UART_CONTROL_TX_EN_OFFSET 1
#define UART_CONTROL_TX_EN_MASK 0x2
#define UART_CONTROL_TX_EN 0x2
#define UART_CONTROL_RX_EN_OFFSET 0
#define UART_CONTROL_RX_EN_MASK 0x1
#define UART_CONTROL_RX_EN 0x1
#define UART_TIMEOUT_VAL_OFFSET 0
#define UART_TIMEOUT_VAL_MASK 0xFFFFFFFF
#define UART_ERRORS_OVERRUN_ERR_OFFSET 2
#define UART_ERRORS_OVERRUN_ERR_MASK 0x4
#define UART_ERRORS_OVERRUN_ERR 0x4
#define UART_ERRORS_STOP_ERR_OFFSET 1
#define UART_ERRORS_STOP_ERR_MASK 0x2
#define UART_ERRORS_STOP_ERR 0x2
#define UART_ERRORS_START_ERR_OFFSET 0
#define UART_ERRORS_START_ERR_MASK 0x1
#define UART_ERRORS_START_ERR 0x1
#endif /* _UART_REGS_H_ */

/* end */
