component:UPP_COMPONENT
L:UPP_INIT S:Upp Initialised \n
L:UPP_ULP_STATUS S:UppUlpStatus(), status = %d \n
L:UPP_INTERRUPT S:UPP interrupt %08x\n
L:UPP_PROCESS_H2D S:Host to Device packet received\n
L:UPP_PROCESS_D2H S:Device to Host packet processed\n
L:UPP_UNHANDLED_ISR S:Unhandled Upp ISR ISR0:%08x ISR1:%08x\n
L:UPP_PACKET_INFO S:Packet Data: %08x Control: %04x bytes rx:%d\n
L:UPP_END_OF_PACKET S:End of packet time = %d microseconds vlane %d\n
L:UPP_PACKET_END_PROCESSING S:Packet end, writing device address %x\n
L:UPP_HAL_SET_ENDPOINT_BAD_BINTERVAL S:Bad bInterval value %d\n
L:UPP_HAL_SET_ENDPOINT S:Writing to Endpoint table, device:%d number:%d QID:%d\n
L:UPP_HAL_SET_ENDPOINT_RAW S:                           enable = %d config0 = %08x config1 = %08x\n
L:UPP_PARSE_CONFIG_DESCRIPTOR_INFO S:New Configuration,  Device: %d Configuration:%d Number of interfaces:%d\n
L:UPP_INTERFACE_DESCRIPTOR_INFO S:New Interface:%d Alt:%d Number of endpoints:%d\n
L:UPP_ENDPOINT_ATTRIBUTE_CONTROL S:Endpoint transfer type is Control\n
L:UPP_ENDPOINT_ATTRIBUTE_ISO S:Endpoint transfer type is Iso\n
L:UPP_ENDPOINT_ATTRIBUTE_BULK S:Endpoint transfer type is Bulk\n
L:UPP_ENDPOINT_ATTRIBUTE_INTERRUPT S:Endpoint transfer type is Interrupt\n
L:UPP_ENDPOINT_ADDRESS S:Endpoint address is %d\n
L:UPP_LEX_MSG_SET_ENDPOINT S:Endpoint set message, device %d, endpoint %d buffer %d\n
L:UPP_LEX_MSG_CLEAR_ENDPOINT S:Endpoint clear message, device %d, endpoint %d buffer %d\n
L:UPP_LEX_MSG_SET_INTERFACE S:Set interface, device %d location %08x\n
L:UPP_LEX_MSG_REMOVE_DEVICE S:Remove device %d, devicePtr %08x\n
L:UPP_LEX_MSG_ROUTE_CHANGE_DONE S:Lex Route change done, device %d\n
L:UPP_REX_MSG_SET_ENDPOINT S:Rex set endpoint, device %d, endpoint %d buffer %d\n
L:UPP_REX_MSG_CLEAR_ENDPOINT S:Rex cleared endpoint, device %d, endpoint %d buffer %d\n
L:UPP_REX_MSG_ENDPOINT_NOT_RESPONSIVE S:Rex detected unresponsive endpoint, device %d, endpoint %d buffer %d\n
L:UPP_REX_MSG_DEVICE_REMOVED S:Rex removed device, device %08x\n
L:UPP_REX_MSG_SET_INTERFACE S:Rex Set interface, device address %d config settings: %08x\n
L:UPP_REX_MSG_ROUTE_CHANGE_DONE S:Rex Route change done for device %d  config settings: %08x\n
L:UPP_LEX_INVALID_BUFFER_ID_ENDPOINT S:Invalid buffer when clearing endpoint %d device %d\n
L:UPP_TRANSACTION_NOT_AVAILABLE S:Transaction not available!\n
L:UPP_TRANSACTION_IN_USE S:Transaction already in use, Device Address %d\n
L:UPP_TRANSACTION_DEVICE_NOT_FOUND S:Get Free Transaction, Device not found, Device Address %d\n
L:UPP_TRANSACTION_DOWNSTREAM_NOT_FOUND S:Downstream only Transaction not found, Device Address %d, line %d\n
L:UPP_NO_FREE_TRANSACTIONS S:No free transactions to allocate\n
L:UPP_ILLEGAL_FREE_TRANSACTION S:Freeing a transaction when none allocated!\n
L:UPP_ILLEGAL_FREE_TRANSACTION_INDEX S:Illegal free transaction from bad index %d previous %d\n
L:UPP_FREE_ABANDONED_TRANSACTION S:Freeing abandoned transaction, device address %d location %8x\n
L:UPP_CORRUPT_OPEN_LIST S:Corrupt Open list index %d line %d\n
L:UPP_ILLEGAL_TRANSACTION_INDEX S:Index %d does not match transaction given line %d\n
L:UPP_TRANSACTION_WATERMARK_CHANGE S:UPP opentransactionHighWaterMark: %d\n
L:UPP_TRANSACTION_HOST_DUPLICATE_SEQ S:**Host duplicate seq number %d device %02d time stamp %d skipping rest of packet\n
L:UPP_TRANSACTION_DEVICE_DUPLICATE_SEQ S:**Device duplicate seq number %d device %02d time stamp %d skipping rest of packet\n
L:UPP_TRANSACTION_ILLEGAL_HOST_PACKET S:Host packet ILLEGAL!  Device %d multiple setup packet received, seq %d timestamp %d\n
L:UPP_TRANSACTION_ILLEGAL_SETUP_PACKET S:ILLEGAL setup packet! Device %d, transaction type %d, sequence %d\n
L:UPP_TRANSACTION_SET_ADDRESS S:Set address, new address = %d route string = %x timeStamp %d\n
L:UPP_TRANSACTION_GET_CONFIGURATION S:Get Configuration, device address %d route %x timeStamp %d\n
L:UPP_MAX_DEVICE_OVER S:Can't allocated new device. No more available slot\n
L:UPP_MAX_ENDPOINT_OVER S:Can't allocated new endpoint. No more available slot\n
L:UPP_ADD_SAME_DEVICE S:The device address(%d) and route (0x%8x)already exist\n
L:UPP_ADD_ADDRESS_EXIST S:The device address(%d) is already exist, Can't add it!\n
L:UPP_ADD_ROUTE_EXIST S:The device route string(0x%8x) is already in use by device %d!\n
L:UPP_NULL_DEVICE S:Device pointer is NULL! address %d at line %d\n
L:UPP_DEVICE_ALREADY_PENDING S:Device add already pending %08x\n
L:UPP_WRONG_ENDPOINT S:Endpoint index (%d) is wrong\n
L:UPP_FOUND_REMOVE_DEVICE S:Found the device to be removed: addr(%d), route(0x%x), mem address(0x%X) \n
L:UPP_DEVICE_ADD S:Add device request: dev addr(%d), route(0x%x), mem address(0x%X) \n
L:UPP_DEVICE_REMOVE S:Remove device: dev addr(%d), route(0x%x), mem address(0x%X) \n
L:UPP_DEVICE_FREE S:Free device: dev addr(%d), route(0x%x), mem address(0x%X) \n
L:UPP_INVALID_DEVICE_FREE S:Free device %08x called with unexpected device pointer %08x\n
L:UPP_DEVICE_LOCATION S:\n\n                             Device Address %3d. Route Path: 0x%08x. ======================\n
L:UPP_DEVICE_ENDPOINT S:    Endpoint: Number:%2d, type %d            Route:0x%08x, \n
L:UPP_DEVICE_ENDPOINT_DETAIL S:              Active|Set|Clear|Dir: 0x%04x Max Burst: %d bInterval %d\n
L:UPP_ENDPOINT_NEXT S:              Current:0x%08x, Next endpoint 0x%08x, Prev endpoint 0x%08x\n
L:UPP_ENDPOINT_FREE S:Free endpoint: Number:%d, Type:%d route:0x%08x\n
L:UPP_DEVICE_NEXT S:Next device 0x%x, Prev device 0x%x\n
L:UPP_DEVICE_ADDR S:Allocated Memory for address %d is 0x%08X\n
L:UPP_NUM_DEVICES S:\n             Number of allocated devices:%d, free devices:%d\n
L:UPP_NUM_ENDPOINTS S:               Number of allocated endpoints:%d, free endpoints:%d\n\n
L:UPP_NEW_ENDPOINT S:New endpoint: route 0x%x, number %d, type %d\n
L:UPP_DEVICE_SET_INTERFACE S:Set Interface: Device %d value %08x\n
L:UPP_DEVICE_SET_CONFIFGURATION S:Set Configuration: Device %d Route 0x%08x Config value: %d\n
L:UPP_SAME_ACTIVE_INTERFACE S:Active interface is the same with before. Route: 0x%x endpoint %08x\n
L:UPP_NO_ENDPOINTS_FOR_INTERFACE S:No endpoints found for the specified interface Route: 0x%08x\n
L:UPP_ACTIVE_INTERFACE S:Active interface callback. Endpoint Route: 0x%x, Number:%d\n
L:UPP_INACTIVE_INTERFACE S:Inactive interface callback. Endpoint Route: 0x%x, Number:%d\n
L:UPP_NO_FREE_INTERFACES S:No free interfaces available. Interface Route: 0x%x\n
L:UPP_INTERFACE_LINK_ERROR S:Error when adding interface to active list. Interface Route: 0x%x\n
L:UPP_NO_ENDPOINTS_MARKED_CLEAR S:No endpoints found that were marked to be cleared\n
L:UPP_NO_ENDPOINTS_MARKED_SET S:No endpoints found that were marked to be set\n
L:UPP_ID_MGR_FIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR S:STAT:UPP upp->id_mgr_fifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n
L:UPP_ID_MGR_FIFO_WRENG_STATS0_FIFO_FULL_ERR S:STAT:UPP upp->id_mgr_fifo->write_engine->stats0->fifo_full_err: %d\n
L:UPP_ID_MGR_FIFO_WRENG_STATS0_PKT_ERR S:STAT:UPP upp->id_mgr_fifo->write_engine->stats0->pkt_err: %d\n
L:UPP_ID_MGR_FIFO_WRENG_STATS0_PKT_SOP_ERR S:STAT:UPP upp->id_mgr_fifo->write_engine->stats0->pkt_sop_err: %d\n
L:UPP_ID_MGR_FIFO_WRENG_STATS0_DRP_PKT_RD S:STAT:UPP upp->id_mgr_fifo->write_engine->stats0->drp_pkt_rd: %d\n
L:UPP_ID_MGR_FIFO_WRENG_STATS0_DRP_PKT_WR S:STAT:UPP upp->id_mgr_fifo->write_engine->stats0->drp_pkt_wr: %d\n
L:UPP_ID_MGR_FIFO_WRENG_STATS0_DRP_PKT S:STAT:UPP upp->id_mgr_fifo->read_engine->stats0->drp_pkt: %d\n
L:UPP_ISO_REX_FIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR S:STAT:UPP upp->iso_rex_fifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n
L:UPP_ISO_REX_FIFO_WRENG_STATS0_FIFO_FULL_ERR S:STAT:UPP upp->iso_rex_fifo->write_engine->stats0->fifo_full_err: %d\n
L:UPP_ISO_REX_FIFO_WRENG_STATS0_PKT_ERR S:STAT:UPP upp->iso_rex_fifo->write_engine->stats0->pkt_err: %d\n
L:UPP_ISO_REX_FIFO_WRENG_STATS0_PKT_SOP_ERR S:STAT:UPP upp->iso_rex_fifo->write_engine->stats0->pkt_sop_err: %d\n
L:UPP_ISO_REX_FIFO_WRENG_STATS0_DRP_PKT_RD S:STAT:UPP upp->iso_rex_fifo->write_engine->stats0->drp_pkt_rd: %d\n
L:UPP_ISO_REX_FIFO_WRENG_STATS0_DRP_PKT_WR S:STAT:UPP upp->iso_rex_fifo->write_engine->stats0->drp_pkt_wr: %d\n
L:UPP_ISO_REX_FIFO_WRENG_STATS0_DRP_PKT S:STAT:UPP upp->iso_rex_fifo->read_engine->stats0->drp_pkt: %d\n
L:UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR S:STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n
L:UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_FIFO_FULL_ERR S:STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->fifo_full_err: %d\n
L:UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_PKT_ERR S:STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->pkt_err: %d\n
L:UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_PKT_SOP_ERR S:STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->pkt_sop_err: %d\n
L:UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_DRP_PKT_RD S:STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->drp_pkt_rd: %d\n
L:UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_DRP_PKT_WR S:STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->drp_pkt_wr: %d\n
L:UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_DRP_PKT S:STAT:UPP upp->ctrl_trfr_h2d_fifo->read_engine->stats0->drp_pkt: %d\n
L:UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_NFIFO_DCOUNT S:STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->nfifo_dcount: %d\n
L:UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_PFIFO_DCOUNT S:STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->pfifo_dcount: %d\n
L:UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR S:STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n
L:UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_FIFO_FULL_ERR S:STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->fifo_full_err: %d\n
L:UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_PKT_ERR S:STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->pkt_err: %d\n
L:UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_PKT_SOP_ERR S:STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->pkt_sop_err: %d\n
L:UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_DRP_PKT_RD S:STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->drp_pkt_rd: %d\n
L:UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_DRP_PKT_WR S:STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->drp_pkt_wr: %d\n
L:UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_DRP_PKT S:STAT:UPP upp->ctrl_trfr_d2h_fifo->read_engine->stats0->drp_pkt: %d\n
L:UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_NFIFO_DCOUNT S:STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->nfifo_dcount: %d\n
L:UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_PFIFO_DCOUNT S:STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->pfifo_dcount: %d\n
L:UPP_QUEUE_STATE_TRANSITION S:Queue manager: old state = %d, new state = %d on event = %d\n
L:UPP_QUEUE_INVALID_EVENT S:Queue manager: got invalid event %d in state %d\n
L:UPP_QUEUE_SPURIOUS_INTERRUPT_EVENT S:Queue manager: spurious interrupt received %x\n
L:UPP_ENDPOINT_ENTRY_SET S:Set Endpoint device %d endpoint %d buffer ID %d\n
L:UPP_ENDPOINT_ENTRY_CLEARED S:Clear Endpoint device %d endpoint %d buffer ID %d\n
L:UPP_NO_FREE_ISO_BUFFERS S:No more accelerated queues available!\n
L:UPP_ICMD_ENABLED S:UPP is enabled\n
L:UPP_ICMD_DISABLED S:UPP is disabled\n
L:UPP_ICMD_CONTROL_TRANSFER_ENABLED S:UPP control transfer is enabled\n
L:UPP_ICMD_CONTROL_TRANSFER_DISABLED S:UPP control transfer is disabled\n
L:IS_UPP_ISO_ENABLE_STATUS S:UPP ISO enabled (0 = disabled) = %d \n
L:IS_UPP_CONTROL_TRANSFER_ENABLED S:UPP control transfer = %d\n
