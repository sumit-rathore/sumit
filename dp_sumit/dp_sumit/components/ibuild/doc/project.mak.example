# a project.mak example file.  This file should be copied to the top level project component build directory

#Define the project name and the component directory
export PROJECT=
export TOP_LEVEL_COMPONENTS_DIR=$(shell pwd)/../components


# Define all of the following tools
# Note: CROSS is only a convience for this file only
CROSS=mips64-octeon-linux-gnu-
export AR=${CROSS}ar
export CC=${CROSS}gcc
export LD=${CROSS}ld
export AS=${CROSS}as
export OBJCOPY=${CROSS}objcopy
export OBJDUMP=${CROSS}objdump
export SIZE=${CROSS}size
export MKDIR=mkdir -p
export RMDIR=rmdir
export RM=rm -f
export SED=sed
export AWK=awk
export CP=cp


# Compiler flags: broken up into different groups for convience, only CFLAGS is exported
WARNINGFLAGS=-Wall
# Used by LG1
# -Werror -Wextra -Wno-unused-parameter -Wdeclaration-after-statement \
# -Waggregate-return -Wswitch-default -Wmissing-noreturn -Wmissing-format-attribute \
# -Wundef -Wformat-nonliteral -Wwrite-strings -Wshadow -Wpointer-arith -Winline \
# -Wformat-security -Winit-self -Wmissing-include-dirs -Wnested-externs -Wredundant-decls
#Useful warnings, but cause too many issues with the current LG1 code
# -Wunreachable-code -- All of the logging levels that are compiled out, are returned as unreachable code
# -Wmissing-declarations  -- This causes issues with the spectra reg code
# -Wcast-align  -- Causes issues with AsicRegisters.h, as there are no checks for alignment in this file
# -Wswitch-enum  -- Very useful, but currently has too many warnings that need to be fixed

# NOTE: delete null pointer checks is bad, when there is no MMU to capture segfaults.
OPTIMIZATIONFLAGS=-Os -fno-delete-null-pointer-checks

# Note: that each components "/inc/" directory is automatically included
#       This is only for an additional project component include directory
#       It should normally be left empty
#
#       A use case for using it would be a top level include directory for an options.h
#       Using "-I$(shell pwd)/../inc -include options.h" from the top level /build could be
#       easier than including a bunch of DEFNFLAGS for the whole project
#
#       Another use case is to pick up on a project_components.h project wide header file
INCLUDEFLAGS=-I$(shell pwd)/../inc
# Note: changing the ABI would require a "make clean" afterwards
MACHINEFLAGS=
# Note: changing DEFNFLAGS requries the user to do a "make clean" afterwards
#For little endian projects using ilog
#DEFNFLAGS=-DIENDIAN=0
#For big endian projects using ilog
#DEFNFLAGS=-DIENDIAN=1
DEFNFLAGS=
# -pipe just gets GCC to use pipes between the preprocessor, compiler and assembler, instead of temp files
OTHERCFLAGS=-pipe
export CFLAGS=${OPTIMIZATIONFLAGS} ${WARNINGFLAGS} ${INCLUDEFLAGS} ${MACHINEFLAGS} ${DEFNFLAGS} ${OTHERCFLAGS}



# Linker flags
# warn-common is a very good idea and should be a linker default
export LDFLAGS=-Wl,--warn-common
export LDFLAGS_TEST_HARNESS=-Wl,--warn-common


# This defines the version of ibuild that we are configured to use
# a future version of ibuild may require different variables to be set
export IBUILD_PROJECT_MAK_CONFIGURED_VERSION=1

# Note the location of the rules.mak file for all the components
export IBUILD_RULES=$(shell pwd)/../components/ibuild/build/rules.mak

# where is the project_components file
export PROJECT_COMPONENTS=$(shell pwd)/../inc/project_components.h

# Set up the ibuild settings for making .icron files
export SPECTAREG_XML_FILES=bgrg_comp.xml ulp_comp.xml xgp_comp.xml pcsdrp_comp.xml
export IBUILD_ICRON_HEADER_SPECTAREG_BLOCK=\
	"spectareg_xml: $(SPECTAREG_XML_FILES)\n"\
	"spectareg_bgrg_comp_offset: 0x20000000\n"\
	"spectareg_xgp_comp_offset: 0x20000100\n"\
	"spectareg_ulp_comp_offset: 0x20000200\n"\
	"spectareg_pcsdrp_comp_offset: 0x20000300\n"
export ICRON_HEADER_PROJECT=BLACKBIRD

