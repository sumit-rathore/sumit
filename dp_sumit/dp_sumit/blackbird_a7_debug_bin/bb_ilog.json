{
    "TOPLEVEL_COMPONENT": [
        {
            "ilog_name": "SW_VERSION",
            "ilog_string": "----> ICRON Technologies Blackbird Project - Software version v%d.%d.%d <----\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CHIP_REV",
            "ilog_string": "Chip ID is Major 0x%x, Minor 0x%x, Debug 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UNIT_TYPE",
            "ilog_string": "The unit type is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PLATFORM_ID",
            "ilog_string": "The platform ID is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VARIANT_ID",
            "ilog_string": "The variant ID is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BUILD_DATE",
            "ilog_string": "SW build was done on %04d/%02d/%02d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BUILD_TIME",
            "ilog_string": "SW build was done at %02d:%02d:%02d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UNEXPECTED_TRAP",
            "ilog_string": "Unexpected trap occurred, PC was 0x%x, nPC was 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UNEXPECTED_TRAP_WITHOUT_WINDOWS",
            "ilog_string": "Unexpected trap occurred without spare windows, last i7 is 0x%x, previous was 0x%x, previous to that was 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AHB_FAILURE_TRAP",
            "ilog_string": "AHB FAILURE TRAP Status: 0x%x, Failure Addr: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INST_FETCH_ERR_TRAP",
            "ilog_string": "INSTRUCTION FETCH ERROR\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ILLEGAL_INST_ERR_TRAP",
            "ilog_string": "ILLEGAL INSTRUCTION ERROR\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PRIV_INST_ERR_TRAP",
            "ilog_string": "PRIVILEGED INSTRUCTION ERROR\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INST_ACC_ERR_TRAP",
            "ilog_string": "INSTRUCTION ACCESS ERROR\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UNIMPL_FLUSH_TRAP",
            "ilog_string": "UNIMPLEMENTED FLUSH\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DATA_ACC_ERR_TRAP",
            "ilog_string": "DATA ACCESS ERROR\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DIV_BY_ZERO_ERR_TRAP",
            "ilog_string": "DIVIDE BY ZERO ERROR\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TRAP_END_POINT",
            "ilog_string": "Trap Handler End Point. Sparc TBR=0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DATA_ACC_EXC_TRAP",
            "ilog_string": "DATA ACCESS EXCEPTION PC was 0x%x, nPC was 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DATA_STORE_ERR_TRAP",
            "ilog_string": "DATA STORE ERROR TRAP PC was 0x%x, nPC was 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ATMEL_NOT_PROGRAM",
            "ilog_string": "Atmel is not programmed (%d). All features will be disabled soon\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ATMEL_VALIDATION_FAIL",
            "ilog_string": "Atmel ATSHA204 Vaildation Failed, ATMEL_processState = %d, ErrCnt = %d \n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "KILL_SYSTEM",
            "ilog_string": "**** SYSTEM SHUTDOWN ****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TIMER1_ERROR",
            "ilog_string": "Timer1 does not work !!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TEST_CPUCOM_LEX_RECV",
            "ilog_string": "Received message count %d. Elapsed time since last tx=%d us.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TEST_CPUCOM_REX_SEND",
            "ilog_string": "Received and Sending message count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "HW_SW_VER_MISMATCH",
            "ilog_string": "FPGA / FIRMWARE version doesn't match!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPLEVEL_READ_INREVIUM_LMK_REG",
            "ilog_string": "Readback from LMK reg %d: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPLEVEL_BOARD_INFO",
            "ilog_string": "Current Core Board is A0%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEBUG_ASSERT_BB",
            "ilog_string": "CAUSE AN ASSERT IN BB FOR DEBUGGING\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PLUG_TEST_IMAGE",
            "ilog_string": "  *** This is a PlugTest Image ***\n",
            "ilog_num_args": 0
        }
    ],
    "ULP_COMPONENT": [
        {
            "ilog_name": "ULP_LEX_INITIALIZATION",
            "ilog_string": "Lex ULP initialization\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_LEX_ISR",
            "ilog_string": "Got a Lex ULP ISR, Irq0: 0x%08x Irq1: 0x%02x LTSSM: 0x%02x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_LEX_HOST_VBUS_INTERRUPT",
            "ilog_string": "Lex Host VBus interrupt, %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_HOST_VBUS_DETECT",
            "ilog_string": "Lex VBus detected %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_HOST_RX_DETECT",
            "ilog_string": "Lex Rx detected %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_HOST_STATE_MSG",
            "ilog_string": "Lex host state machine received a message, old state = %d, Event = %d new state = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_LEX_HOST_USB3",
            "ilog_string": "** Host port supports USB3/2 **\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_LEX_HOST_USB2",
            "ilog_string": "** Host port supports USB2 **\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_LEX_HOST_USB3_REMOVED",
            "ilog_string": "USB3 removed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_LEX_HOST_SNOOP_TIMEOUT",
            "ilog_string": "Host port Snoop mode timeout RxDetect = %d ltssm = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_LEX_USB2_ENABLED_NO_CONNECTION",
            "ilog_string": "Lex USB2 state machine enabled but not connected!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_LEX_USB2_STATE_MSG",
            "ilog_string": "Lex USB2 state machine received a message, old state = %d, Event = %d new state = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_LEX_USB2_UNEXPECTED_EVENT",
            "ilog_string": "Lex USB2 state machine received an unexpected event, Event = %d state = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_LEX_USB3_STATE_MSG",
            "ilog_string": "Lex USB3 state machine received a message, old state = %d, Event = %d new state = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_LEX_USB3_UNEXPECTED_EVENT",
            "ilog_string": "Lex USB3 state machine received an unexpected event, Event = %d state = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_LEX_USB3_RESET_STATE_MSG",
            "ilog_string": "Lex USB3 reset state machine received a message, old state = %d, Event = %d new state = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_LEX_USB3_INVALID_RESET_STATE_MSG",
            "ilog_string": "Lex USB3 reset state machine in a bad state for this event, state = %d Event = %d \n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_LEX_USB3_RESET_PLL_NOT_LOCKED",
            "ilog_string": "Lex USB3 reset PLL not locked!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_LEX_USB3_LEX_SETUP_ERROR_DETECTED",
            "ilog_string": "Lex USB3 setup failure; failure count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_USB3_REX_SETUP_ERROR_DETECTED",
            "ilog_string": "Rex USB3 setup failure reported; failure count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_USB3_LEX_STUCK_AT_INACTIVE",
            "ilog_string": "Lex USB3 - Lex stuck at inactive; failure count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_USB3_WARM_RESET_COUNT_CLEARED",
            "ilog_string": "Lex USB3 - Warm reset count %d cleared\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_USB3_FAILURE_RECOVERY",
            "ilog_string": "Lex USB3 - Lex recovery; failure count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_UNEXPECTED_CPU_MSG_LENGTH",
            "ilog_string": "Unexpected length of CPU message received by Lex, msgLength = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_COMLINK_UP_EVENT",
            "ilog_string": "Lex received a comlink event, link is ** UP **\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_LEX_COMLINK_DOWN_EVENT",
            "ilog_string": "Lex received a comlink event, link is ** DOWN **\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_LEX_RCV_REX_USB_MSG",
            "ilog_string": "Lex received a Rex USB CPU message, msg = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_RCV_REX_USB2_MSG",
            "ilog_string": "Lex received a Rex USB2 CPU message, msg = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_RCV_REX_USB3_MSG",
            "ilog_string": "Lex received a Rex USB3 CPU message, msg = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_RCV_REX_USB3_RESET_MSG",
            "ilog_string": "Lex received a Rex USB3 reset CPU message, msg = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LEX_RCV_UNEXPECTED_USB3_RESET_MSG",
            "ilog_string": "Lex USB3 reset: expected %d, but received %d message from Rex \n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_LTSSM_VALID",
            "ilog_string": "LTSSM register value is valid time %d microseconds\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LTSSM_INVALID",
            "ilog_string": "LTSSM register value is invalid, lttssm = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CTRL_USB3_VBUS_ON",
            "ilog_string": "vBus is ON\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_CTRL_USB3_VBUS_OFF",
            "ilog_string": "vBus is OFF\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_CTRL_PHY_USB3_VBUS_ON",
            "ilog_string": "PHY vBus is ON\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_CTRL_PHY_USB3_VBUS_OFF",
            "ilog_string": "PHY vBus is OFF\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_REX_ISR",
            "ilog_string": "Got a Rex ULP ISR, Irq0: 0x%08x Irq1: 0x%02x LTSSM: 0x%02x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_REX_USB2_STATE_MSG",
            "ilog_string": "Rex USB2 state machine received a message, old state = %d, Event = %d, new state = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_REX_USB3_STATE_MSG",
            "ilog_string": "Rex USB3 state machine received a message, old state = %d, Event = %d, new state = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_REX_USB3_DELAY_TIMEOUT",
            "ilog_string": "Rex USB3 delayed ready timeout rexUlpFsmState = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_REX_USB3_UNEXPECTED_EVENT",
            "ilog_string": "Rex USB3 state machine received an unexpected event, Event = %d state = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_REX_UNEXPECTED_CPU_MSG_LENGTH",
            "ilog_string": "Unexpected length of CPU message received by Rex, msgLength = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_REX_NO_RX_DETECT_YET",
            "ilog_string": "USB3 Rex - no Rx terminations detected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_REX_RCV_LEX_USB_MSG",
            "ilog_string": "Rex received a Lex USB CPU message, msg = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_REX_RCV_LEX_USB2_MSG",
            "ilog_string": "Rex received a Lex USB2 CPU message, msg = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_REX_RCV_LEX_USB3_MSG",
            "ilog_string": "Rex received a Lex USB3 CPU message, msg = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_REX_RCV_LEX_USB3_RESET_MSG",
            "ilog_string": "Rex received a Lex USB3 Reset CPU message, msg = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_REX_GE_REX_DEV_DISCONN",
            "ilog_string": "REX - GE REX device disconnect\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_REX_GE_REX_DEV_CONN",
            "ilog_string": "REX - GE REX device connect\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_ULP_CORE_PLL_LOCK_FAIL",
            "ilog_string": "Ulp Core failed to lock\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_REX_COMLINK_UP_EVENT",
            "ilog_string": "Rex received a comlink event, link is ** UP **\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_REX_COMLINK_DOWN_EVENT",
            "ilog_string": "Rex received a comlink event, link is ** DOWN **\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_LEX_SET_CONTROL_RESULT",
            "ilog_string": "ULP_LexUsbControl() controlflags 0x%x Operation %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_LEX_SYSTEM_UPDATE_RESULT",
            "ilog_string": "LexUlpUpdateSystem() controlflags 0x%x hostEnable  %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_REX_SET_CONTROL_RESULT",
            "ilog_string": "ULP_RexUsbControl controlflags 0x%x Operation %d result %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_REX_USB2_SET_CONTROL_RESULT",
            "ilog_string": "ULP_RexUsb2Control flags 0x%x Operation %d result %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_LEX_USB2_SET_CONTROL_RESULT",
            "ilog_string": "ULP_LexUsb2Control flags 0x%x Operation %d result %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_REX_USB3_SET_CONTROL_RESULT",
            "ilog_string": "ULP_RexUsb3Control flags 0x%x Operation %d result %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_LEX_USB3_SET_CONTROL_RESULT",
            "ilog_string": "ULP_LexUsb3Control flags 0x%x Operation %d result %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_HAL_SET_IRQ_ENABLE",
            "ilog_string": "USB3 IRQ enabled irq0:0x%x irq1: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_HAL_SET_IRQ_DISABLE",
            "ilog_string": "USB3 IRQ disabled irq0:0x%x irq1: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_HAL_SET_SS_DISABLE",
            "ilog_string": "USB3 SS_DISABLED set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_GO_TO_INACTIVE",
            "ilog_string": "USB3 Go to Inactive set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_SET_RX_DETECT",
            "ilog_string": "USB3 Rx.Detect set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_SET_HOT_RESET_WAIT_ON",
            "ilog_string": "USB3 Hot Reset wait ON\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_SET_HOT_RESET_WAIT_OFF",
            "ilog_string": "USB3 Hot Reset wait OFF\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_SET_HOT_RESET",
            "ilog_string": "USB3 generating Hot Reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_SET_WARM_RESET",
            "ilog_string": "USB3 generating warm reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_WAIT_IN_POLLING_ON",
            "ilog_string": "USB3 Wait in the polling state ON\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_WAIT_IN_POLLING_OFF",
            "ilog_string": "USB3 Wait in the polling state OFF\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_RX_AUTO_TERM_ON",
            "ilog_string": "USB3 Auto Rx terminations on\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_RX_AUTO_TERM_OFF",
            "ilog_string": "USB3 Auto Rx terminations off\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_RX_TERM_ON",
            "ilog_string": "USB3 Rx terminations on\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_RX_TERM_OFF",
            "ilog_string": "USB3 Rx terminations off\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_GE_VBUS_ON",
            "ilog_string": "USB2 Lex GE vBus on\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_GE_VBUS_OFF",
            "ilog_string": "USB2 Lex GE vBus off\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_ENTER_STANDBY",
            "ilog_string": "USB3 Entering Standby\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_EXIT_STANDBY",
            "ilog_string": "USB3 Exiting Standby\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_REX_VBUS_ON",
            "ilog_string": "Rex vBus on\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_HAL_REX_VBUS_OFF",
            "ilog_string": "Rex vBus off\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_INIT_CALLED",
            "ilog_string": "ULP initialization called\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_CORE_RESET_CALLED",
            "ilog_string": "ULP core reset triggered PLL lock took %d microseconds\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_USB3_TAKEDOWN_CALLED",
            "ilog_string": "ULP_controlTakedownUSB3() called\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_GE_CONTROL_RCV_CPU_MSG",
            "ilog_string": "GE Control received a CPU message, msg = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_RESET_STATE",
            "ilog_string": "ULP Reset State machine, state = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_LTSSM_VALUE_AFTER_DISABLE",
            "ilog_string": "LTSSM register value after vBus disable= 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_SENT_LRTY",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->snt_lrty: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_SENT_LBAD",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->snt_lbad: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_RCVD_LRTY",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->rcvd_lrty: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_RCVD_LBAD",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->rcvd_lbad: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_TX_LFPS_CNT_IN_ERR",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->tx_lfps_cnt_in_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_RX_LFPS_CNT_IN_ERR",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->rx_lfps_cnt_in_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_TX_FRAMER_PTP_VIOLATED",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->tx_framer_ptp_violated: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_LINK_TRAINING_PTP_VIOLATED",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->link_training_ptp_violated: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_LINK_CMD_PTP_VIOLATED",
            "ilog_string": "USTAT:ULP bb_chip->ulp_core->stats0->link_command_ptp_violated: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_LMP_PTP_VIOLATED",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->lmp_ptp_violated: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_STATS_LINK_PARTNER_PTP_VIOLATED",
            "ilog_string": "STAT:ULP bb_chip->xusb3->stats0->link_partner_ptp_violated: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_LINK_CMD_RX_EVENT_FIFO_OVERFLOW",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->link_command_rx_event_fifo_overflow: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_LINK_CMD_RX_EVENT_FIFO_UNDERFLOW",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->link_command_rx_event_fifo_underflow: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_LMP_RX_EVENT_FIFO_OVERFLOW",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->lmp_rx_event_fifo_overflow: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_LMP_RX_EVENT_FIFO_UNDERFLOW",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->lmp_rx_event_fifo_underflow: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_REMOTE_RX_HDR_BUFF_CRDT_IN",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->remote_rx_hdr_buff_crdt_cnt_in_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_TO_PHY_OUT_SOP",
            "ilog_string": "ULP CORE STATS PTP SOP to PHY path count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_TO_PHY_OUT_EOP",
            "ilog_string": "ULP CORE STATS PTP EOP to PHY path count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_FROM_PHY_IN_SOP",
            "ilog_string": "ULP CORE STATS PTP SOP from PHY path count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_FROM_PHY_IN_EOP",
            "ilog_string": "ULP CORE STATS PTP EOP from PHY path count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_TO_LINK_OUT_SOP",
            "ilog_string": "ULP CORE STATS PTP SOP to ethernet link path count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_TO_LINK_OUT_EOP",
            "ilog_string": "ULP CORE STATS PTP EOP to ethernet link path count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_FROM_LINK_IN_SOP",
            "ilog_string": "ULP CORE STATS PTP SOP from ethernet link path count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_FROM_LINK_IN_EOP",
            "ilog_string": "ULP CORE STATS PTP EOP from ethernet link path count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_GO2_U0_FROM_RECOVERY",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->go2_u0_from_recovery: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_STATS_RX_GO_RECOVERY",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->stats0->rx_go_recovery: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_PHY_STATS0_RX_ELASTIC_BUFF_OVERFLOW",
            "ilog_string": "USTAT:ULP bb_chip->ulp_phy->stats0->rx_elastic_buff_overflow: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_PHY_STATS0_RX_ELASTIC_BUFF_UNDERFLOW",
            "ilog_string": "STAT:ULP bb_chip->ulp_phy->stats0->rx_elastic_buff_underflow: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_PHY_STATS0_RX_DISPARITY_ERR",
            "ilog_string": "STAT:ULP bb_chip->ulp_phy->stats0->rx_disparity_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_PHY_STATS1_SKIP_INSERT_IN_ERR",
            "ilog_string": "STAT:ULP bb_chip->ulp_phy->stats1->skp_insert_in_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_PHY_STATS1_DPP_ABORT",
            "ilog_string": "STAT:ULP bb_chip->ulp_phy->stats1->dpp_abort: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_PHY_STATS1_RX_FRAMER_PTP_VIOLATED",
            "ilog_string": "STAT:ULP bb_chip->ulp_phy->stats1->rx_framer_ptp_violated: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_STATS_UNKNOWN_PKT_DRP",
            "ilog_string": "STAT:ULP bb_chip->xusb3->stats0->unknown_pkt_drp: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_STATS_DWN_STREAM_BUSY_DRP",
            "ilog_string": "STAT:ULP bb_chip->xusb3->stats0->dwn_stream_busy_drp: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_STATS_DROP_LONE_DPP",
            "ilog_string": "STAT:ULP bb_chip->xusb3->stats0->drop_lone_dpp: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_STATS_RCVD_LONE_DPH",
            "ilog_string": "STAT:ULP bb_chip->xusb3->stats0->rcvd_lone_dph: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_STATS_TIMEDOUT_2JOIN_DPP",
            "ilog_string": "STAT:ULP bb_chip->xusb3->stats0->timedout_2join_dpp: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_RX_PFIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR",
            "ilog_string": "STAT:ULP bb_chip->xusb3->rx_pfifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_RX_PFIFO_WRENG_STATS0_FIFO_FULL_ERR",
            "ilog_string": "STAT:ULP bb_chip->xusb3->rx_pfifo->write_engine->stats0->fifo_full_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_RX_PFIFO_WRENG_STATS0_PKT_ERR",
            "ilog_string": "STAT:ULP bb_chip->xusb3->rx_pfifo->write_engine->stats0->pkt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_RX_PFIFO_WRENG_STATS0_PKT_SOP_ERR",
            "ilog_string": "STAT:ULP bb_chip->xusb3->rx_pfifo->write_engine->stats0->pkt_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_RX_PFIFO_WRENG_STATS0_DRP_PKT_RD",
            "ilog_string": "STAT:ULP bb_chip->xusb3->rx_pfifo->write_engine->stats0->drp_pkt_rd: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_RX_PFIFO_WRENG_STATS0_DRP_PKT_WR",
            "ilog_string": "STAT:ULP bb_chip->xusb3->rx_pfifo->write_engine->stats0->drp_pkt_wr: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_RX_PFIFO_RDENG_STATS0_DRP_PKT",
            "ilog_string": "STAT:ULP bb_chip->xusb3->rx_pfifo->read_engine->stats0->drp_pkt: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_PTPGUARD_2CORE_MISSING_SOP_ERR",
            "ilog_string": "STAT:ULP bb_chip->xusb3->ptp_guard_2core->stats0->missing_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_PTPGUARD_2CORE_MISSING_EOP_ERR",
            "ilog_string": "STAT:ULP bb_chip->xusb3->ptp_guard_2core->stats0->missing_eop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB3_PTPGUARD_2CORE_MAX_CYCLE_ERR",
            "ilog_string": "STAT:ULP bb_chip->xusb3->ptp_guard_2core->stats0->max_cycle_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_PTPGUARD_2PHY_MISSING_SOP_ERR",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->ptp_guard_2phy->stats0->missing_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_PTPGUARD_2PHY_MISSING_EOP_ERR",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->ptp_guard_2phy->stats0->missing_eop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_CORE_PTPGUARD_2PHY_MAX_CYCLE_ERR",
            "ilog_string": "STAT:ULP bb_chip->ulp_core->ptp_guard_2phy->stats0->max_cycle_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_GE_CONTROL_STATES",
            "ilog_string": "geControl.controlStates old: %d new:%d enable:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_GE_CHANNEL_STATUS",
            "ilog_string": "UlpGeChannelStatus() %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_GE_FAILURE_HANDLER",
            "ilog_string": "GeFailureHandler: Running Watchdog Occur !!!!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULP_LEX_USB3_CHANNEL_STATUS",
            "ilog_string": "UlpLexUsb3ChannelStatus() %d lexOnlyResetActive %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_LEX_USB3_RESET_STATE",
            "ilog_string": "UlpLexUsb3ResetLexOnly() lexOnlyResetState %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULP_REX_USB3_CHANNEL_STATUS",
            "ilog_string": "UlpRexUsb3ChannelStatus() %d RexOnlyResetActive %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULP_LEX_USB_3_IRQ_1",
            "ilog_string": "rexReqInactive %d standbyExit %d LexOnlyResetTriggered %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_MAX_CYCLE",
            "ilog_string": "max_cycle_mode %d max_cycles %d\n",
            "ilog_num_args": 2
        }
    ],
    "RS232_COMPONENT": [
        {
            "ilog_name": "RS232_UNEXPECTED_CPU_MSG_LENGTH",
            "ilog_string": "Unexpected length of CPU message received, msgLength = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RS232_RCV_CPU_MSG",
            "ilog_string": "Received a CPU message, RS232 device state %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RS232_MCA_CHANNEL_STATUS",
            "ilog_string": "RS232 MCA channel status %d\n",
            "ilog_num_args": 1
        }
    ],
    "ROM_COMPONENT": [
        {
            "ilog_name": "ROM_PLATFORM_LEX",
            "ilog_string": "Blackbird LEX, Platform ID: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ROM_PLATFORM_REX",
            "ilog_string": "Blackbird REX, Platform ID: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ROM_FPGA_VERSION",
            "ilog_string": "Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ROM_FPGA_DATE",
            "ilog_string": "Date: %d/%d/%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ROM_FPGA_TIME",
            "ilog_string": "Time: %d:%d:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ROM_VERSION",
            "ilog_string": "Bootloader Version: %d.%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ROM_DBGXX",
            "ilog_string": "ROMDBG 0x%x, 0x%x\n",
            "ilog_num_args": 2
        }
    ],
    "COMMAND_COMPONENT": [
        {
            "ilog_name": "CMD_PROGRAM_ERASE_BLOCK",
            "ilog_string": "Erasing block %d of %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CMD_PROGRAM_ERASE_BLOCK_FAILED",
            "ilog_string": "ERROR: Erasing block %d of %d failed\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CMD_PROGRAM_WRITE_FAILED",
            "ilog_string": "ERROR: Write failed!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CMD_PROGRAM_WRITE_SUCCESS",
            "ilog_string": "Write success!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CMD_PROGRAM_ADDRESS",
            "ilog_string": ">>>   Programming to address 0%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CMD_SYSTEM_INVALID",
            "ilog_string": "CMD Rx invalid Cmd: 0x%x, SubCmd: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CMD_RUN_PROGRAMBB",
            "ilog_string": "### Rx RunPgmBB ### Start Addr: %x, Size: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "VERIFY_ERASE_FAILED",
            "ilog_string": "Verify Erase Failed: Erased addr %x has data %x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_RX_CMD",
            "ilog_string": "CMD_processCommandProgramSubcommand: CMD Rx invalid, Cmd %x, SubCmd %x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CMD_PROGRAM_BB_CALL",
            "ilog_string": "Load and run PROGRAM_BB After 300ms\n",
            "ilog_num_args": 0
        }
    ],
    "GE_PROGRAM_COMPONENT": [
        {
            "ilog_name": "GE_PROGRAM_RCV_EVENT",
            "ilog_string": "In state %d, received event %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GE_PROGRAM_COMPLETED",
            "ilog_string": "Ge programming completed, restart GE\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GE_PGM_BLK",
            "ilog_string": "Programming GE blk %d of %d sent\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GE_PGM_ADDR",
            "ilog_string": "Programming GE addr 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GE_PGM_PKT_END",
            "ilog_string": "Programming GE cannot send - reached end\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GE_PGM_START",
            "ilog_string": "GE Automatic download start \n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GE_PGM_RESP_FAIL",
            "ilog_string": "GE ProgramStart rejected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GE_PGM_ERASE_BLOCK_FAIL",
            "ilog_string": "GE Program Erasing block 0x%x failed\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GE_PGM_SIZE_DIFF",
            "ilog_string": "GE Program InfoMsg size 0x%x, expected 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GE_PGM_NAK",
            "ilog_string": "GE Program NAK\n",
            "ilog_num_args": 0
        }
    ],
    "LAN_PORT_COMPONENT": [
        {
            "ilog_name": "LAN_PORT_COMLINK_UP_EVENT",
            "ilog_string": "Lan Port, comlink event, link is ** UP **\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LAN_PORT_COMLINK_DOWN_EVENT",
            "ilog_string": "Lan Port, comlink event, link is ** DOWN **\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LAN_PORT_PHY_INIT_COMPLETED_1G",
            "ilog_string": "1G GMII PHY init completed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LAN_PORT_UNEXPECTED_CPU_MSG_LENGTH",
            "ilog_string": "Unexpected length of CPU message received, msgLength = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LAN_PORT_RCV_CPU_MSG",
            "ilog_string": "Received a CPU message, PHY Link Remote State %d, PHY Remote Speed %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LAN_PORT_TX_CPU_MSG",
            "ilog_string": "Transmitting a CPU message, Header %d, Speed %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LAN_PORT_PHY_INIT_COMPLETED_100M",
            "ilog_string": "100M MII PHY init completed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LAN_PORT_DEVICE_STATE_CHANGE",
            "ilog_string": "Lan Port device state %d at speed %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LAN_PORT_MCA_CHANNEL_STATUS",
            "ilog_string": "Lan Port channel status %d\n",
            "ilog_num_args": 1
        }
    ],
    "DP_COMPONENT": [
        {
            "ilog_name": "AUX_SENT_CPU_MESSAGE",
            "ilog_string": "Sent CPU message with header %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_READ_CPU_MESSAGE",
            "ilog_string": "Read CPU message type %d length %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_UNHANDLED_CPU_MESSAGE",
            "ilog_string": "Read CPU message(%d) which can't be handled\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_GOT_HPD_IRQ",
            "ilog_string": "Got HPD IRQ event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_GOT_HPD_UP",
            "ilog_string": "Got HPD up event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_GOT_HPD_DOWN",
            "ilog_string": "Got HPD down event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_LANE_COUNT_SET",
            "ilog_string": "Got LANE_COUNT_SET = 0x%x, ENHANCED_FRAME_EN = 0x%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_TRAINING_PATTERN_SET",
            "ilog_string": "Got TRAINING_PATTERN_SET; value = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_LANEX_Y_STATUS",
            "ilog_string": "Got read LANEX_Y_STATUS: addr = 0x%x, response data = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_LANE_ALIGN_STATUS_UPDATED",
            "ilog_string": "Got LANE_ALIGN_STATUS_UPDATED: response = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_TRAINING_LANEX_SET_REQUEST",
            "ilog_string": "Got TRAINING_LANEX_SET write request: DPCD addr = 0x%x, value = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_STARTING_LINK_TRAINING",
            "ilog_string": "Beginning link training\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_INVALID_LANE_INDEX",
            "ilog_string": "Invalid lane index %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_GOT_READ_ADJUST_REQUEST",
            "ilog_string": "Got ADJUST_REQUEST_LANEX_Y read, reply data = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_INVALID_BW",
            "ilog_string": "Invalid bandwidth 0x%x at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_MAX_BW_OVER",
            "ilog_string": "We don't support max bandwidth 0x%x and changed to 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_INVALID_LC",
            "ilog_string": "Invalid Lane Count = %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_INVALID_BW_LC",
            "ilog_string": "Invalid Bandwidth = 0x%x Lane count = %d at line %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_INVALID_DPCD_REV",
            "ilog_string": "Invalid DPCD Rev = 0x%x at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_DPCD_REV",
            "ilog_string": "DPCD Rev of Monitor = 0x%x & Monitor capability validated\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_LINK_TRAINING_FAILED",
            "ilog_string": "Link training failed at bw=%d, lc=%d, tps=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_INVALID_REQUEST",
            "ilog_string": "Invalid request at line %d: got address=0x%x, dataLen=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_LINK_PARAMETERS",
            "ilog_string": "Link training with parameters bw=0x%x, lc=0x%x, line=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "PM_LOG_STATE",
            "ilog_string": "Policy maker: current state = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PM_STATE_TRANSITION",
            "ilog_string": "Policy maker: old state = %d, new state = %d on event = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "PM_UNHANDLED_EVENT",
            "ilog_string": "Policy maker: unhandled event %d in state %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PM_INVALID_EVENT",
            "ilog_string": "Policy maker: got invalid event %d in state %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LT_STATE_TRANSITION",
            "ilog_string": "LinkTR: old state = %d, new state = %d on event = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LT_UNHANDLED_EVENT",
            "ilog_string": "LinkTR: unhandled event %d in state %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LT_INVALID_EVENT",
            "ilog_string": "LinkTR: got invalid event %d in state %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PM_END_READ_RECEIVER_CAP",
            "ilog_string": "Policy maker: finished reading receiver capability\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PM_END_READ_EDID",
            "ilog_string": "Policy maker: finished reading EDID; nextFreeIndex = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PM_DPCD_BYTE_VALUE",
            "ilog_string": "Policy maker: DPCD byte Addr 0x%x = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PM_EDID_BYTE_VALUE",
            "ilog_string": "Policy maker: EDID byte 0x%x = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PM_READING_EDID_BLOCK",
            "ilog_string": "Policy maker: reading EDID block %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PM_EDID_ERROR",
            "ilog_string": "Policy maker: EDID read error at line %d, Reason = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PM_MULTIPLE_EDID_EXTENSION_BLOCKS",
            "ilog_string": "Num EDID extenion blocks = %d; only processing 1 extension block\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PM_UPDATING_EDID_CACHE",
            "ilog_string": "Policy maker: updating EDID cache; nextFreeIndex = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PM_UPDATING_MCCS_CACHE",
            "ilog_string": "Policy maker: updating MCCS cache; nextFreeIndex = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PM_LOADED_FORWARDED_DPCD_TABLE_VALUE",
            "ilog_string": "Policy maker: loaded forwarded DPCD table byte; tableIndex=%d, dpcdAddress=0x%x, value=0x%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "PM_SENT_LINK_AND_STREAM_PARAMS",
            "ilog_string": "Sent Link and Stream Parameters\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PM_SENT_MCCS_REQUEST",
            "ilog_string": "Sent MCCS request string to REX\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PM_SENT_SINK_PARAMS",
            "ilog_string": "Sent Sink Params (CAP, EDID)\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PM_SENT_CHANGED_LINK_PARAMS",
            "ilog_string": "Sent Changed Link Params (BW: 0x%x, LC:0x%x)\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PM_SENT_MCCS_CAPS",
            "ilog_string": "Sent MCCS Capabilities\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PM_SENT_VCP_TABLE",
            "ilog_string": "Sent VCP Table\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PM_SENT_TIMING_REPORT",
            "ilog_string": "Sent Timing Report\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PM_READ_IRQ_VECTOR",
            "ilog_string": "IRQ Vector (0x%x) read result: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_ISOLATED_LEX_ENABLED",
            "ilog_string": "****** DP ISOLATED LEX ENABLED *******\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_ISOLATED_LEX_DISABLED",
            "ilog_string": "****** DP ISOLATED LEX DISABLED *******\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_ISOLATED_REX_ENABLED",
            "ilog_string": "****** DP ISOLATED REX ENABLED *******\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_ISOLATED_REX_DISABLED",
            "ilog_string": "****** DP ISOLATED REX DISABLED *******\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_RESTART_CR",
            "ilog_string": "RESTART CLOCK RECOVERY --> MAX VS = %d, laneXYStatusReadCount = %d, sameAdjustmentRequestCounter = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_CHANGE_BW",
            "ilog_string": "Changing BandWidth from 0x%x to 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_CHANGE_LC",
            "ilog_string": "Changing LaneCount from 0x%x to 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_CR_RBR",
            "ilog_string": "Already at RBR, reducing Lane Count to lanes with clock recovery\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_CR_LC_1",
            "ilog_string": "Already at RBR and no active lanes have clock recovery, ending Link Training\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_CR_DATA",
            "ilog_string": "CR Data 1 = 0x%x and Data 2 = 0x%x at line = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_EDID_TYPE",
            "ilog_string": "AUX EDID type = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_BPC_MODE",
            "ilog_string": "AUX BPC Mode = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_SSC_ADVERTISE_MODE",
            "ilog_string": "SSC Advertise Mode = %d | 0=disable, 1=enable, 2=pass Monitor's value\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_ISOLATED_STATUS",
            "ilog_string": "AUX Isolated = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_CAP_WRONG_ADDR",
            "ilog_string": "AUX CAP addr doesn't exist = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_NATIVE_AUX_READ_ICMD",
            "ilog_string": "NATIVE AUX READ ICMD ADDRESS = 0x%x   Value = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_I2C_AUX_READ_ICMD",
            "ilog_string": "I2C AUX READ ICMD ADDRESS = 0x%x   Value = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_GOT_HOST_CONNECTION_MSG",
            "ilog_string": "AUX Got Host Connection Msg = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_GOT_LINK_MSG",
            "ilog_string": "AUX Got Phy Link Msg = %d \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_GOT_FEATURE_MSG",
            "ilog_string": "AUX Got Feature Control Msg = %d \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_STATE_IDLE",
            "ilog_string": "AUX IDLE state started\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_STATE_DISABLE",
            "ilog_string": "AUX DISABLE state started\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_MONITOR_INFO_FAIL",
            "ilog_string": "AUX monitor info failed at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_SENT_MONITOR_INFO",
            "ilog_string": "AUX sent monitor data to LEX\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_GOT_OTHERS_REQ",
            "ilog_string": "AUX got message of other request. AddressOnly: %d, Request Command: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_LINK_FAIL",
            "ilog_string": "AUX link failed. Code: %d count = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_WRITE_ICMD",
            "ilog_string": "NATIVE AUX WRITE ICMD ADDRESS = 0x%x   Value = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_READ_TRAINING1",
            "ilog_string": "AUX read training 202:%x, 203:%x, 204:%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_READ_TRAINING2",
            "ilog_string": "AUX read training 205:%x, 206:%x, 207:%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_TU_TIMEOUT",
            "ilog_string": "AUX Lex failed to link train within timeout \n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_DP_CONFIG",
            "ilog_string": "BW: 0x%x, LC:%d, Enhanced:%d \n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_SEND_DEFER",
            "ilog_string": "Aux sent DEFER by SW at line %d \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_SAME_REQUEST",
            "ilog_string": "Aux got same TPS request and ignored it TPS %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_DEFER_OVER",
            "ilog_string": "Aux defer over the maximum amount\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_GOT_NEW_STREAM_INFO",
            "ilog_string": "Got new host information: new streamParams = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_GOT_NEW_LINK_INFO",
            "ilog_string": "Got new host information: new linkParams = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_GOT_NEW_MONITOR_INFO",
            "ilog_string": "Got new monitor information. edidChanged: %d, capChanged: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_GOT_SAME_MSA",
            "ilog_string": "Got the same msa value, ignore it\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_INVALID_INTERVAL",
            "ilog_string": "Training Aux interval value is not valid (%d)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_CAP_VALUE",
            "ilog_string": "Aux CAP read value [0x%x] = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_VS_PE",
            "ilog_string": "********** LC = %d, VS = %d,  PE = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_GOT_DP_ISR",
            "ilog_string": "Aux got DP ISR Type = 0x%0x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NOT_LINk_OR_PHY_TEST_REQUEST",
            "ilog_string": "This is not a link or phy test request\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "WRONG_TEST_PATTERN",
            "ilog_string": "Test pattern not available\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_DP_CHANNEL_STATUS",
            "ilog_string": "Aux DP Channel Status: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_DP_SSC_INFO",
            "ilog_string": "Freq: %d, BW: %d, Detect SSC (0: disbled, 1:enabled): %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_MONITOR_SSC_INFO",
            "ilog_string": "Monitor support SSC (1: support, 0: no-support): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LEX_VS",
            "ilog_string": "Voltage Swing Advertised on LEX: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LEX_PE",
            "ilog_string": "Pre Emphasis Advertised on LEX: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_ACTIVE_INFO_REX",
            "ilog_string": "Aux Generate Lex Active/Offline Phy:%d, dpEnable:%d, Host:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_ACTIVE_INFO_LEX",
            "ilog_string": "Aux Generate Rex Active/Offline Phy:%d, dpEnable:%d, Monitor:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_MCA_DETECT_LINKDN",
            "ilog_string": "Aux detect MCA link down or disabled.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_SET_BW_LC_STATUS",
            "ilog_string": "BW = 0x%x; LC = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_AUDIO_COPY_STATUS",
            "ilog_string": "Copy Audio to current EDID status %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "REX_READ_MONITOR_CAP",
            "ilog_string": "RexReadMonitorCap \n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DPCD_INVALID_ADDRESS",
            "ilog_string": "Accessing invalid address 0x%x \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_AUDIO_FREQ",
            "ilog_string": "Supported Audio Frequency %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_EDID_SUPPS_AUDIO",
            "ilog_string": "Extended block of the edid advertizes audio support, byte = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_FPS",
            "ilog_string": "Aux Frame period = %d, FPS on LEX = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_LINK_STATUS",
            "ilog_string": "Aux current link is trained: %d, state: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_DP_159_REINIT_ERROR",
            "ilog_string": "Aux: DP159 Reinit not done!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EDID_WRONG_INDEX",
            "ilog_string": "Tried to access wrong edid index!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EDID_TESTED",
            "ilog_string": "Edid compared:%d, 1(New) 0(Same)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEX_CAP_CHANGED",
            "ilog_string": "BW/LC compared:%d, 1(New) 0(Same)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_NO_MSA",
            "ilog_string": "Couldn't get MSA value within time.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_LINK_TRAINED",
            "ilog_string": "Link Trained with VS:%d, EQ:%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_LEX_LT_CR_STATUS",
            "ilog_string": "Clock Recovery status %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_LEX_LT_CE_STATUS",
            "ilog_string": "Symbol Lock : %d; Lane Alignment : %d; BER Error : %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SOURCE_OUT_RESET",
            "ilog_string": "Source is not out of reset, DP's StreamParameters not updated\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_LEX_LT_MODE",
            "ilog_string": "Link Training Mode = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "YCBCR_STATUS",
            "ilog_string": "yCbCr support disabled in Edid\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_10BPC_DISABLE",
            "ilog_string": "10 BPC is disabled in Edid\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_10BPC_STREAM_FAIL",
            "ilog_string": "Stream Extraction Failed due to 10BPC\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_VALID_SYMBOL_STREAM_FAIL",
            "ilog_string": "Stream Extraction Failed due to invalid valid symbols = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BPC_UPDATE",
            "ilog_string": "Maximum bpc updated from 0x%x to BPC10 \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_NEW_ALU_CAL",
            "ilog_string": "DP New ALU cal   = %d      * (0: Legacy,   1:New)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_ISOLATE_VALUE",
            "ilog_string": "DP ISOLATE       = %d      * (0 = disable, 1 = enable)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEX_SSC_VALUE",
            "ilog_string": "DP LEX SSC       = %d      * (0 = disable, 1 = advertise, 2 = pass monitor's value)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REX_SSC_VALUE",
            "ilog_string": "DP REX SSC       = %d      * (0 = disable, 1 = advertise, 2 = pass monitor's value)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_NO_READ_MCCS_VALUE",
            "ilog_string": "DP No Read MCCS  = %d      * (0 = Don't read MCCS 1 = Read MCCS\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_VOLTAGE_SWING",
            "ilog_string": "DP VS            = %d      * (255 = default, anything else = forced)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_PRE_EMPHASIS",
            "ilog_string": "DP PE            = %d      * (255 = default, anything else = forced)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_BANDWIDTH",
            "ilog_string": "DP BANDWIDTH     = 0x%x    * (0 = default, anything else = forced)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LANE_COUNT",
            "ilog_string": "DP LANE COUNT    = 0x%x    * (0 = default, anything else = forced)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_EDID_TYPE",
            "ilog_string": "DP EDID TYPE     = %d      * (0 = monitor's edid, 1 = 4k, 2 = 1080p)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_BPC_MODE",
            "ilog_string": "DP BPC MODE      = %d      * (6 = 6bpc, 8 = 8bpc, 10 = 10bpc)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_AUX_LT_MODE",
            "ilog_string": "DP AUX LT Mode   = %d      * (0 = Normal Mode, 1 = Fast Mode)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_AUDIO_SEND",
            "ilog_string": "DP AUDIO Send    = %d      * (0 = Enable, 1 = Disable)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_YCBCR_STATUS",
            "ilog_string": "DP YCBCR Disable = %d      * (1 = disable, 0 = Pass through)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_ERR_CNT_STATUS",
            "ilog_string": "DP Error Counter = %d      * (0 = Return true error counter value, 1 = Return True always)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REX_PW_DN_TIMEOUT",
            "ilog_string": "DP Rex PD Timeout= %d      * (Value in sec, Max 10 sec)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_COMP_RATIO",
            "ilog_string": "DP Comp Ratio    = %d      * (0 = default, 2 = 2.4, 4 = 4, 6 = 6)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEX_ICMD",
            "ilog_string": "***    This is a Rex only iCommand     ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_REX_ICMD",
            "ilog_string": "***    This is a Lex only iCommand     ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_LINK_TRAINING_STATS",
            "ilog_string": "********LINK TRAINING STATS*******\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_LEX_SYMBOL_ERROR_COUNT_LANEXY",
            "ilog_string": "Got read SYMBOL_ERROR_COUNT_LANEX_Y: addr = 0x%x, resp = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FLASH_LC_UPDATED",
            "ilog_string": "Flash value for Lane count updated in DPCD reg = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLASH_BW_UPDATED",
            "ilog_string": "Flash value for Bandwidth updated in DPCD reg = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEX_AUDIO_MSG",
            "ilog_string": "Audio msg sent to Rex AudioMute = %d Maud = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_LEX_CR_FAIL_STATUS",
            "ilog_string": "Clock Recovery Fail status : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEX_UNSUPP_SETTINGS",
            "ilog_string": "Redundant Unsupported setting with VS = %d; PE = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_LINK_TRAINING_STATE",
            "ilog_string": "Link Training State : %d (1: Start of CLock Recovery, 2: Start Equalization, 3: Link Trained)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LEX_SET_ERROR_COUNT_TRUE",
            "ilog_string": "Error count function set to return : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REX_MIVD",
            "ilog_string": "Rex Calculated Mvid:%d, Nvid:%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_SET_PW_DN_TIMER",
            "ilog_string": "Power down timer value set = %d sec\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_POWER_STATE",
            "ilog_string": "Setting Monitor Power state = 0x%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_MCCS_CAP_READ_DONE",
            "ilog_string": "MCCS capabilities string read done. String size : %d, VCP Table size : %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_LEX_MCCS_RECEIVE_STATUS",
            "ilog_string": "MCCS capabilities received. String size : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_LEX_VCP_RECEIVE_STATUS",
            "ilog_string": "VCP Table received. Table size : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_VCP_TABLE_HEADING",
            "ilog_string": "****SUPPORTED VCP CODES****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_VCP_TABLE_ENTRY",
            "ilog_string": "Opcode 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SET_VCP_FEATURE",
            "ilog_string": "VCP feature set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_VCP_READ_DONE",
            "ilog_string": "VCP Table read done. Sending to LEX\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_MCCS_RETRY_COUNT",
            "ilog_string": "MCCS capabilities retry counter : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_VCP_RETRY_COUNT",
            "ilog_string": "VCP Table retry counter : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MCA_DN",
            "ilog_string": "Bringing MCA channel 1 down",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_MCA_UP",
            "ilog_string": "Bringing MCA channel 1 up",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_GOT_HPD_REPLUG",
            "ilog_string": "Got HPD Replug event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_ERR_CNT",
            "ilog_string": "Lex error counts Extraction error = %d,  Stream error = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_LEX_ERR",
            "ilog_string": "Stream Error count = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_READ_MCCS_STATUS",
            "ilog_string": "No Read MCCS = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REX_READ_MCCS",
            "ilog_string": "Start reading MCCS and VCP table\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_REX_MCCS_FAIL",
            "ilog_string": "MCCS and VCP table read failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_MCCS_READ_FAIL",
            "ilog_string": "MCCS read failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_VCP_READ_FAIL",
            "ilog_string": "VCP table read failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_REX_MCCS_SUCESS",
            "ilog_string": "MCCS and VCP table read successfully\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_LEX_HOST_SHUTDOWN",
            "ilog_string": "DP Frequency Out of Range detected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_REX_START_CR",
            "ilog_string": "Rex Start CR with LC:%d, BW:%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_LEX_EQ_FAIL",
            "ilog_string": "Lex EQ Fail with VS:%d, EQ:%d, Align:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_LEX_REACHED_HIGHEST_LEVEL",
            "ilog_string": "Current HOST's VS:%d, EQ:%d, Highest:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_LEX_DISABLE_COMBINATION",
            "ilog_string": "Failed. Disable VS:%d, EQ:%d Combination\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_LEX_VS0_PE",
            "ilog_string": "[0][0]:%d, [0][1]:%d, [0][2]:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_LEX_VS1_PE",
            "ilog_string": "[1][0]:%d, [1][1]:%d, [1][2]:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_LEX_VS2_PE",
            "ilog_string": "[2][0]:%d, [2][1]:%d, [2][2]:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_SEND_AUDIO_STATE",
            "ilog_string": "Lex Audio status chnaged = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_MCCS_READ_RETRY_COUNT",
            "ilog_string": "Rex tried reading MCCS %d times\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_END_READ_MCCS",
            "ilog_string": "Rex completed reading MCCS, VCP Table and Timing Report\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_START_SENDING_MCCS",
            "ilog_string": "Rex start sending MCCS to LEX\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_SINK_PARAMS_SENT",
            "ilog_string": "Sink Parameters sent to LEX\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_AUDIO_ERR",
            "ilog_string": "Exceeded audio error recovery Count = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_NEW_CONTROL_REQUEST",
            "ilog_string": "Sent New Control Request to Sink\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_NEW_CONTROL_CHANGED",
            "ilog_string": "New Control Value changed to 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_ACTIVE_CONTROL_REQUEST",
            "ilog_string": "Sent Active Control Request to Sink\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_ACTIVE_CONTROL_CHANGED",
            "ilog_string": "Active Control value is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_SEND_NEW_CONTROL",
            "ilog_string": "Sending active control values to LEX over COMMLINK\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_RECEIVED_ACTIVE_CONTROL",
            "ilog_string": "Received Active Control. Updating VCP Table\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_REX_MCCS_SUCCESS_COUNTER",
            "ilog_string": "MCCS read success counter : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_LINK_PARAM_RETRY",
            "ilog_string": "Monitor not trained with Max BW and LC, retry LT counter: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REX_MCCS_SEND_PENDING",
            "ilog_string": "MCCS send to LEX is pending\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_MCCS_SEND_CRITERIA",
            "ilog_string": "MCCS send criteria ReadyToSend : %d, SendCount: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_REX_MCCS_CAP_RX_FAIL",
            "ilog_string": "MCCS Cap Rx failed Idx1 : %d, Idx2 : %d, line : %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_REX_UTILIZATION",
            "ilog_string": "Utilzation is (%d)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_ADJUST_SSC",
            "ilog_string": "Utilzation is over 100%% adjust SSC %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_ADJUST_FPS",
            "ilog_string": "Utilzation is over 100%% adjust FPS from %d to %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_REX_SEND_DUMMY",
            "ilog_string": "Sending dummy video to the monitor\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_OVER_CURRENT_WARNING",
            "ilog_string": "Over current detected in DP\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_EDID_INVALID",
            "ilog_string": "REX is unable to get valid EDID values from the sink, passing the invalid EDID to LEX\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_CAP_INVALID",
            "ilog_string": "REX is unable to read valid CAP values from the sink after Max tries\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_REX_READ_EDID",
            "ilog_string": "***  Monitor Edid read   ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_EDID_READ_ICMD",
            "ilog_string": "0x%x, //0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_DPCD_DUMP",
            "ilog_string": "DPCD Byte 0x%x = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_ENABLE_AUX_TRAFFIC_STATUS",
            "ilog_string": "Enable AUX over UART = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_RESTART_PM_STATE_MACHINE",
            "ilog_string": "****** Restarting DP PM State Machine ******\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_LEX_REMOVE_RESOLUTION",
            "ilog_string": "Removing unsupported standard timing edid = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEX_DETAIL_TIME",
            "ilog_string": "Removing unsupported detail timing from edid = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEX_CVT",
            "ilog_string": "Removing unsupported CVT 3 byte code timing from edid = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REX_EDID_BLOCK_NUM",
            "ilog_string": "EDID received with block number: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REX_EDID_SIZE",
            "ilog_string": "TOTAL EDID SIZE: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_INVALID_CAP_EDID",
            "ilog_string": "Failed to read Cap and Edid\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_PRINT_STATUS",
            "ilog_string": "***       Status Flags        ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_PHYUP",
            "ilog_string": "PhyUp                  = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REXACTV",
            "ilog_string": "RexActive              = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_VIDEORXRDY",
            "ilog_string": "VideoRxReady           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_ISOLATE",
            "ilog_string": "IsolateEnabled         = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REXWAITHOST",
            "ilog_string": "RexWaitHostInfo        = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REXNEWMONI",
            "ilog_string": "RexNewMonitor          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REXNEWLNKPARA",
            "ilog_string": "RexNewLinkParams       = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REXDPEN",
            "ilog_string": "RexDpEnabled           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MONCONN",
            "ilog_string": "monitorConnected       = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEXDPEN",
            "ilog_string": "LexDpEnabled           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_HOSTCONN",
            "ilog_string": "HostConnected          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEXRXREADY",
            "ilog_string": "LexVideoTxReady        = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_GOTSINKPARAM",
            "ilog_string": "GotSinkParamters       = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_GOTSTREAMPARAM",
            "ilog_string": "GotStreamParamters     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MONINFORDY",
            "ilog_string": "MonitorInfoReady       = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEXWAITMONINFO",
            "ilog_string": "LexWaitMonitorInfo     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_GOTNEWSTRMPARAMS",
            "ilog_string": "GotNewStreamParams     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_GOTNEWLINKPARAMS",
            "ilog_string": "GotNewLinkParams       = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LEXACT",
            "ilog_string": "LexActive              = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_REXDRIVEINIT",
            "ilog_string": "RedriverInitDone       = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_CURNTSTATE",
            "ilog_string": "CurrentState           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_PREVSTATE",
            "ilog_string": "PrevState              = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_EVENT",
            "ilog_string": "Event                  = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_CAPVALID",
            "ilog_string": "CapIsValid             = %d\n",
            "ilog_num_args": 1
        }
    ],
    "DP_STREAM_COMPONENT": [
        {
            "ilog_name": "DP_INVALID_BANDWIDTH",
            "ilog_string": "Invalid bandwidth setting %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_INVALID_LANE_COUNT",
            "ilog_string": "Invalid lane count setting %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_SETTING_TRAINING_PATTERN",
            "ilog_string": "Setting training pattern %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SCRAMBLE_EN",
            "ilog_string": "Scrambling enabled = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_DESCRAMBLE_EN",
            "ilog_string": "Descrambling enabled = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_INVALID_VALUE",
            "ilog_string": "DP Has Wrong Value. mvid = %d, nvid = %d, lc= %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_INVALID_VALUE2",
            "ilog_string": "DP Has Wrong Value. vs0 = %d, tu_size = %d, bpp = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_LEX_TU_SIZE_RDY",
            "ilog_string": "Got TU size ready interrupt: tu_size = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_RESET_SINK",
            "ilog_string": "Reset DP Sink = %d | (1:reset, 0:take out of reset)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_RESET_ENC",
            "ilog_string": "Reset TICO Encoder = %d | (1:reset, 0:take out of reset)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_ENABLING_TICO_ENC",
            "ilog_string": "Enabling TICO encoder\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_CONFIGURE_ENCODER_EXTRACTOR",
            "ilog_string": "Configuring encoder extractor\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_COMMAND_MODE",
            "ilog_string": "Put TICO encoder in command mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_ENABLING_TICO_DEC",
            "ilog_string": "Enabling TICO decoder\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_MSA_PARAMS",
            "ilog_string": "MSA MVID value =  %d and NVID value = %d at line = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_MSA_TWIDTH",
            "ilog_string": "MSA total_width = %d and line duration = %d at line = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_COLOR_CODE",
            "ilog_string": "Color Code = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_INVALID_MSA",
            "ilog_string": "Invalid MSA, colorCode = 0x%x, tuSize = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_MSA_ALIGN_ERROR",
            "ilog_string": "MSA Align Error, height(b3),  width(b2), hSyncWidth(b1), vSyncWidth(b0) = 0x%x, nvid = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_PIXEL_CLOCK_ERROR",
            "ilog_string": "Invalid MSA, Pixel Clock1(%d) & Pixel Clock2(%d) are different by %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_LEX_RESET_LANE_ERR_CNT",
            "ilog_string": "8b10b Error Count reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_LAST_TU_ZERO",
            "ilog_string": "Last Tu is zero, manifulate Last Tu\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_SET_LANE",
            "ilog_string": "Rex request to set lane count %d, RTL %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_ALIGNER_CONTROL",
            "ilog_string": "Aligner En(1)/Disable(0): %d, TPS: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_YCBCR422_DETECTED",
            "ilog_string": "YCbCr422 is detected. Color code:0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_INVALID_COLOR",
            "ilog_string": "Invalid color code: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_VBD_MAJORITY_FAIL",
            "ilog_string": "DP VBD Majority Fail interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_MSA_MAJORITY_FAIL",
            "ilog_string": "DP MSA Majority Fail interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_NO_VID_STREAM",
            "ilog_string": "DP No Video Stream status = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_AUDIO_MUTE",
            "ilog_string": "DP Audio Mute status = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_STREAM_CLEAR_CXFIFO",
            "ilog_string": "Read Cx Fifo Overflow to clear it. C0:%d, C1:%d, C2:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_STREAM_CXFIFO_OVERFLOW",
            "ilog_string": "DP Stream Extractor Overflow detected by Cx Fifo Overflow\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_STREAM_EXTRACTOR_OVERFLOW",
            "ilog_string": "DP Stream Extractor Overflow interrupt occurred: dpInt:0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_STREAM_EXTRACTOR_UNDERFLOW",
            "ilog_string": "DP Stream Extractor Underflow interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_BOND_ALIGN_DONE",
            "ilog_string": "DP Bond Align Done interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_LANES_WITH_8B10B_ERR",
            "ilog_string": "DP Lanes with 8b10b error interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_GT_RXBYTE_REALIGN",
            "ilog_string": "DP GTP RX byte re-align interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_ALIGNER_FIFO_OVERFLOW",
            "ilog_string": "DP Aligner Fifo Overflow interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_FIRST_IDLE_PATTERN",
            "ilog_string": "DP First idle pattern interrupt occured \n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_ALIGNER_FIFO_UNDERFLOW",
            "ilog_string": "DP Aligner Fifo Underflow interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_EDID_CHANGE",
            "ilog_string": "Edid changed to %d due to Standard blanking\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_BER_ERR_CNT",
            "ilog_string": "DP Link Quality management error Threshold = %d Error count = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_LEX_SDP_FIFO_OF",
            "ilog_string": "SDP fifo overflow = %d or Underflow occured = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_LEX_FRQ_OOR",
            "ilog_string": "DP freq out of range count = %d , Frq Count = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_DECODER_ERR_FLAG",
            "ilog_string": "DP Decoder Error Flag interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_FIFO_PIX_0_UNDERFLOW",
            "ilog_string": "DP FIFO PIX 0 Underflow interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_FIFO_PIX_0_OVERFLOW",
            "ilog_string": "DP FIFO PIX 0 Overflow interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_FIFO_SDP_UNDERFLOW",
            "ilog_string": "DP FIFO SDP Underflow interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_FIFO_SDP_OVERFLOW",
            "ilog_string": "DP FIFO SDP Overflow interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_FIFO_CS_UNDERFLOW",
            "ilog_string": "DP FIFO CS Underflow interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_FIFO_CS_OVERFLOW",
            "ilog_string": "DP FIFO CS Overflow interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_VIDEO_STREAM_END",
            "ilog_string": "DP Video Stream End interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IDLE_PATTERN_INTERRUPT",
            "ilog_string": "DP Idle pattern interrupt occurred\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_FIFO_SDP_TAG_UNDERFLOW",
            "ilog_string": "DP FIFO SDP TAG UNDERFLOW interrupt occured\n running count = %d\n, associated frame number = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_FIFO_SDP_TAG_OVERFLOW",
            "ilog_string": "DP FIFO SDP TAG OVERFLOW interrupt occured\n running count = %d\n, associated frame number = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_SDP_MAUD",
            "ilog_string": "DP sdp AudioMute flag status = %d || Maud set value = %d || Maud method select = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_SDP_VBID",
            "ilog_string": "DP sdp vbid = 0x%x || Maud = %d || Mvid = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_LC",
            "ilog_string": "Lane Count                  = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_BW",
            "ilog_string": "Bandwidth                   = %d.%2d Gbps\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_ENHANCED_FRAMING",
            "ilog_string": "Enhanced Framing            = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_MVID",
            "ilog_string": "Mvid                        = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_NVID",
            "ilog_string": "Nvid                        = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_H_TOTAL",
            "ilog_string": "H Total                     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_H_START",
            "ilog_string": "H Start                     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_H_WIDTH",
            "ilog_string": "H Width                     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_H_POLARITY",
            "ilog_string": "H Polarity                  = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_H_SYNC_WIDTH",
            "ilog_string": "H Sync Width                = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_V_TOTAL",
            "ilog_string": "V Total                     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_V_START",
            "ilog_string": "V Start                     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_V_HEIGHT",
            "ilog_string": "V Height                    = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_V_POLARITY",
            "ilog_string": "V Polarity                  = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_V_SYNC_WIDTH",
            "ilog_string": "V Sync Width                = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_Y_ONLY",
            "ilog_string": "Misc Y Only                 = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_STEREO",
            "ilog_string": "Misc Stereo                 = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_INT_TOTAL",
            "ilog_string": "Misc Int Total              = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_CLK_SYNC",
            "ilog_string": "Misc Clock Sync             = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_CS_PKT_LENGTH",
            "ilog_string": "CS Packet Length            = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_MSA_COLOR",
            "ilog_string": "Color Code                  = 0x%x and BPP = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_SINK_BOND_ALIGN_DEBUG_STATS4",
            "ilog_string": "bond_align_debug_stats      = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_BOND_ALIGN_DEBUG_STATS3",
            "ilog_string": "com_det_dbg                 = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_BOND_ALIGN_DEBUG_STATS2",
            "ilog_string": "fifo_rd_en_dbg              = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_BOND_ALIGN_DEBUG_STATS1",
            "ilog_string": "state_dbg                   = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_TPS_USE",
            "ilog_string": "TPS pattern used            = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_TU_SIZE",
            "ilog_string": "Tu Size                     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_FPS",
            "ilog_string": "Frames per second           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_COMPRESSION_RATIO",
            "ilog_string": "TICO compression ratio      = %d.%d to 1\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_STATS_0",
            "ilog_string": "**** DP STATS ****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_SINK_VID_C0_FIFO_OVERFLOW",
            "ilog_string": "vid_c0_fifo_overflow        = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C0_FIFO_UNDERFLOW",
            "ilog_string": "vid_c0_fifo_underflow       = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C0_FIFO_LEVEL",
            "ilog_string": "vid_c0_fifo_level           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C0_FIFO_LEVEL_WATERMARK",
            "ilog_string": "vid_c0_fifo_level_watermark = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C0_SR_FULL",
            "ilog_string": "vid_c0_sr_full              = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C1_FIFO_OVERFLOW",
            "ilog_string": "vid_c1_fifo_overflow        = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C1_FIFO_UNDERFLOW",
            "ilog_string": "vid_c1_fifo_underflow       = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C1_FIFO_LEVEL",
            "ilog_string": "vid_c1_fifo_level           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C1_FIFO_LEVEL_WATERMARK",
            "ilog_string": "vid_c1_fifo_level_watermark = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C1_SR_FULL",
            "ilog_string": "vid_c1_sr_full              = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C2_FIFO_OVERFLOW",
            "ilog_string": "vid_c2_fifo_overflow        = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C2_FIFO_UNDERFLOW",
            "ilog_string": "vid_c2_fifo_underflow       = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C2_FIFO_LEVEL",
            "ilog_string": "vid_c2_fifo_level           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C2_FIFO_LEVEL_WATERMARK",
            "ilog_string": "vid_c2_fifo_level_watermark = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SINK_VID_C2_SR_FULL",
            "ilog_string": "vid_c2_sr_full              = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_FIFO_PIX_0_OVERFLOW",
            "ilog_string": "fifo_pix_0_overflow         = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_FIFO_PIX_0_UNDERFLOW",
            "ilog_string": "fifo_pix_0_underflow        = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_PIX_0_SR_UNDERFLOW",
            "ilog_string": "pix_0_sr_underflow          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_PIX_1_SR_UNDERFLOW",
            "ilog_string": "pix_1_sr_underflow          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_PIX_2_SR_UNDERFLOW",
            "ilog_string": "pix_2_sr_underflow          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_PIX_3_SR_UNDERFLOW",
            "ilog_string": "pix_3_sr_underflow          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_FIFO_PIX_0_LEVEL_WATERMARK",
            "ilog_string": "fifo_pix_0_level_watermark  = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_FIFO_PIX_0_LEVEL",
            "ilog_string": "fifo_pix_0_level            = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_FIFO_CS_OVERFLOW",
            "ilog_string": "fifo_cs_overflow            = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_FIFO_CS_UNDERFLOW",
            "ilog_string": "fifo_cs_underflow           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_FIFO_CS_LEVEL",
            "ilog_string": "fifo_cs_level               = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SOURCE_FIFO_CS_LEVEL_WATERMARK",
            "ilog_string": "fifo_cs_level_watermark     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_VS_VALUE",
            "ilog_string": "Average Valid Symbol: Int %d: Fraction %d /1000\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP_ALU_STATS",
            "ilog_string": "**** DP_ALU_STATS ****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_WIDTH_ACTIVE",
            "ilog_string": "dp_width_active            = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_WIDTH_TOTAL",
            "ilog_string": "dp_width_total             = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_FULL_TU_SIZE",
            "ilog_string": "full_tu_size               = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LAST_TU_SIZE",
            "ilog_string": "last_tu_size               = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_FULL_TU_NUM",
            "ilog_string": "full_tu_num                = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_CPU_MATH_RESULT_READY",
            "ilog_string": "cpu_math_result_rdy        = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_VALID_BYTES_RPT_NUM",
            "ilog_string": "valid_bytes_repeat_num     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_VALID_BYTES_PER_FULL_TU",
            "ilog_string": "valid_bytes_per_full_tu    = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_VALID_BYTES_NUM_PER_LANE",
            "ilog_string": "valid_bytes_num_per_lane   = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_GTP_STATS",
            "ilog_string": "**** DP GTP STATS ****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_GT3_RXBYTE_ALIGN_CNT",
            "ilog_string": "dp_lane0_rxbyterealign_cnt          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_GT2_RXBYTE_ALIGN_CNT",
            "ilog_string": "dp_lane2_rxbyterealign_cnt          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_GT1_RXBYTE_ALIGN_CNT",
            "ilog_string": "dp_lane3_rxbyterealign_cnt          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_GT0_RXBYTE_ALIGN_CNT",
            "ilog_string": "dp_lane1_rxbyterealign_cnt          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_8B10B_DISP_ERROR_STATS",
            "ilog_string": "**** DP 8b10b DISP ERROR STATS ****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_8B10B_NIT_ERROR_STATS",
            "ilog_string": "**** DP 8b10b NIT ERROR STATS ****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_LANE_0_WITH_8B10B_DIS_ERR_CNT",
            "ilog_string": "lane_0_with_8b10b_dis_err_cnt      = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LANE_1_WITH_8B10B_DIS_ERR_CNT",
            "ilog_string": "lane_1_with_8b10b_dis_err_cnt      = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LANE_2_WITH_8B10B_DIS_ERR_CNT",
            "ilog_string": "lane_2_with_8b10b_dis_err_cnt      = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LANE_3_WITH_8B10B_DIS_ERR_CNT",
            "ilog_string": "lane_3_with_8b10b_dis_err_cnt      = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LANE_0_WITH_8B10B_NIT_ERR_CNT",
            "ilog_string": "lane_0_with_8b10b_nit_err_cnt      = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LANE_1_WITH_8B10B_NIT_ERR_CNT",
            "ilog_string": "lane_1_with_8b10b_nit_err_cnt      = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LANE_2_WITH_8B10B_NIT_ERR_CNT",
            "ilog_string": "lane_2_with_8b10b_nit_err_cnt      = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_LANE_3_WITH_8B10B_NIT_ERR_CNT",
            "ilog_string": "lane_3_with_8b10b_nit_err_cnt      = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_FSM_STATS",
            "ilog_string": "**** DP FSM STATS ****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_FIFO_CS_STATUS_STATE_VID",
            "ilog_string": "fsm_state_vid  = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_FIFO_CS_STATUS_STATE_DP",
            "ilog_string": "fsm_state_dp   = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_STATS",
            "ilog_string": "**** DP SDP FIFO STATS ****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_SDP_FIFO_FULL",
            "ilog_string": "sdp_fifo_status_full                = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_FIFO_EMPTY",
            "ilog_string": "sdp_fifo_status_empty               = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_FIFO_OVERFLOW",
            "ilog_string": "sdp_fifo_status_overflow            = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_FIFO_UNDERFLOW",
            "ilog_string": "sdp_fifo_status_underflow           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_FIFO_LEVEL",
            "ilog_string": "sdp_fifo_status_level               = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_FIFO_LEVEL_WATERMARK",
            "ilog_string": "sdp_fifo_status_level_watermark     = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_SS_SE_BYTE_NUM",
            "ilog_string": "sdp_ss_se_same_cycle_byte_num       = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_PKT_SENT",
            "ilog_string": "sdp_pkt_sent_cnt                    = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_PK_SENT_WATERMARK",
            "ilog_string": "sdp_pkt_sent_cnt_watermark          = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_TAG_STATS",
            "ilog_string": "**** DP SDP TAG FIFO STATS ****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_SDP_TAG_FIFO_FULL",
            "ilog_string": "sdp_tag_fifo_status_full            = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_TAG_FIFO_EMPTY",
            "ilog_string": "sdp_tag_fifo_status_empty           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_TAG_FIFO_OVERFLOW",
            "ilog_string": "sdp_tag_fifo_status_overflow        = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_TAG_FIFO_UNDERFLOW",
            "ilog_string": "sdp_tag_fifo_status_underflow       = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_TAG_FIFO_LEVEL",
            "ilog_string": "sdp_tag_fifo_status_level           = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_TAG_FIFO_LEVEL_WATERMARK",
            "ilog_string": "sdp_tag_fifo_status_level_watermark = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_SDP_MADU",
            "ilog_string": "Maud value = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_STANDARD_BLANKING",
            "ilog_string": "STANDARD BLANKING DETECTED\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_LEX_IDLE_PATTERN_CNT_RESET",
            "ilog_string": "Dp lex idle pattern counter has been reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_REX_IDLE_PATTERN_CNT_RESET",
            "ilog_string": "Dp rex idle pattern counter has been reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_REX_TU_INVAID",
            "ilog_string": "TU is not measure properly, substituting it with 64 for programming ALU\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP_LEX_ERR_CNT_RESET",
            "ilog_string": "DP 8b10b error counter set to 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEBUG_ASSERT_BB",
            "ilog_string": "CAUSE AN ASSERT IN BB FOR DEBUGGING IRQ count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_FRQ_DETC",
            "ilog_string": "Measured frequency = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP_INVALID_COMP_RATIO",
            "ilog_string": "Invalid compression ratio = %d\n",
            "ilog_num_args": 1
        }
    ],
    "DP_AUX_COMPONENT": [
        {
            "ilog_name": "AUX_RX_INVALID_TRANSACTION_SIZE",
            "ilog_string": "RECEIVED AUX TRANSACTION WITH INVALID SIZE %d !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_RECEIVE_TRANSACTION",
            "ilog_string": "Received an AUX transaction with length %d B, first word = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_RX_HEX_DUMP",
            "ilog_string": "RX Word %d = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_TX_HEX_DUMP",
            "ilog_string": "TX Word %d = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_TX_INVALID_TRANSACTION_SIZE",
            "ilog_string": "Requested to transmit AUX transaction with invalid size %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_TX_INVALID_TRANSACTION_DATA",
            "ilog_string": "Tx Request Buffer[%d]: 0%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_HOST_REQUEST",
            "ilog_string": "Host Request Buffer[%d]: 0%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_TX_BUSY",
            "ilog_string": "Attempted to transmit when already transmitting\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_SEND_TRANSACTION",
            "ilog_string": "Sent an AUX transaction with length %d B, first word = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_INVALID_REQUEST_COMMAND",
            "ilog_string": "Invalid request command 0x%x at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_DEFERRING",
            "ilog_string": "Deferring request for the request header 0x%x, address 0x%x, length 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_DEFERRING_STAT",
            "ilog_string": "Deferring request took time %d by 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_DEFER_OVER",
            "ilog_string": "Aux defer over the maximum amount %d. Restart link training\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_REQUEST_FIFO_OVERFLOW",
            "ilog_string": "Request FIFO overflow Handler = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_STATE_CHANGE",
            "ilog_string": "Changing state from %d to %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_RETRY_MAX",
            "ilog_string": "AUX reply maximum retrial failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_LOADED_LOCAL_REQUEST",
            "ilog_string": "Loaded local request: length = %d B, first word = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_GEN_HPD_IRQ",
            "ilog_string": "Generating HPD IRQ event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_GEN_HPD_REPLUG",
            "ilog_string": "Generating HPD replug event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_GEN_HPD_UP",
            "ilog_string": "Generating HPD up event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_GEN_HPD_DOWN",
            "ilog_string": "Generating HPD down event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_ENTERING_ISR",
            "ilog_string": "Entering AUX ISR: %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_LEX_ISR_TIME",
            "ilog_string": "Time spent in AUX ISR = %d us; time between AUX ISRs = %d us\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_RX_FIFO_OVERFLOW",
            "ilog_string": "RX FIFO overflow\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_UNHANDLED_INTERRUPT",
            "ilog_string": "Unhandled interrupt at line %d: unhandled interrupts = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_ISR_TIME",
            "ilog_string": "Time spent in AuxISR = %d us\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_DDCCI_WRITE_REQUEST",
            "ilog_string": "DDC/CI Write request with size : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_I2C_READ_REQUEST",
            "ilog_string": "I2C read request with size : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_I2C_WRITE_REQUEST",
            "ilog_string": "AUX I2C Write request with size : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_I2C_STATUS",
            "ilog_string": "Go bit status for I2C : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_TRANS_REQUEST_BYTE",
            "ilog_string": "Word = %d | Data = 0x%.8x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_TRANS_READ_WRITE_INDEX",
            "ilog_string": "Read Index = %d | Write Index = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_I2C_DEBUG",
            "ilog_string": "I2C write at line : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_LEX_SRC_IRQ_COUNT",
            "ilog_string": "Source connect count = %d source disconnect count = %d Aux status = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_RX_RETRY_MAX",
            "ilog_string": "AUX receive maximum retrail failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_TRANS_BUFF_WRITE_OVERFLOW",
            "ilog_string": "AUX trans buff is full, not saving more data\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_TRANS_BUFF_READ_OVERFLOW",
            "ilog_string": "AUX trans read buff has reached end of the buffer\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_TRANS_SET_READ_INDEX",
            "ilog_string": "Setting the new read index to %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_TRANS_BUFF_CLEAR",
            "ilog_string": "Clearing the AUX trans buffer\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_NATIVE_WRITE_REQ_SRC",
            "ilog_string": "Source    Native  Req WR %d bytes to 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_NATIVE_READ_REQ_SRC",
            "ilog_string": "Source    Native  Req RD %d bytes from 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AUX_NATIVE_ACK_SNK",
            "ilog_string": "Sink      Native  AUX_ACK - %d bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_NATIVE_HEX_DUMP",
            "ilog_string": "",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_I2C_WRITE_REQ_SRC",
            "ilog_string": "Source    I2C     Req WR %d bytes to 0x%x MOT=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_I2C_READ_REQ_SRC",
            "ilog_string": "Source    I2C     Req RD %d bytes to 0x%x MOT=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AUX_I2C_ACK_SNK",
            "ilog_string": "Sink      I2C     AUX_ACK - %d bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AUX_I2C_HEX_DUMP",
            "ilog_string": "",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AUX_NATIVE_DEFER",
            "ilog_string": "Sink      Native  AUX_DEFER - 0 bytes\n",
            "ilog_num_args": 0
        }
    ],
    "LINKMGR_COMPONENT": [
        {
            "ilog_name": "LINKMGR_RCV_EVENT",
            "ilog_string": "Link state machine: In state %d, received event %d new state %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LINKMGR_RCV_INVALID_EVENT",
            "ilog_string": "Link state machine: Unexpected event %d for state %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PHY_ENABLED",
            "ilog_string": "*** PHY Enabled ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PHY_DISABLED",
            "ilog_string": "*** PHY Disabled ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_LINK_TO_5G",
            "ilog_string": "*** Link set to 5G ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_LINK_TO_10G",
            "ilog_string": "*** Link set to 10G ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_HW_PHY_START",
            "ilog_string": "HW Phy Start: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_ERROR_DETECTED",
            "ilog_string": "Link error detected, restarting link\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_HW_PHY_RESTART",
            "ilog_string": "Link is not stable, Restart HW Phy\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_HW_PHY_MAC_LINK_RX_STATUS",
            "ilog_string": "Link Status MAC Link Layer Rx: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_HW_PHY_XAUI_STATUS",
            "ilog_string": "Link Status XAUI: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_HW_PHY_LINK_STATUS",
            "ilog_string": "HW Phy Link Status: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_NOT_10G_SPEED",
            "ilog_string": "Aquantia is not running at 10G speed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_MGR_STATE_TRANSITION",
            "ilog_string": "Link manager: old state = %d, new state = %d on event = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LINK_MGR_INVALID_EVENT",
            "ilog_string": "Link manager: got invalid event %d in state %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "COMLINK_RCV_EVENT",
            "ilog_string": "COMLINK In state %d, received event %d new state %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "COMLINK_MSG_RCVD",
            "ilog_string": "COMLINK Msg Rcvd in state %d, msg %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "COMLINK_STATE",
            "ilog_string": "COMLINK SysEvent State 0 == DN, 1 == UP: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "COMLINK_STATE_EVENT_INVALID",
            "ilog_string": "Comm Link: Invalid Event %d for state %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "COMLINK_LINKUP_TIMEOUT",
            "ilog_string": "Comlink couldn't bring up in time\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "COMLINK_CH_DOWN_DELAYED_LINKUP",
            "ilog_string": "link down - channel down in delayed link up\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "COMLINK_CH_DOWN_LINKUP",
            "ilog_string": "link down - channel down in link up\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "COMLINK_MCA_CH_STATUS",
            "ilog_string": "ComlinkMcaChannelStatusHandler got Channel status: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "COMLINK_SECOND_LINKUP",
            "ilog_string": "REX START 2nd LinkUp for stable train \n",
            "ilog_num_args": 0
        }
    ],
    "XAUI_COMPONENT": [
        {
            "ilog_name": "XAUI_TEST",
            "ilog_string": "XAUI code at line = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XAUI_FAIL_TX_ALIGN",
            "ilog_string": "RXAUI TX is not aligned before Aquantia release reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XAUI_STAT_GT0_DISP_ERR",
            "ilog_string": "STAT:RXAUI rxaui->stats0->gt0_disp_err = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XAUI_STAT_GT0_NOT_IN_TBL",
            "ilog_string": "STAT:RXAUI rxaui->stats0->gt0_not_in_table = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XAUI_STAT_GT1_DISP_ERR",
            "ilog_string": "STAT:RXAUI rxaui->stats0->gt1_disp_err = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XAUI_STAT_GT1_NOT_IN_TBL",
            "ilog_string": "STAT:RXAUI rxaui->stats0->gt1_not_in_table = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XAUI_STAT_MISSING_START",
            "ilog_string": "STAT:RXAUI rxaui->stats0->missing_start = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XAUI_RX_ALIGN",
            "ilog_string": "RXAUI RX align ISR %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XAUI_RX_TOGGLE_RESET",
            "ilog_string": "RXAUI RX reset toggle\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XAUI_RESET_RX_BUFFERS",
            "ilog_string": "RXAUI elasticity buffers reset\n",
            "ilog_num_args": 0
        }
    ],
    "IDT_CLK_COMPONENT": [
        {
            "ilog_name": "IDT_CLK_CFG_RETRY",
            "ilog_string": "IDT clk NAKed at index = %d, retryCount = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "IDT_CLK_CFG_6914_RETRY",
            "ilog_string": "IDT6914 clk NAKed retryCount = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IDT_CLK_CONFIGURE_REGISTERS",
            "ilog_string": "IDT clk is being configured at index = %d, regOffset = 0x%x, value = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "IDT_CLK_CFG_DONE",
            "ilog_string": "IDT clk configuration done, type=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IDT_CLK_CFG_FAIL",
            "ilog_string": "IDT clk configuration fail, result=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IDT_CLK_UNLOCKED",
            "ilog_string": "IDT clk is not locked\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IDT_CLK_GENERAL_READWRITE",
            "ilog_string": "IDT General read and write for register (0x%x) result: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "IDT_CLK_INVALID_TYPE",
            "ilog_string": "IDT6914 Invalid Type: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IDT_CLK_SSC_MODE",
            "ilog_string": "Rex SSC Mode = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IDT_CLK_DP_SSC_MODE",
            "ilog_string": "Rex DP SSC Mode = %d\n",
            "ilog_num_args": 1
        }
    ],
    "FIBER5G_COMPONENT": [
        {
            "ilog_name": "LINK_5G_INIT",
            "ilog_string": "5G fiber Link Init\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_LOS_INACTIVE",
            "ilog_string": "5G fiber Link signal detected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_LOS_IRQ_ACTIVE",
            "ilog_string": "5G fiber LOS IRQ - signal absent\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_LOS_IRQ_INACTIVE",
            "ilog_string": "5G fiber LOS IRQ - signal present\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_SIGNAL_VALID",
            "ilog_string": "5G fiber Link signal valid\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_SIGNAL_INVALID",
            "ilog_string": "5G fiber Link signal too weak\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_TX_FSM_RESET_START",
            "ilog_string": "5G fiber Link Tx FSM reset start\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_TX_FSM_RESET_DONE",
            "ilog_string": "5G fiber Link Tx FSM reset done IRQ\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_RX_FSM_RESET_START",
            "ilog_string": "5G fiber Link Rx FSM reset start\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_RX_FSM_RESET_DONE",
            "ilog_string": "5G fiber Link Rx FSM reset done IRQ: Train time %d microseconds\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_5G_FIBER_RX_BUF_UNDERFLOW",
            "ilog_string": "5G fiber Link Rx elastic buffer underflow IRQ\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_RX_BUF_OVERFLOW",
            "ilog_string": "5G fiber Link Rx elastic buffer overflow IRQ\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_RX_STABILITY",
            "ilog_string": "5G fiber Link Rx stability check, dispErr %d notInTable %d realign %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LINK_5G_FIBER_ENABLED",
            "ilog_string": "5G fiber Link Enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_DISABLED",
            "ilog_string": "5G fiber Link Disabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_SYSTEM_UP",
            "ilog_string": "5G fiber Link System up detected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_5G_FIBER_SIGNAL_DEBOUNCE",
            "ilog_string": "5G fiber Link debounce, state:%d losState:%d current state:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LINK_5G_FIBER_STATS_RX_DISPARITY",
            "ilog_string": "STATS:LINKMGR bb_chip->bb_top->sl_5g->gt_disp_err %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_5G_FIBER_STATS_RX_SYMBOL_NOT_IN_TABLE",
            "ilog_string": "STATS:LINKMGR bb_chip->bb_top->sl_5g->gt_not_in_table %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_5G_FIBER_STATS_RX_REALIGN_COUNT",
            "ilog_string": "STATS:LINKMGR bb_chip->bb_top->sl_5g->gt_realign %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SFP_FINISAR_STATS_MEAS_TEMP",
            "ilog_string": "*** SFP STATS Temperature %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SFP_FINISAR_STATS_MEAS_VCC",
            "ilog_string": "*** SFP STATS Vcc %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SFP_FINISAR_STATS_MEAS_TX_BIAS",
            "ilog_string": "*** SFP STATS TX Bias %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SFP_FINISAR_STATS_MEAS_TX_POWER",
            "ilog_string": "*** SFP STATS TX Power %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SFP_FINISAR_STATS_MEAS_RX_POWER",
            "ilog_string": "*** SFP STATS RX Power %x\n",
            "ilog_num_args": 1
        }
    ],
    "I2CD_COMPONENT": [
        {
            "ilog_name": "DE_JITTER_WRITE_FAILED",
            "ilog_string": "Setting De-jitter chip failed at line: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEJITTER_CHIP_CONFIGURED",
            "ilog_string": "De-jitter chip was configured to 1 ppm\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WRITE_FAILED",
            "ilog_string": "I2C Write failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "READ_WITH_NULL_CALLBACK",
            "ilog_string": "Tried to read I2C GPIO expander pin, but specified a NULL callback\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DEJITTER_CHIP_FAILED_CALIBRATION",
            "ilog_string": "Polled the dejitter chip %d times without achieving calibration.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEJITTER_CHIP_IRQ_LOS2",
            "ilog_string": "CLKIN 2 Loss Of Signal Int Alarm Flag set.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DEJITTER_CHIP_IRQ_LOS1",
            "ilog_string": "CLKIN 1 Loss Of Signal Int Alarm Flag set.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DEJITTER_CHIP_IRQ_LOSX",
            "ilog_string": "External Reference Loss Of Signal Int Alarm Flag set.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DEJITTER_CHIP_IRQ_FOS2",
            "ilog_string": "CLKIN 2 Frequency Offset Int Alarm Flag set.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DEJITTER_CHIP_IRQ_FOS1",
            "ilog_string": "CLKIN 1 Frequency Offset Int Alarm Flag set.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DEJITTER_CHIP_IRQ_LOL",
            "ilog_string": "PLL Loss Of Lock Int Alarm Flag set.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DEJITTER_CHIP_FAILED_IRQ_WRITE",
            "ilog_string": "Failure writing to clear all Int Alarm IRQ Flags.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DEJITTER_CHIP_FAILED_IRQ_READ",
            "ilog_string": "Failure reading IRQ flag registers\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2CD_SET_GPIO_PIN",
            "ilog_string": "Setting I2C Expander GPIO pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2CD_SET_GPIO_PIN_DONE",
            "ilog_string": "Setting I2C Expander GPIO pin completed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2CD_CLEAR_GPIO_PIN",
            "ilog_string": "Clearing I2C Expander GPIO pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2CD_CLEAR_GPIO_PIN_DONE",
            "ilog_string": "Clearing I2C Expander GPIO pin completed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2CD_READ_GPIO_PIN",
            "ilog_string": "Reading I2C Expander GPIO pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2CD_READ_GPIO_PIN_SET",
            "ilog_string": "Read I2C Expander GPIO pin set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2CD_READ_GPIO_PIN_CLEARED",
            "ilog_string": "Read I2C Expander GPIO pin cleared\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP159_TRANS_IN_PROGRESS",
            "ilog_string": "DP Retimer chip transaction already in progress state %d, line %d!\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP159_WRITE_FAILED",
            "ilog_string": "DP Retimer chip write failed!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP159_READ_FAILED",
            "ilog_string": "DP Retimer chip read failed!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP159_REINITIALIZE",
            "ilog_string": "DP Retimer Re-initialize start\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP159_CONFIG_FAIL",
            "ilog_string": "DP Retimer config can't start.(L:%d) Current opState = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP159_CANCEL_CONFIG",
            "ilog_string": "DP Retimer canceled config while configuring state %d, for new state is %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP159_CR_CONFIG",
            "ilog_string": "DP Retimer CR configuration phase %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP159_CONFIGURATION",
            "ilog_string": "DP Retimer configuration table: 0x%x, mode: %d, step: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP159_CONFIG_DATA",
            "ilog_string": "DP Retimer configuration reg: 0x%x, data: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DP130_GENERAL_READ",
            "ilog_string": "DP Redriver chip read value is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP130_TRANS_IN_PROGRESS",
            "ilog_string": "DP Redriver chip transaction already in progress, line %d!\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP130_WRITE_FAILED",
            "ilog_string": "DP Redriver chip write failed!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP130_READ_FAILED",
            "ilog_string": "DP Redriver chip read failed!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CYPRESS_HX3_RETRY",
            "ilog_string": "Cypress HX3 failed writing firmware at offset=%d, retryCount=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CYPRESS_UPGRADING_FIRMWARE",
            "ilog_string": "Cypress downloading firmware, FW size = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CYPRESS_FIRMWARE_UPGRADE_IN_PROGRESS",
            "ilog_string": "Cypress firmware download already in progress\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CYPRESS_HUB_TIMER_STATE",
            "ilog_string": "Cypress Hx3 Hub timer state = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CYPRESS_HUB_NOT_FOUND",
            "ilog_string": "Cypress Hx3 Hub not found\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CYPRESS_HUB_FAILED_PROGRAMMING",
            "ilog_string": "Cypress Hx3 Hub programming failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CYPRESS_HUB_PROGRAMMING_SUCCESS",
            "ilog_string": "Cypress Hx3 Hub programming succeeded!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DP159_READ_RETRY",
            "ilog_string": "DP Retimer chip read retried retryRdCount = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP159_WRITE_RETRY",
            "ilog_string": "DP Retimer chip write retried retryWtCount = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CYPRESS_HX3_PROGAMMING_STATUS",
            "ilog_string": "Cypress HX3 USB3 hub programming status = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP130_DETECT_READ",
            "ilog_string": "DP Redriver chip read byteCount 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP159_DETECT_READ",
            "ilog_string": "DP Retimer chip read byteCount 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DP159_RESET_RX",
            "ilog_string": "Disable and enable Rx lane\n",
            "ilog_num_args": 0
        }
    ],
    "LED_COMPONENT": [
        {
            "ilog_name": "LED_INVALID_MODE",
            "ilog_string": "Invalid LED mode %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LED_SET_MODE",
            "ilog_string": "New LED mode set. Result = %x\n",
            "ilog_num_args": 1
        }
    ],
    "BBGE_COMM_COMPONENT": [
        {
            "ilog_name": "BBGE_COMM_ERROR_BB",
            "ilog_string": "Error: GE communicating BB\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BBGE_COMM_ERROR_GE",
            "ilog_string": "Error: BB communicating GE\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BBGE_COMM_GE_ASSERTED",
            "ilog_string": "** GE Asserted!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BBGE_COMM_GE_ASSERT_INFO",
            "ilog_string": "GE Assert Info[%d]: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BBGE_COMM_GE_CRC",
            "ilog_string": "Got Running GE CRC: %x \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BBGE_COMM_GE_VERSION_MISMATCH",
            "ilog_string": "BB Flash's GE ver[%x] or CRC[%x] doesn't match with Running GE. Start GE automatic update\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BBGE_COMM_GE_VERSION_MATCH",
            "ilog_string": "Checked BB Flash's GE ver[%x] and CRC[%x] match with Running GE.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BBGE_COMM_GE_VERSION",
            "ilog_string": "Got Running GE ver: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BBGE_COMM_GE_WRONG_INDEX",
            "ilog_string": "storage write to wrong index %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BBGE_COMM_GE_STORAGE_FAIL",
            "ilog_string": "storage send to GE failed\n",
            "ilog_num_args": 0
        }
    ],
    "GPIO_COMPONENT": [
        {
            "ilog_name": "GPIO_INIT",
            "ilog_string": "Initializing GPIO, direction reg 0x%x, output bits 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GPIO_READ",
            "ilog_string": "GPIO_READ pin %d, bool val 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GPIO_SET",
            "ilog_string": "GPIO_SET pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GPIO_CLEAR",
            "ilog_string": "GPIO_CLEAR pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GPIO_PULSE",
            "ilog_string": "GPIO_PULSE pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FREQ_MEASURE",
            "ilog_string": "Measuring PLL %d, XUSB is %d, CXM is %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "INVALID_PIN",
            "ilog_string": "Invalid Pin number %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BGRG_IRQ_LOG",
            "ilog_string": "Interrupts 0x%x triggered\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BGRG_IRQ_UNSERVICED",
            "ilog_string": "Interrupts 0x%x were unserviced\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BGRG_GPIO7_LOG",
            "ilog_string": "Interrupt GPIO7 triggered\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IRQ_HANDLER_NOT_SET",
            "ilog_string": "Interrupt Handler is not set for pin %d in line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REGISTERING_IRQ",
            "ilog_string": "Registering Interrrupt handler for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SERVICING_IRQ",
            "ilog_string": "Servicing Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DISABLING_IRQ",
            "ilog_string": "Disabling Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ENABLING_IRQ",
            "ilog_string": "Enabling Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BGRG_HW_DEFAULTS",
            "ilog_string": "Power-on harware defaults from GPIOs are: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BGRG_INT_HANDLER_PRI",
            "ilog_string": "BGRG Interrupt Handler Primary Reg: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BGRG_INT_HANDLER_SEC",
            "ilog_string": "BGRG Interrupt Handler Secondary Reg: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BGRG_INT_HANDLER_PRI_POST",
            "ilog_string": "BGRG Interrupt Handler POST Primary Reg: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BGRG_INT_HANDLER_SEC_POST",
            "ilog_string": "BGRG Interrupt Handler POST Secondary Reg: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GPIO_IRQ_NOT_AVAIL",
            "ilog_string": "GPIO has no more available interrupts for assignment\n",
            "ilog_num_args": 0
        }
    ],
    "EEPROM_COMPONENT": [
        {
            "ilog_name": "EEPROM_BUSY",
            "ilog_string": "There is already an EEPROM access in progress.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EEPROM_ADDRESS_EXCEEDS_CAPACITY",
            "ilog_string": "An attempt was made to access EEPROM page %d which exceeds capacity %d.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_EEPROM_READ_FAILED",
            "ilog_string": "Failed reading external eeprom\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_EEPROM_WRITE_FAILED",
            "ilog_string": "Failed writing to external eeprom\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_EEPROM_WRITE_SUCCESSFUL",
            "ilog_string": "Write to EEPROM is complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_EEPROM_WRONG_READ_LENGTH",
            "ilog_string": "Expected %d bytes, read %d bytes instead\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_PAGE_VALUES",
            "ilog_string": "Byte %d: Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_WORD_VALUES",
            "ilog_string": "Word %d: Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_INVALID_PAGE",
            "ilog_string": "Page %d is outside the valid range of 0 to %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "EEPROM_INITIALIZATION_STARTING",
            "ilog_string": "Beginning EEPROM initialization\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EEPROM_READ_SUBMIT",
            "ilog_string": "Submitting an EEPROM read of page %d with pageData pointing at 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "EEPROM_WRITE_SUBMIT",
            "ilog_string": "Submitting an EEPROM write of page %d with pageData pointing at 0x%x\n",
            "ilog_num_args": 2
        }
    ],
    "ATMEL_CRYPTO_COMPONENT": [
        {
            "ilog_name": "READ_FAILED",
            "ilog_string": "Atmel chip read failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "READ_SUCCESS",
            "ilog_string": "Successfully read %d bytes from Atmel chip\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "READ_BYTE",
            "ilog_string": "Read byte 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_COND",
            "ilog_string": "Invalid condition at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "WRITE_FAILED",
            "ilog_string": "Atmel chip write failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CRC_FAIL",
            "ilog_string": "CRC failure: expecting 0x%x, got 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LONG_PACKET",
            "ilog_string": "Read more bytes (%d) than the size of the packet (%d)\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SHORT_PACKET",
            "ilog_string": "Read less bytes (%d) than the size of the packet (%d)\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_SHORT_PACKET",
            "ilog_string": "Packet of length %d is less than the minimum 4 byte size\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SYS_BUSY_ABORTING_ICMD",
            "ilog_string": "Sorry, system is busy, please try icommand later\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_LARGE_READ_REQUEST",
            "ilog_string": "Invalid read request of %d bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ICMD_FAILED",
            "ilog_string": "icommand failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_ATMEL_SLOT",
            "ilog_string": "Invalid Atmel slot %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_ATMEL_BLOCK",
            "ilog_string": "Invalid Atmel OTP block %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "READ_SLOT_FAILED",
            "ilog_string": "Read slot failed, read %d bytes instead of 32 bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "WRITE_SLOT_FAILED",
            "ilog_string": "Write slot/block failed, read %d status bytes, data[0] is 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_BYTE_ADDR",
            "ilog_string": "Invalid byte address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "READ_CONFIG_WORD_FAILED",
            "ilog_string": "Read config word failed, read %d bytes instead of 4 bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "WRITE_CONFIG_WORD_FAILED",
            "ilog_string": "Write config word failed, read %d status bytes, data[0] is 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LOCK_FAILED",
            "ilog_string": "Lock failed, read %d status bytes, data[0] is 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ATMEL_SUBMIT_I2C_SYS_BUSY",
            "ilog_string": "Submit i2c op, but system is busy at step:%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ATMEL_SUBMIT_I2C_1",
            "ilog_string": "Submit i2c op, opcode:0x%.2x, param1:0x%.2x, param2:0x%.4x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ATMEL_SUBMIT_I2C_2",
            "ilog_string": "Submit i2c op, writeDataSize:%d, readDataSize:%d, completionHandler:0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SENDING_ATMEL_I2C_WAKEUP",
            "ilog_string": "Sending Atmel i2c wakeup\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IDLE_FAILED",
            "ilog_string": "Atmel idle command failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_SEND",
            "ilog_string": "Atmel icmd sending opCode 0x%02x, param1 0x%02x, param2 0x%04x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CRC_WRITE_PACKET_DONE",
            "ilog_string": "Calculated SW CRC for write in %dus\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CRC_READ_PACKET_DONE",
            "ilog_string": "Calculated SW CRC for read in %dus\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SW_MAC_DONE",
            "ilog_string": "SW MAC done! digestsMatch=%d. It took %dus\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "RUN_MAC_CALLED_WHILE_IN_PROGRESS",
            "ilog_string": "run mac called while in progress\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RUN_MAC_CALLED",
            "ilog_string": "Run MAC called, secretKey is at 0x%x, challenge is at 0x%x, completionHandler is at 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "HW_MAC_DONE",
            "ilog_string": "HW MAC operation done, returned data at 0x%x, dataSize %d, userPtr 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "HW_MAC_DONE_INVALID_ARGS",
            "ilog_string": "HW MAC done got invalid args. Got data at 0x%x, dataSize %d, userPtr 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CHIP_STATE1",
            "ilog_string": "Atmel chip state is %d, completionHandler is 0x%x, userPtr is 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CHIP_STATE2",
            "ilog_string": "Atmel chip state readReqSize is %d, simpleCmd is 0x%x, writeBuffer[0-3] in Big endian is 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SET_SPEED",
            "ilog_string": "Atmel chip speed changing from speed %d to speed %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CHIP_STATE3",
            "ilog_string": "Atmel chip state readBuffer[0-3] in Big endian is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MAX_I2C_RETRY_EXCEEDED",
            "ilog_string": "Maximum # of i2c retries exceeded\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_RECOVERY_START",
            "ilog_string": "i2c recovery start attempt %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_RECOVERY_WOKEUP",
            "ilog_string": "i2c recovery did wakeup\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_RECOVERY_DONE",
            "ilog_string": "i2c recovery done, info is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ATMEL_WRITE_BUFFER_BOUNDS",
            "ilog_string": "Tried to write outside the bounds of the buffer at wordOffset %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ATMEL_WRITE_DATA_SLOT_OR_OTP_BLOCK_ICMD_COMPLETE",
            "ilog_string": "ICMD write of data slot / OTP block completed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_READ_CONFIG_WORD_ICMD_COMPLETE",
            "ilog_string": "ICMD read of config word returned data: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ATMEL_WRITE_CONFIG_WORD_ICMD_COMPLETE",
            "ilog_string": "ICMD write of config word completed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_LOCK_ZONE_ICMD_COMPLETE",
            "ilog_string": "Lock authentication zone ICMD completed.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_LOCK_STATUS",
            "ilog_string": "Atmel authentication chip lock status: Data+OTP=%d, Config=%d.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ATMEL_WRITE_DATA_BUFFER_DONE",
            "ilog_string": "Atmel data buffer written at word offset %d with value 0x%x.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ATMEL_INIT_STEP1",
            "ilog_string": "Starting initialization sequence\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_INIT_STEP2",
            "ilog_string": "Atmel chip has woken up\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_INIT_STEP3",
            "ilog_string": "Initialization is done, success flag is: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RUN_NONCE_CALLED_WHILE_IN_PROGRESS",
            "ilog_string": "run Nonce called while in progress\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RUN_NONCE_CALLED",
            "ilog_string": "Run Nonce called, secretKey is at 0x%x, challenge is at 0x%x, completionHandler is at 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ENCRYPT_STEP",
            "ilog_string": "Current Encrypt Step is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "READ_32BYTES",
            "ilog_string": "ATMEL READ 32 BYTES: 0x%04x, 0x%04x, 0x%04x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ATMEL_FIFO_FULL",
            "ilog_string": "ATMEL FIFO TASK FULL \n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MAC_FAILED",
            "ilog_string": "MAC challenge failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MAC_PASSED",
            "ilog_string": "MAC challenge passed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_NOT_EXIST",
            "ilog_string": "Atmel ATSHA204 does not exist\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_TASK_TIME",
            "ilog_string": "Atmel Task current tick is = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ATMEL_VALIDATION",
            "ilog_string": "Atmel Validation Start\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_INVALID_STATE",
            "ilog_string": "Atmel invalid state\n",
            "ilog_num_args": 0
        }
    ],
    "UPP_COMPONENT": [
        {
            "ilog_name": "UPP_INIT",
            "ilog_string": "Upp Initialised \n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ULP_STATUS",
            "ilog_string": "UppUlpStatus(), status = %d \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_INTERRUPT",
            "ilog_string": "UPP interrupt %08x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_PROCESS_H2D",
            "ilog_string": "Host to Device packet received\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_PROCESS_D2H",
            "ilog_string": "Device to Host packet processed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_UNHANDLED_ISR",
            "ilog_string": "Unhandled Upp ISR ISR0:%08x ISR1:%08x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_PACKET_INFO",
            "ilog_string": "Packet Data: %08x Control: %04x bytes rx:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_END_OF_PACKET",
            "ilog_string": "End of packet time = %d microseconds vlane %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_PACKET_END_PROCESSING",
            "ilog_string": "Packet end, writing device address %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_HAL_SET_ENDPOINT_BAD_BINTERVAL",
            "ilog_string": "Bad bInterval value %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_HAL_SET_ENDPOINT",
            "ilog_string": "Writing to Endpoint table, device:%d number:%d QID:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_HAL_SET_ENDPOINT_RAW",
            "ilog_string": "                           enable = %d config0 = %08x config1 = %08x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_PARSE_CONFIG_DESCRIPTOR_INFO",
            "ilog_string": "New Configuration,  Device: %d Configuration:%d Number of interfaces:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_INTERFACE_DESCRIPTOR_INFO",
            "ilog_string": "New Interface:%d Alt:%d Number of endpoints:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_ENDPOINT_ATTRIBUTE_CONTROL",
            "ilog_string": "Endpoint transfer type is Control\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ENDPOINT_ATTRIBUTE_ISO",
            "ilog_string": "Endpoint transfer type is Iso\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ENDPOINT_ATTRIBUTE_BULK",
            "ilog_string": "Endpoint transfer type is Bulk\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ENDPOINT_ATTRIBUTE_INTERRUPT",
            "ilog_string": "Endpoint transfer type is Interrupt\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ENDPOINT_ADDRESS",
            "ilog_string": "Endpoint address is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_LEX_MSG_SET_ENDPOINT",
            "ilog_string": "Endpoint set message, device %d, endpoint %d buffer %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_LEX_MSG_CLEAR_ENDPOINT",
            "ilog_string": "Endpoint clear message, device %d, endpoint %d buffer %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_LEX_MSG_SET_INTERFACE",
            "ilog_string": "Set interface, device %d location %08x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_LEX_MSG_REMOVE_DEVICE",
            "ilog_string": "Remove device %d, devicePtr %08x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_LEX_MSG_ROUTE_CHANGE_DONE",
            "ilog_string": "Lex Route change done, device %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_REX_MSG_SET_ENDPOINT",
            "ilog_string": "Rex set endpoint, device %d, endpoint %d buffer %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_REX_MSG_CLEAR_ENDPOINT",
            "ilog_string": "Rex cleared endpoint, device %d, endpoint %d buffer %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_REX_MSG_ENDPOINT_NOT_RESPONSIVE",
            "ilog_string": "Rex detected unresponsive endpoint, device %d, endpoint %d buffer %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_REX_MSG_DEVICE_REMOVED",
            "ilog_string": "Rex removed device, device %08x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_REX_MSG_SET_INTERFACE",
            "ilog_string": "Rex Set interface, device address %d config settings: %08x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_REX_MSG_ROUTE_CHANGE_DONE",
            "ilog_string": "Rex Route change done for device %d  config settings: %08x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_LEX_INVALID_BUFFER_ID_ENDPOINT",
            "ilog_string": "Invalid buffer when clearing endpoint %d device %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_TRANSACTION_NOT_AVAILABLE",
            "ilog_string": "Transaction not available!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_TRANSACTION_IN_USE",
            "ilog_string": "Transaction already in use, Device Address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_TRANSACTION_DEVICE_NOT_FOUND",
            "ilog_string": "Get Free Transaction, Device not found, Device Address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_TRANSACTION_DOWNSTREAM_NOT_FOUND",
            "ilog_string": "Downstream only Transaction not found, Device Address %d, line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_NO_FREE_TRANSACTIONS",
            "ilog_string": "No free transactions to allocate\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ILLEGAL_FREE_TRANSACTION",
            "ilog_string": "Freeing a transaction when none allocated!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ILLEGAL_FREE_TRANSACTION_INDEX",
            "ilog_string": "Illegal free transaction from bad index %d previous %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_FREE_ABANDONED_TRANSACTION",
            "ilog_string": "Freeing abandoned transaction, device address %d location %8x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_CORRUPT_OPEN_LIST",
            "ilog_string": "Corrupt Open list index %d line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_ILLEGAL_TRANSACTION_INDEX",
            "ilog_string": "Index %d does not match transaction given line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_TRANSACTION_WATERMARK_CHANGE",
            "ilog_string": "UPP opentransactionHighWaterMark: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_TRANSACTION_HOST_DUPLICATE_SEQ",
            "ilog_string": "**Host duplicate seq number %d device %02d time stamp %d skipping rest of packet\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_TRANSACTION_DEVICE_DUPLICATE_SEQ",
            "ilog_string": "**Device duplicate seq number %d device %02d time stamp %d skipping rest of packet\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_TRANSACTION_ILLEGAL_HOST_PACKET",
            "ilog_string": "Host packet ILLEGAL!  Device %d multiple setup packet received, seq %d timestamp %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_TRANSACTION_ILLEGAL_SETUP_PACKET",
            "ilog_string": "ILLEGAL setup packet! Device %d, transaction type %d, sequence %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_TRANSACTION_SET_ADDRESS",
            "ilog_string": "Set address, new address = %d route string = %x timeStamp %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_TRANSACTION_GET_CONFIGURATION",
            "ilog_string": "Get Configuration, device address %d route %x timeStamp %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_MAX_DEVICE_OVER",
            "ilog_string": "Can't allocated new device. No more available slot\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_MAX_ENDPOINT_OVER",
            "ilog_string": "Can't allocated new endpoint. No more available slot\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ADD_SAME_DEVICE",
            "ilog_string": "The device address(%d) and route (0x%8x)already exist\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_ADD_ADDRESS_EXIST",
            "ilog_string": "The device address(%d) is already exist, Can't add it!\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ADD_ROUTE_EXIST",
            "ilog_string": "The device route string(0x%8x) is already in use by device %d!\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_NULL_DEVICE",
            "ilog_string": "Device pointer is NULL! address %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_DEVICE_ALREADY_PENDING",
            "ilog_string": "Device add already pending %08x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_WRONG_ENDPOINT",
            "ilog_string": "Endpoint index (%d) is wrong\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_FOUND_REMOVE_DEVICE",
            "ilog_string": "Found the device to be removed: addr(%d), route(0x%x), mem address(0x%X) \n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_DEVICE_ADD",
            "ilog_string": "Add device request: dev addr(%d), route(0x%x), mem address(0x%X) \n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_DEVICE_REMOVE",
            "ilog_string": "Remove device: dev addr(%d), route(0x%x), mem address(0x%X) \n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_DEVICE_FREE",
            "ilog_string": "Free device: dev addr(%d), route(0x%x), mem address(0x%X) \n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_INVALID_DEVICE_FREE",
            "ilog_string": "Free device %08x called with unexpected device pointer %08x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_DEVICE_LOCATION",
            "ilog_string": "\n\n                             Device Address %3d. Route Path: 0x%08x. ======================\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_DEVICE_ENDPOINT",
            "ilog_string": "    Endpoint: Number:%2d, type %d            Route:0x%08x, \n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_DEVICE_ENDPOINT_DETAIL",
            "ilog_string": "              Active|Set|Clear|Dir: 0x%04x Max Burst: %d bInterval %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_ENDPOINT_NEXT",
            "ilog_string": "              Current:0x%08x, Next endpoint 0x%08x, Prev endpoint 0x%08x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_ENDPOINT_FREE",
            "ilog_string": "Free endpoint: Number:%d, Type:%d route:0x%08x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_DEVICE_NEXT",
            "ilog_string": "Next device 0x%x, Prev device 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_DEVICE_ADDR",
            "ilog_string": "Allocated Memory for address %d is 0x%08X\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_NUM_DEVICES",
            "ilog_string": "\n             Number of allocated devices:%d, free devices:%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_NUM_ENDPOINTS",
            "ilog_string": "               Number of allocated endpoints:%d, free endpoints:%d\n\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_NEW_ENDPOINT",
            "ilog_string": "New endpoint: route 0x%x, number %d, type %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_DEVICE_SET_INTERFACE",
            "ilog_string": "Set Interface: Device %d value %08x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_DEVICE_SET_CONFIFGURATION",
            "ilog_string": "Set Configuration: Device %d Route 0x%08x Config value: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_SAME_ACTIVE_INTERFACE",
            "ilog_string": "Active interface is the same with before. Route: 0x%x endpoint %08x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_NO_ENDPOINTS_FOR_INTERFACE",
            "ilog_string": "No endpoints found for the specified interface Route: 0x%08x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ACTIVE_INTERFACE",
            "ilog_string": "Active interface callback. Endpoint Route: 0x%x, Number:%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_INACTIVE_INTERFACE",
            "ilog_string": "Inactive interface callback. Endpoint Route: 0x%x, Number:%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_NO_FREE_INTERFACES",
            "ilog_string": "No free interfaces available. Interface Route: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_INTERFACE_LINK_ERROR",
            "ilog_string": "Error when adding interface to active list. Interface Route: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_NO_ENDPOINTS_MARKED_CLEAR",
            "ilog_string": "No endpoints found that were marked to be cleared\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_NO_ENDPOINTS_MARKED_SET",
            "ilog_string": "No endpoints found that were marked to be set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ID_MGR_FIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR",
            "ilog_string": "STAT:UPP upp->id_mgr_fifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ID_MGR_FIFO_WRENG_STATS0_FIFO_FULL_ERR",
            "ilog_string": "STAT:UPP upp->id_mgr_fifo->write_engine->stats0->fifo_full_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ID_MGR_FIFO_WRENG_STATS0_PKT_ERR",
            "ilog_string": "STAT:UPP upp->id_mgr_fifo->write_engine->stats0->pkt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ID_MGR_FIFO_WRENG_STATS0_PKT_SOP_ERR",
            "ilog_string": "STAT:UPP upp->id_mgr_fifo->write_engine->stats0->pkt_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ID_MGR_FIFO_WRENG_STATS0_DRP_PKT_RD",
            "ilog_string": "STAT:UPP upp->id_mgr_fifo->write_engine->stats0->drp_pkt_rd: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ID_MGR_FIFO_WRENG_STATS0_DRP_PKT_WR",
            "ilog_string": "STAT:UPP upp->id_mgr_fifo->write_engine->stats0->drp_pkt_wr: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ID_MGR_FIFO_WRENG_STATS0_DRP_PKT",
            "ilog_string": "STAT:UPP upp->id_mgr_fifo->read_engine->stats0->drp_pkt: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ISO_REX_FIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR",
            "ilog_string": "STAT:UPP upp->iso_rex_fifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ISO_REX_FIFO_WRENG_STATS0_FIFO_FULL_ERR",
            "ilog_string": "STAT:UPP upp->iso_rex_fifo->write_engine->stats0->fifo_full_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ISO_REX_FIFO_WRENG_STATS0_PKT_ERR",
            "ilog_string": "STAT:UPP upp->iso_rex_fifo->write_engine->stats0->pkt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ISO_REX_FIFO_WRENG_STATS0_PKT_SOP_ERR",
            "ilog_string": "STAT:UPP upp->iso_rex_fifo->write_engine->stats0->pkt_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ISO_REX_FIFO_WRENG_STATS0_DRP_PKT_RD",
            "ilog_string": "STAT:UPP upp->iso_rex_fifo->write_engine->stats0->drp_pkt_rd: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ISO_REX_FIFO_WRENG_STATS0_DRP_PKT_WR",
            "ilog_string": "STAT:UPP upp->iso_rex_fifo->write_engine->stats0->drp_pkt_wr: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ISO_REX_FIFO_WRENG_STATS0_DRP_PKT",
            "ilog_string": "STAT:UPP upp->iso_rex_fifo->read_engine->stats0->drp_pkt: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_FIFO_FULL_ERR",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->fifo_full_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_PKT_ERR",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->pkt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_PKT_SOP_ERR",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->pkt_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_DRP_PKT_RD",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->drp_pkt_rd: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_DRP_PKT_WR",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->drp_pkt_wr: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_DRP_PKT",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_h2d_fifo->read_engine->stats0->drp_pkt: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_NFIFO_DCOUNT",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->nfifo_dcount: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_H2D_FIFO_WRENG_STATS0_PFIFO_DCOUNT",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_h2d_fifo->write_engine->stats0->pfifo_dcount: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_FIFO_FULL_ERR",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->fifo_full_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_PKT_ERR",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->pkt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_PKT_SOP_ERR",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->pkt_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_DRP_PKT_RD",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->drp_pkt_rd: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_DRP_PKT_WR",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->drp_pkt_wr: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_DRP_PKT",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_d2h_fifo->read_engine->stats0->drp_pkt: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_NFIFO_DCOUNT",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->nfifo_dcount: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_CTRL_TRFR_D2H_FIFO_WRENG_STATS0_PFIFO_DCOUNT",
            "ilog_string": "STAT:UPP upp->ctrl_trfr_d2h_fifo->write_engine->stats0->pfifo_dcount: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_QUEUE_STATE_TRANSITION",
            "ilog_string": "Queue manager: old state = %d, new state = %d on event = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_QUEUE_INVALID_EVENT",
            "ilog_string": "Queue manager: got invalid event %d in state %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPP_QUEUE_SPURIOUS_INTERRUPT_EVENT",
            "ilog_string": "Queue manager: spurious interrupt received %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPP_ENDPOINT_ENTRY_SET",
            "ilog_string": "Set Endpoint device %d endpoint %d buffer ID %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_ENDPOINT_ENTRY_CLEARED",
            "ilog_string": "Clear Endpoint device %d endpoint %d buffer ID %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UPP_NO_FREE_ISO_BUFFERS",
            "ilog_string": "No more accelerated queues available!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ICMD_ENABLED",
            "ilog_string": "UPP is enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ICMD_DISABLED",
            "ilog_string": "UPP is disabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ICMD_CONTROL_TRANSFER_ENABLED",
            "ilog_string": "UPP control transfer is enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UPP_ICMD_CONTROL_TRANSFER_DISABLED",
            "ilog_string": "UPP control transfer is disabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IS_UPP_ISO_ENABLE_STATUS",
            "ilog_string": "UPP ISO enabled (0 = disabled) = %d \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IS_UPP_CONTROL_TRANSFER_ENABLED",
            "ilog_string": "UPP control transfer = %d\n",
            "ilog_num_args": 1
        }
    ],
    "I2C_COMPONENT": [
        {
            "ilog_name": "I2C_FIFO_OVER_FLOW",
            "ilog_string": "I2C fifo overflow\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_FIFO_UNDER_FLOW",
            "ilog_string": "I2C fifo underflow\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_OPERATIONS",
            "ilog_string": "I2C: %d tasks in fifo, current task: device 0x%x, i2c op 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "I2C_NO_OPERATIONS",
            "ilog_string": "I2C: no operations in progress\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WAKE_LOG",
            "ilog_string": "i2c: performing wake\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WAKE_DONE",
            "ilog_string": "i2c: wake done\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_READ_LOG",
            "ilog_string": "i2c: read of device %d, for %d bytes\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_READ_DONE",
            "ilog_string": "i2c: done read %d bytes, contents 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_WRITE_LOG",
            "ilog_string": "i2c: write device %d, byteCount %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_WRITE_DONE",
            "ilog_string": "i2c: write complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WRITE_FAILED",
            "ilog_string": "i2c: write failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_TRN_ERROR",
            "ilog_string": "i2c: TRN ERR (0x%x)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_I2C_START",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing i2cStartInterface\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_I2C_WAKE_START",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing i2c wake start\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_I2C_WAKE_STOP",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_FINALIZE_OP",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing finalize operation\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_SUBMIT_OP",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing submit operation\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_INVALID_TASK_STATE",
            "ilog_string": "i2c: invalid state at line %d, device 0x%x, operation 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "I2C_READ_TOO_MANY_BYTES",
            "ilog_string": "i2c read too many bytes at line %d. Expected %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_IRQ_LOG",
            "ilog_string": "Interrupts 0x%x triggered\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_IRQ_UNSERVICED",
            "ilog_string": "Interrupts 0x%x were unserviced\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IRQ_HANDLER_NOT_SET",
            "ilog_string": "Interrupt Handler is not set for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "REGISTERING_IRQ",
            "ilog_string": "Registering Interrrupt handler for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SERVICING_IRQ",
            "ilog_string": "Servicing Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DISABLING_IRQ",
            "ilog_string": "Disabling Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ENABLING_IRQ",
            "ilog_string": "Enabling Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_START_READ",
            "ilog_string": "I2C read started for %d bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_START_WRITE",
            "ilog_string": "I2C write started\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_READ_FINISH",
            "ilog_string": "I2C read finished\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WRITE_FINISH",
            "ilog_string": "I2C write finished\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_DO_WAKE_OP",
            "ilog_string": "I2C do wake op %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_WAKE_COMPLETE",
            "ilog_string": "I2C wake complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WRITE2",
            "ilog_string": "i2c write data is 0x%x 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_CONTROLREG_READ",
            "ilog_string": "I2C Control Reg is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_START_WRITE_READ",
            "ilog_string": "I2C writeRead started for %d bytes to write, %d bytes to read\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_OPERATIONS_QUEUED",
            "ilog_string": "I2C: %d operations queued, nothing in progress\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_START_WRITE_READ_BLOCK",
            "ilog_string": "I2C writeReadBlock started for %d bytes to write, %d maximum bytes to read\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_RANDOM_READ_1BYTE_RESP",
            "ilog_string": "I2C Random 1 Byte Read: Register: 0x%x; Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_ICMD_READ_ERR",
            "ilog_string": "I2C icmd read error - max read of 8 bytes\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_ICMD_WRITEREAD_ERR",
            "ilog_string": "I2C icmd write read error - max read of 8 bytes\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_ICMD_WRITEREAD_DONE",
            "ilog_string": "I2C icmd write read %d bytes, data 0x%x 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UNSUPPORTED_PORT",
            "ilog_string": "i2cSwitchPort = %d is unsupported\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ADDRESS_PORT_ALREADY_EXIST",
            "ilog_string": "i2cAddress = 0x%x, portNumber = 0x%x already exist in the i2cDeviceList\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ADDRESS_NOT_EXISTS_FOR_HANDLE",
            "ilog_string": "i2cAddress = 0x%x is not registered to TI switch port %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SETUP_SWITCH_FOR_ACCESS",
            "ilog_string": "Setting up I2C switch for access to address %d on port %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CTRLLR_I2C_CONTROLLER_FIFO_OVERFLOW",
            "ilog_string": "I2C operation FIFO overflow at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CTRLLR_I2C_CONTROLLER_FIFO_UNDERFLOW",
            "ilog_string": "I2C operation FIFO underflow at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CTRLLR_UNHANDLED_SWITCH_CASE",
            "ilog_string": "Execution reached an unhandled case of a switch statement.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_WRITE_ICMD_0",
            "ilog_string": "I2C controller write - deviceAddress=0x%x, speed=%d, switchPort=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_WRITE_ICMD_1",
            "ilog_string": "    byteCount=%d, dataMSW=0x%x, dataLSW=0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_READ_ICMD_0",
            "ilog_string": "I2C controller read - deviceAddress=0x%x, speed=%d, switchPort=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_READ_ICMD_1",
            "ilog_string": "    byteCount=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_WRITE_READ_ICMD_0",
            "ilog_string": "I2C controller write-read - deviceAddress=0x%x, speed=%d, switchPort=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_WRITE_READ_ICMD_1",
            "ilog_string": "    writeByteCount=%d, writeData=0x%x, readByteCount=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_BLOCK_WRITE_READ_ICMD_0",
            "ilog_string": "I2C controller block write-read - deviceAddress=0x%x, speed=%d, switchPort=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_BLOCK_WRITE_READ_ICMD_1",
            "ilog_string": "    writeByteCount=%d, writeData=0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_WRITE_COMPLETE",
            "ilog_string": "I2C controller write complete.  Success=%d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_READ_COMPLETE",
            "ilog_string": "I2C controller read complete.  byteCount=%d, dataMSW=0x%x, dataLSW=0x%x.\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_WRITE_READ_COMPLETE",
            "ilog_string": "I2C controller write-read complete.  byteCount=%d, dataMSW=0x%x, dataLSW=0x%x.\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CTRLLR_I2C_CTRL_BLOCK_WRITE_READ_COMPLETE",
            "ilog_string": "I2C controller block write-read complete.  byteCount=%d, dataMSW=0x%x, dataLSW=0x%x.\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CTRLLR_INVALID_I2C_ADDRESS",
            "ilog_string": "Invalid I2C address: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CTRLLR_INVALID_I2C_SPEED",
            "ilog_string": "Invalid I2C speed: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CTRLLR_INVALID_SWITCH_PORT",
            "ilog_string": "Invalid I2C switch port: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CTRLLR_INVALID_BYTE_COUNT",
            "ilog_string": "Invalid byte count. Given: %d, Max: %d.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CTRLLR_INVALID_MUX_PORT",
            "ilog_string": "Invalid I2C rtl Mux port: %d, line: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_POOL_IS_FULL",
            "ilog_string": "I2C memory pool is full with size = %d, can't allocate a new element\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_WRITE_GO_TIMEOUT",
            "ilog_string": "I2C Blocking write timeout on Go bit. i2c_control: %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_READ_GO_TIMEOUT",
            "ilog_string": "I2C Blocking read timeout on Go bit\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WRITE_READ_GO_TIMEOUT",
            "ilog_string": "I2C Blocking write-read timeout on Go bit\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_BLOCKING_OP_IN_PROGRESS",
            "ilog_string": "I2C Blocking (device:0x%x) cancelled - op (device:0x%x) in progress at line %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "I2C_BLOCKING_ERROR",
            "ilog_string": "I2C Blocking error at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_FIFO_OVERFLOW_CALLBACK",
            "ilog_string": "I2C FIFO overflow. Callback address = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_FIFO_PRINT_CALLBACK",
            "ilog_string": "I2C fifo idx = %d; callback = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_UNEXPECTED_INT_DONE",
            "ilog_string": "Unexpected I2C Interrupt\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_SWITCH_SELECT_PORTS",
            "ilog_string": "Reconfiguring I2C switch.  New ports enabled=0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_CONTROL_SWITCH_ERROR",
            "ilog_string": "Tried control I2C switch during operation\n",
            "ilog_num_args": 0
        }
    ],
    "I2C_SLAVE_COMPONENT": [
        {
            "ilog_name": "I2C_VERSION1_DATA",
            "ilog_string": "I2C Slave Version %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "I2C_READ_DATA",
            "ilog_string": "I2C Read data: %x, Fifo level: %x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_TRANSACTION_COMPLETE",
            "ilog_string": "Transaction Complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_READ_COMMAND",
            "ilog_string": "I2C Read command: %02d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_BUSY",
            "ilog_string": "Transaction Complete: %d\n",
            "ilog_num_args": 1
        }
    ],
    "MDIOD_COMPONENT": [
        {
            "ilog_name": "MDIOD_FOUND_PHY_AT_MDIO_ADDR",
            "ilog_string": "Found a PHY at MDIO address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIOD_NULL_COMPLETION_HANDLER",
            "ilog_string": "Null completion handler passed, line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIOD_PHY_FIFO_FULL",
            "ilog_string": "PHY MDIO operation FIFO full. Can't submit Callback=0x%x, Active Callback=0x%x, Line=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UNSUPPORTED_BMSR_ERCAP",
            "ilog_string": "The PHY does not suppport extended capability registers\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UNSUPPORTED_BMSR_ANEGCAPABLE",
            "ilog_string": "The PHY does not support auto negotiation\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UNSUPPORTED_BMSR_ESTATEN",
            "ilog_string": "The PHY does not support 1000Base-T extended status register\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UNSUPPORTED_ESTATUS_1000_TFULL",
            "ilog_string": "The PHY does not support 1000Base-T full duplex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "USELESS_PHY_SETTING",
            "ilog_string": "Useless PHY Setting\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_UP",
            "ilog_string": "PHY link up\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_DOWN",
            "ilog_string": "PHY link down\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG",
            "ilog_string": "PHY control reg 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE1",
            "ilog_string": "  PHY in reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE2",
            "ilog_string": "  PHY in loopback mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE3",
            "ilog_string": "  PHY auto-negotiate enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE4",
            "ilog_string": "  PHY auto-negotiate NOT enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE5",
            "ilog_string": "  PHY in power down mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE6",
            "ilog_string": "  PHY is electrically isolated from GMII\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE7",
            "ilog_string": "  PHY auto-negotiate restarting\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE8",
            "ilog_string": "  PHY auto-negotiate restart complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE9",
            "ilog_string": "  PHY full duplex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE10",
            "ilog_string": "  PHY half duplex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE11",
            "ilog_string": "  PHY collision test enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE12",
            "ilog_string": "  PHY speed selected 1000Mbps\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE13",
            "ilog_string": "  PHY speed selected 100Mbps\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE14",
            "ilog_string": "  PHY speed selected 10Mbps\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG",
            "ilog_string": "PHY status reg 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE1",
            "ilog_string": "  PHY 100BASE-T4 capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE2",
            "ilog_string": "  PHY 100BASE-TX full duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE3",
            "ilog_string": "  PHY 100BASE-X half duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE4",
            "ilog_string": "  PHY 10BASE-T full duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE5",
            "ilog_string": "  PHY 10BASE-T half duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE6",
            "ilog_string": "  PHY 100BASE-T2 full duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE7",
            "ilog_string": "  PHY 100BASE-T2 half duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE8",
            "ilog_string": "  PHY extended status information in reg 0x0F\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE9",
            "ilog_string": "  PHY auto-negotiation complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE10",
            "ilog_string": "  PHY remote fault detected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE11",
            "ilog_string": "  PHY auto-negotiate capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE12",
            "ilog_string": "  PHY auto-negotiate NOT capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE13",
            "ilog_string": "  PHY link up\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE14",
            "ilog_string": "  PHY link down\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE15",
            "ilog_string": "  PHY jabber condition detected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE16",
            "ilog_string": "  PHY extended register capabilities\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIOD_ETH_PHY_NOT_FOUND",
            "ilog_string": "No ethernet PHY was detected.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIOD_DEBUG_D_X",
            "ilog_string": "MDIOD DGB LINE %d VAL 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MDIOD_ETH_PHY_ISR_NOT_GEN",
            "ilog_string": "MDIOD not EnetPHY generated ISR\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIOD_ETH_PHY_ISR_NOT_LINK_GEN",
            "ilog_string": "MDIOD not EnetPHY Link generated ISR, value: %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIOD_ETH_PHY_ISR_GEN",
            "ilog_string": "MDIOD EnetPHY generated ISR: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ENET_PHY_CHANGE_PHY_SPEED",
            "ilog_string": "Changing PHY speed to %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UNSUPPORTED_1000MBPS_SPEED_CHANGE_REQUEST",
            "ilog_string": "Requested speed of 1000Mbps not supported by this PHY\n",
            "ilog_num_args": 0
        }
    ],
    "AQUANTIA_COMPONENT": [
        {
            "ilog_name": "AQUANTIA_PMA_RECEIVE_LINK_STATUS",
            "ilog_string": "STAT: Aquantia PMA Receive Link Status (1.1.2): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_TRANSMIT_FAULT",
            "ilog_string": "STAT: Aquantia PMA Transmit Fault (1.8.B): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_RECEIVE_FAULT",
            "ilog_string": "STAT: Aquantia PMA Receive Fault (1.8.A): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_LP_RETRAIN_COUNT",
            "ilog_string": "STAT: Aquantia PMA LP Fast Retrain Count (1.93.F:B): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_LD_RETRAIN_COUNT",
            "ilog_string": "STAT: Aquantia PMA LD Fast Retrain Count (1.93.A:6): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_RETRAIN_SIGNAL_TYPE",
            "ilog_string": "STAT: Aquantia PMA Fast Retrain Signal Type (1.93.2:1): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_NUM_LINK_RECOVERY",
            "ilog_string": "STAT: Aquantia PMA Number Of Link Recovery Since Last AutoNeg (1.E811.F:8): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_NUM_RFI_RECOVERY",
            "ilog_string": "STAT: Aquantia PMA Number Of RFI Training Link Recovery Since Last AutoNeg (1.E811.7:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_TRANSMIT_FAULT",
            "ilog_string": "STAT: Aquantia PCS Transmit Fault (3.8.B): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_RECEIVE_FAULT",
            "ilog_string": "STAT: Aquantia PCS Receive Fault (3.8.A): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_10G_LINK_STATUS",
            "ilog_string": "STAT: Aquantia PCS 10G Receive Link Status (3.20.C): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_10G_HIGH_BER",
            "ilog_string": "STAT: Aquantia PCS 10G BASE-T High BER (3.20.1): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_10G_BLOCK_LOCK",
            "ilog_string": "STAT: Aquantia PCS 10G Block Lock (3.20.0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_BLOCK_LOCK_LATCHED",
            "ilog_string": "STAT: Aquantia PCS Block Lock Latched (3.21.F): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_HIGH_BER_LATCHED",
            "ilog_string": "STAT: Aquantia PCS 10G BASE-T High BER Latched (3.21.E): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_ERROR_FRAME_COUNT",
            "ilog_string": "STAT: Aquantia PCS LDPC Errored Frame Counter (3.21.D:8): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_ERROR_BLOCK_COUNT",
            "ilog_string": "STAT: Aquantia PCS Errored 65B Block Counter (3.21.7:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_SYSTEM_INTERFACE_FAULT",
            "ilog_string": "STAT: Aquantia PCS System Interface Transmit Fault (3.C8F0.0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_XAUI_INVALID_BLOCK",
            "ilog_string": "STAT: Aquantia PCS XAUI Transmit Invalid 64B Block Detected (3.CC00.0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_TX_10G_BAD_FRAME_COUNT",
            "ilog_string": "STAT: Aquantia PCS Transmit Vendor 10GBASE-T Bad Frame Counter (3.C823:C822): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_UNCORRECTED_FRAME_COUNT",
            "ilog_string": "STAT: Aquantia PCS Receive Vendor Uncorrected Frame Counter (3.E821:E820): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_LDPC_CORRECTED_F4_ITERATION_COUNT",
            "ilog_string": "STAT: Aquantia PCS LDPC corrected frames 4 iteration Counter (3.E847:E846): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_LDPC_CORRECTED_F5_ITERATION_COUNT",
            "ilog_string": "STAT: Aquantia PCS LDPC corrected frames 5 iteration Counter (3.E849:E848): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_LDPC_CORRECTED_F6_ITERATION_COUNT",
            "ilog_string": "STAT: Aquantia PCS LDPC corrected frames 6 iteration Counter (3.E850): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_LDPC_CORRECTED_F7_ITERATION_COUNT",
            "ilog_string": "STAT: Aquantia PCS LDPC corrected frames 7 iteration Counter (3.E851): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_LDPC_CORRECTED_F8_ITERATION_COUNT",
            "ilog_string": "STAT: Aquantia PCS LDPC corrected frames 8 iteration Counter (3.E852): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_CRC_ERROR",
            "ilog_string": "STAT: Aquantia PCS Rx CRC Frame error (3.EC00.F): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_LDPC_DECODE_FAILURE",
            "ilog_string": "STAT: Aquantia PCS LDPC decode failure (3.EC00.E): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_LOCAL_FAULT_DETECT",
            "ilog_string": "STAT: Aquantia PCS RPL local fault detect (3.EC00.B): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_LOF_DETECT",
            "ilog_string": "STAT: Aquantia PCS RPL LOF detect (3.EC00.A): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_40G_BIP_LOCK",
            "ilog_string": "STAT: Aquantia PCS RPL 40G BIP lock (3.EC00.9): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_INVALID_65B_BLOCK",
            "ilog_string": "STAT: Aquantia PCS Invalid Rx 65B block (3.EC00.8): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_LDPC_ERROR_EXCEEDED",
            "ilog_string": "STAT: Aquantia PCS Rx LDPC consecutive errored frame threshold exceeded (3.EC00.5): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_FAULT",
            "ilog_string": "STAT: Aquantia PHY Transmit Fault (4.8.B): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_RX_FAULT",
            "ilog_string": "STAT: Aquantia PHY Receive Fault (4.8.A): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_XGXS_LANE_ALIGN",
            "ilog_string": "STAT: Aquantia PHY XGXS Lane Alignment Status (4.18.C): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_LANE_SYNC",
            "ilog_string": "STAT: Aquantia PHY Lane Sync (4.18.3:0): %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_BAD_FRAME_COUNT",
            "ilog_string": "STAT: Aquantia PHY XS Transmit (XAUI Rx) Bad Frame Counter (4.C805:C804): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_XAUI_RX_DELETION",
            "ilog_string": "STAT: Aquantia PHY XAUI Rx Sequence Ordered Set Deletion (4.CC01.D): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_RXAUI_LANE_ALIGN_LOCK_B",
            "ilog_string": "STAT: Aquantia PHY RXAUI Lane Alignment Lock Status [1:0] (4.CC01.B): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_RXAUI_LANE_ALIGN_LOCK_A",
            "ilog_string": "STAT: Aquantia PHY RXAUI Lane Alignment Lock Status [1:0] (4.CC01.A): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_RESERVED_XGMII_CHAR",
            "ilog_string": "STAT: Aquantia PHY Reserved XGMII Character Received (4.CC01.9): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_INVALID_XGMII_CHAR",
            "ilog_string": "STAT: Aquantia PHY XAUI Tx Invalid XGMII Character Received (4.CC01.8): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_CODE_VIOLATION_ERR_1",
            "ilog_string": "STAT: Aquantia PHY XAUI Tx Code Violation Error For Lane 0 [3:0] (4.CC01.4): %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_CODE_VIOLATION_ERR_2",
            "ilog_string": "STAT: Aquantia PHY XAUI Tx Code Violation Error For Lane 1 [3:0] (4.CC01.5): %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_CODE_VIOLATION_ERR_3",
            "ilog_string": "STAT: Aquantia PHY XAUI Tx Code Violation Error For Lane 2 [3:0] (4.CC01.6): %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_CODE_VIOLATION_ERR_4",
            "ilog_string": "STAT: Aquantia PHY XAUI Tx Code Violation Error For Lane 3 [3:0] (4.CC01.7): %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_RUN_DISPARITY_ERR_1",
            "ilog_string": "STAT: Aquantia PHY XAUI Tx Running Disparity Error For Lane 0 [3:0] (4.CC01.0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_RUN_DISPARITY_ERR_2",
            "ilog_string": "STAT: Aquantia PHY XAUI Tx Running Disparity Error For Lane 1 [3:0] (4.CC01.1): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_RUN_DISPARITY_ERR_3",
            "ilog_string": "STAT: Aquantia PHY XAUI Tx Running Disparity Error For Lane 2 [3:0] (4.CC01.2): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_RUN_DISPARITY_ERR_4",
            "ilog_string": "STAT: Aquantia PHY XAUI Tx Running Disparity Error For Lane 3 [3:0] (4.CC01.3): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_RX_BAD_FRAME_COUNT",
            "ilog_string": "STAT: Aquantia PHY XS Receive (XAUI Tx) Rx Bad Frame Counter (4.E805:E804): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_USX_AUTONEGO_NUMBER",
            "ilog_string": "STAT: Aquantia PHY Number of USX Aneg Restarts [F:0] (4.E810.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_AUTONEGO_STATUS",
            "ilog_string": "STAT: Aquantia PHY System interface Autoneg Status [1:0] (4.E812.F:E): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_RX_LINK_UP",
            "ilog_string": "STAT: Aquantia PHY Rx Link Up (4.E812.D): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TX_READY",
            "ilog_string": "STAT: Aquantia PHY Tx Ready (4.E812.C): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_RX_RESERVED_XGMII_CHAR",
            "ilog_string": "STAT: Aquantia PHY Reserved XGMII Character Received from PCS (4.EC00.F): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_RX_INVALID_XGMII_CHAR",
            "ilog_string": "STAT: Aquantia PHY Invalid XGMII Character Received from PCS (4.EC00.E): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_RX_LINK_STATUS_MSG",
            "ilog_string": "STAT: Aquantia PHY Link status Message Received from PCS (4.EC00.D): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_LINK_PULSE_DETECT",
            "ilog_string": "STAT: Aquantia AUTO-NEG Link Pulse Detect (7.CC01.F): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_LINK_CONNECT",
            "ilog_string": "STAT: Aquantia AUTO-NEG Link Connect / Disconnect (7.CC01.0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_HIGH_TEMP_FAIL",
            "ilog_string": "STAT: Aquantia GLOBAL High Temperature Failure (1E.CC00.E): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_LOW_TEMP_FAIL",
            "ilog_string": "STAT: Aquantia GLOBAL Low Temperature Failure (1E.CC00.D): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_HIGH_TEMP_WARNING",
            "ilog_string": "STAT: Aquantia GLOBAL High Temperature Warning (1E.CC00.C): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_LOW_TEMP_WARNING",
            "ilog_string": "STAT: Aquantia GLOBAL Low Temperature Warning (1E.CC00.B): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_DEVICE_FAULT",
            "ilog_string": "STAT: Aquantia GLOBAL Device Fault (1E.CC00.4): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_FAST_LINK_DROP_FAULT",
            "ilog_string": "STAT: Aquantia GLOBAL Fast Link Drop (1E.CC01.A): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_MDIOD_COMMAND_OVERFLOW",
            "ilog_string": "STAT: Aquantia GLOBAL MDIO Command Handling Overflow (1E.CC01.7): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_DTEXS_RX_LOCAL_FAULT",
            "ilog_string": "STAT: Aquantia DTE XS Receive Local Fault (5.8.10): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_DTEXS_TX_LOCAL_FAULT",
            "ilog_string": "STAT: Aquantia DTE XS Transmit Local Fault (5.8.11): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_CHANNEL_A_RECEIVED_SIGNAL_POWER",
            "ilog_string": "STAT: Aquantia PMA Channel A Received Signal Power (1.8D.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_CHANNEL_B_RECEIVED_SIGNAL_POWER",
            "ilog_string": "STAT: Aquantia PMA Channel B Received Signal Power (1.8E.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_CHANNEL_C_RECEIVED_SIGNAL_POWER",
            "ilog_string": "STAT: Aquantia PMA Channel C Received Signal Power (1.8F.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_CHANNEL_D_RECEIVED_SIGNAL_POWER",
            "ilog_string": "STAT: Aquantia PMA Channel D Received Signal Power (1.90.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_RECEIVE_CURRENT_LINK_STATUS",
            "ilog_string": "STAT: Aquantia PMA Receive Link Current Status (1.E800.0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_FAST_RETRAIN_TIME",
            "ilog_string": "STAT: Aquantia PMA Accumulated Fast Retrain Time (1.E810.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_FAULT_STATUS",
            "ilog_string": "STAT: Aquantia PCS Fault (3.1.7): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_RECEIVE_LINK_STATUS",
            "ilog_string": "STAT: Aquantia PCS Receive Link Status (3.1.2): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_TRANSMIT_LINK_ALIGNMENT_STATUS",
            "ilog_string": "STAT: Aquantia PHY XS Transmit Link Alignment Status (4.1.2): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_SERDES_CALS_NUMBER",
            "ilog_string": "STAT: Aquantia PHY Number of Serdes Cals [F:0] (4.C820.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_SIF_BLOCK_LOCK_TRANSITIONS_1_0_NUMBER",
            "ilog_string": "STAT: Aquantia PHY Number of SIF Block Lock Transtitions 1 - 0 [7:0] (4.C821.F:8): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_SIF_BLOCK_LOCK_TRANSITIONS_0_1_NUMBER",
            "ilog_string": "STAT: Aquantia PHY Number of SIF Block Lock Transtitions 0 - 1 [7:0] (4.C821.7:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_SIF_XGS_SWITCH_OVERS_NUMBER",
            "ilog_string": "STAT: Aquantia PHY Number of SIF XGS Switch-overs [F:0] (4.C822.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_SIGNAL_LOSS_1",
            "ilog_string": "STAT: Aquantia PHY Loss of signal [3:0] (4.CC02.C): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_SIGNAL_LOSS_2",
            "ilog_string": "STAT: Aquantia PHY Loss of signal [3:0] (4.CC02.D): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_SIGNAL_LOSS_3",
            "ilog_string": "STAT: Aquantia PHY Loss of signal [3:0] (4.CC02.E): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_SIGNAL_LOSS_4",
            "ilog_string": "STAT: Aquantia PHY Loss of signal [3:0] (4.CC02.F): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_PARALLEL_DETECTION_FAULT",
            "ilog_string": "STAT: Aquantia AUTO-NEG Parallel Detection Fault (7.1.9): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_REMOTE_FAULT",
            "ilog_string": "STAT: Aquantia AUTO-NEG Remote Fault (7.1.4): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_LINK_STATUS",
            "ilog_string": "STAT: Aquantia AUTO-NEG Link Status (7.1.2): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_MASTER_SLAVE_CONFIG_FAULT",
            "ilog_string": "STAT: Aquantia AUTO-NEG MASTER-SLAVE Configuration Fault (7.21.F): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_LOCAL_RECEIVER_STATUS",
            "ilog_string": "STAT: Aquantia AUTO-NEG Local Receiver Status (7.21.D): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_REMOTE_RECEIVER_STATUS",
            "ilog_string": "STAT: Aquantia AUTO-NEG Remote Receiver Status (7.21.C): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_RESTARTS_HANDLED",
            "ilog_string": "STAT: Aquantia AUTO-NEG Autonegotiation Restarts Handled [F:0] (7.C813.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_LINK_PULSE_DETECTED_STATUS",
            "ilog_string": "STAT: Aquantia AUTO-NEG Link Pulse Detected Status (7.C812.F): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_AUTOMATIC_DOWNSHIFT",
            "ilog_string": "STAT: Aquantia AUTO-NEG Automatic Downshift (7.CC00.1): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_CONNECTION_STATE_CHANGE",
            "ilog_string": "STAT: Aquantia AUTO-NEG Connection State Change (7.CC00.0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_10G_DOWNSHIFT",
            "ilog_string": "STAT: Aquantia AUTO-NEG Downshift From 10G (7.E411.B): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_5G_DOWNSHIFT",
            "ilog_string": "STAT: Aquantia AUTO-NEG Downshift From 5G (7.E411.A): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_2G_DOWNSHIFT",
            "ilog_string": "STAT: Aquantia AUTO-NEG Downshift From 2.5G (7.E411.9): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_1G_DOWNSHIFT",
            "ilog_string": "STAT: Aquantia AUTO-NEG Downshift From 1G (7.E411.8): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_MAX_ADVERTISED_RATE",
            "ilog_string": "STAT: Aquantia AUTO-NEG Max Advertised Rate [3:0] (7.E411.7:4): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_PROTOCOL_ERROR",
            "ilog_string": "STAT: Aquantia AUTO-NEG Autonegotiation Protocol Error (7.EC01.D): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_FLP_IDLE_ERROR",
            "ilog_string": "STAT: Aquantia AUTO-NEG FLP Idle Error (7.EC01.C): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_HIGH_TEMP_FAILURE_STATE",
            "ilog_string": "STAT: Aquantia GLOBAL High Temperature Failure State (1E.C830.E): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_LOW_TEMP_FAILURE_STATE",
            "ilog_string": "STAT: Aquantia GLOBAL Low Temperature Failure State (1E.C830.D): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_HIGH_TEMP_WARNING_STATE",
            "ilog_string": "STAT: Aquantia GLOBAL High Temperature Warning State (1E.C830.C): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_LOW_TEMP_WARNING_STATE",
            "ilog_string": "STAT: Aquantia GLOBAL Low Temperature Warning State (1E.C830.B): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_MESSAGE",
            "ilog_string": "STAT: Aquantia GLOBAL Message [F:0] (1E.C850.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEMP_THRESHOLD",
            "ilog_string": "Aquantia temperature threshold: Warning %d C, Shutdown %d C.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AQUANTIA_TEMP_WARNING",
            "ilog_string": "STAT: Aquantia Temperature warning %d C\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_SET_TEMP_WARNING",
            "ilog_string": "Aquantia warning temperature set to %d C.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_SET_TEMP_SHUTDOWN",
            "ilog_string": "Aquantia shutdown temperature set to %d C.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_CONNECTION_STATE",
            "ilog_string": "STAT: Aquantia AUTO-NEG Connection State[4:0] (7.C810.D:9): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_ATTEMPTS_SINCE_RESET",
            "ilog_string": "STAT: Aquantia AUTO-NEG Attempts Since Reset (7.C814.F:0): %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PCS_LOOPBACK",
            "ilog_string": "Aquantia PCS loopback(3.0.E): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_10G_SPEED_SELECTION",
            "ilog_string": "Aquantia 10G Speed Selection(3.0.5:2): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TX_SCRAMBLER_DISABLE",
            "ilog_string": "Aquantia Tx Scrambler Disable(3.D800.F): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TX_INJECT_CRC_ERROR",
            "ilog_string": "Aquantia Tx Inject CRC Error(3.D800.E): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TX_INJECT_FRAME_ERROR",
            "ilog_string": "Aquantia Tx Inject Frame Error(3.D800.D): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_RX_ERROR_LDPC_FRAME_ENABLE",
            "ilog_string": "Aquantia Enable Rx LDPC Error Frame(3.E400.0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_RX_LDPC_DECODER_CONTROL",
            "ilog_string": "Aquantia Control Rx LDPC Decoder (3.E400.F): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_XS_LOOPBACK",
            "ilog_string": "Aquantia XS Loopback (4.0.E): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_RECEIVE_TEST_PATTERN_ENABLE",
            "ilog_string": "Enable Aquantia Receive Test Pattern (4.19.2): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_OPERATING_MODE",
            "ilog_string": "Aquantia Operating Phy Mode (4.C441.8:6): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_PATTERN_SELECT",
            "ilog_string": "Aquantia Select Test Pattern (4.19.1:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LOOPBACK_CONTROL",
            "ilog_string": "Aquantia XS Loopback Control (4.C444.F:B): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_MDI_PACKET_GENERATION",
            "ilog_string": "Aquantia XS MDI Packet Generation (4.C444.5): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_XS_SYSTEM_IF_PACKET_GENERATION",
            "ilog_string": "Aquantia XS I/F Packet Generation (4.C444.2): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_RATE",
            "ilog_string": "Aquantia XS Rate (4.C444.1:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_PATTERN_FORCE_ERROR",
            "ilog_string": "Aquantia Select Test Pattern Force Error (4.D800.F): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_PATTERN_MODE_7_FORCE_ERROR",
            "ilog_string": "Aquantia XS Test Pattern Mode 7 Force Error (4.D800.E): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_XAUI_RX_LOCAL_FAULT_INJECTION",
            "ilog_string": "Aquantia XAUI Rx Local Fault Injection (4.D800.D): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_PATTERN_EXTENDED_SELECT",
            "ilog_string": "Aquantia Test-Pattern Extended Select [1:0] (4.D800.C:B): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_PATTERN_CHECK_ENABLE",
            "ilog_string": "Aquantia Test Pattern Check Enable (4.D800.A): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_PATTERN_CHECK_POINT",
            "ilog_string": "Aquantia Test Pattern Check Point (4.D800.7): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_PATTERN_INSERT_EXTRA_IDLES",
            "ilog_string": "Aquantia Test Pattern Insert Extra Idles [2:0] (4.D801.E:C): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_PATTERN_CHECK_SELECT",
            "ilog_string": "Aquantia Test Pattern Check Select [3:0] (4.D801.B:8): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_PATTERN_CHANNEL_SELECT",
            "ilog_string": "Aquantia Test Pattern Channel Select [3:0] (4.D801.3:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_CHANNEL_0_TEST_PATTERN_ERROR_COUNTER",
            "ilog_string": "Aquantia Channel 0 Test Pattern Error Counter [F:0] (4.D810.F:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_CHANNEL_1_TEST_PATTERN_ERROR_COUNTER",
            "ilog_string": "Aquantia Channel 1 Test Pattern Error Counter [F:0] (4.D811.F:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_CHANNEL_2_TEST_PATTERN_ERROR_COUNTER",
            "ilog_string": "Aquantia Channel 2 Test Pattern Error Counter [F:0] (4.D812.F:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_CHANNEL_3_TEST_PATTERN_ERROR_COUNTER",
            "ilog_string": "Aquantia Channel 3 Test Pattern Error Counter [F:0] (4.D813.F:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_PATTERN_MODE_7_ERROR_COUNTER",
            "ilog_string": "Aquantia Test Pattern Mode 7 Error Counter [F:0] (4.D814.F:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_XAUI_TX_ERROR_INJECTION_LANE_SELECT",
            "ilog_string": "Aquantia XAUI Tx Error Injection Lane Select [2:0] (4.F800.F:D): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_XAUI_TX_INJECT_SYNCHRONIZATION_ERROR",
            "ilog_string": "Aquantia XAUI Tx Inject Synchronization Error (4.F800.C): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_XAUI_TX_INJECT_ALIGNMENT_ERROR",
            "ilog_string": "Aquantia XAUI Tx Inject Alignment Error (4.F800.B): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_XAUI_TX_INJECT_CODE_VIOLATION",
            "ilog_string": "Aquantia XAUI Tx Inject Code Violation (4.F800.A): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_XAUI_TX_10B_VIOLATION_CODEWORD",
            "ilog_string": "Aquantia XAUI Tx 10B Violation Codeword [9:0] (4.F800.9:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_XS_SYSTEM_LOOPBACK_PASS_THROUGH",
            "ilog_string": "Aquantia PHY XS System Loopback Pass Through (4.F802.F): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PHY_XS_SYSTEM_LOOPBACK_ENABLE",
            "ilog_string": "Aquantia PHY XS System Loopback Enable (4.F802.E): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_XAUI_TX_LOCAL_FAULT_INJECTION",
            "ilog_string": "Aquantia XAUI Tx Local Fault Injection (4.F802.D): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_RESTART_AUTONEGOTIATION",
            "ilog_string": "Aquantia Restart Autonegotiation (7.0.9): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_SERDES_START_UP_MODE",
            "ilog_string": "Aquantia SERDES Start-Up Mode [2:0] (7.C410.F:D): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEGOTIATION_TIMEOUT",
            "ilog_string": "Aquantia Autonegotiation Timeout [3:0] (7.C411.F:C): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEGOTIATION_TIMEOUT_MOD",
            "ilog_string": "Aquantia Autonegotiation Timeout Mod (7.C411.B): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LINK_PARTNER_1000_BASE_T_FULL_DUPLEX_ABILITY",
            "ilog_string": "Aquantia Link Partner 1000BASE-T Full Duplex Ability (7.E820.F): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LINK_PARTNER_1000_BASE_T_HALF_DUPLEX_ABILITY",
            "ilog_string": "Aquantia Link Partner 1000BASE-T Half Duplex Ability (7.E820.E): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LINK_PARTNER_SHORT_REACH",
            "ilog_string": "Aquantia Link Partner Short-Reach (7.E820.D): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LINK_PARTNER_AQ_RATE_DOWNSHIFT_CAPABILITY",
            "ilog_string": "Aquantia Link Partner AQRate Downshift Capability (7.E820.C): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LINK_PARTNER_5G",
            "ilog_string": "Aquantia Link Partner 5G (7.E820.B): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LINK_PARTNER_2G",
            "ilog_string": "Aquantia Link Partner 2.5G (7.E820.A): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LINK_PARTNER",
            "ilog_string": "Aquantia Link Partner (7.E820.2): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEGOTIATION_PROTOCOL_ERROR_STATE",
            "ilog_string": "Aquantia Autonegotiation Protocol Error State (7.E831.D): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_FLP_IDLE_ERROR_STATE",
            "ilog_string": "Aquantia FLP Idle Error State (7.E831.C): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_ENABLE_DIAGNOSTICS",
            "ilog_string": "Aquantia Enable Diagnostics (1E.C400.F): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_HIGH_TEMP_FAILURE_THRESHOLD",
            "ilog_string": "Aquantia High Temp Failure Threshold [F:0] (1E.C421): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LOW_TEMP_FAILURE_THRESHOLD",
            "ilog_string": "Aquantia Low Temp Failure Threshold [F:0] [F:0] (1E.C422): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_HIGH_TEMP_WARNING_THRESHOLD",
            "ilog_string": "Aquantia High Temp Warning Threshold [F:0] [1:0] (1E.C423): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LOW_TEMP_WARNING_THRESHOLD",
            "ilog_string": "Aquantia Low Temp Warning Threshold [F:0] (1E.C424): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_DIAGNOSTICS_SELECT",
            "ilog_string": "Aquantia Diagnostics Select (1E.C470.F): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_EXTENDED_MDI_DIAGNOSTICS_SELECT",
            "ilog_string": "Aquantia Extended MDI Diagnostics Select [1:0] (1E.C470.E:D): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_INITIATE_CABLE_DIAGNOSTICS",
            "ilog_string": "Aquantia Initiate Cable Diagnostics (1E.C470.4): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_ENABLE_VDD_POWER_SUPPLY_TUNING",
            "ilog_string": "Aquantia Enable VDD Power Supply Tuning (1E.C472.E): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TUNABLE_EXTERNAL_VDD_POWER_SUPPLY_PRESENT",
            "ilog_string": "Aquantia Tunable External VDD Power Supply Present (1E.C472.6): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_EXTERNAL_VDD_CHANGE_REQUEST",
            "ilog_string": "Aquantia External VDD Change Request [3:0] (1E.C472.5:2): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_ENABLE_5TH_CHANNEL_RFI_CANCELLATION",
            "ilog_string": "Aquantia Enable 5th Channel RFI Cancellation (1E.C472.0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_RATE_TRANSITION_REQUEST",
            "ilog_string": "Aquantia Rate Transition Request [2:0] (1E.C473.A:8): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TRAINING_SNR",
            "ilog_string": "Aquantia Training SNR [7:0] (1E.C473.7:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLB_LOOPBACK_CONTROL",
            "ilog_string": "Aquantia Loopback Control [4:0] (1E.C47A.F:B): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLB_MDI_PACKET_GENERATION",
            "ilog_string": "Aquantia MDI Packet Generation (1E.C47A.5): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLB_SYSTEM_IF_PACKET_GENERATION",
            "ilog_string": "Aquantia Global Provisioning System IF Packet Generation (1E.C47A.3): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_RESERVED_PROVISIONING_RATE",
            "ilog_string": "Aquantia Rate [2:0] (1E.C47A.2:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PAIR_A_STATUS",
            "ilog_string": "Aquantia Pair A Status [2:0] (1E.C800.E:C): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PAIR_B_STATUS",
            "ilog_string": "Aquantia Pair B Status [2:0] (1E.C800.A:8): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PAIR_C_STATUS",
            "ilog_string": "Aquantia Pair C Status [2:0] (1E.C800.6:4): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PAIR_D_STATUS",
            "ilog_string": "Aquantia Pair D Status [2:0] (1E.C800.2:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_STATUS_PAIR_A_REFLECTION_1",
            "ilog_string": "Aquantia Pair A Reflection #1 [7:0] (1E.C801.F:8): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_STATUS_PAIR_A_REFLECTION_2",
            "ilog_string": "Aquantia Pair A Reflection #2 [7:0] (1E.C801.7:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_IMPULSE_RESPONSE_MSW",
            "ilog_string": "Aquantia Impulse Response MSW [F:0] (1E.C802.F:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_STATUS_PAIR_B_REFLECTION_1",
            "ilog_string": "Aquantia Pair B Reflection #1 [7:0] (1E.C803.F:8): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_STATUS_PAIR_B_REFLECTION_2",
            "ilog_string": "Aquantia Pair B Reflection #2 [7:0] (1E.C803.7:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_IMPULSE_RESPONSE_LSW",
            "ilog_string": "Aquantia Impulse Response LSW [F:0] (1E.C804.F:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_STATUS_PAIR_C_REFLECTION_1",
            "ilog_string": "Aquantia Pair C Reflection #1 [7:0] (1E.C805.F:8): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_STATUS_PAIR_C_REFLECTION_2",
            "ilog_string": "Aquantia Pair C Reflection #2 [7:0] (1E.C805.7:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_STATUS_PAIR_D_REFLECTION_1",
            "ilog_string": "Aquantia Pair D Reflection #1 [7:0] (1E.C807.F:8): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_STATUS_PAIR_D_REFLECTION_2",
            "ilog_string": "Aquantia Pair D Reflection #2 [7:0] (1E.C807.7:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PROCESSOR_INTENSIVE_OPERATION_IN_PROGRESS",
            "ilog_string": "Aquantia Processor Intensive MDIO Operation InProgress (1E.C831.F): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_CABLE_LENGTH",
            "ilog_string": "Aquantia Cable Length [7:0] (1E.C884.7:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLB_LOOPBACK_STATUS",
            "ilog_string": "Aquantia Loopback Status [4:0] (1E.C888.F:B): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_MDI_PACKET_GENERATION_STATUS",
            "ilog_string": "Aquantia MDI Packet Generation Status (1E.C888.5): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLB_SYSTEM_IF_PACKET_GENERATION_STATUS",
            "ilog_string": "Aquantia System I/F Packet Generation Status (1E.C888.3): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GLOBAL_RESERVED_STATUS_RATE",
            "ilog_string": "Aquantia Rate [2:0] (1E.C888.2:0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_SHORT_REACH_MODE",
            "ilog_string": "Aquantia Short Reach Mode (1.83.0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_MODE_CONTROL",
            "ilog_string": "Aquantia Test Control Mode (1.84.F:D): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TRANSMITTER_TEST_FREQUENCIES",
            "ilog_string": "Aquantia Transmitter test frequencies (1.84.C:A): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_FAST_RETRAIN_ABILITY",
            "ilog_string": "Aquantia Fast Retrain Ability (1.93.4): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_FAST_RETRAIN_ENABLE",
            "ilog_string": "Aquantia Fast Retrain Enable (1.93.0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_TEST_MODE_RATE",
            "ilog_string": "Aquantia Test Mode rate[1:0] (1.C412.F:E): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_PMA_DIGITAL_SYSTEM_LOOPBACK",
            "ilog_string": "Aquantia Digital System Loopback (1.D800.F): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_EXTERNAL_PHY_LOOPBACK",
            "ilog_string": "Aquantia External Phy Loopback (1.E400.F): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_ENABLE_FAST_RETRAIN",
            "ilog_string": "Enable Aquantia Fast Retrain (1.E400.2): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_FORCE_MDI_CONFIGURATION",
            "ilog_string": "Aquantia Force Mdi Configuration (1.E400.1): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_MDI_CONFIGURATION",
            "ilog_string": "Aquantia Mdi Configuration(1.E400.0): 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_GENERAL_RW",
            "ilog_string": "Aquantia Read/Write Result for (%x.%x): 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AQUANTIA_ISR_NOT_GEN",
            "ilog_string": "MDIOD not Aquantia generated ISR\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_DBL_READ",
            "ilog_string": "MDIOD Aquantia DblRead reg1 0x%x, reg2 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AQUANTIA_READ_ASYNC_BITFIELD_NOT_FINISHED",
            "ilog_string": "Requested to do a asynchronous bit field read while other jobs pending\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_PHY_DISABLED",
            "ilog_string": "Aquantia PHY disabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_SETUP_STARTED",
            "ilog_string": "Aquantia PHY setup\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_INT_HIGH_TEMP_WARN",
            "ilog_string": "Aquantia PHY high temp warning!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_INT_HIGH_TEMP_FAIL",
            "ilog_string": "Aquantia PHY high temp failure, shutting down PHY!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_INIT_COMPLETED",
            "ilog_string": "Aquantia init completed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_JUNCTION_TEMP",
            "ilog_string": "Aquantia Stats Junction Temperature Read %d C\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_FIRMWARE_VER1",
            "ilog_string": "Aquantia Firmware Version: v%d.%x.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AQUANTIA_FIRMWARE_VER2",
            "ilog_string": "Aquantia Firmware Version: ID%d_VER%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AQUANTIA_DRIVER_STATE_TICK",
            "ilog_string": "Aquantia driver previous state = %d new state %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AQUANTIA_TX_LINK_UP",
            "ilog_string": "Aquantia TX Link Up checked\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_RXAUI_ALIGNED",
            "ilog_string": "Aquantia RXAUI is aligned\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_RX_LINK_UP",
            "ilog_string": "Aquantia RX Link Up checked\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_MONITOR_REG",
            "ilog_string": "Aquantia Monitor Reg link down triggered %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_LINK_TX_READY",
            "ilog_string": "Aquantia Tx Ready Check. Step: %d, Result: %x, Required: %x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AQUANTIA_STABILITY_CHECK",
            "ilog_string": "Aquantia Stability Check. Step: %d, Result: %x, Required: %x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AQUANTIA_LINK_STATUS",
            "ilog_string": "Aquantia CheckLinkStatus New status: 0x%x, raw Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AQUANTIA_INIT_READ",
            "ilog_string": "Aquantia Initialization Read Step: %d, Read: 0x%x, Required: 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AQUANTIA_INIT_WRITE",
            "ilog_string": "Aquantia Initialization Write Step: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_INIT_5G",
            "ilog_string": "Aquantia Set to 5G link speed Write Step: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_READ_REG_FAILED",
            "ilog_string": "Aquantia Read Register FAILED! Step: %d, Read: 0x%x, Required: 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "AQUANTIA_READ_CRC8_FAILED",
            "ilog_string": "Aquantia Read CRC 8 FAILED! Step: %d, Read: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AQUANTIA_GTX_ERROR_DETECTED",
            "ilog_string": "Aquantia - RXAUI GTx errors detected!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_POST_STABILITY_CHECK_DONE",
            "ilog_string": "Aquantia - Post stability checks done\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_AUTO_RESET_DETECTED",
            "ilog_string": "Aquantia auto-reset detected, restart link-up sequence\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_STOP_STATS_INPROGRESS",
            "ilog_string": "Aquantia stats stop already in progress!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_STOP_STAT_NULL_POINTER",
            "ilog_string": "Aquantia stop stats pointer invalid!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "AQUANTIA_NORMAL_OPERATION",
            "ilog_string": "Aquantia check normal operation, read value is 0x%x normal operation:%d (1:Normal, 0:Abnormal)\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "AQUANTIA_ERROR_STATE",
            "ilog_string": "Aquantia link connection rate error status : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AQUANTIA_AUTONEG_UNSUPP_SPEED",
            "ilog_string": "Aquantia linked at an unsupported speed\n",
            "ilog_num_args": 0
        }
    ],
    "MDIO_COMPONENT": [
        {
            "ilog_name": "MDIO_ICMD_WRITE",
            "ilog_string": "Writing to MDIO device %d, address 0x%x, with data 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_INDIRECT_ICMD_WRITE",
            "ilog_string": "Writing to MDIO device %d, devType %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MDIO_INDIRECT_ICMD_WRITE2",
            "ilog_string": "                address 0x%x, with data 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_ICMD_ARG",
            "ilog_string": "Invalid icmd arg 0x%x received\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "REG_FAILURE",
            "ilog_string": "Invalid register ID/Rev at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_PIN",
            "ilog_string": "Invalid Pin number %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SYNC_MDIO_READ_FIFO_NOT_EMPTY",
            "ilog_string": "Requested to do a synchronous MDIO read while other jobs pending\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SYNC_MDIO_WRITE_FIFO_NOT_EMPTY",
            "ilog_string": "Requested to do a synchronous MDIO write while other jobs pending\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIO_ICMD_READ_START",
            "ilog_string": "Reading MDIO device %d, address %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MDIO_INDIRECT_ICMD_READ_START",
            "ilog_string": "Reading MDIO device %d, devType %d, address %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_ICMD_READ_DONE",
            "ilog_string": "Read MDIO, returned data 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_FIFO_OVER_FLOW",
            "ilog_string": "MDIO fifo overflow\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIO_FIFO_UNDER_FLOW",
            "ilog_string": "MDIO fifo underflow\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIO_OPERATIONS",
            "ilog_string": "MDIO: %d operations in progress, current operation: header 0x%x, mdio op 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_NO_OPERATIONS",
            "ilog_string": "MDIO: no operations in progress\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TIME_MARKER_",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_MDIO_START",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing mdioStart\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_FINALIZE_OP",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing finalize operation\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_SUBMIT_OP",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing submit operation\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_INVALID_TASK_STATE",
            "ilog_string": "mdio/i2c: invalid state at line %d, header 0x%x, mdio op 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_IRQ_LOG",
            "ilog_string": "Interrupts 0x%x triggered\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_IRQ_UNSERVICED",
            "ilog_string": "Interrupts 0x%x were unserviced\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_GPIO7_LOG",
            "ilog_string": "Interrupt GPIO7 triggered\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IRQ_HANDLER_NOT_SET",
            "ilog_string": "Interrupt Handler is not set for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "REGISTERING_IRQ",
            "ilog_string": "Registering Interrrupt handler for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SERVICING_IRQ",
            "ilog_string": "Servicing Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DISABLING_IRQ",
            "ilog_string": "Disabling Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ENABLING_IRQ",
            "ilog_string": "Enabling Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_START_READ",
            "ilog_string": "MDIO start read: dev %d, addr/devtype 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MDIO_START_WRITE",
            "ilog_string": "MDIO start write: dev %d, addr/devtype 0x%x, data 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_START_ADDRESS",
            "ilog_string": "MDIO start address: dev %d, devtype 0x%x, addr 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_FINISH",
            "ilog_string": "MDIO finished, data is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_CONTROLREG_READ",
            "ilog_string": "MDIO Control Reg is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_OPERATIONS_QUEUED",
            "ilog_string": "MDIO: %d operations queued, nothing in progress\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_SYNC_READ_TIMEOUT",
            "ilog_string": "MDIO Sync Read timeout\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIO_SYNC_WRITE_TIMEOUT",
            "ilog_string": "MDIO Sync Write timeout\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIO_INDIRECT_SYNC_READ_ADDRESS_TIMEOUT",
            "ilog_string": "MDIO Indirect Sync Read address timeout\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIO_INDIRECT_SYNC_READ_DATA_TIMEOUT",
            "ilog_string": "MDIO Indirect Sync Read data timeout\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIO_INDIRECT_SYNC_WRITE_ADDRESS_TIMEOUT",
            "ilog_string": "MDIO Indirect Sync Write address timeout\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIO_INDIRECT_SYNC_WRITE_DATA_TIMEOUT",
            "ilog_string": "MDIO Indirect Sync Write data timeout\n",
            "ilog_num_args": 0
        }
    ],
    "XMODEM_COMPONENT": [
        {
            "ilog_name": "XMODEM_INTERRUPT_INIT",
            "ilog_string": "Initializing Xmodem for interrupt driven mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XMODEM_POLLED_INIT",
            "ilog_string": "Initializing Xmodem for polling mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PACKET_RECEIVED_BEFORE_READY",
            "ilog_string": "A packet was received, before xmodem library was ready to receive the packet\n",
            "ilog_num_args": 0
        }
    ],
    "MCA_COMPONENT": [
        {
            "ilog_name": "MCA_INVALID_CH_ASSERT",
            "ilog_string": "Channel %d not valid!\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CORE_NOT_READY",
            "ilog_string": "MCA core not ready, Rx =%d Tx = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_CORE_INTERRUPT",
            "ilog_string": "Core IRQ pending interrupt 0x%08x, raw interrupt state 0x%08x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_CHANNEL_INTERRUPT",
            "ilog_string": "Channel %d IRQ pending interrupt 0x%08x, raw interrupt state 0x%08x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MCA_ENABLE_CORE_UP",
            "ilog_string": "MCA Enable Core Up \n ",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MCA_ENABLE_TX",
            "ilog_string": "MCA Tx Enabled\n ",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MCA_DISABLE_TX",
            "ilog_string": "MCA Tx Disabled\n ",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MCA_ENABLE_RX",
            "ilog_string": "MCA Rx Enabled\n ",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MCA_DISABLE_RX",
            "ilog_string": "MCA Rx Disabled\n ",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MCA_CHANNEL_LINK_SETUP",
            "ilog_string": "MCA Channel link setup channel %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CHANNEL_LINK_NOT_ENABLED",
            "ilog_string": "MCA Channel Link Setup: Channel %d Not Enabled\n ",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CHANNEL_TX_RX_NOT_ENABLED",
            "ilog_string": "MCA Channel Tx Rx Setup: Channel %d Not Enabled\n ",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CHANNEL_DISABLE_NOT_ENABLED",
            "ilog_string": "MCA Channel Disable: Channel %d Not Enabled\n ",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_DISABLE_TIMEOUT",
            "ilog_string": "MCA CH[%d] Disable timeout, irq = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_UP_FAILED",
            "ilog_string": "MCA CH[%d] Up couldn't handled. status = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_DN_FAILED",
            "ilog_string": "MCA CH[%d] is down already. status = 0x%x, down processing = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MCA_CHANNEL_LINKUP",
            "ilog_string": "MCA Channel[%d] Link Up, Status: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_CHANNEL_LINKUP_REQ",
            "ilog_string": "MCA Channel[%d] Link Up Requested while Link Dn processing\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CHANNEL_LINKDN",
            "ilog_string": "MCA Channel[%d] Link Dn, Status: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_CHANNEL_LINKDN_REQ",
            "ilog_string": "MCA Channel[%d] Link Down Requested while Link Up processing\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CHANNEL_LINKDN_DONE",
            "ilog_string": "MCA Channel[%d] Link Down finished\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CHANNEL_RX_FIFO_FULL",
            "ilog_string": "MCA Channel[%d] Rx fifo full (Pending Irq: 0x%x). Disable this channel\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_CHANNEL_RX_GRD_MAX_ERR",
            "ilog_string": "MCA Channel[%d] Rx Grd Max Error (Pending Irq: 0x%x). Disable this channel\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_LINK_STAT_U0_TO_REC",
            "ilog_string": "STAT:MCA mca_channel[%d]->link->stats0->u0_to_rec = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_LINK_STAT_POL_FAIL",
            "ilog_string": "STAT:MCA mca_channel[%d]->link->stats0->pol_fail = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_LINK_STAT_TX_FRM",
            "ilog_string": "STAT:MCA mca_channel[%d]->link->stats0->tx_frm = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_LINK_STAT_TX_MCUP",
            "ilog_string": "STAT:MCA mca_channel[%d]->link->stats0->tx_mcup = 0%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_LINK_STAT_RX_FRM",
            "ilog_string": "STAT:MCA mca_channel[%d]->link->stats0->rx_frm = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_LINK_STAT_RX_MCUP",
            "ilog_string": "STAT:MCA mca_channel[%d]->link->stats0->rx_mcup = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_CMD_FIFO",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->cmd_fifo = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_DP_PFIFO",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->dp_pfifo = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_DP_NFIFO",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->dp_nfifo = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_DP_FIFO_RD_DRP_PKT",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->dp_fifo_rd_drp_pkt = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_DP_FIFO_WR_DRP_PKT",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->dp_fifo_wr_drp_pkt = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_DP_FIFO_WR_PKT_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->dp_fifo_wr_pkt_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_DP_FIFO_FIFO_FULL_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->dp_fifo_fifo_full_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_DP_FIFO_PKT_MAX_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->dp_fifo_pkt_max_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_DP_GRD_NO_SOP_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->dp_grd_no_sop_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_DP_GRD_NO_EOP_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->dp_grd_no_eop_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_TX_STAT_DP_GRD_MAX_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->tx->stats0->dp_grd_max_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_RX_STAT_DP_PFIFO",
            "ilog_string": "STAT:MCA mca_channel[%d]->rx->stats0->dp_pfifo = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_RX_STAT_DP_NFIFO",
            "ilog_string": "STAT:MCA mca_channel[%d]->rx->stats0->dp_nfifo = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_RX_STAT_DP_FIFO_RD_DRP_PKT",
            "ilog_string": "STAT:MCA mca_channel[%d]->rx->stats0->dp_fifo_rd_drp_pkt = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_RX_STAT_DP_FIFO_WR_DRP_PKT",
            "ilog_string": "STAT:MCA mca_channel[%d]->rx->stats0->dp_fifo_wr_drp_pkt = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_RX_STAT_DP_FIFO_WR_PKT_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->rx->stats0->dp_fifo_wr_pkt_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_RX_STAT_DP_FIFO_FIFO_FULL_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->rx->stats0->dp_fifo_fifo_full_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_RX_STAT_DP_FIFO_PKT_MAX_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->rx->stats0->dp_fifo_pkt_max_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_RX_STAT_DP_GRD_NO_SOP_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->rx->stats0->dp_grd_no_sop_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_RX_STAT_DP_GRD_NO_EOP_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->rx->stats0->dp_grd_no_eop_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_RX_STAT_DP_GRD_MAX_ERR",
            "ilog_string": "STAT:MCA mca_channel[%d]->rx->stats0->dp_grd_max_err = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MCA_CORE_TX_PFIFO",
            "ilog_string": "STAT:MCA mca_core->tx->stats0->pfifo = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CORE_TX_NFIFO",
            "ilog_string": "STAT:MCA mca_core->tx->stats0->nfifo = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CORE_TX_CMD_FIFO_DCOUNT",
            "ilog_string": "STAT:MCA mca_core->tx->stats0->cmd_fifo_dcount = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CORE_TX_LBAD",
            "ilog_string": "STAT:MCA mca_core->tx->stats0->lbad = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CORE_TX_LRTRY",
            "ilog_string": "STAT:MCA mca_core->tx->stats0->lrtry = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CORE_RX_CMD_FIFO_DCOUNT",
            "ilog_string": "STAT:MCA mca_core->rx->stats0->cmd_fifo_dcount = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CORE_RX_LBAD",
            "ilog_string": "STAT:MCA mca_core->rx->stats0->lbad = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CORE_RX_LRTRY",
            "ilog_string": "STAT:MCA mca_core->rx->stats0->lrtry = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CORE_RX_LCRD",
            "ilog_string": "STAT:MCA mca_core->rx->stats0->lcrd = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CORE_IRQ0_ENABLE",
            "ilog_string": "STAT:MCA mca_core->irq0->enable = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_INVALID_CHANNEL_INDEX",
            "ilog_string": " 0x%x INVALID CHANNEL INDEX TO MONITOR \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_RX_FIFO_FULL_ERROR",
            "ilog_string": "Channel Rx FIFO full ERROR ASSERT !!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MCA_GUARD_ERROR",
            "ilog_string": "Channel GUARD ERROR ASSERT !!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MCA_CORE_GUARD_ERROR",
            "ilog_string": "Core GUARD ERROR ASSERT !!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MCA_CHANNEL_0_LATENCY_VALUE",
            "ilog_string": "Channel 0 latency value = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MCA_CHANNEL_0_LATENCY_ERROR",
            "ilog_string": "Timed out waiting for MCA Channel 0 latency value to change from zero\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CORE_GUARD_ERROR",
            "ilog_string": "Core Guard Error! IRQ = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEBUG_ASSERT_BB",
            "ilog_string": "CAUSE AN ASSERT IN BB FOR DEBUGGING\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MCA_CHANNEL_NP_FIFO",
            "ilog_string": "MCA Channel[%d] dp_pfifo = %04d dp_nfifo = %04d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MCA_BANDWIDTH",
            "ilog_string": "MCA Channel[%d] Bandwidth = %04d\n",
            "ilog_num_args": 2
        }
    ],
    "CPU_COMM_COMPONENT": [
        {
            "ilog_name": "CPU_COMM_SENT_MSG",
            "ilog_string": "Tx CPU message seq %03d type:data %04x size:%02d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CPU_COMM_DROP_TX_MSG",
            "ilog_string": "Dropped CPU Tx message type:data %04x msg[0]:0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CPU_COMM_RECEIVED_MSG",
            "ilog_string": "Rx CPU message seq %03d type:data %04x size:%02d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CPU_COMM_LINK_UP",
            "ilog_string": "Comm channel received a link UP status event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CPU_COMM_LINK_DOWN",
            "ilog_string": "Comm channel received a link DOWN status event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CPU_COMM_EOP_TO_SOP",
            "ilog_string": "Time from EOP sent to SOP received in usec %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CPU_COMM_INVALID_MESSAGE_TYPE",
            "ilog_string": "Invalid message type: %d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CPU_COMM_INVALID_MESSAGE_SIZE",
            "ilog_string": "Message size too big: type %d size %d.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CPU_COMM_TX_SIZE_INVALID",
            "ilog_string": "TX message too big: type %d size %d.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CPU_COMM_TX_FIFO_NO_SPACE",
            "ilog_string": "Not enough space on TX FIFO for message: type %04x size %d space available %d.\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CPU_COMM_MSG_HANDLER_ALREADY_REGISTERED",
            "ilog_string": "The message handler for type %d has already been registered to the function at 0x%x.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CPU_COMM_RECEIVED_UNHANDLED_MSG",
            "ilog_string": "Received a message of type %d for which no handler is registered.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CPU_COMM_RECEIVED_MSG_TIMEOUT",
            "ilog_string": "Received a message of size %d which took too long to process.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CPU_COMM_RECEIVED_OVERSIZED_MSG",
            "ilog_string": "Received a message of size %d which is too large to be processed.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CPU_COMM_ICMD_RECEIVE_MSG",
            "ilog_string": "Received an icmd CPU message of size %d bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CPU_COMM_ICMD_FIFO_FULL",
            "ilog_string": "Icmd CPU message fifo full and drop the message, pushIndex = %d, msgLength = %d, popIndex = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CPU_COMM_ICMD_READ_MSG",
            "ilog_string": "Icmd read CPU message data valid = %d, word0 = 0x%x, word1 = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CPU_COMM_TX_RACE_DETECTED",
            "ilog_string": "Tx Race detected linkEnabled: %d, type: %d, msg[0]: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CPU_COMM_RX_RACE_DETECTED",
            "ilog_string": "Rx Race detected linkEnabled: %d, sequence num: %d, type: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CPU_COMM_PCK_END",
            "ilog_string": "Tx/Rx end writing/receiving packet: took %d us\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CPU_COMM_INALID_ACK",
            "ilog_string": "Ack not valid! seq = %d last seq = %d, data %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CPU_COMM_RESEND",
            "ilog_string": "resending Tx %d seq %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CPU_COMM_RESET",
            "ilog_string": "Request CPU Comm RX reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CPU_COMM_RX_RESET",
            "ilog_string": "Received Tx's Request CPU Comm RX reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CPU_COMM_RESET_ACK",
            "ilog_string": "Received Ack for CPU Comm RX reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CPU_COMM_FAIL",
            "ilog_string": "CPU comm failed. Request link-restart\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CPU_COMM_DROP_PACKET1",
            "ilog_string": "Dropped packet type %d. ReadLength(%d) and Packet size(%d) is different\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CPU_COMM_DROP_PACKET2",
            "ilog_string": "Dropped packet type %d, subType %d. Link is not ready\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CPU_COMM_DROP_PACKET3",
            "ilog_string": "dropped packet type %d seq %d nextRxSeq %d. Sequence mis-matching\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CPU_COMM_NP_SOP",
            "ilog_string": "No SOP, Can't read Comm channel\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CPU_COMM_MESSAGETYPE",
            "ilog_string": "COMM message type : %04x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CPU_COMM_RX_DEFAULT_HANDLER",
            "ilog_string": "Handler is not registered for this message type\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CPU_COMM_RX_TYPE_INVALID",
            "ilog_string": "Can't handle invalid comm msg type : 0%d\n",
            "ilog_num_args": 1
        }
    ],
    "TEST_COMPONENT": [
        {
            "ilog_name": "TEST_PRINT_STATUS",
            "ilog_string": "\nEnable status    :%d\nError State      :%d\nIsolated State   :%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TEST_SET_ERROR_STATE",
            "ilog_string": "Diagnostic component : %d with Error code : %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TEST_PRINT_TEST_STATUS",
            "ilog_string": "Test Status : %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TEST_FLASH_GOLDEN_PROTECT",
            "ilog_string": "Golden Protected %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TEST_DP_OC_READ",
            "ilog_string": "DP Over current status : %d\n",
            "ilog_num_args": 1
        }
    ],
    "CONFIG_COMPONENT": [
        {
            "ilog_name": "CONFIG_SAVE_VARIABLE",
            "ilog_string": "Config_ArbitrateSetVar Source = %d, variable = %d, data = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CONFIG_LOAD_VARIABLE",
            "ilog_string": "Config_ArbitrateGetVar Variable = %d, data = 0x%x, result = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_USB2_ON",
            "ilog_string": "*** USB 2 Enabled ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_USB2_OFF",
            "ilog_string": "*** USB 2 DISABLED ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_USB3_ON",
            "ilog_string": "*** USB 3 Enabled ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_USB3_OFF",
            "ilog_string": "*** USB 3 DISABLED ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_ISO_ON",
            "ilog_string": "*** USB 3 ISO ENABLED ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_ISO_OFF",
            "ilog_string": "*** USB 3 ISO Bypassed ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_ISO_CTRL_ON",
            "ilog_string": "*** USB 3 ISO Control Transfer ENABLED ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_ISO_CTRL_OFF",
            "ilog_string": "*** USB 3 ISO Control Transfer DISABLED ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_DP_ON",
            "ilog_string": "*** Display Port Enabled ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_DP_OFF",
            "ilog_string": "*** Display Port DISABLED ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_LANPORT_ON",
            "ilog_string": "*** Lan Port Enabled ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_LANPORT_OFF",
            "ilog_string": "*** Lan Port DISABLED ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_RS232_ON",
            "ilog_string": "*** RS232 Enabled ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NVM_CONFIG_STATUS_RS232_OFF",
            "ilog_string": "*** RS232 DISABLED ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CONFIG_LOAD_FAIL",
            "ilog_string": "Atmel Featurebits load fail. All features are disabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CONFIG_EVENT",
            "ilog_string": "Configuration Event [%d] Generated. \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CONFIG_FEATURE_CONTROL",
            "ilog_string": "FeatureControl USB:[%x] DP:[%x] MISC:[%x]\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CONFIG_FEATURE_ENABLE",
            "ilog_string": "FeatureEnable USB:[%x] DP:[%x] MISC:[%x]\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CONFIG_FEATURE_MASK",
            "ilog_string": "FeatureMask USB:[%x] DP:[%x] MISC:[%x]\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CONFIG_HW_NOT_SUPPORTED",
            "ilog_string": "HW doesn't support the SW features: [%x]\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CONFIG_GET_DATA_PTR_FAILED",
            "ilog_string": "Config_GetDataPointer: No pointer for the given variabled\n",
            "ilog_num_args": 0
        }
    ],
    "FLASH_DATA_COMPONENT": [
        {
            "ilog_name": "FLASH_STORAGE_INIT",
            "ilog_string": "Flash storage initialization - status %d active block %d used space = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "NO_BLOCK_TO_SWAP_TO",
            "ilog_string": "No erased block to swap to\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LOAD_VARIABLE_FROM_FLASH",
            "ilog_string": "load variable %d from FLASH, data end at: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FOUND_VARIABLE_FROM_FLASH",
            "ilog_string": "Found variable %d from FLASH, size = %d data = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "FOUND_VARIABLE_MORE_INFO",
            "ilog_string": "Variable at address 0x%08x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LOAD_VAR_INVALID_SIZE",
            "ilog_string": "Variable has wrong size: expected: %d actual %d key:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LOAD_VAR_INVALID_HEADER_ADDRESS",
            "ilog_string": "Variable has wrong header: address 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LOAD_VAR_INVALID_HEADER",
            "ilog_string": "Variable has wrong header: [0]: 0x%x [1] 0x%x data[0] 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "FLASH_ERASE_SIZE_WRONG",
            "ilog_string": "Erase region should be a multiple of 4, instead is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CLEAR_VAR_AREA",
            "ilog_string": "clear region should be a multiple of 4, instead is address % bytes 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLASH_GET_BLOCK_INFO",
            "ilog_string": "Block number %d address 0x%x status %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "FLASH_STORAGE_ERASE",
            "ilog_string": "Flash Vars successfully erased\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLASH_STORAGE_HEADER_ZEROED",
            "ilog_string": "*** Flash Vars zeroed header data found, from address %x, %d bytes\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FLASH_STORAGE_HEADER_ERASED",
            "ilog_string": "*** Flash Vars erased header data found, from address %x, %d bytes\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FLASH_STORAGE_HEADER_INVALID",
            "ilog_string": "*** Flash Vars invalid header data found, from address %x, %d bytes\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FLASH_ERASE_COMPLETE",
            "ilog_string": "Chip Erase Complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLASH_WRITE_BYTES",
            "ilog_string": "Offset%d %x %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "FLASH_DISPLAY_SECTOR_PROTECTED",
            "ilog_string": "Protected:   %x to %x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FLASH_DISPLAY_SECTOR_UNPROTECTED",
            "ilog_string": "Unprotected: %x to %x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FLASH_DEVICE_ID",
            "ilog_string": "Flash ID: %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLASH_WRITE_PROTECT_FAIL",
            "ilog_string": "Address %x protected\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLASH_GOLDEN_PROTECT",
            "ilog_string": "Golden Area Protect\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLASH_SECTORS_UNPROTECT",
            "ilog_string": "Flash unprotected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLASH_SECTOR_ERASED",
            "ilog_string": "Flash sector %x erased\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLASH_GOLDEN_PROTECT_PASS",
            "ilog_string": "Golden Protected %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLASH_GLOBAL_FREEZE",
            "ilog_string": "GLOBAL Freeze %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLASH_LOCK_BITS",
            "ilog_string": "Lock Bits %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLASH_WRITE_TIMEOUT",
            "ilog_string": "Flash write timeout at line :%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLASH_WRITE_BIG",
            "ilog_string": "Flash write too big number: %d\n",
            "ilog_num_args": 1
        }
    ],
    "RANDOM_COMPONENT": [
        {
            "ilog_name": "ADD_ENTROPY",
            "ilog_string": "Add random number 0x%.2x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GET_ASYNCRAND",
            "ilog_string": "Get random number asynchronously\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CANT_ADD_ANOTHER_CALLBACK",
            "ilog_string": "Can't add another callback\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GET_QUICK_PSEUDO_RANDOM",
            "ilog_string": "Got pseudo random number 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_SEED",
            "ilog_string": "Invalid seed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FAILED_TO_LOAD_SEED",
            "ilog_string": "Failed to load pseudorandom seed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FAILED_TO_SAVE_SEED",
            "ilog_string": "Failed to save pseudorandom seed\n",
            "ilog_num_args": 0
        }
    ],
    "XADC_COMPONENT": [
        {
            "ilog_name": "XADC_READ_TEMP",
            "ilog_string": "XADC Read Temp %d.%.2d C\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XADC_SET_TEMP_WARNING_2",
            "ilog_string": "FPGA warning temperature for -2 board set to %d C.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XADC_SET_TEMP_WARNING_3",
            "ilog_string": "FPGA warning temperature for -3 board set to %d C.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XADC_SET_TEMP_SHUTDOWN_2",
            "ilog_string": "FPGA shutdown temperature for -2 board set to %d C.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XADC_SET_TEMP_SHUTDOWN_3",
            "ilog_string": "FPGA shutdown temperature for -3 board set to %d C.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XADC_FPGA_THRESHOLD",
            "ilog_string": "FPGA temperature threshold: Warning %d C, Shutdown %d C.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XADC_READ_VCC_INT",
            "ilog_string": "XADC Read VCC INT %d.%.3d V\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XADC_READ_VCC_AUX",
            "ilog_string": "XADC Read VCC AUX %d.%.3d V\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XADC_READ_VCC_BRAM",
            "ilog_string": "XADC Read VCC BRAM %d.%.3d V\n",
            "ilog_num_args": 2
        }
    ],
    "STATS_MON_COMPONENT": [
        {
            "ilog_name": "STATS_MON_MAX_REGISTERED",
            "ilog_string": "Max number of stat groups registered for monitoring\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "STATS_MON_GROUP_REGISTERED",
            "ilog_string": "Stat group registered %d of %d, number of stats %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "STATS_MON_GROUP_STILL_PROCESSING",
            "ilog_string": "Stat group %d still being processed when interval expired\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "STATS_MON_GROUP_NOT_REGISTERED",
            "ilog_string": "Stats group not registered %08x!?\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "STATS_MON_GROUP_PRINT_STATS",
            "ilog_string": "****Printing non-zero statistics: ****\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "STATS_MON_PRINT_REG_VALUE",
            "ilog_string": "Reg address %08x value %x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "STATS_MON_NO_PARAM",
            "ilog_string": "Group has no parameters! \n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "STATS_MON_MULTIPLE_STAT",
            "ilog_string": "Multiple Stats are running at the same time: %d \n",
            "ilog_num_args": 1
        }
    ],
    "TIMING_COMPONENT": [
        {
            "ilog_name": "TIMING_MAXIMUM_HANDLERS_REGISTERED",
            "ilog_string": "The maximum number of timers are already registered %d callback 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TIMING_NUMBER_HANDLERS_REGISTERED",
            "ilog_string": "Timer registered,  %d of %d callback 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SHOW_TIMERS1",
            "ilog_string": "Timer 0x%x has callback 0x%x, and is set for %d ms\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "START_TIMER",
            "ilog_string": "Starting timer 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "STOP_TIMER",
            "ilog_string": "Stopping timer 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CHANGE_TIMEOUT",
            "ilog_string": "Changing timer 0x%x timeout to %d ms\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NULL_TIMER_ARG_LINE",
            "ilog_string": "Called with a NULL timer arg, at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIMING_INTERNAL_STATE",
            "ilog_string": "Internal state: lastIteration = %d, tickCounter = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SHOW_TIMERS3",
            "ilog_string": "         is enabled %d, is periodic %d, set to expire at tick %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UTIL_PROFILE_TIMING_TABLE_HEADER",
            "ilog_string": "TimerNo | Shortest (usec) | Longest (usec)\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UTIL_PROFILE_TIMING_TABLE_ENTRY",
            "ilog_string": "%7d | %15d | %d \n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UTIL_PROFILE_TIMING_INVALID_TIMER_START",
            "ilog_string": "Attempt to start invalid profile timer value: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UTIL_PROFILE_TIMING_INVALID_TIMER_STOP",
            "ilog_string": "Attempt to stop invalid profile timer value: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UTIL_PROFILE_TIMING_TABLE_LAST_HDR",
            "ilog_string": "Last %d entries: \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UTIL_PROFILE_TIMING_TABLE_LAST_LIST_ENTRY",
            "ilog_string": "%d \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UTIL_PROFILE_WATCHDOG_TIMEOUT",
            "ilog_string": " ** ** Watchdog Timeout! Time %d ms exceeded by %d us\n",
            "ilog_num_args": 2
        }
    ],
    "CALLBACK_COMPONENT": [
        {
            "ilog_name": "CALLBACK_INVALID_TYPE",
            "ilog_string": "Callback invalid type %d callback[index].type %d at line = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CALLBACK_INVALID_HANDLE",
            "ilog_string": "Callback invalid handle, tokens mismatched, at line = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CALLBACK_INVALID_REMOVE",
            "ilog_string": "Callback invalid remove at line = %d type %d index %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CALLBACK_FREE_LIST_EMPTY",
            "ilog_string": "Callback free stack is empty\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CALLBACK_SINGLE_RUN_CANCELED",
            "ilog_string": "New single run callback command canceled\n",
            "ilog_num_args": 0
        }
    ],
    "EVENT_COMPONENT": [
        {
            "ilog_name": "EVENT_INVALID_ACCESS",
            "ilog_string": "Event invalid access at line = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "EVENT_NULL_HANDLER",
            "ilog_string": "Event subscribe a null handler\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EVENT_HANDLER_MAX",
            "ilog_string": "Exceed max number of handlers\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EVENT_NULL_CHECK_FUNCTION",
            "ilog_string": "Event check event status function is null, event = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "EVENT_INVALID_DEQUEUE",
            "ilog_string": "Event invalid dequeue\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EVENT_INVALID_POP",
            "ilog_string": "Event invalid stack pop at line = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "EVENT_INVALID_PUSH",
            "ilog_string": "Event invalid stack push at line = %d\n",
            "ilog_num_args": 1
        }
    ],
    "MAIN_LOOP_COMPONENT": [
        {
            "ilog_name": "MAX_TIME",
            "ilog_string": "Max task time: %d us\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MAX_TIME_DETAIL",
            "ilog_string": "poll:%d, event and callback:%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "RESET_STAT",
            "ilog_string": "Reset Max task time\n",
            "ilog_num_args": 0
        }
    ],
    "MAC_COMPONENT": [
        {
            "ilog_name": "LL_TX_MAC_ENABLED",
            "ilog_string": "MAC Tx Enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LL_RX_MAC_ENABLED",
            "ilog_string": "MAC Rx Enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LL_TX_MAC_DISABLED",
            "ilog_string": "MAC Tx Disabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LL_RX_MAC_DISABLED",
            "ilog_string": "MAC Rx Disabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LL_TX_LINK_LAYER3_ENABLED",
            "ilog_string": "Link Layer 3 Tx Enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LL_RX_LINK_LAYER3_ENABLED",
            "ilog_string": "Link Layer 3 Rx Enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LL_TX_LINK_LAYER3_DISABLED",
            "ilog_string": "Link Layer 3 Tx Disabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LL_RX_LINK_LAYER3_DISABLED",
            "ilog_string": "Link Layer 3 Rx Disabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LL_RX_LINK_LAYER_IRQ",
            "ilog_string": "Link Layer Rx IRQ pending:%x link ok:%d remote fault:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LL_TX_MAC_STATS0_PAUSE_FRAME_COUNT",
            "ilog_string": "STAT:MAC link_layer_tx->mac->stats0->pause_frame: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_MAC_STATS0_FSM_BEYOND_PTP_COUNT",
            "ilog_string": "STAT:MAC link_layer_tx->mac->stats0->fsm_count_beyond_ptp: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_MAC_STATS0_FSM_ROLLOVER_COUNT",
            "ilog_string": "STAT:MAC link_layer_tx->mac->stats0->fsm_rollover: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_MEDIARS_PFIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR",
            "ilog_string": "STAT:MAC link_layer_tx->media_rs->pfifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_MEDIARS_PFIFO_WRENG_STATS0_FIFO_FULL_ERR",
            "ilog_string": "STAT:MAC link_layer_tx->media_rs->pfifo->write_engine->stats0->fifo_full_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_MEDIARS_PFIFO_WRENG_STATS0_PKT_ERR",
            "ilog_string": "STAT:MAC link_layer_tx->media_rs->pfifo->write_engine->stats0->pkt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_MEDIARS_PFIFO_WRENG_STATS0_PKT_SOP_ERR",
            "ilog_string": "STAT:MAC link_layer_tx->media_rs->pfifo->write_engine->stats0->pkt_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_MEDIARS_PFIFO_WRENG_STATS0_DRP_PKT_RD",
            "ilog_string": "STAT:MAC link_layer_tx->media_rs->pfifo->write_engine->stats0->drp_pkt_rd: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_MEDIARS_PFIFO_WRENG_STATS0_DRP_PKT_WR",
            "ilog_string": "STAT:MAC link_layer_tx->media_rs->pfifo->write_engine->stats0->drp_pkt_wr: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_MEDIARS_PFIFO_WRENG_STATS0_DRP_PKT",
            "ilog_string": "STAT:MAC link_layer_tx->media_rs->pfifo->read_engine->stats0->drp_pkt: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_PTP_GUARD_STATS0_SOP_ERROR",
            "ilog_string": "STAT:MAC link_layer_tx->ptp_guard->stats0->missing_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_PTP_GUARD_STATS0_EOP_ERROR",
            "ilog_string": "STAT:MAC link_layer_tx->ptp_guard->stats0->missing_eop_err:  %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_TX_PTP_GUARD_STATS0_MAX_CYCLE_ERROR",
            "ilog_string": "STAT:MAC link_layer_tx->ptp_guard->stats0->max_cycle_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MEDIARS_STATS1_XGMII_DATA_ERROR_COUNT",
            "ilog_string": "STAT:MAC link_layer_rx->media_rs->stats1->xgmii_data_error: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MEDIARS_STATS1_XGMII_MISSING_SFD_COUNT",
            "ilog_string": "STAT:MAC link_layer_rx->media_rs->stats1->xgmii_missing_sfd: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MEDIARS_STATS1_XGMII_WRONG_LANE_START_COUNT",
            "ilog_string": "STAT:MAC link_layer_rx->media_rs->stats1->xgmii_wrong_lane_start: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_STATS0_PAUSE_FRAME_COUNT",
            "ilog_string": "STAT:MAC link_layer_rx->mac->stats0->pause_frame: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_STATS0_OUT_FSM_ROLLOVER_COUNT",
            "ilog_string": "STAT:MAC link_layer_rx->mac->stats0->out_fsm_rollover: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_STATS0_IN_FSM_ROLLOVER_COUNT",
            "ilog_string": "STAT:MAC link_layer_rx->mac->stats0->in_fsm_rollover: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_STATS0_DBG_SEQ_NUM_IN_ERR",
            "ilog_string": "STAT:MAC link_layer_rx->mac->stats0->dbg_seq_num_in_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MCI_STATS0_FILTER_FIFO_OVERFLOW",
            "ilog_string": "STAT:MAC link_layer_rx->mac_client_interface->client_array->stats0->filter_fifo_overflow: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MCI_STATS0_ONE_CYCLE_PKT",
            "ilog_string": "STAT:MAC link_layer_rx->mac_client_interface->client_array->stats0->one_cycle_pkt: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MCI_STATS0_IN_FSM_ROLLOVER",
            "ilog_string": "STAT:MAC link_layer_rx->mac_client_interface->client_array->stats0->in_fsm_rollover: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_PFIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR",
            "ilog_string": "STAT:MAC link_layer_rx->mac->pfifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_PFIFO_WRENG_STATS0_FIFO_FULL_ERR",
            "ilog_string": "STAT:MAC link_layer_rx->mac->pfifo->write_engine->stats0->fifo_full_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_PFIFO_WRENG_STATS0_PKT_ERR",
            "ilog_string": "STAT:MAC link_layer_rx->mac->pfifo->write_engine->stats0->pkt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_PFIFO_WRENG_STATS0_PKT_SOP_ERR",
            "ilog_string": "STAT:MAC link_layer_rx->mac->pfifo->write_engine->stats0->pkt_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_PFIFO_WRENG_STATS0_DRP_PKT_RD",
            "ilog_string": "STAT:MAC link_layer_rx->mac->pfifo->write_engine->stats0->drp_pkt_rd: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_PFIFO_WRENG_STATS0_DRP_PKT_WR",
            "ilog_string": "STAT:MAC link_layer_rx->mac->pfifo->write_engine->stats0->drp_pkt_wr: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_MAC_PFIFO_RDENG_STATS0_DRP_PKT",
            "ilog_string": "STAT:MAC link_layer_rx->mac->pfifo->read_engine->stats0->drp_pkt: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_PTP_GUARD_STATS0_SOP_ERROR",
            "ilog_string": "STAT:MAC link_layer_rx->ptp_guard->stats0->missing_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_PTP_GUARD_STATS0_EOP_ERROR",
            "ilog_string": "STAT:MAC link_layer_rx->ptp_guard->stats0->missing_eop_err:  %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LL_RX_PTP_GUARD_STATS0_MAX_CYCLE_ERROR",
            "ilog_string": "STAT:MAC link_layer_rx->ptp_guard->stats0->max_cycle_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_TX_ETH_FRAMER_PFIFO_WRENG_STATS0_PKT_MAX_BYTE_CNT_ERR",
            "ilog_string": "STAT:MAC layer3_tx->eth_framer->pfifo->write_engine->stats0->pkt_max_byte_cnt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_TX_ETH_FRAMER_PFIFO_WRENG_STATS0_FIFO_FULL_ERR",
            "ilog_string": "STAT:MAC layer3_tx->eth_framer->pfifo->write_engine->stats0->fifo_full_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_TX_ETH_FRAMER_PFIFO_WRENG_STATS0_PKT_ERR",
            "ilog_string": "STAT:MAC layer3_tx->eth_framer->pfifo->write_engine->stats0->pkt_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_TX_ETH_FRAMER_PFIFO_WRENG_STATS0_PKT_SOP_ERR",
            "ilog_string": "STAT:MAC layer3_tx->eth_framer->pfifo->write_engine->stats0->pkt_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_TX_ETH_FRAMER_PFIFO_WRENG_STATS0_DRP_PKT_RD",
            "ilog_string": "STAT:MAC layer3_tx->eth_framer->pfifo->write_engine->stats0->drp_pkt_rd: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_TX_ETH_FRAMER_PFIFO_WRENG_STATS0_DRP_PKT_WR",
            "ilog_string": "STAT:MAC layer3_tx->eth_framer->pfifo->write_engine->stats0->drp_pkt_wr: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_TX_ETH_FRAMER_PFIFO_RDENG_STATS0_DRP_PKT",
            "ilog_string": "STAT:MAC layer3_tx->eth_framer->pfifo->read_engine->Stats0->drp_pkt: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_TX_ETH_FRAMER_PTP_GUARD_STATS0_SOP_ERROR",
            "ilog_string": "STAT:MAC layer3_tx->eth_framer->ptp_guard->stats0->missing_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_TX_ETH_FRAMER_PTP_GUARD_STATS0_EOP_ERROR",
            "ilog_string": "STAT:MAC layer3_tx->eth_framer->ptp_guard->stats0->missing_eop_err:  %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_TX_ETH_FRAMER_PTP_GUARD_STATS0_MAX_CYCLE_ERROR",
            "ilog_string": "STAT:MAC layer3_tx->eth_framer->ptp_guard->stats0->max_cycle_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_RX_ETH_DE_FRAMER_STATS0_NON_ETH_PKT",
            "ilog_string": "STAT:MAC layer3_rx->eth_de_framer->stats0->non_eth_pkt: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_RX_PTP_GUARD_STATS0_SOP_ERROR",
            "ilog_string": "STAT:MAC layer3_rx->ptp_guard->stats0->missing_sop_err: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_RX_PTP_GUARD_STATS0_EOP_ERROR",
            "ilog_string": "STAT:MAC layer3_rx->ptp_guard->stats0->missing_eop_err:  %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L3_RX_PTP_GUARD_STATS0_MAX_CYCLE_ERROR",
            "ilog_string": "STAT:MAC layer3_rx->ptp_guard->stats0->max_cycle_err: %d\n",
            "ilog_num_args": 1
        }
    ],
    "ICMD_COMPONENT": [
        {
            "ilog_name": "INVALID_HEADER",
            "ilog_string": "Received 0x%x, when expecting an icmd header\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_COMPONENT",
            "ilog_string": "Received %d, when expecting a component\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TOO_MANY_ARGS",
            "ilog_string": "Too many args %d in icmd request\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CUROFFSET_CORRUPTED",
            "ilog_string": "curOffset with value %d, is corrupt at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CALLING_HANDLER",
            "ilog_string": "Calling function 0x%x, with 1st two args 0x%x, 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "RECVD_ICMD",
            "ilog_string": "Received icmd for component %d, function %d, with %d arguments\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "NO_ICMD_FCN_PTR_ARRAY",
            "ilog_string": "No icmd function pointer array found for component %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ICMD_TIMEOUT",
            "ilog_string": "icmd message timed out. Resetting receive buffer\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BASE_READ_MEM",
            "ilog_string": "Read address 0x%x: value 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BASE_WRITE_MEM",
            "ilog_string": "Wrote address 0x%x: value 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DEPRECATED_ICMD_TIMER_REGISTER_FAILURE",
            "ilog_string": "Unable to register icmd timer\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_TIMER_NOT_REGISTERED",
            "ilog_string": "ICmd timer is not register, did no one call ICMD_Init()?\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BASE_READ_MODIFY_WRITE",
            "ilog_string": "Read-Modify-Write address 0x%x: Read value 0x%x, Write value 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BASE_READ_MODIFY_WRITE_CONFLICT_MASKS",
            "ilog_string": "Read-Modify-Write for address 0x%x has conflicting bits in set bitfields 0x%x and clear bitfields0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BASE_MODIFY_BITFIELD",
            "ilog_string": "Modify bitfield for address 0x%x starting at position %i for width %i bits\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MODIFY_BITFIELD_RESULT",
            "ilog_string": "Write value: 0x%x, Read value: 0x%x, New value 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DUMP_MEMORY_ADDR_INVALID",
            "ilog_string": "Address 0x%x is not a valid 32bit memory location\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEPRECATED_ICMD",
            "ilog_string": "This iCommand is no longer available\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BASE_READ_MEM16",
            "ilog_string": "Read address 0x%x: value 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BASE_WRITE_MEM16",
            "ilog_string": "Wrote address 0x%x: value 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BASE_READ_MODIFY_WRITE16",
            "ilog_string": "Read-Modify-Write address 0x%x: Read value 0x%x, Write value 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BASE_READ_MODIFY_WRITE_CONFLICT_MASKS16",
            "ilog_string": "Read-Modify-Write for address 0x%x has conflicting bits in set bitfields 0x%x and clear bitfields0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "JUNK_TIMER_EXPIRED_REENABLING_PROCESSING",
            "ilog_string": "Junk timer expired.  Re-enabling processing of icmds\n",
            "ilog_num_args": 0
        }
    ],
    "TOP_COMPONENT": [
        {
            "ilog_name": "BB_TOP_DRP_READ_INVALID_MASK",
            "ilog_string": "Tried to read from more than one DRP bus at a time: drpEnMask = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_BAD_MUTEX_TOKEN",
            "ilog_string": "Wrong IMutex token at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_DP_DRP_WRITE",
            "ilog_string": "Wrote DRP address 0x%x with drpEnMask = 0x%x and write data = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BB_TOP_DP_DRP_READ",
            "ilog_string": "Read DRP address 0x%x with drpEnMask = 0x%x: read data = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BB_TOP_DP_DRP_RMW1",
            "ilog_string": "RMWed DRP address 0x%x with drpEnMask = 0x%x, rmwMask = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BB_TOP_DP_DRP_RMW2",
            "ilog_string": " and write data = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_DP_INVALID_DRP_READ",
            "ilog_string": "Tried to read from more than one DRP bus at a time: drpEnMask = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_DP_INVALID_BANDWIDTH",
            "ilog_string": "Invalid bandwidth setting %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_DP_INVALID_LANE_COUNT",
            "ilog_string": "Invalid lane count setting %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_DP_TRANSCEIVER_CONFIG_VALUE_ERROR",
            "ilog_string": "DP transceiver value error: bad value = 0x%x at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_DP_INVALID_MMCM_OUTPUT_FREQ",
            "ilog_string": "Invalid MMCM output frequency: bw = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_DP_INVALID_MMCM_OUTPUT_ENCODING",
            "ilog_string": "Invalid MMCM output encoding: bw = %d, laneWidth = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_DP_GTX_RESET_TOO_SLOW",
            "ilog_string": "GTX took too long to come out of reset!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_DP_GTP_RESET_TOO_SLOW",
            "ilog_string": "GTP took too long to come out of reset! Waited for %d us\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_DP_SET_VOLTAGE_SWING",
            "ilog_string": "Writing txDiffCtrl with 0x%x -> 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_DP_SET_PREEMPHASIS",
            "ilog_string": "Writing txPostCursor with 0x%x -> 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_DP_PRECHARGE",
            "ilog_string": "Pre-charging main link with txInhibit = %d, laneCount = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_DP_INITIALIZING_DP_TRANSCEIVERS",
            "ilog_string": "Initializing DP transceivers: bw = %d, lc = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_DBGXX",
            "ilog_string": "### DBG 0x%x, 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_HOLD_GE_RESET",
            "ilog_string": "Placing GE in reset mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_GE_RUN",
            "ilog_string": "Placing GE in run mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_GE_BOOTLOADER",
            "ilog_string": "Placing GE in bootloader mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_GE_NULL_RUN_WATCHDOG_CALLBACK",
            "ilog_string": "GE Run Wathdog happen without Callback\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_GE_NULL_RESET_WATCHDOG_CALLBACK",
            "ilog_string": "GE Reset Wathdog happen without Callback\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_GE_RUN_AGAIN",
            "ilog_string": "Set GE Run mode again while it's alreay in Run mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_DRP_WRITE_WAIT_TIMEOUT",
            "ilog_string": "DRP Write wait for busses idle timeout\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_LINK_LOCK_WAIT_TIMEOUT",
            "ilog_string": "Link PLL lock wait timeout\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_GTP_OUT_OF_RESET",
            "ilog_string": "GTP is out of reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_DP_FRQ",
            "ilog_string": "DP Freq took %d us to measure count = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_DP_MMCM_LOCK",
            "ilog_string": "DP MMCM Lock done took %d us to lock\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_DP_FRQ_TIMEOUT",
            "ilog_string": "DP Freq measure time out\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_SSC_DETECTION",
            "ilog_string": "***** SSC Detection = %d *****\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_READ_ICAP",
            "ilog_string": "Read Reg = %x Val = %x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_WRITE_ICAP",
            "ilog_string": "Write Reg = %x Val = %x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BB_TOP_READ_USER_REG",
            "ilog_string": "User Reg = %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_WRITE_USER_REG",
            "ilog_string": "Write User Reg = %x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_FRQ_RUNNING",
            "ilog_string": " Frequency detection still running\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_TOP_DRP_WRITE_TIMER_OVER",
            "ilog_string": "DRP Set Timerover. drp_en_mask = 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_DRP_READ_TIME_OVER",
            "ilog_string": "DRP Read Timerover. Line at: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_DP_SOURCE_RST",
            "ilog_string": "DP Source Reset :%d (1:Apply reset, 0: Clear reset)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_DP_NO_SYMBOL_LOCK",
            "ilog_string": "No symbol lock. align status: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "BB_TOP_CORE_TYPE",
            "ilog_string": "The core type is -%d\n",
            "ilog_num_args": 1
        }
    ],
    "UTIL_COMPONENT": [
        {
            "ilog_name": "UTIL_IMUTEX_HELD_ACQUIRE",
            "ilog_string": "Attempted to acquire a held iMutex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UTIL_IMUTEX_UNHELD_RELEASE",
            "ilog_string": "Attempted to release an unheld iMutex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UTIL_IMUTEX_BAD_TOKEN",
            "ilog_string": "Attempted to release a held iMutex with an invalid token\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UTIL_IMUTEX_BAD_PARAM",
            "ilog_string": "Bad parameter passed to UTIL_IMutexWait; mutex = 0x%x, f = 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UTIL_IMUTEX_NO_FREE_CALLBACK_SLOTS",
            "ilog_string": "Ran out of callback slots! Mutex addr = 0x%x, function addr = 0x%x\n",
            "ilog_num_args": 2
        }
    ],
    "ILOG_COMPONENT": [
        {
            "ilog_name": "INVALID_COMPONENT",
            "ilog_string": "ILOG Received an invalid component %d from line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_LEVEL",
            "ilog_string": "ILOG Received an invalid logging level %d from line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOO_MANY_ARGS",
            "ilog_string": "ILOG Received too many args, %d to be exact\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GET_LEVEL",
            "ilog_string": "Component %d is at logging level %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "COPROC_REG_DUMP",
            "ilog_string": "Sparc reg dump:           TBR = 0x%x, PSR = 0x%x, WIM = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GLOBAL_REG_DUMP",
            "ilog_string": "Sparc reg dump:           %%g5 = 0x%x, %%g6 = 0x%x, %%g7 = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MISC_REG_DUMP",
            "ilog_string": "Sparc reg dump:           current window %d\n\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SEPERATOR_LOG",
            "ilog_string": "\n\n---------- Active windows follow ----------\n\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GEN_REG_DUMP0",
            "ilog_string": "Sparc reg dump for win %2d:%%l0 = 0x%x, %%l1 = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GEN_REG_DUMP1",
            "ilog_string": "Sparc reg dump:           %%l2 = 0x%x, %%l3 = 0x%x, %%l4 = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GEN_REG_DUMP2",
            "ilog_string": "Sparc reg dump:           %%l5 = 0x%x, %%l6 = 0x%x, %%l7 = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GEN_REG_DUMP3",
            "ilog_string": "Sparc reg dump for win %2d:%%i0 = 0x%x, %%i1 = 0x%x\n",
            "ilog_num_args": 5
        },
        {
            "ilog_name": "GEN_REG_DUMP4",
            "ilog_string": "Sparc reg dump:           %%i2 = 0x%x, %%i3 = 0x%x, %%i4 = 0x%x\n",
            "ilog_num_args": 6
        },
        {
            "ilog_name": "GEN_REG_DUMP5",
            "ilog_string": "Sparc reg dump:           %%i5 = 0x%x, %%i6 = 0x%x, %%i7 = 0x%x\n",
            "ilog_num_args": 6
        },
        {
            "ilog_name": "SET_BLOCKING_MODE",
            "ilog_string": "Setting ilog blocking mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CLEAR_BLOCKING_MODE",
            "ilog_string": "Clearing ilog blocking mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ILOG_SET_TIMESTAMP",
            "ilog_string": "Setting timestamp to value %d, offset needed %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TEST_ASSERT",
            "ilog_string": "Icmd run for testing asserts.  Args are %d, %d, %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LOG_LEVEL_CHANGED",
            "ilog_string": "Changing logging level for component %d to level %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_COMPONENT_ILOG_MAIN",
            "ilog_string": "ILOG main logging function received an invalid component %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_LEVEL_ILOG_MAIN",
            "ilog_string": "ILOG main logging function received an invalid logging level %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ILOG_MSG_DROPPED",
            "ilog_string": "ILOG message dropped\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ASSERT_STATUS1",
            "ilog_string": "Assert status: preAssertHookFunction is 0x%x, postAssertHookFunction is 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ASSERT_STATUS2",
            "ilog_string": "Assert status: no asserts have occured\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ASSERT_STATUS3",
            "ilog_string": "Assert status: %d asserts have occured, last assert message was:\n",
            "ilog_num_args": 1
        }
    ],
    "UART_COMPONENT": [
        {
            "ilog_name": "PACKETIZE_MAX_RESPONSE_HANDLERS_REGISTERED",
            "ilog_string": "The maximum number of response handlers are already registered\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PACKETIZE_MAX_CHANNEL_HANDLERS_REGISTERED",
            "ilog_string": "The maximum number of channel rx handlers are already registered\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PACKETIZE_RESPONSE_NOT_FREED",
            "ilog_string": "Could not free the given response ID %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PACKETIZE_RX_HANDLER_NOT_FOUND",
            "ilog_string": "Receive packet handler not found clientId=%d, uartPort=%d, responseID=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UART_ILLEGAL_PORT_GIVEN",
            "ilog_string": "The port given was not Blackbird or GE\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PACKETIZE_RX_HANDLER_FOUND",
            "ilog_string": "Receive packet handler is found uartPort=%d, clientId=%d, responseID=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "INVALID_CHANNEL_ID_GIVEN",
            "ilog_string": "Got an invalid channel id 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PACKETIZE_RX_MAX_HANDLERS",
            "ilog_string": "maxHandlers=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PACKETIZE_RX_FOUND",
            "ilog_string": "Receive packet handler found at line = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PACKETIZE_UART_FIFO_FULL",
            "ilog_string": "UART FIFO full for port %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UART_HIGH_SPEED",
            "ilog_string": "UART IsHighSpeed = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PKT_TIMEOUT_BB",
            "ilog_string": "#### Pkt Timeout BB port ^^^ RxPktState: %d, Offset: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PKT_TIMEOUT_GE",
            "ilog_string": "#### Pkt Timeout GE port ^^^ RxPktState: %d, Offset: %d, bytes Rx: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "PKT_IN_FIFO",
            "ilog_string": "#### Fifo[0x%x]: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PKT_TIMEOUT_FINISH",
            "ilog_string": "#### finished!!!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BB_OVERRUN",
            "ilog_string": "UART BB: HW overrun:%d, SW overrun:%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GE_OVERRUN",
            "ilog_string": "UART GE: HW overrun:%d, SW overrun:%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PACKETIZE_NO_RX_HANDLER",
            "ilog_string": "No RX Handler for PORT ID %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PACKETIZE_BUFFER_COPY_FAIL",
            "ilog_string": "Buffer copy failed: Port %d Size %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MAX_UART_RX_TIME",
            "ilog_string": "Max Rx Time %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "AVG_UART_RX_TIME",
            "ilog_string": "Average Rx Time %d\n",
            "ilog_num_args": 1
        }
    ],
    "CORE_COMPONENT": [
        {
            "ilog_name": "BB_UART_VERSION",
            "ilog_string": "BB UART Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "I2C_MASTER_VERSION",
            "ilog_string": "I2C MASTER Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "I2C_SLAVE_VERSION",
            "ilog_string": "I2C SLAVE Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_MASTER_VERSION",
            "ilog_string": "MDIO MASTER Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SPI_FLASH_VERSION",
            "ilog_string": "SPI FLASH Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GPIO_VERSION",
            "ilog_string": "GPIO Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LINK_LAYER_TX_VERSION",
            "ilog_string": "LINK LAYER TX Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LINK_LAYER_RX_VERSION",
            "ilog_string": "LINK LAYER RX Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LAYER3_TX_VERSION",
            "ilog_string": "LAYER3 TX Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LAYER3_RX_VERSION",
            "ilog_string": "LAYER3 RX Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MCA_VERSION",
            "ilog_string": "MCA Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_CORE_VERSION",
            "ilog_string": "ULP CORE Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ULP_PHY_VERSION",
            "ilog_string": "ULP PHY Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_SINK_MAIN_VERSION",
            "ilog_string": "DP SINK MAIN Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_SINK_HPD_VERSION",
            "ilog_string": "DP SINK HPD Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_SOURCE_MAIN_VERSION",
            "ilog_string": "DP SOURCE MAIN Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DP_SOURCE_HPD_VERSION",
            "ilog_string": "DP SOURCE HPD Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XMII_ADAPTER_VERSION",
            "ilog_string": "XMII ADAPTER Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GE_ADAPTER_VERSION",
            "ilog_string": "GE ADAPTER Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GE_UART_VERSION",
            "ilog_string": "GE UART Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "RS232_EXTENDER_VERSION",
            "ilog_string": "RS232 EXTENDER Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOP_VERSION",
            "ilog_string": "TOP Version: %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CORE_VERSION",
            "ilog_string": "CORE Version: %d.%d.%d\n",
            "ilog_num_args": 3
        }
    ]
}