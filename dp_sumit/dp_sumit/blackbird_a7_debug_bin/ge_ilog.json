{
    "TOPLEVEL_COMPONENT": [
        {
            "ilog_name": "SW_VERSION",
            "ilog_string": "----> ICRON Technologies Extreme USB Goldenears Project - Software version v%d.%d.%d <----\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CHIP_REV",
            "ilog_string": "Chip ID is Major 0x%x, Minor 0x%x, Debug 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "THIS_IS_LEX",
            "ilog_string": "This is the Lex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "THIS_IS_REX",
            "ilog_string": "This is the Rex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "USB_1_1_SPEED",
            "ilog_string": "Running at USB 1.1 speed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "USB_2_0_SPEED",
            "ilog_string": "Running at USB 2.0 speed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "KINTEX_PLATFORM",
            "ilog_string": "This is a Kintex Platform\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SPARTAN_PLATFORM",
            "ilog_string": "This is a Spartan Platform\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_INIT_COMPLETE",
            "ilog_string": "----> Link Initialization Complete <----\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "APP_INIT_COMPLETE",
            "ilog_string": "----> App Initialization Complete <----\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BUILD_DATE",
            "ilog_string": "SW build was done on %04d/%02d/%02d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BUILD_TIME",
            "ilog_string": "SW build was done at %02d:%02d:%02d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "RECEIVED_SOMETHING_ON_CPU_RXQ",
            "ilog_string": "Received control link sub type %d msg %d and data 0x%x on CPU RX Q\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UNEXPECTED_TRAP",
            "ilog_string": "Unexpected trap occured, PC was 0x%x, nPC was 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UNEXPECTED_TRAP_WITHOUT_WINDOWS",
            "ilog_string": "Unexpected trap occured without spare windows, last i7 is 0x%x, previous was 0x%x, previous to that was 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UNKNOWN_LINK_TYPE_MSG",
            "ilog_string": "Received a link message of unknown type %d.  Message value: %d.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GOT_MSG_FOR_LEXULM_OR_VHUB_ON_REX",
            "ilog_string": "Got msg %d for Lexulm or VHub on the Rex\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GOT_MSG_FOR_REXULM_ON_LEX",
            "ilog_string": "Got msg %d for Rexulm on the Lex\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CPU_RX_ERR",
            "ilog_string": "CPU RX Q err %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UNEXPECTED_Q_OPERATION_STATE",
            "ilog_string": "Unexpected queue operation state (%d)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ENTERED_CPU_RX_ISR",
            "ilog_string": "Entered the CPU RX ISR\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RUNNING_CPU_RX_TASK",
            "ilog_string": "Running the CPU RX task in state %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MAC_FAILED",
            "ilog_string": "MAC challenge failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MAC_PASSED",
            "ilog_string": "MAC challenge passed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MAC_HAS_INVALID_INDEX",
            "ilog_string": "MAC has invalid index %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_NETWORK_MODE",
            "ilog_string": "VHub without layer 2 networking is not a supported configuration\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DISABLING_SYS",
            "ilog_string": "Disabling System\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UART_BOOT_IN_GE_CORE",
            "ilog_string": "UART boot is not supported by GE core\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPLEVEL_DEVICE_IS_LEX",
            "ilog_string": "This device is a LEX\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPLEVEL_DEVICE_IS_REX",
            "ilog_string": "This device is a REX\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NO_CFG_VAR_EXISTS",
            "ilog_string": "NO CONFIGURATION VARIABLE EXISTS, USING A DEFAULT SETTING\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UNKNOWN_PLATFORM",
            "ilog_string": "Unknown platform %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SPARTAN_UON_VARIANT",
            "ilog_string": "Spartan UoN Variant\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SPARTAN_CORE2300_VARIANT",
            "ilog_string": "Spartan Core2300 Variant\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ASIC_PLATFORM",
            "ilog_string": "GE ASIC platform\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UNKNOWN_VARIANT",
            "ilog_string": "Unknown Variant %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_FAILURE",
            "ilog_string": "i2c failure at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PENDING_IRQ",
            "ilog_string": "Pending Leon Interrupts: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ENABLED_IRQ",
            "ilog_string": "Enabled Leon Interrupts: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEBUG_BUILD",
            "ilog_string": "This is a debug build\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UNSUPPORTED_VID",
            "ilog_string": "Unsupported variant ID %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VARIANT_ID",
            "ilog_string": "Variant ID is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "L2_ENABLED_BUT_NO_MAC_ADDR",
            "ilog_string": "Layer 2 framing is enabled but no MAC address is stored! Falling back to direct-link mode.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CYPRESS_HX3_PROGRAMMING_FAILURE",
            "ilog_string": "Failed while programming the Cypress HX3 hub firmware.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CYPRESS_HX3_PROGRAMMING_SUCCESS",
            "ilog_string": "Cypress HX3 hub firmware successfully programmed.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CYPRESS_HX3_NOT_FOUND",
            "ilog_string": "Cypress HX3 hub not found.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CYPRESS_HX3_RETRY",
            "ilog_string": "Cypress HX3 NAKed while receiving firmware at offset=%d.  Retry count=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "EEPROM_INSTALLED",
            "ilog_string": "EEPROM is installed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EEPROM_NOT_INSTALLED",
            "ilog_string": "EEPROM is not installed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ILLEGAL_LINK_TYPE_WITH_2053",
            "ilog_string": "It is not valid to use link type %d with the ITC2053 ASIC.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ECO1_FLAG_VALUE",
            "ilog_string": "ECO flag is %d (1 = ECO detected)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEBUG_ASSERT",
            "ilog_string": "CAUSE AN ASSERT IN GE FOR DEBUGGING\n %x, %x, %x",
            "ilog_num_args": 3
        }
    ],
    "GEBB_COMM_COMPONENT": [
        {
            "ilog_name": "GEBB_COMM_ERROR",
            "ilog_string": "Error: GE communication error with BB\n",
            "ilog_num_args": 0
        }
    ],
    "XMODEM_COMPONENT": [
        {
            "ilog_name": "XMODEM_INTERRUPT_INIT",
            "ilog_string": "Initializing Xmodem for interrupt driven mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XMODEM_POLLED_INIT",
            "ilog_string": "Initializing Xmodem for polling mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PACKET_RECEIVED_BEFORE_READY",
            "ilog_string": "A packet was received, before xmodem library was ready to receive the packet\n",
            "ilog_num_args": 0
        }
    ],
    "LINKMGR_COMPONENT": [
        {
            "ilog_name": "INVALID_MESSAGE",
            "ilog_string": "Invalid message %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG",
            "ilog_string": "PHY control reg 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE1",
            "ilog_string": "  PHY in reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE2",
            "ilog_string": "  PHY in loopback mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE3",
            "ilog_string": "  PHY auto-negotiate enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE4",
            "ilog_string": "  PHY auto-negotiate NOT enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE5",
            "ilog_string": "  PHY in power down mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE6",
            "ilog_string": "  PHY is electrically isolated from GMII\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE7",
            "ilog_string": "  PHY auto-negotiate restarting\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE8",
            "ilog_string": "  PHY auto-negotiate restart complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE9",
            "ilog_string": "  PHY full duplex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE10",
            "ilog_string": "  PHY half duplex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE11",
            "ilog_string": "  PHY collision test enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE12",
            "ilog_string": "  PHY speed selected 1000Mbps\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE13",
            "ilog_string": "  PHY speed selected 100Mbps\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_CONTROL_REG_DECODE14",
            "ilog_string": "  PHY speed selected 10Mbps\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG",
            "ilog_string": "PHY status reg 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE1",
            "ilog_string": "  PHY 100BASE-T4 capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE2",
            "ilog_string": "  PHY 100BASE-TX full duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE3",
            "ilog_string": "  PHY 100BASE-X half duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE4",
            "ilog_string": "  PHY 10BASE-T full duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE5",
            "ilog_string": "  PHY 10BASE-T half duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE6",
            "ilog_string": "  PHY 100BASE-T2 full duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE7",
            "ilog_string": "  PHY 100BASE-T2 half duplex capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE8",
            "ilog_string": "  PHY extended status information in reg 0x0F\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE9",
            "ilog_string": "  PHY auto-negotiation complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE10",
            "ilog_string": "  PHY remote fault detected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE11",
            "ilog_string": "  PHY auto-negotiate capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE12",
            "ilog_string": "  PHY auto-negotiate NOT capable\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE13",
            "ilog_string": "  PHY link up\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE14",
            "ilog_string": "  PHY link down\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE15",
            "ilog_string": "  PHY jabber condition detected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_DECODE_PHY_STATUS_REG_DECODE16",
            "ilog_string": "  PHY extended register capabilities\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PHY_MGR_UNEXPECTED_STATE",
            "ilog_string": "PhyMgr: unexpected state %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PHY_MGR_LINK_UP",
            "ilog_string": "PhyMgr: link up\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PHY_MGR_LINK_DOWN",
            "ilog_string": "PhyMgr: link down\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSB_VPORT_LINK_UP",
            "ilog_string": "XUSB Link up on vport %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB_VPORT_LINK_DOWN",
            "ilog_string": "XUSB Link down on vport %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XUSB_SET_STATE",
            "ilog_string": "XUSB Link Manager setting Vport %d to state %d at line %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "UNKNOWN_LINK_MODE",
            "ilog_string": "Link manager initialization received an unexpected link mode (%d)\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MESSAGE_HANDLER_UNDEFINED",
            "ilog_string": "The link manager's message handler is undefined\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINKMGR_RECEIVED_MSG",
            "ilog_string": "Received a message (%d) on vport %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LINKMGR_LEX_BROADCAST",
            "ilog_string": "Broadcasted an XUSB announcement message\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINKMGR_UNEXPECTED_LINK_MODE",
            "ilog_string": "Execution reached code not intended for this link mode (%d) at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LINKMGR_INITIALIZING",
            "ilog_string": "Link manager initializing with link mode = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINKMGR_PAIR_BUTTON_EVENT",
            "ilog_string": "Pairing button pressed: %d.  Button state at interrupt: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LINKMGR_REMOVE_ALL_LINKS",
            "ilog_string": "Removing all stored link pairings.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINKMGR_INVALID_VP_NEG_TIMEOUT",
            "ilog_string": "Reached the vport negotiation timeout in an unexpected state. linkState=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINKMGR_EXPECTING_NULL_CALLBACK",
            "ilog_string": "Found an existing callback when trying to set the callbacks to begin=0x%x, end=0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LINKMGR_ADD_PAIRING_CALLBACK_EXISTS",
            "ilog_string": "Found an existing callback 0x%x when trying to set the add pairing callback to 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LINKMGR_MLP_ACQUISITION_TIMEOUT",
            "ilog_string": "Timed out while trying to acquire an MLP link.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINKMGR_REX_VP_NEGOTIATION_TIMEOUT",
            "ilog_string": "Timed out while waiting to be assigned a vport.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINKMGR_PAIR_INCOMPATIBLE",
            "ilog_string": "The paired USB extender on vport %d is not compatible with this device.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINKMGR_CHECK_COMPATIBILITY_PAIR",
            "ilog_string": "Checking compatibility against pair with firmware version %d.%d.%d.\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LINKMGR_CHECK_COMPATIBILITY_LOCAL",
            "ilog_string": "The local firmware version is %d.%d.%d.\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ICMD_NOT_SUPPORTED_IN_THIS_BUILD",
            "ilog_string": "ICMD is not supported in this build\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LEX_INVALID_STATE",
            "ilog_string": "LEX state is invalid. Current LEX state is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINKMGR_CHECK_CONFIGURATION",
            "ilog_string": "Comparing configuration of LEX: 0x%x, with configuration of REX: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UNHANDLED_LINK_TYPE",
            "ilog_string": "Unhandled link type %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CRM_PLL_LOSS_OF_LOCK",
            "ilog_string": "CRM PLL loss of lock\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CTM_PLL_LOSS_OF_LOCK",
            "ilog_string": "CTM PLL loss of lock\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "USELESS_PHY_SETTING",
            "ilog_string": "Useless phy setting\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PHY_ID2",
            "ilog_string": "Phy ID 2 is 0x%.4x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PHY_ID3",
            "ilog_string": "Phy ID 3 is 0x%.4x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_STATE",
            "ilog_string": "PhyMgr is in state 0x%x, link type is %d, XUSB link manger is in state 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "INIT_LINK_TYPE",
            "ilog_string": "PhyMgr Initialization for link type %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINKMGR_MDIO_OPERATION_ALREADY_ACTIVE",
            "ilog_string": "Submitted an ethernet PHY MDIO operation, when one is active.  Submitted Callback=0x%x, Active Callback=0x%x, Line=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LINKMGR_INVALID_BUTTON_STATE",
            "ilog_string": "Invalid button state %d on line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LINKMGR_FOUND_PHY_AT_MDIO_ADDR",
            "ilog_string": "Found a PHY at MDIO address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINKMGR_NULL_COMPLETION_HANDLER",
            "ilog_string": "Null completion handler passed, line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEPRECATED_LINKMGR_DEBUGX",
            "ilog_string": "__#### DEBUG 0x%x ####__\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINKMGR_DEBUG_CLM_FLUSH_Q",
            "ilog_string": "Flushing CLM Queues\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINKMGR_VETOING_INCOMPATIBLE_VIDS",
            "ilog_string": "Vetoing connection due to incompatible variant IDs; LexVID = %d, RexVID = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LINKMGR_PHY_HAS_INVALID_IDENTIFIER",
            "ilog_string": "The ethernet PHY ID2=0x%x and PHY ID3=0x%x are invalid for the ITC2053.\n",
            "ilog_num_args": 2
        }
    ],
    "PLL_COMPONENT": [
        {
            "ilog_name": "TBI_125",
            "ilog_string": "TBI 125MHz\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GMII_125",
            "ilog_string": "GMII 125MHz\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MII_25",
            "ilog_string": "MII 25MHz\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RGMII_25",
            "ilog_string": "RGMII 25MHz\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RGMII_125",
            "ilog_string": "RGMII 125MHz\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NO_IRQ_HANDLER",
            "ilog_string": "No IRQ handler at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RMII_50",
            "ilog_string": "RMII 50MHz\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CLEI_LOG",
            "ilog_string": "CLEI\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NO_LOCK_AT_LINE",
            "ilog_string": "Unable to lock PLL %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "EXTERNAL_CLK_ENABLED",
            "ilog_string": "External clock enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UNHANDLED_CLK_RANGE",
            "ilog_string": "Unhandled ASIC clock range %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CLEI_UNSUPPORTED_ON_KINTEX",
            "ilog_string": "The CLEI link type is unsupported on the Kintex platform\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RGMII25_UNSUPPORTED_ON_KINTEX",
            "ilog_string": "The RGMII25 link type is unsupported on the Kintex platform\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CLEI_CTM_INPUT_CLK",
            "ilog_string": "The CLEI operating clock is %d\n",
            "ilog_num_args": 1
        }
    ],
    "SYS_CTRL_Q_COMPONENT": [
        {
            "ilog_name": "INIT",
            "ilog_string": "System Control Queue initialiation\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "READ_Q_FRAME_ERR",
            "ilog_string": "Got read Q frame error %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SYS_CTRL_Q_ADDR_NOT_IN_SYS",
            "ilog_string": "Received packet for usb address %d, which isn't in sys\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NOT_XUSB_UPSTREAM_OR_DOWNSTREAM_PACKET",
            "ilog_string": "Received packet that is not a XUSB upstream or downstream packet\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ISR_GOT_DOWNSTREAM_PACKET",
            "ilog_string": "Received a downstream packet for usb address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ISR_GOT_UPSTREAM_PACKET",
            "ilog_string": "Received a upstream packet for usb address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CLEAR_BCO",
            "ilog_string": "Clearing BCO for USB address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VF_CTRL_OUT_PACKET_FCN",
            "ilog_string": "Recevied a VF Ctrl Out Packet, calling function 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VF_CTRL_IN_ACK_PACKET_FCN",
            "ilog_string": "Recevied a VF Ctrl In Ack Packet, calling function 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_SETUP_PACKET",
            "ilog_string": "Got invalid setup packet size %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "HANDLE_DESC_REQ",
            "ilog_string": "HandleDescReq:Got Desc request, USB address %d, length %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "HANDLE_CLR_FTR_PORT",
            "ilog_string": "HandleClearFeaturePort: Port %d on usbA %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SYS_CTRLQ_TEST_MODE_NOT_ROOT_DEV",
            "ilog_string": "CtrlQ test mode is not for the root dev, usb %d, logical %d, test %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SYS_CTRLQ_TEST_MODE_INVALID_TEST",
            "ilog_string": "CtrlQ test mode is invalid, usb %d, logical %d, test %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SYS_CTRLQ_TEST_MODE_TEST",
            "ilog_string": "CtrlQ test mode, usb %d, logical %d, test %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SETUP_NOT_EP_ZERO",
            "ilog_string": "Received setup packet for non-zero endpoint for usb %d, logical %d, ep %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DOWNSTREAM_PACKET_IS_IN_AND_NOT_VF",
            "ilog_string": "Downstream packet is an IN packet, this isn't a Virtual Function\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VF_CTRL_OUT_PACKET_NO_FCN",
            "ilog_string": "Recevied a VF Ctrl Out Packet, but no handler exists\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VF_CTRL_IN_ACK_PACKET_NO_FCN",
            "ilog_string": "Recevied a VF Ctrl In Ack Packet, but no handler exists\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VF_CTRL_IN_PACKET_NO_FCN",
            "ilog_string": "Recevied a VF Ctrl In Packet, but no handler exists\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VF_PING_PACKET",
            "ilog_string": "Recevied a VF Ping Packet for ep %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VF_SETUP_BUT_NO_SETUP",
            "ilog_string": "Received a VF Setup Packet, but there is no VF->Setup, on USB=%d, LA=%d, InSys=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VF_SETUP_PACKET",
            "ilog_string": "Recevied a VF Setup Packet, calling function 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPSTREAM_PACKET_RECEIVED",
            "ilog_string": "Received an upstream packet for USB address %d, action %d, responseId %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GOT_NONACK_UPSTREAM_PKT_FOR_VF",
            "ilog_string": "Got a NON_TERRY_HACK_ACK upstream packet for a Virtual Function??? Logical address %d, USB address %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UPSTREAM_PKT_NOT_USB_IN",
            "ilog_string": "The upstream packet is not a USB IN packet, instead got action %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_XUSB_UPSTREAM_RESPONSE",
            "ilog_string": "Invalid upstream response %d received\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DATA0_BUT_NOT_EXPECTING_GET_DESC_DATA0",
            "ilog_string": "Got Data0, but not expecting GetDescData0, instead expecting %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DATA1_BUT_UNHANDLED_BCI_TRANSACTION",
            "ilog_string": "Got Data1, but unhandled BCI transaction %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DATA1_BUT_UNHANDLED_BCO_TRANSACTION",
            "ilog_string": "Got Data1, but unhandled BCO transaction %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DATA1_BUT_NOT_EXPECTING_PACKET",
            "ilog_string": "Got Data1, but not expecting a packet\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VF_SET_ADDR_HANDLER_IN_PACKET",
            "ilog_string": "Got a Set address in request, sending a zero length packet\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GOT_SET_CFG_IN_PACKET",
            "ilog_string": "Got a Set Cfg IN packet\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GOT_SET_INTF_IN_PACKET",
            "ilog_string": "Got a Set Intf IN packet\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GOT_CLEAR_PORT_FEATURE_ENABLE_IN_PACKET",
            "ilog_string": "Got a Clear Port Feature Enable In Packet\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GOT_SET_PORT_FEATURE_RESET_IN_PACKET",
            "ilog_string": "Got a Set Port Feature Reset In Packet\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TEST_MODE_HANDLING_INVALID",
            "ilog_string": "While handling the Test mode packets, got an invalid test mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GET_EXPECTED_UPSTREAM_PACKET",
            "ilog_string": "Get the expected upstream packet for USB address %d, expected packet type %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SET_EXPECTED_UPSTREAM_PACKET",
            "ilog_string": "Set the expected upstream packet for USB address %d, expected packet type %d, previous setting was %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VF_SET_ADDR_PACKET",
            "ilog_string": "Recevied a VF Set Address Packet, NEW: Logical address %d, USB address %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "VF_IN_PACKET_EP",
            "ilog_string": "Recevied a VF Ctrl In Packet, calling function 0x%x, for ep: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SET_ADDRESS_DEV_MGR_FAILED_FOR_VF",
            "ilog_string": "Set address to USB %d, logical %d failed when processing dev manager for a virtual function\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "RECEIVED_STALL",
            "ilog_string": "Received stall for USB address %d, transaction type %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GOT_SET_CLR_TT_BUFFER_IN_PACKET",
            "ilog_string": "Got a Clear TT Buffer In Packet\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_EP_ACK_FOR_VF",
            "ilog_string": "At address logical %d, usb %d, Invalid virtual function endpoint %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ICMD_NOT_IN_SYS",
            "ilog_string": "icommand: usb address %d is not in-sys\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEV_X_EXPECTING_PACKET_Y",
            "ilog_string": "Usb Address %d is expecting packet %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "THIS_IS_THE_REX",
            "ilog_string": "This is the rex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RE_USE_USB_ZERO",
            "ilog_string": "Resetting USB due to re-use of USB address 0.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "STARTING_TEST",
            "ilog_string": "Starting test\n",
            "ilog_num_args": 0
        }
    ],
    "DEVMGR_COMPONENT": [
        {
            "ilog_name": "REX_HUB_PORT_STATUS_HANDLER",
            "ilog_string": "RexHubPortStatusHandler: LA=%d port=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REX_HUB_PORT_STATUS_HANDLER_PORT_EN_LS",
            "ilog_string": "RexHubPortStatusHandler: Port%d enabled LA%d, speed=LS\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REX_HUB_PORT_STATUS_HANDLER_PORT_EN_HS",
            "ilog_string": "RexHubPortStatusHandler: Port%d enabled LA%d, speed=HS\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REX_HUB_PORT_STATUS_HANDLER_PORT_EN_FS",
            "ilog_string": "RexHubPortStatusHandler: Port%d enabled LA%d, speed=FS\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PORT_RESET_HUB_DETAILS",
            "ilog_string": "Reset port%d on Hub LA%d, USB Addr %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SET_ADDR_ADD_DEV",
            "ilog_string": "Set Address: new USB Address %d, LA %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SET_ADDR_RESPONSE",
            "ilog_string": "Got set address response\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CLR_FEATURE_DISABLE_PORT",
            "ilog_string": "Disabling port %d on parent logical address %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PORT_RESET_FAILED",
            "ilog_string": "DEVMGR_ProcessPortReset: reset failed on port %d, on hub logical addr %d, usb addr %d\n",
            "ilog_num_args": 3
        }
    ],
    "DESCPARSER_COMPONENT": [
        {
            "ilog_name": "INIT_PARSE_RESPONSE_PACKET",
            "ilog_string": "ParsePktInit(%d, %d)\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PARSE_PACKET",
            "ilog_string": "ParsePkt(%d, %d, %2x)\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "PARSE_PACKET_IGNORED_BYTE",
            "ilog_string": "ParsePkt(%d) Ignoring %2x at %d)\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "PARSE_DEV_DESC",
            "ilog_string": "ParsePktDescriptor\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PARSE_CFG_DESC",
            "ilog_string": "ParsePktConfiguration\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PARSE_CFG_DESC_LENGTHS",
            "ilog_string": "ParsePktConfiguration(%d, %d)\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PARSE_INTF_DESC",
            "ilog_string": "ParsePktInterface\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PARSE_EP_DESC",
            "ilog_string": "ParsePktEndpoint\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PARSE_EP_DESC_UPDATING",
            "ilog_string": "ParsePktEndpoint: Updating Endpoint\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PARSE_UNKNOWN_DESC",
            "ilog_string": "ParsePktUnknown\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PARSE_UNKOWN_DESC_TYPE",
            "ilog_string": "ParsePktUnknown: type is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PROCESS_PACKET_DONE_BYTES",
            "ilog_string": "ProcPkt: end of function: now processed %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SHORT_PACKET",
            "ilog_string": "ProcPkt: Short packet received\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ALL_DATA_SENT",
            "ilog_string": "ProcPkt: Send back all requested data to end of frame\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EOF_MORE_DATA_EXPECTED",
            "ilog_string": "ProcPkt: End of Frame: more data expected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EXTRA_DATA",
            "ilog_string": "ProcPkt: Device%d sent back more data(%d) than requested(%d)\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MASS_STORAGE_BULK_ONLY_INTF_FOUND",
            "ilog_string": "Found a mass storage bulk only intf on usb logical address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_REJ_EP_SAME_DIR",
            "ilog_string": "MSA rejected as the 2 endpoints are the same direction, logical %d ep1 %d, ep2 %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_GOOD_TO_GO",
            "ilog_string": "MSA Good to go, on logical %d, with endpoints %d IN and %d OUT\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_PARSING_ENABLED",
            "ilog_string": "MSA parsing enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_PARSING_DISABLED",
            "ilog_string": "MSA parsing disabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_NO_WORK_ON_REX",
            "ilog_string": "This icmd is only for a Lex, this is a Rex\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "USB_VERSION",
            "ilog_string": "USB Version is %d.%d.%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "PACKET_INFO",
            "ilog_string": "Sending packet to parser. Size of frame is %d. Data parsed so far is %d. Expected transfer size is %d\n",
            "ilog_num_args": 3
        }
    ],
    "LEXULM_COMPONENT": [
        {
            "ilog_name": "ULM_INTERRUPTS_LOG",
            "ilog_string": "i=0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULM_CONNECT_LOG",
            "ilog_string": "iCONNECT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_DISCONNECT_LOG",
            "ilog_string": "iDISCONNECT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_SUSPEND_LOG",
            "ilog_string": "iSUSPENDDETECT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_HOST_RESUME_LOG",
            "ilog_string": "iHOSTRESUMESTART\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_BUS_RESET_LOG",
            "ilog_string": "iBUSRESETDETECTED\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_NEG_DONE_LOG",
            "ilog_string": "iNEGDONE\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_BUS_RESET_DONE_LOG",
            "ilog_string": "iBUSRESETDONE\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_RESPONSE_TIMEOUT_LOG",
            "ilog_string": "iRESPONSETIMEOUT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LEX_USB_PORT_CONNECT_LOG",
            "ilog_string": "rootDev connected:%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LEX_DEVICE_DISCONNECT_LOG",
            "ilog_string": "got a device disconnect event\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LEX_REMOTE_WAKEUP_LOG",
            "ilog_string": "got remote wakeup\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LEX_UNKNOWN_EVENT_LOG",
            "ilog_string": "unknown event:%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_SPEED",
            "ilog_string": "Invalid speed %d detected\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FORCE_LINK_DOWN",
            "ilog_string": "Bringing the USB link down\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "REX_IRQ_ULM_SUSPEND_DONE",
            "ilog_string": "Got a Rex only interrupt, ULM Suspend Done\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "REX_IRQ_ULM_REMOTE_WAKEUP",
            "ilog_string": "Got a Rex only interrupt, remote wakeup\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BIT_STUFF_ERR",
            "ilog_string": "Got a ULM bitstuff error\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LONG_PACKET_ERR",
            "ilog_string": "Got a ULM long packet error\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_RESUME_DONE",
            "ilog_string": "Resume done\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_NEG_HS",
            "ilog_string": "ULM negotiated high speed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_NEG_FS",
            "ilog_string": "ULM negotiated full speed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_NEG_LS",
            "ilog_string": "ULM negotiated low speed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TIME_MARKER_IRQ",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing USB Interrupt\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_MSG",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing Rex Message\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_LINK_DOWN",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing CLM Link Down\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_FORCE_LINK_DOWN",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing Force Link Down\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RESUME_AND_SUSPEND",
            "ilog_string": "Resume and suspend interrupts received together.  Host did not accept the device resume request.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TIME_MARKER_LINK_UP",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing CLM Link Up\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "USB3_NO_SS_CONNECT",
            "ilog_string": "USB3 No SuperSpeed connect\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "USB3_SS_CONNECT",
            "ilog_string": "USB3 SuperSpeed connect\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CLM_LINK_UP",
            "ilog_string": "CLM link up\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CLM_LINK_DOWN",
            "ilog_string": "CLM link down\n",
            "ilog_num_args": 0
        }
    ],
    "VHUB_COMPONENT": [
        {
            "ilog_name": "HOST_SUSPEND",
            "ilog_string": "Message from host: Going into suspend\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "HOST_RESUME",
            "ilog_string": "Message from host: Going to resume \n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "HOST_CONNECT_HS",
            "ilog_string": "Host Connected at high speed!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "HOST_CONNECT_FS",
            "ilog_string": "Host Connected at full speed!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "HOST_DISCONNECT_MSG",
            "ilog_string": "Host Disconnected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "HOST_OTHER",
            "ilog_string": "Invalid message from host: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_DEVICE_CONNECT",
            "ilog_string": "Device Connection request on vPort %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_DEVICE_DISCONNECT",
            "ilog_string": "Device Disconnection request on vPort %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_DEVICE_WAKEUP",
            "ilog_string": "Device Remote Wakeup request on vPort %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_CONNECT_DEV",
            "ilog_string": "Device Connected on Port %d, speed %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "VHUB_DISCONNECT_DEV",
            "ilog_string": "Device Disconnected on Port %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_SUSPEND_DEV",
            "ilog_string": "Port %d Suspended\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_RESUME_DEV",
            "ilog_string": "Port %d Resumed\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_SETUP_HANDLER",
            "ilog_string": "Received setup packet bRequestType 0x%x, bRequest 0x%x, wValue 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VHUB_SETUP_STALL",
            "ilog_string": "Going to stall setup packet bRequestType 0x%x, bRequest 0x%x, wValue 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VHUB_IN_DESC_HANDLER",
            "ilog_string": "Received in desc. Sending %d bytes from mem address 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "VHUB_OUT_HANDLER",
            "ilog_string": "Received out packet for ep %d, with PID 0x%x, %d data bytes\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VHUB_IN_ACK_DESC_HANDLER",
            "ilog_string": "Descriptor handler got an Ack!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_INT_IN_REQUEST",
            "ilog_string": "IN request on INTERRUPT endpoint\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_INT_IN_REQUEST_SERV",
            "ilog_string": "IN request on INTERRUPT endpoint - SERVICED\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_GET_DESC",
            "ilog_string": "STD REQ: Get Descriptor: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_STD_REQ_GET_DESC_DEV",
            "ilog_string": "STD REQ: Get Descriptor - DEVICE\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_GET_DESC_CONF",
            "ilog_string": "STD REQ: Get Descriptor - CONFIGURATION\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_GET_DESC_DEV_QUAL",
            "ilog_string": "STD REQ: Get Descriptor - DEVICE QUALIFIER\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_GET_DESC_OTHER_SPEED",
            "ilog_string": "STD REQ: Get Descriptor - OTHER SPEED CONFIG\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_GET_DEV_CONFIG",
            "ilog_string": "STD REQ: Get Device Configuration\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_SET_DEV_CONFIG",
            "ilog_string": "STD REQ: Set Device Configuration\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_SET_FEATURE",
            "ilog_string": "STD REQ: Set Feature\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_CLEAR_FEATURE",
            "ilog_string": "STD REQ: Clear Feature\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_GET_STATUS",
            "ilog_string": "STD REQ: Get Status\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_GET_STATUS_DEV",
            "ilog_string": "STD REQ: Get Status - DEVICE\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_GET_STATUS_INT",
            "ilog_string": "STD REQ: Get Status - INTERFACE\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STD_REQ_GET_STATUS_EP",
            "ilog_string": "STD REQ: Get Status - ENDPOINT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_HUB_REQ_GET_STATUS",
            "ilog_string": "HUB REQ: Get Status\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_HUB_REQ_GET_STATUS_HUB",
            "ilog_string": "HUB REQ: Get Status - HUB\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_HUB_REQ_GET_STATUS_PORT",
            "ilog_string": "HUB REQ: Get Status - PORT %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_HUB_REQ_CLEAR_FEATURE",
            "ilog_string": "HUB REQ: Clear Feature\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_HUB_REQ_CLEAR_FEATURE_HUB",
            "ilog_string": "HUB REQ: Clear Feature - HUB\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_HUB_REQ_CLEAR_FEATURE_PORT",
            "ilog_string": "HUB REQ: Clear Feature - PORT %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_HUB_REQ_SET_FEATURE_HUB",
            "ilog_string": "HUB REQ: Set Feature - HUB - brequest=0x%x, wValue=0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "VHUB_HUB_REQ_SET_FEATURE_PORT",
            "ilog_string": "HUB REQ: Set Feature - PORT %d - brequest=0x%x, wValue=0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VHUB_HUB_REQ_GET_DESCRIPTOR",
            "ilog_string": "HUB REQ: Get Descriptor\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_HUB_REQ_SET_FEATURE_PORT_RESET",
            "ilog_string": "HUB REQ: PORT RESET, port %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VHUB_UNKNOWN_MSG_FROM_DOWNSTREAM",
            "ilog_string": "Received an unknown message from downstream.  Message code=%d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UNEXPECTED_EVENT_IN_STATE",
            "ilog_string": "Unexpected event %d in state %d at line %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VHUB_STATE1",
            "ilog_string": "Vhub is in linkState %d, operating at speed %d, with remoteWakeupEnabled=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VHUB_STATE3",
            "ilog_string": "Vhub portInReset=%d, controlRequestReplyScratchArea.hword=0x%x, intEp1.hubAndPortStatusChangeMap=0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VHUB_PORT_STATE",
            "ilog_string": "VHub port %d, has state/speed (msh/lsh) 0x%x, & port status response is 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ADDR_NOT_IN_SYS",
            "ilog_string": "Hub USB Addr: %d is not in sys\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PUSH_STATUS_WITH_NO_STATUS",
            "ilog_string": "Pushing status interrupt endpoint, but there is no status\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VHUB_STATE2",
            "ilog_string": "Vhub intEp1.halted=%d\n",
            "ilog_num_args": 1
        }
    ],
    "REXULM_COMPONENT": [
        {
            "ilog_name": "RECEIVED_HOST_DISONNECT",
            "ilog_string": "RX eTxHostDisconnect\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RECEIVED_GEN_SUSPEND",
            "ilog_string": "RX eTxGenSuspend\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RECEIVED_UNKOWN_MESSAGE",
            "ilog_string": "RX unknown msg: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_TO_LEX_ACQUIRED",
            "ilog_string": "Link to Lex acquired\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DISCONNECT_STATE_IDEV_CONNECTED",
            "ilog_string": "DisconnectState - iCONNECT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PREFETCH_HS",
            "ilog_string": "PreFetch - HighSpeed, (may operate slower if HS isn't allowed)\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PREFETCH_FS",
            "ilog_string": "PreFetch - FullSpeed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PREFETCH_LS",
            "ilog_string": "PreFetch - LowSpeed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PREFETCH_INVALID_SPEED",
            "ilog_string": "PreFetchState - Invalid speed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BUS_RESET_STATE_SPD_NEG_FAILED",
            "ilog_string": "rexfsm_BusResetState: speed negotiate failed! (%d,%d)\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BUS_RESET_STATE_HOST_BUS_RESET_DONE",
            "ilog_string": "BusResetState - mBUSRESETDONE\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BUS_RESET_STATE_IBUS_RESET_DONE_EN_REX",
            "ilog_string": "rexfsm_BusResetState - rex busReset done, enabling REX\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BUS_RESET_STATE_IBUS_RESET_DONE_BEFORE_HOST",
            "ilog_string": "Uh-oh, Rex's busResetDone finished before HostReset!!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SUSPEND_STATE_MGEN_RESUME",
            "ilog_string": "SuspendState - mGEN_RESUME\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SUSPEND_STATE_MHOST_RESUME_DONE",
            "ilog_string": "SuspendState - mHOST_RESUME_DONE\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SUSPEND_STATE_IREMOTE_WAKEUP",
            "ilog_string": "SuspendState - iREMOTE_WAKEUP\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_USB_SPEED",
            "ilog_string": "Invalid USB speed at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULM_ISR",
            "ilog_string": "In ULM ISR 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULM_RESPONSE_TIMEOUT",
            "ilog_string": "iRESPONSETMOUT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ILINK_DOWN",
            "ilog_string": "CLM Link is down!!!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "START_SUSPEND_STATE_ISUSPEND_DONE",
            "ilog_string": "StartSuspendState: iSuspend Done\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "START_SUSPEND_STATE_INVALID_OPSPEED",
            "ilog_string": "StartSuspendState: Entering with an invalid opSpeed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IDEV_REMOVED",
            "ilog_string": "Device removed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "REX_GOT_INVALID_HOST_SPEED",
            "ilog_string": "Host sent an invalid bus reset speed %d, when device can only do %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UNEXPECTED_ISUSPEND_DONE",
            "ilog_string": "Unexpectedly received iSuspendDone when rex in %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LEX_REX_LINK_UP",
            "ilog_string": "CurrentState: Lex-Rex link is UP\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LEX_REX_LINK_DOWN",
            "ilog_string": "CurrentState: Lex-Rex link is DOWN\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "REX_SPEED",
            "ilog_string": "CurrentState: Dev is capable of speed %d, and is operating at speed %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REX_DEV_HOST_STATE",
            "ilog_string": "CurrentState: Dev is in state %d, and host is in state %d, everEnumerated %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "THIS_IS_LEX",
            "ilog_string": "This is a Lex, not a Rex, what were you expecting?\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_STATE_W_LINE",
            "ilog_string": "Invalid state %d, found at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UNEXPECTED_HOST_RESET_DONE_MSG",
            "ilog_string": "Unexpected host reset done message when dev in state %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UNEXPECTED_HOST_WAKEUP_DONE_MSG",
            "ilog_string": "Unexpectedly received host remote wakeup done message when in state %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UNEXPECTED_HOST_RESUME_MSG",
            "ilog_string": "Unexpectedly received host resume message when in state %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GOT_EARLY_HOST_RESUME_MSG",
            "ilog_string": "Got host resume message early (ie we are still suspendING, and not suspendED)\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "HOST_BUS_RESET_MSG",
            "ilog_string": "Got a host bus reset msg for speed %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RECVD_LINK_UP_WHEN_LINK_IS_UP",
            "ilog_string": "Received a link up message, when the link is already up\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DEVICE_NOT_DISCONNECTED_WHEN_TIMER_EXP",
            "ilog_string": "The Rexulm timer went off when the device isn't disconnected\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DEVICE_CONNECTED_AND_NOW_PREFETCHING_SPEED",
            "ilog_string": "Device connected and now starting to prefetch the speed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BUS_RESET_DONE_TO_SUSPEND",
            "ilog_string": "Bus Reset Done, & host is gone to suspend\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BUS_RESET_PRE_FETCH_DONE",
            "ilog_string": "Bus Reset Prefetch Done\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UNEXPECTED_BUS_RESET_DONE_WHILE_HOST_RESUMING",
            "ilog_string": "Unexpectedly got a bus reset done, while the host is resuming\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RESUME_DONE",
            "ilog_string": "Resume done\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RESUME_DONE_HOST_STILL_RESUMING",
            "ilog_string": "Resume done but the host is still resuming\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RESUME_DONE_GO_BACK_TO_SUSPEND",
            "ilog_string": "Resume done, now going back into suspend\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RESUME_DONE_BUT_HOST_BUS_RESETTING",
            "ilog_string": "resume done, but the host is bus resetting\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BITSTUFF_ERR",
            "ilog_string": "Bitstuff error from the ULM\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LONG_PACKET_ERR",
            "ilog_string": "Long packet error from the ULM\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LEX_IRQ_HOST_RESUME_DET",
            "ilog_string": "Lex only irq host resume detect occured\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LEX_IRQ_BUS_RESET_DET",
            "ilog_string": "Lex only irq bus reset detect occured\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LEX_IRQ_SUSPEND_DET",
            "ilog_string": "Lex only irq suspend detect occured\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "REQ_START_SUSPEND_BUT_IN_STATE",
            "ilog_string": "Call to RequestStartSuspend, but ignoring since rex.downstreamPort is in state %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "START_HOST_BUS_RESET",
            "ilog_string": "Starting a host bus reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "HOST_MSG_WHEN_NO_DEV_CONNECTED",
            "ilog_string": "Received host message %d, when there is no device connected\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UNEXPECTED_CONNECT_INTERRUPT",
            "ilog_string": "Unexpectedly got a connect interrupt\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GOT_SUSPEND_DONE_ISR_WHILE_UPSTREAM_IS_RESUMING",
            "ilog_string": "Got a suspend done interrupt while the upstream is resuming, very odd\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GOT_SUSPEND_DONE_ISR_WHILE_UPSTREAM_IS_OPERATING",
            "ilog_string": "Got a suspend done interrupt while the upstream is operating, very odd\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RESTART_USB_LINK",
            "ilog_string": "Restarting the USB link\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TIME_MARKER_LEX_MSGS",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing Lex message\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_USB_IRQ",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing USB Interrupt\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_CLM_LINK_DOWN",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing CLM Link Down\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_CLM_LINK_UP",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing CLM Link Up\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_TIMER_PREFETCH",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing Connect Debounce Timer\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "HOST_MSG_WHEN_NO_LEX_LINK",
            "ilog_string": "Received host message %d, when there is no declared link to Lex\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_TIMER_CONNECT",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing Disconnect/Connnect Timer\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ENABLING_USB_PORT",
            "ilog_string": "Enabling the USB port\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TIME_MARKER_SOF_PACKET_RX",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing SOF packet received idle task\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IDLE_TASK_UPSTREAM_INVALID_STATE",
            "ilog_string": "IdleTask: Upstream is in an invalid state %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IDLE_TASK_DOWNSTREAM_INVALID_STATE",
            "ilog_string": "IdleTask: Downstream is in an invalid state %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IDLE_TASK_SOF_RX",
            "ilog_string": "IdleTask: Received an SOF packet\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "START_VERY_DELAYED_BUS_RESET",
            "ilog_string": "Start very delayed bus reset\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TIME_MARKER_IDLE_TASK_TO_START_SUSPEND",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing suspending idle task\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IDLE_TASK_TO_START_SUSPEND",
            "ilog_string": "IdleTask: Ready to start suspend sequence\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NO_SOF_GOING_FROM_OP_TO_SUSPEND",
            "ilog_string": "No SOF going from operating to suspend\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LOST_LINK_REQUEST_START_SUSPENDING",
            "ilog_string": "Lost link request start suspending\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CHANGING_PREFETCH_TIMER",
            "ilog_string": "Changing prefetch timer from %dms to %dms\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CHANGING_CONNECT_TIMER",
            "ilog_string": "Changing connect timer from %dms to %dms\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REMOTE_WAKEUP_ISR_BUT",
            "ilog_string": "Remote wakeup ISR, but Rex is in state %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "REX_PORTDISCHARGECOMPLETE",
            "ilog_string": "Current DFP discharge state: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "START_REX_DFP_DISCHARGE_TIMER",
            "ilog_string": "Starting REX Hub Downstream Port Discharge Timer\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EXPIRE_REX_DFP_DISCHARGE_TIMER",
            "ilog_string": "REX Hub Downstream Port Discharge Timer expired\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "UNSUPPORTED_ICMD",
            "ilog_string": "Unsupported icmd\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "REXULM_RESET_INIT_STATE",
            "ilog_string": "*** REXULM Reset rex struct to initial state ***\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "REXULM_DEBUGX",
            "ilog_string": "__#### DEBUG 0x%x ####__\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IDLE_TASK_TO_START_BUS_RST",
            "ilog_string": "IdleTask: Ready to start bus reset sequence\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TIME_MARKER_IDLE_TASK_TO_START_BUS_RST",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing bus resetting idle task\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINESTATE_TIMEOUT",
            "ilog_string": "Waiting for line state to be %d timed out! Current line state is %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BUS_RST_USP_DSP",
            "ilog_string": "BUS RESET IDLE TASK PORT STATES: USP %d, DSP %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DEBOUNCE_LINESTATE_WAIT",
            "ilog_string": "Debounce line state stability wait for linestate %d starting now\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEBOUNCE_LINESTATE_WAIT_TIME",
            "ilog_string": "Debounce line state waited %d usec, %d usec for 100 stable read counts\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SOFT_DISCONNECT",
            "ilog_string": "Soft disconnect is performed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "REMOTE_WAKEUP_ISR_IGNORED",
            "ilog_string": "Remote wakeup ISR but ignored during link down\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "HANDLE_LINK_MSG",
            "ilog_string": "Handle link message %d, while rex upstreamPort state = %d, rex downstreamPort state = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "USB_MSG_SENT",
            "ilog_string": "Rex sent a USB msg %d upstream\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SUSPEND_DONE_UPSTREAM_STATE",
            "ilog_string": "USB suspend done and rex upstream port state = %d, line = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DISABLE_USB_LINK",
            "ilog_string": "Disabling the USB link\n",
            "ilog_num_args": 0
        }
    ],
    "NETCFG_COMPONENT": [
        {
            "ilog_name": "NETCFG_COULD_NOT_BIND_TO_PORT",
            "ilog_string": "Could not bind the network based configuration listener to port %d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEPRECATED_NETCFG_FLASH_VAR_WRONG_SIZE",
            "ilog_string": "The flash variable read was %d bytes instead of %d.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NETCFG_READ_INVALID_VPORT_PAIRING",
            "ilog_string": "Tried to read the MAC address pairing for the invalid vport %d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEPRECATED_NETCFG_FAILED_TO_WRITE_FLASH",
            "ilog_string": "Failed to write flash variable %d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEPRECATED_NETCFG_PRODUCT_VARIANT_NOT_DEFINED",
            "ilog_string": "Product variant is not set in persistent data storage\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBCFG_ICRON",
            "ilog_string": "XUSB Configuration Protocol is Icron\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBCFG_CRESTRON",
            "ilog_string": "XUSB Configuration Protocol is Crestron\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NETCFG_RECEIVED_REQUEST",
            "ilog_string": "Received netcfg command %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UDPpacket",
            "ilog_string": "UDP transmission packet handled good and sender IP = %d\n",
            "ilog_num_args": 1
        }
    ],
    "NET_COMPONENT": [
        {
            "ilog_name": "NET_INITIALIZED",
            "ilog_string": "Networking component initialization complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_NOT_INITIALIZED",
            "ilog_string": "Networking component has not been initialized\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_BUFFER_ALLOCATION_FAILURE",
            "ilog_string": "Could not allocate a network buffer. Memory pool exhausted\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_BUFFER_SIZE_EXCEEDS_BUFFER_CAPACITY",
            "ilog_string": "The network buffer claims to contain more data than it is capable of holding. Contains: %d, Max: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_FRAME_SIZE_EXCEEDS_FRAME_CAPACITY",
            "ilog_string": "The frame claims to contain more data than it is capable of holding. Contains: %d, Max: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_ARP_INVALID_OPERATION",
            "ilog_string": "An ARP packet was received with an invalid operation flag value of 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_ARP_UNEXPECTED_PACKET_SIZE",
            "ilog_string": "An ARP packet was received that was of size %d (expected size %d)\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_ARP_UNEXPECTED_REQUEST_TIMEOUT",
            "ilog_string": "Received an ARP request timeout signal when there was no pending ARP request\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_IPV4_HEADER_CHECKSUM_RX_MISMATCH",
            "ilog_string": "The IPv4 checksum 0x%x did not match the expected value of 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_IPV4_RECEIVED_FRAGMENTED_PACKET",
            "ilog_string": "Received a fragmented IPv4 packet.  We do not support fragmented packets\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_IPV4_ARP_LOOKUP_FAILURE",
            "ilog_string": "Transmission of an IPv4 packet was aborted due to an ARP lookup failure\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_IPV4_PACKET_LARGER_THAN_DATA",
            "ilog_string": "Received a IPv4 packet that claimed to be %d bytes, but there are  only %d bytes in the buffer\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_UDP_COULD_NOT_BIND_TO_PORT",
            "ilog_string": "Could not bind to UDP port %d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_UDP_PACKET_SIZE_DOES_NOT_MATCH_DATA",
            "ilog_string": "Received a UDP packet claiming to be length %d, but there are %d bytes of data in the buffer.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_ICMD_SHOW_IP_CONFIGURATION",
            "ilog_string": "IPv4 configuration - IP Address=0x%x, Subnet Mask=0x%x, Default Gateway=0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "NET_DHCP_COULD_NOT_BIND_TO_PORT",
            "ilog_string": "Could not bind the network based configuration listener to port %d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_ALREADY_ENABLED",
            "ilog_string": "DHCP Client already enabled!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_DHCP_LINK_ALREADY_UP",
            "ilog_string": "DHCP network link already up!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_DHCP_LINK_ALREADY_DOWN",
            "ilog_string": "DHCP network link already down!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_DHCP_OFFER_RECEIVED",
            "ilog_string": "DHCP Offer received from IP=0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_OFFER_INVALID_OPT_COOKIE",
            "ilog_string": "DHCP Offer received with invalid option cookie=0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_ACK_RECEIVED",
            "ilog_string": "DHCP ACK received from IP=0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_NAK_RECEIVED",
            "ilog_string": "DHCP NAK received from IP=0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_DISCOVER_SENT",
            "ilog_string": "DHCP Discover sent\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_DHCP_REQUEST_SENT",
            "ilog_string": "DHCP Request sent\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_DHCP_HDR0",
            "ilog_string": "DHCP: payLoad[0]=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_HDR1",
            "ilog_string": "DHCP: payLoad[1]=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_HDR2",
            "ilog_string": "DHCP: payLoad[2]=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_HDR3",
            "ilog_string": "DHCP: payLoad[3]=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_FIND_OPT",
            "ilog_string": "DHCP: Searching for option=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_FOUND_OPT",
            "ilog_string": "DHCP: Found option=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_OPT_NOT_FOUND",
            "ilog_string": "DHCP: Could not find option=%d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_OPT_CODE_OPT_VALUE",
            "ilog_string": "DHCP: option code = %d, option value=0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_DHCP_CONF_VALUES1",
            "ilog_string": "DHCP Config: clientIp=0x%x, leaseTime=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_DHCP_CONF_VALUES2",
            "ilog_string": "DHCP Config: gatewayIp=0x%x, subnetMask=0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MEMSET_TASK_IN_USE",
            "ilog_string": "Memset Task is already running\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ALLOCATE_FRAME",
            "ilog_string": "Allocated a new frame; Number Allocated: %d, Return address: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FREE_FRAME",
            "ilog_string": "Freed a new frame; Number Allocated: %d, Line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_FIFO_EMPTY",
            "ilog_string": "Net FIFO is empty; entries used: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_FIFO_FULL",
            "ilog_string": "Net FIFO is full; entries used: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_FIFO_USED",
            "ilog_string": "Number of Net Fifo entries used: %d; Line: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "STOP_TRANSMIT_TASK",
            "ilog_string": "Stopping Transmit task\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "START_TRANSMIT_TASK",
            "ilog_string": "Starting Transmit task\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_PING_CHECKSUM_INVALID",
            "ilog_string": "Received an echo request with checksum=0x%x, but computed checksum=0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_DCHP_UNEXPECTED_STATE",
            "ilog_string": "DHCP unexpected state at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NET_DHCP_ASSERT1",
            "ilog_string": "DHCP state %d, enabled %d, leaseActive %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "NET_DHCP_ASSERT2",
            "ilog_string": "DHCP linkup %d, yourIp 0x%x, serverIp 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LINK_LOCAL_ENABLE",
            "ilog_string": "Enabling link local addresses\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_LOCAL_DISABLE",
            "ilog_string": "Disabling link local addresses\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LINK_LOCAL_TEST_ADDR",
            "ilog_string": "Testing link local address 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_LOCAL_NEW_ADDR",
            "ilog_string": "Enabling link local address 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_LOCAL_ENABLED_WITH_VALID_IP",
            "ilog_string": "Link local addresses are enabled with a valid IP 0x%x already set\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LINK_LOCAL_SENDING_ARP",
            "ilog_string": "Link local address sending ARP for IP 0x%x, with timeout %d ms\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NET_IPV4_UNHANDLED_PROTOCOL",
            "ilog_string": "Received IPv4, unhandled protocol %.2x, SRC IP 0x%x, DST IP 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "NET_DHCP_PACKET_IGNORED",
            "ilog_string": "Ignored an irrelevant DHCP packet\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "NET_DHCP_UNSUPPORTED_MSG_TYPE",
            "ilog_string": "Received a DHCP packet with an unsupported message type: %d\n",
            "ilog_num_args": 1
        }
    ],
    "TOPOLOGY_COMPONENT": [
        {
            "ilog_name": "TOPOLOGY_INVALID_LOGICAL_ADDRESS_ARG",
            "ilog_string": "Invalid logical address received %d @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_INVALID_ENDPOINT_ARG",
            "ilog_string": "Invalid endpoint received %d @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_ICMD_NOT_LEX",
            "ilog_string": "Duh, this is REX!!!!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_ICMD_SHOW_DEVICE",
            "ilog_string": "ShowDevice\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_ICMD_SHOW_DEVICE_ALL",
            "ilog_string": "ShowDeviceAll\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_ICMD_SHOW_TOPOLOGY_BY_USB",
            "ilog_string": "Device Topology Ordered By USB Address:\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_ICMD_SHOW_TOPOLOGY_BY_LA",
            "ilog_string": "Device Topology Ordered By Logical Address:\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_ICMD_WRITE_XSST",
            "ilog_string": "ShowTopologyByLogical\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_ICMD_WRITING_XSST1",
            "ilog_string": "Writing (0x%x, 0x%x) to XSST\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_ICMD_WRITING_XSST2",
            "ilog_string": "at address %d, endpoint %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_DEVICE_ADDING_DEVICE",
            "ilog_string": "DEVICE_Add: adding device LA=%d, pLA=%d, portOnParent=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_PORT_NOT_FOUND",
            "ilog_string": "DEVICE_FindPort: port %d on parent %d not found\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_DISCONNECT",
            "ilog_string": "Disconnecting node (LA %d) from parent %d @ port %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_INVALID_LA_IN_ICMD",
            "ilog_string": "Invalid logical address %d received in ShowDevice iCmd\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TOPOLOGY_ICMD_VIEWING_ADDRESS_NOT_IN_SYS2",
            "ilog_string": "Using unused USB address to view logical address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TOPOLOGY_SHOW_XSST_RETRY_USAGE",
            "ilog_string": "XSST Monitor: USB %d, endpoint %d has rtyUsage as 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GET_ADDR_FROM_LOGICAL_MISMATCH",
            "ilog_string": "Get address from logical had a mismatch.  Logical arg is %d, USB address from logical is %d, Logical address from USB is %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DISPLAY_XSST",
            "ilog_string": "LA(upper bits), endpoint(lower bits) 0x%x, XSST: 0x%x 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_ICMD_SHOW_XSST",
            "ilog_string": "ShowXSST\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_SET_ADDRESS_ON_EXISTING",
            "ilog_string": "Logical address %d has moved from USB address %d to USB address %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XSSTMON_LEX_SPECIFIC_ICMD",
            "ilog_string": "The command executed is only valid on a device configured as a LEX\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "HOST_REUSING_USB_ADDR",
            "ilog_string": "The host is re-using USB address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_MISCONFIGURED_PTRS1",
            "ilog_string": "MSA detected misconfigured ptrs on USB address %d, inEp is %d, inPtr is %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_MISCONFIGURED_PTRS2",
            "ilog_string": "MSA detected misconfigured ptrs on USB address %d, outEp is %d, outPtr is %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_FREE_LAT_FAILURE",
            "ilog_string": "MSA Free LAT failure, MSA USB address %d, MSA LA address %d, msaLogicalAddressAllocatedBitField 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_FREE_INVALID",
            "ilog_string": "MSA Free was given an invalid address, usb is %d, MSA LA is %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NEW_MSA_INTERFACE",
            "ilog_string": "New MSA interface configured on USB %d, epIn %d, epOut %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_OUT_OF_PTRS",
            "ilog_string": "MSA HW is out of pointers\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RESET_XSST",
            "ilog_string": "ResetXsst: LA %d, USB %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_INVALID_WHEN_GET_ADDR_FROM_USB",
            "ilog_string": "Tried to get an XUSB address from a USB address (%d) without valid topology data at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_INVALID_TREE_STRUCTURE",
            "ilog_string": "A topology tree invariant has been violated at line %d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_TOPOLOGY_MISMATCH",
            "ilog_string": "An MSA topology mismatch occured on USB address %d at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_EXPECTED_DEVICE_REQUIRING_CLEANUP",
            "ilog_string": "Device with USB address %d should have required cleanup at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_INVALID_DEVICE_CONNECTED",
            "ilog_string": "Found a connected device with LA %d that is not valid, but is connected at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TRAVERSE_TOPOLOGY",
            "ilog_string": "Traverse: processing logical address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LOGITECH_C910_FOUND",
            "ilog_string": "Logitech C910 device found at usb address %d, configuring endpoint 2 as ISO\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FOUND_NEW_PRODUCT",
            "ilog_string": "Found New Product. Usb Address: %d, Old Product ID: %d, New Product ID: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "FOUND_NEW_VENDOR",
            "ilog_string": "Found New Vendor. Usb Address: %d, Old Vendor ID: %d, New Vendor ID: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_FREE_ADDR",
            "ilog_string": " MSA freeing MSA LA %d, USB %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_ASSERT_XSST",
            "ilog_string": "--- XSST for Devices in the Device Topology ---\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ADD_ENDPOINT1",
            "ilog_string": "Adding Endpoint. Interface: %d, Endpoint Number: %d, Endpoint type: %d ...\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ADD_ENDPOINT2",
            "ilog_string": "... Adding Endpoint. Alternate Setting: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TOPOLOGY_SET_INTERFACE",
            "ilog_string": "Setting Interface for LA: %d to Interface: %d, Alternate setting: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DESC_DONE",
            "ilog_string": "Descriptor has been parsed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CLEAR_ENDPOINTS",
            "ilog_string": "Cleared Endpoints for LA: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TOPOLOGY_SET_CONFIGURATION",
            "ilog_string": "Setting Configuration for LA: %d to value: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ENDPOINT_INFO",
            "ilog_string": "    Interface: %d, Endpoint: %d, Type: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MEMPOOL_ALLOC_FAILED",
            "ilog_string": "Memory pool in topology is full and data will not be saved\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SET_INTERFACE_MEM",
            "ilog_string": "Endpoints for device with LA: %d were deleted; Set Interface will not work\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DELETE_DISCONNECTEDDEVICES",
            "ilog_string": "Removing endpoints for disconnected devices\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DELETE_CONFIGURED",
            "ilog_string": "Deleting configured devices to free some space in the memory pool\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_MEMPOOL",
            "ilog_string": "Number of used slots in topology memory pool: %d; number of free slots: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NEW_DEVICE",
            "ilog_string": "New device at USB %d, Vendor ID 0x%.4x, Product ID 0x%.4x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DTT_GET_DEV_NODE_INVALID_ARG",
            "ilog_string": "DTT get dev node invalid arg\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DISCONNECT_SUBTREE",
            "ilog_string": "Disconnecting subtree rooted at logical address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CONFIGURATION_VALUE",
            "ilog_string": "    Configuration value: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ENDPOINT_INFO2",
            "ilog_string": "    Endpoint Direction: %d, MSA Paired Endpoint Number: %d, Alternate Setting: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_ENDPOINT_NONEXISTENT",
            "ilog_string": "MSA Pair Endpoint does not exist\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BCI_BCO_SET",
            "ilog_string": "Both BCI and BCO are set for LA: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CLEAR_MSA_ENDPOINT",
            "ilog_string": "Clearing MSA Overlay and Acceleration field for LA: %d, Endpoint %d, Direction %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SET_INTERFACE_UNCONFIGURED",
            "ilog_string": "Setting Interface called on unconfigured device for LA: %d to Interface: %d, Alternate setting: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "IS_EP_SET_EQ_WITH_NULL_ARG",
            "ilog_string": "_DTT_isEndpointSetEqualAndNoMsa: called with NULL arg\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SHOW_VIRT_FN",
            "ilog_string": "  Virtual function at address 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SHOW_VIRT_FN_1",
            "ilog_string": "    ep: %d, epType: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SHOW_VIRT_FN_2",
            "ilog_string": "    inFn: 0x%x, inAckFn: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SHOW_VIRT_FN_3",
            "ilog_string": "    outFn: 0x%x, setupFn: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_SHOW_TOPOLOGY_1",
            "ilog_string": "Logical Address=%d, USB Address=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_SHOW_TOPOLOGY_2",
            "ilog_string": "  Parent LA=%d, Child LA=%d, Sibling LA=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_SHOW_TOPOLOGY_5",
            "ilog_string": "  Requires Cleanup=%d, Max Packet Size Ep0=%d, System Control Q State=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_SHOW_ENDPOINTS_INFO",
            "ilog_string": "  Stored Endpoint Information:\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INPUT_STUCK_ENDPOINT",
            "ilog_string": "Input Endpoint at LA: %d, Endpoint: %d is stuck.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "OUTPUT_STUCK_ENDPOINT",
            "ilog_string": "Output Endpoint at LA: %d, Endpoint: %d is stuck\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_HOST_RESET_SHOULD_NEVER_FAIL",
            "ilog_string": "Host reset should never fail, but it did\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ENDPOINT_SHARED_INTF",
            "ilog_string": "In Configuration %d, Endpoint %d is being shared by two distinct interfaces\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "EXISTING_ENDPOINT_TYPE",
            "ilog_string": "In Configuration %d, adding existing endpoint with endpoint number %d, endpoint direction %d but with different endpoint type\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DISCONNECT_DEVICE",
            "ilog_string": "Disconnecting device USB %d, logical %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "RELEASE_RETRY",
            "ilog_string": "In XSST Monitor, releasing Retry Buffers for USB Addr: %d, Endpoint: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "START_XSST",
            "ilog_string": "XSST Monitor has been started\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "STOP_XSST",
            "ilog_string": "XSST Monitor has been stopped\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLUSH_IN_QUEUE",
            "ilog_string": "Flushing Input Queue for device at LA: %d, Endpoint: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FLUSH_OUT_QUEUE",
            "ilog_string": "Flushing Output Queue for device at LA: %d, Endpoint: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XSST_MONITOR_STILL_PROCESSING",
            "ilog_string": "XSST Monitor is still processing the last address\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_WRITING_IN_ENDPOINT",
            "ilog_string": "Writing IN endpoint: usbA=%d, EP=%d, EPType=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_WRITING_OUT_ENDPOINT",
            "ilog_string": "Writing OUT endpoint: usbA=%d, EP=%d, EPType=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_SHOW_TOPOLOGY_7",
            "ilog_string": "  VID is 0x%04x, PID is 0x%04x, device Change is %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_SHOW_TOPOLOGY_4",
            "ilog_string": "  Is Hub=%d, Is Connected=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_TOO_MANY_CONFIGURATIONS",
            "ilog_string": "Device with LA %d has %d configurations but only %d are supported.\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_OPTIMIZING_ENDPOINT_SET",
            "ilog_string": "Removing tracking of LA %d, EP number %d, EP direction %d because the type does not vary.\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_SET_CONFIG_UNKNOWN",
            "ilog_string": "Host performed set configuration, but descparser hasn't seen the full config descriptor. \n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_INVALID_ADDRESS_REQUIRES_CLEANUP",
            "ilog_string": "Invalid address %d requires cleanup @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_INVALID_DIRECTION_ARG",
            "ilog_string": "Invalid transfer direction received %d @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_LA_REQUIRES_CLEANUP",
            "ilog_string": "Device at LA %d requires cleanup\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TOPOLOGY_DEVICE_REQUIRING_CLEANUP_INSYS_CLEARED",
            "ilog_string": "Device at LA %d requiring cleanup was removed from sys. Timeout counter = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_SENT_CSPLIT_TO_REX",
            "ilog_string": "Device requiring cleanup had CSPLIT sent to REX. LA = %d, ep = %d, direction = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_XSST_WRITE_CONDITIONAL_FAILED",
            "ilog_string": "XSST WriteConditional failed for device requiring cleanup. Addr = %d, ep = %d, (epType << 8) | epDir  = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_SPLIT_BLK_NO_SPLIT_PACKET",
            "ilog_string": "i/oSplit and i/oBlk are set but there is no s/cSplit packet in queue\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOPOLOGY_SPLIT_DEVICE_HAS_NO_UPSTREAM_HS_HUB",
            "ilog_string": "Split device at LA %d has no upstream high-speed hub!\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TOPOLOGY_SET_SPEED_MISSING_NODE",
            "ilog_string": "Tried to set the speed of device with parent LA %d and port %d to %d, but couldn't find it in the topology!\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_SET_SPEED",
            "ilog_string": "Set the speed of device with LA %d to %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_SHOW_TOPOLOGY_3",
            "ilog_string": "  Port On Parent=%d, Speed=%d, High Endpoint=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOPOLOGY_SHOW_TOPOLOGY_6",
            "ilog_string": "  MSA LA=%d, Configuration Value=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_SENT_MSA_FREED_TO_REX",
            "ilog_string": "Sent CPU message LEX_FREED_MSA_PAIR @ USBAddr %d to Rex on Vport %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOPOLOGY_UPDATING_XSST_MSA",
            "ilog_string": "Updating XSST MSA info for USBAddr %d endpoint %d line %d\n",
            "ilog_num_args": 3
        }
    ],
    "REXSCH_COMPONENT": [
        {
            "ilog_name": "ENABLE",
            "ilog_string": "REXSCH_Enable()\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DISABLE",
            "ilog_string": "REXSCH_Disable()\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_NOT_CBW_PKT_IN_IDLE",
            "ilog_string": "Received a non-CBW packet in the Idle state, accel is %d, action is %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MSA_GOT_DNS_PKT_IN_CBW",
            "ilog_string": "Received a Downstream packet in the CBW state, should not get any, accel is %d, action is %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MSA_RESP_IDLE",
            "ilog_string": "Received a response in the Idle state\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_RESP_CBW_INVALID",
            "ilog_string": "Received an invalid response %d in the CBW state\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_RESP_OUT_DATA_INVALID",
            "ilog_string": "Addr %d: Received an invalid response %d in the Out Data state\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MSA_RESP_IN_DATA_INVALID",
            "ilog_string": "Received an invalid response in the In Data state = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_RESP_STALL_SETUP_INVALID",
            "ilog_string": "Received an invalid response in the Stall Setup state\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_RESP_STALL_IN_INVALID",
            "ilog_string": "Received an invalid response in the Stall In state\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_ALLOCATE_NO_FREE_REF",
            "ilog_string": "No Free Msa refs to allocate\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_DISP_STAT",
            "ilog_string": "     state %d save queue %d cnt %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_DISP_STAT_HDR",
            "ilog_string": "Msa Stat\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_DISP_STAT_ADDR",
            "ilog_string": "   addr %d, endp %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MSA_DISP_STAT_CNT",
            "ilog_string": "     clr halt cnt %d cbw %d csw %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_DISP_STAT_CNT2",
            "ilog_string": "     in stall cnt %d out stall cnt %d flc in cnt %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_DISP_STAT_NAK_CNT",
            "ilog_string": "     nak cnt %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_RESP_CSW_INVALID",
            "ilog_string": "Addr %d: Received an invalid response %d in the CSW state\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MSA_RESP_CSW_ERROR",
            "ilog_string": "Received an errored response in the CSW state\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_RESP_IN_ERROR",
            "ilog_string": "Received an errored response in the In Data state: resp = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_RESP_IN_NAK_CNT",
            "ilog_string": "USB addr %d, In Nak Cnt == %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MSA_CSW_RESP_IN_NAK_CNT",
            "ilog_string": "USB addr %d, CSW In Nak Cnt == %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MSA_RESP_OUT_NAK_CNT",
            "ilog_string": "USB addr %d, Out Ping Nak Cnt == %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REXSCH_DEVRESP_UNKNOWN_SCHTYPE",
            "ilog_string": "RexSch DevResp Received an unknown schtype %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_INIT",
            "ilog_string": "Rex Mass Storage Initialization, allocate %d devices\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_SOF_FLC",
            "ilog_string": "MSA SOF Flow Control Count %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "REXSCH_SPLIT_DROPPED",
            "ilog_string": "Split packet dropped, frame %d current rx packet frame %d set frame %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "REXSCH_SPLIT_FULL",
            "ilog_string": "All endpoints full frame %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "REXSCH_SPLIT_ENTRY",
            "ilog_string": "Split entry %d:%d match\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REXSCH_BAD_PING_RESPONSE",
            "ilog_string": "Bad ping response: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_FLUSH_QUEUE_ERROR",
            "ilog_string": "Error: Flush Queue is not empty %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_OUT_SAVE_QUEUE_EMPTY",
            "ilog_string": "Out Save Queue Empty\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_DBG_OUT_TIMEOUT",
            "ilog_string": "Msa got Out Timeout\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_DBG_PING_ACK_CSW_IN",
            "ilog_string": "Error: Ping Ack expected in for csw Addr:%d, sent len %d,expect len %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_DISP_STAT_DATA",
            "ilog_string": "     data len %d data cnt %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MSA_DBG_BAD_NYET_PKT_LEN",
            "ilog_string": "  Error: Addr %d Out Nyet pkt len is %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MSA_DBG_CBW_OUT_DATA",
            "ilog_string": "  Error: Got CBW: Out data phase\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_DBG_CBW_IN_CSW",
            "ilog_string": "  Error: Got CBW: In CSW phase\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_DNS_BAD_STATE",
            "ilog_string": "Illegal Dns State\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_TOO_MANY_NAKS",
            "ilog_string": "Got too many Naks, now terminating\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_IN_TOO_MUCH_DATA",
            "ilog_string": "Device returned more data than was specified in CBW\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_OUT_TOO_MUCH_DATA",
            "ilog_string": "Host sent more data than was specified in CBW\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SETUP_TRANSACTION_PENDING",
            "ilog_string": "REX Scheduler is waiting to send Setup to the REX. LEX should not sent another packet downstream.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TOO_MANY_SIMULTANEOUS_TRAN",
            "ilog_string": "There are too many simultaneous MSA transactions\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DOWNSTREAM_CSW",
            "ilog_string": "REXSCH got downstream CSW data\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_DNS_IN_INCORRECT_ACCEL",
            "ilog_string": "Got packet with incorrect Accel value: %d in In-phase\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MULTIPLE_IN_IN_PHASE",
            "ilog_string": "Got multiple IN's in IN-phase\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_SEND_DOWNSTREAM_MODE",
            "ilog_string": "Invalid mode for sending a packet downstream\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RECEIVED_INVALID_CLR_HLTEP_RESPONSE",
            "ilog_string": "Received invalid response when clearing halted endpoint for USB Addr: %d, line: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REXMSA_RESET_DEVICE",
            "ilog_string": "REXMSA Reset device usb %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "NUM_PACKETS_IN_QUEUE_NOT_ZERO",
            "ilog_string": "numPacketsInQueue is not zero, and is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_IN_RECOVERY_FLUSHING_DATA_QID",
            "ilog_string": "In MSA recovery usb %d, flushing and de-allocating data QID %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "UNEXPECTED_MSA_RESPONSE",
            "ilog_string": "Unexpected MSA response for usb addr %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RECEIVED_INVALID_CLR_HLTEP_SCHTYPE",
            "ilog_string": "Received invalid schedule type when clearing halted endpoint for USB Addr: %d, schedule type: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DUPLICATED_OUT_TOGGLE",
            "ilog_string": "Received duplicated OUT packet toggle\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_STATE",
            "ilog_string": "Invalid state at line %d, info is 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DUPLICATED_IN_TOGGLE",
            "ilog_string": "Received duplicated IN packet toggle\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_DNS_IN_INPHASE",
            "ilog_string": "Received a downstream packet with invalid action %d in the IN data phase\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_SETUP_PACKET_SCHEDULING",
            "ilog_string": "The Setup packet has an invalid scheduling type: %d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RECEIVED_SW_MESSAGE",
            "ilog_string": "Received software message %d with data %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_MSA_USB_ADDRESS",
            "ilog_string": "Requested to reset MSA status on invalid USB address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RECEIVED_UNKNOWN_SW_MESSAGE",
            "ilog_string": "Received unknown software message %d with data %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REXSCH_DEBUGX",
            "ilog_string": "__#### DEBUG 0x%x ####__\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "REXSCH_DEBUG_MSA_FLUSH_Q",
            "ilog_string": "__#### DEBUG - MSA FLUSH QUEUE ####__\n",
            "ilog_num_args": 0
        }
    ],
    "STORAGE_COMPONENT": [
        {
            "ilog_name": "STORAGE_VAR_TOO_BIG",
            "ilog_string": "Storage variable %d is too big at %d bytes to be read\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FLASH_ACCESS_INVALID_VARIABLE",
            "ilog_string": "Tried to access flash variable %d, but there are only %d variables\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "STORAGE_GET_VAR_NOT_EXIST",
            "ilog_string": "Tried to get a persistent variable %d that does not exist\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "STORAGE_CREATE_VAR_ALREADY_EXISTS",
            "ilog_string": "Tried to create a persistent variable %d that already exists\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLASH_REMOVE_VAR_NOT_EXISTS",
            "ilog_string": "Tried to remove a persistent variable %d that doesn't exist\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "STORAGE_ICMD_READ_VAR",
            "ilog_string": "Variable %d has MSW=0x%x and LSW=0x%x.\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "STORAGE_ICMD_WRITE_VAR",
            "ilog_string": "Wrote variable %d with MSW=0x%x and LSW=0x%x.\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "STORAGE_ICMD_DUMP_VARS",
            "ilog_string": "Dumping all persistent variables:\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "STORAGE_SAVING_VAR",
            "ilog_string": "Saving persistent var %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "STORAGE_ASSERT_HOOK_TITLE",
            "ilog_string": "Persistent data assert hook:\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "STORAGE_ASSERT_HOOK_PENDING_WRITE",
            "ilog_string": "  Pending write to variable %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "STORAGE_INVALID_STORAGE_BACKEND",
            "ilog_string": "The storage backend value of %d is invalid.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "READ_VAR_FAIL",
            "ilog_string": "Unable to read var %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "WROTE_VAR_FAIL",
            "ilog_string": "Unable to write var %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CANT_READ_VAR",
            "ilog_string": "Tried to read variable %d, but it doesn't exist\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ERASE_VAR",
            "ilog_string": "Erasing variable %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ERASE_VAR_FOR_VAR_THAT_DOESNT_EXIST",
            "ilog_string": "Trying to erase variable %d, but it doesn't exist in storage\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEPRECATED_EEPROM_READ_FAIL",
            "ilog_string": "Could not read eeprom page %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEPRECATED_EEPROM_WRITE_FAIL",
            "ilog_string": "Could not write to I2C EEPROM chip\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EEPROM_PAGE_READ_FAILED",
            "ilog_string": "EEPROM read failed while reading page %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "EEPROM_INVALID_READ_SIZE",
            "ilog_string": "EEPROM page read size %d is invalid while reading page %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "EEPROM_WRITE_BACKUP_FAILED",
            "ilog_string": "Failed to write to EEPROM backup page for variable %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "EEPROM_WRITE_PRIMARY_FAILED",
            "ilog_string": "Failed to write to EEPROM primary page for variable %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "EEPROM_PRIMARY_PAGE_DATA_CORRUPTED",
            "ilog_string": "Primary location for variable %d is corrupted, but backup is intact. Restoring from backup.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "EEPROM_PRIMARY_PAGE_BAD_CRC",
            "ilog_string": "Primary location has a bad CRC, and backup is for a different variable. Probable corruption of variable %d.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "EEPROM_BACKUP_PAGE_BAD_CRC",
            "ilog_string": "Primary and backup both failed CRC check for variable %d. Assuming primary is valid.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "EEPROM_RESTORE_BACKUP_FAILED",
            "ilog_string": "Write to EEPROM backup page %d failed for restoring primary page %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "EEPROM_RESTORE_PRRIMARY_FAILED",
            "ilog_string": "Restore EEPROM primary page %d failed\n",
            "ilog_num_args": 1
        }
    ],
    "FLASH_DATA_COMPONENT": [
        {
            "ilog_name": "FLASH_INIT",
            "ilog_string": "Flash driver initialization\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MULTIPLE_ACTIVE_SECTIONS",
            "ilog_string": "Multiple sections of flash were marked active\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INIT_SECTION1_MARKED_AS_ACTIVE",
            "ilog_string": "Initialization: Marking section1 as the active section\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INIT_FOUND_GARBAGE_HEADER",
            "ilog_string": "Initialization found a garbage flash header in section %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UNEXPECTED_HEADER_WHEN_SETTING",
            "ilog_string": "Unexpectedly read header %d, when going to write %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "WRITE_VAR_SIZE_TOO_BIG",
            "ilog_string": "Error Writing variable %d.  Size %d is too big\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "WRITE_VAR",
            "ilog_string": "Writing variable %d, with size %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "WRITE_VAR_IS_REPLACEMENT",
            "ilog_string": "Wrote variable %d, & now erasing previous setting\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ERASE_VAR",
            "ilog_string": "Erasing var %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ERASE_VAR_FOR_VAR_THAT_DOESNT_EXIST",
            "ilog_string": "Trying to erase var %d, but it doesn't exist in flash\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "READ_VAR",
            "ilog_string": "Read variable %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CANT_READ_VAR",
            "ilog_string": "Tried to read variable %d, but it doesn't exist\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UNABLE_TO_FIND_ACTIVE_DATA_SECTION",
            "ilog_string": "Unable to find active data section\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLASH_VAR_TOO_BIG",
            "ilog_string": "Flash variable %d is too big at %d bytes to be read\n",
            "ilog_num_args": 2
        }
    ],
    "EEPROM_COMPONENT": [
        {
            "ilog_name": "EEPROM_BUSY",
            "ilog_string": "There is already an EEPROM access in progress.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EEPROM_ADDRESS_EXCEEDS_CAPACITY",
            "ilog_string": "An attempt was made to access EEPROM page %d which exceeds capacity %d.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_EEPROM_READ_FAILED",
            "ilog_string": "Failed reading external eeprom\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_EEPROM_WRITE_FAILED",
            "ilog_string": "Failed writing to external eeprom\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_EEPROM_WRITE_SUCCESSFUL",
            "ilog_string": "Write to EEPROM is complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_EEPROM_WRONG_READ_LENGTH",
            "ilog_string": "Expected %d bytes, read %d bytes instead\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_PAGE_VALUES",
            "ilog_string": "Byte %d: Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_WORD_VALUES",
            "ilog_string": "Word %d: Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_INVALID_PAGE",
            "ilog_string": "Page %d is outside the valid range of 0 to %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "EEPROM_INITIALIZATION_STARTING",
            "ilog_string": "Beginning EEPROM initialization\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "EEPROM_READ_SUBMIT",
            "ilog_string": "Submitting an EEPROM read of page %d with pageData pointing at 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "EEPROM_WRITE_SUBMIT",
            "ilog_string": "Submitting an EEPROM write of page %d with pageData pointing at 0x%x\n",
            "ilog_num_args": 2
        }
    ],
    "ATMEL_CRYPTO_COMPONENT": [
        {
            "ilog_name": "READ_FAILED",
            "ilog_string": "Atmel chip read failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "READ_SUCCESS",
            "ilog_string": "Successfully read %d bytes from Atmel chip\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "READ_BYTE",
            "ilog_string": "Read byte 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_COND",
            "ilog_string": "Invalid condition at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "WRITE_FAILED",
            "ilog_string": "Atmel chip write failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CRC_FAIL",
            "ilog_string": "CRC failure: expecting 0x%x, got 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LONG_PACKET",
            "ilog_string": "Read more bytes (%d) than the size of the packet (%d)\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SHORT_PACKET",
            "ilog_string": "Read less bytes (%d) than the size of the packet (%d)\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_SHORT_PACKET",
            "ilog_string": "Packet of length %d is less than the minimum 4 byte size\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SYS_BUSY_ABORTING_ICMD",
            "ilog_string": "Sorry, system is busy, please try icommand later\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_LARGE_READ_REQUEST",
            "ilog_string": "Invalid read request of %d bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ICMD_FAILED",
            "ilog_string": "icommand failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_ATMEL_SLOT",
            "ilog_string": "Invalid Atmel slot %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "READ_SLOT_FAILED",
            "ilog_string": "Read slot failed, read %d bytes instead of 32 bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "WRITE_SLOT_FAILED",
            "ilog_string": "Write slot failed, read %d status bytes, data[0] is 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_BYTE_ADDR",
            "ilog_string": "Invalid byte address %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "READ_CONFIG_WORD_FAILED",
            "ilog_string": "Read config word failed, read %d bytes instead of 4 bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "WRITE_CONFIG_WORD_FAILED",
            "ilog_string": "Write config word failed, read %d status bytes, data[0] is 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LOCK_FAILED",
            "ilog_string": "Lock failed, read %d status bytes, data[0] is 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ATMEL_SUBMIT_I2C_SYS_BUSY",
            "ilog_string": "Submit i2c op, but system is busy\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_SUBMIT_I2C_1",
            "ilog_string": "Submit i2c op, opcode:0x%.2x, param1:0x%.2x, param2:0x%.4x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ATMEL_SUBMIT_I2C_2",
            "ilog_string": "Submit i2c op, writeDataSize:%d, readDataSize:%d, completionHandler:0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SENDING_ATMEL_I2C_WAKEUP",
            "ilog_string": "Sending Atmel i2c wakeup\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IDLE_FAILED",
            "ilog_string": "Atmel idle command failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_SEND",
            "ilog_string": "Atmel icmd sending opCode 0x%02x, param1 0x%02x, param2 0x%04x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CRC_WRITE_PACKET_DONE",
            "ilog_string": "Calculated SW CRC for write in %dus\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CRC_READ_PACKET_DONE",
            "ilog_string": "Calculated SW CRC for read in %dus\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SW_MAC_DONE",
            "ilog_string": "SW MAC done! digestsMatch=%d. It took %dus\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "RUN_MAC_CALLED_WHILE_IN_PROGRESS",
            "ilog_string": "run mac called while in progress\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RUN_MAC_CALLED",
            "ilog_string": "Run MAC called, secretKey is at 0x%x, challenge is at 0x%x, completionHandler is at 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "HW_MAC_DONE",
            "ilog_string": "HW MAC operation done, returned data at 0x%x, dataSize %d, userPtr 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "HW_MAC_DONE_INVALID_ARGS",
            "ilog_string": "HW MAC done got invalid args. Got data at 0x%x, dataSize %d, userPtr 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CHIP_STATE1",
            "ilog_string": "Atmel chip state is %d, completionHandler is 0x%x, userPtr is 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CHIP_STATE2",
            "ilog_string": "Atmel chip state readReqSize is %d, simpleCmd is 0x%x, writeBuffer[0-3] in Big endian is 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SET_SPEED",
            "ilog_string": "Atmel chip speed changing from speed %d to speed %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CHIP_STATE3",
            "ilog_string": "Atmel chip state readBuffer[0-3] in Big endian is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MAX_I2C_RETRY_EXCEEDED",
            "ilog_string": "Maximum # of i2c retries exceeded\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_RECOVERY_START",
            "ilog_string": "i2c recovery start attempt %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_RECOVERY_WOKEUP",
            "ilog_string": "i2c recovery did wakeup\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_RECOVERY_DONE",
            "ilog_string": "i2c recovery done, info is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ATMEL_WRITE_BUFFER_BOUNDS",
            "ilog_string": "Tried to write outside the bounds of the buffer at wordOffset %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ATMEL_WRITE_DATA_SLOT_ICMD_COMPLETE",
            "ilog_string": "ICMD write of data slot completed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_READ_CONFIG_WORD_ICMD_COMPLETE",
            "ilog_string": "ICMD read of config word returned data: 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ATMEL_WRITE_CONFIG_WORD_ICMD_COMPLETE",
            "ilog_string": "ICMD write of config word completed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_LOCK_ZONE_ICMD_COMPLETE",
            "ilog_string": "Lock authentication zone ICMD completed.\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_LOCK_STATUS",
            "ilog_string": "Atmel authentication chip lock status: Data+OTP=%d, Config=%d.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ATMEL_WRITE_DATA_BUFFER_DONE",
            "ilog_string": "Atmel data buffer written at word offset %d with value 0x%x.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ATMEL_INIT_STEP1",
            "ilog_string": "Starting initialization sequence\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_INIT_STEP2",
            "ilog_string": "Atmel chip has woken up\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ATMEL_INIT_STEP3",
            "ilog_string": "Initialization is done, success flag is: %d\n",
            "ilog_num_args": 1
        }
    ],
    "KC705_COMPONENT": [
        {
            "ilog_name": "DE_JITTER_WRITE_FAILED",
            "ilog_string": "Setting De-jitter chip failed at line: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEJITTER_CHIP_CONFIGURED",
            "ilog_string": "De-jitter chip was configured to 1 ppm\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WRITE_FAILED",
            "ilog_string": "I2C Write failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_READ_FAILED",
            "ilog_string": "I2C Read failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_RANDOM_READ_1BYTE_RESP",
            "ilog_string": "I2C Random 1 Byte Read: Register: 0x%x; Value: 0x%x\n",
            "ilog_num_args": 2
        }
    ],
    "XCSR_COMPONENT": [
        {
            "ilog_name": "XCSR_Q_ALLOCATE_ERROR_LOG",
            "ilog_string": "Queue allocate error @ line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XCSR_INVALID_QID_ERROR",
            "ilog_string": "Invalid QID received during static Q allocation for Q %d, expecting %d @ line %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XCSR_Q_FLUSH_ERROR_LOG",
            "ilog_string": "Invalid QID %d received in XCSR queue flush @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_Q_WRITE_ERROR_LOG",
            "ilog_string": "Queue write error @ line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XCSR_Q_STATUS_ERROR_LOG",
            "ilog_string": "Invalid QID %d received in XCSR queue get empty status @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_READ_LOOKUP_TABLE_INVALID_ARG_ERROR_LOG",
            "ilog_string": "Invalid argument received in XCSR_ReadDeviceStatus @ line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XCSR_INVALID_XUSB_CHIP_ID_ERROR_LOG",
            "ilog_string": "Invalid XUSB chip ID, expecting 0x%x, read 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_INVALID_ENDPOINT_NUMBER",
            "ilog_string": "Invalid endpoint number %d @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_INVALID_ENDPOINT_TYPE",
            "ilog_string": "Invalid endpoint type %d @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_WRITE_FRAME",
            "ilog_string": "XCSR_XICSWriteFrame writing qid %d, with header 0x%x 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XCSR_XSST_WRITE_MASK_LSW",
            "ilog_string": "XCSR_XSSTWriteMask LSW value is 0x%x, mask is 0x%x, old value is 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XCSR_XSST_WRITE_MASK_MSW",
            "ilog_string": "XCSR_XSSTWriteMask MSW value is 0x%x, mask is 0x%x, old value is 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XICSQ_ICMD_GET_Q_STATS1",
            "ilog_string": "Qid %d: frame count 0x%x, word count 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XICSQ_ICMD_GET_Q_STATS2",
            "ilog_string": "empty status %d, data0 0x%x, data1 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CLR_BCO",
            "ilog_string": "Clearing BCO for usb %d, logical %d, valid(msb) / insys(lsb) as 2 bits 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CLR_BCI",
            "ilog_string": "Clearing BCI for usb %d, logical %d, valid(msb) / insys(lsb) as 2 bits 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XCSR_INVALID_XUSB_CHIP_MINOR_REVISION_ERROR_LOG",
            "ilog_string": "Invalid minor XUSB chip revision, expecting 0x%x, read 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_INVALID_XUSB_CHIP_MAJOR_REVISION_ERROR_LOG",
            "ilog_string": "Invalid major XUSB chip revision, expecting 0x%x, read 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_Q_STATUS_ERROR_CONTAIN_COMPLT_FRAME",
            "ilog_string": "Invalid QID %d in XCSR_XICSQueueContainsCompleteFrame\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XCSR_XICS_WRITE_FRAME_NULL_ARG",
            "ilog_string": "XCSR_XICSWriteFrame passed a null arg\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_INVALID_QID",
            "ilog_string": "Invalid qid %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XICSQ_ICMD_GET_Q_STATS3",
            "ilog_string": "empty status %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ICMD_CACHE_STATS_QID_SID_FREE_COUNT",
            "ilog_string": "Free QIDs %d, free SIDs %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_READ_FRAME_SHOW_ERROR",
            "ilog_string": "Reading from Q %d, Error %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_READ_FRAME_SHOW_Q",
            "ilog_string": "Reading from Q %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ICMD_READ_FRAME_SHOW_HEADER",
            "ilog_string": "Frame header: 0x%x 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_READ_FRAME_SHOW_HEADER2",
            "ilog_string": "              0x%x 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_READ_FRAME_SHOW_DATA",
            "ilog_string": "Frame data: 0x%x 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "WRITE_FRAME_TOO_MUCH_DATA",
            "ilog_string": "Write Frame was called with too much data, %d bytes to be exact\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IRQ2XICSSIDEMPTY",
            "ilog_string": "XICS SIDs are exhausted\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IRQ2XICSSIDAEMPTYLTHRESH",
            "ilog_string": "Above XICS SID almost empty low threshold\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IRQ2XICSSIDAEMPTYMTHRESH",
            "ilog_string": "Above XICS SID almost empty medium threshold\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IRQ2XICSSIDAEMPTYHTHRESH",
            "ilog_string": "Above XICS SID almost empty high threshold\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IRQ2XICSQIDEMPTY",
            "ilog_string": "IRQ2XICSQIDEMPTY\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IRQ2XICSQIDAEMPTY",
            "ilog_string": "IRQ2XICSQIDAEMPTY\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DUMP_FRAME_NULL_ARG",
            "ilog_string": "XCSR_XICSDumpFrame: got null arg\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DUMP_FRAME_HEADER_1",
            "ilog_string": "XCSR_XICSDumpFrame: 1st header cache word 0x%x 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DUMP_FRAME_HEADER_2",
            "ilog_string": "XCSR_XICSDumpFrame: 2nd header cache word 0x%x 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DUMP_FRAME_SIZE",
            "ilog_string": "XCSR_XICSDumpFrame: Frame size is %d bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DUMP_FRAME_RAW_BYTE",
            "ilog_string": "XCSR_XICSDumpFrame: raw dump %.02x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LOG_XSST_WRITE_LAT",
            "ilog_string": "XSST Write LAT addr %d endPoint %d, Data 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LOG_XSST_WRITE_SST",
            "ilog_string": "XSST Write addr(MSW)/endPoint(LSW) 0x%x, Data 0x%x 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LOG_XSST_READ",
            "ilog_string": "XSST Read addr(MSW)/endPoint(LSW) 0x%x, Data 0x%x 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LOG_LAT_READ",
            "ilog_string": "LAT Read addr %d endPoint %d, Data 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "WRITING_ENDPOINT_DATA1",
            "ilog_string": "writing XSST LA %d, endpoint number %d, endpoint type %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "WRITING_ENDPOINT_DATA2",
            "ilog_string": "value: 0x%x 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "WRITING_ENDPOINT_DATA3",
            "ilog_string": "mask:  0x%x 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FLUSHED_AND_DEALLOCATED_QID",
            "ilog_string": "QID %d flushed and deallocated\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SHOW_XSST_NOT_IN_SYS",
            "ilog_string": "USB %d, Not in-sys\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SHOW_XSST_IN_SYS",
            "ilog_string": "USB %d, LA %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SHOW_XSST_ENDPOINT_ENTRY",
            "ilog_string": "  XSST(%d,%d) = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "SHOW_XSST_ENDPOINT_ENTRY2",
            "ilog_string": "              0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SHOW_XSST_ALL_ZEROES",
            "ilog_string": "  XSST is all zeros\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_IN_BLOCKING",
            "ilog_string": "  IN Blocking set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_OUT_BLOCKING",
            "ilog_string": "  OUT Blocking set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_IN_ERRORS",
            "ilog_string": "  In Errors = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DECODE_XSST_OUT_ERRORS",
            "ilog_string": "  Out Errors = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DECODE_XSST_RETRY_USAGE",
            "ilog_string": "  Retry usage = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DECODE_XSST_BCO",
            "ilog_string": "  BCO set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_BCI",
            "ilog_string": "  BCI set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_EP_INSYS_OVERRIDE",
            "ilog_string": "  Endpoint in-sys override set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_SETUP_RESP_TOGGLE",
            "ilog_string": "  Setup response toggle set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_SETUP_RESP_PENDING",
            "ilog_string": "  Setup response pending set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_SETUP_RESP_STALL",
            "ilog_string": "  Setup response stall set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_INVALID_ENDPOINT_TYPE",
            "ilog_string": "  Invalid Endpoint type %d in XSST entry\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DECODE_XSST_IN_CLEAR",
            "ilog_string": "  IN Clear set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_OUT_CLEAR",
            "ilog_string": "  OUT Clear set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_IN_DETECT",
            "ilog_string": "  IN Detect set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_OUT_DETECT",
            "ilog_string": "  OUT Detect set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_OUT_QID",
            "ilog_string": "  Out QID = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DECODE_XSST_IN_QID",
            "ilog_string": "  In QID = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DECODE_XSST_ALTERNATE_RESPONSE",
            "ilog_string": "  Alternate response set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_ACCELERATION",
            "ilog_string": "  Acceleration set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_LAT_LA_INSYS_VAL",
            "ilog_string": "LA %d: in-sys %d, valid %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DECODE_LAT_VPORT",
            "ilog_string": "  Vport ID %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DECODE_LAT_SPLIT",
            "ilog_string": "  Split device\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_LAT_VFEN",
            "ilog_string": "  Virtual function enabled\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XCSR_NON_ZERO_IN_QID_BEFORE_WRITE",
            "ilog_string": "Nonzero in endpoint QID seen before upstream frame: qid %d @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_NON_ZERO_OUT_QID_BEFORE_WRITE",
            "ilog_string": "Nonzero out endpoint QID seen before upstream frame: qid %d @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ICMD_WRITING_QUEUE",
            "ilog_string": "Write Queue iCmd: Writing a queue with %d bytes of arbitrary data\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UPDATE_ADDRESS",
            "ilog_string": "Updating Address USB:%d,LA:%d,VPORT:%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DECODE_XSST_INOTIFY_COUNT",
            "ilog_string": "  iNotify Count = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DECODE_XSST_ONOTIFY_COUNT",
            "ilog_string": "  oNotify Count = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XCSR_NON_ZERO_INTFYCNT_BEFORE_WRITE",
            "ilog_string": "Nonzero iNotify count seen before upstream frame: count %d @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_NON_ZERO_ONTFYCNT_BEFORE_WRITE",
            "ilog_string": "Nonzero oNotify count seen before upstream frame: count %d @ line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XSST_BITFIELD_CHECK_FAILURE",
            "ilog_string": "XSST bitfield check failed at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XCSR_SHOW_XUSB_ADDRESS_1",
            "ilog_string": "XUSB Address - Logical Address: %d, USB Address: %d, VPort: %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XCSR_SHOW_XUSB_ADDRESS_2",
            "ilog_string": "               USB Valid: %d, In System: %d, Virtual Function: 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LAT_BITFIELD_CHECK_FAILURE",
            "ilog_string": "LAT bitfield check failed at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XSST_CONDITIONAL_WRITE_FAILURE",
            "ilog_string": "XSST conditional write failed! LA%d: USB address %d, endpoint %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DECODE_XSST_IHOST_ACCESS",
            "ilog_string": "  In Host Access set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_OHOST_ACCESS",
            "ilog_string": "  Out Host Access set\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "Q_UNDERFLOW_ERROR_DETAILS",
            "ilog_string": "A queue underflow occurred while performing operation %d (0=READ,1=WRITE) on Q ID %d from interface %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "Q_OVERFLOW_ERROR_DETAILS",
            "ilog_string": "A queue overflow occurred while performing operation %d (0=READ,1=WRITE) on Q ID %d from interface %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XCSR_READ_EMPTY_Q",
            "ilog_string": "Tried to read an empty queue (%d) at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_QID",
            "ilog_string": "Received an invalid qid (%d) at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_ASSERT_Q_STATS",
            "ilog_string": "--- XCSR Non-Empty Queue Stats: ---\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XCSR_ASSERT_Q_STATS_1",
            "ilog_string": "Qid %d: frame count 0x%x, word count 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "XCSR_ASSERT_Q_STATS_2",
            "ilog_string": "    data0 0x%x, data1 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XICSSTATUS",
            "ilog_string": "Xics Status : Qid %d Sid %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XUSBIRQ_XCRMNOTINSYS",
            "ilog_string": "We got an upstream packet for an endpoint that is not in sys\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCRMAFIFOUFLOW",
            "ilog_string": "The xcrm fifo has underflowed, damn fifo!!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCRMAFIFOOFLOW",
            "ilog_string": "The xcrm fifo has overflowed, who designed this thing!!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCRMAFIFOSYNC",
            "ilog_string": "The xcrm fifo synced?? what is that, a disease?\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCRMDROPFRM",
            "ilog_string": "The xcrm has dropped a frame, why?\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCRMFRAMING",
            "ilog_string": "xcrm framing error, how lame!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCRMFRMCRC",
            "ilog_string": "xcrm frame crc error, how scary\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCRMPLDCRC",
            "ilog_string": "xcrm payload error, ouch\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCRMTOUT",
            "ilog_string": "xcrm time out, canucks suck!!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCTMAFIFOUFLOW",
            "ilog_string": "The xctm fifo has underflowed, stupid fifo\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCTMAFIFOOFLOW",
            "ilog_string": "The xctm fifo has overflowed, Ken is this your??\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XUSBIRQ_XCTMPKT",
            "ilog_string": "xctm packet framing error, boring!\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "IRQ2XICSSIDAEMPTYNTHRESH",
            "ilog_string": "Below XICS SID almost empty low threshold\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLC_EVENT_LOCAL_INTERRUPT",
            "ilog_string": "Received local flow control event interrupt\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLC_EVENT_REMOTE_INTERRUPT",
            "ilog_string": "Received remote flow control event interrupt\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_ENDPOINT_CTRL_IN",
            "ilog_string": "  Endpoint type: CTRL IN\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_ENDPOINT_ISO_IN",
            "ilog_string": "  Endpoint type: ISO IN\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_ENDPOINT_BULK_IN",
            "ilog_string": "  Endpoint type: BULK IN\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_ENDPOINT_INT_IN",
            "ilog_string": "  Endpoint type: INT IN\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_ENDPOINT_CTRL_OUT",
            "ilog_string": "  Endpoint type: CTRL OUT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_ENDPOINT_ISO_OUT",
            "ilog_string": "  Endpoint type: ISO OUT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_ENDPOINT_BULK_OUT",
            "ilog_string": "  Endpoint type: BULK OUT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_ENDPOINT_INT_OUT",
            "ilog_string": "  Endpoint type: INT OUT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_MSAPAIREP",
            "ilog_string": "  MSA Paired Endpoint: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DECODE_XSST_INT_COPYTOCPU",
            "ilog_string": "  Copy IN response data to CPU\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "DECODE_XSST_INT_FULLHALFRATE",
            "ilog_string": "  Standard forwarding to maximize effective polling rate\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XCSR_VP_LINK_DOWN",
            "ilog_string": "Vport %d down.  Cleaning up flow control rules.\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RELEASE_RETRY",
            "ilog_string": "In XSST Reset, releasing Retry Buffers for USB Addr: %d, Endpoint: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCSR_SPECTAREG_READ",
            "ilog_string": "Read XCSR Register: 0x%x, Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XCTM_DISABLE_FAILURE",
            "ilog_string": "Unable to disable the XCTM\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XICS_READ_Q_SNOOP_ERR",
            "ilog_string": "Unable to snoop queue: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IRQ2XURMPKTLIMIT",
            "ilog_string": "IRQ2XURMPKTLIMIT\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "XICS_SENDING_CSPLIT_TOWARDS_HS_DEVICE",
            "ilog_string": "Sending a CSPLIT towards a high speed device?! Device address = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XCSR_DEALLOCATED_STATIC_QUEUE",
            "ilog_string": "Attempted to deallocate a static queue: qid %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XCSR_MSA_OUT_INT_IN_DISABLED_OPTIMIZED_NAK",
            "ilog_string": "Disabled optimized NAK for endpoint %d at USB address %d\n",
            "ilog_num_args": 2
        }
    ],
    "XLR_COMPONENT": [
        {
            "ilog_name": "INVALID_ID",
            "ilog_string": "There is an invalid ID in the ID register\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_CVS_MAJOR",
            "ilog_string": "Invalid register CVS Major value, read %d, expecting %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_CVS_MINOR",
            "ilog_string": "Invalid register CVS Minor value, read %d, expecting %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "FLOW_CONTROL_CTRL_OUT",
            "ilog_string": "ctrl out flow control dropped %d packets\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLOW_CONTROL_CTRL_OUT_OVERFLOW",
            "ilog_string": "ctrl out flow control dropped counter overflowed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLOW_CONTROL_INTRP_OUT",
            "ilog_string": "interrupt out flow control dropped %d packets\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLOW_CONTROL_INTRP_OUT_OVERFLOW",
            "ilog_string": "interrupt out flow control dropped counter overflowed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLOW_CONTROL_ISO_OUT",
            "ilog_string": "iso out flow control dropped %d packets\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLOW_CONTROL_ISO_OUT_OVERFLOW",
            "ilog_string": "iso out flow control dropped counter overflowed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLOW_CONTROL_BULK_OUT",
            "ilog_string": "bulk out flow control dropped %d packets\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLOW_CONTROL_BULK_OUT_OVERFLOW",
            "ilog_string": "bulk out flow control dropped counter overflowed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLOW_CONTROL_CTRL_IN",
            "ilog_string": "ctrl in flow control dropped %d packets\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLOW_CONTROL_CTRL_IN_OVERFLOW",
            "ilog_string": "ctrl in flow control dropped counter overflowed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLOW_CONTROL_INTRP_IN",
            "ilog_string": "interrupt in flow control dropped %d packets\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLOW_CONTROL_INTRP_IN_OVERFLOW",
            "ilog_string": "interrupt in flow control dropped counter overflowed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLOW_CONTROL_ISO_IN",
            "ilog_string": "iso in flow control dropped %d packets\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLOW_CONTROL_ISO_IN_OVERFLOW",
            "ilog_string": "iso in flow control dropped counter overflowed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "FLOW_CONTROL_BULK_IN",
            "ilog_string": "bulk in flow control dropped %d packets\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FLOW_CONTROL_BULK_IN_OVERFLOW",
            "ilog_string": "bulk in flow control dropped counter overflowed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "LEX_FATAL_INTERRUPT",
            "ilog_string": "Fatal Lex interrupt, interrupt flag register is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_READ_LAT",
            "ilog_string": "Read MSA LAT: usbAddr %d, logicalAddr %d, valid %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_READ_PTR_TABLE",
            "ilog_string": "Read MSA Pointer Table: usbAddr %d, endpoint %d, pointer %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_ALLOCATE_PTR",
            "ilog_string": "MSA Allocated pointer %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_READ_MST",
            "ilog_string": "Read MSA MST: usbAddr %d, endpoint %d, value 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MSA_INIT_BAD_PTR",
            "ilog_string": "MSA initialization got ptr %d instead of 0\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_FREE_BAD_PTR",
            "ilog_string": "MSA Free Pointer is trying to free a null pointer\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_FREE_FAILED",
            "ilog_string": "MSA Free Pointer failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MSA_ALLOCATE_PTR_FAILED",
            "ilog_string": "MSA Allocate Pointer failed.  Out of pointers?\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "RELEASE_RETRY_BUF",
            "ilog_string": "Releasing retry buffer %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RELEASE_RETRY_BUF_INVALID",
            "ilog_string": "Releasing retry buffer %d is invalid\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MSA_CLR_STS_TABLE",
            "ilog_string": "MSA Clear Status Table for usbAddr %d, endpoint %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XLR_SPECTAREG_READ",
            "ilog_string": "Read XLR Register: 0x%x, Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XLR_NOTIFY_MAX",
            "ilog_string": "Maximum notify counts - In: %d, Out: %d\n",
            "ilog_num_args": 2
        }
    ],
    "XRR_COMPONENT": [
        {
            "ilog_name": "XREX_ENABLE",
            "ilog_string": "Enable Rex, RexCtrl is going from 0x%x to 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XREX_DISABLE",
            "ilog_string": "Disabling Rex, RexCtrl is going from 0x%x to 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_ID",
            "ilog_string": "There is an invalid ID in the ID register\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_CVS_MAJOR",
            "ilog_string": "Invalid register CVS Major value, read %d, expecting %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_CVS_MINOR",
            "ilog_string": "Invalid register CVS Minor value, read %d, expecting %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XRR_SPECTAREG_READ",
            "ilog_string": "Read XRR Register: 0x%x, Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XRR_BITFIELD_CHECK_FAILURE",
            "ilog_string": "Checking XRR bitfields failed at line: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "XRR_XRT_DEBUG_DUMP_1",
            "ilog_string": "XrtDebug  LastSentAddress=%d, LastSentEndpoint=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "XRR_XRT_DEBUG_DUMP_2",
            "ilog_string": "          LastSentAction=%d, LastSentDataQid=%d, LastResponse=%d\n",
            "ilog_num_args": 3
        }
    ],
    "CLM_COMPONENT": [
        {
            "ilog_name": "REG_FAILURE",
            "ilog_string": "Failure verifying registers\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CLM_INVALID_XUSB_CHIP_MINOR_REVISION_ERROR_LOG",
            "ilog_string": "Invalid minor XUSB chip revision, expecting 0x%x, read 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CLM_INVALID_XUSB_CHIP_MAJOR_REVISION_ERROR_LOG",
            "ilog_string": "Invalid major XUSB chip revision, expecting 0x%x, read 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_CFG",
            "ilog_string": "Invalid configuration %d selected\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CFG_TBI",
            "ilog_string": "Configuring CLM for TBI\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CFG_GMII",
            "ilog_string": "Configuring CLM for GMII\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CFG_MII",
            "ilog_string": "Configuring CLM for MII\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CFG_CLEI8",
            "ilog_string": "Configuring CLM for CLEI8\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CFG_CLEI1",
            "ilog_string": "Configuring CLM for CLEI1\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CFG_CLEI2",
            "ilog_string": "Configuring CLM for CLEI2\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CFG_CLEI4",
            "ilog_string": "Configuring CLM for CLEI4\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "VPORT_ENABLE",
            "ilog_string": "VPort Enable %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VPORT_DISABLE",
            "ilog_string": "VPort Disable %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "VPORT_POSTPONE_ENABLE",
            "ilog_string": "VPort Enable %d is being postponed\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "RX_STATS_REG",
            "ilog_string": "RX Stats reg is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TX_STATS_REG",
            "ilog_string": "TX Stats reg is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_VPORT_STATE_TRANSITION",
            "ilog_string": "Invalid vport state transition for vport %d from state %d to state %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ENABLE_DEFAULT_INTERRUPTS",
            "ilog_string": "Enabling default interrupts\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CLM_LEX_VPORT_DST",
            "ilog_string": "Setting LEX vport %d destination MAC address: MSW=0x%x LSW=0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "CLM_VPORT_ALREADY_ENABLED",
            "ilog_string": "Trying to enable VPort %d, but it is already enabled\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ADJUST_TX_WAIT_4_RESP_THRES_OLD",
            "ilog_string": "Adjust TX wait for response threshold FROM GMII=%d, MII=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ADJUST_TX_WAIT_4_RESP_THRES_NEW",
            "ilog_string": "Adjust TX wait for response threshold TO GMII=%d, MII=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CLM_SPECTAREG_READ",
            "ilog_string": "Read CLM Register: 0x%x, Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ADJUST_TX_WAIT_4_RESP_LIMIT_OLD",
            "ilog_string": "Adjust TX wait for response limit FROM limit=%d, CntThresh=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ADJUST_TX_WAIT_4_RESP_LIMIT_NEW",
            "ilog_string": "Adjust TX wait for response limit TO limit=%d, CntThresh=%d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_ICMD_SETTING",
            "ilog_string": "Invalid icmd setting %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ADJUST_TX_QID_THRESH",
            "ilog_string": "Adjust TX QID THRESH from %d to %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CLM_SETTING_SRC_MAC_ADDR",
            "ilog_string": "Setting the source MAC address to MSW=0x%x, LSW=0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "REDUCED_PIN_COUNT",
            "ilog_string": "Setting reduced pin count mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CFG_LTBI",
            "ilog_string": "Configuring CLM for LTBI\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "PHY_SPEED",
            "ilog_string": "Measured PHY speed is: %dMHz, Timeout value is: %dus, Register=%d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "ETHERTYPE_LOG",
            "ilog_string": "Wrote CLM.EtherType with value 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "READ_UNINITIALIZED_LINK_TYPE",
            "ilog_string": "Tried to use uninitialized link type %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CLM_UNEXPECTED_CTM_INPUT_CLK_FREQ",
            "ilog_string": "CTM input clock frequency is unexpected, frequency in MHz = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CTM_INPUT_CLK_FREQ",
            "ilog_string": "The CTM input reference clock frequency is %d MHz\n",
            "ilog_num_args": 1
        }
    ],
    "ULM_COMPONENT": [
        {
            "ilog_name": "ULM_SPEED_INVALID_ERROR_LOG",
            "ilog_string": "Speed is invalid\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_INVALID_REV",
            "ilog_string": "Invalid ULM revision\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_INVALID_CVS_REV",
            "ilog_string": "Invalid ULM CVS revision\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_INIT_LEX",
            "ilog_string": "LEX - ULM Init\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_INIT_REX",
            "ilog_string": "REX - ULM Init\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_INTERRUPT",
            "ilog_string": "ULM interrupt triggered by 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CTRL_BITS_LEFT_SET",
            "ilog_string": "Ctrl bits were left set. ctrlReg is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "WRITING_CTRL_REG",
            "ilog_string": "Writing control reg as 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ULM_SPECTAREG_READ",
            "ilog_string": "Read ULM Register: 0x%x, Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ULM_DISCON_USBPORT_DC",
            "ilog_string": "ULM_DISCON - ULM OFF\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ULM_DISCON_USBPORT_CON",
            "ilog_string": "ULM_DISCON - ULM ON\n",
            "ilog_num_args": 0
        }
    ],
    "GRG_COMPONENT": [
        {
            "ilog_name": "GPIO_INIT",
            "ilog_string": "Initializing GPIO, direction reg 0x%x, output bits 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GPIO_PULSE_TIMER",
            "ilog_string": "Pulsing GPIOs, mask 0x%x, read 0x%x, writing 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GPIO_READ",
            "ilog_string": "GPIO_READ pin %d, bool val 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GPIO_SET",
            "ilog_string": "GPIO_SET pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GPIO_CLEAR",
            "ilog_string": "GPIO_CLEAR pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GPIO_PULSE",
            "ilog_string": "GPIO_PULSE pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FREQ_MEASURE",
            "ilog_string": "Measuring PLL %d, XUSB is %d, CXM is %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_ICMD_WRITE",
            "ilog_string": "Writing to MDIO device %d, address 0x%x, with data 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "INVALID_ICMD_ARG",
            "ilog_string": "Invalid icmd arg 0x%x received\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PLL_MEASUREMENT",
            "ilog_string": "Measured %d difference in clock ticks, xusb %d, cxm %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "INVALID_MODULE",
            "ilog_string": "Invalid module used at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "REG_FAILURE",
            "ilog_string": "Invalid register ID/Rev at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_GRG_CHIP_MINOR_REVISION_ERROR_LOG",
            "ilog_string": "Invalid minor GRG chip revision, expecting 0x%x, read 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_GRG_CHIP_MAJOR_REVISION_ERROR_LOG",
            "ilog_string": "Invalid major GRG chip revision, expecting 0x%x, read 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_PIN",
            "ilog_string": "Invalid Pin number %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "UNSUPPORTED_VARIANT_ID",
            "ilog_string": "Unsupported variant ID = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_ICMD_READ_START",
            "ilog_string": "Reading MDIO device %d, address %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MDIO_ICMD_READ_DONE",
            "ilog_string": "Read MDIO, returned data 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_I2C_FIFO_OVER_FLOW",
            "ilog_string": "MDIO/I2C fifo overflow\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIO_I2C_OPERATIONS",
            "ilog_string": "MDIO/I2C: %d operations in progress, current operation: header 0x%x, mdio/i2c op 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_I2C_NO_OPERATIONS",
            "ilog_string": "MDIO/I2C: no operations in progress\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WAKE_LOG",
            "ilog_string": "i2c: performing wake on bus %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_WAKE_DONE",
            "ilog_string": "i2c: wake done\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_READ",
            "ilog_string": "i2c: read of bus %d, device %d, for %d bytes\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "I2C_READ_DONE",
            "ilog_string": "i2c: done read %d bytes, contents 0x%x 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "I2C_READ_FAILED",
            "ilog_string": "i2c: read failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WRITE",
            "ilog_string": "i2c: write bus %d, device %d, byteCount %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "I2C_WRITE_DONE",
            "ilog_string": "i2c: write complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WRITE_FAILED",
            "ilog_string": "i2c: write failed\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_TRN_ERROR",
            "ilog_string": "i2c: TRN ERR\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TIME_MARKER_MDIO_START",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing mdioStart\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_I2C_START",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing i2cStart\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_I2C_WAKE_START",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing i2c wake start\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_I2C_WAKE_STOP",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing \n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_FINALIZE_OP",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing finalize operation\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIME_MARKER_SUBMIT_OP",
            "ilog_string": "*** TIME MARK *** %d microseconds since last time mark.  Currently processing submit operation\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_I2C_INVALID_TASK_STATE",
            "ilog_string": "mdio/i2c: invalid state at line %d, header 0x%x, mdio/i2c op 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "I2C_READ_TOO_MANY_BYTES",
            "ilog_string": "i2c read too many bytes. Expected %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GRG_IRQ_LOG",
            "ilog_string": "Interrupts 0x%x triggered\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GRG_IRQ_UNSERVICED",
            "ilog_string": "Interrupts 0x%x were unserviced\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "IRQ_HANDLER_NOT_SET",
            "ilog_string": "Interrupt Handler is not set for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "REGISTERING_IRQ",
            "ilog_string": "Registering Interrrupt handler for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "SERVICING_IRQ",
            "ilog_string": "Servicing Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DISABLING_IRQ",
            "ilog_string": "Disabling Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ENABLING_IRQ",
            "ilog_string": "Enabling Interrupt for pin %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_START_READ",
            "ilog_string": "MDIO start read: dev %d, addr %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MDIO_START_WRITE",
            "ilog_string": "MDIO start write: dev %d, addr %d, data 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_FINISH",
            "ilog_string": "MDIO finished, data is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_START_READ",
            "ilog_string": "I2C read started for %d bytes\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_START_WRITE",
            "ilog_string": "I2C write started\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_READ_FINISH",
            "ilog_string": "I2C read finished\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WRITE_FINISH",
            "ilog_string": "I2C write finished\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_DO_WAKE_OP",
            "ilog_string": "I2C do wake op %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_WAKE_COMPLETE",
            "ilog_string": "I2C wake complete\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "I2C_WRITE2",
            "ilog_string": "i2c write data is 0x%x 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "I2C_MDIO_CONTROLREG_READ",
            "ilog_string": "I2C/MDIO Control Reg is 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_START_WRITE_READ",
            "ilog_string": "I2C writeRead started for %d bytes to write, %d bytes to read\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "MDIO_I2C_OPERATIONS_QUEUED",
            "ilog_string": "MDIO/I2C: %d operations queued, nothing in progress\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "I2C_START_WRITE_READ_BLOCK",
            "ilog_string": "I2C writeReadBlock started for %d bytes to write, sizeof(read buffer) = %d bytes\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GRG_SPECTAREG_READ",
            "ilog_string": "Read GRG Register: 0x%x, Value: 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_PLL",
            "ilog_string": "Invalid PLL %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FREQ_MEASURE_CLM",
            "ilog_string": "Measured CLM PLL: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FREQ_MEASURE_CTM",
            "ilog_string": "Measured CTM PLL: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "FREQ_MEASURE_CRM",
            "ilog_string": "Measured CRM PLL: %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MDIO_I2C_OPERATIONS_FINALIZE",
            "ilog_string": "MDIO/I2C: %d operations in progress, finalizing operation: arg1 0x%x, arg2 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_I2C_QUEUED_OPERATION",
            "ilog_string": "MDIO/I2C: queued operation: header 0x%x, mdio/i2c op 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "PLL2_READ",
            "ilog_string": "PLL Read config 2 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "PLL2_WRITE",
            "ilog_string": "PLL Write config2 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INT16_DIVIDE",
            "ilog_string": "Quotient is: %d, Remainder is: %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DIVIDE_BY_ZERO",
            "ilog_string": "Fatal: divide by zero\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INT16_MULTIPLY",
            "ilog_string": "Result of multiply is %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "MEAS_PLL_FREQ",
            "ilog_string": "Measured frequency of PLL %d is %dMHz\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SYNC_MDIO_READ_FIFO_NOT_EMPTY",
            "ilog_string": "Requested to do a synchronous MDIO read while other jobs pending\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SYNC_MDIO_WRITE_FIFO_NOT_EMPTY",
            "ilog_string": "Requested to do a synchronous MDIO write while other jobs pending\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "MDIO_SYNC_WRITE",
            "ilog_string": "Wrote data 0x%x to MDIO address %d register %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MDIO_SYNC_READ",
            "ilog_string": "Read data 0x%x from MDIO address %d register %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "INVALID_CLMTX_DRIVE_STR",
            "ilog_string": "Invalid CLM TX drive strength GPIO setting %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GRG_PLATFORM_AND_VARIANT_ID",
            "ilog_string": "Chip platform id=%d, variant id=%d.\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DRIVE_STRENGTH",
            "ilog_string": "Drive strength read from GPIO = %d, drive strength written to register = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "GRG_READ_UNSUPPORTED_PIN",
            "ilog_string": "Reading hardware pin is not supported on this platform/variant.  Line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LED_SET_LOCATOR",
            "ilog_string": "Set LED locator pattern: lockMode = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LED_CLEAR_LOCATOR",
            "ilog_string": "Clear LED locator pattern: lockMode = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LED_SET",
            "ilog_string": "Set LED: id = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LED_CLEAR",
            "ilog_string": "Clear LED: id = %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "LED_PULSE",
            "ilog_string": "Pulse LED: id = %d and rate = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "LED_UPDATE",
            "ilog_string": "Update LED: id = %d, state = %d, lockMode = %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LED_UNKNOWN_ID",
            "ilog_string": "Unknow LED: id = %d\n",
            "ilog_num_args": 1
        }
    ],
    "TIMING_COMPONENT": [
        {
            "ilog_name": "TIMING_MAXIMUM_HANDLERS_REGISTERED",
            "ilog_string": "The maximum number of timers are already registered\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "SHOW_TIMERS1",
            "ilog_string": "Timer 0x%x has callback 0x%x, and is set for %d ms\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "START_TIMER",
            "ilog_string": "Starting timer 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "STOP_TIMER",
            "ilog_string": "Stopping timer 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CHANGE_TIMEOUT",
            "ilog_string": "Changing timer 0x%x timeout to %d ms\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "NULL_TIMER_ARG_LINE",
            "ilog_string": "Called with a NULL timer arg, at line %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TIMING_INTERNAL_STATE",
            "ilog_string": "Internal state: lastIteration = %d, tickCounter = %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "SHOW_TIMERS3",
            "ilog_string": "         is enabled %d, is periodic %d, set to expire at tick %d\n",
            "ilog_num_args": 3
        }
    ],
    "TASKSCH_COMPONENT": [
        {
            "ilog_name": "INIT_TASK",
            "ilog_string": "Initializing task 0x%x, with task function 0x%x and with arg 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "INIT_TASK2",
            "ilog_string": "Setting task 0x%x to allowInterrupts %d, and priority %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "TOO_MANY_TASKS",
            "ilog_string": "Too many tasks are being allocated\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "INVALID_PRIORITY_INIT",
            "ilog_string": "Invalid priority %d in initialization\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_PRIORITY_SETTING",
            "ilog_string": "Invalid priority %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "START",
            "ilog_string": "Starting task 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "STOP",
            "ilog_string": "Stopping task 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CHANGE_TASK_ARG",
            "ilog_string": "Changing task 0x%x arg to 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CHANGE_TASK_PRIORITY",
            "ilog_string": "Changing task 0x%x priority to 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "VIEW_TASK1",
            "ilog_string": "Task 0x%x: runs task function 0x%x, with arg 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VIEW_TASK2",
            "ilog_string": "Task 0x%x: runs at priority %d, with allowInterrupts %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "VIEW_TASK4",
            "ilog_string": "Task 0x%x: is at index %d, & has onRunQueue set to %d\n",
            "ilog_num_args": 3
        }
    ],
    "RANDOM_COMPONENT": [
        {
            "ilog_name": "ADD_ENTROPY",
            "ilog_string": "Add random number 0x%.2x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GET_ASYNCRAND",
            "ilog_string": "Get random number asynchronously",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CANT_ADD_ANOTHER_CALLBACK",
            "ilog_string": "Can't add another callback\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "GET_QUICK_PSEUDO_RANDOM",
            "ilog_string": "Got pseudo random number 0x%x\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_SEED",
            "ilog_string": "Invalid seed\n",
            "ilog_num_args": 0
        }
    ],
    "ILOG_COMPONENT": [
        {
            "ilog_name": "INVALID_COMPONENT",
            "ilog_string": "ILOG Received an invalid component %d from line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_LEVEL",
            "ilog_string": "ILOG Received an invalid logging level %d from line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "TOO_MANY_ARGS",
            "ilog_string": "ILOG Received too many args, %d to be exact\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "GET_LEVEL",
            "ilog_string": "Component %d is at logging level %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "COPROC_REG_DUMP",
            "ilog_string": "Sparc reg dump:           TBR = 0x%x, PSR = 0x%x, WIM = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GLOBAL_REG_DUMP",
            "ilog_string": "Sparc reg dump:           %%g5 = 0x%x, %%g6 = 0x%x, %%g7 = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GEN_REG_DUMP0",
            "ilog_string": "Sparc reg dump for win %2d:%%l0 = 0x%x, %%l1 = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GEN_REG_DUMP1",
            "ilog_string": "Sparc reg dump:           %%l2 = 0x%x, %%l3 = 0x%x, %%l4 = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GEN_REG_DUMP2",
            "ilog_string": "Sparc reg dump:           %%l5 = 0x%x, %%l6 = 0x%x, %%l7 = 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "GEN_REG_DUMP3",
            "ilog_string": "Sparc reg dump for win %2d:%%i0 = 0x%x, %%i1 = 0x%x\n",
            "ilog_num_args": 5
        },
        {
            "ilog_name": "GEN_REG_DUMP4",
            "ilog_string": "Sparc reg dump:           %%i2 = 0x%x, %%i3 = 0x%x, %%i4 = 0x%x\n",
            "ilog_num_args": 6
        },
        {
            "ilog_name": "GEN_REG_DUMP5",
            "ilog_string": "Sparc reg dump:           %%i5 = 0x%x, %%i6 = 0x%x, %%i7 = 0x%x\n",
            "ilog_num_args": 6
        },
        {
            "ilog_name": "SET_BLOCKING_MODE",
            "ilog_string": "Setting ilog blocking mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "CLEAR_BLOCKING_MODE",
            "ilog_string": "Clearing ilog blocking mode\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "TEST_ASSERT",
            "ilog_string": "Icmd run for testing asserts.  Args are %d, %d, %d\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "LOG_LEVEL_CHANGED",
            "ilog_string": "Changing logging level for component %d to level %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "INVALID_COMPONENT_ILOG_MAIN",
            "ilog_string": "ILOG main logging function received an invalid component %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_LEVEL_ILOG_MAIN",
            "ilog_string": "ILOG main logging function received an invalid logging level %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ILOG_MSG_DROPPED",
            "ilog_string": "ILOG message dropped\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ASSERT_STATUS1",
            "ilog_string": "Assert status: preAssertHookFunction is 0x%x, postAssertHookFunction is 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "ASSERT_STATUS2",
            "ilog_string": "Assert status: no asserts have occured\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ASSERT_STATUS3",
            "ilog_string": "Assert status: %d asserts have occured, last assert message was:\n",
            "ilog_num_args": 1
        }
    ],
    "ICMD_COMPONENT": [
        {
            "ilog_name": "INVALID_HEADER",
            "ilog_string": "Received 0x%x, when expecting an icmd header\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "INVALID_COMPONENT",
            "ilog_string": "Received %d, when expecting a component\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "TOO_MANY_ARGS",
            "ilog_string": "Too many args %d in icmd request\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "CUROFFSET_CORRUPTED",
            "ilog_string": "curOffset with value %d, is corrupt at line %d\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "CALLING_HANDLER",
            "ilog_string": "Calling function 0x%x, with 1st two args 0x%x, 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "RECVD_ICMD",
            "ilog_string": "Received icmd for component %d, function %d, with %d arguments\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "NO_ICMD_FCN_PTR_ARRAY",
            "ilog_string": "No icmd function pointer array found for component %d\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "ICMD_TIMEOUT",
            "ilog_string": "icmd message timed out. Resetting receive buffer\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BASE_READ_MEM",
            "ilog_string": "Read address 0x%x: value 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BASE_WRITE_MEM",
            "ilog_string": "Wrote address 0x%x: value 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "DEPRECATED_ICMD_TIMER_REGISTER_FAILURE",
            "ilog_string": "Unable to register icmd timer\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "ICMD_TIMER_NOT_REGISTERED",
            "ilog_string": "ICmd timer is not register, did no one call ICMD_Init()?\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BASE_READ_MODIFY_WRITE",
            "ilog_string": "Read-Modify-Write address 0x%x: Read value 0x%x, Write value 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BASE_READ_MODIFY_WRITE_CONFLICT_MASKS",
            "ilog_string": "Read-Modify-Write for address 0x%x has conflicting bits in set bitfields 0x%x and clear bitfields0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BASE_MODIFY_BITFIELD",
            "ilog_string": "Modify bitfield for address 0x%x starting at position %i for width %i bits\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "MODIFY_BITFIELD_RESULT",
            "ilog_string": "Write value: 0x%x, Read value: 0x%x, New value 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "DUMP_MEMORY_ADDR_INVALID",
            "ilog_string": "Address 0x%x is not a valid 32bit memory location\n",
            "ilog_num_args": 1
        },
        {
            "ilog_name": "DEPRECATED_ICMD",
            "ilog_string": "This iCommand is no longer available\n",
            "ilog_num_args": 0
        },
        {
            "ilog_name": "BASE_READ_MEM16",
            "ilog_string": "Read address 0x%x: value 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BASE_WRITE_MEM16",
            "ilog_string": "Wrote address 0x%x: value 0x%x\n",
            "ilog_num_args": 2
        },
        {
            "ilog_name": "BASE_READ_MODIFY_WRITE16",
            "ilog_string": "Read-Modify-Write address 0x%x: Read value 0x%x, Write value 0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "BASE_READ_MODIFY_WRITE_CONFLICT_MASKS16",
            "ilog_string": "Read-Modify-Write for address 0x%x has conflicting bits in set bitfields 0x%x and clear bitfields0x%x\n",
            "ilog_num_args": 3
        },
        {
            "ilog_name": "JUNK_TIMER_EXPIRED_REENABLING_PROCESSING",
            "ilog_string": "Junk timer expired.  Re-enabling processing of icmds\n",
            "ilog_num_args": 0
        }
    ]
}