//**********************************************************
// Generated by SpectaReg from PDTi (www.productive-eda.com)
// SpectaReg Revision: 579
// Generated from ViewFileTemplate at: comp_mmreg_macro.h.gen
// ViewFileTemplate Revision: 767
// Generation date: Thu Aug 23 18:55:28 GMT 2012
//**********************************************************

/**************************************************************************
 *  This is a GENERATED registerMap C/C++ header file for the
 *  XRR Component.  Use the Macros in this file
 *  to read and write Registers and BitFields.
 **************************************************************************/

#ifndef __XRR_MMREG_MACRO_H__
#define __XRR_MMREG_MACRO_H__

#include "common_mmreg_access.h"

/* CMacroHeaderView.RegOffsetDefVP per Register (and subclasses) */
/**
 * Offset for the Id Register
 */
#define XRR_XRR_ID_REG_OFFSET 0  /*0x0*/
/**
 * Offset for the Rev Register
 */
#define XRR_XRR_REV_REG_OFFSET 4  /*0x4*/
/**
 * Offset for the IntEn Register
 */
#define XRR_XRR_INTEN_REG_OFFSET 8  /*0x8*/
/**
 * Offset for the IntFlg Register
 */
#define XRR_XRR_INTFLG_REG_OFFSET 12  /*0xc*/
/**
 * Offset for the IntSrc Register
 */
#define XRR_XRR_INTSRC_REG_OFFSET 16  /*0x10*/
/**
 * Offset for the IntClr Register
 */
#define XRR_XRR_INTCLR_REG_OFFSET 20  /*0x14*/
/**
 * Offset for the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_REG_OFFSET 24  /*0x18*/
/**
 * Offset for the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_REG_OFFSET 28  /*0x1c*/
/**
 * Offset for the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_REG_OFFSET 32  /*0x20*/
/**
 * Offset for the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_REG_OFFSET 36  /*0x24*/
/**
 * Offset for the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_REG_OFFSET 40  /*0x28*/
/**
 * Offset for the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_REG_OFFSET 44  /*0x2c*/
/**
 * Offset for the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_REG_OFFSET 48  /*0x30*/
/**
 * Offset for the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_REG_OFFSET 52  /*0x34*/
/**
 * Offset for the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_REG_OFFSET 56  /*0x38*/
/**
 * Offset for the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_REG_OFFSET 60  /*0x3c*/
/**
 * Offset for the HSEofTime1 Register
 */
#define XRR_XRR_HSEOFTIME1_REG_OFFSET 64  /*0x40*/
/**
 * Offset for the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_REG_OFFSET 68  /*0x44*/
/**
 * Offset for the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_REG_OFFSET 72  /*0x48*/
/**
 * Offset for the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_REG_OFFSET 76  /*0x4c*/
/**
 * Offset for the Schedule Register
 */
#define XRR_XRR_SCHEDULE_REG_OFFSET 80  /*0x50*/
/**
 * Offset for the TxCtrl Register
 */
#define XRR_XRR_TXCTRL_REG_OFFSET 84  /*0x54*/
/**
 * Offset for the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_REG_OFFSET 88  /*0x58*/
/**
 * Offset for the SofDbg1 Register
 */
#define XRR_XRR_SOFDBG1_REG_OFFSET 92  /*0x5c*/
/**
 * Offset for the RdFrmHdrMSA Register
 */
#define XRR_XRR_RDFRMHDRMSA_REG_OFFSET 96  /*0x60*/

#define XRR_XRR_XRTDEBUG_REG_OFFSET 0x0064

/* CMacroHeaderView.RegArrayOffsetDefVP per Register (and subclasses) */


/* CMacroHeaderView.RegBfDefsVP per Register (and subclasses) */
/***********************************************************
  BitFields defs from the Id Register
***********************************************************/
/**
 * The Shift for Id in the Id Register
 */
#define XRR_XRR_ID_ID_BF_SHIFT 0
/**
 * The mask for Id in the Id Register
 * Binary value of mask is 11111111111111111111111111111111
 */
#define XRR_XRR_ID_ID_BF_MASK 0xFFFFFFFF



/**
 * Reset value for Id in the Id Register
 */
#define XRR_XRR_ID_ID_BF_RESET 0x5F585252

/***********************************************************
  BitFields defs from the Rev Register
***********************************************************/
/**
 * The Shift for CvsMajor in the Rev Register
 */
#define XRR_XRR_REV_CVSMAJOR_BF_SHIFT 8
/**
 * The Shift for CvsMinor in the Rev Register
 */
#define XRR_XRR_REV_CVSMINOR_BF_SHIFT 0
/**
 * The mask for CvsMajor in the Rev Register
 * Binary value of mask is 00000000000000001111111100000000
 */
#define XRR_XRR_REV_CVSMAJOR_BF_MASK 0x0000FF00


/**
 * The mask for CvsMinor in the Rev Register
 * Binary value of mask is 00000000000000000000000011111111
 */
#define XRR_XRR_REV_CVSMINOR_BF_MASK 0x000000FF



/**
 * Reset value for CvsMajor in the Rev Register
 */
#define XRR_XRR_REV_CVSMAJOR_BF_RESET 0x00000000


/**
 * Reset value for CvsMinor in the Rev Register
 */
#define XRR_XRR_REV_CVSMINOR_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the IntEn Register
***********************************************************/
/**
 * The Shift for Irq1StatCntErrOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_SHIFT 11
/**
 * The Shift for Irq1StatCntFlcOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT 10
/**
 * The Shift for Irq1StatCntOutOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT 9
/**
 * The Shift for Irq1StatCntInOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_SHIFT 8
/**
 * The Shift for Irq0RexSOF in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXSOF_BF_SHIFT 4
/**
 * The Shift for Irq0RexRdFrmHdrMSA in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_SHIFT 3
/**
 * The Shift for Irq0RexRdFrmHdrPer in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_SHIFT 2
/**
 * The Shift for Irq0RexRdFrmHdrAsync in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_SHIFT 1
/**
 * The Shift for Irq0RexDevResp in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_SHIFT 0
/**
 * The mask for Irq1StatCntErrOverflow in the IntEn Register
 * Binary value of mask is 00000000000000000000100000000000
 */
#define XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_MASK 0x00000800


/**
 * The mask for Irq1StatCntFlcOverflow in the IntEn Register
 * Binary value of mask is 00000000000000000000010000000000
 */
#define XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_MASK 0x00000400


/**
 * The mask for Irq1StatCntOutOverflow in the IntEn Register
 * Binary value of mask is 00000000000000000000001000000000
 */
#define XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_MASK 0x00000200


/**
 * The mask for Irq1StatCntInOverflow in the IntEn Register
 * Binary value of mask is 00000000000000000000000100000000
 */
#define XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_MASK 0x00000100


/**
 * The mask for Irq0RexSOF in the IntEn Register
 * Binary value of mask is 00000000000000000000000000010000
 */
#define XRR_XRR_INTEN_IRQ0REXSOF_BF_MASK 0x00000010


/**
 * The mask for Irq0RexRdFrmHdrMSA in the IntEn Register
 * Binary value of mask is 00000000000000000000000000001000
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_MASK 0x00000008


/**
 * The mask for Irq0RexRdFrmHdrPer in the IntEn Register
 * Binary value of mask is 00000000000000000000000000000100
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_MASK 0x00000004


/**
 * The mask for Irq0RexRdFrmHdrAsync in the IntEn Register
 * Binary value of mask is 00000000000000000000000000000010
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_MASK 0x00000002


/**
 * The mask for Irq0RexDevResp in the IntEn Register
 * Binary value of mask is 00000000000000000000000000000001
 */
#define XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_MASK 0x00000001



/**
 * Reset value for Irq1StatCntErrOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntFlcOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntOutOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntInOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexSOF in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXSOF_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrMSA in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrPer in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrAsync in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexDevResp in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the IntFlg Register
***********************************************************/
/**
 * The Shift for Irq1StatCntErrOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_BF_SHIFT 11
/**
 * The Shift for Irq1StatCntFlcOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT 10
/**
 * The Shift for Irq1StatCntOutOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT 9
/**
 * The Shift for Irq1StatCntInOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_BF_SHIFT 8
/**
 * The Shift for Irq0RexSOF in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXSOF_BF_SHIFT 4
/**
 * The Shift for Irq0RexRdFrmHdrMSA in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_BF_SHIFT 3
/**
 * The Shift for Irq0RexRdFrmHdrPer in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_BF_SHIFT 2
/**
 * The Shift for Irq0RexRdFrmHdrAsync in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_BF_SHIFT 1
/**
 * The Shift for Irq0RexDevResp in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXDEVRESP_BF_SHIFT 0
/**
 * The mask for Irq1StatCntErrOverflow in the IntFlg Register
 * Binary value of mask is 00000000000000000000100000000000
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_BF_MASK 0x00000800


/**
 * The mask for Irq1StatCntFlcOverflow in the IntFlg Register
 * Binary value of mask is 00000000000000000000010000000000
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_BF_MASK 0x00000400


/**
 * The mask for Irq1StatCntOutOverflow in the IntFlg Register
 * Binary value of mask is 00000000000000000000001000000000
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_BF_MASK 0x00000200


/**
 * The mask for Irq1StatCntInOverflow in the IntFlg Register
 * Binary value of mask is 00000000000000000000000100000000
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_BF_MASK 0x00000100


/**
 * The mask for Irq0RexSOF in the IntFlg Register
 * Binary value of mask is 00000000000000000000000000010000
 */
#define XRR_XRR_INTFLG_IRQ0REXSOF_BF_MASK 0x00000010


/**
 * The mask for Irq0RexRdFrmHdrMSA in the IntFlg Register
 * Binary value of mask is 00000000000000000000000000001000
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_BF_MASK 0x00000008


/**
 * The mask for Irq0RexRdFrmHdrPer in the IntFlg Register
 * Binary value of mask is 00000000000000000000000000000100
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_BF_MASK 0x00000004


/**
 * The mask for Irq0RexRdFrmHdrAsync in the IntFlg Register
 * Binary value of mask is 00000000000000000000000000000010
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_BF_MASK 0x00000002


/**
 * The mask for Irq0RexDevResp in the IntFlg Register
 * Binary value of mask is 00000000000000000000000000000001
 */
#define XRR_XRR_INTFLG_IRQ0REXDEVRESP_BF_MASK 0x00000001



/**
 * Reset value for Irq1StatCntErrOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntFlcOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntOutOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntInOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexSOF in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXSOF_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrMSA in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrPer in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrAsync in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexDevResp in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXDEVRESP_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the IntSrc Register
***********************************************************/
/**
 * The Shift for Irq1StatCntErrOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_BF_SHIFT 11
/**
 * The Shift for Irq1StatCntFlcOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT 10
/**
 * The Shift for Irq1StatCntOutOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT 9
/**
 * The Shift for Irq1StatCntInOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_BF_SHIFT 8
/**
 * The Shift for Irq0RexSOF in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXSOF_BF_SHIFT 4
/**
 * The Shift for Irq0RexRdFrmHdrMSA in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_BF_SHIFT 3
/**
 * The Shift for Irq0RexRdFrmHdrPer in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_BF_SHIFT 2
/**
 * The Shift for Irq0RexRdFrmHdrAsync in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_BF_SHIFT 1
/**
 * The Shift for Irq0RexDevResp in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXDEVRESP_BF_SHIFT 0
/**
 * The mask for Irq1StatCntErrOverflow in the IntSrc Register
 * Binary value of mask is 00000000000000000000100000000000
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_BF_MASK 0x00000800


/**
 * The mask for Irq1StatCntFlcOverflow in the IntSrc Register
 * Binary value of mask is 00000000000000000000010000000000
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_BF_MASK 0x00000400


/**
 * The mask for Irq1StatCntOutOverflow in the IntSrc Register
 * Binary value of mask is 00000000000000000000001000000000
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_BF_MASK 0x00000200


/**
 * The mask for Irq1StatCntInOverflow in the IntSrc Register
 * Binary value of mask is 00000000000000000000000100000000
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_BF_MASK 0x00000100


/**
 * The mask for Irq0RexSOF in the IntSrc Register
 * Binary value of mask is 00000000000000000000000000010000
 */
#define XRR_XRR_INTSRC_IRQ0REXSOF_BF_MASK 0x00000010


/**
 * The mask for Irq0RexRdFrmHdrMSA in the IntSrc Register
 * Binary value of mask is 00000000000000000000000000001000
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_BF_MASK 0x00000008


/**
 * The mask for Irq0RexRdFrmHdrPer in the IntSrc Register
 * Binary value of mask is 00000000000000000000000000000100
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_BF_MASK 0x00000004


/**
 * The mask for Irq0RexRdFrmHdrAsync in the IntSrc Register
 * Binary value of mask is 00000000000000000000000000000010
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_BF_MASK 0x00000002


/**
 * The mask for Irq0RexDevResp in the IntSrc Register
 * Binary value of mask is 00000000000000000000000000000001
 */
#define XRR_XRR_INTSRC_IRQ0REXDEVRESP_BF_MASK 0x00000001



/**
 * Reset value for Irq1StatCntErrOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntFlcOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntOutOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntInOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexSOF in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXSOF_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrMSA in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrPer in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrAsync in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexDevResp in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXDEVRESP_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the IntClr Register
***********************************************************/
/**
 * The Shift for Irq1StatCntErrOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTERROVERFLOW_BF_SHIFT 11
/**
 * The Shift for Irq1StatCntFlcOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT 10
/**
 * The Shift for Irq1StatCntOutOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT 9
/**
 * The Shift for Irq1StatCntInOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTINOVERFLOW_BF_SHIFT 8
/**
 * The Shift for Irq0RexSOF in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXSOF_BF_SHIFT 4
/**
 * The Shift for Irq0RexRdFrmHdrMSA in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRMSA_BF_SHIFT 3
/**
 * The Shift for Irq0RexRdFrmHdrPer in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRPER_BF_SHIFT 2
/**
 * The Shift for Irq0RexRdFrmHdrAsync in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRASYNC_BF_SHIFT 1
/**
 * The Shift for Irq0RexDevResp in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXDEVRESP_BF_SHIFT 0
/**
 * The mask for Irq1StatCntErrOverflow in the IntClr Register
 * Binary value of mask is 00000000000000000000100000000000
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTERROVERFLOW_BF_MASK 0x00000800


/**
 * The mask for Irq1StatCntFlcOverflow in the IntClr Register
 * Binary value of mask is 00000000000000000000010000000000
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTFLCOVERFLOW_BF_MASK 0x00000400


/**
 * The mask for Irq1StatCntOutOverflow in the IntClr Register
 * Binary value of mask is 00000000000000000000001000000000
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTOUTOVERFLOW_BF_MASK 0x00000200


/**
 * The mask for Irq1StatCntInOverflow in the IntClr Register
 * Binary value of mask is 00000000000000000000000100000000
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTINOVERFLOW_BF_MASK 0x00000100


/**
 * The mask for Irq0RexSOF in the IntClr Register
 * Binary value of mask is 00000000000000000000000000010000
 */
#define XRR_XRR_INTCLR_IRQ0REXSOF_BF_MASK 0x00000010


/**
 * The mask for Irq0RexRdFrmHdrMSA in the IntClr Register
 * Binary value of mask is 00000000000000000000000000001000
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRMSA_BF_MASK 0x00000008


/**
 * The mask for Irq0RexRdFrmHdrPer in the IntClr Register
 * Binary value of mask is 00000000000000000000000000000100
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRPER_BF_MASK 0x00000004


/**
 * The mask for Irq0RexRdFrmHdrAsync in the IntClr Register
 * Binary value of mask is 00000000000000000000000000000010
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRASYNC_BF_MASK 0x00000002


/**
 * The mask for Irq0RexDevResp in the IntClr Register
 * Binary value of mask is 00000000000000000000000000000001
 */
#define XRR_XRR_INTCLR_IRQ0REXDEVRESP_BF_MASK 0x00000001



/**
 * Reset value for Irq1StatCntErrOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTERROVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntFlcOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTFLCOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntOutOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTOUTOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq1StatCntInOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTINOVERFLOW_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexSOF in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXSOF_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrMSA in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRMSA_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrPer in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRPER_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexRdFrmHdrAsync in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRASYNC_BF_RESET 0x00000000


/**
 * Reset value for Irq0RexDevResp in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXDEVRESP_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the StatCntIn Register
***********************************************************/
/**
 * The Shift for CtrlOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_CTRLOVFL_BF_SHIFT 31
/**
 * The Shift for Ctrl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_CTRL_BF_SHIFT 25
/**
 * The Shift for IntrpOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_INTRPOVFL_BF_SHIFT 24
/**
 * The Shift for Intrp in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_INTRP_BF_SHIFT 18
/**
 * The Shift for IsoOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_ISOOVFL_BF_SHIFT 17
/**
 * The Shift for Iso in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_ISO_BF_SHIFT 9
/**
 * The Shift for BulkOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_BULKOVFL_BF_SHIFT 8
/**
 * The Shift for Bulk in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_BULK_BF_SHIFT 0
/**
 * The mask for CtrlOvfl in the StatCntIn Register
 * Binary value of mask is 10000000000000000000000000000000
 */
#define XRR_XRR_STATCNTIN_CTRLOVFL_BF_MASK 0x80000000


/**
 * The mask for Ctrl in the StatCntIn Register
 * Binary value of mask is 01111110000000000000000000000000
 */
#define XRR_XRR_STATCNTIN_CTRL_BF_MASK 0x7E000000


/**
 * The mask for IntrpOvfl in the StatCntIn Register
 * Binary value of mask is 00000001000000000000000000000000
 */
#define XRR_XRR_STATCNTIN_INTRPOVFL_BF_MASK 0x01000000


/**
 * The mask for Intrp in the StatCntIn Register
 * Binary value of mask is 00000000111111000000000000000000
 */
#define XRR_XRR_STATCNTIN_INTRP_BF_MASK 0x00FC0000


/**
 * The mask for IsoOvfl in the StatCntIn Register
 * Binary value of mask is 00000000000000100000000000000000
 */
#define XRR_XRR_STATCNTIN_ISOOVFL_BF_MASK 0x00020000


/**
 * The mask for Iso in the StatCntIn Register
 * Binary value of mask is 00000000000000011111111000000000
 */
#define XRR_XRR_STATCNTIN_ISO_BF_MASK 0x0001FE00


/**
 * The mask for BulkOvfl in the StatCntIn Register
 * Binary value of mask is 00000000000000000000000100000000
 */
#define XRR_XRR_STATCNTIN_BULKOVFL_BF_MASK 0x00000100


/**
 * The mask for Bulk in the StatCntIn Register
 * Binary value of mask is 00000000000000000000000011111111
 */
#define XRR_XRR_STATCNTIN_BULK_BF_MASK 0x000000FF



/**
 * Reset value for CtrlOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_CTRLOVFL_BF_RESET 0x00000000


/**
 * Reset value for Ctrl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_CTRL_BF_RESET 0x00000000


/**
 * Reset value for IntrpOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_INTRPOVFL_BF_RESET 0x00000000


/**
 * Reset value for Intrp in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_INTRP_BF_RESET 0x00000000


/**
 * Reset value for IsoOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_ISOOVFL_BF_RESET 0x00000000


/**
 * Reset value for Iso in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_ISO_BF_RESET 0x00000000


/**
 * Reset value for BulkOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_BULKOVFL_BF_RESET 0x00000000


/**
 * Reset value for Bulk in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_BULK_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the StatCntOut Register
***********************************************************/
/**
 * The Shift for CtrlOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_CTRLOVFL_BF_SHIFT 31
/**
 * The Shift for Ctrl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_CTRL_BF_SHIFT 25
/**
 * The Shift for IntrpOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_INTRPOVFL_BF_SHIFT 24
/**
 * The Shift for Intrp in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_INTRP_BF_SHIFT 18
/**
 * The Shift for IsoOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_ISOOVFL_BF_SHIFT 17
/**
 * The Shift for Iso in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_ISO_BF_SHIFT 9
/**
 * The Shift for BulkOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_BULKOVFL_BF_SHIFT 8
/**
 * The Shift for Bulk in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_BULK_BF_SHIFT 0
/**
 * The mask for CtrlOvfl in the StatCntOut Register
 * Binary value of mask is 10000000000000000000000000000000
 */
#define XRR_XRR_STATCNTOUT_CTRLOVFL_BF_MASK 0x80000000


/**
 * The mask for Ctrl in the StatCntOut Register
 * Binary value of mask is 01111110000000000000000000000000
 */
#define XRR_XRR_STATCNTOUT_CTRL_BF_MASK 0x7E000000


/**
 * The mask for IntrpOvfl in the StatCntOut Register
 * Binary value of mask is 00000001000000000000000000000000
 */
#define XRR_XRR_STATCNTOUT_INTRPOVFL_BF_MASK 0x01000000


/**
 * The mask for Intrp in the StatCntOut Register
 * Binary value of mask is 00000000111111000000000000000000
 */
#define XRR_XRR_STATCNTOUT_INTRP_BF_MASK 0x00FC0000


/**
 * The mask for IsoOvfl in the StatCntOut Register
 * Binary value of mask is 00000000000000100000000000000000
 */
#define XRR_XRR_STATCNTOUT_ISOOVFL_BF_MASK 0x00020000


/**
 * The mask for Iso in the StatCntOut Register
 * Binary value of mask is 00000000000000011111111000000000
 */
#define XRR_XRR_STATCNTOUT_ISO_BF_MASK 0x0001FE00


/**
 * The mask for BulkOvfl in the StatCntOut Register
 * Binary value of mask is 00000000000000000000000100000000
 */
#define XRR_XRR_STATCNTOUT_BULKOVFL_BF_MASK 0x00000100


/**
 * The mask for Bulk in the StatCntOut Register
 * Binary value of mask is 00000000000000000000000011111111
 */
#define XRR_XRR_STATCNTOUT_BULK_BF_MASK 0x000000FF



/**
 * Reset value for CtrlOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_CTRLOVFL_BF_RESET 0x00000000


/**
 * Reset value for Ctrl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_CTRL_BF_RESET 0x00000000


/**
 * Reset value for IntrpOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_INTRPOVFL_BF_RESET 0x00000000


/**
 * Reset value for Intrp in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_INTRP_BF_RESET 0x00000000


/**
 * Reset value for IsoOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_ISOOVFL_BF_RESET 0x00000000


/**
 * Reset value for Iso in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_ISO_BF_RESET 0x00000000


/**
 * Reset value for BulkOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_BULKOVFL_BF_RESET 0x00000000


/**
 * Reset value for Bulk in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_BULK_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the StatCntFlc Register
***********************************************************/
/**
 * The Shift for IsoOutOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOOUTOVFL_BF_SHIFT 15
/**
 * The Shift for IsoOut in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOOUT_BF_SHIFT 12
/**
 * The Shift for BulkOutOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKOUTOVFL_BF_SHIFT 11
/**
 * The Shift for BulkOut in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKOUT_BF_SHIFT 8
/**
 * The Shift for IsoInOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOINOVFL_BF_SHIFT 7
/**
 * The Shift for IsoIn in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOIN_BF_SHIFT 4
/**
 * The Shift for BulkInOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKINOVFL_BF_SHIFT 3
/**
 * The Shift for BulkIn in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKIN_BF_SHIFT 0
/**
 * The mask for IsoOutOvfl in the StatCntFlc Register
 * Binary value of mask is 00000000000000001000000000000000
 */
#define XRR_XRR_STATCNTFLC_ISOOUTOVFL_BF_MASK 0x00008000


/**
 * The mask for IsoOut in the StatCntFlc Register
 * Binary value of mask is 00000000000000000111000000000000
 */
#define XRR_XRR_STATCNTFLC_ISOOUT_BF_MASK 0x00007000


/**
 * The mask for BulkOutOvfl in the StatCntFlc Register
 * Binary value of mask is 00000000000000000000100000000000
 */
#define XRR_XRR_STATCNTFLC_BULKOUTOVFL_BF_MASK 0x00000800


/**
 * The mask for BulkOut in the StatCntFlc Register
 * Binary value of mask is 00000000000000000000011100000000
 */
#define XRR_XRR_STATCNTFLC_BULKOUT_BF_MASK 0x00000700


/**
 * The mask for IsoInOvfl in the StatCntFlc Register
 * Binary value of mask is 00000000000000000000000010000000
 */
#define XRR_XRR_STATCNTFLC_ISOINOVFL_BF_MASK 0x00000080


/**
 * The mask for IsoIn in the StatCntFlc Register
 * Binary value of mask is 00000000000000000000000001110000
 */
#define XRR_XRR_STATCNTFLC_ISOIN_BF_MASK 0x00000070


/**
 * The mask for BulkInOvfl in the StatCntFlc Register
 * Binary value of mask is 00000000000000000000000000001000
 */
#define XRR_XRR_STATCNTFLC_BULKINOVFL_BF_MASK 0x00000008


/**
 * The mask for BulkIn in the StatCntFlc Register
 * Binary value of mask is 00000000000000000000000000000111
 */
#define XRR_XRR_STATCNTFLC_BULKIN_BF_MASK 0x00000007



/**
 * Reset value for IsoOutOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOOUTOVFL_BF_RESET 0x00000000


/**
 * Reset value for IsoOut in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOOUT_BF_RESET 0x00000000


/**
 * Reset value for BulkOutOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKOUTOVFL_BF_RESET 0x00000000


/**
 * Reset value for BulkOut in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKOUT_BF_RESET 0x00000000


/**
 * Reset value for IsoInOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOINOVFL_BF_RESET 0x00000000


/**
 * Reset value for IsoIn in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOIN_BF_RESET 0x00000000


/**
 * Reset value for BulkInOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKINOVFL_BF_RESET 0x00000000


/**
 * Reset value for BulkIn in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKIN_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the StatCntErr Register
***********************************************************/
/**
 * The Shift for BabelOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BABELOVFL_BF_SHIFT 29
/**
 * The Shift for Babel in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BABEL_BF_SHIFT 25
/**
 * The Shift for BitStuffOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BITSTUFFOVFL_BF_SHIFT 24
/**
 * The Shift for BitStuff in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BITSTUFF_BF_SHIFT 20
/**
 * The Shift for PidOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_PIDOVFL_BF_SHIFT 19
/**
 * The Shift for Pid in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_PID_BF_SHIFT 15
/**
 * The Shift for Crc5Ovfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC5OVFL_BF_SHIFT 14
/**
 * The Shift for Crc5 in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC5_BF_SHIFT 10
/**
 * The Shift for Crc16Ovfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC16OVFL_BF_SHIFT 9
/**
 * The Shift for Crc16 in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC16_BF_SHIFT 5
/**
 * The Shift for LinkOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_LINKOVFL_BF_SHIFT 4
/**
 * The Shift for Link in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_LINK_BF_SHIFT 0
/**
 * The mask for BabelOvfl in the StatCntErr Register
 * Binary value of mask is 00100000000000000000000000000000
 */
#define XRR_XRR_STATCNTERR_BABELOVFL_BF_MASK 0x20000000


/**
 * The mask for Babel in the StatCntErr Register
 * Binary value of mask is 00011110000000000000000000000000
 */
#define XRR_XRR_STATCNTERR_BABEL_BF_MASK 0x1E000000


/**
 * The mask for BitStuffOvfl in the StatCntErr Register
 * Binary value of mask is 00000001000000000000000000000000
 */
#define XRR_XRR_STATCNTERR_BITSTUFFOVFL_BF_MASK 0x01000000


/**
 * The mask for BitStuff in the StatCntErr Register
 * Binary value of mask is 00000000111100000000000000000000
 */
#define XRR_XRR_STATCNTERR_BITSTUFF_BF_MASK 0x00F00000


/**
 * The mask for PidOvfl in the StatCntErr Register
 * Binary value of mask is 00000000000010000000000000000000
 */
#define XRR_XRR_STATCNTERR_PIDOVFL_BF_MASK 0x00080000


/**
 * The mask for Pid in the StatCntErr Register
 * Binary value of mask is 00000000000001111000000000000000
 */
#define XRR_XRR_STATCNTERR_PID_BF_MASK 0x00078000


/**
 * The mask for Crc5Ovfl in the StatCntErr Register
 * Binary value of mask is 00000000000000000100000000000000
 */
#define XRR_XRR_STATCNTERR_CRC5OVFL_BF_MASK 0x00004000


/**
 * The mask for Crc5 in the StatCntErr Register
 * Binary value of mask is 00000000000000000011110000000000
 */
#define XRR_XRR_STATCNTERR_CRC5_BF_MASK 0x00003C00


/**
 * The mask for Crc16Ovfl in the StatCntErr Register
 * Binary value of mask is 00000000000000000000001000000000
 */
#define XRR_XRR_STATCNTERR_CRC16OVFL_BF_MASK 0x00000200


/**
 * The mask for Crc16 in the StatCntErr Register
 * Binary value of mask is 00000000000000000000000111100000
 */
#define XRR_XRR_STATCNTERR_CRC16_BF_MASK 0x000001E0


/**
 * The mask for LinkOvfl in the StatCntErr Register
 * Binary value of mask is 00000000000000000000000000010000
 */
#define XRR_XRR_STATCNTERR_LINKOVFL_BF_MASK 0x00000010


/**
 * The mask for Link in the StatCntErr Register
 * Binary value of mask is 00000000000000000000000000001111
 */
#define XRR_XRR_STATCNTERR_LINK_BF_MASK 0x0000000F



/**
 * Reset value for BabelOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BABELOVFL_BF_RESET 0x00000000


/**
 * Reset value for Babel in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BABEL_BF_RESET 0x00000000


/**
 * Reset value for BitStuffOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BITSTUFFOVFL_BF_RESET 0x00000000


/**
 * Reset value for BitStuff in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BITSTUFF_BF_RESET 0x00000000


/**
 * Reset value for PidOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_PIDOVFL_BF_RESET 0x00000000


/**
 * Reset value for Pid in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_PID_BF_RESET 0x00000000


/**
 * Reset value for Crc5Ovfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC5OVFL_BF_RESET 0x00000000


/**
 * Reset value for Crc5 in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC5_BF_RESET 0x00000000


/**
 * Reset value for Crc16Ovfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC16OVFL_BF_RESET 0x00000000


/**
 * Reset value for Crc16 in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC16_BF_RESET 0x00000000


/**
 * Reset value for LinkOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_LINKOVFL_BF_RESET 0x00000000


/**
 * Reset value for Link in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_LINK_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the RexCtrl Register
***********************************************************/
/**
 * The Shift for MsaRetryDisable in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_SHIFT 24
/**
 * The Shift for SofAvgCnt in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFAVGCNT_BF_SHIFT 8
/**
 * The Shift for DbgTxState in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_DBGTXSTATE_BF_SHIFT 4
/**
 * The Shift for SOFAvgMode in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFAVGMODE_BF_SHIFT 3
/**
 * The Shift for TxEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_TXEN_BF_SHIFT 2
/**
 * The Shift for SchEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SCHEN_BF_SHIFT 1
/**
 * The Shift for SofEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFEN_BF_SHIFT 0
/**
 * The Shift for MsaRetryDisable in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_MASK 0x01000000


/**
 * The mask for SofAvgCnt in the RexCtrl Register
 * Binary value of mask is 00000000000000000000011100000000
 */
#define XRR_XRR_REXCTRL_SOFAVGCNT_BF_MASK 0x00000700


/**
 * The mask for DbgTxState in the RexCtrl Register
 * Binary value of mask is 00000000000000000000000011110000
 */
#define XRR_XRR_REXCTRL_DBGTXSTATE_BF_MASK 0x000000F0


/**
 * The mask for SOFAvgMode in the RexCtrl Register
 * Binary value of mask is 00000000000000000000000000001000
 */
#define XRR_XRR_REXCTRL_SOFAVGMODE_BF_MASK 0x00000008


/**
 * The mask for TxEn in the RexCtrl Register
 * Binary value of mask is 00000000000000000000000000000100
 */
#define XRR_XRR_REXCTRL_TXEN_BF_MASK 0x00000004


/**
 * The mask for SchEn in the RexCtrl Register
 * Binary value of mask is 00000000000000000000000000000010
 */
#define XRR_XRR_REXCTRL_SCHEN_BF_MASK 0x00000002


/**
 * The mask for SofEn in the RexCtrl Register
 * Binary value of mask is 00000000000000000000000000000001
 */
#define XRR_XRR_REXCTRL_SOFEN_BF_MASK 0x00000001

/**
 * Reset value for MSARETRYDISABLE in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_RESET 0x00000000


/**
 * Reset value for SofAvgCnt in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFAVGCNT_BF_RESET 0x00000001


/**
 * Reset value for DbgTxState in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_DBGTXSTATE_BF_RESET 0x00000000


/**
 * Reset value for SOFAvgMode in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFAVGMODE_BF_RESET 0x00000000


/**
 * Reset value for TxEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_TXEN_BF_RESET 0x00000000


/**
 * Reset value for SchEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SCHEN_BF_RESET 0x00000000


/**
 * Reset value for SofEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFEN_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the FrameInfo Register
***********************************************************/
/**
 * The Shift for RxCurUFrame in the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_RXCURUFRAME_BF_SHIFT 20
/**
 * The Shift for FrameTime in the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_FRAMETIME_BF_SHIFT 4
/**
 * The Shift for CurUFrame in the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_CURUFRAME_BF_SHIFT 0
/**
 * The mask for RxCurUFrame in the FrameInfo Register
 * Binary value of mask is 00000000111100000000000000000000
 */
#define XRR_XRR_FRAMEINFO_RXCURUFRAME_BF_MASK 0x00F00000


/**
 * The mask for FrameTime in the FrameInfo Register
 * Binary value of mask is 00000000000011111111111111110000
 */
#define XRR_XRR_FRAMEINFO_FRAMETIME_BF_MASK 0x000FFFF0


/**
 * The mask for CurUFrame in the FrameInfo Register
 * Binary value of mask is 00000000000000000000000000001111
 */
#define XRR_XRR_FRAMEINFO_CURUFRAME_BF_MASK 0x0000000F



/**
 * Reset value for RxCurUFrame in the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_RXCURUFRAME_BF_RESET 0x00000000


/**
 * Reset value for FrameTime in the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_FRAMETIME_BF_RESET 0x00000000


/**
 * Reset value for CurUFrame in the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_CURUFRAME_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the RdFrmHdr0 Register
***********************************************************/
/**
 * The Shift for Response in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_RESPONSE_BF_SHIFT 28
/**
 * The Shift for SchType in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_SCHTYPE_BF_SHIFT 25
/**
 * The Shift for Toggle in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_TOGGLE_BF_SHIFT 24
/**
 * The Shift for DataQid in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_DATAQID_BF_SHIFT 17
/**
 * The Shift for Modifier in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_MODIFIER_BF_SHIFT 15
/**
 * The Shift for Action in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ACTION_BF_SHIFT 13
/**
 * The Shift for EndpType in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ENDPTYPE_BF_SHIFT 11
/**
 * The Shift for Endp in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ENDP_BF_SHIFT 7
/**
 * The Shift for Addr in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ADDR_BF_SHIFT 0
/**
 * The mask for Response in the RdFrmHdr0 Register
 * Binary value of mask is 11110000000000000000000000000000
 */
#define XRR_XRR_RDFRMHDR0_RESPONSE_BF_MASK 0xF0000000


/**
 * The mask for SchType in the RdFrmHdr0 Register
 * Binary value of mask is 00001110000000000000000000000000
 */
#define XRR_XRR_RDFRMHDR0_SCHTYPE_BF_MASK 0x0E000000


/**
 * The mask for Toggle in the RdFrmHdr0 Register
 * Binary value of mask is 00000001000000000000000000000000
 */
#define XRR_XRR_RDFRMHDR0_TOGGLE_BF_MASK 0x01000000


/**
 * The mask for DataQid in the RdFrmHdr0 Register
 * Binary value of mask is 00000000111111100000000000000000
 */
#define XRR_XRR_RDFRMHDR0_DATAQID_BF_MASK 0x00FE0000


/**
 * The mask for Modifier in the RdFrmHdr0 Register
 * Binary value of mask is 00000000000000011000000000000000
 */
#define XRR_XRR_RDFRMHDR0_MODIFIER_BF_MASK 0x00018000


/**
 * The mask for Action in the RdFrmHdr0 Register
 * Binary value of mask is 00000000000000000110000000000000
 */
#define XRR_XRR_RDFRMHDR0_ACTION_BF_MASK 0x00006000


/**
 * The mask for EndpType in the RdFrmHdr0 Register
 * Binary value of mask is 00000000000000000001100000000000
 */
#define XRR_XRR_RDFRMHDR0_ENDPTYPE_BF_MASK 0x00001800


/**
 * The mask for Endp in the RdFrmHdr0 Register
 * Binary value of mask is 00000000000000000000011110000000
 */
#define XRR_XRR_RDFRMHDR0_ENDP_BF_MASK 0x00000780


/**
 * The mask for Addr in the RdFrmHdr0 Register
 * Binary value of mask is 00000000000000000000000001111111
 */
#define XRR_XRR_RDFRMHDR0_ADDR_BF_MASK 0x0000007F



/**
 * Reset value for Response in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_RESPONSE_BF_RESET 0x00000000


/**
 * Reset value for SchType in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_SCHTYPE_BF_RESET 0x00000000


/**
 * Reset value for Toggle in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_TOGGLE_BF_RESET 0x00000000


/**
 * Reset value for DataQid in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_DATAQID_BF_RESET 0x00000000


/**
 * Reset value for Modifier in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_MODIFIER_BF_RESET 0x00000000


/**
 * Reset value for Action in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ACTION_BF_RESET 0x00000000


/**
 * Reset value for EndpType in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ENDPTYPE_BF_RESET 0x00000000


/**
 * Reset value for Endp in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ENDP_BF_RESET 0x00000000


/**
 * Reset value for Addr in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ADDR_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the RdFrmHdr1 Register
***********************************************************/
/**
 * The Shift for RxFrame in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_RXFRAME_BF_SHIFT 20
/**
 * The Shift for RxUFrame in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_RXUFRAME_BF_SHIFT 17
/**
 * The Shift for Error in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_ERROR_BF_SHIFT 16
/**
 * The Shift for SplitSE in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_SPLITSE_BF_SHIFT 14
/**
 * The Shift for HubAddr in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_HUBADDR_BF_SHIFT 7
/**
 * The Shift for HubPort in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_HUBPORT_BF_SHIFT 0
/**
 * The mask for RxFrame in the RdFrmHdr1 Register
 * Binary value of mask is 01111111111100000000000000000000
 */
#define XRR_XRR_RDFRMHDR1_RXFRAME_BF_MASK 0x7FF00000


/**
 * The mask for RxUFrame in the RdFrmHdr1 Register
 * Binary value of mask is 00000000000011100000000000000000
 */
#define XRR_XRR_RDFRMHDR1_RXUFRAME_BF_MASK 0x000E0000


/**
 * The mask for Error in the RdFrmHdr1 Register
 * Binary value of mask is 00000000000000010000000000000000
 */
#define XRR_XRR_RDFRMHDR1_ERROR_BF_MASK 0x00010000


/**
 * The mask for SplitSE in the RdFrmHdr1 Register
 * Binary value of mask is 00000000000000001100000000000000
 */
#define XRR_XRR_RDFRMHDR1_SPLITSE_BF_MASK 0x0000C000


/**
 * The mask for HubAddr in the RdFrmHdr1 Register
 * Binary value of mask is 00000000000000000011111110000000
 */
#define XRR_XRR_RDFRMHDR1_HUBADDR_BF_MASK 0x00003F80


/**
 * The mask for HubPort in the RdFrmHdr1 Register
 * Binary value of mask is 00000000000000000000000001111111
 */
#define XRR_XRR_RDFRMHDR1_HUBPORT_BF_MASK 0x0000007F



/**
 * Reset value for RxFrame in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_RXFRAME_BF_RESET 0x00000000


/**
 * Reset value for RxUFrame in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_RXUFRAME_BF_RESET 0x00000000


/**
 * Reset value for Error in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_ERROR_BF_RESET 0x00000000


/**
 * Reset value for SplitSE in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_SPLITSE_BF_RESET 0x00000000


/**
 * Reset value for HubAddr in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_HUBADDR_BF_RESET 0x00000000


/**
 * Reset value for HubPort in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_HUBPORT_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the RdFrmHdr2 Register
***********************************************************/
/**
 * The Shift for CBWDir in the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_CBWDIR_BF_SHIFT 6
/**
 * The Shift for Count in the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_COUNT_BF_SHIFT 3
/**
 * The Shift for Accel in the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_ACCEL_BF_SHIFT 0
/**
 * The mask for CBWDir in the RdFrmHdr2 Register
 * Binary value of mask is 00000000000000000000000001000000
 */
#define XRR_XRR_RDFRMHDR2_CBWDIR_BF_MASK 0x00000040


/**
 * The mask for Count in the RdFrmHdr2 Register
 * Binary value of mask is 00000000000000000000000000111000
 */
#define XRR_XRR_RDFRMHDR2_COUNT_BF_MASK 0x00000038


/**
 * The mask for Accel in the RdFrmHdr2 Register
 * Binary value of mask is 00000000000000000000000000000111
 */
#define XRR_XRR_RDFRMHDR2_ACCEL_BF_MASK 0x00000007



/**
 * Reset value for CBWDir in the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_CBWDIR_BF_RESET 0x00000000


/**
 * Reset value for Count in the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_COUNT_BF_RESET 0x00000000


/**
 * Reset value for Accel in the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_ACCEL_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the HSEofTime0 Register
***********************************************************/
/**
 * The Shift for Isoc in the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_ISOC_BF_SHIFT 16
/**
 * The Shift for Split in the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_SPLIT_BF_SHIFT 0
/**
 * The mask for Isoc in the HSEofTime0 Register
 * Binary value of mask is 11111111111111110000000000000000
 */
#define XRR_XRR_HSEOFTIME0_ISOC_BF_MASK 0xFFFF0000


/**
 * The mask for Split in the HSEofTime0 Register
 * Binary value of mask is 00000000000000001111111111111111
 */
#define XRR_XRR_HSEOFTIME0_SPLIT_BF_MASK 0x0000FFFF



/**
 * Reset value for Isoc in the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_ISOC_BF_RESET 0x000004F8


/**
 * Reset value for Split in the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_SPLIT_BF_RESET 0x0000016A

/***********************************************************
  BitFields defs from the HSEofTime1 Register
***********************************************************/
/**
 * The Shift for Async in the HSEofTime1 Register
 */
#define XRR_XRR_HSEOFTIME1_ASYNC_BF_SHIFT 0
/**
 * The mask for Async in the HSEofTime1 Register
 * Binary value of mask is 00000000000000001111111111111111
 */
#define XRR_XRR_HSEOFTIME1_ASYNC_BF_MASK 0x0000FFFF



/**
 * Reset value for Async in the HSEofTime1 Register
 */
#define XRR_XRR_HSEOFTIME1_ASYNC_BF_RESET 0x00000517

/***********************************************************
  BitFields defs from the FSEofTime Register
***********************************************************/
/**
 * The Shift for Isoc in the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_ISOC_BF_SHIFT 16
/**
 * The Shift for Async in the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_ASYNC_BF_SHIFT 0
/**
 * The mask for Isoc in the FSEofTime Register
 * Binary value of mask is 11111111111111110000000000000000
 */
#define XRR_XRR_FSEOFTIME_ISOC_BF_MASK 0xFFFF0000


/**
 * The mask for Async in the FSEofTime Register
 * Binary value of mask is 00000000000000001111111111111111
 */
#define XRR_XRR_FSEOFTIME_ASYNC_BF_MASK 0x0000FFFF



/**
 * Reset value for Isoc in the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_ISOC_BF_RESET 0x00002EE0


/**
 * Reset value for Async in the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_ASYNC_BF_RESET 0x00001F18

/***********************************************************
  BitFields defs from the SchFrmHdr0 Register
***********************************************************/
/**
 * The Shift for Toggle in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_TOGGLE_BF_SHIFT 24
/**
 * The Shift for DataQid in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_DATAQID_BF_SHIFT 17
/**
 * The Shift for Modifier in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_MODIFIER_BF_SHIFT 15
/**
 * The Shift for Action in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ACTION_BF_SHIFT 13
/**
 * The Shift for EndpType in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_SHIFT 11
/**
 * The Shift for Endp in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ENDP_BF_SHIFT 7
/**
 * The Shift for Addr in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ADDR_BF_SHIFT 0
/**
 * The mask for Toggle in the SchFrmHdr0 Register
 * Binary value of mask is 00000001000000000000000000000000
 */
#define XRR_XRR_SCHFRMHDR0_TOGGLE_BF_MASK 0x01000000


/**
 * The mask for DataQid in the SchFrmHdr0 Register
 * Binary value of mask is 00000000111111100000000000000000
 */
#define XRR_XRR_SCHFRMHDR0_DATAQID_BF_MASK 0x00FE0000


/**
 * The mask for Modifier in the SchFrmHdr0 Register
 * Binary value of mask is 00000000000000011000000000000000
 */
#define XRR_XRR_SCHFRMHDR0_MODIFIER_BF_MASK 0x00018000


/**
 * The mask for Action in the SchFrmHdr0 Register
 * Binary value of mask is 00000000000000000110000000000000
 */
#define XRR_XRR_SCHFRMHDR0_ACTION_BF_MASK 0x00006000


/**
 * The mask for EndpType in the SchFrmHdr0 Register
 * Binary value of mask is 00000000000000000001100000000000
 */
#define XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_MASK 0x00001800


/**
 * The mask for Endp in the SchFrmHdr0 Register
 * Binary value of mask is 00000000000000000000011110000000
 */
#define XRR_XRR_SCHFRMHDR0_ENDP_BF_MASK 0x00000780


/**
 * The mask for Addr in the SchFrmHdr0 Register
 * Binary value of mask is 00000000000000000000000001111111
 */
#define XRR_XRR_SCHFRMHDR0_ADDR_BF_MASK 0x0000007F



/**
 * Reset value for Toggle in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_TOGGLE_BF_RESET 0x00000000


/**
 * Reset value for DataQid in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_DATAQID_BF_RESET 0x00000000


/**
 * Reset value for Modifier in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_MODIFIER_BF_RESET 0x00000000


/**
 * Reset value for Action in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ACTION_BF_RESET 0x00000000


/**
 * Reset value for EndpType in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_RESET 0x00000000


/**
 * Reset value for Endp in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ENDP_BF_RESET 0x00000000


/**
 * Reset value for Addr in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ADDR_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the SchFrmHdr1 Register
***********************************************************/
/**
 * The Shift for Count in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_COUNT_BF_SHIFT 20
/**
 * The Shift for Response in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_RESPONSE_BF_SHIFT 16
/**
 * The Shift for SplitSE in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_SPLITSE_BF_SHIFT 14
/**
 * The Shift for HubAddr in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_HUBADDR_BF_SHIFT 7
/**
 * The Shift for HubPort in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_HUBPORT_BF_SHIFT 0
/**
 * The mask for Count in the SchFrmHdr1 Register
 * Binary value of mask is 00000000011100000000000000000000
 */
#define XRR_XRR_SCHFRMHDR1_COUNT_BF_MASK 0x00700000


/**
 * The mask for Response in the SchFrmHdr1 Register
 * Binary value of mask is 00000000000011110000000000000000
 */
#define XRR_XRR_SCHFRMHDR1_RESPONSE_BF_MASK 0x000F0000


/**
 * The mask for SplitSE in the SchFrmHdr1 Register
 * Binary value of mask is 00000000000000001100000000000000
 */
#define XRR_XRR_SCHFRMHDR1_SPLITSE_BF_MASK 0x0000C000


/**
 * The mask for HubAddr in the SchFrmHdr1 Register
 * Binary value of mask is 00000000000000000011111110000000
 */
#define XRR_XRR_SCHFRMHDR1_HUBADDR_BF_MASK 0x00003F80


/**
 * The mask for HubPort in the SchFrmHdr1 Register
 * Binary value of mask is 00000000000000000000000001111111
 */
#define XRR_XRR_SCHFRMHDR1_HUBPORT_BF_MASK 0x0000007F



/**
 * Reset value for Count in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_COUNT_BF_RESET 0x00000000


/**
 * Reset value for Response in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_RESPONSE_BF_RESET 0x00000000


/**
 * Reset value for SplitSE in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_SPLITSE_BF_RESET 0x00000000


/**
 * Reset value for HubAddr in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_HUBADDR_BF_RESET 0x00000000


/**
 * Reset value for HubPort in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_HUBPORT_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the Schedule Register
***********************************************************/
/**
 * The Shift for SrcQStat in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SRCQSTAT_BF_SHIFT 24
/**
 * The Shift for SrcQueue in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SRCQUEUE_BF_SHIFT 16
/**
 * The Shift for DestQueue in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_DESTQUEUE_BF_SHIFT 8
/**
 * The Shift for SchType in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_BF_SHIFT 4
/**
 * The Shift for Mode in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_MODE_BF_SHIFT 1
/**
 * The Shift for Enable in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_ENABLE_BF_SHIFT 0
/**
 * The mask for SrcQStat in the Schedule Register
 * Binary value of mask is 00000011000000000000000000000000
 */
#define XRR_XRR_SCHEDULE_SRCQSTAT_BF_MASK 0x03000000


/**
 * The mask for SrcQueue in the Schedule Register
 * Binary value of mask is 00000000011111110000000000000000
 */
#define XRR_XRR_SCHEDULE_SRCQUEUE_BF_MASK 0x007F0000


/**
 * The mask for DestQueue in the Schedule Register
 * Binary value of mask is 00000000000000000111111100000000
 */
#define XRR_XRR_SCHEDULE_DESTQUEUE_BF_MASK 0x00007F00


/**
 * The mask for SchType in the Schedule Register
 * Binary value of mask is 00000000000000000000000001110000
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_BF_MASK 0x00000070


/**
 * The mask for Mode in the Schedule Register
 * Binary value of mask is 00000000000000000000000000001110
 */
#define XRR_XRR_SCHEDULE_MODE_BF_MASK 0x0000000E


/**
 * The mask for Enable in the Schedule Register
 * Binary value of mask is 00000000000000000000000000000001
 */
#define XRR_XRR_SCHEDULE_ENABLE_BF_MASK 0x00000001



/**
 * Reset value for SrcQStat in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SRCQSTAT_BF_RESET 0x00000000


/**
 * Reset value for SrcQueue in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SRCQUEUE_BF_RESET 0x00000000


/**
 * Reset value for DestQueue in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_DESTQUEUE_BF_RESET 0x00000000


/**
 * Reset value for SchType in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_BF_RESET 0x00000000


/**
 * Reset value for Mode in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_MODE_BF_RESET 0x00000000


/**
 * Reset value for Enable in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_ENABLE_BF_RESET 0x00000000

/**
 * The SCHTYPE_NONE value for SchType in the Schedule Register.
 * This value represents 0 unsigned.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_BF_VALUE_SCHTYPE_NONE 0x00000000
/**
 * The SCHTYPE_ASYNC value for SchType in the Schedule Register.
 * This value represents 1 unsigned.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_BF_VALUE_SCHTYPE_ASYNC 0x00000001
/**
 * The SCHTYPE_PER value for SchType in the Schedule Register.
 * This value represents 2 unsigned.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_BF_VALUE_SCHTYPE_PER 0x00000002
/**
 * The SCHTYPE_MSA value for SchType in the Schedule Register.
 * This value represents 3 unsigned.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_BF_VALUE_SCHTYPE_MSA 0x00000003
/**
 * The SCHTYPE_MSA_RETRY value for SchType in the Schedule Register.
 * This value represents 4 unsigned.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_BF_VALUE_SCHTYPE_MSA_RETRY 0x00000004
/**
 * The SCHTYPE_UPS value for SchType in the Schedule Register.
 * This value represents 5 unsigned.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_BF_VALUE_SCHTYPE_UPS 0x00000005
/**
 * The SCHTYPE_LOCAL value for SchType in the Schedule Register.
 * This value represents 6 unsigned.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_BF_VALUE_SCHTYPE_LOCAL 0x00000006
/**
 * The SCH_MODE_WRITE value for Mode in the Schedule Register.
 * This value represents 0 unsigned.
 */
#define XRR_XRR_SCHEDULE_MODE_BF_VALUE_SCH_MODE_WRITE 0x00000000
/**
 * The SCH_MODE_READ value for Mode in the Schedule Register.
 * This value represents 1 unsigned.
 */
#define XRR_XRR_SCHEDULE_MODE_BF_VALUE_SCH_MODE_READ 0x00000001
/**
 * The SCH_MODE_UPDATE value for Mode in the Schedule Register.
 * This value represents 2 unsigned.
 */
#define XRR_XRR_SCHEDULE_MODE_BF_VALUE_SCH_MODE_UPDATE 0x00000002
/**
 * The SCH_MODE_UPDATE_NEW_ACTION value for Mode in the Schedule Register.
 * This value represents 3 unsigned.
 */
#define XRR_XRR_SCHEDULE_MODE_BF_VALUE_SCH_MODE_UPDATE_NEW_ACTION 0x00000003
/**
 * The SCH_MODE_UPDATE_NEW_RESP value for Mode in the Schedule Register.
 * This value represents 4 unsigned.
 */
#define XRR_XRR_SCHEDULE_MODE_BF_VALUE_SCH_MODE_UPDATE_NEW_RESP 0x00000004
/**
 * The SCH_MODE_UPDATE_NEW_MOD value for Mode in the Schedule Register.
 * This value represents 5 unsigned.
 */
#define XRR_XRR_SCHEDULE_MODE_BF_VALUE_SCH_MODE_UPDATE_NEW_MOD 0x00000005
/**
 * The SCH_MODE_COPY value for Mode in the Schedule Register.
 * This value represents 6 unsigned.
 */
#define XRR_XRR_SCHEDULE_MODE_BF_VALUE_SCH_MODE_COPY 0x00000006
/***********************************************************
  BitFields defs from the TxCtrl Register
***********************************************************/
/**
 * The Shift for MsaNakLimit in the TxCtrl Register
 */
#define XRR_XRR_TXCTRL_MSANAKLIMIT_BF_SHIFT 0
/**
 * The mask for MsaNakLimit in the TxCtrl Register
 * Binary value of mask is 00000000000000001111111111111111
 */
#define XRR_XRR_TXCTRL_MSANAKLIMIT_BF_MASK 0x0000FFFF



/**
 * Reset value for MsaNakLimit in the TxCtrl Register
 */
#define XRR_XRR_TXCTRL_MSANAKLIMIT_BF_RESET 0x00000001

/***********************************************************
  BitFields defs from the SofCtrl Register
***********************************************************/
/**
 * The Shift for MaxTime in the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_MAXTIME_BF_SHIFT 16
/**
 * The Shift for MinTime in the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_MINTIME_BF_SHIFT 0
/**
 * The mask for MaxTime in the SofCtrl Register
 * Binary value of mask is 11111111111111110000000000000000
 */
#define XRR_XRR_SOFCTRL_MAXTIME_BF_MASK 0xFFFF0000


/**
 * The mask for MinTime in the SofCtrl Register
 * Binary value of mask is 00000000000000001111111111111111
 */
#define XRR_XRR_SOFCTRL_MINTIME_BF_MASK 0x0000FFFF



/**
 * Reset value for MaxTime in the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_MAXTIME_BF_RESET 0x0000EA88


/**
 * Reset value for MinTime in the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_MINTIME_BF_RESET 0x0000EA38

/***********************************************************
  BitFields defs from the SofDbg1 Register
***********************************************************/
/**
 * The Shift for TxFrameNum in the SofDbg1 Register
 */
#define XRR_XRR_SOFDBG1_TXFRAMENUM_BF_SHIFT 16
/**
 * The Shift for RxFrameNum in the SofDbg1 Register
 */
#define XRR_XRR_SOFDBG1_RXFRAMENUM_BF_SHIFT 0
/**
 * The mask for TxFrameNum in the SofDbg1 Register
 * Binary value of mask is 00000111111111110000000000000000
 */
#define XRR_XRR_SOFDBG1_TXFRAMENUM_BF_MASK 0x07FF0000


/**
 * The mask for RxFrameNum in the SofDbg1 Register
 * Binary value of mask is 00000000000000000000011111111111
 */
#define XRR_XRR_SOFDBG1_RXFRAMENUM_BF_MASK 0x000007FF



/**
 * Reset value for TxFrameNum in the SofDbg1 Register
 */
#define XRR_XRR_SOFDBG1_TXFRAMENUM_BF_RESET 0x00000000


/**
 * Reset value for RxFrameNum in the SofDbg1 Register
 */
#define XRR_XRR_SOFDBG1_RXFRAMENUM_BF_RESET 0x00000000

/***********************************************************
  BitFields defs from the RdFrmHdrMSA Register
***********************************************************/
/**
 * The Shift for TransferLen in the RdFrmHdrMSA Register
 */
#define XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_BF_SHIFT 0
/**
 * The mask for TransferLen in the RdFrmHdrMSA Register
 * Binary value of mask is 11111111111111111111111111111111
 */
#define XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_BF_MASK 0xFFFFFFFF



/**
 * Reset value for TransferLen in the RdFrmHdrMSA Register
 */
#define XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_BF_RESET 0x00000000


#define XRR_XRR_XRTDEBUG_RDADDR_BF_SHIFT 0
#define XRR_XRR_XRTDEBUG_RDADDR_BF_MASK 0x0000007F
#define XRR_XRR_XRTDEBUG_RDADDR_BF_RESET 0x0
#define XRR_XRR_XRTDEBUG_RDENDP_BF_SHIFT 8
#define XRR_XRR_XRTDEBUG_RDENDP_BF_MASK 0x00000F00
#define XRR_XRR_XRTDEBUG_RDENDP_BF_RESET 0x0
#define XRR_XRR_XRTDEBUG_RDACTION_BF_SHIFT 12
#define XRR_XRR_XRTDEBUG_RDACTION_BF_MASK 0x00003000
#define XRR_XRR_XRTDEBUG_RDACTION_BF_RESET 0x0
#define XRR_XRR_XRTDEBUG_RDDATAQID_BF_SHIFT 16
#define XRR_XRR_XRTDEBUG_RDDATAQID_BF_MASK 0x007F0000
#define XRR_XRR_XRTDEBUG_RDDATAQID_BF_RESET 0x0
#define XRR_XRR_XRTDEBUG_LASTRESP_BF_SHIFT 24
#define XRR_XRR_XRTDEBUG_LASTRESP_BF_MASK 0x0F000000
#define XRR_XRR_XRTDEBUG_LASTRESP_BF_RESET 0x0


/* CMacroHeaderView.RegRWMacroVP per Register (and subclasses) */

/*****************************************************************************
 The Id register is read-only
******************************************************************************/

/**
 * The Read Macro for the Id Register
 */
#define XRR_XRR_ID_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_ID_REG_OFFSET,0))

/*****************************************************************************
 The Rev register is read-only
******************************************************************************/

/**
 * The Read Macro for the Rev Register
 */
#define XRR_XRR_REV_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_REV_REG_OFFSET,0))

/*****************************************************************************
 The IntEn register is read-write
******************************************************************************/

/**
 * The Read Macro for the IntEn Register
 */
#define XRR_XRR_INTEN_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0))

/**
 * The Write Macro for the IntEn Register
 */
#define XRR_XRR_INTEN_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,(value)))

/*****************************************************************************
 The IntFlg register is read-only
******************************************************************************/

/**
 * The Read Macro for the IntFlg Register
 */
#define XRR_XRR_INTFLG_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0))

/*****************************************************************************
 The IntSrc register is read-only
******************************************************************************/

/**
 * The Read Macro for the IntSrc Register
 */
#define XRR_XRR_INTSRC_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0))

/*****************************************************************************
 The IntClr register is write-only
******************************************************************************/

/**
 * The Write Macro for the IntClr Register
 */
#define XRR_XRR_INTCLR_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_INTCLR_REG_OFFSET,0,(value)))

/*****************************************************************************
 The StatCntIn register is read-only
******************************************************************************/

/**
 * The Read Macro for the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0))

/*****************************************************************************
 The StatCntOut register is read-only
******************************************************************************/

/**
 * The Read Macro for the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0))

/*****************************************************************************
 The StatCntFlc register is read-only
******************************************************************************/

/**
 * The Read Macro for the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0))

/*****************************************************************************
 The StatCntErr register is read-only
******************************************************************************/

/**
 * The Read Macro for the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0))

/*****************************************************************************
 The RexCtrl register is read-write
******************************************************************************/

/**
 * The Read Macro for the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0))

/**
 * The Write Macro for the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,(value)))

/*****************************************************************************
 The FrameInfo register is read-only
******************************************************************************/

/**
 * The Read Macro for the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_FRAMEINFO_REG_OFFSET,0))

/*****************************************************************************
 The RdFrmHdr0 register is read-only
******************************************************************************/

/**
 * The Read Macro for the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0))

/*****************************************************************************
 The RdFrmHdr1 register is read-only
******************************************************************************/

/**
 * The Read Macro for the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0))

/*****************************************************************************
 The RdFrmHdr2 register is read-only
******************************************************************************/

/**
 * The Read Macro for the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_RDFRMHDR2_REG_OFFSET,0))

/*****************************************************************************
 The HSEofTime0 register is read-write
******************************************************************************/

/**
 * The Read Macro for the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0))

/**
 * The Write Macro for the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,(value)))

/*****************************************************************************
 The HSEofTime1 register is read-write
******************************************************************************/

/**
 * The Read Macro for the HSEofTime1 Register
 */
#define XRR_XRR_HSEOFTIME1_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_HSEOFTIME1_REG_OFFSET,0))

/**
 * The Write Macro for the HSEofTime1 Register
 */
#define XRR_XRR_HSEOFTIME1_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_HSEOFTIME1_REG_OFFSET,0,(value)))

/*****************************************************************************
 The FSEofTime register is read-write
******************************************************************************/

/**
 * The Read Macro for the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0))

/**
 * The Write Macro for the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,(value)))

/*****************************************************************************
 The SchFrmHdr0 register is read-write
******************************************************************************/

/**
 * The Read Macro for the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0))

/**
 * The Write Macro for the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,(value)))

/*****************************************************************************
 The SchFrmHdr1 register is read-write
******************************************************************************/

/**
 * The Read Macro for the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0))

/**
 * The Write Macro for the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,(value)))

/*****************************************************************************
 The Schedule register is read-write
******************************************************************************/

/**
 * The Read Macro for the Schedule Register
 */
#define XRR_XRR_SCHEDULE_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0))

/**
 * The Write Macro for the Schedule Register
 */
#define XRR_XRR_SCHEDULE_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,(value)))

/*****************************************************************************
 The TxCtrl register is read-write
******************************************************************************/

/**
 * The Read Macro for the TxCtrl Register
 */
#define XRR_XRR_TXCTRL_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_TXCTRL_REG_OFFSET,0))

/**
 * The Write Macro for the TxCtrl Register
 */
#define XRR_XRR_TXCTRL_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_TXCTRL_REG_OFFSET,0,(value)))

/*****************************************************************************
 The SofCtrl register is read-write
******************************************************************************/

/**
 * The Read Macro for the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0))

/**
 * The Write Macro for the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_WRITE_REG(baseAddress, value) \
	(WRITE_REG((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,(value)))

/*****************************************************************************
 The SofDbg1 register is read-only
******************************************************************************/

/**
 * The Read Macro for the SofDbg1 Register
 */
#define XRR_XRR_SOFDBG1_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_SOFDBG1_REG_OFFSET,0))

/*****************************************************************************
 The RdFrmHdrMSA register is read-only
******************************************************************************/

/**
 * The Read Macro for the RdFrmHdrMSA Register
 */
#define XRR_XRR_RDFRMHDRMSA_READ_REG(baseAddress) \
	(READ_REG((baseAddress),XRR_XRR_RDFRMHDRMSA_REG_OFFSET,0))


/* CMacroHeaderView.BfROMacroVP per ReadOnlyBitField (and subclasses) */

#define XRR_XRR_XRTDEBUG_READ_REG(baseAddress) (READ_REG((baseAddress), XRR_XRR_XRTDEBUG_REG_OFFSET,0))
#define XRR_XRR_XRTDEBUG_WRITE_REG(baseAddress, value) (WRITE_REG((baseAddress), XRR_XRR_XRTDEBUG_REG_OFFSET,0,(value)))

/******************************************************************************
 The Id ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Id in the Id Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_ID_ID_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_ID_REG_OFFSET,0,XRR_XRR_ID_ID_BF_MASK,XRR_XRR_ID_ID_BF_SHIFT))

/**
 * The Read then Mask Macro for Id in the Id Register
 * This does not do a shift.
 */
#define XRR_XRR_ID_ID_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_ID_REG_OFFSET,0,XRR_XRR_ID_ID_BF_MASK))

/**
 * The Get Macro for Id in the Id Register
 */
#define XRR_XRR_ID_ID_GET_BF(regValue) \
	(GET_BF(XRR_XRR_ID_ID_BF_MASK,XRR_XRR_ID_ID_BF_SHIFT,(regValue)))

/******************************************************************************
 The CvsMinor ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for CvsMinor in the Rev Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_REV_CVSMINOR_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_REV_REG_OFFSET,0,XRR_XRR_REV_CVSMINOR_BF_MASK,XRR_XRR_REV_CVSMINOR_BF_SHIFT))

/**
 * The Read then Mask Macro for CvsMinor in the Rev Register
 * This does not do a shift.
 */
#define XRR_XRR_REV_CVSMINOR_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_REV_REG_OFFSET,0,XRR_XRR_REV_CVSMINOR_BF_MASK))

/**
 * The Get Macro for CvsMinor in the Rev Register
 */
#define XRR_XRR_REV_CVSMINOR_GET_BF(regValue) \
	(GET_BF(XRR_XRR_REV_CVSMINOR_BF_MASK,XRR_XRR_REV_CVSMINOR_BF_SHIFT,(regValue)))

/******************************************************************************
 The CvsMajor ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for CvsMajor in the Rev Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_REV_CVSMAJOR_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_REV_REG_OFFSET,0,XRR_XRR_REV_CVSMAJOR_BF_MASK,XRR_XRR_REV_CVSMAJOR_BF_SHIFT))

/**
 * The Read then Mask Macro for CvsMajor in the Rev Register
 * This does not do a shift.
 */
#define XRR_XRR_REV_CVSMAJOR_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_REV_REG_OFFSET,0,XRR_XRR_REV_CVSMAJOR_BF_MASK))

/**
 * The Get Macro for CvsMajor in the Rev Register
 */
#define XRR_XRR_REV_CVSMAJOR_GET_BF(regValue) \
	(GET_BF(XRR_XRR_REV_CVSMAJOR_BF_MASK,XRR_XRR_REV_CVSMAJOR_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq0RexDevResp ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq0RexDevResp in the IntFlg Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTFLG_IRQ0REXDEVRESP_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ0REXDEVRESP_BF_MASK,XRR_XRR_INTFLG_IRQ0REXDEVRESP_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq0RexDevResp in the IntFlg Register
 * This does not do a shift.
 */
#define XRR_XRR_INTFLG_IRQ0REXDEVRESP_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ0REXDEVRESP_BF_MASK))

/**
 * The Get Macro for Irq0RexDevResp in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXDEVRESP_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTFLG_IRQ0REXDEVRESP_BF_MASK,XRR_XRR_INTFLG_IRQ0REXDEVRESP_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrAsync ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq0RexRdFrmHdrAsync in the IntFlg Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_BF_MASK,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq0RexRdFrmHdrAsync in the IntFlg Register
 * This does not do a shift.
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_BF_MASK))

/**
 * The Get Macro for Irq0RexRdFrmHdrAsync in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_BF_MASK,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRASYNC_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrPer ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq0RexRdFrmHdrPer in the IntFlg Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_BF_MASK,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq0RexRdFrmHdrPer in the IntFlg Register
 * This does not do a shift.
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_BF_MASK))

/**
 * The Get Macro for Irq0RexRdFrmHdrPer in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_BF_MASK,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRPER_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrMSA ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq0RexRdFrmHdrMSA in the IntFlg Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_BF_MASK,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq0RexRdFrmHdrMSA in the IntFlg Register
 * This does not do a shift.
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_BF_MASK))

/**
 * The Get Macro for Irq0RexRdFrmHdrMSA in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_BF_MASK,XRR_XRR_INTFLG_IRQ0REXRDFRMHDRMSA_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq0RexSOF ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq0RexSOF in the IntFlg Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTFLG_IRQ0REXSOF_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ0REXSOF_BF_MASK,XRR_XRR_INTFLG_IRQ0REXSOF_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq0RexSOF in the IntFlg Register
 * This does not do a shift.
 */
#define XRR_XRR_INTFLG_IRQ0REXSOF_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ0REXSOF_BF_MASK))

/**
 * The Get Macro for Irq0RexSOF in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ0REXSOF_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTFLG_IRQ0REXSOF_BF_MASK,XRR_XRR_INTFLG_IRQ0REXSOF_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq1StatCntInOverflow ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq1StatCntInOverflow in the IntFlg Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_BF_MASK,XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq1StatCntInOverflow in the IntFlg Register
 * This does not do a shift.
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_BF_MASK))

/**
 * The Get Macro for Irq1StatCntInOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_BF_MASK,XRR_XRR_INTFLG_IRQ1STATCNTINOVERFLOW_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq1StatCntOutOverflow ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq1StatCntOutOverflow in the IntFlg Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_BF_MASK,XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq1StatCntOutOverflow in the IntFlg Register
 * This does not do a shift.
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_BF_MASK))

/**
 * The Get Macro for Irq1StatCntOutOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_BF_MASK,XRR_XRR_INTFLG_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq1StatCntFlcOverflow ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq1StatCntFlcOverflow in the IntFlg Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_BF_MASK,XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq1StatCntFlcOverflow in the IntFlg Register
 * This does not do a shift.
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_BF_MASK))

/**
 * The Get Macro for Irq1StatCntFlcOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_BF_MASK,XRR_XRR_INTFLG_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq1StatCntErrOverflow ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq1StatCntErrOverflow in the IntFlg Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_BF_MASK,XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq1StatCntErrOverflow in the IntFlg Register
 * This does not do a shift.
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTFLG_REG_OFFSET,0,XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_BF_MASK))

/**
 * The Get Macro for Irq1StatCntErrOverflow in the IntFlg Register
 */
#define XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_BF_MASK,XRR_XRR_INTFLG_IRQ1STATCNTERROVERFLOW_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq0RexDevResp ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq0RexDevResp in the IntSrc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTSRC_IRQ0REXDEVRESP_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ0REXDEVRESP_BF_MASK,XRR_XRR_INTSRC_IRQ0REXDEVRESP_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq0RexDevResp in the IntSrc Register
 * This does not do a shift.
 */
#define XRR_XRR_INTSRC_IRQ0REXDEVRESP_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ0REXDEVRESP_BF_MASK))

/**
 * The Get Macro for Irq0RexDevResp in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXDEVRESP_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTSRC_IRQ0REXDEVRESP_BF_MASK,XRR_XRR_INTSRC_IRQ0REXDEVRESP_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrAsync ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq0RexRdFrmHdrAsync in the IntSrc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_BF_MASK,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq0RexRdFrmHdrAsync in the IntSrc Register
 * This does not do a shift.
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_BF_MASK))

/**
 * The Get Macro for Irq0RexRdFrmHdrAsync in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_BF_MASK,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRASYNC_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrPer ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq0RexRdFrmHdrPer in the IntSrc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_BF_MASK,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq0RexRdFrmHdrPer in the IntSrc Register
 * This does not do a shift.
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_BF_MASK))

/**
 * The Get Macro for Irq0RexRdFrmHdrPer in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_BF_MASK,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRPER_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrMSA ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq0RexRdFrmHdrMSA in the IntSrc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_BF_MASK,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq0RexRdFrmHdrMSA in the IntSrc Register
 * This does not do a shift.
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_BF_MASK))

/**
 * The Get Macro for Irq0RexRdFrmHdrMSA in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_BF_MASK,XRR_XRR_INTSRC_IRQ0REXRDFRMHDRMSA_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq0RexSOF ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq0RexSOF in the IntSrc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTSRC_IRQ0REXSOF_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ0REXSOF_BF_MASK,XRR_XRR_INTSRC_IRQ0REXSOF_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq0RexSOF in the IntSrc Register
 * This does not do a shift.
 */
#define XRR_XRR_INTSRC_IRQ0REXSOF_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ0REXSOF_BF_MASK))

/**
 * The Get Macro for Irq0RexSOF in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ0REXSOF_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTSRC_IRQ0REXSOF_BF_MASK,XRR_XRR_INTSRC_IRQ0REXSOF_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq1StatCntInOverflow ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq1StatCntInOverflow in the IntSrc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_BF_MASK,XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq1StatCntInOverflow in the IntSrc Register
 * This does not do a shift.
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_BF_MASK))

/**
 * The Get Macro for Irq1StatCntInOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_BF_MASK,XRR_XRR_INTSRC_IRQ1STATCNTINOVERFLOW_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq1StatCntOutOverflow ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq1StatCntOutOverflow in the IntSrc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_BF_MASK,XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq1StatCntOutOverflow in the IntSrc Register
 * This does not do a shift.
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_BF_MASK))

/**
 * The Get Macro for Irq1StatCntOutOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_BF_MASK,XRR_XRR_INTSRC_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq1StatCntFlcOverflow ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq1StatCntFlcOverflow in the IntSrc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_BF_MASK,XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq1StatCntFlcOverflow in the IntSrc Register
 * This does not do a shift.
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_BF_MASK))

/**
 * The Get Macro for Irq1StatCntFlcOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_BF_MASK,XRR_XRR_INTSRC_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT,(regValue)))

/******************************************************************************
 The Irq1StatCntErrOverflow ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Irq1StatCntErrOverflow in the IntSrc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_BF_MASK,XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_BF_SHIFT))

/**
 * The Read then Mask Macro for Irq1StatCntErrOverflow in the IntSrc Register
 * This does not do a shift.
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTSRC_REG_OFFSET,0,XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_BF_MASK))

/**
 * The Get Macro for Irq1StatCntErrOverflow in the IntSrc Register
 */
#define XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_BF_MASK,XRR_XRR_INTSRC_IRQ1STATCNTERROVERFLOW_BF_SHIFT,(regValue)))

/******************************************************************************
 The BulkOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for BulkOvfl in the StatCntIn Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTIN_BULKOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_BULKOVFL_BF_MASK,XRR_XRR_STATCNTIN_BULKOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for BulkOvfl in the StatCntIn Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTIN_BULKOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_BULKOVFL_BF_MASK))

/**
 * The Get Macro for BulkOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_BULKOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTIN_BULKOVFL_BF_MASK,XRR_XRR_STATCNTIN_BULKOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Iso ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Iso in the StatCntIn Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTIN_ISO_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_ISO_BF_MASK,XRR_XRR_STATCNTIN_ISO_BF_SHIFT))

/**
 * The Read then Mask Macro for Iso in the StatCntIn Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTIN_ISO_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_ISO_BF_MASK))

/**
 * The Get Macro for Iso in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_ISO_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTIN_ISO_BF_MASK,XRR_XRR_STATCNTIN_ISO_BF_SHIFT,(regValue)))

/******************************************************************************
 The IsoOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for IsoOvfl in the StatCntIn Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTIN_ISOOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_ISOOVFL_BF_MASK,XRR_XRR_STATCNTIN_ISOOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for IsoOvfl in the StatCntIn Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTIN_ISOOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_ISOOVFL_BF_MASK))

/**
 * The Get Macro for IsoOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_ISOOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTIN_ISOOVFL_BF_MASK,XRR_XRR_STATCNTIN_ISOOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Intrp ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Intrp in the StatCntIn Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTIN_INTRP_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_INTRP_BF_MASK,XRR_XRR_STATCNTIN_INTRP_BF_SHIFT))

/**
 * The Read then Mask Macro for Intrp in the StatCntIn Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTIN_INTRP_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_INTRP_BF_MASK))

/**
 * The Get Macro for Intrp in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_INTRP_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTIN_INTRP_BF_MASK,XRR_XRR_STATCNTIN_INTRP_BF_SHIFT,(regValue)))

/******************************************************************************
 The IntrpOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for IntrpOvfl in the StatCntIn Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTIN_INTRPOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_INTRPOVFL_BF_MASK,XRR_XRR_STATCNTIN_INTRPOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for IntrpOvfl in the StatCntIn Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTIN_INTRPOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_INTRPOVFL_BF_MASK))

/**
 * The Get Macro for IntrpOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_INTRPOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTIN_INTRPOVFL_BF_MASK,XRR_XRR_STATCNTIN_INTRPOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Ctrl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Ctrl in the StatCntIn Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTIN_CTRL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_CTRL_BF_MASK,XRR_XRR_STATCNTIN_CTRL_BF_SHIFT))

/**
 * The Read then Mask Macro for Ctrl in the StatCntIn Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTIN_CTRL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_CTRL_BF_MASK))

/**
 * The Get Macro for Ctrl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_CTRL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTIN_CTRL_BF_MASK,XRR_XRR_STATCNTIN_CTRL_BF_SHIFT,(regValue)))

/******************************************************************************
 The CtrlOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for CtrlOvfl in the StatCntIn Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTIN_CTRLOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_CTRLOVFL_BF_MASK,XRR_XRR_STATCNTIN_CTRLOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for CtrlOvfl in the StatCntIn Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTIN_CTRLOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_CTRLOVFL_BF_MASK))

/**
 * The Get Macro for CtrlOvfl in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_CTRLOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTIN_CTRLOVFL_BF_MASK,XRR_XRR_STATCNTIN_CTRLOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The BulkOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for BulkOvfl in the StatCntOut Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTOUT_BULKOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_BULKOVFL_BF_MASK,XRR_XRR_STATCNTOUT_BULKOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for BulkOvfl in the StatCntOut Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTOUT_BULKOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_BULKOVFL_BF_MASK))

/**
 * The Get Macro for BulkOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_BULKOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTOUT_BULKOVFL_BF_MASK,XRR_XRR_STATCNTOUT_BULKOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Iso ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Iso in the StatCntOut Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTOUT_ISO_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_ISO_BF_MASK,XRR_XRR_STATCNTOUT_ISO_BF_SHIFT))

/**
 * The Read then Mask Macro for Iso in the StatCntOut Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTOUT_ISO_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_ISO_BF_MASK))

/**
 * The Get Macro for Iso in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_ISO_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTOUT_ISO_BF_MASK,XRR_XRR_STATCNTOUT_ISO_BF_SHIFT,(regValue)))

/******************************************************************************
 The IsoOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for IsoOvfl in the StatCntOut Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTOUT_ISOOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_ISOOVFL_BF_MASK,XRR_XRR_STATCNTOUT_ISOOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for IsoOvfl in the StatCntOut Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTOUT_ISOOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_ISOOVFL_BF_MASK))

/**
 * The Get Macro for IsoOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_ISOOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTOUT_ISOOVFL_BF_MASK,XRR_XRR_STATCNTOUT_ISOOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Intrp ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Intrp in the StatCntOut Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTOUT_INTRP_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_INTRP_BF_MASK,XRR_XRR_STATCNTOUT_INTRP_BF_SHIFT))

/**
 * The Read then Mask Macro for Intrp in the StatCntOut Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTOUT_INTRP_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_INTRP_BF_MASK))

/**
 * The Get Macro for Intrp in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_INTRP_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTOUT_INTRP_BF_MASK,XRR_XRR_STATCNTOUT_INTRP_BF_SHIFT,(regValue)))

/******************************************************************************
 The IntrpOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for IntrpOvfl in the StatCntOut Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTOUT_INTRPOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_INTRPOVFL_BF_MASK,XRR_XRR_STATCNTOUT_INTRPOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for IntrpOvfl in the StatCntOut Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTOUT_INTRPOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_INTRPOVFL_BF_MASK))

/**
 * The Get Macro for IntrpOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_INTRPOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTOUT_INTRPOVFL_BF_MASK,XRR_XRR_STATCNTOUT_INTRPOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Ctrl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Ctrl in the StatCntOut Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTOUT_CTRL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_CTRL_BF_MASK,XRR_XRR_STATCNTOUT_CTRL_BF_SHIFT))

/**
 * The Read then Mask Macro for Ctrl in the StatCntOut Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTOUT_CTRL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_CTRL_BF_MASK))

/**
 * The Get Macro for Ctrl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_CTRL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTOUT_CTRL_BF_MASK,XRR_XRR_STATCNTOUT_CTRL_BF_SHIFT,(regValue)))

/******************************************************************************
 The CtrlOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for CtrlOvfl in the StatCntOut Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTOUT_CTRLOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_CTRLOVFL_BF_MASK,XRR_XRR_STATCNTOUT_CTRLOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for CtrlOvfl in the StatCntOut Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTOUT_CTRLOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_CTRLOVFL_BF_MASK))

/**
 * The Get Macro for CtrlOvfl in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_CTRLOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTOUT_CTRLOVFL_BF_MASK,XRR_XRR_STATCNTOUT_CTRLOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The BulkInOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for BulkInOvfl in the StatCntFlc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTFLC_BULKINOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_BULKINOVFL_BF_MASK,XRR_XRR_STATCNTFLC_BULKINOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for BulkInOvfl in the StatCntFlc Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTFLC_BULKINOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_BULKINOVFL_BF_MASK))

/**
 * The Get Macro for BulkInOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKINOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTFLC_BULKINOVFL_BF_MASK,XRR_XRR_STATCNTFLC_BULKINOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The IsoIn ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for IsoIn in the StatCntFlc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTFLC_ISOIN_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_ISOIN_BF_MASK,XRR_XRR_STATCNTFLC_ISOIN_BF_SHIFT))

/**
 * The Read then Mask Macro for IsoIn in the StatCntFlc Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTFLC_ISOIN_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_ISOIN_BF_MASK))

/**
 * The Get Macro for IsoIn in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOIN_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTFLC_ISOIN_BF_MASK,XRR_XRR_STATCNTFLC_ISOIN_BF_SHIFT,(regValue)))

/******************************************************************************
 The IsoInOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for IsoInOvfl in the StatCntFlc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTFLC_ISOINOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_ISOINOVFL_BF_MASK,XRR_XRR_STATCNTFLC_ISOINOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for IsoInOvfl in the StatCntFlc Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTFLC_ISOINOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_ISOINOVFL_BF_MASK))

/**
 * The Get Macro for IsoInOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOINOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTFLC_ISOINOVFL_BF_MASK,XRR_XRR_STATCNTFLC_ISOINOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The BulkOut ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for BulkOut in the StatCntFlc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTFLC_BULKOUT_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_BULKOUT_BF_MASK,XRR_XRR_STATCNTFLC_BULKOUT_BF_SHIFT))

/**
 * The Read then Mask Macro for BulkOut in the StatCntFlc Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTFLC_BULKOUT_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_BULKOUT_BF_MASK))

/**
 * The Get Macro for BulkOut in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKOUT_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTFLC_BULKOUT_BF_MASK,XRR_XRR_STATCNTFLC_BULKOUT_BF_SHIFT,(regValue)))

/******************************************************************************
 The BulkOutOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for BulkOutOvfl in the StatCntFlc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTFLC_BULKOUTOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_BULKOUTOVFL_BF_MASK,XRR_XRR_STATCNTFLC_BULKOUTOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for BulkOutOvfl in the StatCntFlc Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTFLC_BULKOUTOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_BULKOUTOVFL_BF_MASK))

/**
 * The Get Macro for BulkOutOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKOUTOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTFLC_BULKOUTOVFL_BF_MASK,XRR_XRR_STATCNTFLC_BULKOUTOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The IsoOut ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for IsoOut in the StatCntFlc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTFLC_ISOOUT_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_ISOOUT_BF_MASK,XRR_XRR_STATCNTFLC_ISOOUT_BF_SHIFT))

/**
 * The Read then Mask Macro for IsoOut in the StatCntFlc Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTFLC_ISOOUT_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_ISOOUT_BF_MASK))

/**
 * The Get Macro for IsoOut in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOOUT_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTFLC_ISOOUT_BF_MASK,XRR_XRR_STATCNTFLC_ISOOUT_BF_SHIFT,(regValue)))

/******************************************************************************
 The IsoOutOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for IsoOutOvfl in the StatCntFlc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTFLC_ISOOUTOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_ISOOUTOVFL_BF_MASK,XRR_XRR_STATCNTFLC_ISOOUTOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for IsoOutOvfl in the StatCntFlc Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTFLC_ISOOUTOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_ISOOUTOVFL_BF_MASK))

/**
 * The Get Macro for IsoOutOvfl in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_ISOOUTOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTFLC_ISOOUTOVFL_BF_MASK,XRR_XRR_STATCNTFLC_ISOOUTOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The LinkOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for LinkOvfl in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_LINKOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_LINKOVFL_BF_MASK,XRR_XRR_STATCNTERR_LINKOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for LinkOvfl in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_LINKOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_LINKOVFL_BF_MASK))

/**
 * The Get Macro for LinkOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_LINKOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_LINKOVFL_BF_MASK,XRR_XRR_STATCNTERR_LINKOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Crc16 ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Crc16 in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_CRC16_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_CRC16_BF_MASK,XRR_XRR_STATCNTERR_CRC16_BF_SHIFT))

/**
 * The Read then Mask Macro for Crc16 in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_CRC16_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_CRC16_BF_MASK))

/**
 * The Get Macro for Crc16 in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC16_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_CRC16_BF_MASK,XRR_XRR_STATCNTERR_CRC16_BF_SHIFT,(regValue)))

/******************************************************************************
 The Crc16Ovfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Crc16Ovfl in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_CRC16OVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_CRC16OVFL_BF_MASK,XRR_XRR_STATCNTERR_CRC16OVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for Crc16Ovfl in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_CRC16OVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_CRC16OVFL_BF_MASK))

/**
 * The Get Macro for Crc16Ovfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC16OVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_CRC16OVFL_BF_MASK,XRR_XRR_STATCNTERR_CRC16OVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Crc5 ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Crc5 in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_CRC5_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_CRC5_BF_MASK,XRR_XRR_STATCNTERR_CRC5_BF_SHIFT))

/**
 * The Read then Mask Macro for Crc5 in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_CRC5_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_CRC5_BF_MASK))

/**
 * The Get Macro for Crc5 in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC5_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_CRC5_BF_MASK,XRR_XRR_STATCNTERR_CRC5_BF_SHIFT,(regValue)))

/******************************************************************************
 The Crc5Ovfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Crc5Ovfl in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_CRC5OVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_CRC5OVFL_BF_MASK,XRR_XRR_STATCNTERR_CRC5OVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for Crc5Ovfl in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_CRC5OVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_CRC5OVFL_BF_MASK))

/**
 * The Get Macro for Crc5Ovfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_CRC5OVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_CRC5OVFL_BF_MASK,XRR_XRR_STATCNTERR_CRC5OVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Pid ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Pid in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_PID_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_PID_BF_MASK,XRR_XRR_STATCNTERR_PID_BF_SHIFT))

/**
 * The Read then Mask Macro for Pid in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_PID_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_PID_BF_MASK))

/**
 * The Get Macro for Pid in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_PID_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_PID_BF_MASK,XRR_XRR_STATCNTERR_PID_BF_SHIFT,(regValue)))

/******************************************************************************
 The PidOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for PidOvfl in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_PIDOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_PIDOVFL_BF_MASK,XRR_XRR_STATCNTERR_PIDOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for PidOvfl in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_PIDOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_PIDOVFL_BF_MASK))

/**
 * The Get Macro for PidOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_PIDOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_PIDOVFL_BF_MASK,XRR_XRR_STATCNTERR_PIDOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The BitStuff ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for BitStuff in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_BITSTUFF_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_BITSTUFF_BF_MASK,XRR_XRR_STATCNTERR_BITSTUFF_BF_SHIFT))

/**
 * The Read then Mask Macro for BitStuff in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_BITSTUFF_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_BITSTUFF_BF_MASK))

/**
 * The Get Macro for BitStuff in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BITSTUFF_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_BITSTUFF_BF_MASK,XRR_XRR_STATCNTERR_BITSTUFF_BF_SHIFT,(regValue)))

/******************************************************************************
 The BitStuffOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for BitStuffOvfl in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_BITSTUFFOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_BITSTUFFOVFL_BF_MASK,XRR_XRR_STATCNTERR_BITSTUFFOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for BitStuffOvfl in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_BITSTUFFOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_BITSTUFFOVFL_BF_MASK))

/**
 * The Get Macro for BitStuffOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BITSTUFFOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_BITSTUFFOVFL_BF_MASK,XRR_XRR_STATCNTERR_BITSTUFFOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Babel ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Babel in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_BABEL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_BABEL_BF_MASK,XRR_XRR_STATCNTERR_BABEL_BF_SHIFT))

/**
 * The Read then Mask Macro for Babel in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_BABEL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_BABEL_BF_MASK))

/**
 * The Get Macro for Babel in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BABEL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_BABEL_BF_MASK,XRR_XRR_STATCNTERR_BABEL_BF_SHIFT,(regValue)))

/******************************************************************************
 The BabelOvfl ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for BabelOvfl in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_BABELOVFL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_BABELOVFL_BF_MASK,XRR_XRR_STATCNTERR_BABELOVFL_BF_SHIFT))

/**
 * The Read then Mask Macro for BabelOvfl in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_BABELOVFL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_BABELOVFL_BF_MASK))

/**
 * The Get Macro for BabelOvfl in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_BABELOVFL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_BABELOVFL_BF_MASK,XRR_XRR_STATCNTERR_BABELOVFL_BF_SHIFT,(regValue)))

/******************************************************************************
 The DbgTxState ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for DbgTxState in the RexCtrl Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_REXCTRL_DBGTXSTATE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_DBGTXSTATE_BF_MASK,XRR_XRR_REXCTRL_DBGTXSTATE_BF_SHIFT))

/**
 * The Read then Mask Macro for DbgTxState in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_DBGTXSTATE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_DBGTXSTATE_BF_MASK))

/**
 * The Get Macro for DbgTxState in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_DBGTXSTATE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_REXCTRL_DBGTXSTATE_BF_MASK,XRR_XRR_REXCTRL_DBGTXSTATE_BF_SHIFT,(regValue)))

/******************************************************************************
 The CurUFrame ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for CurUFrame in the FrameInfo Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_FRAMEINFO_CURUFRAME_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_FRAMEINFO_REG_OFFSET,0,XRR_XRR_FRAMEINFO_CURUFRAME_BF_MASK,XRR_XRR_FRAMEINFO_CURUFRAME_BF_SHIFT))

/**
 * The Read then Mask Macro for CurUFrame in the FrameInfo Register
 * This does not do a shift.
 */
#define XRR_XRR_FRAMEINFO_CURUFRAME_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_FRAMEINFO_REG_OFFSET,0,XRR_XRR_FRAMEINFO_CURUFRAME_BF_MASK))

/**
 * The Get Macro for CurUFrame in the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_CURUFRAME_GET_BF(regValue) \
	(GET_BF(XRR_XRR_FRAMEINFO_CURUFRAME_BF_MASK,XRR_XRR_FRAMEINFO_CURUFRAME_BF_SHIFT,(regValue)))

/******************************************************************************
 The FrameTime ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for FrameTime in the FrameInfo Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_FRAMEINFO_FRAMETIME_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_FRAMEINFO_REG_OFFSET,0,XRR_XRR_FRAMEINFO_FRAMETIME_BF_MASK,XRR_XRR_FRAMEINFO_FRAMETIME_BF_SHIFT))

/**
 * The Read then Mask Macro for FrameTime in the FrameInfo Register
 * This does not do a shift.
 */
#define XRR_XRR_FRAMEINFO_FRAMETIME_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_FRAMEINFO_REG_OFFSET,0,XRR_XRR_FRAMEINFO_FRAMETIME_BF_MASK))

/**
 * The Get Macro for FrameTime in the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_FRAMETIME_GET_BF(regValue) \
	(GET_BF(XRR_XRR_FRAMEINFO_FRAMETIME_BF_MASK,XRR_XRR_FRAMEINFO_FRAMETIME_BF_SHIFT,(regValue)))

/******************************************************************************
 The RxCurUFrame ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for RxCurUFrame in the FrameInfo Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_FRAMEINFO_RXCURUFRAME_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_FRAMEINFO_REG_OFFSET,0,XRR_XRR_FRAMEINFO_RXCURUFRAME_BF_MASK,XRR_XRR_FRAMEINFO_RXCURUFRAME_BF_SHIFT))

/**
 * The Read then Mask Macro for RxCurUFrame in the FrameInfo Register
 * This does not do a shift.
 */
#define XRR_XRR_FRAMEINFO_RXCURUFRAME_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_FRAMEINFO_REG_OFFSET,0,XRR_XRR_FRAMEINFO_RXCURUFRAME_BF_MASK))

/**
 * The Get Macro for RxCurUFrame in the FrameInfo Register
 */
#define XRR_XRR_FRAMEINFO_RXCURUFRAME_GET_BF(regValue) \
	(GET_BF(XRR_XRR_FRAMEINFO_RXCURUFRAME_BF_MASK,XRR_XRR_FRAMEINFO_RXCURUFRAME_BF_SHIFT,(regValue)))

/******************************************************************************
 The Addr ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Addr in the RdFrmHdr0 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR0_ADDR_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_ADDR_BF_MASK,XRR_XRR_RDFRMHDR0_ADDR_BF_SHIFT))

/**
 * The Read then Mask Macro for Addr in the RdFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR0_ADDR_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_ADDR_BF_MASK))

/**
 * The Get Macro for Addr in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ADDR_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR0_ADDR_BF_MASK,XRR_XRR_RDFRMHDR0_ADDR_BF_SHIFT,(regValue)))

/******************************************************************************
 The Endp ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Endp in the RdFrmHdr0 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR0_ENDP_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_ENDP_BF_MASK,XRR_XRR_RDFRMHDR0_ENDP_BF_SHIFT))

/**
 * The Read then Mask Macro for Endp in the RdFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR0_ENDP_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_ENDP_BF_MASK))

/**
 * The Get Macro for Endp in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ENDP_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR0_ENDP_BF_MASK,XRR_XRR_RDFRMHDR0_ENDP_BF_SHIFT,(regValue)))

/******************************************************************************
 The EndpType ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for EndpType in the RdFrmHdr0 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR0_ENDPTYPE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_ENDPTYPE_BF_MASK,XRR_XRR_RDFRMHDR0_ENDPTYPE_BF_SHIFT))

/**
 * The Read then Mask Macro for EndpType in the RdFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR0_ENDPTYPE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_ENDPTYPE_BF_MASK))

/**
 * The Get Macro for EndpType in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ENDPTYPE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR0_ENDPTYPE_BF_MASK,XRR_XRR_RDFRMHDR0_ENDPTYPE_BF_SHIFT,(regValue)))

/******************************************************************************
 The Action ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Action in the RdFrmHdr0 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR0_ACTION_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_ACTION_BF_MASK,XRR_XRR_RDFRMHDR0_ACTION_BF_SHIFT))

/**
 * The Read then Mask Macro for Action in the RdFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR0_ACTION_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_ACTION_BF_MASK))

/**
 * The Get Macro for Action in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_ACTION_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR0_ACTION_BF_MASK,XRR_XRR_RDFRMHDR0_ACTION_BF_SHIFT,(regValue)))

/******************************************************************************
 The Modifier ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Modifier in the RdFrmHdr0 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR0_MODIFIER_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_MODIFIER_BF_MASK,XRR_XRR_RDFRMHDR0_MODIFIER_BF_SHIFT))

/**
 * The Read then Mask Macro for Modifier in the RdFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR0_MODIFIER_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_MODIFIER_BF_MASK))

/**
 * The Get Macro for Modifier in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_MODIFIER_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR0_MODIFIER_BF_MASK,XRR_XRR_RDFRMHDR0_MODIFIER_BF_SHIFT,(regValue)))

/******************************************************************************
 The DataQid ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for DataQid in the RdFrmHdr0 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR0_DATAQID_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_DATAQID_BF_MASK,XRR_XRR_RDFRMHDR0_DATAQID_BF_SHIFT))

/**
 * The Read then Mask Macro for DataQid in the RdFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR0_DATAQID_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_DATAQID_BF_MASK))

/**
 * The Get Macro for DataQid in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_DATAQID_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR0_DATAQID_BF_MASK,XRR_XRR_RDFRMHDR0_DATAQID_BF_SHIFT,(regValue)))

/******************************************************************************
 The Toggle ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Toggle in the RdFrmHdr0 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR0_TOGGLE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_TOGGLE_BF_MASK,XRR_XRR_RDFRMHDR0_TOGGLE_BF_SHIFT))

/**
 * The Read then Mask Macro for Toggle in the RdFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR0_TOGGLE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_TOGGLE_BF_MASK))

/**
 * The Get Macro for Toggle in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_TOGGLE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR0_TOGGLE_BF_MASK,XRR_XRR_RDFRMHDR0_TOGGLE_BF_SHIFT,(regValue)))

/******************************************************************************
 The SchType ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for SchType in the RdFrmHdr0 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR0_SCHTYPE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_SCHTYPE_BF_MASK,XRR_XRR_RDFRMHDR0_SCHTYPE_BF_SHIFT))

/**
 * The Read then Mask Macro for SchType in the RdFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR0_SCHTYPE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_SCHTYPE_BF_MASK))

/**
 * The Get Macro for SchType in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_SCHTYPE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR0_SCHTYPE_BF_MASK,XRR_XRR_RDFRMHDR0_SCHTYPE_BF_SHIFT,(regValue)))

/******************************************************************************
 The Response ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Response in the RdFrmHdr0 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR0_RESPONSE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_RESPONSE_BF_MASK,XRR_XRR_RDFRMHDR0_RESPONSE_BF_SHIFT))

/**
 * The Read then Mask Macro for Response in the RdFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR0_RESPONSE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR0_REG_OFFSET,0,XRR_XRR_RDFRMHDR0_RESPONSE_BF_MASK))

/**
 * The Get Macro for Response in the RdFrmHdr0 Register
 */
#define XRR_XRR_RDFRMHDR0_RESPONSE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR0_RESPONSE_BF_MASK,XRR_XRR_RDFRMHDR0_RESPONSE_BF_SHIFT,(regValue)))

/******************************************************************************
 The HubPort ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for HubPort in the RdFrmHdr1 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR1_HUBPORT_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_HUBPORT_BF_MASK,XRR_XRR_RDFRMHDR1_HUBPORT_BF_SHIFT))

/**
 * The Read then Mask Macro for HubPort in the RdFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR1_HUBPORT_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_HUBPORT_BF_MASK))

/**
 * The Get Macro for HubPort in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_HUBPORT_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR1_HUBPORT_BF_MASK,XRR_XRR_RDFRMHDR1_HUBPORT_BF_SHIFT,(regValue)))

/******************************************************************************
 The HubAddr ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for HubAddr in the RdFrmHdr1 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR1_HUBADDR_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_HUBADDR_BF_MASK,XRR_XRR_RDFRMHDR1_HUBADDR_BF_SHIFT))

/**
 * The Read then Mask Macro for HubAddr in the RdFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR1_HUBADDR_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_HUBADDR_BF_MASK))

/**
 * The Get Macro for HubAddr in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_HUBADDR_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR1_HUBADDR_BF_MASK,XRR_XRR_RDFRMHDR1_HUBADDR_BF_SHIFT,(regValue)))

/******************************************************************************
 The SplitSE ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for SplitSE in the RdFrmHdr1 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR1_SPLITSE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_SPLITSE_BF_MASK,XRR_XRR_RDFRMHDR1_SPLITSE_BF_SHIFT))

/**
 * The Read then Mask Macro for SplitSE in the RdFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR1_SPLITSE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_SPLITSE_BF_MASK))

/**
 * The Get Macro for SplitSE in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_SPLITSE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR1_SPLITSE_BF_MASK,XRR_XRR_RDFRMHDR1_SPLITSE_BF_SHIFT,(regValue)))

/******************************************************************************
 The Error ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Error in the RdFrmHdr1 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR1_ERROR_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_ERROR_BF_MASK,XRR_XRR_RDFRMHDR1_ERROR_BF_SHIFT))

/**
 * The Read then Mask Macro for Error in the RdFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR1_ERROR_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_ERROR_BF_MASK))

/**
 * The Get Macro for Error in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_ERROR_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR1_ERROR_BF_MASK,XRR_XRR_RDFRMHDR1_ERROR_BF_SHIFT,(regValue)))

/******************************************************************************
 The RxUFrame ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for RxUFrame in the RdFrmHdr1 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR1_RXUFRAME_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_RXUFRAME_BF_MASK,XRR_XRR_RDFRMHDR1_RXUFRAME_BF_SHIFT))

/**
 * The Read then Mask Macro for RxUFrame in the RdFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR1_RXUFRAME_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_RXUFRAME_BF_MASK))

/**
 * The Get Macro for RxUFrame in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_RXUFRAME_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR1_RXUFRAME_BF_MASK,XRR_XRR_RDFRMHDR1_RXUFRAME_BF_SHIFT,(regValue)))

/******************************************************************************
 The RxFrame ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for RxFrame in the RdFrmHdr1 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR1_RXFRAME_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_RXFRAME_BF_MASK,XRR_XRR_RDFRMHDR1_RXFRAME_BF_SHIFT))

/**
 * The Read then Mask Macro for RxFrame in the RdFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR1_RXFRAME_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR1_REG_OFFSET,0,XRR_XRR_RDFRMHDR1_RXFRAME_BF_MASK))

/**
 * The Get Macro for RxFrame in the RdFrmHdr1 Register
 */
#define XRR_XRR_RDFRMHDR1_RXFRAME_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR1_RXFRAME_BF_MASK,XRR_XRR_RDFRMHDR1_RXFRAME_BF_SHIFT,(regValue)))

/******************************************************************************
 The Accel ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Accel in the RdFrmHdr2 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR2_ACCEL_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR2_REG_OFFSET,0,XRR_XRR_RDFRMHDR2_ACCEL_BF_MASK,XRR_XRR_RDFRMHDR2_ACCEL_BF_SHIFT))

/**
 * The Read then Mask Macro for Accel in the RdFrmHdr2 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR2_ACCEL_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR2_REG_OFFSET,0,XRR_XRR_RDFRMHDR2_ACCEL_BF_MASK))

/**
 * The Get Macro for Accel in the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_ACCEL_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR2_ACCEL_BF_MASK,XRR_XRR_RDFRMHDR2_ACCEL_BF_SHIFT,(regValue)))

/******************************************************************************
 The Count ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Count in the RdFrmHdr2 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR2_COUNT_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR2_REG_OFFSET,0,XRR_XRR_RDFRMHDR2_COUNT_BF_MASK,XRR_XRR_RDFRMHDR2_COUNT_BF_SHIFT))

/**
 * The Read then Mask Macro for Count in the RdFrmHdr2 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR2_COUNT_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR2_REG_OFFSET,0,XRR_XRR_RDFRMHDR2_COUNT_BF_MASK))

/**
 * The Get Macro for Count in the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_COUNT_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR2_COUNT_BF_MASK,XRR_XRR_RDFRMHDR2_COUNT_BF_SHIFT,(regValue)))

/******************************************************************************
 The CBWDir ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for CBWDir in the RdFrmHdr2 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDR2_CBWDIR_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDR2_REG_OFFSET,0,XRR_XRR_RDFRMHDR2_CBWDIR_BF_MASK,XRR_XRR_RDFRMHDR2_CBWDIR_BF_SHIFT))

/**
 * The Read then Mask Macro for CBWDir in the RdFrmHdr2 Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDR2_CBWDIR_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDR2_REG_OFFSET,0,XRR_XRR_RDFRMHDR2_CBWDIR_BF_MASK))

/**
 * The Get Macro for CBWDir in the RdFrmHdr2 Register
 */
#define XRR_XRR_RDFRMHDR2_CBWDIR_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDR2_CBWDIR_BF_MASK,XRR_XRR_RDFRMHDR2_CBWDIR_BF_SHIFT,(regValue)))

/******************************************************************************
 The SrcQStat ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for SrcQStat in the Schedule Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_SCHEDULE_SRCQSTAT_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SRCQSTAT_BF_MASK,XRR_XRR_SCHEDULE_SRCQSTAT_BF_SHIFT))

/**
 * The Read then Mask Macro for SrcQStat in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_SRCQSTAT_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SRCQSTAT_BF_MASK))

/**
 * The Get Macro for SrcQStat in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SRCQSTAT_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHEDULE_SRCQSTAT_BF_MASK,XRR_XRR_SCHEDULE_SRCQSTAT_BF_SHIFT,(regValue)))

/******************************************************************************
 The RxFrameNum ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for RxFrameNum in the SofDbg1 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_SOFDBG1_RXFRAMENUM_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SOFDBG1_REG_OFFSET,0,XRR_XRR_SOFDBG1_RXFRAMENUM_BF_MASK,XRR_XRR_SOFDBG1_RXFRAMENUM_BF_SHIFT))

/**
 * The Read then Mask Macro for RxFrameNum in the SofDbg1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SOFDBG1_RXFRAMENUM_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SOFDBG1_REG_OFFSET,0,XRR_XRR_SOFDBG1_RXFRAMENUM_BF_MASK))

/**
 * The Get Macro for RxFrameNum in the SofDbg1 Register
 */
#define XRR_XRR_SOFDBG1_RXFRAMENUM_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SOFDBG1_RXFRAMENUM_BF_MASK,XRR_XRR_SOFDBG1_RXFRAMENUM_BF_SHIFT,(regValue)))

/******************************************************************************
 The TxFrameNum ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for TxFrameNum in the SofDbg1 Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_SOFDBG1_TXFRAMENUM_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SOFDBG1_REG_OFFSET,0,XRR_XRR_SOFDBG1_TXFRAMENUM_BF_MASK,XRR_XRR_SOFDBG1_TXFRAMENUM_BF_SHIFT))

/**
 * The Read then Mask Macro for TxFrameNum in the SofDbg1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SOFDBG1_TXFRAMENUM_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SOFDBG1_REG_OFFSET,0,XRR_XRR_SOFDBG1_TXFRAMENUM_BF_MASK))

/**
 * The Get Macro for TxFrameNum in the SofDbg1 Register
 */
#define XRR_XRR_SOFDBG1_TXFRAMENUM_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SOFDBG1_TXFRAMENUM_BF_MASK,XRR_XRR_SOFDBG1_TXFRAMENUM_BF_SHIFT,(regValue)))

/******************************************************************************
 The TransferLen ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for TransferLen in the RdFrmHdrMSA Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_RDFRMHDRMSA_REG_OFFSET,0,XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_BF_MASK,XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_BF_SHIFT))

/**
 * The Read then Mask Macro for TransferLen in the RdFrmHdrMSA Register
 * This does not do a shift.
 */
#define XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_RDFRMHDRMSA_REG_OFFSET,0,XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_BF_MASK))

/**
 * The Get Macro for TransferLen in the RdFrmHdrMSA Register
 */
#define XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_GET_BF(regValue) \
	(GET_BF(XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_BF_MASK,XRR_XRR_RDFRMHDRMSA_TRANSFERLEN_BF_SHIFT,(regValue)))

/******************************************************************************
 The Bulk ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Bulk in the StatCntIn Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTIN_BULK_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_BULK_BF_MASK,XRR_XRR_STATCNTIN_BULK_BF_SHIFT))

/**
 * The Read then Mask Macro for Bulk in the StatCntIn Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTIN_BULK_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTIN_REG_OFFSET,0,XRR_XRR_STATCNTIN_BULK_BF_MASK))

/**
 * The Get Macro for Bulk in the StatCntIn Register
 */
#define XRR_XRR_STATCNTIN_BULK_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTIN_BULK_BF_MASK,XRR_XRR_STATCNTIN_BULK_BF_SHIFT,(regValue)))

/******************************************************************************
 The Bulk ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Bulk in the StatCntOut Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTOUT_BULK_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_BULK_BF_MASK,XRR_XRR_STATCNTOUT_BULK_BF_SHIFT))

/**
 * The Read then Mask Macro for Bulk in the StatCntOut Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTOUT_BULK_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTOUT_REG_OFFSET,0,XRR_XRR_STATCNTOUT_BULK_BF_MASK))

/**
 * The Get Macro for Bulk in the StatCntOut Register
 */
#define XRR_XRR_STATCNTOUT_BULK_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTOUT_BULK_BF_MASK,XRR_XRR_STATCNTOUT_BULK_BF_SHIFT,(regValue)))

/******************************************************************************
 The BulkIn ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for BulkIn in the StatCntFlc Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTFLC_BULKIN_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_BULKIN_BF_MASK,XRR_XRR_STATCNTFLC_BULKIN_BF_SHIFT))

/**
 * The Read then Mask Macro for BulkIn in the StatCntFlc Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTFLC_BULKIN_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTFLC_REG_OFFSET,0,XRR_XRR_STATCNTFLC_BULKIN_BF_MASK))

/**
 * The Get Macro for BulkIn in the StatCntFlc Register
 */
#define XRR_XRR_STATCNTFLC_BULKIN_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTFLC_BULKIN_BF_MASK,XRR_XRR_STATCNTFLC_BULKIN_BF_SHIFT,(regValue)))

/******************************************************************************
 The Link ReadOnlyBitField
******************************************************************************/
/**
 * The Read Macro for Link in the StatCntErr Register
 * This does a read, mask, then shift.
 */
#define XRR_XRR_STATCNTERR_LINK_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_LINK_BF_MASK,XRR_XRR_STATCNTERR_LINK_BF_SHIFT))

/**
 * The Read then Mask Macro for Link in the StatCntErr Register
 * This does not do a shift.
 */
#define XRR_XRR_STATCNTERR_LINK_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_STATCNTERR_REG_OFFSET,0,XRR_XRR_STATCNTERR_LINK_BF_MASK))

/**
 * The Get Macro for Link in the StatCntErr Register
 */
#define XRR_XRR_STATCNTERR_LINK_GET_BF(regValue) \
	(GET_BF(XRR_XRR_STATCNTERR_LINK_BF_MASK,XRR_XRR_STATCNTERR_LINK_BF_SHIFT,(regValue)))


/* CMacroHeaderView.BfRWMacroVP per ReadWriteBitField (and subclasses) */

/******************************************************************************
 The Irq0RexDevResp ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Irq0RexDevResp in the IntEn Register
 * This does a mask and shift.
 */
#define XRR_XRR_INTEN_IRQ0REXDEVRESP_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_MASK,XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_SHIFT))

/**
 * The Write Macro for Irq0RexDevResp in the IntEn Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTEN_IRQ0REXDEVRESP_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_MASK,XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Irq0RexDevResp in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXDEVRESP_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_MASK))

/**
 * The Read Modify Write Macro for Irq0RexDevResp in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXDEVRESP_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_MASK,(value)))

/**
 * The Toggle Macro for Irq0RexDevResp in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXDEVRESP_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_MASK))
/**
 * The Get Macro for Irq0RexDevResp in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXDEVRESP_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_MASK,XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Irq0RexDevResp in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXDEVRESP_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_MASK,XRR_XRR_INTEN_IRQ0REXDEVRESP_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrAsync ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Irq0RexRdFrmHdrAsync in the IntEn Register
 * This does a mask and shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_SHIFT))

/**
 * The Write Macro for Irq0RexRdFrmHdrAsync in the IntEn Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Irq0RexRdFrmHdrAsync in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_MASK))

/**
 * The Read Modify Write Macro for Irq0RexRdFrmHdrAsync in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_MASK,(value)))

/**
 * The Toggle Macro for Irq0RexRdFrmHdrAsync in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_MASK))
/**
 * The Get Macro for Irq0RexRdFrmHdrAsync in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Irq0RexRdFrmHdrAsync in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRASYNC_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrPer ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Irq0RexRdFrmHdrPer in the IntEn Register
 * This does a mask and shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_SHIFT))

/**
 * The Write Macro for Irq0RexRdFrmHdrPer in the IntEn Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Irq0RexRdFrmHdrPer in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_MASK))

/**
 * The Read Modify Write Macro for Irq0RexRdFrmHdrPer in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_MASK,(value)))

/**
 * The Toggle Macro for Irq0RexRdFrmHdrPer in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_MASK))
/**
 * The Get Macro for Irq0RexRdFrmHdrPer in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Irq0RexRdFrmHdrPer in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRPER_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrMSA ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Irq0RexRdFrmHdrMSA in the IntEn Register
 * This does a mask and shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_SHIFT))

/**
 * The Write Macro for Irq0RexRdFrmHdrMSA in the IntEn Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Irq0RexRdFrmHdrMSA in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_MASK))

/**
 * The Read Modify Write Macro for Irq0RexRdFrmHdrMSA in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_MASK,(value)))

/**
 * The Toggle Macro for Irq0RexRdFrmHdrMSA in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_MASK))
/**
 * The Get Macro for Irq0RexRdFrmHdrMSA in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Irq0RexRdFrmHdrMSA in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_MASK,XRR_XRR_INTEN_IRQ0REXRDFRMHDRMSA_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq0RexSOF ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Irq0RexSOF in the IntEn Register
 * This does a mask and shift.
 */
#define XRR_XRR_INTEN_IRQ0REXSOF_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXSOF_BF_MASK,XRR_XRR_INTEN_IRQ0REXSOF_BF_SHIFT))

/**
 * The Write Macro for Irq0RexSOF in the IntEn Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTEN_IRQ0REXSOF_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXSOF_BF_MASK,XRR_XRR_INTEN_IRQ0REXSOF_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Irq0RexSOF in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXSOF_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXSOF_BF_MASK))

/**
 * The Read Modify Write Macro for Irq0RexSOF in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXSOF_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXSOF_BF_MASK,(value)))

/**
 * The Toggle Macro for Irq0RexSOF in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ0REXSOF_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ0REXSOF_BF_MASK))
/**
 * The Get Macro for Irq0RexSOF in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXSOF_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTEN_IRQ0REXSOF_BF_MASK,XRR_XRR_INTEN_IRQ0REXSOF_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Irq0RexSOF in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ0REXSOF_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTEN_IRQ0REXSOF_BF_MASK,XRR_XRR_INTEN_IRQ0REXSOF_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq1StatCntInOverflow ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Irq1StatCntInOverflow in the IntEn Register
 * This does a mask and shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_SHIFT))

/**
 * The Write Macro for Irq1StatCntInOverflow in the IntEn Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Irq1StatCntInOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_MASK))

/**
 * The Read Modify Write Macro for Irq1StatCntInOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_MASK,(value)))

/**
 * The Toggle Macro for Irq1StatCntInOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_MASK))
/**
 * The Get Macro for Irq1StatCntInOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Irq1StatCntInOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTINOVERFLOW_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq1StatCntOutOverflow ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Irq1StatCntOutOverflow in the IntEn Register
 * This does a mask and shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT))

/**
 * The Write Macro for Irq1StatCntOutOverflow in the IntEn Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Irq1StatCntOutOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_MASK))

/**
 * The Read Modify Write Macro for Irq1StatCntOutOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_MASK,(value)))

/**
 * The Toggle Macro for Irq1StatCntOutOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_MASK))
/**
 * The Get Macro for Irq1StatCntOutOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Irq1StatCntOutOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq1StatCntFlcOverflow ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Irq1StatCntFlcOverflow in the IntEn Register
 * This does a mask and shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT))

/**
 * The Write Macro for Irq1StatCntFlcOverflow in the IntEn Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Irq1StatCntFlcOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_MASK))

/**
 * The Read Modify Write Macro for Irq1StatCntFlcOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_MASK,(value)))

/**
 * The Toggle Macro for Irq1StatCntFlcOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_MASK))
/**
 * The Get Macro for Irq1StatCntFlcOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Irq1StatCntFlcOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq1StatCntErrOverflow ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Irq1StatCntErrOverflow in the IntEn Register
 * This does a mask and shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_SHIFT))

/**
 * The Write Macro for Irq1StatCntErrOverflow in the IntEn Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Irq1StatCntErrOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_MASK))

/**
 * The Read Modify Write Macro for Irq1StatCntErrOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_MASK,(value)))

/**
 * The Toggle Macro for Irq1StatCntErrOverflow in the IntEn Register
 * This does not do a shift.
 */
#define XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_INTEN_REG_OFFSET,0,XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_MASK))
/**
 * The Get Macro for Irq1StatCntErrOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_GET_BF(regValue) \
	(GET_BF(XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Irq1StatCntErrOverflow in the IntEn Register
 */
#define XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_MASK,XRR_XRR_INTEN_IRQ1STATCNTERROVERFLOW_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The SofEn ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for SofEn in the RexCtrl Register
 * This does a mask and shift.
 */
#define XRR_XRR_REXCTRL_SOFEN_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFEN_BF_MASK,XRR_XRR_REXCTRL_SOFEN_BF_SHIFT))

/**
 * The Write Macro for SofEn in the RexCtrl Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_REXCTRL_SOFEN_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFEN_BF_MASK,XRR_XRR_REXCTRL_SOFEN_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for SofEn in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SOFEN_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFEN_BF_MASK))

/**
 * The Read Modify Write Macro for SofEn in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SOFEN_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFEN_BF_MASK,(value)))

/**
 * The Toggle Macro for SofEn in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SOFEN_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFEN_BF_MASK))
/**
 * The Get Macro for SofEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFEN_GET_BF(regValue) \
	(GET_BF(XRR_XRR_REXCTRL_SOFEN_BF_MASK,XRR_XRR_REXCTRL_SOFEN_BF_SHIFT,(regValue)))
/**
 * The Set Macro for SofEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFEN_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_REXCTRL_SOFEN_BF_MASK,XRR_XRR_REXCTRL_SOFEN_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The SchEn ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for SchEn in the RexCtrl Register
 * This does a mask and shift.
 */
#define XRR_XRR_REXCTRL_SCHEN_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SCHEN_BF_MASK,XRR_XRR_REXCTRL_SCHEN_BF_SHIFT))

/**
 * The Write Macro for SchEn in the RexCtrl Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_REXCTRL_SCHEN_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SCHEN_BF_MASK,XRR_XRR_REXCTRL_SCHEN_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for SchEn in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SCHEN_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SCHEN_BF_MASK))

/**
 * The Read Modify Write Macro for SchEn in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SCHEN_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SCHEN_BF_MASK,(value)))

/**
 * The Toggle Macro for SchEn in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SCHEN_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SCHEN_BF_MASK))
/**
 * The Get Macro for SchEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SCHEN_GET_BF(regValue) \
	(GET_BF(XRR_XRR_REXCTRL_SCHEN_BF_MASK,XRR_XRR_REXCTRL_SCHEN_BF_SHIFT,(regValue)))
/**
 * The Set Macro for SchEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SCHEN_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_REXCTRL_SCHEN_BF_MASK,XRR_XRR_REXCTRL_SCHEN_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The TxEn ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for TxEn in the RexCtrl Register
 * This does a mask and shift.
 */
#define XRR_XRR_REXCTRL_TXEN_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_TXEN_BF_MASK,XRR_XRR_REXCTRL_TXEN_BF_SHIFT))

/**
 * The Write Macro for TxEn in the RexCtrl Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_REXCTRL_TXEN_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_TXEN_BF_MASK,XRR_XRR_REXCTRL_TXEN_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for TxEn in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_TXEN_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_TXEN_BF_MASK))

/**
 * The Read Modify Write Macro for TxEn in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_TXEN_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_TXEN_BF_MASK,(value)))

/**
 * The Toggle Macro for TxEn in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_TXEN_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_TXEN_BF_MASK))
/**
 * The Get Macro for TxEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_TXEN_GET_BF(regValue) \
	(GET_BF(XRR_XRR_REXCTRL_TXEN_BF_MASK,XRR_XRR_REXCTRL_TXEN_BF_SHIFT,(regValue)))
/**
 * The Set Macro for TxEn in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_TXEN_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_REXCTRL_TXEN_BF_MASK,XRR_XRR_REXCTRL_TXEN_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The SOFAvgMode ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for SOFAvgMode in the RexCtrl Register
 * This does a mask and shift.
 */
#define XRR_XRR_REXCTRL_SOFAVGMODE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFAVGMODE_BF_MASK,XRR_XRR_REXCTRL_SOFAVGMODE_BF_SHIFT))

/**
 * The Write Macro for SOFAvgMode in the RexCtrl Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_REXCTRL_SOFAVGMODE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFAVGMODE_BF_MASK,XRR_XRR_REXCTRL_SOFAVGMODE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for SOFAvgMode in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SOFAVGMODE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFAVGMODE_BF_MASK))

/**
 * The Read Modify Write Macro for SOFAvgMode in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SOFAVGMODE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFAVGMODE_BF_MASK,(value)))

/**
 * The Toggle Macro for SOFAvgMode in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SOFAVGMODE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFAVGMODE_BF_MASK))
/**
 * The Get Macro for SOFAvgMode in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFAVGMODE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_REXCTRL_SOFAVGMODE_BF_MASK,XRR_XRR_REXCTRL_SOFAVGMODE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for SOFAvgMode in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFAVGMODE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_REXCTRL_SOFAVGMODE_BF_MASK,XRR_XRR_REXCTRL_SOFAVGMODE_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The SofAvgCnt ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for SofAvgCnt in the RexCtrl Register
 * This does a mask and shift.
 */
#define XRR_XRR_REXCTRL_SOFAVGCNT_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFAVGCNT_BF_MASK,XRR_XRR_REXCTRL_SOFAVGCNT_BF_SHIFT))

/**
 * The Write Macro for SofAvgCnt in the RexCtrl Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_REXCTRL_SOFAVGCNT_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFAVGCNT_BF_MASK,XRR_XRR_REXCTRL_SOFAVGCNT_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for SofAvgCnt in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SOFAVGCNT_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFAVGCNT_BF_MASK))

/**
 * The Read Modify Write Macro for SofAvgCnt in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SOFAVGCNT_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFAVGCNT_BF_MASK,(value)))

/**
 * The Toggle Macro for SofAvgCnt in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_SOFAVGCNT_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_SOFAVGCNT_BF_MASK))
/**
 * The Get Macro for SofAvgCnt in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFAVGCNT_GET_BF(regValue) \
	(GET_BF(XRR_XRR_REXCTRL_SOFAVGCNT_BF_MASK,XRR_XRR_REXCTRL_SOFAVGCNT_BF_SHIFT,(regValue)))
/**
 * The Set Macro for SofAvgCnt in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_SOFAVGCNT_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_REXCTRL_SOFAVGCNT_BF_MASK,XRR_XRR_REXCTRL_SOFAVGCNT_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The MsaRetryDisable ReadWriteBitField
******************************************************************************/
/**
 * The Read Macro for MSARETRYDISABLE in the RexCtrl Register
 * This does a mask and shift.
 */
#define XRR_XRR_REXCTRL_MSARETRYDISABLE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_MASK,XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_SHIFT))

/**
 * The Write Macro for MSARETRYDISABLE in the RexCtrl Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_REXCTRL_MSARETRYDISABLE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_MASK,XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for MSARETRYDISABLE in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_MSARETRYDISABLE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_MASK))

/**
 * The Read Modify Write Macro for MSARETRYDISABLE in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_MSARETRYDISABLE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_MASK,(value)))

/**
 * The Toggle Macro for MSARETRYDISABLE in the RexCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_REXCTRL_MSARETRYDISABLE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_REXCTRL_REG_OFFSET,0,XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_MASK))
/**
 * The Get Macro for MSARETRYDISABLE in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_MSARETRYDISABLE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_MASK,XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for MSARETRYDISABLE in the RexCtrl Register
 */
#define XRR_XRR_REXCTRL_MSARETRYDISABLE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_MASK,XRR_XRR_REXCTRL_MSARETRYDISABLE_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Split ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Split in the HSEofTime0 Register
 * This does a mask and shift.
 */
#define XRR_XRR_HSEOFTIME0_SPLIT_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,XRR_XRR_HSEOFTIME0_SPLIT_BF_MASK,XRR_XRR_HSEOFTIME0_SPLIT_BF_SHIFT))

/**
 * The Write Macro for Split in the HSEofTime0 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_HSEOFTIME0_SPLIT_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,XRR_XRR_HSEOFTIME0_SPLIT_BF_MASK,XRR_XRR_HSEOFTIME0_SPLIT_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Split in the HSEofTime0 Register
 * This does not do a shift.
 */
#define XRR_XRR_HSEOFTIME0_SPLIT_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,XRR_XRR_HSEOFTIME0_SPLIT_BF_MASK))

/**
 * The Read Modify Write Macro for Split in the HSEofTime0 Register
 * This does not do a shift.
 */
#define XRR_XRR_HSEOFTIME0_SPLIT_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,XRR_XRR_HSEOFTIME0_SPLIT_BF_MASK,(value)))

/**
 * The Toggle Macro for Split in the HSEofTime0 Register
 * This does not do a shift.
 */
#define XRR_XRR_HSEOFTIME0_SPLIT_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,XRR_XRR_HSEOFTIME0_SPLIT_BF_MASK))
/**
 * The Get Macro for Split in the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_SPLIT_GET_BF(regValue) \
	(GET_BF(XRR_XRR_HSEOFTIME0_SPLIT_BF_MASK,XRR_XRR_HSEOFTIME0_SPLIT_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Split in the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_SPLIT_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_HSEOFTIME0_SPLIT_BF_MASK,XRR_XRR_HSEOFTIME0_SPLIT_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Isoc ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Isoc in the HSEofTime0 Register
 * This does a mask and shift.
 */
#define XRR_XRR_HSEOFTIME0_ISOC_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,XRR_XRR_HSEOFTIME0_ISOC_BF_MASK,XRR_XRR_HSEOFTIME0_ISOC_BF_SHIFT))

/**
 * The Write Macro for Isoc in the HSEofTime0 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_HSEOFTIME0_ISOC_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,XRR_XRR_HSEOFTIME0_ISOC_BF_MASK,XRR_XRR_HSEOFTIME0_ISOC_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Isoc in the HSEofTime0 Register
 * This does not do a shift.
 */
#define XRR_XRR_HSEOFTIME0_ISOC_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,XRR_XRR_HSEOFTIME0_ISOC_BF_MASK))

/**
 * The Read Modify Write Macro for Isoc in the HSEofTime0 Register
 * This does not do a shift.
 */
#define XRR_XRR_HSEOFTIME0_ISOC_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,XRR_XRR_HSEOFTIME0_ISOC_BF_MASK,(value)))

/**
 * The Toggle Macro for Isoc in the HSEofTime0 Register
 * This does not do a shift.
 */
#define XRR_XRR_HSEOFTIME0_ISOC_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_HSEOFTIME0_REG_OFFSET,0,XRR_XRR_HSEOFTIME0_ISOC_BF_MASK))
/**
 * The Get Macro for Isoc in the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_ISOC_GET_BF(regValue) \
	(GET_BF(XRR_XRR_HSEOFTIME0_ISOC_BF_MASK,XRR_XRR_HSEOFTIME0_ISOC_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Isoc in the HSEofTime0 Register
 */
#define XRR_XRR_HSEOFTIME0_ISOC_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_HSEOFTIME0_ISOC_BF_MASK,XRR_XRR_HSEOFTIME0_ISOC_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Async ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Async in the HSEofTime1 Register
 * This does a mask and shift.
 */
#define XRR_XRR_HSEOFTIME1_ASYNC_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_HSEOFTIME1_REG_OFFSET,0,XRR_XRR_HSEOFTIME1_ASYNC_BF_MASK,XRR_XRR_HSEOFTIME1_ASYNC_BF_SHIFT))

/**
 * The Write Macro for Async in the HSEofTime1 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_HSEOFTIME1_ASYNC_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_HSEOFTIME1_REG_OFFSET,0,XRR_XRR_HSEOFTIME1_ASYNC_BF_MASK,XRR_XRR_HSEOFTIME1_ASYNC_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Async in the HSEofTime1 Register
 * This does not do a shift.
 */
#define XRR_XRR_HSEOFTIME1_ASYNC_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_HSEOFTIME1_REG_OFFSET,0,XRR_XRR_HSEOFTIME1_ASYNC_BF_MASK))

/**
 * The Read Modify Write Macro for Async in the HSEofTime1 Register
 * This does not do a shift.
 */
#define XRR_XRR_HSEOFTIME1_ASYNC_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_HSEOFTIME1_REG_OFFSET,0,XRR_XRR_HSEOFTIME1_ASYNC_BF_MASK,(value)))

/**
 * The Toggle Macro for Async in the HSEofTime1 Register
 * This does not do a shift.
 */
#define XRR_XRR_HSEOFTIME1_ASYNC_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_HSEOFTIME1_REG_OFFSET,0,XRR_XRR_HSEOFTIME1_ASYNC_BF_MASK))
/**
 * The Get Macro for Async in the HSEofTime1 Register
 */
#define XRR_XRR_HSEOFTIME1_ASYNC_GET_BF(regValue) \
	(GET_BF(XRR_XRR_HSEOFTIME1_ASYNC_BF_MASK,XRR_XRR_HSEOFTIME1_ASYNC_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Async in the HSEofTime1 Register
 */
#define XRR_XRR_HSEOFTIME1_ASYNC_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_HSEOFTIME1_ASYNC_BF_MASK,XRR_XRR_HSEOFTIME1_ASYNC_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Async ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Async in the FSEofTime Register
 * This does a mask and shift.
 */
#define XRR_XRR_FSEOFTIME_ASYNC_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,XRR_XRR_FSEOFTIME_ASYNC_BF_MASK,XRR_XRR_FSEOFTIME_ASYNC_BF_SHIFT))

/**
 * The Write Macro for Async in the FSEofTime Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_FSEOFTIME_ASYNC_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,XRR_XRR_FSEOFTIME_ASYNC_BF_MASK,XRR_XRR_FSEOFTIME_ASYNC_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Async in the FSEofTime Register
 * This does not do a shift.
 */
#define XRR_XRR_FSEOFTIME_ASYNC_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,XRR_XRR_FSEOFTIME_ASYNC_BF_MASK))

/**
 * The Read Modify Write Macro for Async in the FSEofTime Register
 * This does not do a shift.
 */
#define XRR_XRR_FSEOFTIME_ASYNC_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,XRR_XRR_FSEOFTIME_ASYNC_BF_MASK,(value)))

/**
 * The Toggle Macro for Async in the FSEofTime Register
 * This does not do a shift.
 */
#define XRR_XRR_FSEOFTIME_ASYNC_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,XRR_XRR_FSEOFTIME_ASYNC_BF_MASK))
/**
 * The Get Macro for Async in the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_ASYNC_GET_BF(regValue) \
	(GET_BF(XRR_XRR_FSEOFTIME_ASYNC_BF_MASK,XRR_XRR_FSEOFTIME_ASYNC_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Async in the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_ASYNC_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_FSEOFTIME_ASYNC_BF_MASK,XRR_XRR_FSEOFTIME_ASYNC_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Isoc ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Isoc in the FSEofTime Register
 * This does a mask and shift.
 */
#define XRR_XRR_FSEOFTIME_ISOC_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,XRR_XRR_FSEOFTIME_ISOC_BF_MASK,XRR_XRR_FSEOFTIME_ISOC_BF_SHIFT))

/**
 * The Write Macro for Isoc in the FSEofTime Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_FSEOFTIME_ISOC_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,XRR_XRR_FSEOFTIME_ISOC_BF_MASK,XRR_XRR_FSEOFTIME_ISOC_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Isoc in the FSEofTime Register
 * This does not do a shift.
 */
#define XRR_XRR_FSEOFTIME_ISOC_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,XRR_XRR_FSEOFTIME_ISOC_BF_MASK))

/**
 * The Read Modify Write Macro for Isoc in the FSEofTime Register
 * This does not do a shift.
 */
#define XRR_XRR_FSEOFTIME_ISOC_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,XRR_XRR_FSEOFTIME_ISOC_BF_MASK,(value)))

/**
 * The Toggle Macro for Isoc in the FSEofTime Register
 * This does not do a shift.
 */
#define XRR_XRR_FSEOFTIME_ISOC_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_FSEOFTIME_REG_OFFSET,0,XRR_XRR_FSEOFTIME_ISOC_BF_MASK))
/**
 * The Get Macro for Isoc in the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_ISOC_GET_BF(regValue) \
	(GET_BF(XRR_XRR_FSEOFTIME_ISOC_BF_MASK,XRR_XRR_FSEOFTIME_ISOC_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Isoc in the FSEofTime Register
 */
#define XRR_XRR_FSEOFTIME_ISOC_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_FSEOFTIME_ISOC_BF_MASK,XRR_XRR_FSEOFTIME_ISOC_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Addr ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Addr in the SchFrmHdr0 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR0_ADDR_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ADDR_BF_MASK,XRR_XRR_SCHFRMHDR0_ADDR_BF_SHIFT))

/**
 * The Write Macro for Addr in the SchFrmHdr0 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR0_ADDR_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ADDR_BF_MASK,XRR_XRR_SCHFRMHDR0_ADDR_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Addr in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ADDR_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ADDR_BF_MASK))

/**
 * The Read Modify Write Macro for Addr in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ADDR_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ADDR_BF_MASK,(value)))

/**
 * The Toggle Macro for Addr in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ADDR_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ADDR_BF_MASK))
/**
 * The Get Macro for Addr in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ADDR_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR0_ADDR_BF_MASK,XRR_XRR_SCHFRMHDR0_ADDR_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Addr in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ADDR_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR0_ADDR_BF_MASK,XRR_XRR_SCHFRMHDR0_ADDR_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Endp ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Endp in the SchFrmHdr0 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR0_ENDP_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ENDP_BF_MASK,XRR_XRR_SCHFRMHDR0_ENDP_BF_SHIFT))

/**
 * The Write Macro for Endp in the SchFrmHdr0 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR0_ENDP_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ENDP_BF_MASK,XRR_XRR_SCHFRMHDR0_ENDP_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Endp in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ENDP_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ENDP_BF_MASK))

/**
 * The Read Modify Write Macro for Endp in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ENDP_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ENDP_BF_MASK,(value)))

/**
 * The Toggle Macro for Endp in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ENDP_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ENDP_BF_MASK))
/**
 * The Get Macro for Endp in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ENDP_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR0_ENDP_BF_MASK,XRR_XRR_SCHFRMHDR0_ENDP_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Endp in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ENDP_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR0_ENDP_BF_MASK,XRR_XRR_SCHFRMHDR0_ENDP_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The EndpType ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for EndpType in the SchFrmHdr0 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR0_ENDPTYPE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_MASK,XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_SHIFT))

/**
 * The Write Macro for EndpType in the SchFrmHdr0 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR0_ENDPTYPE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_MASK,XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for EndpType in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ENDPTYPE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_MASK))

/**
 * The Read Modify Write Macro for EndpType in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ENDPTYPE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_MASK,(value)))

/**
 * The Toggle Macro for EndpType in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ENDPTYPE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_MASK))
/**
 * The Get Macro for EndpType in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ENDPTYPE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_MASK,XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for EndpType in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ENDPTYPE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_MASK,XRR_XRR_SCHFRMHDR0_ENDPTYPE_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Action ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Action in the SchFrmHdr0 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR0_ACTION_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ACTION_BF_MASK,XRR_XRR_SCHFRMHDR0_ACTION_BF_SHIFT))

/**
 * The Write Macro for Action in the SchFrmHdr0 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR0_ACTION_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ACTION_BF_MASK,XRR_XRR_SCHFRMHDR0_ACTION_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Action in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ACTION_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ACTION_BF_MASK))

/**
 * The Read Modify Write Macro for Action in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ACTION_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ACTION_BF_MASK,(value)))

/**
 * The Toggle Macro for Action in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_ACTION_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_ACTION_BF_MASK))
/**
 * The Get Macro for Action in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ACTION_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR0_ACTION_BF_MASK,XRR_XRR_SCHFRMHDR0_ACTION_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Action in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_ACTION_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR0_ACTION_BF_MASK,XRR_XRR_SCHFRMHDR0_ACTION_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Modifier ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Modifier in the SchFrmHdr0 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR0_MODIFIER_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_MODIFIER_BF_MASK,XRR_XRR_SCHFRMHDR0_MODIFIER_BF_SHIFT))

/**
 * The Write Macro for Modifier in the SchFrmHdr0 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR0_MODIFIER_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_MODIFIER_BF_MASK,XRR_XRR_SCHFRMHDR0_MODIFIER_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Modifier in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_MODIFIER_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_MODIFIER_BF_MASK))

/**
 * The Read Modify Write Macro for Modifier in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_MODIFIER_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_MODIFIER_BF_MASK,(value)))

/**
 * The Toggle Macro for Modifier in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_MODIFIER_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_MODIFIER_BF_MASK))
/**
 * The Get Macro for Modifier in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_MODIFIER_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR0_MODIFIER_BF_MASK,XRR_XRR_SCHFRMHDR0_MODIFIER_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Modifier in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_MODIFIER_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR0_MODIFIER_BF_MASK,XRR_XRR_SCHFRMHDR0_MODIFIER_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The DataQid ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for DataQid in the SchFrmHdr0 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR0_DATAQID_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_DATAQID_BF_MASK,XRR_XRR_SCHFRMHDR0_DATAQID_BF_SHIFT))

/**
 * The Write Macro for DataQid in the SchFrmHdr0 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR0_DATAQID_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_DATAQID_BF_MASK,XRR_XRR_SCHFRMHDR0_DATAQID_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for DataQid in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_DATAQID_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_DATAQID_BF_MASK))

/**
 * The Read Modify Write Macro for DataQid in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_DATAQID_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_DATAQID_BF_MASK,(value)))

/**
 * The Toggle Macro for DataQid in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_DATAQID_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_DATAQID_BF_MASK))
/**
 * The Get Macro for DataQid in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_DATAQID_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR0_DATAQID_BF_MASK,XRR_XRR_SCHFRMHDR0_DATAQID_BF_SHIFT,(regValue)))
/**
 * The Set Macro for DataQid in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_DATAQID_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR0_DATAQID_BF_MASK,XRR_XRR_SCHFRMHDR0_DATAQID_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Toggle ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Toggle in the SchFrmHdr0 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR0_TOGGLE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_TOGGLE_BF_MASK,XRR_XRR_SCHFRMHDR0_TOGGLE_BF_SHIFT))

/**
 * The Write Macro for Toggle in the SchFrmHdr0 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR0_TOGGLE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_TOGGLE_BF_MASK,XRR_XRR_SCHFRMHDR0_TOGGLE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Toggle in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_TOGGLE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_TOGGLE_BF_MASK))

/**
 * The Read Modify Write Macro for Toggle in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_TOGGLE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_TOGGLE_BF_MASK,(value)))

/**
 * The Toggle Macro for Toggle in the SchFrmHdr0 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR0_TOGGLE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR0_REG_OFFSET,0,XRR_XRR_SCHFRMHDR0_TOGGLE_BF_MASK))
/**
 * The Get Macro for Toggle in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_TOGGLE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR0_TOGGLE_BF_MASK,XRR_XRR_SCHFRMHDR0_TOGGLE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Toggle in the SchFrmHdr0 Register
 */
#define XRR_XRR_SCHFRMHDR0_TOGGLE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR0_TOGGLE_BF_MASK,XRR_XRR_SCHFRMHDR0_TOGGLE_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The HubPort ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for HubPort in the SchFrmHdr1 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR1_HUBPORT_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_HUBPORT_BF_MASK,XRR_XRR_SCHFRMHDR1_HUBPORT_BF_SHIFT))

/**
 * The Write Macro for HubPort in the SchFrmHdr1 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR1_HUBPORT_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_HUBPORT_BF_MASK,XRR_XRR_SCHFRMHDR1_HUBPORT_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for HubPort in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_HUBPORT_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_HUBPORT_BF_MASK))

/**
 * The Read Modify Write Macro for HubPort in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_HUBPORT_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_HUBPORT_BF_MASK,(value)))

/**
 * The Toggle Macro for HubPort in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_HUBPORT_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_HUBPORT_BF_MASK))
/**
 * The Get Macro for HubPort in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_HUBPORT_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR1_HUBPORT_BF_MASK,XRR_XRR_SCHFRMHDR1_HUBPORT_BF_SHIFT,(regValue)))
/**
 * The Set Macro for HubPort in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_HUBPORT_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR1_HUBPORT_BF_MASK,XRR_XRR_SCHFRMHDR1_HUBPORT_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The HubAddr ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for HubAddr in the SchFrmHdr1 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR1_HUBADDR_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_HUBADDR_BF_MASK,XRR_XRR_SCHFRMHDR1_HUBADDR_BF_SHIFT))

/**
 * The Write Macro for HubAddr in the SchFrmHdr1 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR1_HUBADDR_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_HUBADDR_BF_MASK,XRR_XRR_SCHFRMHDR1_HUBADDR_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for HubAddr in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_HUBADDR_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_HUBADDR_BF_MASK))

/**
 * The Read Modify Write Macro for HubAddr in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_HUBADDR_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_HUBADDR_BF_MASK,(value)))

/**
 * The Toggle Macro for HubAddr in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_HUBADDR_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_HUBADDR_BF_MASK))
/**
 * The Get Macro for HubAddr in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_HUBADDR_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR1_HUBADDR_BF_MASK,XRR_XRR_SCHFRMHDR1_HUBADDR_BF_SHIFT,(regValue)))
/**
 * The Set Macro for HubAddr in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_HUBADDR_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR1_HUBADDR_BF_MASK,XRR_XRR_SCHFRMHDR1_HUBADDR_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The SplitSE ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for SplitSE in the SchFrmHdr1 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR1_SPLITSE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_SPLITSE_BF_MASK,XRR_XRR_SCHFRMHDR1_SPLITSE_BF_SHIFT))

/**
 * The Write Macro for SplitSE in the SchFrmHdr1 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR1_SPLITSE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_SPLITSE_BF_MASK,XRR_XRR_SCHFRMHDR1_SPLITSE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for SplitSE in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_SPLITSE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_SPLITSE_BF_MASK))

/**
 * The Read Modify Write Macro for SplitSE in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_SPLITSE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_SPLITSE_BF_MASK,(value)))

/**
 * The Toggle Macro for SplitSE in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_SPLITSE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_SPLITSE_BF_MASK))
/**
 * The Get Macro for SplitSE in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_SPLITSE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR1_SPLITSE_BF_MASK,XRR_XRR_SCHFRMHDR1_SPLITSE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for SplitSE in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_SPLITSE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR1_SPLITSE_BF_MASK,XRR_XRR_SCHFRMHDR1_SPLITSE_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Response ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Response in the SchFrmHdr1 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR1_RESPONSE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_RESPONSE_BF_MASK,XRR_XRR_SCHFRMHDR1_RESPONSE_BF_SHIFT))

/**
 * The Write Macro for Response in the SchFrmHdr1 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR1_RESPONSE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_RESPONSE_BF_MASK,XRR_XRR_SCHFRMHDR1_RESPONSE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Response in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_RESPONSE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_RESPONSE_BF_MASK))

/**
 * The Read Modify Write Macro for Response in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_RESPONSE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_RESPONSE_BF_MASK,(value)))

/**
 * The Toggle Macro for Response in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_RESPONSE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_RESPONSE_BF_MASK))
/**
 * The Get Macro for Response in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_RESPONSE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR1_RESPONSE_BF_MASK,XRR_XRR_SCHFRMHDR1_RESPONSE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Response in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_RESPONSE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR1_RESPONSE_BF_MASK,XRR_XRR_SCHFRMHDR1_RESPONSE_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Count ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Count in the SchFrmHdr1 Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHFRMHDR1_COUNT_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_COUNT_BF_MASK,XRR_XRR_SCHFRMHDR1_COUNT_BF_SHIFT))

/**
 * The Write Macro for Count in the SchFrmHdr1 Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHFRMHDR1_COUNT_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_COUNT_BF_MASK,XRR_XRR_SCHFRMHDR1_COUNT_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Count in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_COUNT_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_COUNT_BF_MASK))

/**
 * The Read Modify Write Macro for Count in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_COUNT_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_COUNT_BF_MASK,(value)))

/**
 * The Toggle Macro for Count in the SchFrmHdr1 Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHFRMHDR1_COUNT_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHFRMHDR1_REG_OFFSET,0,XRR_XRR_SCHFRMHDR1_COUNT_BF_MASK))
/**
 * The Get Macro for Count in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_COUNT_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHFRMHDR1_COUNT_BF_MASK,XRR_XRR_SCHFRMHDR1_COUNT_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Count in the SchFrmHdr1 Register
 */
#define XRR_XRR_SCHFRMHDR1_COUNT_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHFRMHDR1_COUNT_BF_MASK,XRR_XRR_SCHFRMHDR1_COUNT_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Mode ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Mode in the Schedule Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHEDULE_MODE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_MODE_BF_MASK,XRR_XRR_SCHEDULE_MODE_BF_SHIFT))

/**
 * The Write Macro for Mode in the Schedule Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHEDULE_MODE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_MODE_BF_MASK,XRR_XRR_SCHEDULE_MODE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Mode in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_MODE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_MODE_BF_MASK))

/**
 * The Read Modify Write Macro for Mode in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_MODE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_MODE_BF_MASK,(value)))

/**
 * The Toggle Macro for Mode in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_MODE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_MODE_BF_MASK))
/**
 * The Get Macro for Mode in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_MODE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHEDULE_MODE_BF_MASK,XRR_XRR_SCHEDULE_MODE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Mode in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_MODE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHEDULE_MODE_BF_MASK,XRR_XRR_SCHEDULE_MODE_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The SchType ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for SchType in the Schedule Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SCHTYPE_BF_MASK,XRR_XRR_SCHEDULE_SCHTYPE_BF_SHIFT))

/**
 * The Write Macro for SchType in the Schedule Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SCHTYPE_BF_MASK,XRR_XRR_SCHEDULE_SCHTYPE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for SchType in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SCHTYPE_BF_MASK))

/**
 * The Read Modify Write Macro for SchType in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SCHTYPE_BF_MASK,(value)))

/**
 * The Toggle Macro for SchType in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SCHTYPE_BF_MASK))
/**
 * The Get Macro for SchType in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHEDULE_SCHTYPE_BF_MASK,XRR_XRR_SCHEDULE_SCHTYPE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for SchType in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SCHTYPE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHEDULE_SCHTYPE_BF_MASK,XRR_XRR_SCHEDULE_SCHTYPE_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The DestQueue ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for DestQueue in the Schedule Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHEDULE_DESTQUEUE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_DESTQUEUE_BF_MASK,XRR_XRR_SCHEDULE_DESTQUEUE_BF_SHIFT))

/**
 * The Write Macro for DestQueue in the Schedule Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHEDULE_DESTQUEUE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_DESTQUEUE_BF_MASK,XRR_XRR_SCHEDULE_DESTQUEUE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for DestQueue in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_DESTQUEUE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_DESTQUEUE_BF_MASK))

/**
 * The Read Modify Write Macro for DestQueue in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_DESTQUEUE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_DESTQUEUE_BF_MASK,(value)))

/**
 * The Toggle Macro for DestQueue in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_DESTQUEUE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_DESTQUEUE_BF_MASK))
/**
 * The Get Macro for DestQueue in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_DESTQUEUE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHEDULE_DESTQUEUE_BF_MASK,XRR_XRR_SCHEDULE_DESTQUEUE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for DestQueue in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_DESTQUEUE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHEDULE_DESTQUEUE_BF_MASK,XRR_XRR_SCHEDULE_DESTQUEUE_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The SrcQueue ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for SrcQueue in the Schedule Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHEDULE_SRCQUEUE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SRCQUEUE_BF_MASK,XRR_XRR_SCHEDULE_SRCQUEUE_BF_SHIFT))

/**
 * The Write Macro for SrcQueue in the Schedule Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHEDULE_SRCQUEUE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SRCQUEUE_BF_MASK,XRR_XRR_SCHEDULE_SRCQUEUE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for SrcQueue in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_SRCQUEUE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SRCQUEUE_BF_MASK))

/**
 * The Read Modify Write Macro for SrcQueue in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_SRCQUEUE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SRCQUEUE_BF_MASK,(value)))

/**
 * The Toggle Macro for SrcQueue in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_SRCQUEUE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_SRCQUEUE_BF_MASK))
/**
 * The Get Macro for SrcQueue in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SRCQUEUE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHEDULE_SRCQUEUE_BF_MASK,XRR_XRR_SCHEDULE_SRCQUEUE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for SrcQueue in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_SRCQUEUE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHEDULE_SRCQUEUE_BF_MASK,XRR_XRR_SCHEDULE_SRCQUEUE_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The MsaNakLimit ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for MsaNakLimit in the TxCtrl Register
 * This does a mask and shift.
 */
#define XRR_XRR_TXCTRL_MSANAKLIMIT_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_TXCTRL_REG_OFFSET,0,XRR_XRR_TXCTRL_MSANAKLIMIT_BF_MASK,XRR_XRR_TXCTRL_MSANAKLIMIT_BF_SHIFT))

/**
 * The Write Macro for MsaNakLimit in the TxCtrl Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_TXCTRL_MSANAKLIMIT_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_TXCTRL_REG_OFFSET,0,XRR_XRR_TXCTRL_MSANAKLIMIT_BF_MASK,XRR_XRR_TXCTRL_MSANAKLIMIT_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for MsaNakLimit in the TxCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_TXCTRL_MSANAKLIMIT_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_TXCTRL_REG_OFFSET,0,XRR_XRR_TXCTRL_MSANAKLIMIT_BF_MASK))

/**
 * The Read Modify Write Macro for MsaNakLimit in the TxCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_TXCTRL_MSANAKLIMIT_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_TXCTRL_REG_OFFSET,0,XRR_XRR_TXCTRL_MSANAKLIMIT_BF_MASK,(value)))

/**
 * The Toggle Macro for MsaNakLimit in the TxCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_TXCTRL_MSANAKLIMIT_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_TXCTRL_REG_OFFSET,0,XRR_XRR_TXCTRL_MSANAKLIMIT_BF_MASK))
/**
 * The Get Macro for MsaNakLimit in the TxCtrl Register
 */
#define XRR_XRR_TXCTRL_MSANAKLIMIT_GET_BF(regValue) \
	(GET_BF(XRR_XRR_TXCTRL_MSANAKLIMIT_BF_MASK,XRR_XRR_TXCTRL_MSANAKLIMIT_BF_SHIFT,(regValue)))
/**
 * The Set Macro for MsaNakLimit in the TxCtrl Register
 */
#define XRR_XRR_TXCTRL_MSANAKLIMIT_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_TXCTRL_MSANAKLIMIT_BF_MASK,XRR_XRR_TXCTRL_MSANAKLIMIT_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The MinTime ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for MinTime in the SofCtrl Register
 * This does a mask and shift.
 */
#define XRR_XRR_SOFCTRL_MINTIME_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,XRR_XRR_SOFCTRL_MINTIME_BF_MASK,XRR_XRR_SOFCTRL_MINTIME_BF_SHIFT))

/**
 * The Write Macro for MinTime in the SofCtrl Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SOFCTRL_MINTIME_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,XRR_XRR_SOFCTRL_MINTIME_BF_MASK,XRR_XRR_SOFCTRL_MINTIME_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for MinTime in the SofCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_SOFCTRL_MINTIME_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,XRR_XRR_SOFCTRL_MINTIME_BF_MASK))

/**
 * The Read Modify Write Macro for MinTime in the SofCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_SOFCTRL_MINTIME_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,XRR_XRR_SOFCTRL_MINTIME_BF_MASK,(value)))

/**
 * The Toggle Macro for MinTime in the SofCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_SOFCTRL_MINTIME_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,XRR_XRR_SOFCTRL_MINTIME_BF_MASK))
/**
 * The Get Macro for MinTime in the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_MINTIME_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SOFCTRL_MINTIME_BF_MASK,XRR_XRR_SOFCTRL_MINTIME_BF_SHIFT,(regValue)))
/**
 * The Set Macro for MinTime in the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_MINTIME_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SOFCTRL_MINTIME_BF_MASK,XRR_XRR_SOFCTRL_MINTIME_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The MaxTime ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for MaxTime in the SofCtrl Register
 * This does a mask and shift.
 */
#define XRR_XRR_SOFCTRL_MAXTIME_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,XRR_XRR_SOFCTRL_MAXTIME_BF_MASK,XRR_XRR_SOFCTRL_MAXTIME_BF_SHIFT))

/**
 * The Write Macro for MaxTime in the SofCtrl Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SOFCTRL_MAXTIME_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,XRR_XRR_SOFCTRL_MAXTIME_BF_MASK,XRR_XRR_SOFCTRL_MAXTIME_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for MaxTime in the SofCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_SOFCTRL_MAXTIME_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,XRR_XRR_SOFCTRL_MAXTIME_BF_MASK))

/**
 * The Read Modify Write Macro for MaxTime in the SofCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_SOFCTRL_MAXTIME_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,XRR_XRR_SOFCTRL_MAXTIME_BF_MASK,(value)))

/**
 * The Toggle Macro for MaxTime in the SofCtrl Register
 * This does not do a shift.
 */
#define XRR_XRR_SOFCTRL_MAXTIME_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SOFCTRL_REG_OFFSET,0,XRR_XRR_SOFCTRL_MAXTIME_BF_MASK))
/**
 * The Get Macro for MaxTime in the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_MAXTIME_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SOFCTRL_MAXTIME_BF_MASK,XRR_XRR_SOFCTRL_MAXTIME_BF_SHIFT,(regValue)))
/**
 * The Set Macro for MaxTime in the SofCtrl Register
 */
#define XRR_XRR_SOFCTRL_MAXTIME_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SOFCTRL_MAXTIME_BF_MASK,XRR_XRR_SOFCTRL_MAXTIME_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Enable ReadWriteBitField
******************************************************************************/

/**
 * The Read Macro for Enable in the Schedule Register
 * This does a mask and shift.
 */
#define XRR_XRR_SCHEDULE_ENABLE_READ_BF(baseAddress) \
	(READ_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_ENABLE_BF_MASK,XRR_XRR_SCHEDULE_ENABLE_BF_SHIFT))

/**
 * The Write Macro for Enable in the Schedule Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_SCHEDULE_ENABLE_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_ENABLE_BF_MASK,XRR_XRR_SCHEDULE_ENABLE_BF_SHIFT,(value)))

/**
 * The Read then Mask Macro for Enable in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_ENABLE_READMASK_BF(baseAddress) \
	(READMASK_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_ENABLE_BF_MASK))

/**
 * The Read Modify Write Macro for Enable in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_ENABLE_READMODWRITE_BF(baseAddress,value) \
	(READMODWRITE_REG((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_ENABLE_BF_MASK,(value)))

/**
 * The Toggle Macro for Enable in the Schedule Register
 * This does not do a shift.
 */
#define XRR_XRR_SCHEDULE_ENABLE_TOGGLE_BF(baseAddress) \
	(TOGGLE_BF((baseAddress),XRR_XRR_SCHEDULE_REG_OFFSET,0,XRR_XRR_SCHEDULE_ENABLE_BF_MASK))
/**
 * The Get Macro for Enable in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_ENABLE_GET_BF(regValue) \
	(GET_BF(XRR_XRR_SCHEDULE_ENABLE_BF_MASK,XRR_XRR_SCHEDULE_ENABLE_BF_SHIFT,(regValue)))
/**
 * The Set Macro for Enable in the Schedule Register
 */
#define XRR_XRR_SCHEDULE_ENABLE_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_SCHEDULE_ENABLE_BF_MASK,XRR_XRR_SCHEDULE_ENABLE_BF_SHIFT,(regValue),(bfValue)))


/* CMacroHeaderView.BfWOMacroVP per WriteOnlyBitField (and subclasses) */

/******************************************************************************
 The Irq0RexDevResp WriteOnlyBitField
******************************************************************************/

/**
 * The Write Macro for Irq0RexDevResp in the IntClr Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTCLR_IRQ0REXDEVRESP_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTCLR_REG_OFFSET,0,XRR_XRR_INTCLR_IRQ0REXDEVRESP_BF_MASK,XRR_XRR_INTCLR_IRQ0REXDEVRESP_BF_SHIFT,(value)))
/**
 * The Set Macro for Irq0RexDevResp in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXDEVRESP_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTCLR_IRQ0REXDEVRESP_BF_MASK,XRR_XRR_INTCLR_IRQ0REXDEVRESP_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrAsync WriteOnlyBitField
******************************************************************************/

/**
 * The Write Macro for Irq0RexRdFrmHdrAsync in the IntClr Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRASYNC_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTCLR_REG_OFFSET,0,XRR_XRR_INTCLR_IRQ0REXRDFRMHDRASYNC_BF_MASK,XRR_XRR_INTCLR_IRQ0REXRDFRMHDRASYNC_BF_SHIFT,(value)))
/**
 * The Set Macro for Irq0RexRdFrmHdrAsync in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRASYNC_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTCLR_IRQ0REXRDFRMHDRASYNC_BF_MASK,XRR_XRR_INTCLR_IRQ0REXRDFRMHDRASYNC_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrPer WriteOnlyBitField
******************************************************************************/

/**
 * The Write Macro for Irq0RexRdFrmHdrPer in the IntClr Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRPER_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTCLR_REG_OFFSET,0,XRR_XRR_INTCLR_IRQ0REXRDFRMHDRPER_BF_MASK,XRR_XRR_INTCLR_IRQ0REXRDFRMHDRPER_BF_SHIFT,(value)))
/**
 * The Set Macro for Irq0RexRdFrmHdrPer in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRPER_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTCLR_IRQ0REXRDFRMHDRPER_BF_MASK,XRR_XRR_INTCLR_IRQ0REXRDFRMHDRPER_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq0RexRdFrmHdrMSA WriteOnlyBitField
******************************************************************************/

/**
 * The Write Macro for Irq0RexRdFrmHdrMSA in the IntClr Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRMSA_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTCLR_REG_OFFSET,0,XRR_XRR_INTCLR_IRQ0REXRDFRMHDRMSA_BF_MASK,XRR_XRR_INTCLR_IRQ0REXRDFRMHDRMSA_BF_SHIFT,(value)))
/**
 * The Set Macro for Irq0RexRdFrmHdrMSA in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXRDFRMHDRMSA_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTCLR_IRQ0REXRDFRMHDRMSA_BF_MASK,XRR_XRR_INTCLR_IRQ0REXRDFRMHDRMSA_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq0RexSOF WriteOnlyBitField
******************************************************************************/

/**
 * The Write Macro for Irq0RexSOF in the IntClr Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTCLR_IRQ0REXSOF_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTCLR_REG_OFFSET,0,XRR_XRR_INTCLR_IRQ0REXSOF_BF_MASK,XRR_XRR_INTCLR_IRQ0REXSOF_BF_SHIFT,(value)))
/**
 * The Set Macro for Irq0RexSOF in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ0REXSOF_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTCLR_IRQ0REXSOF_BF_MASK,XRR_XRR_INTCLR_IRQ0REXSOF_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq1StatCntInOverflow WriteOnlyBitField
******************************************************************************/

/**
 * The Write Macro for Irq1StatCntInOverflow in the IntClr Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTINOVERFLOW_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTCLR_REG_OFFSET,0,XRR_XRR_INTCLR_IRQ1STATCNTINOVERFLOW_BF_MASK,XRR_XRR_INTCLR_IRQ1STATCNTINOVERFLOW_BF_SHIFT,(value)))
/**
 * The Set Macro for Irq1StatCntInOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTINOVERFLOW_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTCLR_IRQ1STATCNTINOVERFLOW_BF_MASK,XRR_XRR_INTCLR_IRQ1STATCNTINOVERFLOW_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq1StatCntOutOverflow WriteOnlyBitField
******************************************************************************/

/**
 * The Write Macro for Irq1StatCntOutOverflow in the IntClr Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTOUTOVERFLOW_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTCLR_REG_OFFSET,0,XRR_XRR_INTCLR_IRQ1STATCNTOUTOVERFLOW_BF_MASK,XRR_XRR_INTCLR_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT,(value)))
/**
 * The Set Macro for Irq1StatCntOutOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTOUTOVERFLOW_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTCLR_IRQ1STATCNTOUTOVERFLOW_BF_MASK,XRR_XRR_INTCLR_IRQ1STATCNTOUTOVERFLOW_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq1StatCntFlcOverflow WriteOnlyBitField
******************************************************************************/

/**
 * The Write Macro for Irq1StatCntFlcOverflow in the IntClr Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTFLCOVERFLOW_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTCLR_REG_OFFSET,0,XRR_XRR_INTCLR_IRQ1STATCNTFLCOVERFLOW_BF_MASK,XRR_XRR_INTCLR_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT,(value)))
/**
 * The Set Macro for Irq1StatCntFlcOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTFLCOVERFLOW_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTCLR_IRQ1STATCNTFLCOVERFLOW_BF_MASK,XRR_XRR_INTCLR_IRQ1STATCNTFLCOVERFLOW_BF_SHIFT,(regValue),(bfValue)))

/******************************************************************************
 The Irq1StatCntErrOverflow WriteOnlyBitField
******************************************************************************/

/**
 * The Write Macro for Irq1StatCntErrOverflow in the IntClr Register
 * This shifts the value and does a read, mask, then write.
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTERROVERFLOW_WRITE_BF(baseAddress, value) \
	(WRITE_BF((baseAddress),XRR_XRR_INTCLR_REG_OFFSET,0,XRR_XRR_INTCLR_IRQ1STATCNTERROVERFLOW_BF_MASK,XRR_XRR_INTCLR_IRQ1STATCNTERROVERFLOW_BF_SHIFT,(value)))
/**
 * The Set Macro for Irq1StatCntErrOverflow in the IntClr Register
 */
#define XRR_XRR_INTCLR_IRQ1STATCNTERROVERFLOW_SET_BF(regValue,bfValue) \
	(SET_BF(XRR_XRR_INTCLR_IRQ1STATCNTERROVERFLOW_BF_MASK,XRR_XRR_INTCLR_IRQ1STATCNTERROVERFLOW_BF_SHIFT,(regValue),(bfValue)))

// reg : XRR_XRR_XRTDEBUG
// field : XRR_XRR_XRTDEBUG_RDADDR
#define XRR_XRR_XRTDEBUG_RDADDR_READ_BF(baseAddress) \
  (READ_BF((baseAddress), XRR_XRR_XRTDEBUG_RDADDR_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDADDR_BF_MASK, XRR_XRR_XRTDEBUG_RDADDR_BF_SHIFT))
#define XRR_XRR_XRTDEBUG_RDADDR_READMASK_BF(baseAddress) \
  (READMASK_REG((baseAddress), XRR_XRR_XRTDEBUG_RDADDR_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDADDR_BF_MASK))
#define XRR_XRR_XRTDEBUG_RDADDR_TOGGLE_BF(baseAddress) \
  (TOGGLE_BF((baseAddress), XRR_XRR_XRTDEBUG_RDADDR_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDADDR_BF_MASK))
#define XRR_XRR_XRTDEBUG_RDADDR_GET_BF(regValue) \
  (GET_BF(XRR_XRR_XRTDEBUG_RDADDR_BF_MASK, XRR_XRR_XRTDEBUG_RDADDR_BF_SHIFT, (regValue)))
#define XRR_XRR_XRTDEBUG_RDADDR_SET_BF(regValue, bfValue) \
  (SET_BF(XRR_XRR_XRTDEBUG_RDADDR_BF_MASK, XRR_XRR_XRTDEBUG_RDADDR_BF_SHIFT, (regValue), (bfValue)))
// field : XRR_XRR_XRTDEBUG_RDENDP
#define XRR_XRR_XRTDEBUG_RDENDP_READ_BF(baseAddress) \
  (READ_BF((baseAddress), XRR_XRR_XRTDEBUG_RDENDP_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDENDP_BF_MASK, XRR_XRR_XRTDEBUG_RDENDP_BF_SHIFT))
#define XRR_XRR_XRTDEBUG_RDENDP_READMASK_BF(baseAddress) \
  (READMASK_REG((baseAddress), XRR_XRR_XRTDEBUG_RDENDP_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDENDP_BF_MASK))
#define XRR_XRR_XRTDEBUG_RDENDP_TOGGLE_BF(baseAddress) \
  (TOGGLE_BF((baseAddress), XRR_XRR_XRTDEBUG_RDENDP_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDENDP_BF_MASK))
#define XRR_XRR_XRTDEBUG_RDENDP_GET_BF(regValue) \
  (GET_BF(XRR_XRR_XRTDEBUG_RDENDP_BF_MASK, XRR_XRR_XRTDEBUG_RDENDP_BF_SHIFT, (regValue)))
#define XRR_XRR_XRTDEBUG_RDENDP_SET_BF(regValue, bfValue) \
  (SET_BF(XRR_XRR_XRTDEBUG_RDENDP_BF_MASK, XRR_XRR_XRTDEBUG_RDENDP_BF_SHIFT, (regValue), (bfValue)))
// field : XRR_XRR_XRTDEBUG_RDACTION
#define XRR_XRR_XRTDEBUG_RDACTION_READ_BF(baseAddress) \
  (READ_BF((baseAddress), XRR_XRR_XRTDEBUG_RDACTION_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDACTION_BF_MASK, XRR_XRR_XRTDEBUG_RDACTION_BF_SHIFT))
#define XRR_XRR_XRTDEBUG_RDACTION_READMASK_BF(baseAddress) \
  (READMASK_REG((baseAddress), XRR_XRR_XRTDEBUG_RDACTION_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDACTION_BF_MASK))
#define XRR_XRR_XRTDEBUG_RDACTION_TOGGLE_BF(baseAddress) \
  (TOGGLE_BF((baseAddress), XRR_XRR_XRTDEBUG_RDACTION_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDACTION_BF_MASK))
#define XRR_XRR_XRTDEBUG_RDACTION_GET_BF(regValue) \
  (GET_BF(XRR_XRR_XRTDEBUG_RDACTION_BF_MASK, XRR_XRR_XRTDEBUG_RDACTION_BF_SHIFT, (regValue)))
#define XRR_XRR_XRTDEBUG_RDACTION_SET_BF(regValue, bfValue) \
  (SET_BF(XRR_XRR_XRTDEBUG_RDACTION_BF_MASK, XRR_XRR_XRTDEBUG_RDACTION_BF_SHIFT, (regValue), (bfValue)))
// field : XRR_XRR_XRTDEBUG_RDDATAQID
#define XRR_XRR_XRTDEBUG_RDDATAQID_READ_BF(baseAddress) \
  (READ_BF((baseAddress), XRR_XRR_XRTDEBUG_RDDATAQID_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDDATAQID_BF_MASK, XRR_XRR_XRTDEBUG_RDDATAQID_BF_SHIFT))
#define XRR_XRR_XRTDEBUG_RDDATAQID_READMASK_BF(baseAddress) \
  (READMASK_REG((baseAddress), XRR_XRR_XRTDEBUG_RDDATAQID_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDDATAQID_BF_MASK))
#define XRR_XRR_XRTDEBUG_RDDATAQID_TOGGLE_BF(baseAddress) \
  (TOGGLE_BF((baseAddress), XRR_XRR_XRTDEBUG_RDDATAQID_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_RDDATAQID_BF_MASK))
#define XRR_XRR_XRTDEBUG_RDDATAQID_GET_BF(regValue) \
  (GET_BF(XRR_XRR_XRTDEBUG_RDDATAQID_BF_MASK, XRR_XRR_XRTDEBUG_RDDATAQID_BF_SHIFT, (regValue)))
#define XRR_XRR_XRTDEBUG_RDDATAQID_SET_BF(regValue, bfValue) \
  (SET_BF(XRR_XRR_XRTDEBUG_RDDATAQID_BF_MASK, XRR_XRR_XRTDEBUG_RDDATAQID_BF_SHIFT, (regValue), (bfValue)))
// field : XRR_XRR_XRTDEBUG_LASTRESP
#define XRR_XRR_XRTDEBUG_LASTRESP_READ_BF(baseAddress) \
  (READ_BF((baseAddress), XRR_XRR_XRTDEBUG_LASTRESP_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_LASTRESP_BF_MASK, XRR_XRR_XRTDEBUG_LASTRESP_BF_SHIFT))
#define XRR_XRR_XRTDEBUG_LASTRESP_READMASK_BF(baseAddress) \
  (READMASK_REG((baseAddress), XRR_XRR_XRTDEBUG_LASTRESP_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_LASTRESP_BF_MASK))
#define XRR_XRR_XRTDEBUG_LASTRESP_TOGGLE_BF(baseAddress) \
  (TOGGLE_BF((baseAddress), XRR_XRR_XRTDEBUG_LASTRESP_REG_OFFSET, 0, XRR_XRR_XRTDEBUG_LASTRESP_BF_MASK))
#define XRR_XRR_XRTDEBUG_LASTRESP_GET_BF(regValue) \
  (GET_BF(XRR_XRR_XRTDEBUG_LASTRESP_BF_MASK, XRR_XRR_XRTDEBUG_LASTRESP_BF_SHIFT, (regValue)))
#define XRR_XRR_XRTDEBUG_LASTRESP_SET_BF(regValue, bfValue) \
  (SET_BF(XRR_XRR_XRTDEBUG_LASTRESP_BF_MASK, XRR_XRR_XRTDEBUG_LASTRESP_BF_SHIFT, (regValue), (bfValue)))

#endif
