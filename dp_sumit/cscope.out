cscope 15 $HOME/dp_sumit               0000624798
	@components/dp/inc/aux_api.h

11 #i‚de‡
AUX_H


12 
	#AUX_H


	)

15 
	~<iba£.h
>

16 
	~<À⁄_timîs.h
>

22 
	$AUX_Inô
(Ë
	`__©åibuã__
 ((
	`£˘i⁄
(".atext")));

23 
	`AUX_PrötFöÆLökSëtögs
();

24 
uöt32_t
 
	`DP_LEX_GëCou¡edFps
();

25 
	`AUX_SèπDügno°ic
();

26 #ifde‡
PLUG_TEST


27 
uöt8_t
 
	`DP_GëE«bÀAuxTøfficSètus
();

	@components/dp/src/aux_common.c

25 
	~<iba£.h
>

26 
	~<dp_°ªam.h
>

27 
	~<bb_t›.h
>

28 
	~<c⁄figuøti⁄.h
>

29 
	~<i2cd_dp159.h
>

30 
	~<i2cd_dp130.h
>

31 
	~<ˇŒback.h
>

33 
	~"dp_loc.h
"

34 
	~"dp_log.h
"

35 
	~"dp_cmd.h
"

36 
	~"Àx_pﬁicy_makî.h
"

37 
	~"ªx_pﬁicy_makî.h
"

46 c⁄° 
uöt32_t
 
	gsymbﬁClockTabÀ
[6] =

64 
	$AUX_Inô
()

66 
uöt32_t
 
hwFótuª
 = 
	`bb_c‹e_gëFótuªs
();

67 
boﬁ
 
dpE«bÀd
 = (
hwFótuª
 & 
CORE_FEATURE_DP_SOURCE
) ||

68 (
hwFótuª
 & 
CORE_FEATURE_DP_SINK
);

69 if(
dpE«bÀd
)

71 
	`bb_t›_dpInô
();

73 
dpC⁄figPå
 = (
C⁄figDpC⁄fig
*)
	`C⁄fig_GëD©aPoöãr
(
CONFIG_VAR_BB_DP_CONFIG
);

75 i‡(
	`bb_t›_IsDevi˚Lex
())

77 
	`AUX_LexI§Inô
(
LexI§H™dÀr
);

78 
	`AUX_LexInô
(
LexAuxH™dÀReque°
);

79 
	`AUX_LexPﬁicyMakîInô
();

80 
	`AUX_LexHÆInô
();

81 
	`DP_LexHÆInô
(
AUX_DpLexI§EvítH™dÀr
);

85 
	`AUX_RexI§Inô
(
RexI§H™dÀr
);

86 
	`AUX_RexInô
(
RexEº‹H™dÀr
);

87 
	`AUX_RexPﬁicyMakîInô
();

88 
	`AUX_RexHÆInô
();

89 
	`DP_RexHÆInô
(
AUX_DpRexI§EvítH™dÀr
);

92 
	}
}

101 
	$AUX_SèπDügno°ic
()

103 i‡(
	`bb_t›_IsDevi˚Lex
())

105 
	`AUX_LexSëIsﬁ©edSèã
();

106 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_START_DIAGNOSTIC
);

110 
	`AUX_RexSëIsﬁ©edSèã
();

111 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_START_DIAGNOSTIC
);

113 
	}
}

129 
size_t
 
	$CompuãD©aChunkSize
(
size_t
 
buf„rSize
, size_à
buf„rIndex
, size_à
maxChunkSize
)

131  (
buf„rIndex
 + 
maxChunkSize
Ë> 
buf„rSize
 ? (bufferSize - bufferIndex) : maxChunkSize;

132 
	}
}

142 
boﬁ
 
	$AUX_gëDPFótuª
()

144 
boﬁ
 
dpE«bÀ
 = 
Ál£
;

146 
C⁄figBlocksE«bÀ
 *
blocksE«bÀd
 = &(
	`C⁄fig_GëBuf„r
()->
„©uªC⁄åﬁ
);

147 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VARS_BB_FEATURE_CONTROL
, 
blocksE«bÀd
))

149 
dpE«bÀ
 = 
blocksE«bÀd
->
DPc⁄åﬁ
 & (1 << 
CONFIG_BLOCK_ENABLE_DP
);

151  (
dpE«bÀ
);

152 
	}
}

154 #ifde‡
PLUG_TEST


162 
uöt8_t
 
	$DP_GëE«bÀAuxTøfficSètus
()

164 
boﬁ
 
°©us
 = 
Ál£
;

165 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

167 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

169 
°©us
 = 
dpC⁄fig
->
íabÀAuxTøffic
;

170 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
DP_ENABLE_AUX_TRAFFIC_STATUS
, 
°©us
);

172  
°©us
;

173 
	}
}

183 
uöt32_t
 
	$Aux_GëSymbﬁClock
(
MaöLökB™dwidth
 
bw
, 
boﬁ
 
sscOn
)

185 
uöt8_t
 
bwIndex
 = 
	`DP_GëRéVÆueFromB™dwidth
(
bw
);

186  
symbﬁClockTabÀ
[(
bwIndex
 << 1Ë+ 
sscOn
];

187 
	}
}

	@components/dp/src/dp_cmd.h

11 #i‚de‡
DP_CMD_H


12 
	#DP_CMD_H


	)

15 
	~<icmd.h
>

18 
	$ICMD_FUNCTIONS_CREATE
(
DP_COMPONENT
)

19 #i‡!
deföed
 
BB_ISO
 && !deföed 
BB_USB


21 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_LEX_SëEdidTy≥Icmd
, "0 = M⁄ô‹, 1 = 640_480, 2 = 800_600, 3 = 1024_768, 4 = 1280_720, 5 = 1280_768, \
6 = 1280_800, 7 = 1280_1024, 8 = 1360_768, 9 = 1440_900, 10 = 1600_900, \
11 = 1680_1050, 12 = 1920_1080, 13 = 1920_200, 14 = 2560_1600, 15 = 3840_2160", 
uöt8_t
)

24 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_LEX_SëBpcModeIcmd
, "6 = 6bpc, 8 = 8bpc, 10 = 10bpc, 12 = 12bpc", 
uöt8_t
)

25 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_LEX_RódEdidVÆues
, "DumpsÅhe current EDID values used by LEX", )

26 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_LEX_SscAdvîti£E«bÀ
, "Arg0 = 0: DißbÀ SSC, 1: E«bÀ SSC, 2:Öas†M⁄ô‹'†vÆue", 
uöt8_t
)

27 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_LEX_YCbCrDißbÀIcmd
, "Arg0 = 0: DißbÀ YCbCr, 1: Pas†through YCbCr", 
boﬁ
)

28 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_LEX_ReLökTøöIcmd
, "This icmd will initiateÑe-linkTrainingát LEX", )

29 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_LEX_VS_PE_icmd
, "Arg0 = VﬁègêSwög, Arg1 = PªÉmphasis, wrôê0xf‡f‹Ñeguœ∏lökÅøöög", 
uöt8_t
, uint8_t)

30 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_LEX_SëPowîDownWaôTime
, "Arg0 = TimêouàvÆuêö sec", 
uöt32_t
)

31 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_AUX_LexEº‹Recovîy
, "Arg0 = 0: Re°¨àSåóm Exåa˘‹, 1: Progøm/VÆid©e/E«bÀÉncodî", 
uöt8_t
)

32 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_LEX_SëCom¥essi⁄R©ioIcmd
, "VÆid Argumít†¨ê0 = deÁu…, 2 = 2.4, 4 = 4, 6 = 6. DeÁu… i†4", 
uöt8_t
)

34 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_N©iveAuxRódIcmd
, "Arg0 = DPCDáddªss, Arg1 = Num Byã†tÿªad (Max = 16)", 
uöt32_t
, 
uöt8_t
)

35 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_N©iveAuxWrôeIcmd
, "Arg0 = DPCDáddªss, Arg1 = D©®tÿwrôe(Max = 1 byã)", 
uöt32_t
, 
uöt8_t
)

36 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_I2cAuxRódIcmd
, "Arg0 = I2Cáddªss, Arg1 = Num Byã†tÿªad (Max = 16)", 
uöt32_t
, 
uöt8_t
)

37 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_I2cAuxWrôeIcmd
, "Arg0 = I2Cáddªss", 
uöt32_t
)

38 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_MccsReque°
, "Sends MCCS capabilitiesÑequestÅo monitorándÑeadsÑeply", )

39 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_RódMccs
, "Read MCCSánd VCPÅable", )

40 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_Ch™geMvidIcmd
, "Arg0 = Mvid vÆue, iàwû»£nd bœckándÅhíá·î 15m†ªsumêvideÿagaö wôhÇew MVID)", 
uöt32_t
)

41 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_SëNewAluCÆcuœti⁄
,"U£Çew ALU cÆcuœti⁄, 0:dißbÀ(ﬁd ALU), 1:íabÀ(New ALU, deÁu…Ë", 
boﬁ
)

42 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_MccsE«bÀ
, "Ród MCCS, 0: D⁄'àªad MCCS(DeÁu…), 1: Ród MCCS ", 
boﬁ
)

43 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_AUX_RexEº‹Recovîy
, "Attempt Rex ErrorÑecovery", )

44 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_SscAdvîti£E«bÀ
, "Arg0 = 0: DißbÀ SSC, 1: E«bÀ SSC, 2:Öas†M⁄ô‹'†vÆue", 
uöt8_t
)

45 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_CheckNewC⁄åﬁVÆues
, "Executes Syschronization flowás inÖage 126", )

46 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_Te°Sync
, "Executes Syschronization flowás inÖage 126", )

47 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_ProgømAlu
, "ProgramsÅhe ALU values", )

48 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_MccsV˝Reque°Icmd
, "Arg0 = Opcode", 
uöt8_t
)

49 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_EdidRódIcmd
, "Read Monitor Edid",)

50 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_RódDpcdC≠
, "Prints first 16 bytes ofÅhe DPCD capabilities", )

51 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_REX_Ch™geLa°Tu
, "ChangeÜast Tu sizeÅo 8 whenÜessÅhan 4", )

54 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_SëBwLc
, "Arg0 = B™dwidth (deÁu… : 0), Arg1 = L™êCou¡ (deÁu… : 0)\nBW : 0x06, 0x0A, 0x14, 0x1E\nLC : 0x1, 0x2, 0x4", 
uöt8_t
, uint8_t)

55 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_PmLogSèã
, "LogÅhe current AUXÖolicy maker FSM state. For debugging.", )

56 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_SëIsﬁ©eE«bÀ
, "Arg0 = 0: DißbÀ isﬁ©e, Othî: E«bÀ isﬁ©e", 
boﬁ
)

57 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_PmPo°Evít
, "Po°á¿evíàtÿPﬁicy makî sèã. EVENTÇumbî, E¡î 17 f‹ ERROR_EVENT o∆y f‹ REX", 
uöt8_t
)

58 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_LtPo°Evít
, "Po°á¿evíàtÿLök Tøöög sèã. EVENTÇumbî", 
uöt8_t
)

59 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_íabÀDp
, "Enable DP", )

60 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_dißbÀDp
, "Disable DP", )

61 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_DumpFœshV¨sIcmd
,"DumpÅhe current status of DP flash vars", )

62 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_MCAUpDnIcmd
, "Arg0 = 0: MCA down, 1: MCA up", 
boﬁ
)

63 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_SëAudioSèã
, "Arg0 = 0: E«bÀ SDPánd sídáudiÿ°©êtÿRex, 1 : DißbÀ SDP", 
boﬁ
)

64 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_Re°¨tDPSèãMachöe
, "RestartsÅhe DP state machine", )

65 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_E«bÀAuxTøffic
, "Prötög o‡AUXÅøffi¯ovî UART 0: DißbÀ, 1: E«bÀ", 
boﬁ
)

66 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_IcmdPrötAŒSètusFœg
, "PrintállÅhe statusánd state flags", )

68 
	$ICMD_FUNCTIONS_END
(
DP_COMPONENT
)

	@components/dp/src/dp_icmds.c

24 
	~<bb_t›.h
>

25 
	~<c⁄figuøti⁄.h
>

26 
	~"dp_loc.h
"

27 
	~"dp_cmd.h
"

28 
	~"dp_log.h
"

29 
	~"Àx_pﬁicy_makî.h
"

30 
	~"ªx_pﬁicy_makî.h
"

31 
	~"aux_≠i.h
"

32 
	~<À⁄_timîs.h
>

33 
	~<timög_timîs.h
>

34 
	~<mˇ.h
>

35 
	~<u¨t.h
>

42 
	$N©iveAuxRódIcmdRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
,

43 c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".flashcode")));

44 
	$N©iveAuxWrôeH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
,

45 c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".flashcode")));

46 
	$I2cAuxRódIcmdRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
,

47 c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".flashcode")));

48 
	$I2cAuxWrôeH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
,

49 c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".flashcode")));

50 
	$C≠RïlyRïlyTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".flashcode")));

53 
TIMING_TimîH™dÀrT
 
C≠RódTimî
;

67 
	$DP_PmLogSèã
()

69 i‡(
	`bb_t›_IsDevi˚Lex
())

71 
	`AUX_LexPmLogSèã
();

75 
	`AUX_RexPmLogSèã
();

77 
	}
}

86 
	$DP_LEX_SëEdidTy≥Icmd
(
uöt8_t
 
edidTy≥
)

88 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

90 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

92 
dpC⁄fig
->
edidTy≥
 =ÉdidType;

93 i‡(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

95 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
AUX_EDID_TYPE
, 
dpC⁄fig
->
edidTy≥
);

98 
	}
}

107 
	$DP_LEX_SëBpcModeIcmd
(
uöt8_t
 
bpcMode
)

109 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

111 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

113 
dpC⁄fig
->
bpcMode
 = bpcMode;

114 i‡(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

116 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
AUX_BPC_MODE
, 
dpC⁄fig
->
bpcMode
);

119 
	}
}

128 
	$DP_LEX_SëCom¥essi⁄R©ioIcmd
(
uöt8_t
 
øtio
)

130 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

132 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

134 
dpC⁄fig
->
com¥essi⁄R©io
 = 
øtio
;

135 i‡(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

137 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_COMP_RATIO
, 
dpC⁄figPå
->
com¥essi⁄R©io
);

140 
	}
}

149 
	$DP_REX_I2cAuxRódIcmd
(
uöt32_t
 
addªss
, 
uöt8_t
 
numByãs
)

151 
	`AUX_RexEnqueueI2cOvîAuxRód
(
numByãs
, 
addªss
, 
åue
, 
I2cAuxRódIcmdRïlyH™dÀr
);

152 
	}
}

161 
	$DP_REX_RódDpcdC≠
()

163 
uöt8_t
 
lo›Idx
;

164 
lo›Idx
 = 0;ÜoopIdx <= 0xF;ÜoopIdx++)

166 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
AUX_DPCD_DUMP
, 
lo›Idx
, 
	`RexLoˇlDpcdRód
(loopIdx));

168 
	}
}

177 
	$DP_REX_I2cAuxWrôeIcmd
(
uöt32_t
 
addªss
)

179 
uöt8_t
 
mccsReq
[] = {0x51, 0x82, 0x01, 0x52, 0xee};

180 
	`AUX_RexEnqueueDDCCIOvîI2CWrôe
(&
mccsReq
[0], 
	`ARRAYSIZE
(mccsReq), 
addªss
, 
åue
, 
I2cAuxWrôeH™dÀr
);

182 
	}
}

184 
	$DP_REX_Te°Sync
()

186 
uöt8_t
 
mccsReq
[] = {0x51, 0x82, 0x01, 0x02, 0xbe};

187 
	`AUX_RexEnqueueDDCCIOvîI2CWrôe
(&
mccsReq
[0], 
	`ARRAYSIZE
(mccsReq), 0x37, 
åue
, 
I2cAuxWrôeH™dÀr
);

188 
	}
}

197 
	$DP_REX_MccsReque°
()

199 
uöt8_t
 
mccsReq
[] = {0x51, 0x83, 0xF3, 0x00, 0x00, 0x4F};

200 
	`AUX_RexEnqueueDDCCIOvîI2CWrôe
(&
mccsReq
[0], 
	`ARRAYSIZE
(mccsReq), 0x37, 
åue
, 
I2cAuxWrôeH™dÀr
);

201 
C≠RódTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
C≠RïlyRïlyTimîH™dÀr
, 
Ál£
, 80);

202 
	`TIMING_TimîSèπ
(
C≠RódTimî
);

203 
	}
}

212 
	$DP_REX_N©iveAuxRódIcmd
(
uöt32_t
 
addªss
, 
uöt8_t
 
numByãs
)

214 
	`SubmôN©iveAuxRód
(
addªss
, 
numByãs
, 
N©iveAuxRódIcmdRïlyH™dÀr
);

215 
	}
}

224 
	$DP_REX_EdidRódIcmd
()

226 i‡(!
	`bb_t›_IsDevi˚Lex
())

228 
	`ûog_DP_COMPONENT_0
(
ILOG_USER_LOG
, 
AUX_REX_READ_EDID
);

229 
	`AUX_RexEdidRód
();

231 
	}
}

239 
	$DP_REX_N©iveAuxWrôeIcmd
(
uöt32_t
 
addªss
, 
uöt8_t
 
wrôeD©a
)

241 
	`SubmôN©iveAuxWrôe
(
addªss
, 
wrôeD©a
, 
N©iveAuxWrôeH™dÀr
);

242 
	}
}

251 
	$DP_REX_SscAdvîti£E«bÀ
(
uöt8_t
 
sscMode
)

253 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

255 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

257 
dpC⁄fig
->
ªxSscAdvîti£Mode
 = (
C⁄figSscMode
)
sscMode
;

258 if(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

260 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
AUX_SSC_ADVERTISE_MODE
, 
dpC⁄fig
->
ªxSscAdvîti£Mode
);

263 
	}
}

272 
	$DP_LEX_SscAdvîti£E«bÀ
(
uöt8_t
 
sscMode
)

274 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

276 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

278 
dpC⁄fig
->
ÀxSscAdvîti£Mode
 = (
C⁄figSscMode
)
sscMode
;

279 if(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

281 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
AUX_SSC_ADVERTISE_MODE
, 
dpC⁄fig
->
ÀxSscAdvîti£Mode
);

284 
	}
}

292 
	$DP_SëIsﬁ©eE«bÀ
(
boﬁ
 
íabÀ
)

294 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

296 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

298 
dpC⁄fig
->
íabÀIsﬁ©e
 = 
íabÀ
;

299 if(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

301 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
AUX_ISOLATED_STATUS
, 
dpC⁄fig
->
íabÀIsﬁ©e
);

304 
	}
}

313 
	$DP_REX_SëNewAluCÆcuœti⁄
(
boﬁ
 
íabÀ
)

315 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

317 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

319 
dpC⁄fig
->
√wAluCÆcuœti⁄
 = 
íabÀ
;

320 if(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

322 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
DP_NEW_ALU_CAL
, 
dpC⁄fig
->
√wAluCÆcuœti⁄
);

325 
	}
}

334 
	$DP_íabÀDp
()

336 
C⁄figBlocksE«bÀ
 *
blocksE«bÀd
 = &(
	`C⁄fig_GëBuf„r
()->
„©uªC⁄åﬁ
);

337 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VARS_BB_FEATURE_MASK
, 
blocksE«bÀd
))

339 
blocksE«bÀd
->
DPc⁄åﬁ
 |(1 << 
CONFIG_BLOCK_ENABLE_DP
);

340 
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VARS_BB_FEATURE_MASK
, 
blocksE«bÀd
);

342 
	}
}

351 
	$DP_dißbÀDp
()

353 
C⁄figBlocksE«bÀ
 *
blocksE«bÀd
 = &(
	`C⁄fig_GëBuf„r
()->
„©uªC⁄åﬁ
);

354 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VARS_BB_FEATURE_MASK
, 
blocksE«bÀd
))

356 
blocksE«bÀd
->
DPc⁄åﬁ
 &~(1 << 
CONFIG_BLOCK_ENABLE_DP
);

357 
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VARS_BB_FEATURE_MASK
, 
blocksE«bÀd
);

359 
	}
}

368 
	$DP_LEX_RódEdidVÆues
()

370 if(
	`bb_t›_IsDevi˚Lex
())

372 
uöt8_t
 
edidBuff
[256];

373 
uöt16_t
 
d©aLígth
 = 256;

375 
	`LexLoˇlEdidRód
(0, 
d©aLígth
, &
edidBuff
[0]);

376 
size_t
 
i
 = 0; i < 
d©aLígth
; i++)

378 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
PM_EDID_BYTE_VALUE
, 
i
, 
edidBuff
[i]);

379 
	`UART_WaôF‹Tx
();

382 
	}
}

392 
	$DP_PmPo°Evít
(
uöt8_t
 
evít
)

394 if(
	`bb_t›_IsDevi˚Lex
())

396 
	`LexPmSèãSídEvítWôhNoD©a
(
evít
);

400 
	`RexPmSèãSídEvítWôhNoD©a
(
evít
);

402 
	}
}

412 
	$DP_LtPo°Evít
(
uöt8_t
 
evít
)

414 if(
	`bb_t›_IsDevi˚Lex
())

416 
	`LexLtSèãSídEvítWôhNoD©a
(
evít
);

420 
	`RexLtSèãSídEvítWôhNoD©a
(
evít
);

422 
	}
}

431 
	$DP_DumpFœshV¨sIcmd
()

433 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_ISOLATE_VALUE
, 
dpC⁄figPå
->
íabÀIsﬁ©e
);

434 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_NEW_ALU_CAL
, 
dpC⁄figPå
->
√wAluCÆcuœti⁄
);

435 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LEX_SSC_VALUE
, 
dpC⁄figPå
->
ÀxSscAdvîti£Mode
);

436 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_REX_SSC_VALUE
, 
dpC⁄figPå
->
ªxSscAdvîti£Mode
);

437 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_NO_READ_MCCS_VALUE
, 
dpC⁄figPå
->
noRódMccs
);

438 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_AUDIO_SEND
, 
dpC⁄figPå
->
noSídAudio
);

439 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_PRE_EMPHASIS
, 
dpC⁄figPå
->
¥eEmphasis
);

440 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_VOLTAGE_SWING
, 
dpC⁄figPå
->
vﬁègeSwög
);

441 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_BANDWIDTH
, 
dpC⁄figPå
->
b™dwidth
);

442 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LANE_COUNT
, (
dpC⁄figPå
->
œ√Cou¡
 & 0x0F));

443 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_EDID_TYPE
, 
dpC⁄figPå
->
edidTy≥
);

444 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_BPC_MODE
, 
dpC⁄figPå
->
bpcMode
);

445 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_YCBCR_STATUS
, 
dpC⁄figPå
->
dißbÀYCbCr
);

446 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_REX_PW_DN_TIMEOUT
, (
dpC⁄figPå
->
powîDownTime
/1000));

447 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_COMP_RATIO
, 
dpC⁄figPå
->
com¥essi⁄R©io
);

448 #ifde‡
PLUG_TEST


449 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_EN_AUX_TRAFFIC
, (
dpC⁄figPå
->
íabÀAuxTøffic
));

451 
	}
}

460 
	$DP_LEX_YCbCrDißbÀIcmd
(
boﬁ
 
íabÀ
)

462 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

464 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

466 
dpC⁄fig
->
dißbÀYCbCr
 = 
íabÀ
;

467 if(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

469 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_YCBCR_STATUS
, 
dpC⁄fig
->
dißbÀYCbCr
);

472 
	}
}

479 
	$DP_LEX_VS_PE_icmd
(
uöt8_t
 
vs
, uöt8_à
≥
)

481 
	`AUX_SëLexVsPe
(
vs
, 
≥
);

482 
	}
}

492 
	$DP_SëBwLc
(
uöt8_t
 
b™dwidth
, uöt8_à
œ√Cou¡
)

494 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

496 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

498 
dpC⁄fig
->
b™dwidth
 = bandwidth;

499 
dpC⁄fig
->
œ√Cou¡
 =ÜaneCount;

501 i‡(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

503 
	`ûog_DP_COMPONENT_2
(
ILOG_USER_LOG
, 
AUX_SET_BW_LC_STATUS
, 
dpC⁄fig
->
b™dwidth
, 
œ√Cou¡
);

506 
	}
}

515 
	$DP_LEX_ReLökTøöIcmd
()

517 
	`ReInôüãLökTøöög
();

518 
	}
}

528 
	$DP_REX_Ch™geMvidIcmd
(
uöt32_t
 
mvid
)

530 if(
	`bb_t›_IsDevi˚Lex
())

536 
	`SídBœckVideoToM⁄ô‹
();

537 
	`DP_Sour˚E«bÀBœckS¸ìn
(
Ál£
);

538 
	`AUX_RexUpd©eMvidVÆue
(
mvid
);

539 
	`DP_RexUpd©eSåómMvid
(
mvid
);

540 
	`RexProgømALU
();

541 
	`SídVideoToM⁄ô‹
();

543 
	}
}

551 
	$DP_LEX_SëPowîDownWaôTime
(
uöt32_t
 
timîVÆ
)

553 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

555 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

557 
dpC⁄fig
->
powîDownTime
 = (
timîVÆ
 * 1000);

559 i‡(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

561 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
AUX_SET_PW_DN_TIMER
, 
timîVÆ
);

564 
	}
}

572 
	$N©iveAuxRódIcmdRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

575 
size_t
 
ödex
 = 0; index <
ªq
->
hódî
.
d©aLí
; index++)

577 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
AUX_NATIVE_AUX_READ_ICMD
,

578 (
ªq
->
hódî
.
addªss
Ë+ 
ödex
,

579 
ª∂y
->
d©a
[
ödex
]);

581 
	}
}

588 
	$N©iveAuxWrôeH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

590 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
AUX_WRITE_ICMD
,

591 (
ªq
->
hódî
.
addªss
),

592 
ªq
->
d©a
[0]);

593 
	}
}

600 
	$I2cAuxRódIcmdRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

603 
size_t
 
ödex
 = 0; index <
ªq
->
hódî
.
d©aLí
; index++)

605 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
AUX_I2C_AUX_READ_ICMD
,

606 (
ªq
->
hódî
.
addªss
Ë+ 
ödex
,

607 
ª∂y
->
d©a
[
ödex
]);

609 
	}
}

616 
	$I2cAuxWrôeH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

618 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
AUX_WRITE_ICMD
,

619 (
ªq
->
hódî
.
addªss
),

620 
ªq
->
d©a
[0]);

621 
	}
}

623 
	$C≠RïlyRïlyTimîH™dÀr
()

625 
	`AUX_RexEnqueueI2cOvîAuxRód
(38, 0x37, 
åue
, 
I2cAuxRódIcmdRïlyH™dÀr
);

626 
	}
}

635 
	$DP_REX_MccsE«bÀ
(
boﬁ
 
íabÀ
)

637 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

639 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

641 
dpC⁄fig
->
noRódMccs
 = 
íabÀ
;

642 if(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

644 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
DP_READ_MCCS_STATUS
, 
dpC⁄fig
->
noRódMccs
);

647 
	}
}

656 
	$DP_E«bÀAuxTøffic
(
boﬁ
 
íabÀ
)

658 #ifde‡
PLUG_TEST


659 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

661 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

663 
dpC⁄fig
->
íabÀAuxTøffic
 = 
íabÀ
;

664 if(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

666 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
DP_ENABLE_AUX_TRAFFIC_STATUS
, 
dpC⁄fig
->
íabÀAuxTøffic
);

670 
	}
}

679 
	$DP_Re°¨tDPSèãMachöe
()

681 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_RESTART_PM_STATE_MACHINE
);

682 i‡(
	`bb_t›_IsDevi˚Lex
())

684 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_DP_HOST_DISCONNECT
);

688 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MONITOR_DISCONNECT
);

690 
	}
}

699 
	$DP_SëAudioSèã
(
boﬁ
 
íabÀ
)

701 
C⁄figDpC⁄fig
 *
dpC⁄fig
 = &(
	`C⁄fig_GëBuf„r
()->dpConfig);

703 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

705 
dpC⁄fig
->
noSídAudio
 = 
íabÀ
;

706 if(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, 
dpC⁄fig
))

708 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
DP_SEND_AUDIO_STATE
, 
dpC⁄fig
->
noSídAudio
);

711 
	}
}

721 
	$DP_AUX_LexEº‹Recovîy
(
uöt8_t
 
îr‹
)

723 if(
îr‹
 == 0)

725 
	`DP_LEX_ª£tSåómExåa˘‹
();

727 if(
îr‹
 == 1)

731 
	`DP_Re£tEncodî
(
åue
);

734 
	`DP_Re£tEncodî
(
Ál£
);

736 
	`DP_C⁄figuªEncodîExåa˘‹
();

738 
	`DP_E«bÀSåómEncodî
();

740 
	}
}

749 
	$DP_AUX_RexEº‹Recovîy
()

751 
	`SídBœckVideoToM⁄ô‹
();

752 
	`DP_Sour˚E«bÀBœckS¸ìn
(
Ál£
);

753 
	`RexProgømALU
();

754 
	`SídVideoToM⁄ô‹
();

755 
	}
}

764 
	$DP_MCAUpDnIcmd
(
boﬁ
 
°©e
)

766 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
°©e
 ? 
DP_MCA_UP
 : 
DP_MCA_DN
);

768 i‡(
°©e
)

770 
	`MCA_Ch™√lLökUp
(
MCA_CHANNEL_NUMBER_DP
);

774 
	`MCA_Ch™√lLökDn
(
MCA_CHANNEL_NUMBER_DP
);

777 
	}
}

786 
	$DP_REX_ProgømAlu
()

788 
	`RexProgømALU
();

789 
	}
}

798 
	$DP_REX_Ch™geLa°Tu
()

800 
	`SídBœckVideoToM⁄ô‹
();

801 
	`DP_Sour˚E«bÀBœckS¸ìn
(
Ál£
);

802 
	`RexDebugProgømALU
();

803 
	`SídVideoToM⁄ô‹
();

804 
	}
}

812 
	$DP_REX_MccsV˝Reque°Icmd
(
uöt8_t
 
›code
)

814 
	`AUX_RexSídV˝Reque°
(
›code
);

815 
	}
}

824 
	$DP_IcmdPrötAŒSètusFœg
()

826 i‡(
	`bb_t›_IsDevi˚Lex
())

828 
	`DP_LEX_IcmdPrötAŒSètusFœg
();

832 
	`DP_REX_IcmdPrötAŒSètusFœg
();

834 
	}
}

	@components/dp/src/dp_loc.h

11 #i‚de‡
AUX_LOC_H


12 
	#AUX_LOC_H


	)

15 
	~<iba£.h
>

16 
	~<dp_°ªam.h
>

17 
	~<dp_aux.h
>

18 
	~<c⁄figuøti⁄.h
>

19 
	~"Àx_dpcd_ªg.h
"

20 
	~"edid.h
"

21 
	~"mccs.h
"

24 
	#AUX_CAP_READ_SIZE
 
AUX_MAX_DATA_BURST_SIZE


25 

	)

28 
	eAUX_LexPowîSèã


30 
	mLEX_POWER_STATE_NORMAL
 = 0x01,

31 
	mLEX_POWER_STATE_POWER_DOWN
 = 0x02,

32 
	mLEX_POWER_STATE_MAIN_LINK_PW
 = 0x05,

36 
	sRe˚ivîC≠Cache


38 
uöt32_t
 
	mª£rved
: 4;

39 
uöt32_t
 
	maddªss
: 20;

40 
uöt32_t
 
	md©a
: 8;

43 
	sMCCSCache


45 
size_t
 
	m‰agmítSize
;

46 
size_t
 
	m√xtFøgmítAddªss
;

47 
size_t
 
	m√xtFªeIndex
;

48 
uöt8_t
 
	mbyãs
[
MCCS_CACHE_SIZE
];

51 
	sSökP¨amëîs


53 
uöt8_t
 
	mª˚ivîC≠Cache
[
AUX_CAP_READ_SIZE
];

54 
uöt8_t
 
	medidCache
[
EDID_CACHE_SIZE
];

58 
	sLökP¨amëîs


60 
MaöLökB™dwidth
 
	mbw
;

61 
L™eCou¡
 
	mlc
;

62 
boﬁ
 
	míh™˚dFømögE«bÀ
;

63 
boﬁ
 
	míabÀSsc
;

67 
	sRexPmSètusFœgs


69 
uöt32_t
 
	mªxDpE«bÀd
 : 1;

70 
uöt32_t
 
	mm⁄ô‹C⁄√˘ed
 : 1;

71 
uöt32_t
 
	mvideoRxRódy
 : 1;

75 
	sLexPmSètusFœgs


77 
uöt32_t
 
	mÀxDpE«bÀd
 : 1;

78 
uöt32_t
 
	mho°C⁄√˘ed
 : 1;

79 
uöt32_t
 
	mÀxVideoTxRódy
 : 1;

82 
	eAUX_Down°ªamCpuMesßgeTy≥


84 
	mAUX_MSG_SINK_PARAMETERS_ACK
,

85 
	mAUX_MSG_STREAM_PARAMETERS
,

86 
	mAUX_MSG_MCCS_CAP_ACK
,

87 
	mAUX_MSG_VCP_SET_REQUEST
,

88 
	mAUX_MSG_MCCS_TIMING_ACK
,

89 
	mAUX_MSG_NEW_CONTROL_FIFO_ACK
,

90 
	mAUX_MSG_SAVE_SETTING_REQUEST
,

91 
	mAUX_MSG_VCP_TABLE_ACK
,

92 
	mAUX_MSG_NEW_CONTROL_REQ
,

93 
	mAUX_MSG_CODE_PAGE_REQ
,

94 
	mAUX_MSG_LEX_PM_STATUS
,

95 
	mAUX_MSG_LEX_DP_ENABLE
,

96 
	mAUX_MSG_LEX_HOST_STATUS
,

97 
	mAUX_MSG_VIDEO_TX_STATUS
,

98 
	mAUX_MSG_SEND_AUDIO_STATUS
,

99 
	mAUX_MSG_SET_MONITOR_SLEEP
,

100 
	mAUX_MSG_LEX_REQUEST_MONITOR_INFO
,

103 
	sAUX_Down°ªamCpuMesßge


105 
AUX_Down°ªamCpuMesßgeTy≥
 
	mty≥
;

106 *
	mmsgBuf„r
;

107 
uöt16_t
 
	mmsgLígth
;

110 
	eAUX_Up°ªamCpuMesßgeTy≥


112 
	mAUX_MSG_STREAM_PARAMETERS_ACK
,

113 
	mAUX_MSG_SINK_PARAMETERS
,

114 
	mAUX_MSG_MCCS_CAP_SEND
,

115 
	mAUX_MSG_VCP_TABLE
,

116 
	mAUX_MSG_MCCS_TIMING
,

117 
	mAUX_MSG_NEW_CONTROL_FIFO
,

118 
	mAUX_MSG_REX_PM_STATUS
,

119 
	mAUX_MSG_REX_WAIT_HOST_INFO
,

120 
	mAUX_MSG_REX_READY_FOR_MCA
,

121 
	mAUX_MSG_AUDIO_STATUS_ACK
,

124 
	sAUX_Up°ªamCpuMesßge


126 
AUX_Up°ªamCpuMesßgeTy≥
 
	mty≥
;

127 *
	mmsgBuf„r
;

128 
uöt16_t
 
	mmsgLígth
;

141 (*
	tAUX_N©iveAuxReque°H™dÀr
)(

142 
	tAUX_Reque°
 *
	tªq
, 
	tAUX_Rïly
 *
	tª∂y
, 
	tuöt8_t
 
	tödex
);

153 (*
	tAUX_N©iveAuxReque°H™dÀr
)(

154 
	tAUX_Reque°
 *
	tªq
, 
	tAUX_Rïly
 *
	tª∂y
, 
	tuöt8_t
 
	tåueD©aLí
);

156 (*
	tAUX_RexRïlyH™dÀr
)(

157 c⁄° 
	tAUX_Reque°
 *
	tªq
, c⁄° 
	tAUX_Rïly
 *
	tª∂y
);

159 
	sAUX_Reque°AndRexRïlyH™dÀr


161 
AUX_Reque°
 
ªque°
;

162 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
;

165 
	sDpC⁄fig


167 
MaöLökB™dwidth
 
bw
;

168 
L™eCou¡
 
lc
;

169 
TøöögP©ã∫Sequí˚
 
a˘iveTøöögP©ã∫
;

170 
boﬁ
 
íh™˚dFømög
;

171 
boﬁ
 
sscDëe˘ed
;

174 
	sCuºítDrivePaú


176 
VﬁègeSwög
 
vs
;

177 
PªEmphasis
 
≥
;

180 
	sLökAndSåómP¨amëîs


182 
LökP¨amëîs
 
lökP¨amëîs
;

183 
DP_SåómP¨amëîs
 
°ªamP¨amëîs
;

186 
	eLexLtEvít


188 
LEX_LT_EVENT_ENTER
,

189 
LEX_LT_EVENT_EXIT
,

190 
LEX_LT_ENABLE
,

191 
LEX_LT_DISABLE
,

192 
LEX_LT_RETIMER_REINIT_DONE
,

193 
LEX_LT_TPS1_REQUEST
,

194 
LEX_LT_RETIMER_CR_DONE
,

195 
LEX_LT_RETIMER_CR_LOCK
,

196 
LEX_LT_RETIMER_CR_PLL_MODE_CHANGE
,

197 
LEX_LT_LOCK_FAIL
,

198 
LEX_LT_GTP_SET_DONE
,

199 
LEX_LT_NEXT_SETTING
,

200 
LEX_LT_SETTING_DONE
,

201 
LEX_LT_TPS23_REQUEST
,

202 
LEX_LT_SYMBOL_LOCKED
,

203 
LEX_LT_GTP_FRQ_DONE
,

204 
LEX_LT_LANE_ALIGNED
,

205 
LEX_LT_TRAINING_TIMEOUT
,

206 
LEX_LT_POWER_DOWN
,

207 
LEX_LT_POWER_UP
,

208 
LEX_LT_REQUEST_RETRAIN
,

209 
LEX_LT_HPD_MIN_DOWN_TIME


212 
	uLexLtEvítD©a


214 
boﬁ
 
sscE«bÀd
;

217 
	eRexLtEvít


219 
REX_LT_EVENT_ENTER
,

220 
REX_LT_EVENT_EXIT
,

221 
REX_LT_ENABLE
,

222 
REX_LT_DISABLE
,

223 
REX_LT_READ_ALL_LANES
,

224 
REX_LT_HAVE_CR
,

225 
REX_LT_NO_CR
,

226 
REX_LT_HAVE_ALL
,

229 
	uRexLtEvítD©a


231 
LökAndSåómP¨amëîs
 *
lökAndSåómP¨amëîs
;

235 
	eDpcdRódSètus


237 
READ_ACK
,

238 
READ_DEFER


242 c⁄° 
C⁄figDpC⁄fig
 *
dpC⁄figPå
;

245 
	$LexLtSèãSídEvítWôhNoD©a
(
LexLtEvít
 
evít
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

246 
	$LexAuxH™dÀReque°
(

247 
AUX_Reque°
 *
ªq
,

248 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

249 
	$AUX_LexTønß˘i⁄H™dÀrInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

250 
	$AUX_DpLexI§EvítH™dÀr
(
uöt32_t
 
i§Ty≥
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

251 
	$LexLökBwSëWrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

252 
	$LexL™eCou¡SëWrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

253 
	$LexTrP©ã∫SëWrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

254 
	$LexTrL™eXSëWrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

255 
	$LexPowîSaveWrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

256 
DpcdRódSètus
 
	$LexLökBwSëRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

257 
DpcdRódSètus
 
	$LexL™eCou¡SëRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

258 
DpcdRódSètus
 
	$LexTrL™eXSëRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

259 
DpcdRódSètus
 
	$LexL™eXYSètusRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

260 
DpcdRódSètus
 
	$LexL™eAlignRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

261 
DpcdRódSètus
 
	$LexSökSètusRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

262 
DpcdRódSètus
 
	$LexAdju°L™eXYRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

263 
DpcdRódSètus
 
	$LEXSymEºC¡L™eXYRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
)
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

264 
	$ReInôüãLökTøöög
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

265 
	$DP_Lex_SèπRexPowîDownTimî
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

267 
boﬁ
 
	$AUX_SëLexVsPe
–
VﬁègeSwög
 
vs
 , 
PªEmphasis
 
≥
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

268 
	$AUX_Re£tUnsuµ‹ãdSëtögs
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

269 
	$AUX_MakeSëtögUnsuµ‹ãd
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

272 
	$AUX_RexEnqueueLoˇlReque°
(

273 c⁄° 
AUX_Reque°
 *
ªque°
, 
AUX_RexRïlyH™dÀr
 
ª∂yH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

274 
	$SídVideoToM⁄ô‹
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

275 
	$SídBœckVideoToM⁄ô‹
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

276 
	$SídIdÀP©ã∫
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

277 
	$RexProgømALU
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

278 
	$RexDebugProgømALU
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

279 
	$AUX_PªC≠C⁄figuøti⁄
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

280 
	$AUX_RexTønß˘i⁄H™dÀrInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

281 
	$AUX_RexUpd©eSåómP¨ams
(c⁄° 
DP_SåómP¨amëîs
 *
°ªamP¨ams
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

282 
	$RexLtSèãSídEvítWôhD©a
(
RexLtEvít
 
evít
, 
RexLtEvítD©a
 *
evítD©a
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

283 
	$RexLtSèãSídEvítWôhNoD©a
(
RexLtEvít
 
evít
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

284 
	$WrôeLökC⁄figuøti⁄P¨amëîs
(

285 
MaöLökB™dwidth
 
b™dwidth
,

286 
L™eCou¡
 
œ√Cou¡
,

287 
boﬁ
 
íh™˚dFømög
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

288 
	$AUX_DpRexI§EvítH™dÀr
(
uöt32_t
 
i§Ty≥
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

289 
boﬁ
 
	$RexAuxCheckDpcdRevRïlyH™dÀr
(
uöt8_t
 
dpcd_ªv
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

290 
	$Adju°VﬁègeSwögAndPªEmphasisL™e0_1
(
uöt8_t
 
ªque°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

291 
	$Adju°VﬁègeSwögAndPªEmphasisL™e2_3
(
uöt8_t
 
ªque°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

292 
	$IssueTøöögL™eXSëReque°
(
L™eCou¡
 
lc
, 
AUX_RexRïlyH™dÀr
 
ª∂yH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

293 
	$AUX_RexUpd©eMvidVÆue
(
uöt32_t
 
mvid
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

294 
	$AUX_RexSídV˝Reque°
(
uöt8_t
 
›code
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

299 
boﬁ
 
	`EdidBlockVîifyChecksum
(
uöt8_t
 *
loˇlEdidTabÀ
, uöt8_à
blockIndex
);

302 
	$Te°Reque°RïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

305 
size_t
 
	`CompuãD©aChunkSize
(size_à
buf„rSize
, size_à
buf„rIndex
, size_à
maxChunkSize
);

306 
BpcMode
 
	`AUX_GëBpcMode
();

307 
LoˇlEdidTy≥
 
	`AUX_GëLoˇlEdidTy≥
();

308 
boﬁ
 
	`AUX_gëDPFótuª
();

309 
uöt32_t
 
	`Aux_GëSymbﬁClock
(
MaöLökB™dwidth
 
bw
, 
boﬁ
 
sscOn
);

314 
uöt8_t
* 
	$DP_REX_GëLoˇlEdid
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

	@components/dp/src/dp_log.h

11 #i‚de‡
AUX_LOG_H


12 
	#AUX_LOG_H


	)

15 
	~<¥oje˘_comp⁄íts.h
>

16 
	~<ûog.h
>

23 
	$ILOG_CREATE
(
DP_COMPONENT
)

24 
	`ILOG_ENTRY
(
AUX_SENT_CPU_MESSAGE
, "Sent CPU message with header %d\n")

25 
	`ILOG_ENTRY
(
AUX_READ_CPU_MESSAGE
, "Read CPU messageÅype %dÜength %d\n")

26 
	`ILOG_ENTRY
(
AUX_UNHANDLED_CPU_MESSAGE
, "Read CPU message(%d) which can't be handled\n")

27 
	`ILOG_ENTRY
(
AUX_GOT_HPD_IRQ
, "Got HPD IRQÉvent\n")

28 
	`ILOG_ENTRY
(
AUX_GOT_HPD_UP
, "Got HPD upÉvent\n")

29 
	`ILOG_ENTRY
(
AUX_GOT_HPD_DOWN
, "Got HPD downÉvent\n")

30 
	`ILOG_ENTRY
(
AUX_LANE_COUNT_SET
, "Got LANE_COUNT_SET = 0x%x, ENHANCED_FRAME_EN = 0x%d\n")

31 
	`ILOG_ENTRY
(
AUX_TRAINING_PATTERN_SET
, "Got TRAINING_PATTERN_SET; value = 0x%x\n")

32 
	`ILOG_ENTRY
(
AUX_LANEX_Y_STATUS
, "GotÑead LANEX_Y_STATUS:áddr = 0x%x,Ñesponse data = 0x%x\n")

33 
	`ILOG_ENTRY
(
AUX_LANE_ALIGN_STATUS_UPDATED
, "Got LANE_ALIGN_STATUS_UPDATED:Ñesponse = 0x%x\n")

34 
	`ILOG_ENTRY
(
AUX_TRAINING_LANEX_SET_REQUEST
, "Got TRAINING_LANEX_SET writeÑequest: DPCDáddr = 0x%x, value = 0x%x\n")

35 
	`ILOG_ENTRY
(
AUX_STARTING_LINK_TRAINING
, "BeginningÜinkÅraining\n")

36 
	`ILOG_ENTRY
(
AUX_INVALID_LANE_INDEX
, "InvalidÜane index %dátÜine %d\n")

37 
	`ILOG_ENTRY
(
AUX_GOT_READ_ADJUST_REQUEST
, "Got ADJUST_REQUEST_LANEX_YÑead,Ñeply data = 0x%x\n")

38 
	`ILOG_ENTRY
(
AUX_INVALID_BW
, "Invalid bandwidth 0x%xátÜine %d\n")

39 
	`ILOG_ENTRY
(
AUX_MAX_BW_OVER
, "We don't support max bandwidth 0x%xánd changedÅo 0x%x\n")

40 
	`ILOG_ENTRY
(
AUX_INVALID_LC
, "Invalid Lane Count = %x\n")

41 
	`ILOG_ENTRY
(
AUX_INVALID_BW_LC
, "Invalid Bandwidth = 0x%x Lane count = %dátÜine %d\n")

42 
	`ILOG_ENTRY
(
AUX_INVALID_DPCD_REV
, "Invalid DPCD Rev = 0x%xátÜine %d\n")

43 
	`ILOG_ENTRY
(
AUX_DPCD_REV
, "DPCD Rev of Monitor = 0x%x & Monitor capability validated\n")

44 
	`ILOG_ENTRY
(
AUX_LINK_TRAINING_FAILED
, "LinkÅraining failedát bw=%d,Üc=%d,Åps=%d\n")

45 
	`ILOG_ENTRY
(
AUX_INVALID_REQUEST
, "InvalidÑequestátÜine %d: gotáddress=0x%x, dataLen=%d\n")

46 
	`ILOG_ENTRY
(
AUX_LINK_PARAMETERS
, "LinkÅraining withÖarameters bw=0x%x,Üc=0x%x,Üine=%d\n")

47 
	`ILOG_ENTRY
(
PM_LOG_STATE
, "Policy maker: current state = %d\n")

48 
	`ILOG_ENTRY
(
PM_STATE_TRANSITION
, "Policy maker: old state = %d,Çew state = %d onÉvent = %d\n")

49 
	`ILOG_ENTRY
(
PM_UNHANDLED_EVENT
, "Policy maker: unhandledÉvent %d in state %d\n")

50 
	`ILOG_ENTRY
(
PM_INVALID_EVENT
, "Policy maker: got invalidÉvent %d in state %d\n")

51 
	`ILOG_ENTRY
(
LT_STATE_TRANSITION
, "LinkTR: old state = %d,Çew state = %d onÉvent = %d\n")

52 
	`ILOG_ENTRY
(
LT_UNHANDLED_EVENT
, "LinkTR: unhandledÉvent %d in state %d\n")

53 
	`ILOG_ENTRY
(
LT_INVALID_EVENT
, "LinkTR: got invalidÉvent %d in state %d\n")

54 
	`ILOG_ENTRY
(
PM_END_READ_RECEIVER_CAP
, "Policy maker: finishedÑeadingÑeceiver capability\n")

55 
	`ILOG_ENTRY
(
PM_END_READ_EDID
, "Policy maker: finishedÑeading EDID;ÇextFreeIndex = %d\n")

56 
	`ILOG_ENTRY
(
PM_DPCD_BYTE_VALUE
, "Policy maker: DPCD byte Addr 0x%x = 0x%x\n")

57 
	`ILOG_ENTRY
(
PM_EDID_BYTE_VALUE
, "Policy maker: EDID byte 0x%x = 0x%x\n")

58 
	`ILOG_ENTRY
(
PM_READING_EDID_BLOCK
, "Policy maker:Ñeading EDID block %d\n")

59 
	`ILOG_ENTRY
(
PM_EDID_ERROR
, "Policy maker: EDIDÑeadÉrrorátÜine %d, Reason = %d\n")

60 
	`ILOG_ENTRY
(
PM_MULTIPLE_EDID_EXTENSION_BLOCKS
, "Num EDIDÉxtenion blocks = %d; onlyÖrocessing 1Éxtension block\n")

61 
	`ILOG_ENTRY
(
PM_UPDATING_EDID_CACHE
, "Policy maker: updating EDID cache;ÇextFreeIndex = %d\n")

62 
	`ILOG_ENTRY
(
PM_UPDATING_MCCS_CACHE
, "Policy maker: updating MCCS cache;ÇextFreeIndex = %d\n")

63 
	`ILOG_ENTRY
(
PM_LOADED_FORWARDED_DPCD_TABLE_VALUE
, "Policy maker:Üoaded forwarded DPCDÅable byte;ÅableIndex=%d, dpcdAddress=0x%x, value=0x%d\n")

64 
	`ILOG_ENTRY
(
PM_SENT_STREAM_PARAMS
, "Sent Stream Parameters\n")

65 
	`ILOG_ENTRY
(
PM_SENT_MCCS_REQUEST
, "Sent MCCSÑequest stringÅo REX\n")

66 
	`ILOG_ENTRY
(
PM_SENT_SINK_PARAMS
, "Sent Sink Params (CAP, EDID)\n")

67 
	`ILOG_ENTRY
(
PM_SENT_CHANGED_LINK_PARAMS
, "Sent Changed Link Params (BW: 0x%x, LC:0x%x)\n")

68 
	`ILOG_ENTRY
(
PM_SENT_MCCS_CAPS
, "Sent MCCS Capabilities\n")

69 
	`ILOG_ENTRY
(
PM_SENT_VCP_TABLE
, "Sent VCP Table\n")

70 
	`ILOG_ENTRY
(
PM_SENT_TIMING_REPORT
, "Sent Timing Report\n")

71 
	`ILOG_ENTRY
(
PM_READ_IRQ_VECTOR
, "IRQ Vector (0x%x)ÑeadÑesult: 0x%x\n")

72 
	`ILOG_ENTRY
(
AUX_ISOLATED_LEX_ENABLED
, "****** DP ISOLATED LEX ENABLED *******\n")

73 
	`ILOG_ENTRY
(
AUX_ISOLATED_LEX_DISABLED
, "****** DP ISOLATED LEX DISABLED *******\n")

74 
	`ILOG_ENTRY
(
AUX_ISOLATED_REX_ENABLED
, "****** DP ISOLATED REX ENABLED *******\n")

75 
	`ILOG_ENTRY
(
AUX_ISOLATED_REX_DISABLED
, "****** DP ISOLATED REX DISABLED *******\n")

76 
	`ILOG_ENTRY
(
AUX_RESTART_CR
, "RESTART CLOCK RECOVERY --> MAX VS = %d,ÜaneXYStatusReadCount = %d, sameAdjustmentRequestCounter = %d\n")

77 
	`ILOG_ENTRY
(
AUX_CHANGE_BW
, "Changing BandWidth from 0x%xÅo 0x%x\n")

78 
	`ILOG_ENTRY
(
AUX_CHANGE_LC
, "Changing LaneCount from 0x%xÅo 0x%x\n")

79 
	`ILOG_ENTRY
(
AUX_CR_RBR
, "Alreadyát RBR,Ñeducing Lane CountÅoÜanes with clockÑecovery\n")

80 
	`ILOG_ENTRY
(
AUX_CR_LC_1
, "Alreadyát RBRándÇoáctiveÜanes have clockÑecovery,Énding Link Training\n")

81 
	`ILOG_ENTRY
(
AUX_CR_DATA
, "CR Data 1 = 0x%xánd Data 2 = 0x%xátÜine = %d\n")

82 
	`ILOG_ENTRY
(
AUX_EDID_TYPE
, "AUX EDIDÅype = %d\n")

83 
	`ILOG_ENTRY
(
AUX_BPC_MODE
, "AUX BPC Mode = %d\n")

84 
	`ILOG_ENTRY
(
AUX_SSC_ADVERTISE_MODE
, "SSC Advertise Mode = %d | 0=disable, 1=enable, 2=pass Monitor's value\n")

85 
	`ILOG_ENTRY
(
AUX_ISOLATED_STATUS
, "AUX Isolated = %d\n")

86 
	`ILOG_ENTRY
(
AUX_CAP_WRONG_ADDR
, "AUX CAPáddr doesn'tÉxist = 0x%x\n")

87 
	`ILOG_ENTRY
(
AUX_NATIVE_AUX_READ_ICMD
, "NATIVE AUX READ ICMD ADDRESS = 0x%x Value = 0x%x\n")

88 
	`ILOG_ENTRY
(
AUX_I2C_AUX_READ_ICMD
, "I2C AUX READ ICMD ADDRESS = 0x%x Value = 0x%x\n")

89 
	`ILOG_ENTRY
(
AUX_GOT_HOST_CONNECTION_MSG
, "AUX Got Host Connection Msg = %d\n")

90 
	`ILOG_ENTRY
(
AUX_GOT_LINK_MSG
, "AUX Got Phy Link Msg = %d \n")

91 
	`ILOG_ENTRY
(
AUX_GOT_FEATURE_MSG
, "AUX Got Feature Control Msg = %d \n")

92 
	`ILOG_ENTRY
(
AUX_STATE_IDLE
, "AUX IDLE state started\n")

93 
	`ILOG_ENTRY
(
AUX_STATE_DISABLE
, "AUX DISABLE state started\n")

94 
	`ILOG_ENTRY
(
AUX_MONITOR_INFO_FAIL
, "AUX monitor info failedátÜine %d\n")

95 
	`ILOG_ENTRY
(
AUX_SENT_MONITOR_INFO
, "AUX sent monitor dataÅo LEX\n")

96 
	`ILOG_ENTRY
(
AUX_GOT_OTHERS_REQ
, "AUX got message of otherÑequest. AddressOnly: %d, Request Command: %d\n")

97 
	`ILOG_ENTRY
(
AUX_LINK_FAIL
, "AUXÜink failed. Code: %d count = %d\n")

98 
	`ILOG_ENTRY
(
AUX_WRITE_ICMD
, "NATIVE AUX WRITE ICMD ADDRESS = 0x%x Value = 0x%x\n")

99 
	`ILOG_ENTRY
(
AUX_READ_TRAINING1
, "AUXÑeadÅraining 202:%x, 203:%x, 204:%x\n")

100 
	`ILOG_ENTRY
(
AUX_READ_TRAINING2
, "AUXÑeadÅraining 205:%x, 206:%x, 207:%x\n")

101 
	`ILOG_ENTRY
(
AUX_TU_TIMEOUT
, "AUX Lex failedÅoÜinkÅrain withinÅimeout \n")

102 
	`ILOG_ENTRY
(
AUX_DP_CONFIG
, "BW: 0x%x, LC:%d, Enhanced:%d \n")

103 
	`ILOG_ENTRY
(
AUX_SEND_DEFER
, "Aux sent DEFER by SWátÜine %d \n")

104 
	`ILOG_ENTRY
(
AUX_SAME_REQUEST
, "Aux got same TPSÑequestánd ignored it TPS %d\n")

105 
	`ILOG_ENTRY
(
AUX_DEFER_OVER
, "Aux defer overÅhe maximumámount\n")

106 
	`ILOG_ENTRY
(
AUX_GOT_NEW_HOST_INFO
, "GotÇew host information:Çew streamParams = %d,ÇewÜinkParams = %d\n")

107 
	`ILOG_ENTRY
(
AUX_GOT_NEW_MONITOR_INFO
, "GotÇew monitor information.ÉdidChanged: %d, capChanged: %d\n")

108 
	`ILOG_ENTRY
(
AUX_GOT_SAME_MSA
, "GotÅhe same msa value, ignore it\n")

109 
	`ILOG_ENTRY
(
AUX_INVALID_INTERVAL
, "Training Aux interval value isÇot valid (%d)\n")

110 
	`ILOG_ENTRY
(
AUX_CAP_VALUE
, "Aux CAPÑead value [0x%x] = 0x%x\n")

111 
	`ILOG_ENTRY
(
AUX_VS_PE
, "********** LC = %d, VS = %d, PE = %d\n")

112 
	`ILOG_ENTRY
(
AUX_GOT_DP_ISR
, "Aux got DP ISR Type = 0x%0x\n")

113 
	`ILOG_ENTRY
(
NOT_LINk_OR_PHY_TEST_REQUEST
, "This isÇotáÜink orÖhyÅestÑequest\n")

114 
	`ILOG_ENTRY
(
WRONG_TEST_PATTERN
, "TestÖatternÇotávailable\n")

115 
	`ILOG_ENTRY
(
AUX_DP_CHANNEL_STATUS
, "Aux DP Channel Status: %d\n")

116 
	`ILOG_ENTRY
(
AUX_DP_SSC_INFO
, "Freq: %d, BW: %d, Detect SSC (0: disbled, 1:enabled): %d\n")

117 
	`ILOG_ENTRY
(
AUX_MONITOR_SSC_INFO
, "Monitor support SSC (1: support, 0:Ço-support): %d\n")

118 
	`ILOG_ENTRY
(
LEX_VS
, "Voltage Swing Advertised on LEX: %d\n")

119 
	`ILOG_ENTRY
(
LEX_PE
, "Pre Emphasis Advertised on LEX: %d\n")

120 
	`ILOG_ENTRY
(
AUX_ACTIVE_INFO_REX
, "Aux Generate Lex Active/Offline Phy:%d, dpEnable:%d, Host:%d\n")

121 
	`ILOG_ENTRY
(
AUX_ACTIVE_INFO_LEX
, "Aux Generate Rex Active/Offline Phy:%d, dpEnable:%d, Monitor:%d\n")

122 
	`ILOG_ENTRY
(
AUX_MCA_DETECT_LINKDN
, "Aux detect MCAÜink down or disabled.\n")

123 
	`ILOG_ENTRY
(
AUX_SET_BW_LC_STATUS
, "BW = 0x%x; LC = 0x%x\n")

124 
	`ILOG_ENTRY
(
AUX_AUDIO_COPY_STATUS
, "Copy AudioÅo current EDID status %d\n")

125 
	`ILOG_ENTRY
(
REX_READ_MONITOR_CAP
, "RexReadMonitorCap \n")

126 
	`ILOG_ENTRY
(
DPCD_INVALID_ADDRESS
, "Accessing invalidáddress 0x%x \n")

127 
	`ILOG_ENTRY
(
AUX_REX_AUDIO_FREQ
, "Supported Audio Frequency %d\n")

128 
	`ILOG_ENTRY
(
AUX_EDID_SUPPS_AUDIO
, "Extended block ofÅheÉdidádvertizesáudio support, byte = 0x%x\n")

129 
	`ILOG_ENTRY
(
AUX_FPS
, "Aux FrameÖeriod = %d, FPS on LEX = %d\n")

130 
	`ILOG_ENTRY
(
AUX_LINK_STATUS
, "Aux currentÜink isÅrained: %d, state: 0x%x\n")

131 
	`ILOG_ENTRY
(
AUX_DP_159_REINIT_ERROR
, "Aux: DP159 ReinitÇot done!\n")

132 
	`ILOG_ENTRY
(
EDID_WRONG_INDEX
, "TriedÅoáccess wrongÉdid index!\n")

133 
	`ILOG_ENTRY
(
AUX_LEX_GET_SINK_PARAMETER
, "Lex get sinkÖarameters, 2(New Link Params) 1(New) 0(Same): %d\n")

134 
	`ILOG_ENTRY
(
EDID_TESTED
, "Edid compared:%d, 1(New) 0(Same)\n")

135 
	`ILOG_ENTRY
(
DP_LEX_CAP_CHANGED
, "BW/LC compared:%d, 1(New) 0(Same)\n")

136 
	`ILOG_ENTRY
(
AUX_NO_MSA
, "Couldn't get MSA value withinÅime.\n")

137 
	`ILOG_ENTRY
(
AUX_LINK_TRAINED
, "Link Trained with VS:%d, EQ:%d\n")

139 
	`ILOG_ENTRY
(
AUX_LEX_LT_CR_STATUS
, "Clock Recovery status %d\n")

140 
	`ILOG_ENTRY
(
AUX_LEX_LT_CE_STATUS
, "Symbol Lock : %d; Lane Alignment : %d; BER Error : %d\n")

141 
	`ILOG_ENTRY
(
SOURCE_OUT_RESET
, "Source isÇot out ofÑeset, DP's StreamParametersÇot updated\n")

142 
	`ILOG_ENTRY
(
DP_LEX_LT_MODE
, "Link Training Mode = %d\n")

143 
	`ILOG_ENTRY
(
YCBCR_STATUS
, "yCbCr support disabled in Edid\n")

144 
	`ILOG_ENTRY
(
DP_10BPC_DISABLE
, "10 BPC is disabled in Edid\n")

145 
	`ILOG_ENTRY
(
DP_10BPC_STREAM_FAIL
, "Stream Extraction Failed dueÅo 10BPC\n")

146 
	`ILOG_ENTRY
(
DP_VALID_SYMBOL_STREAM_FAIL
, "Stream Extraction Failed dueÅo invalid valid symbols = %d\n")

147 
	`ILOG_ENTRY
(
BPC_UPDATE
, "Maximum bpc updated from 0x%xÅo BPC10 \n")

148 
	`ILOG_ENTRY
(
DP_NEW_ALU_CAL
, "DP New ALU cal = %d * (0: Legacy, 1:New)\n")

149 
	`ILOG_ENTRY
(
DP_ISOLATE_VALUE
, "DP ISOLATE = %d * (0 = disable, 1 =Énable)\n")

150 
	`ILOG_ENTRY
(
DP_LEX_SSC_VALUE
, "DP LEX SSC = %d * (0 = disable, 1 =ádvertise, 2 =Öass monitor's value)\n")

151 
	`ILOG_ENTRY
(
DP_REX_SSC_VALUE
, "DP REX SSC = %d * (0 = disable, 1 =ádvertise, 2 =Öass monitor's value)\n")

152 
	`ILOG_ENTRY
(
DP_NO_READ_MCCS_VALUE
,"DP No Read MCCS = %d * (0 = Don'tÑead MCCS 1 = Read MCCS\n")

153 
	`ILOG_ENTRY
(
DP_VOLTAGE_SWING
, "DP VS = %d * (255 = default,ánythingÉlse = forced)\n")

154 
	`ILOG_ENTRY
(
DP_PRE_EMPHASIS
, "DP PE = %d * (255 = default,ánythingÉlse = forced)\n")

155 
	`ILOG_ENTRY
(
DP_BANDWIDTH
, "DP BANDWIDTH = 0x%x * (0 = default,ánythingÉlse = forced)\n")

156 
	`ILOG_ENTRY
(
DP_LANE_COUNT
, "DP LANE COUNT = 0x%x * (0 = default,ánythingÉlse = forced)\n")

157 
	`ILOG_ENTRY
(
DP_EDID_TYPE
, "DP EDID TYPE = %d * (0 = monitor'sÉdid, 1 = 4k, 2 = 1080p)\n")

158 
	`ILOG_ENTRY
(
DP_BPC_MODE
, "DP BPC MODE = %d * (6 = 6bpc, 8 = 8bpc, 10 = 10bpc)\n")

159 
	`ILOG_ENTRY
(
DP_AUX_LT_MODE
, "DP AUX LT Mode = %d * (0 = Normal Mode, 1 = Fast Mode)\n")

160 
	`ILOG_ENTRY
(
DP_AUDIO_SEND
, "DP AUDIO Send = %d * (0 = Enable, 1 = Disable)\n")

161 
	`ILOG_ENTRY
(
DP_YCBCR_STATUS
, "DP YCBCR Disable = %d * (1 = disable, 0 = PassÅhrough)\n")

162 
	`ILOG_ENTRY
(
DP_ERR_CNT_STATUS
, "DP Error Counter = %d * (0 = ReturnÅrueÉrror counter value, 1 = Return Trueálways)\n")

163 
	`ILOG_ENTRY
(
DP_REX_PW_DN_TIMEOUT
, "DP Rex PD Timeout= %d * (Value in sec, Max 10 sec)\n")

164 
	`ILOG_ENTRY
(
DP_COMP_RATIO
, "DP Comp Ratio = %d * (0 = default, 2 = 2.4, 4 = 4, 6 = 6)\n")

165 #ifde‡
PLUG_TEST


166 
	`ILOG_ENTRY
(
DP_EN_AUX_TRAFFIC
, "DP En AUX = %d * (1 =Énable, 0 = disable)\n")

169 
	`ILOG_ENTRY
(
DP_LEX_ICMD
, "*** This isá Rex only iCommand ***\n")

170 
	`ILOG_ENTRY
(
DP_REX_ICMD
, "*** This isá Lex only iCommand ***\n")

171 
	`ILOG_ENTRY
(
AUX_LINK_TRAINING_STATS
, "********LINK TRAINING STATS*******\n")

172 
	`ILOG_ENTRY
(
AUX_LEX_SYMBOL_ERROR_COUNT_LANEXY
, "GotÑead SYMBOL_ERROR_COUNT_LANEX_Y:áddr = 0x%x,Ñesp = 0x%x\n")

174 
	`ILOG_ENTRY
(
FLASH_LC_UPDATED
, "Flash value for Lane count updated in DPCDÑeg = 0x%x\n")

175 
	`ILOG_ENTRY
(
FLASH_BW_UPDATED
, "Flash value for Bandwidth updated in DPCDÑeg = 0x%x\n")

176 
	`ILOG_ENTRY
(
DP_LEX_AUDIO_MSG
, "Audio msg sentÅo Rex AudioMute = %d Maud = %d\n")

177 
	`ILOG_ENTRY
(
DP_LEX_CR_FAIL_STATUS
, "Clock Recovery Fail status : %d\n")

178 
	`ILOG_ENTRY
(
DP_LEX_UNSUPP_SETTINGS
, "Redundant Unsupported setting with VS = %d; PE = %d\n")

179 
	`ILOG_ENTRY
(
DP_LINK_TRAINING_STATE
, "Link Training State : %d (1: Start of CLock Recovery, 2: Start Equalization, 3: Link Trained)\n")

180 
	`ILOG_ENTRY
(
LEX_SET_ERROR_COUNT_TRUE
, "Error count function setÅoÑeturn : %d\n")

181 
	`ILOG_ENTRY
(
DP_REX_MIVD
, "Rex Calculated Mvid:%d, Nvid:%d\n")

182 
	`ILOG_ENTRY
(
AUX_SET_PW_DN_TIMER
, "Power downÅimer value set = %d sec\n")

183 
	`ILOG_ENTRY
(
DP_POWER_STATE
, "Setting Monitor Power state = 0x%d\n")

184 
	`ILOG_ENTRY
(
AUX_REX_MCCS_CAP_READ_DONE
, "MCCS capabilities stringÑead done. String size : %d, VCP Table size : %d\n")

185 
	`ILOG_ENTRY
(
AUX_LEX_MCCS_RECEIVE_STATUS
, "MCCS capabilitiesÑeceived. String size : %d\n")

186 
	`ILOG_ENTRY
(
AUX_LEX_VCP_RECEIVE_STATUS
, "VCP TableÑeceived. Table size : %d\n")

187 
	`ILOG_ENTRY
(
AUX_REX_VCP_TABLE_HEADING
, "****SUPPORTED VCP CODES****\n")

188 
	`ILOG_ENTRY
(
AUX_REX_VCP_TABLE_ENTRY
, "Opcode 0x%x\n")

189 
	`ILOG_ENTRY
(
SET_VCP_FEATURE
, "VCP feature set\n")

190 
	`ILOG_ENTRY
(
AUX_REX_VCP_READ_DONE
, "VCP TableÑead done. SendingÅo LEX\n")

191 
	`ILOG_ENTRY
(
AUX_REX_MCCS_RETRY_COUNT
, "MCCS capabilitiesÑetry counter : %d\n")

192 
	`ILOG_ENTRY
(
AUX_REX_VCP_RETRY_COUNT
, "VCP TableÑetry counter : %d\n")

194 
	`ILOG_ENTRY
(
DP_MCA_DN
, "Bringing MCA channel 1 down")

195 
	`ILOG_ENTRY
(
DP_MCA_UP
, "Bringing MCA channel 1 up")

196 
	`ILOG_ENTRY
(
AUX_GOT_HPD_REPLUG
, "Got HPD ReplugÉvent\n")

197 
	`ILOG_ENTRY
(
DP_ERR_CNT
, "LexÉrror counts ExtractionÉrror = %d, StreamÉrror = %d\n")

198 
	`ILOG_ENTRY
(
DP_LEX_ERR
, "Stream Error count = %d\n")

199 
	`ILOG_ENTRY
(
DP_READ_MCCS_STATUS
, "No Read MCCS = %d\n")

201 
	`ILOG_ENTRY
(
DP_REX_READ_MCCS
, "StartÑeading MCCSánd VCPÅable\n")

202 
	`ILOG_ENTRY
(
DP_REX_MCCS_FAIL
, "MCCSánd VCPÅableÑead failed\n")

203 
	`ILOG_ENTRY
(
AUX_REX_MCCS_READ_FAIL
, "MCCSÑead failed\n")

204 
	`ILOG_ENTRY
(
AUX_REX_VCP_READ_FAIL
, "VCPÅableÑead failed\n")

205 
	`ILOG_ENTRY
(
DP_REX_MCCS_SUCESS
, "MCCSánd VCPÅableÑead successfully\n")

206 
	`ILOG_ENTRY
(
DP_LEX_HOST_SHUTDOWN
, "DP Frequency Out of Range detected\n")

207 
	`ILOG_ENTRY
(
DP_REX_START_CR
, "Rex Start CR with LC:%d, BW:%d\n")

208 
	`ILOG_ENTRY
(
DP_LEX_EQ_FAIL
, "Lex EQ Fail with VS:%d, EQ:%d, Align:%d\n")

209 
	`ILOG_ENTRY
(
DP_LEX_REACHED_HIGHEST_LEVEL
, "Current HOST's VS:%d, EQ:%d, Highest:%d\n")

210 
	`ILOG_ENTRY
(
DP_LEX_DISABLE_COMBINATION
, "Failed. Disable VS:%d, EQ:%d Combination\n")

211 
	`ILOG_ENTRY
(
DP_LEX_VS0_PE
, "[0][0]:%d, [0][1]:%d, [0][2]:%d\n")

212 
	`ILOG_ENTRY
(
DP_LEX_VS1_PE
, "[1][0]:%d, [1][1]:%d, [1][2]:%d\n")

213 
	`ILOG_ENTRY
(
DP_LEX_VS2_PE
, "[2][0]:%d, [2][1]:%d, [2][2]:%d\n")

214 
	`ILOG_ENTRY
(
DP_SEND_AUDIO_STATE
, "Lex Audio status chnaged = %d\n")

215 
	`ILOG_ENTRY
(
AUX_REX_MCCS_READ_RETRY_COUNT
, "RexÅriedÑeading MCCS %dÅimes\n")

216 
	`ILOG_ENTRY
(
AUX_REX_END_READ_MCCS
, "Rex completedÑeading MCCS, VCP Tableánd Timing Report\n")

217 
	`ILOG_ENTRY
(
AUX_REX_START_SENDING_MCCS
, "Rex start sending MCCSÅo LEX\n")

218 
	`ILOG_ENTRY
(
AUX_REX_SINK_PARAMS_SENT
, "Sink Parameters sentÅo LEX\n")

219 
	`ILOG_ENTRY
(
AUX_AUDIO_ERR
, "ExceededáudioÉrrorÑecovery Count = %d\n")

220 
	`ILOG_ENTRY
(
AUX_REX_NEW_CONTROL_REQUEST
, "Sent New Control RequestÅo Sink\n")

221 
	`ILOG_ENTRY
(
AUX_REX_NEW_CONTROL_CHANGED
, "New Control Value changedÅo 0x%x\n")

222 
	`ILOG_ENTRY
(
AUX_REX_ACTIVE_CONTROL_REQUEST
, "Sent Active Control RequestÅo Sink\n")

223 
	`ILOG_ENTRY
(
AUX_REX_ACTIVE_CONTROL_CHANGED
, "Active Control value is 0x%x\n")

224 
	`ILOG_ENTRY
(
AUX_REX_SEND_NEW_CONTROL
, "Sendingáctive control valuesÅo LEX over COMMLINK\n")

225 
	`ILOG_ENTRY
(
AUX_REX_RECEIVED_ACTIVE_CONTROL
, "Received Active Control. Updating VCP Table\n")

226 
	`ILOG_ENTRY
(
DP_REX_MCCS_SUCCESS_COUNTER
, "MCCSÑead success counter : %d\n")

227 
	`ILOG_ENTRY
(
AUX_REX_LINK_PARAM_RETRY
, "MonitorÇotÅrained with Max BWánd LC,Ñetry LT counter: %d\n")

228 
	`ILOG_ENTRY
(
AUX_REX_MCCS_SEND_PENDING
, "MCCS sendÅo LEX isÖending\n")

229 
	`ILOG_ENTRY
(
AUX_REX_MCCS_SEND_CRITERIA
, "MCCS send criteria ReadyToSend : %d, SendCount: %d\n")

230 
	`ILOG_ENTRY
(
AUX_REX_MCCS_CAP_RX_FAIL
, "MCCS Cap Rx failed Idx1 : %d, Idx2 : %d,Üine : %d\n")

231 
	`ILOG_ENTRY
(
AUX_REX_UTILIZATION
, "Utilzation is (%d)\n")

232 
	`ILOG_ENTRY
(
AUX_ADJUST_SSC
, "Utilzation is over 100%%ádjust SSC %d\n")

233 
	`ILOG_ENTRY
(
AUX_ADJUST_FPS
, "Utilzation is over 100%%ádjust FPS from %dÅo %d\n")

234 
	`ILOG_ENTRY
(
AUX_REX_SEND_DUMMY
, "Sending dummy videoÅoÅhe monitor\n")

235 
	`ILOG_ENTRY
(
DP_OVER_CURRENT_WARNING
, "Over current detected in DP\n")

236 
	`ILOG_ENTRY
(
DP_EDID_INVALID
, "REX is unableÅo get valid EDID values fromÅhe sink,ÖassingÅhe invalid EDIDÅo LEX\n")

237 
	`ILOG_ENTRY
(
DP_CAP_INVALID
, "REX is unableÅoÑead valid CAP values fromÅhe sinkáfter MaxÅries\n")

238 
	`ILOG_ENTRY
(
AUX_REX_READ_EDID
, "*** Monitor EdidÑead ***\n")

239 
	`ILOG_ENTRY
(
AUX_EDID_READ_ICMD
, "0x%x, //0x%x\n")

240 
	`ILOG_ENTRY
(
AUX_DPCD_DUMP
, "DPCD Byte 0x%x = 0x%x\n")

241 
	`ILOG_ENTRY
(
DP_ENABLE_AUX_TRAFFIC_STATUS
, "Enable AUX over UART = %d\n")

242 
	`ILOG_ENTRY
(
DP_RESTART_PM_STATE_MACHINE
, "****** Restarting DP PM State Machine ******\n")

243 
	`ILOG_ENTRY
(
DP_LEX_REMOVE_RESOLUTION
, "Removing unsupported standardÅimingÉdid = %d\n")

244 
	`ILOG_ENTRY
(
DP_LEX_DETAIL_TIME
, "Removing unsupported detailÅiming fromÉdid = %d\n")

245 
	`ILOG_ENTRY
(
DP_LEX_CVT
, "Removing unsupported CVT 3 byte codeÅiming fromÉdid = %d\n")

246 
	`ILOG_ENTRY
(
DP_REX_EDID_BLOCK_NUM
, "EDIDÑeceived with blockÇumber: %d\n")

247 
	`ILOG_ENTRY
(
DP_REX_EDID_SIZE
, "TOTAL EDID SIZE: %d\n")

248 
	`ILOG_ENTRY
(
DP_INVALID_CAP_EDID
, "FailedÅoÑead Capánd Edid\n")

250 
	`ILOG_ENTRY
(
DP_PRINT_STATUS
, "*** Status Flags ***\n")

251 
	`ILOG_ENTRY
(
DP_PHYUP
, "PhyUp = %d\n")

252 
	`ILOG_ENTRY
(
DP_REXACTV
, "RexActive = %d\n")

253 
	`ILOG_ENTRY
(
DP_VIDEORXRDY
, "VideoRxReady = %d\n")

254 
	`ILOG_ENTRY
(
DP_ISOLATE
, "IsolateEnabled = %d\n")

255 
	`ILOG_ENTRY
(
DP_REXWAITHOST
, "RexWaitHostInfo = %d\n")

256 
	`ILOG_ENTRY
(
DP_REXNEWMONI
, "RexNewMonitor = %d\n")

257 
	`ILOG_ENTRY
(
DP_REXNEWLNKPARA
, "RexNewLinkParams = %d\n")

258 
	`ILOG_ENTRY
(
DP_REXDPEN
, "RexDpEnabled = %d\n")

259 
	`ILOG_ENTRY
(
DP_MONCONN
, "monitorConnected = %d\n")

260 
	`ILOG_ENTRY
(
DP_LEXDPEN
, "LexDpEnabled = %d\n")

261 
	`ILOG_ENTRY
(
DP_HOSTCONN
, "HostConnected = %d\n")

262 
	`ILOG_ENTRY
(
DP_LEXRXREADY
, "LexVideoTxReady = %d\n")

263 
	`ILOG_ENTRY
(
DP_GOTSINKPARAM
, "GotSinkParamters = %d\n")

264 
	`ILOG_ENTRY
(
DP_GOTSTREAMPARAM
, "GotStreamParamters = %d\n")

265 
	`ILOG_ENTRY
(
DP_MONINFORDY
, "MonitorInfoReady = %d\n")

266 
	`ILOG_ENTRY
(
DP_LEXWAITMONINFO
, "LexWaitMonitorInfo = %d\n")

267 
	`ILOG_ENTRY
(
DP_GOTNEWSTRMPARA
, "GotNewStreamParams = %d\n")

268 
	`ILOG_ENTRY
(
DP_LEXACT
, "LexActive = %d\n")

269 
	`ILOG_ENTRY
(
DP_REXDRIVEINIT
, "RedriverInitDone = %d\n")

270 
	`ILOG_ENTRY
(
DP_CURNTSTATE
, "CurrentState = %d\n")

271 
	`ILOG_ENTRY
(
DP_PREVSTATE
, "PrevState = %d\n")

272 
	`ILOG_ENTRY
(
DP_EVENT
, "Event = %d\n")

273 
	`ILOG_ENTRY
(
DP_CAPVALID
, "CapIsValid = %d\n")

275 
	$ILOG_END
(
DP_COMPONENT
, 
ILOG_MAJOR_EVENT
)

	@components/dp/src/dpcd.h

11 #i‚de‡
DPCD_H


12 
	#DPCD_H


	)

21 
	#DPCD_REV
 0x00000

	)

22 
	#MAX_LINK_RATE
 0x00001

	)

23 
	#MAX_LINK_RATE_DEFAULT
 0x14

24 
	#MAX_LANE_COUNT
 0x00002

	)

25 
	#MAX_LANE_COUNT_MASK
 0x1F

26 
	#MAX_LANE_COUNT_DEFAULT
 0xC4

27 
	#TPS3_SUPPORTED
 0x40

	)

28 
	#ENHANCED_FRAMING_ENABLE
 0x80

	)

29 
	#DP_PWR_VLTG_CAP
 0x1F

30 
	#MAX_DOWNSPREAD
 0x00003

	)

31 
	#DOWNSPREAD_SUPPORTED
 0x00001

32 
	#NORP_AND_DP_POWER_VOLTAGE_CAP
 0x00004

	)

33 
	#NORP_AND_DP_POWER_VOLTAGE_CAP_DEFAUT
 0x01

	)

34 
	#DOWN_STREAM_PORT_PRESENT
 0x00005

	)

35 
	#MAIN_LINK_CHANNEL_CODING
 0x00006

	)

36 
	#DOWN_STREAM_PORT_COUNT
 0x00007

	)

37 
	#RECEIVE_PORT0_CAP_0
 0x00008

	)

38 
	#RECEIVE_PORT0_CAP_1
 0x00009

	)

39 
	#RECEIVE_PORT1_CAP_0
 0x0000A

	)

40 
	#RECEIVE_PORT1_CAP_1
 0x0000B

	)

41 
	#I2C_SPEED_CONTROL_CAPABILITIES_BIT_MAP
 0x0000C

	)

42 
	#TRAINING_AUX_RD_INTERVAL
 0x0000E

	)

44 
	#LINK_BW_SET
 0x00100

	)

45 
	#LANE_COUNT_SET
 0x00101

	)

46 
	#TRAINING_PATTERN_SET
 0x00102

	)

47 
	#TRAINING_LANE0_SET
 0x00103

	)

48 
	#VOLTAGE_SWING_SET_OFFSET
 0

49 
	#MAX_SWING_REACHED_OFFSET
 2

50 
	#PREEMPHASIS_SET_OFFSET
 3

51 
	#MAX_PREEMPHASIS_REACHED_OFFSET
 5

52 
	#TRAINING_LANE1_SET
 0x00104

	)

53 
	#TRAINING_LANE2_SET
 0x00105

	)

54 
	#TRAINING_LANE3_SET
 0x00106

	)

55 
	#DOWNSPREAD_CTRL
 0x00107

	)

56 
	#MAIN_LINK_CHANNEL_CODING_SET
 0x00108

	)

57 
	#I2C_SPEED_CONTROL_STATUS_BIT_MAP
 0x00109

	)

58 
	#EDP_CONFIGURATION_SET
 0x0010A

	)

59 
	#LINK_QUAL_LANE0_SET
 0x0010B

	)

60 
	#LINK_QUAL_LANE1_SET
 0x0010C

	)

61 
	#LINK_QUAL_LANE2_SET
 0x0010D

	)

62 
	#LINK_QUAL_LANE3_SET
 0x0010E

	)

63 
	#RESERVED_POST_CURSOR_2_0
 0x0010F

	)

64 
	#RESERVED_POST_CURSOR_2_1
 0x00110

	)

65 
	#MSTM_CTRL
 0x00111

	)

67 
	#SINK_COUNT
 0x00200

	)

68 
	#DEVICE_SERVICE_IRQ_VECTOR
 0x00201

	)

69 
	#AUTOMATED_TEST_REQUEST
 (1<<1)

70 
	#SINK_SPECIFIC_IRQ
 (1<<6)

71 
	#LANE0_1_STATUS
 0x00202

	)

72 
	#LANE2_3_STATUS
 0x00203

	)

73 
	#LANE_ALIGN_STATUS_UPDATED
 0x00204

	)

74 
	#CLEAR_INTERLANE_ALIGN_DONE_OFFSET
 0xFE

75 
	#LINK_STATUS_UPDATED
 (1<<7)

76 
	#SINK_STATUS
 0x00205

	)

77 
	#ADJUST_REQUEST_LANE0_1
 0x00206

	)

78 
	#ADJUST_REQUEST_LANE2_3
 0x00207

	)

80 
	#TEST_REQUEST
 0x00218

81 
	#PHY_TEST_PATTERN_ADDR
 0x00248

82 
	#TEST_LINK_RATE
 0x00219

83 
	#TEST_LANE_COUNT
 0x00220

84 
	#TEST_RESPONSE
 0x00260

85 
	#TEST_80BIT_CUSTOM_PATTERN
 0x00250

86 

	)

87 
	#SOURCE_IEEE_OUI0
 0x00300

	)

88 
	#SOURCE_IEEE_OUI1
 0x00301

	)

89 
	#SOURCE_IEEE_OUI2
 0x00302

	)

90 
	#SOURCE_DIS_0
 0x00303

	)

91 
	#SOURCE_DIS_1
 0x00304

	)

92 
	#SOURCE_DIS_2
 0x00305

	)

93 
	#SOURCE_DIS_3
 0x00306

	)

94 
	#SOURCE_DIS_4
 0x00307

	)

95 
	#SOURCE_DIS_5
 0x00308

	)

96 
	#SOURCE_HARDWARE_REVISION
 0x00309

	)

97 
	#SOURCE_FIRMWARE_MAJOR_REVISION
 0x0030A

	)

98 
	#SOURCE_FIRMWARE_MINOR_REVISION
 0x0030B

	)

100 
	#SET_POWER_AND_SET_DP_PWR_VOLTAGE
 0x00600

	)

101 
	#SET_NORMAL_OPERATION
 0x01

	)

102 
	#SET_POWERDOWN
 0x02

	)

103 
	#SET_POWERDOWN_AUX_OPERATION
 0x05

	)

105 
	#LINK_SERVICE_IRQ_VECTOR_ESI0
 0x02005

	)

106 
	#RX_CAP_CAHANGED
 (1<<0)

	)

107 
	#LINK_STATUS_CHANGED
 (1<<1)

	)

108 
	#LANE0_1_STATUS_ESI
 0x0200C

	)

109 
	#LANE2_3_STATUS_ESI
 0x0200D

	)

110 
	#LANE_ALIGN_STATUS_UPDATED_ESI
 0x0200E

	)

111 
	#SINK_STATUS_ESI
 0x0200F

	)

113 
	#EDID_ADDRESS
 0x00050

114 
	#MCCS_ADDRESS
 0x00037

115 

	)

	@components/dp/src/edid.c

25 
	~"edid_loˇl.c
"

26 
	~"dp_log.h
"

29 
	#EDID_BPC_BYTE
 20

	)

30 
	#EDID_EXTENSION_BLOCK_COUNT_ADDRESS
 126

	)

31 
	#EDID_ID_PRODUCT_CODE_OFFSET
 0xA

	)

32 
	#EDID_FIRST_BLOCK_YCBCR_BYTE
 0x18

	)

33 
	#YCBCR422_DISABLE_FIRST_BLOCK_CLR_MASK
 0xEF

34 
	#EDID_SECOND_BLOCK_REV_NUMBER_ADDRESS
 0X81

	)

35 
	#EDID_SECOND_BLOCK_YCBCR_BYTE
 0x83

	)

36 
	#YCBCR422_DISABLE_SECOND_BLOCK_MASK
 0xEF

37 
	#COLOR_BIT_DEPTH_8BPP
 0xA5

38 
	#EDID_CALC_XRESOLUTION
(
°rdVÆ
) ((strdVal + 31) * 8)

39 
	#EDID_CALC_CVT_RESOLUTION
(
°rdVÆ
) ((strdVal + 1) * 2)

40 

	)

47 
LexLﬂdEdidPnPid
();

50 
uöt8_t
 
	gedid_m⁄ô‹
[
EDID_CACHE_SIZE
];

51 
uöt8_t
 
	gedid_hódî
[
EDID_VID_SIZE
];

54 
EdidBlock0
 *
	gedidBlock0
 = (EdidBlock0*Ë&
edid_m⁄ô‹
[0];

55 
EdidExãndBlock
 *
	gedidBlock1
 = (EdidExãndBlock*Ë&
edid_m⁄ô‹
[
EDID_BLOCK_SIZE
];

67 
boﬁ
 
	$EdidBlockVîifyChecksum
(
uöt8_t
 *
loˇlEdidTabÀ
, uöt8_à
blockIndex
)

69 
uöt8_t
 
edidByãSum
 = 0;

70 
uöt8_t
 *
edid
 = (
loˇlEdidTabÀ
 + (
EDID_BLOCK_SIZE
 * (
blockIndex
-1)));

71 
uöt8_t
 
ödex
 = 0; index < 
EDID_CHECKSUM_BYTE
; index++)

73 
edidByãSum
 +
edid
[
ödex
];

75  ((255 - 
edidByãSum
 + 1Ë=
edid
[
EDID_CHECKSUM_BYTE
]);

76 
	}
}

91 
	$Upd©eEdidBpcMode
(
BpcMode
 
bpcMode
)

93 
bpcMode
)

95 
BPC_6
:

96 
edidBlock0
->
edidBasicDi•P¨amFótuªs
.
videoIpDef
 = 0x95;

99 
BPC_8
:

100 
edidBlock0
->
edidBasicDi•P¨amFótuªs
.
videoIpDef
 = 0xa5;

103 
BPC_10
:

104 
edidBlock0
->
edidBasicDi•P¨amFótuªs
.
videoIpDef
 = 0xb5;

107 
BPC_12
:

108 
edidBlock0
->
edidBasicDi•P¨amFótuªs
.
videoIpDef
 = 0xc5;

111 
BPC_14
:

112 
edidBlock0
->
edidBasicDi•P¨amFótuªs
.
videoIpDef
 = 0xd5;

115 
BPC_16
:

116 
edidBlock0
->
edidBasicDi•P¨amFótuªs
.
videoIpDef
 = 0xf5;

119 
BPC_DEFAULT
:

127 
	`LexLﬂdEdidPnPid
();

128 
	}
}

137 
	$DißbÀBpcSuµ‹t
()

139 
uöt8_t
 
edidBpc
 = 
edidBlock0
->
edidBasicDi•P¨amFótuªs
.
videoIpDef
;

140 if((
edidBpc
 == 0xc5) || (edidBpc == 0xd5)|| (edidBpc == 0xf5))

142 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
BPC_UPDATE
, 
edidBpc
);

143 
edidBlock0
->
edidBasicDi•P¨amFótuªs
.
videoIpDef
 = 0xb5;

145 
	`LexLﬂdEdidPnPid
();

147 
	}
}

156 
	$LexDißbÀFótuªsInEdid
(
AUX_LexMßFaûCode
 
ÁûuªCode
)

158 if(
ÁûuªCode
 =
LEX_MSA_YCBCR422
)

161 
edidBlock0
->
edidBasicDi•P¨amFótuªs
.
„©uªSuµ
 &
YCBCR422_DISABLE_FIRST_BLOCK_CLR_MASK
;

164 i‡((
edidBlock0
->
exã¡i⁄Fœg
 > 0Ë&& (
edidBlock1
->
blockTag
 > 1))

166 
edidBlock1
->
byã3
.
YCbCr422Suµ
 = 0;

169 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
YCBCR_STATUS
);

171 i‡(
ÁûuªCode
 =
LEX_MSA_10BPC
)

173 
edidBlock0
->
edidBasicDi•P¨amFótuªs
.
videoIpDef
 = 
COLOR_BIT_DEPTH_8BPP
;

174 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_10BPC_DISABLE
);

176 
	`LexLﬂdEdidPnPid
();

177 
edidBlock0
->
checksum
 = 
	`Upd©eEdidChecksumByã
((
uöt8_t
 *)edidBlock0);

178 
edidBlock1
->
checksum
 = 
	`Upd©eEdidChecksumByã
((
uöt8_t
 *)edidBlock1);

179 
	}
}

188 
	$ModifyEdidBpc
()

190 if(
dpC⁄figPå
->
bpcMode
)

192 
	`Upd©eEdidBpcMode
(
dpC⁄figPå
->
bpcMode
);

196 
	`DißbÀBpcSuµ‹t
();

200 
edidBlock0
->
checksum
 = 
	`Upd©eEdidChecksumByã
((
uöt8_t
 *)edidBlock0);

201 
edidBlock1
->
checksum
 = 
	`Upd©eEdidChecksumByã
((
uöt8_t
 *)edidBlock1);

202 
	}
}

211 
boﬁ
 
	$EdidSuµ‹tsAudio
()

213 
EdidBlock0
 *
edid0
 = 
NULL
;

214 
EdidExãndBlock
 *
edid1
 = 
NULL
;

215 if(
	`bb_t›_IsDevi˚Lex
())

217 
edid0
 = (
EdidBlock0
*)
edid_m⁄ô‹
;

218 
edid1
 = (
EdidExãndBlock
*)&
edid_m⁄ô‹
[
EDID_BLOCK_SIZE
];

222 
edid0
 = (
EdidBlock0
*)
	`DP_REX_GëLoˇlEdid
();

223 
edid1
 = (
EdidExãndBlock
*)(
	`DP_REX_GëLoˇlEdid
(Ë+ 
EDID_BLOCK_SIZE
);

226 if((
edid0
->
exã¡i⁄Fœg
 > 0)&&

227 (
edid1
->
byã3
.
basicAudioSuµ
))

229 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_EDID_SUPPS_AUDIO
, 
edid1
->
byã3
.
basicAudioSuµ
);

230  
åue
;

233  
Ál£
;

234 
	}
}

246 
	$InôEdidVÆues
()

248 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_3840_2160
, 
	`ARRAYSIZE
(edid_3840_2160));

249 
	}
}

259 
	$LﬂdRe˚ivîEdidCacheI¡oEdidTabÀ
(
uöt8_t
 *
edidSour˚
)

261 
dpC⁄figPå
->
edidTy≥
)

263 
EDID_MONITOR
:

264 
	`mem˝y
(
edid_m⁄ô‹
, 
edidSour˚
, 
EDID_CACHE_SIZE
);

267 
EDID_640_480
:

268 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_640_480
, 
	`ARRAYSIZE
(edid_640_480));

271 
EDID_800_600
:

272 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_800_600
, 
	`ARRAYSIZE
(edid_800_600));

275 
EDID_1024_768
:

276 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1024_768
, 
	`ARRAYSIZE
(edid_1024_768));

279 
EDID_1280_720
:

280 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1280_720
, 
	`ARRAYSIZE
(edid_1280_720));

283 
EDID_1280_768
:

284 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1280_768
, 
	`ARRAYSIZE
(edid_1280_768));

287 
EDID_1280_1024
:

288 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1280_1024
, 
	`ARRAYSIZE
(edid_1280_1024));

291 
EDID_1280_800
:

292 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1280_800
, 
	`ARRAYSIZE
(edid_1280_800));

295 
EDID_1360_768
:

296 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1360_768
, 
	`ARRAYSIZE
(edid_1360_768));

299 
EDID_1440_900
:

300 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1440_900
, 
	`ARRAYSIZE
(edid_1440_900));

303 
EDID_1600_900
:

304 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1600_900
, 
	`ARRAYSIZE
(edid_1600_900));

307 
EDID_1680_1050
:

308 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1680_1050
, 
	`ARRAYSIZE
(edid_1680_1050));

311 
EDID_1920_1080
:

312 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1920_1080
, 
	`ARRAYSIZE
(edid_1920_1080));

315 
EDID_1920_1200
:

316 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_1920_1200
, 
	`ARRAYSIZE
(edid_1920_1200));

319 
EDID_2560_1600
:

320 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_2560_1600
, 
	`ARRAYSIZE
(edid_2560_1600));

323 
EDID_3840_2160
:

324 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_3840_2160
, 
	`ARRAYSIZE
(edid_3840_2160));

330 
	}
}

340 
	$LexLoˇlEdidRód
(
uöt16_t
 
off£t
, uöt16_à
ªadLígth
, 
uöt8_t
 *
buf„r
)

342 if((
off£t
 + 
ªadLígth
Ë<
EDID_CACHE_SIZE
)

344 
uöt8_t
 *
edidTabÀ
 = &
edid_m⁄ô‹
[
off£t
];

345 
	`mem˝y
(
buf„r
, 
edidTabÀ
, 
ªadLígth
);

350 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
EDID_WRONG_INDEX
);

351 
	`mem£t
(
buf„r
, 0, 
ªadLígth
);

353 
	}
}

363 
boﬁ
 
	$RexEdidCh™ged
(
uöt8_t
 *
edidSour˚
)

365 
boﬁ
 
edidCh™ged
 = !
	`memeq
(
edid_hódî
,

366 &
edidSour˚
[
EDID_VID_START_BYTE
],

367 
EDID_VID_SIZE
);

369 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
EDID_TESTED
, 
edidCh™ged
);

370  
edidCh™ged
;

371 
	}
}

381 
	$EdidUpd©eHódî
(
uöt8_t
 *
edidSour˚
)

384 
	`mem˝y
(
edid_hódî
, &
edidSour˚
[
EDID_VID_START_BYTE
], 
EDID_VID_SIZE
);

385 
	}
}

395 
	$LexLﬂdDif‰ítEdid
()

397 
	`mem˝y
(
edid_m⁄ô‹
, 
edid_3840_2160
, 
	`ARRAYSIZE
(edid_3840_2160));

398 
	}
}

408 
	$LexEdidRemoveUnsuµ‹ãdTimög
(c⁄° 
uöt16_t
 
hWidth
)

410 
uöt16_t
 
XResﬁuti⁄
 = 0;

412 
uöt8_t
 
sdtTimögC¡
 = 0; sdtTimingCnt < 8; sdtTimingCnt++)

414 
XResﬁuti⁄
 = 
	`EDID_CALC_XRESOLUTION
(
edidBlock0
->
°ndTimögs
[
sdtTimögC¡
].
timögVÆueSt‹ed
);

415 i‡(
XResﬁuti⁄
 =
hWidth
)

417 
edidBlock0
->
°ndTimögs
[
sdtTimögC¡
].
timögVÆueSt‹ed
 = 0x01;

418 
edidBlock0
->
°ndTimögs
[
sdtTimögC¡
].
fõldRe‰eshR©e
 = 0x01;

419 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
DP_LEX_REMOVE_RESOLUTION
, 
XResﬁuti⁄
);

424 
uöt8_t
 
blockNum
 = 0; blockNum < 3; blockNum++)

426 i‡(
edidBlock0
->
Des¸ùt‹s18Byãs
[
blockNum
].
dëaûedTimög
.
pixñClkSt‹ed
)

428 
XResﬁuti⁄
 = (((
edidBlock0
->
Des¸ùt‹s18Byãs
[
blockNum
].
dëaûedTimög
.
HaHbUµî
 & 0xF0) << 8) |

429 (
edidBlock0
->
Des¸ùt‹s18Byãs
[
blockNum
].
dëaûedTimög
.
HaHbUµî
));

430 i‡(
XResﬁuti⁄
 =
hWidth
)

432 
	`mem£t
(&
edidBlock0
->
Des¸ùt‹s18Byãs
[
blockNum
], 0, 18);

433 
edidBlock0
->
Des¸ùt‹s18Byãs
[
blockNum
].
dëaûedTimög
.
HbLowî
 = 
TAG_DUMMY_DESCRIPTOR
;

434 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
DP_LEX_DETAIL_TIME
, 
XResﬁuti⁄
);

439 
edidBlock0
->
Des¸ùt‹s18Byãs
[
blockNum
].
di•œyDes¸ùt‹
.
èg
)

441 
TAG_SDT_TIMING_IDENTI
:

443 
EdidSènd¨dTimög
 
°ndTimögs
[6];

445 
	`mem˝y
(
°ndTimögs
,

446 &
edidBlock0
->
Des¸ùt‹s18Byãs
[
blockNum
].
di•œyDes¸ùt‹
.
°‹edD©a
[0],12);

447 
uöt8_t
 
sdtTimögC¡
 = 0; sdtTimingCnt < 8; sdtTimingCnt++)

449 
XResﬁuti⁄
 = 
	`EDID_CALC_XRESOLUTION
(
°ndTimögs
[
sdtTimögC¡
].
timögVÆueSt‹ed
);

450 i‡(
XResﬁuti⁄
 =
hWidth
)

452 
°ndTimögs
[
sdtTimögC¡
].
timögVÆueSt‹ed
 = 0x01;

453 
°ndTimögs
[
sdtTimögC¡
].
fõldRe‰eshR©e
 = 0x01;

454 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
DP_LEX_REMOVE_RESOLUTION
, 
XResﬁuti⁄
);

461 
TAG_CVT_TIMING_CODES
:

463 
EdidCVT3byãCode
 
cvt3Byãcode
[4];

464 
	`mem˝y
(
cvt3Byãcode
, &
edidBlock0
->
Des¸ùt‹s18Byãs
[
blockNum
].
di•œyDes¸ùt‹
.
°‹edD©a
[0], (cvt3Bytecode));

465 
uöt8_t
 
cou¡
 = 0; count < 4; count++)

467 
uöt16_t
 
addrLöePîFõld
 = ((
cvt3Byãcode
[
cou¡
].
msb4bôs
 << 8Ë| cvt3Byãcode[cou¡].
lsb8bôs
);

468 
XResﬁuti⁄
 = 
	`EDID_CALC_CVT_RESOLUTION
(
addrLöePîFõld
);

469 i‡(
XResﬁuti⁄
 =
hWidth
)

471 
	`mem£t
(&
cvt3Byãcode
[
cou¡
], 0, (
EdidCVT3byãCode
));

472 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
DP_LEX_CVT
, 
XResﬁuti⁄
);

484 
	`LexLﬂdEdidPnPid
();

485 
edidBlock0
->
checksum
 = 
	`Upd©eEdidChecksumByã
((
uöt8_t
 *)edidBlock0);

486 
edidBlock1
->
checksum
 = 
	`Upd©eEdidChecksumByã
((
uöt8_t
 *)edidBlock1);

487 
	}
}

501 
uöt8_t
 
	$Upd©eEdidChecksumByã
(
uöt8_t
 
loˇlEdidTabÀ
[
EDID_BLOCK_SIZE
])

503 
uöt8_t
 
edidByãSum
;

504 
uöt8_t
 
ödex
;

506 
edidByãSum
 = 0;

508 
ödex
 = 0; index < 
EDID_CHECKSUM_BYTE
; index++)

510 
edidByãSum
 +
loˇlEdidTabÀ
[
ödex
];

513 if((255 - 
edidByãSum
 + 1Ë=
loˇlEdidTabÀ
[
EDID_CHECKSUM_BYTE
])

516  
loˇlEdidTabÀ
[
EDID_CHECKSUM_BYTE
];

521  (255 - 
edidByãSum
 + 1);

523 
	}
}

533 
	$LexLﬂdEdidPnPid
()

535 
	`mem˝y
(
edidBlock0
->
edidVidPid
, 
gíîic_edid_≤_pid
, 
EDID_VID_SIZE
);

536 
	}
}

	@components/dp/src/edid.h

11 #i‚de‡
EDID_H


12 
	#EDID_H


	)

17 
	#EDID_BLOCK_SIZE
 128

	)

18 
	#EDID_CACHE_SIZE
 (2 * 
EDID_BLOCK_SIZE
)

	)

19 
	#EDID_AUDIO_SUPPORT_BYTE
 0x83

	)

20 
	#EDID_CHECKSUM_BYTE
 127

	)

21 
	#EDID_EXTENSION_FLAG_ADDR
 0x7E

22 
	#EDID_VID_START_BYTE
 8

	)

23 
	#EDID_VID_SIZE
 10

	)

26 
	eBpcMode


28 
	mBPC_DEFAULT
 = 0,

29 
	mBPC_6
 = 6,

30 
	mBPC_8
 = 8,

31 
	mBPC_10
 = 10,

32 
	mBPC_12
 = 12,

33 
	mBPC_14
 = 14,

34 
	mBPC_16
 = 16

37 
	eLoˇlEdidTy≥


39 
	mEDID_MONITOR
,

40 
	mEDID_640_480
,

41 
	mEDID_800_600
,

42 
	mEDID_1024_768
,

43 
	mEDID_1280_720
,

44 
	mEDID_1280_768
,

45 
	mEDID_1280_800
,

46 
	mEDID_1280_1024
,

47 
	mEDID_1360_768
,

48 
	mEDID_1440_900
,

49 
	mEDID_1600_900
,

50 
	mEDID_1680_1050
,

51 
	mEDID_1920_1080
,

52 
	mEDID_1920_1200
,

53 
	mEDID_2560_1600
,

54 
	mEDID_3840_2160
,

58 
	eEdidTagNum


60 
	mTAG_DUMMY_DESCRIPTOR
 = 0X10,

61 
	mTAG_DISP_PRD_SERIAL_NUM
 = 0xFF,

62 
	mTAG_ALPHA_DATA_STR
 = 0xFE,

63 
	mTAG_DISP_RANG_LMIT
 = 0xFD,

64 
	mTAG_PRODUCT_NAME
 = 0xFC,

65 
	mTAG_COLOR_PNT_DATA
 = 0xFB,

66 
	mTAG_SDT_TIMING_IDENTI
 = 0xFA,

67 
	mTAG_DCM_DATA
 = 0xF9,

68 
	mTAG_CVT_TIMING_CODES
 = 0xF8,

69 
	mTAG_ESTABLISHED_TIME_III
 = 0XF7,

74 
	eEdidD©aBlockTag


76 
	mBLOCK_TAG_RESERVED
 = 0x00,

77 
	mBLOCK_TAG_AUDIO
 = 0x01,

78 
	mBLOCK_TAG_VIDEO
 = 0x02,

79 
	mBLOCK_TAG_VENDOR_SPEC
 = 0x03,

80 
	mBLOCK_TAG_SPEAKER_ALLOC
 = 0x04,

81 
	mBLOCK_TAG_VESA_DTC
 = 0x05,

82 
	mBLOCK_TAG_EXTENDED
 = 0x07,

86 
	eEdidExãndedTag


88 
	mEXT_TAG_VID_CAP
 = 0x00,

89 
	mEXT_TAG_VENDER_SPEC
 = 0x01,

90 
	mEXT_TAG_VESA_DISP_DEV
 = 0x02,

91 
	mEXT_TAG_VESA_VID_TIME
 = 0x03,

92 
	mEXT_TAG_COLORIMETRY
 = 0x05,

93 
	mEXT_TAG_VID_FORMAT_PREFD
 = 0x0D,

94 
	mEXT_TAG_YCBCR_420
 = 0x0E,

95 
	mEXT_TAG_YCBCR_420_CAP
 = 0x0F,

96 
	mEXT_TAG_CEA_MISC_AUDIO
 = 0x10,

97 
	mEXT_TAG_VENDOR_SPEC_AUDIO
 = 0x11,

98 
	mEXT_TAG_INFO_FRAME
 = 0x20,

102 
	eEdidInfoFøme


104 
	mINFO_FRAME_RESERVED
 = 0x00,

105 
	mINFO_FRAME_VENDOR_SPEC
 = 0x01,

106 
	mINFO_FRAME_AUX_VIDEO
 = 0x02,

107 
	mINFO_FRAME_SRC_PRD_DESC
 = 0x03,

108 
	mINFO_FRAME_AUDIO
 = 0x04,

109 
	mINFO_FRAME_MPEG_SRC
 = 0x05,

110 
	mINFO_FRAME_NTSC_VBI
 = 0x06,

111 
	mINFO_FRAME_MAX
 = 0x07,

115 
	sEdidSènd¨dTimög


117 
uöt8_t
 
	mtimögVÆueSt‹ed
;

118 
uöt8_t
 
	ma•e˘R©io
 : 2;

119 
uöt8_t
 
	mfõldRe‰eshR©e
 : 6;

123 
	sEdidCVT3byãCode


125 
uöt8_t
 
	mlsb8bôs
;

126 
uöt8_t
 
	mmsb4bôs
 : 4;

127 
uöt8_t
 
	ma•e˘R©io
 : 2;

128 
uöt8_t
 
	mª§ve2Bôs
 : 2;

129 
uöt8_t
 
	mª£rv1bô
 : 1;

130 
uöt8_t
 
	m¥e„rVîtR©e
 : 2;

131 
uöt8_t
 
	mvîtR©eNbœnk
 : 5;

135 
	sEdidDëaûedTimög


137 
uöt16_t
 
	mpixñClkSt‹ed
;

138 
uöt8_t
 
	mHaLowî
;

139 
uöt8_t
 
	mHbLowî
;

140 
uöt8_t
 
	mHaHbUµî
;

142 
uöt8_t
 
	mVAcLowî
;

143 
uöt8_t
 
	mVbLowî
;

144 
uöt8_t
 
	mVaVbUµî
;

146 
uöt8_t
 
	mHFpLowî
;

147 
uöt8_t
 
	mHSpLowî
;

148 
uöt8_t
 
	mVÂLowî
;

150 
uöt8_t
 
	mHFpUµî
: 2;

151 
uöt8_t
 
	mHSpUµî
: 2;

152 
uöt8_t
 
	mVFpUµî
: 2;

153 
uöt8_t
 
	mVSpUµî
: 2;

154 
uöt8_t
 
	mHAvSizeLowî
;

155 
uöt8_t
 
	mVAvSizeLowî
;

156 
uöt8_t
 
	mHaVaSizeUµî
;

158 
uöt8_t
 
	mHB‹dî
;

159 
uöt8_t
 
	mVB‹dî
;

161 
uöt8_t
 
	msigIƒÁ˚Typ
 : 1;

162 
uöt8_t
 
	m°îeoViwSµπ
 : 2;

163 
uöt8_t
 
	m™logDigiSyncSigDef
 : 4;

164 
uöt8_t
 
	msigIƒÁ˚TypLow
 : 1;

168 
	sEdidDi•œyDes¸ùt‹


170 
uöt16_t
 
	mdi•hódî
;

171 
uöt8_t
 
	mª£rvedHód
;

172 
uöt8_t
 
	mèg
;

173 
uöt8_t
 
	mª£rved
;

175 
uöt8_t
 
	m°‹edD©a
[13];

178 
	uEdidDes¸ùt‹s18Byãs


180 
EdidDëaûedTimög
 
	mdëaûedTimög
;

181 
EdidDi•œyDes¸ùt‹
 
	mdi•œyDes¸ùt‹
;

185 
	sEdidBlock0


187 
uöt8_t
 
	medidHódî
[8];

188 
uöt8_t
 
	medidVidPid
[10];

189 
uöt8_t
 
	medidVîRev
[2];

193 
uöt8_t
 
	mvideoIpDef
;

194 
uöt8_t
 
	mhS¸ìnSize
;

195 
uöt8_t
 
	mvS¸ìnSize
;

196 
uöt8_t
 
	mgamma
;

197 
uöt8_t
 
	m„©uªSuµ
;

198 } 
	medidBasicDi•P¨amFótuªs
;

200 
uöt8_t
 
	medidCﬁ‹Ch¨
[10];

204 
uöt8_t
 
	me°ablishedTimeI
;

205 
uöt8_t
 
	me°ablishedTimeII
;

206 
uöt8_t
 
	mmunfRe£rvTime
;

207 } 
	medidE°ablishedTimög
;

209 
EdidSènd¨dTimög
 
	m°ndTimögs
[8];

210 
EdidDëaûedTimög
 
	m¥e„ªdTimög
;

211 
EdidDes¸ùt‹s18Byãs
 
	mDes¸ùt‹s18Byãs
[3];

212 
uöt8_t
 
	mexã¡i⁄Fœg
;

213 
uöt8_t
 
	mchecksum
;

217 
	sEdidExãndBlock


219 
uöt8_t
 
	mblockTag
;

220 
uöt8_t
 
	mªvisi⁄Num
;

221 
uöt8_t
 
	mdes¸ùt‹Off£t
;

224 
uöt8_t
 
	mundîsˇnSuµ
 : 1;

225 
uöt8_t
 
	mbasicAudioSuµ
 : 1;

226 
uöt8_t
 
	mYCbCr444Suµ
 : 1;

227 
uöt8_t
 
	mYCbCr422Suµ
 : 1;

228 
uöt8_t
 
	mtŸÆNumDTD
 : 4;

229 } 
	mbyã3
;

230 
uöt8_t
 
	md©aBlock
[123];

231 
uöt8_t
 
	mchecksum
;

237 
	$Upd©eEdidBpcMode
(
BpcMode
 
bpcMode
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

238 
	$InôEdidVÆues
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

239 
	$LﬂdRe˚ivîEdidCacheI¡oEdidTabÀ
(
uöt8_t
 *
edidSour˚
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

240 
	$LexLoˇlEdidRód
(

241 
uöt16_t
 
off£t
,

242 
uöt16_t
 
ªadLígth
,

243 
uöt8_t
 *
buf„r
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

244 
	$LexDißbÀFótuªsInEdid
(
AUX_LexMßFaûCode
 
ÁûuªCode
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

245 
	$ModifyEdidBpc
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

246 
	$LexLﬂdDif‰ítEdid
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

248 
boﬁ
 
	$RexEdidCh™ged
(
uöt8_t
 *
edidSour˚
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

249 
	$EdidUpd©eHódî
(
uöt8_t
 *
edidSour˚
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

250 
boﬁ
 
	$EdidSuµ‹tsAudio
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

251 
	$LexEdidRemoveUnsuµ‹ãdTimög
(c⁄° 
uöt16_t
 
hWidth
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

252 
uöt8_t
 
	$Upd©eEdidChecksumByã
(
uöt8_t
 
loˇlEdidTabÀ
[
EDID_BLOCK_SIZE
]Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

	@components/dp/src/edid_local.c

25 
	~<iba£.h
>

26 
	~<bb_t›.h
>

27 
	~"dp_loc.h
"

33 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	ggíîic_edid_≤_pid
[10] = {

46 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_640_480
[] = {

305 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_800_600
[] = {

564 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1024_768
[] = {

823 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1280_720
[] = {

1082 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1280_768
[] = {

1341 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1280_800
[] = {

1600 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1280_1024
[] = {

1859 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1360_768
[] = {

2118 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1440_900
[] = {

2377 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1600_900
[] = {

2636 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1680_1050
[] = {

2895 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1920_1080
[] = {

3154 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_1920_1200
[] = {

3413 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_2560_1600
[] = {

3672 c⁄° 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".Êashrod©a"))Ë
	gedid_3840_2160
[] = {

	@components/dp/src/lex_dpcd_reg.c

25 
	~<À⁄_timîs.h
>

26 
	~<c⁄figuøti⁄.h
>

28 
	~"dp_loc.h
"

29 
	~"dp_log.h
"

30 
	~"Àx_dpcd_ªg.h
"

31 
	~"Àx_pﬁicy_makî.h
"

32 
	~"dpcd.h
"

33 
	~<u¨t.h
>

35 
	#DPCD_REGISTER
(
addªss
, 
ho°WrôabÀ
, 
˛óøbÀ
, 
‰omRex
, 
deÁu…VÆue
, 
ªadH™dÀr
, 
wrôeH™dÀr
Ë\

	)

36 { {
	gaddªss
, {
	gho°WrôabÀ
, 
	g˛óøbÀ
, 
	g‰omRex
, 0}, 0, 
	gdeÁu…VÆue
 }, 
	gªadH™dÀr
, 
	gwrôeH™dÀr
 }

37 
	#MAX_DOWNSPREAD_INDEX
 3

	)

38 
	#DOWNSPREAD_ENABLE
 0x01

	)

43 
DpcdRódSètus
 
	$DPCD_DeÁu…RódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

44 
	$DPCD_DeÁu…WrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

49 
DpcdRegi°îSë
 
	`__©åibuã__
((
	`£˘i⁄
(".Àxd©a"))Ë
dpcdRegi°îs
[] = {

51 
	`DPCD_REGISTER
–0x00000, 
Ál£
, fÆ£, fÆ£, 0x12, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

52 
	`DPCD_REGISTER
–0x00001, 
Ál£
, fÆ£, 
åue
, 0x14, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

53 
	`DPCD_REGISTER
–0x00002, 
Ál£
, fÆ£, 
åue
, 0xC4, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

54 
	`DPCD_REGISTER
–0x00003, 
Ál£
, fÆ£, 
åue
, 0x01, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

55 
	`DPCD_REGISTER
–0x00004, 
Ál£
, fÆ£, 
åue
, 0x01, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

56 
	`DPCD_REGISTER
–0x00006, 
Ál£
, fÆ£, 
åue
, 0x01, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

57 
	`DPCD_REGISTER
–0x00008, 
Ál£
, fÆ£, 
åue
, 0x02, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

58 
	`DPCD_REGISTER
–0x00009, 
Ál£
, fÆ£, 
åue
, 0x02, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

59 
	`DPCD_REGISTER
–0x0000a, 
Ál£
, fÆ£, 
åue
, 0x06, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

60 
	`DPCD_REGISTER
–0x0000b, 
Ál£
, fÆ£, 
åue
, 0x06, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

61 
	`DPCD_REGISTER
–0x0000e, 
Ál£
, fÆ£, fÆ£, 0x04, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

62 
	`DPCD_REGISTER
–0x00023, 
Ál£
, fÆ£, fÆ£, 0x11, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

63 
	`DPCD_REGISTER
–0x00100, 
åue
, 
Ál£
, fÆ£, 0x06, 
LexLökBwSëRódH™dÀr
, 
LexLökBwSëWrôeH™dÀr
 ),

64 
	`DPCD_REGISTER
–0x00101, 
åue
, 
Ál£
, fÆ£, 0x00, 
LexL™eCou¡SëRódH™dÀr
, 
LexL™eCou¡SëWrôeH™dÀr
 ),

65 
	`DPCD_REGISTER
–0x00102, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
LexTrP©ã∫SëWrôeH™dÀr
 ),

66 
	`DPCD_REGISTER
–0x00103, 
åue
, 
Ál£
, fÆ£, 0x00, 
LexTrL™eXSëRódH™dÀr
, 
LexTrL™eXSëWrôeH™dÀr
 ),

67 
	`DPCD_REGISTER
–0x00104, 
åue
, 
Ál£
, fÆ£, 0x00, 
LexTrL™eXSëRódH™dÀr
, 
LexTrL™eXSëWrôeH™dÀr
 ),

68 
	`DPCD_REGISTER
–0x00105, 
åue
, 
Ál£
, fÆ£, 0x00, 
LexTrL™eXSëRódH™dÀr
, 
LexTrL™eXSëWrôeH™dÀr
 ),

69 
	`DPCD_REGISTER
–0x00106, 
åue
, 
Ál£
, fÆ£, 0x00, 
LexTrL™eXSëRódH™dÀr
, 
LexTrL™eXSëWrôeH™dÀr
 ),

70 
	`DPCD_REGISTER
–0x00107, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

71 
	`DPCD_REGISTER
–0x00108, 
åue
, 
Ál£
, fÆ£, 0x01, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

72 
	`DPCD_REGISTER
–0x00109, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

73 
	`DPCD_REGISTER
–0x0010a, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

74 
	`DPCD_REGISTER
–0x0010b, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

75 
	`DPCD_REGISTER
–0x0010c, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

76 
	`DPCD_REGISTER
–0x0010d, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

77 
	`DPCD_REGISTER
–0x0010e, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

78 
	`DPCD_REGISTER
–0x0010f, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

79 
	`DPCD_REGISTER
–0x00110, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

80 
	`DPCD_REGISTER
–0x00111, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

81 
	`DPCD_REGISTER
–0x00200, 
Ál£
, fÆ£, fÆ£, 0x01, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

82 
	`DPCD_REGISTER
–0x00201, 
åue
,Årue, 
Ál£
, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

83 
	`DPCD_REGISTER
–0x00202, 
Ál£
, fÆ£, fÆ£, 0x00, 
LexL™eXYSètusRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

84 
	`DPCD_REGISTER
–0x00203, 
Ál£
, fÆ£, fÆ£, 0x00, 
LexL™eXYSètusRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

85 
	`DPCD_REGISTER
–0x00204, 
Ál£
, fÆ£, fÆ£, 0x00, 
LexL™eAlignRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

86 
	`DPCD_REGISTER
–0x00205, 
Ál£
, fÆ£, fÆ£, 0x00, 
LexSökSètusRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

87 
	`DPCD_REGISTER
–0x00206, 
Ál£
, fÆ£, fÆ£, 0x00, 
LexAdju°L™eXYRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

88 
	`DPCD_REGISTER
–0x00207, 
Ál£
, fÆ£, fÆ£, 0x00, 
LexAdju°L™eXYRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

89 
	`DPCD_REGISTER
–0x00210, 
Ál£
, fÆ£, fÆ£, 0x00, 
LEXSymEºC¡L™eXYRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

90 
	`DPCD_REGISTER
–0x00211, 
Ál£
, fÆ£, fÆ£, 0x00, 
LEXSymEºC¡L™eXYRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

91 
	`DPCD_REGISTER
–0x00212, 
Ál£
, fÆ£, fÆ£, 0x00, 
LEXSymEºC¡L™eXYRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

92 
	`DPCD_REGISTER
–0x00213, 
Ál£
, fÆ£, fÆ£, 0x00, 
LEXSymEºC¡L™eXYRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

93 
	`DPCD_REGISTER
–0x00214, 
Ál£
, fÆ£, fÆ£, 0x00, 
LEXSymEºC¡L™eXYRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

94 
	`DPCD_REGISTER
–0x00215, 
Ál£
, fÆ£, fÆ£, 0x00, 
LEXSymEºC¡L™eXYRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

95 
	`DPCD_REGISTER
–0x00216, 
Ál£
, fÆ£, fÆ£, 0x00, 
LEXSymEºC¡L™eXYRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

96 
	`DPCD_REGISTER
–0x00217, 
Ál£
, fÆ£, fÆ£, 0x00, 
LEXSymEºC¡L™eXYRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

97 
	`DPCD_REGISTER
–0x00300, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

98 
	`DPCD_REGISTER
–0x00301, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

99 
	`DPCD_REGISTER
–0x00302, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

100 
	`DPCD_REGISTER
–0x00303, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

101 
	`DPCD_REGISTER
–0x00304, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

102 
	`DPCD_REGISTER
–0x00305, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

103 
	`DPCD_REGISTER
–0x00306, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

104 
	`DPCD_REGISTER
–0x00307, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

105 
	`DPCD_REGISTER
–0x00308, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

106 
	`DPCD_REGISTER
–0x00309, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

107 
	`DPCD_REGISTER
–0x0030a, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

108 
	`DPCD_REGISTER
–0x0030b, 
åue
, 
Ál£
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

109 
	`DPCD_REGISTER
–0x00600, 
åue
, 
Ál£
, fÆ£, 0x01, 
DPCD_DeÁu…RódH™dÀr
, 
LexPowîSaveWrôeH™dÀr
 ),

110 
	`DPCD_REGISTER
–0x02005, 
Ál£
, 
åue
, fÆ£, 0x00, 
DPCD_DeÁu…RódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

111 
	`DPCD_REGISTER
–0x0200C, 
Ál£
, fÆ£, fÆ£, 0x00, 
LexL™eXYSètusRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

112 
	`DPCD_REGISTER
–0x0200D, 
Ál£
, fÆ£, fÆ£, 0x00, 
LexL™eXYSètusRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

113 
	`DPCD_REGISTER
–0x0200E, 
Ál£
, fÆ£, fÆ£, 0x00, 
LexL™eAlignRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

114 
	`DPCD_REGISTER
–0x0200F, 
Ál£
, fÆ£, fÆ£, 0x00, 
LexSökSètusRódH™dÀr
, 
DPCD_DeÁu…WrôeH™dÀr
 ),

115 
	}
};

130 
DpcdRegi°îSë
 *
	$DPCD_GëDpcdRegi°î
(
uöt32_t
 
dpcdAddr
)

132 
uöt8_t
 
fú°
 = 0;

133 
uöt8_t
 
œ°
 = 
	`ARRAYSIZE
(
dpcdRegi°îs
)-1;

134 
uöt8_t
 
middÀ
;

136 
fú°
 <
œ°
)

138 
middÀ
 = ( 
fú°
 + 
œ°
 ) >> 1;

140 if(
dpcdAddr
 > 
dpcdRegi°îs
[
middÀ
].
ªg
.
addªss
)

142 
fú°
 = 
middÀ
 + 1;

144 if(
dpcdAddr
 < 
dpcdRegi°îs
[
middÀ
].
ªg
.
addªss
)

146 
œ°
 = 
middÀ
 - 1;

150  &(
dpcdRegi°îs
[
middÀ
]);

153  
NULL
;

154 
	}
}

164 
	$DPCD_LﬂdRe˚ivîC≠Cache
()

166 
size_t
 
i
 = 0; 
dpcdRegi°îs
[i].
ªg
.
addªss
 < 
AUX_CAP_READ_SIZE
; i++)

168 i‡(
dpcdRegi°îs
[
i
].
ªg
.
©å
.
‰omRex
)

170 
dpcdRegi°îs
[
i
].
ªg
.
vÆue
 = 
	`LexLoˇlDpcdRód
(dpcdRegi°îs[i].ªg.
addªss
);

172 
	`ûog_DP_COMPONENT_3
(

173 
ILOG_DEBUG
,

174 
PM_LOADED_FORWARDED_DPCD_TABLE_VALUE
,

175 
i
,

176 
dpcdRegi°îs
[
i
].
ªg
.
addªss
,

177 
dpcdRegi°îs
[
i
].
ªg
.
vÆue
);

181 
	`LexUpd©eFœshSëtögs
();

182 
	}
}

192 
	$LexUpd©eFœshSëtögs
()

195 i‡(
dpC⁄figPå
->
œ√Cou¡
 != 0)

197 
dpcdRegi°îs
[
MAX_LANE_COUNT
].
ªg
.
vÆue
 = 
dpC⁄figPå
->
œ√Cou¡
;

198 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
FLASH_LC_UPDATED
, 
dpcdRegi°îs
[
MAX_LANE_COUNT
].
ªg
.
vÆue
);

200 
dpcdRegi°îs
[
MAX_LANE_COUNT
].
ªg
.
vÆue
 |(
TPS3_SUPPORTED
 | 
ENHANCED_FRAMING_ENABLE
);

202 i‡(
dpC⁄figPå
->
b™dwidth
 != 0)

204 
dpcdRegi°îs
[
MAX_LINK_RATE
].
ªg
.
vÆue
 = 
dpC⁄figPå
->
b™dwidth
;

205 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
FLASH_BW_UPDATED
, 
dpcdRegi°îs
[
MAX_LINK_RATE
].
ªg
.
vÆue
);

210 i‡(
dpC⁄figPå
->
ÀxSscAdvîti£Mode
 =
CONFIG_SSC_ENABLE
)

212 
dpcdRegi°îs
[
MAX_DOWNSPREAD_INDEX
].
ªg
.
vÆue
 = dpcdRegi°îs[MAX_DOWNSPREAD_INDEX].ªg.
deÁu…VÆue
 | 
DOWNSPREAD_ENABLE
;

214 i‡(
dpC⁄figPå
->
ÀxSscAdvîti£Mode
 =
CONFIG_SSC_DISABLE
)

216 
dpcdRegi°îs
[
MAX_DOWNSPREAD_INDEX
].
ªg
.
vÆue
 = dpcdRegi°îs[MAX_DOWNSPREAD_INDEX].ªg.
deÁu…VÆue
 & (~
DOWNSPREAD_ENABLE
);

220 
dpcdRegi°îs
[
NORP_AND_DP_POWER_VOLTAGE_CAP
].
ªg
.
vÆue
 &
DP_PWR_VLTG_CAP
;

222 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
AUX_SSC_ADVERTISE_MODE
, 
dpC⁄figPå
->
ÀxSscAdvîti£Mode
);

223 
	}
}

233 
	$DPCD_DpcdRegi°îWrôe
(
uöt32_t
 
addªss
, 
uöt8_t
 
vÆue
, 
boﬁ
 
byHo°
)

235 
DpcdRegi°îSë
 *
íåy
 = 
	`DPCD_GëDpcdRegi°î
(
addªss
);

237 if(
íåy
 && (íåy->
ªg
.
©å
.
ho°WrôabÀ
 || !
byHo°
))

239 
	`DPCD_DeÁu…WrôeH™dÀr
(&
íåy
->
ªg
, 
vÆue
, 
byHo°
);

243 
	`iÁû_DP_COMPONENT_1
(
DPCD_INVALID_ADDRESS
, 
addªss
);

245 
	}
}

254 
uöt8_t
 
	$DPCD_DpcdRegi°îRód
(
uöt32_t
 
addªss
)

256 
DpcdRegi°îSë
 *
íåy
 = 
	`DPCD_GëDpcdRegi°î
(
addªss
);

257 i‡(
íåy
)

259  
íåy
->
ªg
.
vÆue
;

270 
	}
}

279 
	$DPCD_InôülizeVÆues
()

281 
uöt8_t
 
i
=0; i< 
	`ARRAYSIZE
(
dpcdRegi°îs
); i++)

283 if(!
dpcdRegi°îs
[
i
].
ªg
.
©å
.
‰omRex
)

285 
dpcdRegi°îs
[
i
].
ªg
.
vÆue
 = dpcdRegi°îs[i].ªg.
deÁu…VÆue
;

288 
	}
}

298 
	$DPCD_InôülizeRexVÆues
()

300 
	`DPCD_DpcdRegi°îWrôe
(
MAX_LINK_RATE
, 
MAX_LINK_RATE_DEFAULT
, 
Ál£
);

301 
	`DPCD_DpcdRegi°îWrôe
(
MAX_LANE_COUNT
, 
MAX_LANE_COUNT_DEFAULT
, 
Ál£
);

302 
	`DPCD_DpcdRegi°îWrôe
(
NORP_AND_DP_POWER_VOLTAGE_CAP
, 
NORP_AND_DP_POWER_VOLTAGE_CAP_DEFAUT
, 
Ál£
);

303 
	}
}

312 
boﬁ
 
	$RexLökP¨amsCh™ged
(
uöt8_t
 
ªxBw
, uöt8_à
ªxLc
)

314 c⁄° 
uöt8_t
 
ÀxBw
 = 
dpcdRegi°îs
[
MAX_LINK_RATE
].
ªg
.
vÆue
;

315 c⁄° 
uöt8_t
 
ÀxLc
 = 
dpcdRegi°îs
[
MAX_LANE_COUNT
].
ªg
.
vÆue
 & 0x0F;

317 
boﬁ
 
∑ømsCh™ged
 = (
ªxBw
 !
ÀxBw
Ë|| (
ªxLc
 !
ÀxLc
);

319 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LEX_CAP_CHANGED
, 
∑ømsCh™ged
);

320  
∑ømsCh™ged
;

321 
	}
}

334 
DpcdRódSètus
 
	$DPCD_DeÁu…RódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
)

336 *
buf„r
 = 
ªg
->
vÆue
;

337  
READ_ACK
;

338 
	}
}

349 
	$DPCD_DeÁu…WrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
)

351 if(
ªg
->
©å
.
˛óøbÀ
 && 
byHo°
)

353 
ªg
->
vÆue
 &~
d©a
;

357 
ªg
->
vÆue
 = 
d©a
;

359 
	}
}

	@components/dp/src/lex_dpcd_reg.h

11 #i‚de‡
LEX_DPCD_REG_H


12 
	#LEX_DPCD_REG_H


	)

15 
	~<iba£.h
>

19 
	sDpcdAâribuã


21 
uöt8_t
 
	mho°WrôabÀ
 : 1;

22 
uöt8_t
 
	m˛óøbÀ
 : 1;

23 
uöt8_t
 
	m‰omRex
 : 1;

24 
uöt8_t
 
	mª£rved
 : 5;

27 
	sDpcdRegi°î


29 c⁄° 
uöt32_t
 
	maddªss
;

30 c⁄° 
DpcdAâribuã
 
	m©å
;

31 
uöt8_t
 
	mvÆue
;

32 c⁄° 
uöt8_t
 
	mdeÁu…VÆue
;

35 
	$DpcdRódSètus
 (*
	tAUX_RódReque°H™dÀr
)(
	tDpcdRegi°î
 *
	tªg
, 
	tuöt8_t
 *
	tbuf„r
);

36 (*
	tAUX_WrôeReque°H™dÀr
)(
	tDpcdRegi°î
 *
	tªg
, 
	tuöt8_t
 
	td©a
, 
	tboﬁ
 
	tbyHo°
);

38 
	sDpcdRegi°îSë


40 
DpcdRegi°î
 
ªg
;

41 
AUX_RódReque°H™dÀr
 
ªadH™dÀr
;

42 
AUX_WrôeReque°H™dÀr
 
wrôeH™dÀr
;

47 
DpcdRegi°îSë
 *
	$DPCD_GëDpcdRegi°î
(
uöt32_t
 
dpcdAddr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

48 
	$DPCD_LﬂdRe˚ivîC≠Cache
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

49 
	$DPCD_DpcdRegi°îWrôe
(
uöt32_t
 
addªss
, 
uöt8_t
 
vÆue
, 
boﬁ
 
byHo°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

50 
uöt8_t
 
	$DPCD_DpcdRegi°îRód
(
uöt32_t
 
addªss
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

51 
	$DPCD_InôülizeVÆues
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

52 
	$DPCD_InôülizeRexVÆues
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

53 
boﬁ
 
	$RexLökP¨amsCh™ged
(
uöt8_t
 
ªxBw
, uöt8_à
ªxLc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

54 
	$LexUpd©eFœshSëtögs
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

	@components/dp/src/lex_policy_maker.c

25 
	~<iba£.h
>

26 
	~<bb_chù_ªgs.h
>

27 
	~<bb_t›.h
>

28 
	~<öãºu±s.h
>

29 
	~<c⁄figuøti⁄.h
>

30 
	~<mˇ.h
>

31 
	~<˝u_comm.h
>

32 
	~<ˇŒback.h
>

33 
	~<evít.h
>

34 
	~<À⁄_å≠s.h
>

35 
	~<À⁄_timîs.h
>

36 
	~<timög_timîs.h
>

37 
	~<i2cd_dp159.h
>

38 
	~<ã°_dügno°ics.h
>

40 
	~"dp_loc.h
"

41 
	~"dp_log.h
"

42 
	~"dpcd.h
"

43 
	~"Àx_dpcd_ªg.h
"

44 
	~"Àx_pﬁicy_makî.h
"

45 
	~"aux_≠i.h
"

46 
	~<u¨t.h
>

50 
	#LEX_PENDING_TIME
 250

51 
	#LEX_MAUD_WAIT_TIME
 500

52 
	#LEX_NO_VIDEO_WAIT_TIME
 5000

53 
	#LEX_MAX_RETRY_COUNT
 5

54 
	#LEX_LINK_QUALITY_TIME
 10000

55 
	#LEX_BIT_ERROR_RATE_MAX
 32

56 
	#LEX_RESET_ERR_CNT_TIME
 1000

57 
	#LEX_CXFIFO_OVERFLOW_TIME
 500

58 
	#LEX_WAIT_SDP_DROP
 100

59 
	#LEX_WAIT_MSA_TIME
 5000

60 

	)

62 
	eLexPmSèã


64 
	mPM_DISABLE
,

65 
	mPM_IDLE_PENDING
,

66 
	mPM_IDLE
,

67 
	mPM_WAIT_FOR_REX_PARAMS
,

68 
	mPM_POWER_DOWN
,

69 
	mPM_HOST_LINK_TRAINING
,

70 
	mPM_HOST_LINK_TRAINED_WAIT_MSA
,

71 
	mPM_HOST_LINK_TRAINED
,

72 
	mPM_HOST_LINK_TRAINED_WAIT_MCA
,

73 
	mPM_VIDEO_WAITING_FOR_REX
,

74 
	mPM_VIDEO_FLOWING
,

75 
	mPM_NO_VIDEO
,

76 
	mPM_DISABLE_PENDING
,

77 
	mPM_ERROR
,

78 
	mPM_SHUTDOWN
,

79 
	mNUM_STATES_POLICY_MAKER


83 
	sLexPmSèãFœgs


85 
uöt32_t
 
	mphyUp
 : 1;

86 
uöt32_t
 
	mªxA˘ive
 : 1;

87 
uöt32_t
 
	mvideoRxRódy
 : 1;

88 
uöt32_t
 
	misﬁ©eE«bÀd
 : 1;

89 
uöt32_t
 
	mªxWaôHo°Info
 : 1;

90 
uöt32_t
 
	mªxNewM⁄ô‹
 : 1;

91 
uöt32_t
 
	mªxNewLökP¨ams
 : 1;

94 
	sLexPmInôC⁄ãxt


96 
SökP¨amëîs
 
	msökP¨amëîs
;

97 
VideoSètus
 
	mvideoSètus
;

98 
boﬁ
 
	mmccsSètus
;

99 
boﬁ
 
	mªque°NewLökTøöög
;

102 
	sLexPmC⁄ãxt


104 
TIMING_TimîH™dÀrT
 
	m≥ndögTimî
;

105 
TIMING_TimîH™dÀrT
 
	maudioMaudTimî
;

106 
TIMING_TimîH™dÀrT
 
	mlökQuÆôyTimî
;

107 
TIMING_TimîH™dÀrT
 
	mªxPowîDownTimî
;

108 
TIMING_TimîH™dÀrT
 
	mª£tEºCou¡î
;

109 
TIMING_TimîH™dÀrT
 
	mcxFifoOvîÊowTimî
;

110 
TIMING_TimîH™dÀrT
 
	mnoVideoWaôTimî
;

111 
TIMING_TimîH™dÀrT
 
	mwaôMßTimî
;

113 
LökAndSåómP¨amëîs
 
	mlökAndSåómP¨amëîs
;

114 
LexPmSèãFœgs
 
	m°©eFœgs
;

116 
RexPmSètusFœgs
 
	mªxSètus
;

117 
LexPmSètusFœgs
 
	mÀxSètus
;

119 
UtûSmInfo
 
	m°©eMachöeInfo
;

121 
uöt8_t
 
	mlökRëryCou¡
;

122 
uöt8_t
 
	mövÆidMßRëryCou¡
;

124 
boﬁ
 
	mgŸSökP¨amãrs
;

129 
LexPmSèã
 
	$LexPmDißbÀdH™dÀr
(
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

130 
LexPmSèã
 
	$LexPmIdÀPídögH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

131 
LexPmSèã
 
	$LexPmIdÀH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

132 
LexPmSèã
 
	$LexPmWaôF‹RexP¨amsH™dÀr
 (
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

133 
LexPmSèã
 
	$LexPmPowîDownH™dÀr
(
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

134 
LexPmSèã
 
	$LexPmLökTøöögH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

135 
LexPmSèã
 
	$LexPmLökTøöedWaôMßH™dÀr
 ( 
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

136 
LexPmSèã
 
	$LexPmLökTøöedH™dÀr
 ( 
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

137 
LexPmSèã
 
	$LexPmLökTøöedWaôMˇH™dÀr
 ( 
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

138 
LexPmSèã
 
	$LexPmVideoWaôögF‹RexH™dÀr
 ( 
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

139 
LexPmSèã
 
	$LexPmVideoFlowögH™dÀr
 ( 
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

140 
LexPmSèã
 
	$LexPmNoVideoH™dÀr
 ( 
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

141 
LexPmSèã
 
	$LexPmDißbÀPídögH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

142 
LexPmSèã
 
	$LexPmEº‹H™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

143 
LexPmSèã
 
	$LexPmShutdownH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

144 
LexPmSèã
 
	$LexPmComm⁄H™dÀr
(
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

146 
	$LexPmDißbÀE¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

147 
	$LexPmIdÀPídögE¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

148 
	$LexPmVideoFlowögE¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

149 
	$LexPmVideoFlowögExô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

150 
	$LexPmH™dÀM⁄ô‹Info
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

152 
	$LexPmCpuMsgRe˚ivedEvítH™dÀr
(

153 
uöt8_t
 
subTy≥
, c⁄° uöt8_à*
msg
, 
uöt16_t
 
msgLígth
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

154 
	$SídSåómP¨amëîs
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

155 
	$LexPmCÀ¨C⁄ãxt
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

156 
	$LexPmCommLökEvítH™dÀr
(

157 
uöt32_t
 
lökUp
, uöt32_à
u£rC⁄ãxt
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

158 
	$LexPmC⁄figuøti⁄EvítH™dÀr
(

159 
uöt32_t
 
evítInfo
, uöt32_à
u£rC⁄ãxt
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

160 
	$LexPídögTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

161 
	$LexPmUpd©eVideoSètus
(
VideoSètus
 
videoSètus
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

162 
uöt32_t
 
	$LexPmGëVideoSètus
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

163 
	$LexEvítCÆlback
(*
∑øm1
, *
∑øm2
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

164 
	$LexRexA˘iveEvítGíî©e
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

165 
	$LexRxRódyCheck
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

166 
	$LexUpd©eHo°Info
(
boﬁ
 
c⁄√˘ed
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

167 
	$LexUpd©eVideoTxRódyInfo
(
boﬁ
 
ªady
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

168 
	$LexSídLexPmSètus
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

169 
	$LexVÆid©eAndSídMaud
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

170 
	$LexSídLexAudioSètus
(
boﬁ
 
audioSètus
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

171 
boﬁ
 
	$LexPmDpE«bÀd
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

172 
	$LexPmMˇEº‹CÆlback
(
MCA_Ch™√lEº‹
 
mˇEº‹
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

173 
	$LexCheckIfC≠IsVÆid
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

174 
	$LexPmHo°C⁄√˘MsgH™dÀr
(
boﬁ
 
c⁄√˘ed
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

175 
	$LexPmMˇEvítH™dÀr
(
MCA_Ch™√lSètus
 
ch™√lSètus
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

176 
boﬁ
 
	$LexLökAndSåómP¨amCh™ged
(

177 c⁄° 
LökAndSåómP¨amëîs
* 
√wP¨am
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

178 
	$LexPmUpd©eSåómP¨am
(

179 c⁄° 
LökAndSåómP¨amëîs
* 
√wP¨am
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

180 
	$LexPmNoVideoH™dÀrE¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

181 
	$LexCheckLökQuÆôy
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

182 
LexPmSèã
 
	$LexLökTøöögFaûH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

183 
	$LexAudioMuãTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

184 
	$LexSëRexPowîDownTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

185 
	$LexSídRexSëM⁄ô‹SÀï
(
boﬁ
 
m⁄ô‹SÀï
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

186 
	$LexNoVideoWaôTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

187 
LexPmSèã
 
	$LexWr⁄gMßNìdRëøöH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

188 
	$LexMßWaôTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

193 c⁄° 
EvítH™dÀr
 
pmSèãTabÀ
[] =

195 [
PM_DISABLE
] = 
LexPmDißbÀdH™dÀr
,

196 [
PM_IDLE_PENDING
] = 
LexPmIdÀPídögH™dÀr
,

197 [
PM_IDLE
] = 
LexPmIdÀH™dÀr
,

198 [
PM_WAIT_FOR_REX_PARAMS
] = 
LexPmWaôF‹RexP¨amsH™dÀr
,

199 [
PM_POWER_DOWN
] = 
LexPmPowîDownH™dÀr
,

200 [
PM_HOST_LINK_TRAINING
] = 
LexPmLökTøöögH™dÀr
,

201 [
PM_HOST_LINK_TRAINED_WAIT_MSA
] = 
LexPmLökTøöedWaôMßH™dÀr
,

202 [
PM_HOST_LINK_TRAINED
] = 
LexPmLökTøöedH™dÀr
,

203 [
PM_HOST_LINK_TRAINED_WAIT_MCA
] = 
LexPmLökTøöedWaôMˇH™dÀr
,

204 [
PM_VIDEO_WAITING_FOR_REX
] = 
LexPmVideoWaôögF‹RexH™dÀr
,

205 [
PM_VIDEO_FLOWING
] = 
LexPmVideoFlowögH™dÀr
,

206 [
PM_NO_VIDEO
] = 
LexPmNoVideoH™dÀr
,

207 [
PM_DISABLE_PENDING
] = 
LexPmDißbÀPídögH™dÀr
,

208 [
PM_ERROR
] = 
LexPmEº‹H™dÀr
,

209 [
PM_SHUTDOWN
] = 
LexPmShutdownH™dÀr


210 
	}
};

212 
LexPmC⁄ãxt
 
	gÀxPmC⁄ãxt
 =

214 .
°©eMachöeInfo
.
°©eH™dÀrs
 = 
pmSèãTabÀ
,

215 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gª£rved
 = 0,

216 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	glogLevñ
 = (
uöt8_t
)
ILOG_MAJOR_EVENT
,

217 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gûogComp⁄ít
 = 
DP_COMPONENT
,

218 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gûogId
 = 
PM_STATE_TRANSITION


221 
LexPmInôC⁄ãxt
 
	gÀxPmInôC⁄ãxt
;

222 
MCCSCache
 
	gmccsCache
;

236 
	$AUX_LexPﬁicyMakîInô
()

238 
	`EVENT_Regi°î
(
ET_VIDEO_STATUS_CHANGE
, 
LexPmGëVideoSètus
);

239 
	`EVENT_Subs¸ibe
(
ET_COMLINK_STATUS_CHANGE
, 
LexPmCommLökEvítH™dÀr
, 0);

240 
	`EVENT_Subs¸ibe
(
ET_CONFIGURATION_CHANGE
, 
LexPmC⁄figuøti⁄EvítH™dÀr
, 0);

241 
	`CPU_COMM_Regi°îH™dÀr
(
CPU_COMM_TYPE_AUX
, 
LexPmCpuMsgRe˚ivedEvítH™dÀr
);

243 
	`MCA_Ch™√lInô
(
MCA_CHANNEL_NUMBER_DP
, 
LexPmMˇEvítH™dÀr
, 
LexPmMˇEº‹CÆlback
);

245 
	`AUX_LexTønß˘i⁄H™dÀrInô
();

247 
ÀxPmC⁄ãxt
.
≥ndögTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

248 
LexPídögTimîH™dÀr
, 
Ál£
, 
LEX_PENDING_TIME
);

250 
ÀxPmC⁄ãxt
.
audioMaudTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

251 
LexAudioMuãTimîH™dÀr
, 
Ál£
, 
LEX_MAUD_WAIT_TIME
);

253 
ÀxPmC⁄ãxt
.
lökQuÆôyTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

254 
LexCheckLökQuÆôy
, 
åue
, 
LEX_LINK_QUALITY_TIME
);

256 
ÀxPmC⁄ãxt
.
ªxPowîDownTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

257 
LexSëRexPowîDownTimîH™dÀr
, 
Ál£
, (
dpC⁄figPå
->
powîDownTime
 * 5000));

259 
ÀxPmC⁄ãxt
.
ª£tEºCou¡î
 = 
	`TIMING_TimîRegi°îH™dÀr
(

260 
DP_LEX_CÀ¨EºCou¡î
, 
Ál£
, 
LEX_RESET_ERR_CNT_TIME
);

262 
ÀxPmC⁄ãxt
.
cxFifoOvîÊowTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

263 
DP_LexCheckCxFifoOvîÊow
, 
åue
, 
LEX_CXFIFO_OVERFLOW_TIME
);

265 
ÀxPmC⁄ãxt
.
noVideoWaôTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

266 
LexNoVideoWaôTimîH™dÀr
, 
Ál£
, 
LEX_NO_VIDEO_WAIT_TIME
);

268 
ÀxPmC⁄ãxt
.
waôMßTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

269 
LexMßWaôTimîH™dÀr
, 
åue
, 
LEX_WAIT_MSA_TIME
);

271 
ÀxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©eE«bÀd
 = 
dpC⁄figPå
->
íabÀIsﬁ©e
;

273 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
,

274 
ÀxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©eE«bÀd
 ? 
AUX_ISOLATED_LEX_ENABLED
 : 
AUX_ISOLATED_LEX_DISABLED
);

277 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_EVENT_ENTER
);

280 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_ENABLE
);

281 
	}
}

292 
	$AUX_LexSëIsﬁ©edSèã
()

295 
ÀxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©eE«bÀd
 = 
åue
;

296 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
,

297 
ÀxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©eE«bÀd
 ? 
AUX_ISOLATED_LEX_ENABLED
 : 
AUX_ISOLATED_LEX_DISABLED
);

299 
	}
}

309 
	$LexPmSèãSídEvítWôhD©a
(
LexPmEvít
 
evít
, 
LexPmEvítD©a
 *
evítD©a
)

312 
uöt32_t
 
evítx
 = (
uöt8_t
)
evít
;

314 
	`CALLBACK_Run
(
LexEvítCÆlback
, (*)
evítx
, (*)
evítD©a
);

315 
	}
}

325 
	$LexPmSèãSídEvítWôhNoD©a
(
LexPmEvít
 
evít
)

327 
	`LexPmSèãSídEvítWôhD©a
(
evít
, 
NULL
);

328 
	}
}

337 
	$AUX_LexPmLogSèã
()

339 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
PM_LOG_STATE
, 
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.
cuºítSèã
);

340 
	}
}

350 
uöt8_t
 
	$LexLoˇlDpcdRód
(
uöt32_t
 
dpcdAddr
)

352 
	`üs£π_DP_COMPONENT_1
(
dpcdAddr
 < 
AUX_CAP_READ_SIZE
, 
AUX_CAP_WRONG_ADDR
, dpcdAddr);

353  
ÀxPmInôC⁄ãxt
.
sökP¨amëîs
.
ª˚ivîC≠Cache
[
dpcdAddr
];

354 
	}
}

363 
	$LexI§H™dÀr
(
uöt32_t
 
i§Ty≥
)

365 
i§Ty≥
)

367 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_MASK
:

368 if(
	`AUX_GëHo°C⁄√˘edInfo
())

370 
	`ILOG_i°©us
(
ISTATUS_DP_LEX_HOST_CONNECTED
, 0);

374 
	`ILOG_i°©us
(
ISTATUS_DP_LEX_HOST_REMOVED
, 0);

376 
	`LexPmHo°C⁄√˘MsgH™dÀr
(
	`AUX_GëHo°C⁄√˘edInfo
());

382 
	}
}

392 
	$DP_Lex_SèπRexPowîDownTimî
()

395 i‡(
dpC⁄figPå
->
powîDownTime
)

397 
boﬁ
 
ho°Disc⁄√˘
 = ((!
ÀxPmC⁄ãxt
.
ÀxSètus
.
ho°C⁄√˘ed
) ||

398 (
	`DPCD_DpcdRegi°îRód
(
SET_POWER_AND_SET_DP_PWR_VOLTAGE
Ë=
LEX_POWER_STATE_POWER_DOWN
));

400 i‡(
ho°Disc⁄√˘
)

402 
	`TIMING_TimîSèπ
(
ÀxPmC⁄ãxt
.
ªxPowîDownTimî
);

406 
	`TIMING_TimîSt›
(
ÀxPmC⁄ãxt
.
ªxPowîDownTimî
);

409 
	}
}

419 
	$LexSídCpuMesßgeToRex
(c⁄° 
AUX_Down°ªamCpuMesßge
 *
msg
)

421 
	`ûog_DP_COMPONENT_1
(
ILOG_MINOR_EVENT
, 
AUX_SENT_CPU_MESSAGE
, 
msg
->
ty≥
);

422 
	`CPU_COMM_£ndMesßge
(
CPU_COMM_TYPE_AUX
, 
msg
->
ty≥
, (c⁄° 
uöt8_t
*)(msg->
msgBuf„r
), msg->
msgLígth
);

423 
	}
}

433 
	$AUX_LexCÀ¨MßRëryCou¡î
()

435 
ÀxPmC⁄ãxt
.
övÆidMßRëryCou¡
 = 0;

436 
	}
}

446 
	$DP_LEX_IcmdPrötAŒSètusFœg
()

448 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_PRINT_STATUS
);

449 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_PHYUP
, 
ÀxPmC⁄ãxt
.
°©eFœgs
.
phyUp
);

450 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_VIDEORXRDY
, 
ÀxPmC⁄ãxt
.
°©eFœgs
.
videoRxRódy
);

451 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_ISOLATE
, 
ÀxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©eE«bÀd
);

452 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_REXWAITHOST
, 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxWaôHo°Info
);

453 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_REXNEWMONI
, 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewM⁄ô‹
);

454 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_REXNEWLNKPARA
, 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewLökP¨ams
);

455 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_REXACTV
, 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxA˘ive
);

456 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_REXDPEN
, 
ÀxPmC⁄ãxt
.
ªxSètus
.
ªxDpE«bÀd
);

457 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MONCONN
, 
ÀxPmC⁄ãxt
.
ªxSètus
.
m⁄ô‹C⁄√˘ed
);

458 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_VIDEORXRDY
, 
ÀxPmC⁄ãxt
.
ªxSètus
.
videoRxRódy
);

459 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LEXDPEN
, 
ÀxPmC⁄ãxt
.
ÀxSètus
.
ÀxDpE«bÀd
);

460 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_HOSTCONN
, 
ÀxPmC⁄ãxt
.
ÀxSètus
.
ho°C⁄√˘ed
);

461 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LEXRXREADY
, 
ÀxPmC⁄ãxt
.
ÀxSètus
.
ÀxVideoTxRódy
);

462 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_GOTSINKPARAM
, 
ÀxPmC⁄ãxt
.
gŸSökP¨amãrs
);

463 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_CURNTSTATE
, 
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.
cuºítSèã
);

464 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_PREVSTATE
, 
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.
¥evSèã
);

465 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_EVENT
, 
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.
evít
);

466 
	}
}

477 
	$LexEvítCÆlback
(*
∑øm1
, *
∑øm2
)

479 
	`UTILSM_Po°Evít
(&
ÀxPmC⁄ãxt
.
°©eMachöeInfo
,

480 (
uöt32_t
)
∑øm1
,

481 (c⁄° 
LexPmEvítD©a
 *Ë
∑øm2
);

482 
	}
}

494 
LexPmSèã
 
	$LexPmDißbÀdH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

496 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

498 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

500 
	`LexPmDißbÀE¡î
();

502 i‡(
evít
 =
LEX_AUX_ENABLE
)

504 if(
	`LexPmDpE«bÀd
())

506 
√xtSèã
 = 
PM_IDLE_PENDING
;

510  
√xtSèã
;

511 
	}
}

522 
LexPmSèã
 
	$LexPmIdÀPídögH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

524 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

526 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

528 
	`LexPmIdÀPídögE¡î
();

530 if(!
	`I2CD_dp159InôSuc˚ss
())

532 
√xtSèã
 = 
PM_ERROR
;

535 i‡(
evít
 =
LEX_AUX_PENDING_COMPLETE
)

537 
√xtSèã
 = 
PM_IDLE
;

539 i‡(
evít
 =
LEX_AUX_DISABLE
)

541 
√xtSèã
 = 
PM_DISABLE_PENDING
;

545 
√xtSèã
 = 
	`LexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

548  
√xtSèã
;

549 
	}
}

561 
LexPmSèã
 
	$LexPmIdÀH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

563 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

565 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

568 
	`LexPmHo°C⁄√˘MsgH™dÀr
(
	`AUX_GëHo°C⁄√˘edInfo
());

569 
	`LexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

571 i‡(
evít
 =
LEX_AUX_DP_HOST_CONNECT
)

573 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_NO_HPD
);

574 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©eE«bÀd
)

576 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

577 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

579 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxA˘ive
)

581 
mccsReque°C⁄ãxt
.
mccsSètus
 = 
Ál£
;

582 
	`mem£t
(&
mccsCache
, 0, (
MCCSCache
));

583 
√xtSèã
 = 
PM_WAIT_FOR_REX_PARAMS
;

586 i‡(
evít
 =
LEX_AUX_REX_ACTIVE
)

588 i‡(
ÀxPmC⁄ãxt
.
ÀxSètus
.
ho°C⁄√˘ed
)

590 
√xtSèã
 = 
PM_WAIT_FOR_REX_PARAMS
;

593 i‡(
evít
 =
LEX_AUX_DISABLE
)

595 
√xtSèã
 = 
PM_DISABLE_PENDING
;

597 i‡(
evít
 =
LEX_AUX_START_DIAGNOSTIC
)

599 
√xtSèã
 = 
PM_IDLE_PENDING
;

602  
√xtSèã
;

603 
	}
}

615 
LexPmSèã
 
	$LexPmWaôF‹RexP¨amsH™dÀr
 (
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

617 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

619 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

621 
	`LexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

622 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_LEX_REQUEST_MONITOR_INFO
);

624 i‡(
evít
 =
LEX_AUX_RX_MONITOR_INFO
)

626 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

627 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

629 i‡(
evít
 =
LEX_AUX_REX_OFFLINE
)

631 
√xtSèã
 = 
PM_IDLE_PENDING
;

635 
√xtSèã
 = 
	`LexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

638  
√xtSèã
;

639 
	}
}

652 
LexPmSèã
 
	$LexPmPowîDownH™dÀr
(
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

654 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

656 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

658 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_POWER_DOWN
);

659 
	`LexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

661 i‡(
evít
 =
LEX_AUX_PWD_UP
)

663 
	`DP_Lex_SèπRexPowîDownTimî
();

664 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_POWER_UP
);

666 i‡(
evít
 =
LEX_AUX_POWER_UP_TRAINED
)

668 
√xtSèã
 = 
PM_HOST_LINK_TRAINED_WAIT_MSA
;

670 i‡(
evít
 =
LEX_AUX_HOST_REQUEST_TRAINING
)

672 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

674 i‡(
evít
 =
LEX_AUX_RX_MONITOR_INFO
)

676 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewM⁄ô‹
 ||ÜexPmC⁄ãxt.°©eFœgs.
ªxNewLökP¨ams
)

678 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

679 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

684 
√xtSèã
 = 
	`LexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

687  
√xtSèã
;

688 
	}
}

700 
LexPmSèã
 
	$LexPmLökTøöögH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

702 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

704 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

706 if(
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
)

708 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
Ál£
;

709 
	`mem£t
(&
ÀxPmC⁄ãxt
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
,

710 0, (
DP_SåómP¨amëîs
));

712 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_DISABLE
);

713 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_ENABLE
);

715 
	`LexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

717 if(
evít
 =
LEX_AUX_HOST_LINK_TRAINING_DONE
)

719 
ÀxPmC⁄ãxt
.
lökRëryCou¡
 = 0;

720 
√xtSèã
 = 
PM_HOST_LINK_TRAINED_WAIT_MSA
;

722 i‡(
evít
 =
LEX_AUX_HOST_LINK_TRAINING_FAIL
)

725 i‡(
	`TEST_GëDügSèã
())

727 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_LT_FAIL
);

729 
√xtSèã
 = 
	`LexLökTøöögFaûH™dÀr
();

731 i‡(
evít
 =
LEX_AUX_RX_MONITOR_INFO
)

733 if(
	`RexEdidCh™ged
(&
ÀxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
[0]Ë|| 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewLökP¨ams
)

735 
	`LexPmH™dÀM⁄ô‹Info
();

736 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

737 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_EVENT_ENTER
);

742 
√xtSèã
 = 
	`LexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

745  
√xtSèã
;

746 
	}
}

756 
LexPmSèã
 
	$LexPmLökTøöedWaôMßH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

758 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

760 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

762 
	`LexPmUpd©eVideoSètus
(
VIDEO_TRAINING_UP
);

763 
	`DP_LEX_ª£tSåómExåa˘‹
();

764 
	`TIMING_TimîSèπ
(
ÀxPmC⁄ãxt
.
waôMßTimî
);

765 i‡(!
dpC⁄figPå
->
noSídAudio
)

767 
	`DP_LexE«bÀSDP
();

770 i‡(
evít
 =
LEX_AUX_EVENT_EXIT
)

772 
	`TIMING_TimîSt›
(
ÀxPmC⁄ãxt
.
waôMßTimî
);

774 i‡(
evít
 =
LEX_AUX_HOST_REQUEST_TRAINING
)

776 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

778 i‡(
evít
 =
LEX_AUX_MSA_READY
)

780 
√xtSèã
 = 
PM_HOST_LINK_TRAINED
;

781 
LexPmEvítD©a
* 
evítD©a
 = (LexPmEvítD©a*)
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.eventData;

782 
	`LexLökAndSåómP¨amCh™ged
(
evítD©a
->
lökAndSåómP¨amëîs
);

785 i‡(
evít
 =
LEX_AUX_WRONG_MSA_NEED_RETRAIN
)

787 
√xtSèã
 = 
	`LexWr⁄gMßNìdRëøöH™dÀr
();

789 i‡(
evít
 =
LEX_AUX_RX_MONITOR_INFO
)

791 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewM⁄ô‹
 ||ÜexPmC⁄ãxt.°©eFœgs.
ªxNewLökP¨ams
)

793 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

794 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

799 
√xtSèã
 = 
	`LexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

802  (
uöt8_t
)
√xtSèã
;

803 
	}
}

814 
LexPmSèã
 
	$LexPmLökTøöedH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

816 
LexPmSèã
 
√xtSèã
 = (LexPmSèã)
cuºítSèã
;

818 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

820 i‡(
	`TEST_GëDügSèã
(Ë&& (
	`TEST_GëEº‹Sèã
(Ë<
DIAG_NO_HPD
))

822 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_NO_ERROR
);

823 
	`TEST_PrötTe°V¨übÀs
();

825 i‡(
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxA˘ive
 &&ÜexPmC⁄ãxt.°©eFœgs.
ªxWaôHo°Info
)

827 
	`SídSåómP¨amëîs
();

829 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©eE«bÀd
)

831 
√xtSèã
 = 
PM_VIDEO_FLOWING
;

834 i‡(
evít
 =
LEX_AUX_REX_ACTIVE
)

836 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxWaôHo°Info
)

838 
	`SídSåómP¨amëîs
();

841 i‡(
evít
 =
LEX_AUX_REX_WAIT_HOST_INFO
)

843 
	`SídSåómP¨amëîs
();

845 if(
evít
 =
LEX_AUX_REX_READY_FOR_MCA
)

847 
√xtSèã
 = 
PM_HOST_LINK_TRAINED_WAIT_MCA
;

849 if(
evít
 =
LEX_AUX_HOST_REQUEST_TRAINING
)

851 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

853 i‡(
evít
 =
LEX_AUX_RX_MONITOR_INFO
)

855 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewM⁄ô‹
 ||ÜexPmC⁄ãxt.°©eFœgs.
ªxNewLökP¨ams
)

857 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

858 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

862 
	`SídSåómP¨amëîs
();

867 
√xtSèã
 = 
	`LexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

870  
√xtSèã
;

871 
	}
}

882 
LexPmSèã
 
	$LexPmLökTøöedWaôMˇH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

884 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

886 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

888 
ÀxPmC⁄ãxt
.
°©eFœgs
.
videoRxRódy
 = 
Ál£
;

889 
ÀxPmC⁄ãxt
.
ªxSètus
.
videoRxRódy
 = 
Ál£
;

891 
	`MCA_Ch™√lLökUp
(
MCA_CHANNEL_NUMBER_DP
);

892 
	`LexPmUpd©eVideoSètus
(
VIDEO_TRAINING_UP
);

894 i‡(
evít
 =
LEX_AUX_EVENT_EXIT
)

896 if(
cuºítSèã
 !
PM_VIDEO_WAITING_FOR_REX
)

898 
	`MCA_Ch™√lLökDn
(
MCA_CHANNEL_NUMBER_DP
);

901 i‡(
evít
 =
LEX_AUX_MCA_UP
)

903 
√xtSèã
 = 
PM_VIDEO_WAITING_FOR_REX
;

906 i‡(
evít
 =
LEX_AUX_REX_OFFLINE
)

908 
√xtSèã
 = 
PM_HOST_LINK_TRAINED
;

910 i‡(
evít
 =
LEX_AUX_MCA_DN
)

912 
	`MCA_Ch™√lLökUp
(
MCA_CHANNEL_NUMBER_DP
);

914 i‡(
evít
 =
LEX_AUX_HOST_REQUEST_TRAINING
)

916 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

918 i‡(
evít
 =
LEX_AUX_MSA_READY
)

920 
LexPmEvítD©a
* 
evítD©a
 = (LexPmEvítD©a*)
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.eventData;

921 if(
	`LexLökAndSåómP¨amCh™ged
(
evítD©a
->
lökAndSåómP¨amëîs
))

923 
√xtSèã
 = 
PM_HOST_LINK_TRAINED
;

924 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxWaôHo°Info
 = 
åue
;

927 i‡(
evít
 =
LEX_AUX_WRONG_MSA_NEED_RETRAIN
)

929 
√xtSèã
 = 
	`LexWr⁄gMßNìdRëøöH™dÀr
();

933 
√xtSèã
 = 
	`LexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

936  (
uöt8_t
)
√xtSèã
;

937 
	}
}

948 
LexPmSèã
 
	$LexPmVideoWaôögF‹RexH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

950 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

952 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

954 if(
ÀxPmC⁄ãxt
.
ªxSètus
.
videoRxRódy
)

956 
√xtSèã
 = 
PM_VIDEO_FLOWING
;

958 
	`LexPmUpd©eVideoSètus
(
VIDEO_TRAINING_UP
);

960 i‡(
evít
 =
LEX_AUX_EVENT_EXIT
)

962 if(
cuºítSèã
 !
PM_VIDEO_FLOWING
)

964 
	`MCA_Ch™√lLökDn
(
MCA_CHANNEL_NUMBER_DP
);

967 i‡((
evít
 =
LEX_AUX_REX_OFFLINE
Ë|| (evíà=
LEX_AUX_MCA_DN
))

969 
√xtSèã
 = 
PM_HOST_LINK_TRAINED_WAIT_MSA
;

971 i‡(
evít
 =
LEX_AUX_HOST_REQUEST_TRAINING
)

973 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

975 i‡(
evít
 =
LEX_AUX_MSA_READY
)

977 
LexPmEvítD©a
* 
evítD©a
 = (LexPmEvítD©a*)
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.eventData;

978 if(
	`LexLökAndSåómP¨amCh™ged
(
evítD©a
->
lökAndSåómP¨amëîs
))

980 
√xtSèã
 = 
PM_HOST_LINK_TRAINED
;

981 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxWaôHo°Info
 = 
åue
;

984 i‡(
evít
 =
LEX_AUX_WRONG_MSA_NEED_RETRAIN
)

986 
√xtSèã
 = 
	`LexWr⁄gMßNìdRëøöH™dÀr
();

988 i‡(
evít
 =
LEX_AUX_VIDEO_RX_READY
)

990 
√xtSèã
 = 
PM_VIDEO_FLOWING
;

994 
√xtSèã
 = 
	`LexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

997  
√xtSèã
;

998 
	}
}

1009 
LexPmSèã
 
	$LexPmVideoFlowögH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

1011 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

1013 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

1015 
	`LexPmVideoFlowögE¡î
();

1017 i‡(
evít
 =
LEX_AUX_EVENT_EXIT
)

1019 
	`LexPmVideoFlowögExô
();

1021 i‡((
evít
 =
LEX_AUX_REX_OFFLINE
Ë|| (evíà=
LEX_AUX_MCA_DN
))

1023 
√xtSèã
 = 
PM_HOST_LINK_TRAINED_WAIT_MSA
;

1025 i‡(
evít
 =
LEX_AUX_HOST_REQUEST_TRAINING
)

1027 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

1029 i‡(
evít
 =
LEX_AUX_MSA_READY
)

1031 
LexPmEvítD©a
* 
evítD©a
 = (LexPmEvítD©a*)
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.eventData;

1032 if(
	`LexLökAndSåómP¨amCh™ged
(
evítD©a
->
lökAndSåómP¨amëîs
))

1035 
√xtSèã
 = 
PM_HOST_LINK_TRAINED_WAIT_MSA
;

1036 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxWaôHo°Info
 = 
åue
;

1039 i‡(
evít
 =
LEX_AUX_WRONG_MSA_NEED_RETRAIN
)

1041 
√xtSèã
 = 
	`LexWr⁄gMßNìdRëøöH™dÀr
();

1043 i‡(
evít
 =
LEX_AUX_VIDEO_RX_NOT_READY
)

1045 
ÀxPmC⁄ãxt
.
°©eFœgs
.
videoRxRódy
 = 
Ál£
;

1046 
ÀxPmC⁄ãxt
.
ªxSètus
.
videoRxRódy
 = 
Ál£
;

1047 
√xtSèã
 = 
PM_HOST_LINK_TRAINED_WAIT_MSA
;

1051 i‡(
evít
 =
LEX_AUX_NO_VIDEO_SIGNAL
 ||Évíà=
LEX_AUX_STREAM_ERROR_DETECTED
)

1053 if(!
ÀxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©eE«bÀd
)

1055 
√xtSèã
 = 
PM_NO_VIDEO
;

1058 i‡(
evít
 =
LEX_AUX_AUDIO_MUTE_STATUS_CHANGE
)

1060 
	`LexVÆid©eAndSídMaud
();

1062 i‡(
evít
 =
LEX_AUX_RETRAIN_REQUEST
)

1064 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

1066 i‡(
evít
 =
LEX_AUX_PWD_UP
)

1068 
	`ûog_DP_COMPONENT_2
(
ILOG_MINOR_ERROR
, 
PM_UNHANDLED_EVENT
, 
evít
, 
cuºítSèã
);

1072 
√xtSèã
 = 
	`LexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1075  (
uöt8_t
)
√xtSèã
;

1076 
	}
}

1087 
LexPmSèã
 
	$LexPmNoVideoH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

1089 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

1091 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

1093 
	`LexPmNoVideoH™dÀrE¡î
();

1095 i‡(
evít
 =
LEX_AUX_EVENT_EXIT
)

1097 
	`TIMING_TimîSt›
(
ÀxPmC⁄ãxt
.
noVideoWaôTimî
);

1099 i‡(
evít
 =
LEX_AUX_RETRAIN_REQUEST
)

1101 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

1102 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

1104 i‡(
evít
 =
LEX_AUX_PENDING_COMPLETE
)

1106 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

1107 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

1109 i‡(
evít
 =
LEX_AUX_HOST_REQUEST_TRAINING
)

1111 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

1113 i‡(
evít
 =
LEX_AUX_RX_MONITOR_INFO
)

1115 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewM⁄ô‹
 ||ÜexPmC⁄ãxt.°©eFœgs.
ªxNewLökP¨ams
)

1117 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

1118 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

1121 i‡(
evít
 =
LEX_AUX_MSA_READY
)

1123 
LexPmEvítD©a
* 
evítD©a
 = (LexPmEvítD©a*)
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.eventData;

1124 
	`LexPmUpd©eSåómP¨am
(
evítD©a
->
lökAndSåómP¨amëîs
);

1125 
√xtSèã
 = 
PM_HOST_LINK_TRAINED
;

1126 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxWaôHo°Info
 = 
åue
;

1128 i‡(
evít
 =
LEX_AUX_WRONG_MSA_NEED_RETRAIN
)

1130 
√xtSèã
 = 
	`LexWr⁄gMßNìdRëøöH™dÀr
();

1134 
√xtSèã
 = 
	`LexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1137  
√xtSèã
;

1138 
	}
}

1149 
LexPmSèã
 
	$LexPmDißbÀPídögH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

1151 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

1153 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

1155 
	`TIMING_TimîSèπ
(
ÀxPmC⁄ãxt
.
≥ndögTimî
);

1156 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_DISABLE
);

1157 
	`LexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

1159 i‡(
evít
 =
LEX_AUX_ENABLE
)

1161 if(
	`LexPmDpE«bÀd
())

1163 
√xtSèã
 = 
PM_IDLE_PENDING
;

1166 i‡(
evít
 =
LEX_AUX_PENDING_COMPLETE
)

1168 
√xtSèã
 = 
PM_DISABLE
;

1171  
√xtSèã
;

1172 
	}
}

1183 
LexPmSèã
 
	$LexPmEº‹H™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

1185 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

1187 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

1189 
	`LexPmUpd©eVideoSètus
(
VIDEO_ERROR
);

1190 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_DISABLE
);

1192 i‡(
evít
 =
LEX_AUX_DP_HOST_DISCONNECT
)

1195 
ÀxPmC⁄ãxt
.
lökRëryCou¡
 = 0;

1196 
	`AUX_LexCÀ¨MßRëryCou¡î
();

1197 
√xtSèã
 = 
PM_IDLE_PENDING
;

1199 i‡(
evít
 =
LEX_AUX_DISABLE
)

1201 
√xtSèã
 = 
PM_DISABLE_PENDING
;

1204  
√xtSèã
;

1205 
	}
}

1216 
LexPmSèã
 
	$LexPmShutdownH™dÀr
–
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

1218 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

1220 i‡(
evít
 =
LEX_AUX_EVENT_ENTER
)

1222 
	`DP_LexDißbÀAŒIrq
();

1223 
	`LexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

1225 i‡(
evít
 =
LEX_AUX_DISABLE
)

1227 
√xtSèã
 = 
PM_DISABLE_PENDING
;

1229 i‡(
evít
 =
LEX_AUX_DP_HOST_DISCONNECT
)

1232 
ÀxPmC⁄ãxt
.
lökRëryCou¡
 = 0;

1233 
	`AUX_LexCÀ¨MßRëryCou¡î
();

1234 
√xtSèã
 = 
PM_IDLE_PENDING
;

1236 i‡(
evít
 =
LEX_AUX_HOST_REQUEST_TRAINING
)

1238 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

1240 i‡(
evít
 =
LEX_AUX_RX_MONITOR_INFO
)

1242 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewM⁄ô‹
 ||ÜexPmC⁄ãxt.°©eFœgs.
ªxNewLökP¨ams
)

1244 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

1245 
√xtSèã
 = 
PM_HOST_LINK_TRAINING
;

1250 
	`ûog_DP_COMPONENT_2
(
ILOG_MINOR_ERROR
, 
PM_INVALID_EVENT
, 
evít
, 
cuºítSèã
);

1253  
√xtSèã
;

1254 
	}
}

1264 
LexPmSèã
 
	$LexPmComm⁄H™dÀr
(
LexPmEvít
 
evít
, 
LexPmSèã
 
cuºítSèã
)

1266 
LexPmSèã
 
√xtSèã
 = 
cuºítSèã
;

1268 
evít
)

1270 
LEX_AUX_EVENT_ENTER
:

1271 
LEX_AUX_EVENT_EXIT
:

1274 
LEX_AUX_DISABLE
:

1275 
√xtSèã
 = 
PM_DISABLE_PENDING
;

1278 
LEX_AUX_PWR_DOWN
:

1279 i‡(
cuºítSèã
 >
PM_HOST_LINK_TRAINED
)

1281 
	`DP_Lex_SèπRexPowîDownTimî
();

1282 
√xtSèã
 = 
PM_POWER_DOWN
;

1286 
LEX_AUX_ERROR_RECOVERY_FAILED_EVENT
:

1287 
√xtSèã
 = 
PM_ERROR
;

1290 
LEX_AUX_DP_HOST_DISCONNECT
:

1291 
ÀxPmC⁄ãxt
.
lökRëryCou¡
 = 0;

1292 
	`AUX_LexCÀ¨MßRëryCou¡î
();

1293 
√xtSèã
 = 
PM_IDLE_PENDING
;

1296 
LEX_AUX_START_DIAGNOSTIC
:

1297 
√xtSèã
 = 
PM_IDLE_PENDING
;

1300 
LEX_AUX_FRQ_OUT_OF_RANGE_DETECTED
:

1301 
√xtSèã
 = 
PM_SHUTDOWN
;

1304 
LEX_AUX_ENABLE
:

1305 
LEX_AUX_REX_ACTIVE
:

1306 
LEX_AUX_MCA_UP
:

1307 
LEX_AUX_MCA_DN
:

1308 
LEX_AUX_REX_OFFLINE
:

1309 
LEX_AUX_DP_HOST_CONNECT
:

1310 
LEX_AUX_RX_MONITOR_INFO
:

1311 
LEX_AUX_HOST_REQUEST_TRAINING
:

1312 
LEX_AUX_MSA_READY
:

1313 
LEX_AUX_WRONG_MSA_NEED_RETRAIN
:

1314 
LEX_AUX_HOST_LINK_TRAINING_FAIL
:

1315 
LEX_AUX_PENDING_COMPLETE
:

1316 
LEX_AUX_VIDEO_RX_READY
:

1317 
LEX_AUX_VIDEO_RX_NOT_READY
:

1318 
LEX_AUX_NO_VIDEO_SIGNAL
:

1319 
LEX_AUX_PWD_UP
:

1320 
LEX_AUX_POWER_UP_TRAINED
:

1321 
LEX_AUX_STREAM_ERROR_DETECTED
:

1322 
LEX_AUX_REX_READY_FOR_MCA
:

1323 
LEX_AUX_AUDIO_MUTE_STATUS_CHANGE
:

1324 
LEX_AUX_RETRAIN_REQUEST
:

1325 
LEX_AUX_REX_WAIT_HOST_INFO
:

1326 
LEX_AUX_HOST_LINK_TRAINING_DONE
:

1328 
	`ûog_DP_COMPONENT_2
(
ILOG_MINOR_ERROR
, 
PM_INVALID_EVENT
, 
evít
, 
cuºítSèã
);

1332  
√xtSèã
;

1333 
	}
}

1342 
	$LexPmCpuMsgRe˚ivedEvítH™dÀr
(
uöt8_t
 
subTy≥
, c⁄° uöt8_à*
msg
, 
uöt16_t
 
msgLígth
)

1344 
	`ûog_DP_COMPONENT_2
(
ILOG_MINOR_EVENT
, 
AUX_READ_CPU_MESSAGE
, 
subTy≥
, 
msgLígth
);

1346 
subTy≥
)

1348 
AUX_MSG_SINK_PARAMETERS
:

1349 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_LEX_GET_SINK_PARAMETER
, 1);

1350 
	`mem˝y
((
uöt8_t
*)&
ÀxPmInôC⁄ãxt
.
sökP¨amëîs
, 
msg
, 
msgLígth
);

1351 
ÀxPmC⁄ãxt
.
gŸSökP¨amãrs
 = 
åue
;

1352 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxWaôHo°Info
 = 
åue
;

1353 
	`LexPmH™dÀM⁄ô‹Info
();

1354 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_SINK_PARAMETERS_ACK
);

1355 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_RX_MONITOR_INFO
);

1358 
AUX_MSG_REX_WAIT_HOST_INFO
:

1359 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxWaôHo°Info
 = 
åue
;

1360 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_REX_WAIT_HOST_INFO
);

1363 
AUX_MSG_MCCS_CAP_SEND
:

1365 
	`mem˝y
((
uöt8_t
*)&
mccsCache
, 
msg
, 
msgLígth
);

1366 
	`LﬂdRe˚ivîMccsCacheI¡oMccsTabÀ
(
mccsCache
.
byãs
, mccsCache.
√xtFªeIndex
);

1367 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_MCCS_CAP_ACK
);

1370 
AUX_MSG_STREAM_PARAMETERS_ACK
:

1373 
AUX_MSG_AUDIO_STATUS_ACK
:

1374 
	`DP_LexE«bÀSpdDr›Pkt
(
Ál£
);

1377 
AUX_MSG_REX_READY_FOR_MCA
:

1378 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_REX_READY_FOR_MCA
);

1381 
AUX_MSG_REX_PM_STATUS
:

1382 
	`mem˝y
(&
ÀxPmC⁄ãxt
.
ªxSètus
, 
msg
, 
msgLígth
);

1383 
	`LexRexA˘iveEvítGíî©e
();

1384 
	`LexRxRódyCheck
();

1387 
AUX_MSG_VCP_TABLE
:

1388 
mccsReque°C⁄ãxt
.
mccsSètus
 = 
åue
;

1389 
	`LﬂdRe˚ivîV˝CacheI¡oV˝TabÀ
((
MccsV˝
 *)
msg
, (
size_t
)
msgLígth
);

1390 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_VCP_TABLE_ACK
);

1393 
AUX_MSG_MCCS_TIMING
:

1394 
	`LﬂdRe˚ivîTimögCacheI¡oTabÀ
((
uöt8_t
 *)
msg
, (
size_t
)
msgLígth
);

1395 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_MCCS_TIMING_ACK
);

1398 
AUX_MSG_NEW_CONTROL_FIFO
:

1399 
	`mem˝y
((
uöt8_t
 *)&
a˘iveC⁄åﬁFifo
, 
msg
, 
msgLígth
);

1400 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_RECEIVED_ACTIVE_CONTROL
);

1401 
	`SaveV˝CacheToV˝TabÀ
(
NEW_CONTROL_CODE
, 0x02);

1403 
a˘iveC⁄åﬁFifoIdx
 = 
msgLígth
 -1;

1404 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_NEW_CONTROL_FIFO_ACK
);

1408 
	`iÁû_DP_COMPONENT_1
(
AUX_UNHANDLED_CPU_MESSAGE
, 
subTy≥
);

1411 
	}
}

1422 
	$LexPmDißbÀE¡î
()

1424 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
AUX_STATE_DISABLE
);

1427 
	`TOPLEVEL_˛órPﬁlögMask
(
SECONDARY_INT_DP_SINK_MAIN_INT_MSK
 | 
SECONDARY_INT_DP_SINK_AUX_HPD_INT_MSK
);

1428 
	`AUX_DißbÀAuxI¡îru±s
(
	`AUX_GëC⁄figuªdI¡îru±s
());

1430 
	`LexPro˚ssAuxReque°
(
AUX_LEX_RESET_REQUEST
);

1432 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_DISABLE
);

1433 
	`LexSídLexAudioSètus
(
åue
);

1434 
	`LexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

1436 
ÀxPmC⁄ãxt
.
lökRëryCou¡
 = 0;

1437 
	`AUX_LexCÀ¨MßRëryCou¡î
();

1438 
ÀxPmC⁄ãxt
.
gŸSökP¨amãrs
 = 
Ál£
;

1439 
	}
}

1449 
	$LexPmIdÀPídögE¡î
()

1451 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
AUX_STATE_IDLE
);

1453 
	`TIMING_TimîSèπ
(
ÀxPmC⁄ãxt
.
≥ndögTimî
);

1455 
	`LexPmCÀ¨C⁄ãxt
();

1458 
	`TOPLEVEL_£tPﬁlögMask
(
SECONDARY_INT_DP_SINK_MAIN_INT_MSK
 | 
SECONDARY_INT_DP_SINK_AUX_HPD_INT_MSK
);

1459 
	`AUX_E«bÀAuxI¡îru±s
(
	`AUX_GëC⁄figuªdI¡îru±s
());

1461 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_DISABLE
);

1462 
	`AUX_Re£tUnsuµ‹ãdSëtögs
();

1464 
	`LexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

1465 
	}
}

1476 
	$LexPmVideoFlowögE¡î
()

1478 
	`DP_SökCÀ¨CxFifoOvîÊowSèts
();

1482 
	`DP_Re£tEncodî
(
åue
);

1485 
	`DP_Re£tEncodî
(
Ál£
);

1487 
	`DP_C⁄figuªEncodîExåa˘‹
();

1489 
	`DP_E«bÀSåómEncodî
();

1491 if(!
ÀxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©eE«bÀd
)

1493 
	`DP_LexDr›CsPçPkt
(
Ál£
);

1497 
	`LexUpd©eVideoTxRódyInfo
(
åue
);

1500 i‡(!
dpC⁄figPå
->
noSídAudio
)

1502 
	`DP_LexE«bÀAudioMuã
();

1503 
	`LexVÆid©eAndSídMaud
();

1506 
	`LexPmUpd©eVideoSètus
(
VIDEO_OPERATING
);

1508 
	`DP_Re£tEº‹C¡
();

1509 
	`TIMING_TimîSèπ
(
ÀxPmC⁄ãxt
.
lökQuÆôyTimî
);

1510 
	`TIMING_TimîSèπ
(
ÀxPmC⁄ãxt
.
ª£tEºCou¡î
);

1511 
	`TIMING_TimîSèπ
(
ÀxPmC⁄ãxt
.
cxFifoOvîÊowTimî
);

1512 
	}
}

1524 
	$LexPmVideoFlowögExô
()

1526 
	`DP_LexDr›CsPçPkt
(
åue
);

1528 
	`DP_LexE«bÀSpdDr›Pkt
(
åue
);

1530 
	`MCA_Ch™√lLökDn
(
MCA_CHANNEL_NUMBER_DP
);

1532 
	`DP_Re£tEncodî
(
åue
);

1534 
	`LexUpd©eVideoTxRódyInfo
(
Ál£
);

1536 
	`TIMING_TimîSt›
(
ÀxPmC⁄ãxt
.
lökQuÆôyTimî
);

1540 
	`TIMING_TimîSt›
(
ÀxPmC⁄ãxt
.
ª£tEºCou¡î
);

1542 
	`TIMING_TimîSt›
(
ÀxPmC⁄ãxt
.
cxFifoOvîÊowTimî
);

1543 
	}
}

1553 
	$LexPmH™dÀM⁄ô‹Info
()

1556 
	`LexCheckIfC≠IsVÆid
();

1557 
	`DPCD_LﬂdRe˚ivîC≠Cache
();

1559 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewM⁄ô‹
 = 
	`RexEdidCh™ged
(&
ÀxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
[0]);

1561 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewM⁄ô‹
)

1564 
	`EdidUpd©eHódî
(&
ÀxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
[0]);

1566 
	`LﬂdRe˚ivîEdidCacheI¡oEdidTabÀ
(&
ÀxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
[0]);

1568 
	`ModifyEdidBpc
();

1570 
	}
}

1580 
	$SídSåómP¨amëîs
()

1582 
AUX_Down°ªamCpuMesßge
 
msg
 = {

1583 .
ty≥
 = 
AUX_MSG_STREAM_PARAMETERS
,

1584 .
msgBuf„r
 = &
ÀxPmC⁄ãxt
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
,

1585 .
msgLígth
 = (
ÀxPmC⁄ãxt
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
)

1588 
	`LexSídCpuMesßgeToRex
(&
msg
);

1589 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxWaôHo°Info
 = 
Ál£
;

1590 
	`ûog_DP_COMPONENT_0
(
ILOG_USER_LOG
, 
PM_SENT_STREAM_PARAMS
);

1591 
	}
}

1602 
	$LexPmCÀ¨C⁄ãxt
()

1604 
	`mem£t
(&
ÀxPmInôC⁄ãxt
, 0, ÜexPmInitContext);

1607 
ÀxPmC⁄ãxt
.
gŸSökP¨amãrs
 = 
Ál£
;

1608 
ÀxPmC⁄ãxt
.
°©eFœgs
.
videoRxRódy
 = 
Ál£
;

1609 
ÀxPmC⁄ãxt
.
ÀxSètus
.
ho°C⁄√˘ed
 = 
Ál£
;

1610 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewM⁄ô‹
 = 
Ál£
;

1611 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewLökP¨ams
 = 
Ál£
;

1613 
	`LexSídLexPmSètus
();

1614 
	}
}

1624 
	$LexPmCommLökEvítH™dÀr
(
uöt32_t
 
lökUp
, uöt32_à
u£rC⁄ãxt
)

1626 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_GOT_LINK_MSG
, 
lökUp
);

1628 if(
lökUp
)

1630 
	`LexSídLexPmSètus
();

1636 
	`mem£t
(&
ÀxPmC⁄ãxt
.
ªxSètus
, 0, (lexPmContext.rexStatus));

1639 
ÀxPmC⁄ãxt
.
°©eFœgs
.
phyUp
 = 
lökUp
;

1640 
	`LexRexA˘iveEvítGíî©e
();

1641 
	}
}

1651 
	$LexPmUpd©eVideoSètus
(
VideoSètus
 
videoSètus
)

1653 
ÀxPmInôC⁄ãxt
.
videoSètus
 = videoStatus;

1654 
	`EVENT_Triggî
(
ET_VIDEO_STATUS_CHANGE
, 
videoSètus
);

1655 
	}
}

1665 
uöt32_t
 
	$LexPmGëVideoSètus
()

1667  
ÀxPmInôC⁄ãxt
.
videoSètus
;

1668 
	}
}

1678 
	$LexPmC⁄figuøti⁄EvítH™dÀr
(
uöt32_t
 
evítInfo
, uöt32_à
u£rC⁄ãxt
)

1680 if(
evítInfo
 =
CONFIG_VARS_BB_FEATURE_CONTROL
)

1682 
boﬁ
 
dpE«bÀd
 = 
	`LexPmDpE«bÀd
();

1683 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_FEATURE_MSG
, 
dpE«bÀd
);

1685 
	`LexPmSèãSídEvítWôhNoD©a
(
dpE«bÀd
 ? 
LEX_AUX_ENABLE
 : 
LEX_AUX_DISABLE
);

1687 
	}
}

1697 
boﬁ
 
	$LexPmDpE«bÀd
()

1699 
boﬁ
 
dpE«bÀd
 = 
	`AUX_gëDPFótuª
();

1701 if(
ÀxPmC⁄ãxt
.
ÀxSètus
.
ÀxDpE«bÀd
 !
dpE«bÀd
)

1703 
ÀxPmC⁄ãxt
.
ÀxSètus
.
ÀxDpE«bÀd
 = 
dpE«bÀd
;

1704 
	`LexSídLexPmSètus
();

1707  
dpE«bÀd
;

1708 
	}
}

1718 
	$LexPídögTimîH™dÀr
()

1720 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_PENDING_COMPLETE
);

1721 
	}
}

1731 
	$LexNoVideoWaôTimîH™dÀr
()

1733 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_RETRAIN_REQUEST
);

1734 
	}
}

1744 
	$LexRexA˘iveEvítGíî©e
()

1746 
boﬁ
 
ªxA˘ive
 = 
ÀxPmC⁄ãxt
.
°©eFœgs
.
phyUp


1747 && 
ÀxPmC⁄ãxt
.
ªxSètus
.
ªxDpE«bÀd


1748 && 
ÀxPmC⁄ãxt
.
ªxSètus
.
m⁄ô‹C⁄√˘ed
;

1750 i‡–
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxA˘ive
 !=ÑexActive )

1752 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxA˘ive
 =ÑexActive;

1753 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
AUX_ACTIVE_INFO_LEX
,

1754 
ÀxPmC⁄ãxt
.
°©eFœgs
.
phyUp
,

1755 
ÀxPmC⁄ãxt
.
ªxSètus
.
ªxDpE«bÀd
,

1756 
ÀxPmC⁄ãxt
.
ªxSètus
.
m⁄ô‹C⁄√˘ed
);

1758 
	`LexPmSèãSídEvítWôhNoD©a
(
ªxA˘ive
 ? 
LEX_AUX_REX_ACTIVE
 : 
LEX_AUX_REX_OFFLINE
);

1760 
	}
}

1770 
	$LexRxRódyCheck
()

1772 if(
ÀxPmC⁄ãxt
.
°©eFœgs
.
videoRxRódy
 !ÀxPmC⁄ãxt.
ªxSètus
.videoRxReady)

1774 
ÀxPmC⁄ãxt
.
°©eFœgs
.
videoRxRódy
 =ÜexPmC⁄ãxt.
ªxSètus
.videoRxReady;

1775 
	`LexPmSèãSídEvítWôhNoD©a
(
ÀxPmC⁄ãxt
.
°©eFœgs
.
videoRxRódy
 ? 
LEX_AUX_VIDEO_RX_READY
 : 
LEX_AUX_VIDEO_RX_NOT_READY
);

1777 
	}
}

1787 
	$LexUpd©eHo°Info
(
boﬁ
 
c⁄√˘ed
)

1789 
ÀxPmC⁄ãxt
.
ÀxSètus
.
ho°C⁄√˘ed
 = 
c⁄√˘ed
;

1790 
	`LexSídLexPmSètus
();

1791 
	}
}

1801 
	$LexUpd©eVideoTxRódyInfo
(
boﬁ
 
ªady
)

1803 
ÀxPmC⁄ãxt
.
ÀxSètus
.
ÀxVideoTxRódy
 = 
ªady
;

1804 
	`LexSídLexPmSètus
();

1805 
	}
}

1815 
	$LexSídLexPmSètus
()

1817 
AUX_Down°ªamCpuMesßge
 
°©usMsg
 = {

1818 .
ty≥
 = 
AUX_MSG_LEX_PM_STATUS
,

1819 .
msgBuf„r
 = &
ÀxPmC⁄ãxt
.
ÀxSètus
,

1820 .
msgLígth
 = (
ÀxPmC⁄ãxt
.
ÀxSètus
)

1823 
	`LexSídCpuMesßgeToRex
(&
°©usMsg
);

1824 
	}
}

1834 
	$LexVÆid©eAndSídMaud
()

1836 if(
	`DP_GëMaudVÆue
() != 0)

1838 
	`LexSídLexAudioSètus
(
	`DP_IsAudioMuãd
());

1845 
	`TIMING_TimîSèπ
(
ÀxPmC⁄ãxt
.
audioMaudTimî
);

1847 
	}
}

1857 
	$LexSídLexAudioSètus
(
boﬁ
 
audioSètus
)

1859 i‡(
dpC⁄figPå
->
noSídAudio
 =
Ál£
)

1861 
uöt8_t
 
audioSètusBuf„r
[] = { (uöt8_t)
audioSètus
, 
	`DP_GëMaudVÆue
() };

1863 
AUX_Down°ªamCpuMesßge
 
msg
 = {

1864 .
ty≥
 = 
AUX_MSG_SEND_AUDIO_STATUS
,

1865 .
msgBuf„r
 = 
audioSètusBuf„r
,

1866 .
msgLígth
 = (
audioSètusBuf„r
)

1869 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
DP_LEX_AUDIO_MSG
, (
uöt8_t
)
audioSètus
, 
	`DP_GëMaudVÆue
());

1871 
	`LexSídCpuMesßgeToRex
(&
msg
);

1873 
	}
}

1883 
	$LexAudioMuãTimîH™dÀr
()

1885 
	`LexSídLexAudioSètus
(
	`DP_IsAudioMuãd
());

1886 
	}
}

1896 
	$LexCheckLökQuÆôy
()

1898 if(
	`DP_CheckLöeEº‹C¡
(
LEX_BIT_ERROR_RATE_MAX
))

1900 
	`TIMING_TimîSt›
(
ÀxPmC⁄ãxt
.
lökQuÆôyTimî
);

1902 
	`AUX_MakeSëtögUnsuµ‹ãd
();

1904 
	`ReInôüãLökTøöög
();

1907 
	`DP_Re£tEº‹C¡
();

1908 
	}
}

1917 
	$LexPmMˇEº‹CÆlback
(
MCA_Ch™√lEº‹
 
mˇEº‹
)

1919 if(
mˇEº‹
 =
MCA_CHANNEL_ERROR_RX_FIFO_OVERFLOW
 ||

1920 
mˇEº‹
 =
MCA_CHANNEL_ERROR_RX_GRD_MAX_ERROR
 ||

1921 
mˇEº‹
 =
MCA_CHANNEL_ERROR_TX_FIFO_FULL_ERR
)

1923 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_ERROR_RECOVERY_FAILED_EVENT
);

1925 
	}
}

1934 
	$LexCheckIfC≠IsVÆid
()

1936 c⁄° 
uöt8_t
 
bw
 = 
ÀxPmInôC⁄ãxt
.
sökP¨amëîs
.
ª˚ivîC≠Cache
[
MAX_LINK_RATE
];

1937 c⁄° 
uöt8_t
 
lc
 = 
ÀxPmInôC⁄ãxt
.
sökP¨amëîs
.
ª˚ivîC≠Cache
[
MAX_LANE_COUNT
] & 0x0F;

1939 
	`üs£π_DP_COMPONENT_2
(
bw
 =
BW_1_62_GBPS
 || bw =
BW_2_70_GBPS
 || bw =
BW_5_40_GBPS
,

1940 
AUX_INVALID_BW
, 
bw
, 
__LINE__
);

1942 
	`üs£π_DP_COMPONENT_1
(
lc
 =
LANE_COUNT_1
 ||Ü¯=
LANE_COUNT_2
 ||Ü¯=
LANE_COUNT_4
,

1943 
AUX_INVALID_LC
, 
lc
);

1945 
ÀxPmC⁄ãxt
.
°©eFœgs
.
ªxNewLökP¨ams
 = 
	`RexLökP¨amsCh™ged
(
bw
, 
lc
);

1946 
	}
}

1956 
	$LexPmHo°C⁄√˘MsgH™dÀr
(
boﬁ
 
c⁄√˘ed
)

1958 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_HOST_CONNECTION_MSG
, 
c⁄√˘ed
);

1959 
	`LexUpd©eHo°Info
(
c⁄√˘ed
);

1960 
	`DP_Lex_SèπRexPowîDownTimî
();

1961 
	`LexPmSèãSídEvítWôhNoD©a
(
c⁄√˘ed
 ? 
LEX_AUX_DP_HOST_CONNECT
 : 
LEX_AUX_DP_HOST_DISCONNECT
);

1962 
	}
}

1972 
	$LexPmMˇEvítH™dÀr
(
MCA_Ch™√lSètus
 
ch™√lSètus
)

1974 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_DP_CHANNEL_STATUS
, 
ch™√lSètus
);

1976 
ch™√lSètus
)

1978 
MCA_CHANNEL_STATUS_LINK_ACTIVE
:

1979 
	`MCA_Ch™√lTxRxSëup
(
MCA_CHANNEL_NUMBER_DP
);

1981 
MCA_CHANNEL_STATUS_CHANNEL_READY
:

1982 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_MCA_UP
);

1984 
MCA_CHANNEL_STATUS_LINK_DOWN
:

1985 
MCA_CHANNEL_STATUS_CHANNEL_DISABLED
:

1986 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
AUX_MCA_DETECT_LINKDN
);

1987 
	`MCA_Ch™√lLökDn
(
MCA_CHANNEL_NUMBER_DP
);

1988 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_MCA_DN
);

1994 
	}
}

2004 
boﬁ
 
	$LexLökAndSåómP¨amCh™ged
(c⁄° 
LökAndSåómP¨amëîs
* 
√wP¨am
)

2006 
LökAndSåómP¨amëîs
* 
ﬁdP¨ams
 = &
ÀxPmC⁄ãxt
.
lökAndSåómP¨amëîs
;

2009 
ﬁdP¨ams
->
°ªamP¨amëîs
.
mvid
 = 
√wP¨am
->streamParameters.mvid;

2010 
boﬁ
 
∑ømsCh™ged
 = !
	`memeq
(
√wP¨am
, 
ﬁdP¨ams
, (
LökAndSåómP¨amëîs
));

2012 if(
∑ømsCh™ged
)

2014 
	`mem˝y
(
ﬁdP¨ams
, 
√wP¨am
, (
LökAndSåómP¨amëîs
));

2018 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
AUX_GOT_SAME_MSA
);

2021  
∑ømsCh™ged
;

2022 
	}
}

2032 
	$LexPmUpd©eSåómP¨am
(c⁄° 
LökAndSåómP¨amëîs
* 
√wP¨am
)

2034 
	`mem˝y
(&
ÀxPmC⁄ãxt
.
lökAndSåómP¨amëîs
, 
√wP¨am
, (
LökAndSåómP¨amëîs
));

2035 
	}
}

2046 
	$LexPmNoVideoH™dÀrE¡î
()

2048 
	`DP_LexCÀ¨PídögSåómIrq
();

2049 
	`DP_E«bÀVideoSåómIrqO∆y
();

2051 
	`TIMING_TimîSèπ
(
ÀxPmC⁄ãxt
.
noVideoWaôTimî
);

2052 
	`LexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

2053 
	}
}

2063 
LexPmSèã
 
	$LexLökTøöögFaûH™dÀr
()

2065 
LexPmEvítD©a
* 
evítD©a
 = (LexPmEvítD©a*)
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.eventData;

2066 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_LINK_FAIL
, 
evítD©a
->
LexTrFaûCode
, 
ÀxPmC⁄ãxt
.
lökRëryCou¡
);

2068 
ÀxPmC⁄ãxt
.
lökRëryCou¡
++;

2069 if(
ÀxPmC⁄ãxt
.
lökRëryCou¡
 < 
LEX_MAX_RETRY_COUNT
)

2071  
PM_IDLE_PENDING
;

2075  
PM_ERROR
;

2077 
	}
}

2087 
	$LexSídRexSëM⁄ô‹SÀï
(
boﬁ
 
m⁄ô‹SÀï
)

2089 
uöt8_t
 
m⁄ô‹SÀïSèã
 = 
m⁄ô‹SÀï
 ?

2090 
LEX_POWER_STATE_POWER_DOWN
 : 
LEX_POWER_STATE_NORMAL
;

2092 
AUX_Down°ªamCpuMesßge
 
msg
 = {

2093 .
ty≥
 = 
AUX_MSG_SET_MONITOR_SLEEP
,

2094 .
msgBuf„r
 = &
m⁄ô‹SÀïSèã
,

2095 .
msgLígth
 = 1

2098 
	`LexSídCpuMesßgeToRex
(&
msg
);

2099 
	}
}

2110 
	$LexSëRexPowîDownTimîH™dÀr
()

2112 
	`LexSídRexSëM⁄ô‹SÀï
(
åue
);

2113 
	}
}

2123 
LexPmSèã
 
	$LexWr⁄gMßNìdRëøöH™dÀr
()

2125 
LexPmEvítD©a
* 
evítD©a
 = (LexPmEvítD©a*)
ÀxPmC⁄ãxt
.
°©eMachöeInfo
.eventData;

2127 
ÀxPmC⁄ãxt
.
övÆidMßRëryCou¡
++;

2129 if(
ÀxPmC⁄ãxt
.
övÆidMßRëryCou¡
 < 
LEX_MAX_RETRY_COUNT
)

2131 if(
evítD©a
->
LexMßFaûCode
 =
LEX_MSA_YCBCR422
)

2133 
	`LexDißbÀFótuªsInEdid
(
LEX_MSA_YCBCR422
);

2135 i‡(
evítD©a
->
LexMßFaûCode
 =
LEX_MSA_10BPC
)

2137 
	`LexDißbÀFótuªsInEdid
(
LEX_MSA_10BPC
);

2139 i‡(
evítD©a
->
LexMßFaûCode
 =
LEX_MSA_VALID_SYMBOLS
)

2141 
	`LexEdidRemoveUnsuµ‹ãdTimög
(
ÀxPmC⁄ãxt
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
.
h
.
width
);

2144 
ÀxPmInôC⁄ãxt
.
ªque°NewLökTøöög
 = 
åue
;

2145  
PM_HOST_LINK_TRAINING
;

2149  
PM_ERROR
;

2151 
	}
}

2161 
	$LexMßWaôTimîH™dÀr
()

2163 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
AUX_NO_MSA
);

2164 
	`DP_LEX_ª£tSåómExåa˘‹
();

2165 
	}
}

	@components/dp/src/lex_policy_maker.h

11 #i‚de‡
LEX_POLICY_MAKER_H


12 
	#LEX_POLICY_MAKER_H


	)

15 
	~<iba£.h
>

16 
	~<°©e_machöe.h
>

18 
	~"dp_loc.h
"

22 
	eLexPmEvít


24 
	mLEX_AUX_EVENT_ENTER
 = 
UTILSM_EVENT_ENTER
,

25 
	mLEX_AUX_EVENT_EXIT
 = 
UTILSM_EVENT_EXIT
,

26 
	mLEX_AUX_ENABLE
,

27 
	mLEX_AUX_DISABLE
,

28 
	mLEX_AUX_MCA_UP
,

29 
	mLEX_AUX_MCA_DN
,

30 
	mLEX_AUX_REX_ACTIVE
,

31 
	mLEX_AUX_REX_OFFLINE
,

32 
	mLEX_AUX_DP_HOST_CONNECT
,

33 
	mLEX_AUX_DP_HOST_DISCONNECT
,

34 
	mLEX_AUX_RX_MONITOR_INFO
,

35 
	mLEX_AUX_REX_WAIT_HOST_INFO
,

36 
	mLEX_AUX_HOST_REQUEST_TRAINING
,

37 
	mLEX_AUX_MSA_READY
,

38 
	mLEX_AUX_WRONG_MSA_NEED_RETRAIN
,

39 
	mLEX_AUX_HOST_LINK_TRAINING_DONE
,

40 
	mLEX_AUX_HOST_LINK_TRAINING_FAIL
,

41 
	mLEX_AUX_PENDING_COMPLETE
,

42 
	mLEX_AUX_VIDEO_RX_READY
,

43 
	mLEX_AUX_VIDEO_RX_NOT_READY
,

44 
	mLEX_AUX_NO_VIDEO_SIGNAL
,

45 
	mLEX_AUX_ERROR_RECOVERY_FAILED_EVENT
,

46 
	mLEX_AUX_PWR_DOWN
,

47 
	mLEX_AUX_PWD_UP
,

48 
	mLEX_AUX_AUDIO_MUTE_STATUS_CHANGE
,

49 
	mLEX_AUX_POWER_UP_TRAINED
,

50 
	mLEX_AUX_STREAM_ERROR_DETECTED
,

51 
	mLEX_AUX_REX_READY_FOR_MCA
,

52 
	mLEX_AUX_RETRAIN_REQUEST
,

53 
	mLEX_AUX_FRQ_OUT_OF_RANGE_DETECTED
,

54 
	mLEX_AUX_START_DIAGNOSTIC
,

57 
	eAUX_LexTrFaûCode


59 
	mLEX_TR_FAIL_RETIMER_LOCK
,

60 
	mLEX_TR_FAIL_GTP_LOCK
,

61 
	mLEX_TR_FAIL_TIMEOUT
,

62 
	mLEX_TR_INVALID_FREQENCY


65 
	uLexPmEvítD©a


68 c⁄° 
AUX_Reque°
 
	mªque°
;

71 c⁄° 
AUX_Up°ªamCpuMesßge
 *
	mup°ªamCpuMesßge
;

74 c⁄° 
LökAndSåómP¨amëîs
 *
	mlökAndSåómP¨amëîs
;

76 
AUX_LexTrFaûCode
 
	mLexTrFaûCode
;

78 
AUX_LexMßFaûCode
 
	mLexMßFaûCode
;

82 
	$AUX_LexPﬁicyMakîInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

83 
	$LexI§H™dÀr
(
uöt32_t
 
i§Ty≥
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

84 
	$LexPmSèãSídEvítWôhD©a
(
LexPmEvít
 
evít
, 
LexPmEvítD©a
 *
evítD©a
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

85 
	$LexPmSèãSídEvítWôhNoD©a
(
LexPmEvít
 
evít
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

86 
	$AUX_LexPmLogSèã
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

87 
uöt8_t
 
	$LexLoˇlDpcdRód
(
uöt32_t
 
dpcdAddr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

88 
	$LexSídCpuMesßgeToRex
(c⁄° 
AUX_Down°ªamCpuMesßge
*Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

90 
	$DP_LexMCAUpDnIcmd
(
boﬁ
 
°©e
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

91 
	$DP_AUX_LexEº‹Recovîy
(
uöt8_t
 
îr‹
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

92 
	$DP_LEX_CÀ¨EºCou¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

93 
	$DP_LEX_ª£tSåómExåa˘‹
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

94 
	$AUX_LexSëIsﬁ©edSèã
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

95 
	$AUX_LexCÀ¨MßRëryCou¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

96 
	$DP_LEX_IcmdPrötAŒSètusFœg
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

	@components/dp/src/lex_transaction_handlers.c

25 
	~<iba£.h
>

26 
	~<dp_sök_ªgs.h
>

27 
	~<bb_t›_a7_ªgs.h
>

28 
	~<À⁄_timîs.h
>

29 
	~<bb_t›.h
>

30 
	~<ˇŒback.h
>

31 
	~<timög_timîs.h
>

32 
	~<i2cd_dp159≠i.h
>

33 
	~<dp_°ªam.h
>

34 
	~<ã°_dügno°ics.h
>

35 
	~"dp_loc.h
"

36 
	~"dp_log.h
"

37 
	~"dpcd.h
"

38 
	~"Àx_pﬁicy_makî.h
"

39 
	~"Àx_dpcd_ªg.h
"

40 
	~"dp_aux.h
"

41 
	~"aux_≠i.h
"

42 
	~"mccs.h
"

43 
	~"˝u_comm.h
"

46 
	~<u¨t.h
>

49 
	#RBR_SSC_THRESHOLD
 80850000

50 
	#HBR_SSC_THRESHOLD
 134775000

51 
	#HBR2_SSC_THRESHOLD
 269550000

52 
	#MAX_VOLTAGE_SWING
 2

53 
	#MAX_PRE_EMPHASIS
 2

54 
	#MAX_VALID_VS_PLUS_PE
 3

55 
	#AUX_MAX_LANE_COUNT
 4

56 
	#LEX_ERROR_RECOVERY_MAX_COUNT
 5

57 
	#SYMBOL_ERROR_COUNT_SEL_MASK
 0xC0

58 
	#DISP_NIT
 0x0

	)

59 
	#DISP_ONLY
 0x1

	)

60 
	#NIT_ONLY
 0x2

	)

61 
	#VALID
 0x80

	)

62 
	#VOLTAGE_SWING_COUNT
 3

	)

63 
	#HIGHEST_ALLOWED_VOLTAGE_SWING_INDEX
 6

	)

64 
	#START_CLOCK_RECOVERY
 1

	)

65 
	#START_CHANNEL_EQUALIZATION
 2

	)

66 
	#LINK_TRAINED
 3

	)

69 
	#LEX_LINK_TRAINING_DONE_TIMEOUT_MS
 2500

70 
	#LEX_MSA_ERROR_RETRY_TIME
 100

71 
	#LEX_FPS_COUNT_TIME
 200

72 
	#LEX_ENCODER_RESET_TIME
 110

73 

	)

76 
	#LEX_HPD_MIN_DOWN_TIME
 2000

	)

77 
	#LEX_AUX_STREAM_EXTRACTOR_EN_TIMER
 10

78 
	#LEX_REPLUG_TPS1_TIMEOUT
 2000

79 
	#CLOCK_MEASURE_FPS
 75000000

80 
	#HOST_LOCK_FAIL_MAX
 10

81 

	)

84 
	eLexLtSèã


86 
	mLT_DISABLE_PENDING
,

87 
	mLT_DISABLED
,

88 
	mLT_POWERED_DOWN
,

89 
	mLT_POWER_UP
,

90 
	mLT_WAIT_RETRAIN
,

91 
	mLT_WAIT_TPS1
,

92 
	mLT_RETIMER_CR
,

93 
	mLT_CHECK_RETIMER_LOCK
,

94 
	mLT_GTP_SETUP
,

95 
	mLT_VS_ADVERTISE
,

96 
	mLT_WAIT_TPS23
,

97 
	mLT_CHECK_GTP_FRQ
,

98 
	mLT_WAIT_SYMBOL_LOCK
,

99 
	mLT_PE_ADVERTISE
,

100 
	mLT_LINK_TRAINED
,

101 
	mNUM_STATES_LINK_TRAINING


104 
	sVﬁègeSwögSëtög


106 
VﬁègeSwög
 
	mvs
;

107 
uöt8_t
 
	m√xtVSSëtög
;

110 
	sPªEmphasisSëtög


112 
PªEmphasis
 
	m≥
;

113 
uöt8_t
 
	m√xtPESëtög
;

116 
	eLexSåómEº‹Ty≥


118 
	mLEX_EXTRACTION_ERROR
,

119 
	mLEX_STREAM_ERROR
,

120 
	mLEX_LANE_ALIGN_ERROR
,

124 (*
	tAUX_I2C_H™dÀr
)(
	tAUX_Reque°
 *
	tªq
, 
	tAUX_Rïly
 *
	tª∂y
, 
	tuöt8_t
 
	tåueD©aLí
);

127 
	$LexLtEvítCÆlback
(*
∑øm1
, *
∑øm2
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

128 
	$LexLtSèãSídEvítWôhD©a
(
LexLtEvít
 
evít
, 
LexLtEvítD©a
 *
evítD©a
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

129 
LexLtSèã
 
	$LexLtDißbÀPídögH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

130 
LexLtSèã
 
	$LexLtDißbÀdH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

131 
LexLtSèã
 
	$LexLtPowîedDownH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

132 
LexLtSèã
 
	$LexLtPowîUpH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

133 
LexLtSèã
 
	$LexLtWaôRëøöH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

134 
LexLtSèã
 
	$LexLtWaôTps1H™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

135 
LexLtSèã
 
	$LexLtRëimîCrH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

136 
LexLtSèã
 
	$LexLtCheckRëimîLockH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

137 
LexLtSèã
 
	$LexLtGçSëupH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

138 
LexLtSèã
 
	$LexLtVsAdvîti£H™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

139 
LexLtSèã
 
	$LexLtWaôTps23H™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

140 
LexLtSèã
 
	$LexLtCheckGçFrqH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

141 
LexLtSèã
 
	$LexLtWaôSymbﬁLockH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

142 
LexLtSèã
 
	$LexLtPeAdvîti£H™dÀr
–
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

143 
LexLtSèã
 
	$LexLtLökTøöedH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

144 
	$LexLtVsAdvîti£Alg‹ôhm
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

145 
	$LexLtPeAdvîti£Alg‹ôhm
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

146 
LexLtSèã
 
	$AUX_LexLtComm⁄H™dÀr
(
LexLtEvít
 
evít
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

147 
	$AUX_LexLtRëimîCrE¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

148 
	$AUX_LexLtSökWakeupE¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

149 
	$LexLtRe£tMaöComp⁄íts
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

150 
boﬁ
 
	$LexAdvîti£NextPeAvaûabÀ
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

151 
boﬁ
 
	$LexAdvîti£NextVsAvaûabÀ
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

152 
boﬁ
 
	$LexLtRóchedHighe°Levñ
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

153 
	$LexE«bÀDes¸ambÀr
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

154 
	$SídMccsV˝Së
(
uöt8_t
 *
£tV˝D©a
, uöt8_à
£tV˝D©aLígth
 ) 
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

156 
	$LexEdidRódH™dÀr
(
AUX_Reque°
 *, 
AUX_Rïly
 *, 
uöt8_t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

157 
	$LexEdidWrôeH™dÀr
(
AUX_Reque°
 *, 
AUX_Rïly
 *, 
uöt8_t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

158 
	$LexH™dÀN©iveAuxReque°
(
AUX_Reque°
 *
ªq
, 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

159 
	$LexH™dÀI2cReque°
(
AUX_Reque°
 *
ªq
, 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

160 
	$AUX_LexLökTøöögTimeoutH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

161 
	$RëimîReöôD⁄eH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

162 
	$RëimîCRPha£D⁄eH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

163 
	$RëimîPŒModeCh™geH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

164 
	$RëimîLockCheckH™dÀr
(
boﬁ
 
locked
, 
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

165 
	$Tøns˚ivîC⁄figCÆlback
(
boﬁ
 
suc˚ss
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

166 
	$LexDpFrqH™dÀr
(
uöt32_t
 
dëe˘edFrq
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

167 
	$AUX_LexE«bÀSåómExåa˘‹
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

168 
	$AUX_LexFpsCÆcuœãH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

169 
	$AUX_LexHpdDownTime
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

170 
	$AUX_LexPro˚ssMßP¨ams
(
uöt32_t
 
‰ameR©e
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

171 
boﬁ
 
	$LexLökTøöed
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

172 
	$AUX_LexAâem±Eº‹Recovîy
(
LexSåómEº‹Ty≥
 
îr‹
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

173 
boﬁ
 
	$IsLexOnMaxVﬁègeSwög
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

174 
boﬁ
 
	$IsLexLa°L™eReque°
(
uöt8_t
 
ödex
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

175 
	$lökTøöögTPS23ˇŒback
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

176 
	$AUX_LexTps1TimeoutH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

177 
	$AUX_LexCÀ¨DpC⁄fig
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

178 
boﬁ
 
	$AUX_LexHasCR
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

179 
boﬁ
 
	$AUX_LexHasSymbﬁLock
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

180 
	$AUX_LexSèπCh™√lEQ
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

181 
	$AUX_ShowVsPeCombö©i⁄
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

185 c⁄° 
AUX_I2C_H™dÀr
 
Aux_I2C_H™dÀrs
[] =

187 [
I2C_AUX_WRITE
] = 
LexEdidWrôeH™dÀr
,

188 [
I2C_AUX_READ
] = 
LexEdidRódH™dÀr
,

189 [
I2C_AUX_WRITE_STATUS_UPDATE
] = 
NULL
,

190 [
I2C_AUX_WRITE_MOT
] = 
LexEdidWrôeH™dÀr
,

191 [
I2C_AUX_READ_MOT
] = 
LexEdidRódH™dÀr
,

192 [
I2C_AUX_WRITE_STATUS_UPDATE_MOT
] = 
NULL


193 
	}
};

195 
uöt8_t
 
	gmccsFømeCou¡
 = 0;

196 
uöt8_t
 
	gv˝Opcode
;

199 c⁄° 
EvítH™dÀr
 
	g…SèãTabÀ
[
NUM_STATES_LINK_TRAINING
] =

201 [
LT_DISABLE_PENDING
] = 
LexLtDißbÀPídögH™dÀr
,

202 [
LT_DISABLED
] = 
LexLtDißbÀdH™dÀr
,

203 [
LT_POWERED_DOWN
] = 
LexLtPowîedDownH™dÀr
,

204 [
LT_POWER_UP
] = 
LexLtPowîUpH™dÀr
,

205 [
LT_WAIT_RETRAIN
] = 
LexLtWaôRëøöH™dÀr
,

206 [
LT_WAIT_TPS1
] = 
LexLtWaôTps1H™dÀr
,

207 [
LT_RETIMER_CR
] = 
LexLtRëimîCrH™dÀr
,

208 [
LT_CHECK_RETIMER_LOCK
] = 
LexLtCheckRëimîLockH™dÀr
,

209 [
LT_GTP_SETUP
] = 
LexLtGçSëupH™dÀr
,

210 [
LT_VS_ADVERTISE
] = 
LexLtVsAdvîti£H™dÀr
,

211 [
LT_WAIT_TPS23
] = 
LexLtWaôTps23H™dÀr
,

212 [
LT_CHECK_GTP_FRQ
] = 
LexLtCheckGçFrqH™dÀr
,

213 [
LT_WAIT_SYMBOL_LOCK
] = 
LexLtWaôSymbﬁLockH™dÀr
,

214 [
LT_PE_ADVERTISE
] = 
LexLtPeAdvîti£H™dÀr
,

215 [
LT_LINK_TRAINED
] = 
LexLtLökTøöedH™dÀr
,

219 c⁄° 
VﬁègeSwögSëtög
 
	gcuºítVSPaús
[] =

221 {.
vs
 = 
VOLTAGE_SWING_LEVEL_0
, .
	g√xtVSSëtög
 = 2},

222 {.
	gvs
 = 
VOLTAGE_SWING_LEVEL_0
, .
	g√xtVSSëtög
 = 2},

223 {.
	gvs
 = 
VOLTAGE_SWING_LEVEL_1
, .
	g√xtVSSëtög
 = 6},

224 {.
	gvs
 = 
VOLTAGE_SWING_LEVEL_1
, .
	g√xtVSSëtög
 = 6},

225 {.
	gvs
 = 
VOLTAGE_SWING_LEVEL_1
, .
	g√xtVSSëtög
 = 6},

226 {.
	gvs
 = 
VOLTAGE_SWING_LEVEL_1
, .
	g√xtVSSëtög
 = 6},

227 {.
	gvs
 = 
VOLTAGE_SWING_LEVEL_2
, .
	g√xtVSSëtög
 = 10},

228 {.
	gvs
 = 
VOLTAGE_SWING_LEVEL_2
, .
	g√xtVSSëtög
 = 10},

229 {.
	gvs
 = 
VOLTAGE_SWING_LEVEL_2
, .
	g√xtVSSëtög
 = 10},

230 {.
	gvs
 = 
VOLTAGE_SWING_LEVEL_2
, .
	g√xtVSSëtög
 = 10},

231 {.
	gvs
 = 
VOLTAGE_SWING_LEVEL_3
, .
	g√xtVSSëtög
 = 10},

235 
	sLtSèãFœg


237 
uöt32_t
 
	mpowîDnFromTøöed
 : 1;

238 
uöt32_t
 
	mlökHasCr
 : 1;

239 
uöt32_t
 
	m∂lModeCh™ged
 : 1;

240 
uöt32_t
 
	mgçSëD⁄e
 : 1;

241 
uöt32_t
 
	m…E«bÀd
 : 1;

242 
uöt32_t
 
	mdp159ReöôD⁄e
 : 1;

249 
DpC⁄fig
 
	mdpC⁄figBackup
;

250 
uöt8_t
 
	msymEºCou¡Sñ
;

254 
VﬁègeSwög
 
	mœ°GoodVS
;

255 
boﬁ
 
	mföÆVS
;

256 
boﬁ
 
	mcheckLöeEº‹
;

257 
boﬁ
 
	mö¸ó£VS
;

258 
uöt8_t
 
	mvsSèã
;

259 
uöt8_t
 
	m≥Sèã
;

260 
VﬁègeSwög
 
	mªadVS
[
AUX_MAX_LANE_COUNT
];

261 
PªEmphasis
 
	mªadPE
[
AUX_MAX_LANE_COUNT
];

262 
VﬁègeSwög
 
	mvs
[
AUX_MAX_LANE_COUNT
];

263 
PªEmphasis
 
	m≥
[
AUX_MAX_LANE_COUNT
];

264 
uöt8_t
 
	m¥evLökSètus
;

265 
boﬁ
 
	mlökSètusUpd©ed
;

266 
boﬁ
 
	mªadDeÁu…Sètus
;

267 
uöt8_t
 
	m≥FaûuªCou¡
;

268 } 
	mlök
;

270 
LtSèãFœg
 
	m°©eFœgs
;

271 
LökAndSåómP¨amëîs
 
	mlökAndSåómP¨amëîs
;

272 
LexPmEvítD©a
 
	mpmEvítD©a
;

273 
LexLtEvítD©a
 
	m…EvítD©a
;

274 
uöt16_t
 
	mi2cOff£t
;

276 
uöt8_t
 
	mÀxSåómEº‹Cou¡
;

277 
uöt8_t
 
	mÀxExåa˘i⁄Eº‹Cou¡
;

278 
uöt8_t
 
	mÀxVbdEº‹Cou¡
;

279 
uöt8_t
 
	mÀxHo°LockFaûCou¡
;

280 } 
	gÀxTønsInôCtx
;

282 
	sLexTønß˘i⁄Ctx


284 
TIMING_TimîH™dÀrT
 
	mlökTøöögD⁄eTimî
;

285 
TIMING_TimîH™dÀrT
 
	m£Re£tTimî
;

286 
TIMING_TimîH™dÀrT
 
	mÂsCÆcuœãTimî
;

287 
TIMING_TimîH™dÀrT
 
	mhpdMöDownTime
;

288 
TIMING_TimîH™dÀrT
 
	mª∂ugToTps1Timeout
;

290 
LEON_TimîVÆueT
 
	m‰ameCou¡SèπTime
;

291 
AUX_LexTrFaûCode
 
	måFaûCode
;

292 
AUX_LexMßFaûCode
 
	mmßFaûCode
;

293 
DpC⁄fig
 
	mdpC⁄fig
;

294 
UtûSmInfo
 
	m°©eMachöeInfo
;

297 
MaöLökB™dwidth
 
	mbwCr
;

298 
L™eCou¡
 
	mlcCr
;

299 }
	mlockInfo
;

302 
LexTønß˘i⁄Ctx
 
	gÀxTønsCtx
 =

304 .
°©eMachöeInfo
.
°©eH™dÀrs
 = 
…SèãTabÀ
,

305 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	glogLevñ
 = (
uöt8_t
)
ILOG_MAJOR_EVENT
,

306 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gûogComp⁄ít
 = 
DP_COMPONENT
,

307 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gûogId
 = 
LT_STATE_TRANSITION
,

310 c⁄° 
uöt32_t
 
	gsscFrqThªshﬁd
[] =

312 
RBR_SSC_THRESHOLD
,

313 
HBR_SSC_THRESHOLD
,

314 
HBR2_SSC_THRESHOLD


319 
boﬁ
 
	gavaûabÀVsPeCombö©i⁄
[3][3] = { { 
åue
,Årue,Årue},

320 { 
åue
,Årue,Årue},

321 { 
åue
,Årue, 
Ál£
}};

333 
	$AUX_PrötFöÆLökSëtögs
()

335 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
AUX_LINK_TRAINING_STATS
);

336 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
LEX_VS
, 
ÀxTønsInôCtx
.
lök
.
vs
[0]);

337 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
LEX_PE
, 
ÀxTønsInôCtx
.
lök
.
≥
[0]);

338 
	}
}

348 
	$AUX_MakeSëtögUnsuµ‹ãd
()

350 
uöt8_t
 
cuºítVs
 = 
ÀxTønsInôCtx
.
lök
.
vs
[0];

351 
uöt8_t
 
cuºítPe
 = 
ÀxTønsInôCtx
.
lök
.
≥
[0];

353 
avaûabÀVsPeCombö©i⁄
[
cuºítVs
][
cuºítPe
] = 
Ál£
;

355 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_LEX_DISABLE_COMBINATION
, 
cuºítVs
, 
cuºítPe
);

356 
	`AUX_ShowVsPeCombö©i⁄
();

358 if((
cuºítVs
 =0Ë&& (
cuºítPe
 == 0))

360 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_ERROR_RECOVERY_FAILED_EVENT
);

361 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_DISABLE
);

363 
	}
}

373 
	$AUX_Re£tUnsuµ‹ãdSëtögs
()

375 
uöt8_t
 
vs
 = 0; vs < 3; vs++)

377 
uöt8_t
 
≥
 = 0;Öe < 3;Öe ++)

379 
avaûabÀVsPeCombö©i⁄
[
vs
][
≥
] = 
åue
;

382 
avaûabÀVsPeCombö©i⁄
[2][2] = 
Ál£
;

383 
	}
}

395 
	$AUX_LexTønß˘i⁄H™dÀrInô
()

397 
ÀxTønsCtx
.
lökTøöögD⁄eTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

398 
AUX_LexLökTøöögTimeoutH™dÀr
, 
Ál£
, 
LEX_LINK_TRAINING_DONE_TIMEOUT_MS
);

400 
ÀxTønsCtx
.
£Re£tTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

401 
AUX_LexE«bÀSåómExåa˘‹
, 
Ál£
, 
LEX_MSA_ERROR_RETRY_TIME
);

403 
ÀxTønsCtx
.
ÂsCÆcuœãTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

404 
AUX_LexFpsCÆcuœãH™dÀr
, 
Ál£
, 
LEX_FPS_COUNT_TIME
);

406 
ÀxTønsCtx
.
hpdMöDownTime
 = 
	`TIMING_TimîRegi°îH™dÀr
(

407 
AUX_LexHpdDownTime
, 
Ál£
, 
LEX_HPD_MIN_DOWN_TIME
);

409 
ÀxTønsCtx
.
ª∂ugToTps1Timeout
 = 
	`TIMING_TimîRegi°îH™dÀr
(

410 
AUX_LexTps1TimeoutH™dÀr
, 
Ál£
, 
LEX_REPLUG_TPS1_TIMEOUT
);

412 
	`InôEdidVÆues
();

414 
	`DPCD_InôülizeRexVÆues
();

417 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_EVENT_ENTER
);

418 
	}
}

428 
	$LexLtVsAdvîti£Alg‹ôhm
()

430 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_LEX_LT_CR_STATUS
, 
	`AUX_LexHasCR
());

432 i‡(
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
 !
TPS_0
)

434 i‡(
	`AUX_LexHasCR
())

436 
ÀxTønsInôCtx
.
lök
.
œ°GoodVS
 =ÜexTønsInôCtx.lök.
vs
[0];

438 if(
	`LexAdvîti£NextVsAvaûabÀ
())

440 
ÀxTønsInôCtx
.
lök
.
vsSèã
 = 
cuºítVSPaús
[ÀxTønsInôCtx.lök.vsSèã].
√xtVSSëtög
;

443 i‡(
ÀxTønsInôCtx
.
lök
.
ªadVS
[0] !
cuºítVSPaús
[ÀxTønsInôCtx.lök.
vsSèã
].
vs
)

445 
ÀxTønsInôCtx
.
lök
.
lökSètusUpd©ed
 = 
åue
;

450 i‡(
ÀxTønsInôCtx
.
lök
.
œ°GoodVS
 != 0xff)

452 
ÀxTønsInôCtx
.
lök
.
föÆVS
 = 
åue
;

456 i‡(
	`LexAdvîti£NextVsAvaûabÀ
(Ë&& (
ÀxTønsInôCtx
.
lök
.
vsSèã
 < 
	`ARRAYSIZE
(
cuºítVSPaús
) -2))

458 
ÀxTønsInôCtx
.
lök
.
vsSèã
++;

463 
	}
}

473 
	$LexLtPeAdvîti£Alg‹ôhm
()

475 i‡(
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
 !
TPS_0
)

477 i‡(
	`LexAdvîti£NextPeAvaûabÀ
())

479 
ÀxTønsInôCtx
.
lök
.
≥Sèã
++;

481 i‡(
ÀxTønsInôCtx
.
lök
.
ªadPE
[0] !ÀxTønsInôCtx.lök.
≥Sèã
)

483 
ÀxTønsInôCtx
.
lök
.
lökSètusUpd©ed
 = 
åue
;

487 
	}
}

497 
	$LexAuxH™dÀReque°
(
AUX_Reque°
 *
ªq
, 
AUX_Rïly
 *
ª∂y
)

499 i‡(!
	`AUX_Reque°IsI2c
(
ªq
))

501 
	`LexH™dÀN©iveAuxReque°
(
ªq
, 
ª∂y
);

505 
	`LexH™dÀI2cReque°
(
ªq
, 
ª∂y
);

507 
	}
}

517 
	$AUX_DpLexI§EvítH™dÀr
(
uöt32_t
 
i§Ty≥
)

519 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_DP_ISR
, 
i§Ty≥
);

521 
i§Ty≥
)

523 
DP_SINK_IRQ_PENDING_TU_SIZE_RDY_MASK
:

525 
	`DP_LexE«bÀCou¡ögFømes
(
Ál£
);

526 
	`TIMING_TimîSèπ
(
ÀxTønsCtx
.
ÂsCÆcuœãTimî
);

527 
	`DP_LexE«bÀCou¡ögFømes
(
åue
);

528 
ÀxTønsCtx
.
‰ameCou¡SèπTime
 = 
	`LEON_TimîRód
();

532 
DP_SINK_IRQ_PENDING_VBD_MAJORITY_FAIL_MASK
:

535 i‡(
ÀxTønsInôCtx
.
ÀxVbdEº‹Cou¡
 >
LEX_ERROR_RECOVERY_MAX_COUNT
)

537 
	`AUX_LexAâem±Eº‹Recovîy
(
LEX_EXTRACTION_ERROR
);

538 
ÀxTønsInôCtx
.
ÀxVbdEº‹Cou¡
 = 0;

542 
ÀxTønsInôCtx
.
ÀxVbdEº‹Cou¡
++;

546 
DP_SINK_IRQ_PENDING_MSA_MAJORITY_FAIL_MASK
:

547 
	`AUX_LexAâem±Eº‹Recovîy
(
LEX_EXTRACTION_ERROR
);

550 
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK
:

551 
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK
:

552 
	`AUX_LexAâem±Eº‹Recovîy
(
LEX_STREAM_ERROR
);

555 
DP_SINK_IRQ_PENDING_NOVIDEOSTREAM_MASK
:

556 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_NO_VIDEO_SIGNAL
);

559 
DP_SINK_IRQ_PENDING_AUDIOMUTE_MASK
:

560 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_AUDIO_MUTE_STATUS_CHANGE
);

563 
BB_TOP_IRQ_PENDING_FREQ_DET_DP_OOR_MASK
:

564 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_LEX_HOST_SHUTDOWN
);

565 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_FRQ_OUT_OF_RANGE_DETECTED
);

571 
	}
}

581 
	$LexLtSèãSídEvítWôhNoD©a
(
LexLtEvít
 
evít
)

583 
	`LexLtSèãSídEvítWôhD©a
(
evít
, 
NULL
);

584 
	}
}

594 
	$LexLökBwSëWrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
)

596 
ÀxTønsCtx
.
dpC⁄fig
.
bw
 = 
d©a
;

597 
	}
}

607 
DpcdRódSètus
 
	$LexLökBwSëRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
)

609 *
buf„r
 = (
ÀxTønsCtx
.
dpC⁄fig
.
bw
 =
BW_INVALID
Ë? 
BW_1_62_GBPS
 :ÜexTransCtx.dpConfig.bw;

610  
READ_ACK
;

611 
	}
}

621 
	$LexL™eCou¡SëWrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
)

623 
ÀxTønsCtx
.
dpC⁄fig
.
lc
 = 
d©a
 & 
MAX_LANE_COUNT_MASK
;

624 
ÀxTønsCtx
.
dpC⁄fig
.
íh™˚dFømög
 = 
d©a
 & (1 << 7);

626 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_LANE_COUNT_SET
,

627 
ÀxTønsCtx
.
dpC⁄fig
.
lc
,ÜexTønsCtx.dpC⁄fig.
íh™˚dFømög
);

628 
	}
}

641 
DpcdRódSètus
 
	$LexL™eCou¡SëRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
)

643 *
buf„r
 = (
ÀxTønsCtx
.
dpC⁄fig
.
lc
 =
LANE_COUNT_INVALID
Ë? (
	`DPCD_DpcdRegi°îRód
(
MAX_LANE_COUNT
Ë& 
MAX_LANE_COUNT_MASK
) :ÜexTransCtx.dpConfig.lc;

644 *
buf„r
 |(
ÀxTønsCtx
.
dpC⁄fig
.
íh™˚dFømög
 << 7);

645  
READ_ACK
;

646 
	}
}

656 
	$LexTrP©ã∫SëWrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
)

658 
	`DP_SëAPBtoAXImode
();

665 
	`DPCD_DpcdRegi°îWrôe
(
TRAINING_PATTERN_SET
, 
d©a
, 
åue
);

668 
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
 = 
d©a
 & 0x3;

670 
ÀxTønsInôCtx
.
symEºCou¡Sñ
 = (
d©a
 & 
SYMBOL_ERROR_COUNT_SEL_MASK
) >> 6;

672 if(!
	`memeq
(&
ÀxTønsInôCtx
.
dpC⁄figBackup
, &
ÀxTønsCtx
.
dpC⁄fig
, (lexTransInitCtx.dpConfigBackup)))

674 
	`mem˝y
(&
ÀxTønsInôCtx
.
dpC⁄figBackup
, &
ÀxTønsCtx
.
dpC⁄fig
, (lexTransInitCtx.dpConfigBackup));

678 
	`LexE«bÀDes¸ambÀr
(
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
 =
TPS_0
 && !
	`DP_DpSökInRe£t
());

680 
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
)

682 
TPS_0
:

684 
TPS_1
:

685 i‡(
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 =
LT_PE_ADVERTISE
)

687 
	`AUX_MakeSëtögUnsuµ‹ãd
();

689 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_TPS1_REQUEST
);

690 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
AUX_DP_CONFIG
,

691 
ÀxTønsCtx
.
dpC⁄fig
.
bw
,

692 
ÀxTønsCtx
.
dpC⁄fig
.
lc
,

693 
ÀxTønsCtx
.
dpC⁄fig
.
íh™˚dFømög
);

695 
TPS_2
:

696 
TPS_3
:

697 
	`_I2CD_lökTøöögTPS23Re˚ived
(
lökTøöögTPS23ˇŒback
);

699 
CPAT2520_1
:

700 
CPAT2520_2p
:

701 
CPAT2520_2m
:

702 
CPAT2520_3
:

703 
PLTPAT
:

704 
PRBS_7
:

708 
	`DP_SëTøöögP©ã∫Sequí˚
(
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
);

712 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_SAME_REQUEST
, 
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
);

714 
	}
}

724 
	$LexTrL™eXSëWrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
)

726 c⁄° 
uöt8_t
 
œ√Index
 = 
ªg
->
addªss
 - 
TRAINING_LANE0_SET
;

727 
uöt8_t
 
ﬁdPE
 = 
ÀxTønsInôCtx
.
lök
.
≥
[
œ√Index
];

731 
ÀxTønsInôCtx
.
lök
.
vs
[
œ√Index
] = (
d©a
 >> 
VOLTAGE_SWING_SET_OFFSET
) & 0x3;

732 
ÀxTønsInôCtx
.
lök
.
≥
[
œ√Index
] = (
d©a
 >> 
PREEMPHASIS_SET_OFFSET
) & 0x3;

735 if(
	`IsLexLa°L™eReque°
(
œ√Index
))

737 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_TRAINING_LANEX_SET_REQUEST
, 
ªg
->
addªss
, 
d©a
);

739 if(
ÀxTønsInôCtx
.
lök
.
ö¸ó£VS
)

741 
ÀxTønsInôCtx
.
lök
.
ö¸ó£VS
 = 
Ál£
;

743 if(
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 =
LT_CHECK_RETIMER_LOCK
)

745 
	`I2CD_lökTøöögPﬁlF‹PŒLock
(
RëimîLockCheckH™dÀr
);

747 if(
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 =
LT_GTP_SETUP
)

749 
	`DP_C⁄figuªDpTøns˚ivîLex
(
Tøns˚ivîC⁄figCÆlback
);

754 if(
ÀxTønsInôCtx
.
lök
.
≥
[
œ√Index
] !
ﬁdPE
)

756 
	`DP_E«bÀL™eAlig√r
(
Ál£
, 
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
);

757 
	`DP_E«bÀL™eAlig√r
(
åue
, 
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
);

760 
	}
}

770 
DpcdRódSètus
 
	$LexTrL™eXSëRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
)

772 c⁄° 
uöt8_t
 
œ√Index
 = 
ªg
->
addªss
 - 
TRAINING_LANE0_SET
;

773 c⁄° 
uöt8_t
 
ª∂yD©a
 = (
ÀxTønsInôCtx
.
lök
.
vs
[
œ√Index
] << 
VOLTAGE_SWING_SET_OFFSET
) |

774 (
ÀxTønsInôCtx
.
lök
.
≥
[
œ√Index
] << 
PREEMPHASIS_SET_OFFSET
);

775 *
buf„r
 = 
ª∂yD©a
;

777  
READ_ACK
;

778 
	}
}

788 
	$LexPowîSaveWrôeH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 
d©a
, 
boﬁ
 
byHo°
)

790 
	`DPCD_DpcdRegi°îWrôe
(
SET_POWER_AND_SET_DP_PWR_VOLTAGE
, 
d©a
, 
åue
);

792 
	`DP_Lex_SèπRexPowîDownTimî
();

801 
	}
}

811 
DpcdRódSètus
 
	$LexSökSètusRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
)

813 c⁄° 
boﬁ
 
gŸAlignmít
 = !
	`DP_DpSökInRe£t
(Ë&& 
	`DP_GŸL™eAlignmít
();

816 *
buf„r
 = 
gŸAlignmít
;

817  
READ_ACK
;

818 
	}
}

828 
DpcdRódSètus
 
	$LexL™eXYSètusRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
)

830 if(
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 <
LT_WAIT_TPS1
)

832 *
buf„r
 = 0;

833  
READ_ACK
;

836 if(!
ÀxTønsInôCtx
.
lök
.
ö¸ó£VS
 && (
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 >
LT_RETIMER_CR
Ë&& (ÀxTønsCtx.°©eMachöeInfo.cuºítSèã <
LT_GTP_SETUP
))

838 i‡(
	`AUX_GëDe„rC¡
() <= 3)

840 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_SEND_DEFER
, 
__LINE__
);

841  
READ_DEFER
;

845 *
buf„r
 = 0;

846 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_LANEX_Y_STATUS
, 
ªg
->
addªss
, *
buf„r
);

847  
READ_ACK
;

851 
uöt8_t
 
ª•⁄£
 = 0;

852 
boﬁ
 
gŸClockRecovîy
 = 
	`AUX_LexHasCR
() &&

853 (
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 >
LT_WAIT_TPS23
);

854 
boﬁ
 
symbﬁLock
 = 
	`AUX_LexHasSymbﬁLock
();

855 
boﬁ
 
ªgRód
 = ((
ÀxTønsCtx
.
dpC⁄fig
.
lc
 <
LANE_COUNT_2
Ë&& (
ªg
->
addªss
 =
LANE0_1_STATUS
)) ||

856 ((
ÀxTønsCtx
.
dpC⁄fig
.
lc
 =
LANE_COUNT_4
Ë&& (
ªg
->
addªss
 =
LANE2_3_STATUS
));

858 c⁄° 
uöt8_t
 
ch™√lSètus
 = (
gŸClockRecovîy
 << 0) |

859 (
symbﬁLock
 << 1) |

860 (
symbﬁLock
 << 2);

863 if(((
ªg
->
addªss
 =
LANE0_1_STATUS
Ë&& (
ÀxTønsCtx
.
dpC⁄fig
.
lc
 > 
LANE_COUNT_1
)) ||

864 ((
ªg
->
addªss
 =
LANE2_3_STATUS
Ë&& (
ÀxTønsCtx
.
dpC⁄fig
.
lc
 =
LANE_COUNT_4
)))

866 
ª•⁄£
 = 
ch™√lSètus
 | (channelStatus << 4);

868 if((
ªg
->
addªss
 =
LANE0_1_STATUS
Ë&& (
ÀxTønsCtx
.
dpC⁄fig
.
lc
 =
LANE_COUNT_1
))

870 
ª•⁄£
 = 
ch™√lSètus
;

874 i‡(
ÀxTønsInôCtx
.
lök
.
¥evLökSètus
 !
ª•⁄£
)

876 
ÀxTønsInôCtx
.
lök
.
¥evLökSètus
 = 
ª•⁄£
;

877 
ÀxTønsInôCtx
.
lök
.
lökSètusUpd©ed
 = 
åue
;

881 if(
gŸClockRecovîy
 && 
symbﬁLock
 && 
ªgRód
)

883 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_SYMBOL_LOCKED
);

886 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_LANEX_Y_STATUS
, 
ªg
->
addªss
, 
ª•⁄£
);

888 *
buf„r
 = 
ª•⁄£
;

889  
READ_ACK
;

890 
	}
}

900 
DpcdRódSètus
 
	$LexL™eAlignRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
)

902 if((
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 >
LT_RETIMER_CR
Ë&& (ÀxTønsCtx.°©eMachöeInfo.cuºítSèã <
LT_GTP_SETUP
))

904 i‡((
	`AUX_GëDe„rC¡
(Ë<3Ë&& !
ÀxTønsInôCtx
.
lök
.
ö¸ó£VS
)

906 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_SEND_DEFER
, 
__LINE__
);

907  
READ_DEFER
;

911 *
buf„r
 = 0;

912 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_LANE_ALIGN_STATUS_UPDATED
, *
buf„r
);

913  
READ_ACK
;

917 
boﬁ
 
öãæ™eAlignD⁄e
 = 
Ál£
;

919 i‡(
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 =
LT_PE_ADVERTISE
)

921 if(
	`LexLtRóchedHighe°Levñ
())

923 
boﬁ
 
gŸL™eAlignmít
 = 
	`DP_GŸL™eAlignmít
();

926 i‡(
gŸL™eAlignmít
 && !
ÀxTønsInôCtx
.
lök
.
checkLöeEº‹
)

928 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_SEND_DEFER
, 
__LINE__
);

929 
ÀxTønsInôCtx
.
lök
.
checkLöeEº‹
 = 
åue
;

930 
	`DP_Re£tEº‹C¡
();

931  
READ_DEFER
;

934 i‡(
gŸL™eAlignmít
 && 
ÀxTønsInôCtx
.
lök
.
checkLöeEº‹
 && !
	`DP_CheckLöeEº‹C¡
(0))

936 
ÀxTønsInôCtx
.
lök
.
checkLöeEº‹
 = 
Ál£
;

938 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_LINK_TRAINED
, 
ÀxTønsInôCtx
.
lök
.
vs
[0],ÜexTønsInôCtx.lök.
≥
[0]);

939 i‡(((
ÀxTønsInôCtx
.
lök
.
≥
[0] !1Ë|| (ÀxTønsInôCtx.lök.
vs
[0] !2)Ë&& (
	`TEST_GëDügSèã
()))

941 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_LT_NOT_HIGH_SETTING
);

943 
öãæ™eAlignD⁄e
 = 
åue
;

944 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_LANE_ALIGNED
);

948 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_ERROR
, 
DP_LEX_EQ_FAIL
,

949 
ÀxTønsInôCtx
.
lök
.
vs
[0],ÜexTønsInôCtx.lök.
≥
[0], 
gŸL™eAlignmít
);

951 
ÀxTønsInôCtx
.
lök
.
≥FaûuªCou¡
++;

953 if(
ÀxTønsInôCtx
.
lök
.
≥FaûuªCou¡
 >= 3)

955 if(
ÀxTønsInôCtx
.
lök
.
≥
[0] != 0)

957 
	`AUX_MakeSëtögUnsuµ‹ãd
();

958 
ÀxTønsInôCtx
.
lök
.
checkLöeEº‹
 = 
Ál£
;

959 
ÀxTønsInôCtx
.
lök
.
≥FaûuªCou¡
 = 0;

960 
ÀxTønsInôCtx
.
lök
.
≥Sèã
 =ÜexTønsInôCtx.lök.
≥
[0] - 1;

961 
ÀxTønsInôCtx
.
lök
.
lökSètusUpd©ed
 = 
åue
;

966 
	`DP_Re£tEº‹C¡
();

967  
READ_DEFER
;

973 
ÀxTønsInôCtx
.
lök
.
lökSètusUpd©ed
 = 
åue
;

974 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_NEXT_SETTING
);

977 if(
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 =
LT_LINK_TRAINED
)

979 
öãæ™eAlignD⁄e
 = 
	`DP_GŸL™eAlignmít
();

982 *
buf„r
 = 
öãæ™eAlignD⁄e
? 1 : 0;

984 i‡(
ÀxTønsInôCtx
.
lök
.
lökSètusUpd©ed
)

986 *
buf„r
 |
LINK_STATUS_UPDATED
;

987 
ÀxTønsInôCtx
.
lök
.
lökSètusUpd©ed
 = 
Ál£
;

991 *
buf„r
 &= ~0x80;

994 i‡(
ÀxTønsInôCtx
.
lök
.
ªadDeÁu…Sètus
)

996 *
buf„r
 = 
	`DPCD_DpcdRegi°îRód
(
LANE_ALIGN_STATUS_UPDATED
);

997 
ÀxTønsInôCtx
.
lök
.
ªadDeÁu…Sètus
 = 
Ál£
;

1000 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_LANE_ALIGN_STATUS_UPDATED
, *
buf„r
);

1002  
READ_ACK
;

1003 
	}
}

1013 
DpcdRódSètus
 
	$LexAdju°L™eXYRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
)

1015 if–!
ÀxTønsInôCtx
.
lök
.
ö¸ó£VS
 &&

1016 (
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 >
LT_RETIMER_CR
 &&ÜexTønsCtx.°©eMachöeInfo.cuºítSèã <
LT_GTP_SETUP
))

1018 i‡(
	`AUX_GëDe„rC¡
() <= 3)

1020 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_SEND_DEFER
, 
__LINE__
);

1021  
READ_DEFER
;

1025 *
buf„r
 = 0x0;

1026 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_GOT_READ_ADJUST_REQUEST
, *
buf„r
);

1027  
READ_ACK
;

1031 c⁄° 
uöt8_t
 
œ√XIndex
 = (
ªg
->
addªss
 =
ADJUST_REQUEST_LANE0_1
) ? 0 : 2;

1032 c⁄° 
uöt8_t
 
œ√YIndex
 = 
œ√XIndex
 + 1;

1034 
uöt8_t
 
ª•
 = 0;

1036 i‡(
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
 !
TPS_0
)

1039 if((
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 > 
LT_WAIT_TPS1
) &&

1040 (
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 <
LT_VS_ADVERTISE
))

1042 
boﬁ
 
£âögD⁄e
 = 
Ál£
;

1045 i‡(
ÀxTønsInôCtx
.
lök
.
föÆVS
)

1047 
ÀxTønsInôCtx
.
lök
.
ªadVS
[
œ√XIndex
] =ÜexTønsInôCtx.lök.
œ°GoodVS
;

1048 
ÀxTønsInôCtx
.
lök
.
ªadVS
[
œ√YIndex
] =ÜexTønsInôCtx.lök.
œ°GoodVS
;

1049 
£âögD⁄e
 = 
åue
;

1054 
ÀxTønsInôCtx
.
lök
.
ªadVS
[
œ√XIndex
] = 
cuºítVSPaús
[ÀxTønsInôCtx.lök.
vsSèã
].
vs
;

1055 
ÀxTønsInôCtx
.
lök
.
ªadVS
[
œ√YIndex
] = 
cuºítVSPaús
[ÀxTønsInôCtx.lök.
vsSèã
].
vs
;

1056 
£âögD⁄e
 = 
	`AUX_LexHasCR
(Ë&& !
	`LexAdvîti£NextVsAvaûabÀ
();

1059 i‡(((
ÀxTønsCtx
.
dpC⁄fig
.
lc
 =
LANE_COUNT_4
Ë&& (
ªg
->
addªss
 =
ADJUST_REQUEST_LANE2_3
)) ||

1060 ((
ÀxTønsCtx
.
dpC⁄fig
.
lc
 =
LANE_COUNT_2
 ||ÜexTønsCtx.dpC⁄fig.l¯=
LANE_COUNT_1
Ë&& (
ªg
->
addªss
 =
ADJUST_REQUEST_LANE0_1
)))

1062 if(
£âögD⁄e
)

1064 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_SETTING_DONE
);

1068 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_NEXT_SETTING
);

1073 i‡((
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 > 
LT_WAIT_TPS23
) &&

1074 (
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 < 
LT_LINK_TRAINED
))

1076 
ÀxTønsInôCtx
.
lök
.
ªadPE
[
œ√XIndex
] =ÜexTønsInôCtx.lök.
≥Sèã
;

1077 
ÀxTønsInôCtx
.
lök
.
ªadPE
[
œ√YIndex
] =ÜexTønsInôCtx.lök.
≥Sèã
;

1081 i‡((
ÀxTønsCtx
.
dpC⁄fig
.
lc
 =
LANE_COUNT_4
) ||

1082 ((
ÀxTønsCtx
.
dpC⁄fig
.
lc
 =
LANE_COUNT_2
Ë&& (
ªg
->
addªss
 =
ADJUST_REQUEST_LANE0_1
)))

1084 
ª•
 = (
ÀxTønsInôCtx
.
lök
.
ªadVS
[
œ√XIndex
] << 0) |

1085 (
ÀxTønsInôCtx
.
lök
.
ªadPE
[
œ√XIndex
] << 2) |

1086 (
ÀxTønsInôCtx
.
lök
.
ªadVS
[
œ√YIndex
] << 4) |

1087 (
ÀxTønsInôCtx
.
lök
.
ªadPE
[
œ√YIndex
] << 6);

1089 if((
ÀxTønsCtx
.
dpC⁄fig
.
lc
 =
LANE_COUNT_1
Ë&& (
ªg
->
addªss
 =
ADJUST_REQUEST_LANE0_1
))

1091 
ª•
 = (
ÀxTønsInôCtx
.
lök
.
ªadVS
[
œ√XIndex
] << 0) |

1092 (
ÀxTønsInôCtx
.
lök
.
ªadPE
[
œ√XIndex
] << 2);

1096 
	`DP_Re£tEº‹C¡
();

1098 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
LEX_VS
, 
ÀxTønsInôCtx
.
lök
.
ªadVS
[
œ√XIndex
]);

1099 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
LEX_PE
, 
ÀxTønsInôCtx
.
lök
.
ªadPE
[
œ√XIndex
]);

1100 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_GOT_READ_ADJUST_REQUEST
, 
ª•
);

1102 *
buf„r
 = 
ª•
;

1103  
READ_ACK
;

1104 
	}
}

1112 
DpcdRódSètus
 
	$LEXSymEºC¡L™eXYRódH™dÀr
(
DpcdRegi°î
 *
ªg
, 
uöt8_t
 *
buf„r
)

1114 
boﬁ
 
oddEvíAddªss
 = 
ªg
->
addªss
 & 0x1;

1116 if(
ÀxTønsCtx
.
°©eMachöeInfo
.
cuºítSèã
 < 
LT_WAIT_TPS23
)

1118 i‡(
oddEvíAddªss
)

1120 *
buf„r
 &~
VALID
;

1121  
READ_ACK
;

1125 
uöt16_t
 
ª•
;

1126 
uöt8_t
 
loˇlL™eNumbî
;

1129 i‡(
ªg
->
addªss
 == 0x210 ||Ñeg->address == 0x211)

1131 
loˇlL™eNumbî
 = 
LANE0
;

1133 if(
ªg
->
addªss
 == 0x212 ||Ñeg->address == 0x213)

1135 
loˇlL™eNumbî
 = 
LANE1
;

1137 if(
ªg
->
addªss
 == 0x214 ||Ñeg->address == 0x215)

1139 
loˇlL™eNumbî
 = 
LANE2
;

1143 
loˇlL™eNumbî
 = 
LANE3
;

1147 
ÀxTønsInôCtx
.
symEºCou¡Sñ
)

1149 
DISP_NIT
:

1150 
ª•
 = 
	`DP_SymbﬁEºCou¡L™eXY
(
DISPARITY_ERROR
, 
loˇlL™eNumbî
Ë+ DP_SymbﬁEºCou¡L™eXY(
NIT_ERROR
,ÜocalLaneNumber);

1152 
DISP_ONLY
:

1153 
ª•
 = 
	`DP_SymbﬁEºCou¡L™eXY
(
DISPARITY_ERROR
, 
loˇlL™eNumbî
);

1155 
NIT_ONLY
:

1156 
ª•
 = 
	`DP_SymbﬁEºCou¡L™eXY
(
NIT_ERROR
, 
loˇlL™eNumbî
);

1159 
ª•
 = 0;

1165 i‡(
oddEvíAddªss
)

1167 *
buf„r
 = (
ª•
 & 0xFF00) >> 8;

1168 *
buf„r
 |
VALID
;

1172 *
buf„r
 = 
ª•
 & 0xFF;

1175 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_LEX_SYMBOL_ERROR_COUNT_LANEXY
, 
ªg
->
addªss
, *
buf„r
);

1177  
READ_ACK
;

1179 
	}
}

1188 
	$ReInôüãLökTøöög
()

1190 
ÀxTønsInôCtx
.
lök
.
ªadDeÁu…Sètus
 = 
åue
;

1192 
	`DPCD_DpcdRegi°îWrôe
(
LANE_ALIGN_STATUS_UPDATED
,

1193 (
	`DPCD_DpcdRegi°îRód
(
LANE_ALIGN_STATUS_UPDATED
Ë& 
CLEAR_INTERLANE_ALIGN_DONE_OFFSET
Ë| 
LINK_STATUS_UPDATED
,

1194 
Ál£
);

1196 
	`DPCD_DpcdRegi°îWrôe
(
LANE_ALIGN_STATUS_UPDATED_ESI
,

1197 (
	`DPCD_DpcdRegi°îRód
(
LANE_ALIGN_STATUS_UPDATED_ESI
Ë& 
CLEAR_INTERLANE_ALIGN_DONE_OFFSET
Ë| 
LINK_STATUS_UPDATED
,

1198 
Ál£
);

1200 
	`HPD_SídRïlug
();

1202 
	`TIMING_TimîSèπ
(
ÀxTønsCtx
.
ª∂ugToTps1Timeout
);

1203 
	}
}

1211 
boﬁ
 
	$AUX_SëLexVsPe
–
VﬁègeSwög
 
vs
, 
PªEmphasis
 
≥
)

1213 
C⁄figDpC⁄fig
 
dpC⁄fig
;

1215 i‡(
	`bb_t›_IsDevi˚Lex
())

1217 i‡(
	`C⁄fig_ArbôøãGëV¨
(
CONFIG_VAR_BB_DP_CONFIG
, &
dpC⁄fig
))

1219 
dpC⁄fig
.
vﬁègeSwög
 = 
vs
;

1220 
dpC⁄fig
.
¥eEmphasis
 = 
≥
;

1222 i‡(
	`C⁄fig_ArbôøãSëV¨
(
CONFIG_SRC_UART
, 
CONFIG_VAR_BB_DP_CONFIG
, &
dpC⁄fig
))

1224 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
LEX_VS
, 
dpC⁄fig
.
vﬁègeSwög
);

1225 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
LEX_PE
, 
dpC⁄fig
.
¥eEmphasis
);

1231 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
DP_REX_ICMD
);

1234  
Ál£
;

1235 
	}
}

1244 
uöt32_t
 
	$DP_LEX_GëCou¡edFps
()

1246  
ÀxTønsInôCtx
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
.
Âs
;

1247 
	}
}

1257 
	$DP_LEX_CÀ¨EºCou¡î
()

1259 
	`DP_PrötLexI°©usMesßges
();

1260 
ÀxTønsInôCtx
.
ÀxExåa˘i⁄Eº‹Cou¡
 = 0;

1261 
ÀxTønsInôCtx
.
ÀxVbdEº‹Cou¡
 = 0;

1262 
ÀxTønsInôCtx
.
ÀxSåómEº‹Cou¡
 = 0;

1263 
	`AUX_LexCÀ¨MßRëryCou¡î
();

1264 
	}
}

1273 
	$DP_LEX_ª£tSåómExåa˘‹
()

1275 
	`TIMING_TimîSt›
(
ÀxTønsCtx
.
ÂsCÆcuœãTimî
);

1277 
	`DP_SökE«bÀSåómExåa˘‹
(
Ál£
);

1278 
	`TIMING_TimîSèπ
(
ÀxTønsCtx
.
£Re£tTimî
);

1279 
	}
}

1290 
	$AUX_LexE«bÀSåómExåa˘‹
()

1292 
	`DP_SökE«bÀSåómExåa˘‹
(
åue
);

1293 
	}
}

1304 
	$AUX_LexFpsCÆcuœãH™dÀr
()

1306 c⁄° 
uöt32_t
 
‰amePîiod
 = 
	`DP_LexFømeCou¡
();

1307 
	`DP_LexE«bÀCou¡ögFømes
(
Ál£
);

1309 if(
‰amePîiod
)

1311 c⁄° 
uöt64_t
 
sy°emClk
 = (uöt64_t)
CLOCK_MEASURE_FPS
 * 1000;

1312 c⁄° 
uöt32_t
 
Âs
 = 
sy°emClk
 / 
‰amePîiod
;

1313 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
AUX_FPS
, 
‰amePîiod
, 
Âs
);

1315 
ÀxTønsCtx
.
mßFaûCode
 = 
	`DP_LexIsMßVÆid
(
Âs
, 
	`Aux_GëSymbﬁClock
÷exTønsCtx.
dpC⁄fig
.
bw
,ÜexTønsCtx.dpC⁄fig.
sscDëe˘ed
));

1317 
ÀxTønsCtx
.
mßFaûCode
)

1319 
LEX_MSA_VALID
:

1320 
	`AUX_LexPro˚ssMßP¨ams
(
Âs
);

1323 
LEX_MSA_YCBCR422
:

1324 
LEX_MSA_ALIGN_ERROR
:

1325 
	`LexPmSèãSídEvítWôhD©a
(
LEX_AUX_WRONG_MSA_NEED_RETRAIN
,

1326 (
LexPmEvítD©a
*)(&
ÀxTønsCtx
.
mßFaûCode
));

1329 
LEX_MSA_NEED_REFRESH
:

1332 
	`AUX_LexAâem±Eº‹Recovîy
(
LEX_EXTRACTION_ERROR
);

1336 
LEX_MSA_10BPC
:

1337 
LEX_MSA_VALID_SYMBOLS
:

1347 
	}
}

1358 
	$AUX_LexHpdDownTime
()

1360 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_HPD_MIN_DOWN_TIME
);

1361 
	}
}

1370 
	$AUX_LexPro˚ssMßP¨ams
(
uöt32_t
 
‰ameR©e
)

1372 
DP_SåómP¨amëîs
 *
å™sInôCtxSåómP¨am
 = &
ÀxTønsInôCtx
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
;

1373 
DP_SåómP¨amëîs
 
°ªamP¨amBuf
;

1375 
	`DP_LexGëVÆidSåómP¨amëîs
(&
°ªamP¨amBuf
);

1377 
	`mem˝y
(
å™sInôCtxSåómP¨am
, &
°ªamP¨amBuf
, (
DP_SåómP¨amëîs
));

1379 
ÀxTønsInôCtx
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
 = 
ÀxTønsCtx
.
dpC⁄fig
.bw;

1380 
ÀxTønsInôCtx
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
 = 
ÀxTønsCtx
.
dpC⁄fig
.lc;

1381 
ÀxTønsInôCtx
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
íh™˚dFømögE«bÀ
 =

1382 
ÀxTønsCtx
.
dpC⁄fig
.
íh™˚dFømög
;

1383 
ÀxTønsInôCtx
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
íabÀSsc
 = 
ÀxTønsCtx
.
dpC⁄fig
.
sscDëe˘ed
;

1384 
ÀxTønsInôCtx
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
.
Âs
 = 
‰ameR©e
;

1386 
ÀxTønsInôCtx
.
pmEvítD©a
.
lökAndSåómP¨amëîs
 = &lexTransInitCtx.linkAndStreamParameters;

1388 
	`DP_LexVideoInfo
();

1389 i‡(
	`TEST_GëDügSèã
())

1391 
	`TEST_PrötTe°V¨übÀs
();

1393 
	`LexPmSèãSídEvítWôhD©a
(
LEX_AUX_MSA_READY
, &
ÀxTønsInôCtx
.
pmEvítD©a
);

1394 
	}
}

1404 
	$LexLtSèãSídEvítWôhD©a
(
LexLtEvít
 
evít
, 
LexLtEvítD©a
 *
evítD©a
)

1407 
uöt32_t
 
evítx
 = 
evít
;

1409 
	`CALLBACK_Run
(
LexLtEvítCÆlback
, (*)
evítx
, (*)
evítD©a
);

1410 
	}
}

1420 
	$LexLtEvítCÆlback
(*
∑øm1
, *
∑øm2
)

1422 
	`UTILSM_Po°Evít
(&
ÀxTønsCtx
.
°©eMachöeInfo
, (
uöt32_t
)
∑øm1
, 
∑øm2
);

1423 
	}
}

1434 
LexLtSèã
 
	$LexLtDißbÀPídögH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1436 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1438 if(
evít
 =
LEX_LT_EVENT_ENTER
)

1441 
	`mem£t
(&
ÀxTønsInôCtx
, 0, ÜexTransInitCtx);

1443 
	`DPCD_InôülizeVÆues
();

1444 
	`AUX_LexCÀ¨DpC⁄fig
();

1446 
	`HPD_Disc⁄√˘
();

1447 
	`bb_t›_Re£tAuxHpd
(
åue
);

1448 
	`TIMING_TimîSèπ
(
ÀxTønsCtx
.
hpdMöDownTime
);

1450 
	`LexLtRe£tMaöComp⁄íts
();

1452 i‡(
dpC⁄figPå
->
íabÀIsﬁ©e
)

1454 
	`LexUpd©eFœshSëtögs
();

1457 if(
evít
 =
LEX_LT_HPD_MIN_DOWN_TIME
)

1460 
	`üs£π_DP_COMPONENT_0
((
ÀxTønsInôCtx
.
°©eFœgs
.
dp159ReöôD⁄e
), 
AUX_DP_159_REINIT_ERROR
);

1461 
√xtSèã
 = 
LT_DISABLED
;

1462 
	`bb_t›_Re£tAuxHpd
(
Ál£
);

1464 if(
evít
 =
LEX_LT_ENABLE
)

1467 
ÀxTønsInôCtx
.
°©eFœgs
.
…E«bÀd
 = 
åue
;

1470  
√xtSèã
;

1471 
	}
}

1482 
LexLtSèã
 
	$LexLtDißbÀdH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1484 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1486 if(
evít
 =
LEX_LT_EVENT_ENTER
)

1488 i‡(
ÀxTønsInôCtx
.
°©eFœgs
.
…E«bÀd
)

1490 
√xtSèã
 = 
LT_WAIT_TPS1
;

1493 if(
evít
 =
LEX_LT_ENABLE
)

1495 
√xtSèã
 = 
LT_WAIT_TPS1
;

1498  
√xtSèã
;

1499 
	}
}

1510 
LexLtSèã
 
	$LexLtPowîedDownH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1512 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1514 if(
evít
 =
LEX_LT_POWER_UP
)

1516 if(
	`LexLökTøöed
())

1518 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_POWER_UP_TRAINED
);

1519 
√xtSèã
 = 
LT_LINK_TRAINED
;

1523 
√xtSèã
 = 
LT_POWER_UP
;

1528 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1530  
√xtSèã
;

1531 
	}
}

1543 
LexLtSèã
 
	$LexLtPowîUpH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1545 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1547 if(
evít
 =
LEX_LT_EVENT_ENTER
)

1549 
	`LexLtRe£tMaöComp⁄íts
();

1551 if(
evít
 =
LEX_LT_RETIMER_REINIT_DONE
)

1553 
√xtSèã
 = 
LT_WAIT_RETRAIN
;

1557 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1559  
√xtSèã
;

1560 
	}
}

1571 
LexLtSèã
 
	$LexLtWaôRëøöH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1573 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1575 if(
evít
 =
LEX_LT_EVENT_ENTER
 ||Évíà=
LEX_LT_REQUEST_RETRAIN
)

1577 
	`ReInôüãLökTøöög
();

1578 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_RETRAIN_REQUEST
);

1580 if(
evít
 =
LEX_LT_TPS1_REQUEST
)

1582 
	`TIMING_TimîSt›
(
ÀxTønsCtx
.
ª∂ugToTps1Timeout
);

1583 
√xtSèã
 = 
LT_RETIMER_CR
;

1587 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1589  
√xtSèã
;

1590 
	}
}

1601 
LexLtSèã
 
	$LexLtWaôTps1H™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1603 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1605 if(
evít
 =
LEX_LT_EVENT_ENTER
)

1608 
	`HPD_C⁄√˘
();

1610 if(
evít
 =
LEX_LT_TPS1_REQUEST
)

1612 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
DP_LINK_TRAINING_STATE
, 
START_CLOCK_RECOVERY
);

1613 
√xtSèã
 = 
LT_RETIMER_CR
;

1617 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1619  
√xtSèã
;

1620 
	}
}

1631 
LexLtSèã
 
	$LexLtRëimîCrH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1633 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1635 if((
evít
 =
LEX_LT_EVENT_ENTER
Ë|| (evíà=
LEX_LT_TPS1_REQUEST
))

1637 
	`AUX_LexLtRëimîCrE¡î
();

1639 if(
evít
 =
LEX_LT_RETIMER_CR_DONE
)

1641 
√xtSèã
 = 
LT_CHECK_RETIMER_LOCK
;

1645 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1647  
√xtSèã
;

1648 
	}
}

1659 
LexLtSèã
 
	$LexLtCheckRëimîLockH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1661 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1663 if(
evít
 =
LEX_LT_EVENT_ENTER
)

1665 
	`I2CD_lökTøöögPﬁlF‹PŒLock
(
RëimîLockCheckH™dÀr
);

1667 if(
evít
 =
LEX_LT_RETIMER_CR_LOCK
)

1669 
√xtSèã
 = 
LT_GTP_SETUP
;

1671 if(
evít
 =
LEX_LT_LOCK_FAIL
)

1673 if(
	`IsLexOnMaxVﬁègeSwög
())

1675 
ÀxTønsCtx
.
åFaûCode
 = 
LEX_TR_FAIL_RETIMER_LOCK
;

1676 
	`LexPmSèãSídEvítWôhD©a
(
LEX_AUX_HOST_LINK_TRAINING_FAIL
, (
LexPmEvítD©a
*)(&
ÀxTønsCtx
.
åFaûCode
));

1677 
√xtSèã
 = 
LT_DISABLE_PENDING
;

1681 
ÀxTønsInôCtx
.
lök
.
ö¸ó£VS
 = 
åue
;

1682 
	`LexLtVsAdvîti£Alg‹ôhm
();

1687 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1689  
√xtSèã
;

1690 
	}
}

1701 
LexLtSèã
 
	$LexLtGçSëupH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1703 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1705 if(
evít
 =
LEX_LT_EVENT_ENTER
)

1707 
	`DP_C⁄figuªDpTøns˚ivîLex
(
Tøns˚ivîC⁄figCÆlback
);

1709 if(
evít
 =
LEX_LT_GTP_SET_DONE
)

1711 if(
ÀxTønsInôCtx
.
°©eFœgs
.
∂lModeCh™ged
)

1713 
√xtSèã
 = 
LT_VS_ADVERTISE
;

1716 if(
evít
 =
LEX_LT_RETIMER_CR_PLL_MODE_CHANGE
)

1718 if(
ÀxTønsInôCtx
.
°©eFœgs
.
gçSëD⁄e
)

1720 
√xtSèã
 = 
LT_VS_ADVERTISE
;

1723 if(
evít
 =
LEX_LT_LOCK_FAIL
)

1725 if(
	`IsLexOnMaxVﬁègeSwög
())

1727 
ÀxTønsCtx
.
åFaûCode
 = 
LEX_TR_FAIL_GTP_LOCK
;

1728 
	`LexPmSèãSídEvítWôhD©a
(
LEX_AUX_HOST_LINK_TRAINING_FAIL
, (
LexPmEvítD©a
*)(&
ÀxTønsCtx
.
åFaûCode
));

1729 
√xtSèã
 = 
LT_DISABLE_PENDING
;

1733 
ÀxTønsInôCtx
.
lök
.
ö¸ó£VS
 = 
åue
;

1734 
	`LexLtVsAdvîti£Alg‹ôhm
();

1739 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1741  
√xtSèã
;

1742 
	}
}

1753 
LexLtSèã
 
	$LexLtVsAdvîti£H™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1755 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1757 if(
evít
 =
LEX_LT_EVENT_ENTER
)

1759 
	`LexLtVsAdvîti£Alg‹ôhm
();

1761 i‡(
evít
 =
LEX_LT_NEXT_SETTING
)

1763 
	`LexLtVsAdvîti£Alg‹ôhm
();

1765 i‡(
evít
 =
LEX_LT_SETTING_DONE
)

1767 
√xtSèã
 = 
LT_WAIT_TPS23
;

1771 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1773  
√xtSèã
;

1774 
	}
}

1785 
LexLtSèã
 
	$LexLtWaôTps23H™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1787 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1789 if(
evít
 =
LEX_LT_EVENT_ENTER
)

1791 i‡(
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
 =
TPS_2
 ||ÜexTønsCtx.dpC⁄fig.a˘iveTøöögP©ã∫ =
TPS_3
)

1793 
	`AUX_LexSèπCh™√lEQ
();

1794 
√xtSèã
 = 
LT_CHECK_GTP_FRQ
;

1797 if(
evít
 =
LEX_LT_TPS23_REQUEST
)

1799 
	`AUX_LexSèπCh™√lEQ
();

1800 
√xtSèã
 = 
LT_CHECK_GTP_FRQ
;

1804 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1806  
√xtSèã
;

1807 
	}
}

1818 
LexLtSèã
 
	$LexLtCheckGçFrqH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1820 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1822 if(
evít
 =
LEX_LT_GTP_FRQ_DONE
)

1824 
√xtSèã
 = 
LT_WAIT_SYMBOL_LOCK
;

1828 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1830  
√xtSèã
;

1831 
	}
}

1842 
LexLtSèã
 
	$LexLtWaôSymbﬁLockH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1844 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1846 if(
evít
 =
LEX_LT_SYMBOL_LOCKED
)

1848 
√xtSèã
 = 
LT_PE_ADVERTISE
;

1852 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1854  
√xtSèã
;

1855 
	}
}

1904 
LexLtSèã
 
	$LexLtPeAdvîti£H™dÀr
–
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1906 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1908 if(
evít
 =
LEX_LT_EVENT_ENTER
)

1910 
	`AUX_LexLtSökWakeupE¡î
();

1912 if(
evít
 =
LEX_LT_LANE_ALIGNED
)

1914 
√xtSèã
 = 
LT_LINK_TRAINED
;

1916 i‡(
evít
 =
LEX_LT_NEXT_SETTING
)

1918 
	`LexLtPeAdvîti£Alg‹ôhm
();

1920 if((
evít
 =
LEX_LT_EVENT_EXIT
Ë&& ((
cuºítSèã
 !
LT_LINK_TRAINED
Ë&& (cuºítSèã !
LT_POWERED_DOWN
)))

1923 
	`DP_Re£tSökAndEncodî
();

1927 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1929  
√xtSèã
;

1930 
	}
}

1941 
LexLtSèã
 
	$LexLtLökTøöedH™dÀr
(
LexLtEvít
 
evít
, 
LexLtSèã
 
cuºítSèã
)

1943 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1945 if(
evít
 =
LEX_LT_EVENT_ENTER
)

1947 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_HOST_LINK_TRAINING_DONE
);

1949 
	`TIMING_TimîSt›
(
ÀxTønsCtx
.
lökTøöögD⁄eTimî
);

1950 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
AUX_DP_CONFIG
,

1951 
ÀxTønsCtx
.
dpC⁄fig
.
bw
,

1952 
ÀxTønsCtx
.
dpC⁄fig
.
lc
,

1953 
ÀxTønsCtx
.
dpC⁄fig
.
íh™˚dFømög
);

1955 if((
evít
 =
LEX_LT_EVENT_EXIT
Ë&& (
cuºítSèã
 !
LT_POWERED_DOWN
))

1958 
	`TIMING_TimîSt›
(
ÀxTønsCtx
.
ÂsCÆcuœãTimî
);

1959 
	`DP_SökE«bÀSåómExåa˘‹
(
Ál£
);

1960 
	`DP_Re£tSökAndEncodî
();

1964 
√xtSèã
 = 
	`AUX_LexLtComm⁄H™dÀr
(
evít
);

1966  
√xtSèã
;

1967 
	}
}

1977 
LexLtSèã
 
	$AUX_LexLtComm⁄H™dÀr
(
LexLtEvít
 
evít
)

1979 
LexLtSèã
 
cuºítSèã
 = 
ÀxTønsCtx
.
°©eMachöeInfo
.currentState;

1980 
LexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

1982 
evít
)

1984 
LEX_LT_DISABLE
:

1985 
√xtSèã
 = 
LT_DISABLE_PENDING
;

1988 
LEX_LT_POWER_DOWN
:

1989 
√xtSèã
 = 
LT_POWERED_DOWN
;

1992 
LEX_LT_TRAINING_TIMEOUT
:

1993 if(
cuºítSèã
 >
LT_RETIMER_CR
 && cuºítSèã <=
LT_PE_ADVERTISE
)

1995 
ÀxTønsCtx
.
åFaûCode
 = 
LEX_TR_FAIL_TIMEOUT
;

1996 
	`LexPmSèãSídEvítWôhD©a
(
LEX_AUX_HOST_LINK_TRAINING_FAIL
, (
LexPmEvítD©a
*)(&
ÀxTønsCtx
.
åFaûCode
));

1998 
√xtSèã
 = 
LT_DISABLE_PENDING
;

2002 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
LT_INVALID_EVENT
, 
evít
, 
cuºítSèã
);

2006 
LEX_LT_REQUEST_RETRAIN
:

2007 if(
cuºítSèã
 > 
LT_WAIT_RETRAIN
)

2009 
√xtSèã
 = 
LT_WAIT_RETRAIN
;

2013 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
LT_INVALID_EVENT
, 
evít
, 
cuºítSèã
);

2017 
LEX_LT_TPS1_REQUEST
:

2018 if(
cuºítSèã
 >
LT_CHECK_RETIMER_LOCK
)

2020 
√xtSèã
 = 
LT_RETIMER_CR
;

2024 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
LT_INVALID_EVENT
, 
evít
, 
cuºítSèã
);

2028 
LEX_LT_EVENT_ENTER
:

2029 
LEX_LT_EVENT_EXIT
:

2030 
LEX_LT_ENABLE
:

2031 
LEX_LT_SYMBOL_LOCKED
:

2032 
LEX_LT_LANE_ALIGNED
:

2033 
LEX_LT_POWER_UP
:

2034 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
LT_UNHANDLED_EVENT
, 
evít
, 
cuºítSèã
);

2037 
LEX_LT_RETIMER_REINIT_DONE
:

2038 
LEX_LT_TPS23_REQUEST
:

2039 
LEX_LT_RETIMER_CR_DONE
:

2040 
LEX_LT_RETIMER_CR_LOCK
:

2041 
LEX_LT_LOCK_FAIL
:

2042 
LEX_LT_GTP_SET_DONE
:

2043 
LEX_LT_NEXT_SETTING
:

2044 
LEX_LT_SETTING_DONE
:

2045 
LEX_LT_RETIMER_CR_PLL_MODE_CHANGE
:

2046 
LEX_LT_GTP_FRQ_DONE
:

2047 
LEX_LT_HPD_MIN_DOWN_TIME
:

2049 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
LT_INVALID_EVENT
, 
evít
, 
cuºítSèã
);

2052  
√xtSèã
;

2053 
	}
}

2071 
	$AUX_LexLtRëimîCrE¡î
()

2073 
	`DP_Re£tSökAndEncodî
();

2074 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_HOST_REQUEST_TRAINING
);

2076 
	`DP_LexCÀ¨AutoFrqDë
();

2077 
	`I2CD_lökTøöögCRPha£
(
RëimîCRPha£D⁄eH™dÀr
, 
ÀxTønsCtx
.
dpC⁄fig
.
lc
,ÜexTønsCtx.dpC⁄fig.
bw
);

2078 
	`TIMING_TimîSèπ
(
ÀxTønsCtx
.
lökTøöögD⁄eTimî
);

2081 
boﬁ
 
ªöôSave
 = 
ÀxTønsInôCtx
.
°©eFœgs
.
dp159ReöôD⁄e
;

2082 
	`mem£t
(&
ÀxTønsInôCtx
.
lökAndSåómP¨amëîs
, 0, (lexTransInitCtx.linkAndStreamParameters));

2083 
	`mem£t
(&
ÀxTønsInôCtx
.
lök
, 0, (lexTransInitCtx.link));

2085 
ÀxTønsInôCtx
.
lök
.
œ°GoodVS
 = 0xff;

2087 
	`mem£t
(&
ÀxTønsInôCtx
.
°©eFœgs
, 0, (lexTransInitCtx.stateFlags));

2088 
ÀxTønsInôCtx
.
°©eFœgs
.
dp159ReöôD⁄e
 = 
ªöôSave
;

2089 
	}
}

2106 
	$AUX_LexLtSökWakeupE¡î
()

2108 
	`DP_Re£tDpSök
(
Ál£
);

2109 
	`DP_LexISRInô
();

2110 
	`DP_SëL™eCou¡
(
ÀxTønsCtx
.
dpC⁄fig
.
lc
);

2111 
	`DP_SëMaöLökB™dwidth
(
ÀxTønsCtx
.
dpC⁄fig
.
bw
);

2112 
	`DP_SëEnh™˚dFømögE«bÀ
(
ÀxTønsCtx
.
dpC⁄fig
.
íh™˚dFømög
);

2113 
	`DP_SökE«bÀSåómExåa˘‹
(
Ál£
);

2115 
	`DP_E«bÀL™eAlig√r
(
åue
, 
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
);

2116 
	`DP_LexSèπDpFªqDë
();

2119 
	`DP_E«bÀL™esNŸAlig√dC¡
(
åue
);

2120 
	`DP_E«bÀRxByãReAlignC¡
(
åue
);

2121 
	`DP_8b10bE«bÀDisEº‹C¡
(
åue
);

2122 
	`DP_8b10bE«bÀNôEº‹C¡
(
åue
);

2123 
	}
}

2133 
	$LexLtRe£tMaöComp⁄íts
()

2135 
	`DP_Re£tSökAndEncodî
();

2136 
	`DP_Re£tDpTøns˚ivîLex
();

2138 
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
 = 0;

2139 
	`TIMING_TimîSt›
(
ÀxTønsCtx
.
lökTøöögD⁄eTimî
);

2141 
	`bb_t›_ˇn˚lDpC⁄figuªDpTøns˚ivîLex
();

2143 
ÀxTønsInôCtx
.
°©eFœgs
.
dp159ReöôD⁄e
 = 
Ál£
;

2144 
	`DP_LexCÀ¨AutoFrqDë
();

2145 
	`I2CD_dp159Reöôülize
(
RëimîReöôD⁄eH™dÀr
);

2146 
	}
}

2156 
	$AUX_LexLökTøöögTimeoutH™dÀr
()

2158 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_TU_TIMEOUT
);

2159 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_TRAINING_TIMEOUT
);

2160 i‡(
	`TEST_GëDügSèã
())

2162 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_LT_FAIL
);

2164 
	}
}

2174 
	$LexH™dÀI2cReque°
(
AUX_Reque°
 *
ªq
, 
AUX_Rïly
 *
ª∂y
)

2177 c⁄° 
uöt8_t
 
åueD©aLí
 = (
ªq
->
Àn
 =
AUX_MIN_REQUEST_SIZE
Ë? 0 :Ñeq->
hódî
.
d©aLí
 + 1;

2178 c⁄° 
uöt8_t
 
cmd
 = 
ªq
->
hódî
.
comm™d
;

2180 
AUX_I2C_H™dÀr
 
auxI2cH™dÀr
 = 
Aux_I2C_H™dÀrs
[
cmd
];

2182 if(
auxI2cH™dÀr
)

2184 if((
ªq
->
hódî
.
addªss
 =
EDID_ADDRESS
)||‘eq->hódî.addªs†=
MCCS_ADDRESS
))

2186 
	`auxI2cH™dÀr
(
ªq
, 
ª∂y
, 
åueD©aLí
);

2190 
ª∂y
->
hódî
.
comm™d
 = 
I2C_AUX_NACK
;

2191 
ª∂y
->
d©a
[0] = 0;

2192 
ª∂y
->
Àn
 = 2;

2195 
	}
}

2205 
	$LexEdidRódH™dÀr
(
AUX_Reque°
 *
ªq
, 
AUX_Rïly
 *
ª∂y
, 
uöt8_t
 
åueD©aLí
)

2208 
ª∂y
->
hódî
.
comm™d
 = 
I2C_AUX_ACK
;

2209 
ª∂y
->
Àn
 = 
åueD©aLí
 + 1;

2210 
uöt8_t
 
nuŒMsg
[] = {0x6E, 0x80, 0xBE};

2211 i‡(
ªq
->
hódî
.
addªss
 =
EDID_ADDRESS
)

2214 
	`LexLoˇlEdidRód
(
ÀxTønsInôCtx
.
i2cOff£t
, 
åueD©aLí
, &
ª∂y
->
d©a
[0]);

2215 i‡(
ªq
->
hódî
.
comm™d
 =
I2C_AUX_READ_MOT
)

2217 
ÀxTønsInôCtx
.
i2cOff£t
 +
åueD©aLí
;

2222 
ÀxTønsInôCtx
.
i2cOff£t
 = 0;

2225 i‡(
ªq
->
hódî
.
addªss
 =
MCCS_ADDRESS
)

2227 i‡(
dpC⁄figPå
->
noRódMccs
)

2229 i‡(
mccsReque°C⁄ãxt
.
mccsSètus
)

2231 
mccsReque°C⁄ãxt
.
ty≥
)

2233 
CAP_REQUEST
:

2234 i‡((
ªq
->
hódî
.
comm™d
 =
I2C_AUX_READ_MOT
Ë&& (
åueD©aLí
 > 1))

2236 
mccsFømeCou¡
++;

2237 
	`LexLoˇlMccsRód
(
åueD©aLí
, &
ª∂y
->
d©a
[0], 
mccsFømeCou¡
);

2239 i‡((
ªq
->
hódî
.
comm™d
 =
I2C_AUX_READ
Ë&& (
åueD©aLí
 > 0))

2241 
mccsFømeCou¡
++;

2242 
	`LexLoˇlMccsRód
(
åueD©aLí
, &
ª∂y
->
d©a
[0], 
mccsFømeCou¡
);

2246 
VCP_REQUEST
:

2247 i‡((
ªq
->
hódî
.
comm™d
 =
I2C_AUX_READ_MOT
Ë&& (
åueD©aLí
 > 1))

2249 
	`LexLoˇlV˝Ród
(
åueD©aLí
, &
ª∂y
->
d©a
[0], 
v˝Opcode
);

2251 i‡((
ªq
->
hódî
.
comm™d
 =
I2C_AUX_READ
Ë&& (
åueD©aLí
 > 0))

2253 
	`LexLoˇlV˝Ród
(
åueD©aLí
, &
ª∂y
->
d©a
[0], 
v˝Opcode
);

2257 
ID_REQUEST
:

2260 
TIMING_REQUEST
:

2261 
	`LexLoˇlTimögRód
(
åueD©aLí
, &
ª∂y
->
d©a
[0]);

2264 
CAP_REPLY
:

2265 
VCP_REPLY
:

2266 
ID_REPLY
:

2267 
VCP_SET
:

2268 
VCP_RESET
:

2269 
SAVE_SETTING
:

2272 i‡((
ªq
->
hódî
.
comm™d
 =
I2C_AUX_READ_MOT
 ||Ñeq->hódî.comm™d =
I2C_AUX_READ
Ë&& (
åueD©aLí
 >1))

2274 
	`mem˝y
(&
ª∂y
->
d©a
[0], &
nuŒMsg
[0], 
	`ARRAYSIZE
(nullMsg));

2275 
ª∂y
->
Àn
 = 
	`ARRAYSIZE
(
nuŒMsg
) + 1;

2279 i‡(
ªq
->
hódî
.
comm™d
 =
I2C_AUX_READ
)

2281 
mccsFømeCou¡
 = 0;

2282 
	`mem£t
(&
mccsReque°C⁄ãxt
.
ªque°Såög
[0], 0, 
	`ARRAYSIZE
(mccsRequestContext.requestString));

2283 
	`mem£t
(&
mccsReque°C⁄ãxt
.
ª∂ySåög
[0], 0, 
	`ARRAYSIZE
(mccsRequestContext.replyString));

2284 
mccsReque°C⁄ãxt
.
ª∂ySåögSize
 = mccsReque°C⁄ãxt.
ªque°SåögSize
 = 0;

2290 i‡((
ªq
->
hódî
.
comm™d
 =
I2C_AUX_READ_MOT
 ||Ñeq->hódî.comm™d =
I2C_AUX_READ
Ë&& (
åueD©aLí
 >1))

2292 
mccsFømeCou¡
++;

2293 i‡(
mccsFømeCou¡
 == 1)

2295 
	`mem˝y
(&
ª∂y
->
d©a
[0], &
nuŒMsg
[0], (
size_t
)
	`ARRAYSIZE
(nullMsg));

2296 
ª∂y
->
Àn
 = 
	`ARRAYSIZE
(
nuŒMsg
) + 1;

2300 i‡(
ªq
->
hódî
.
comm™d
 =
I2C_AUX_READ
)

2302 
mccsFømeCou¡
 = 0;

2303 
	`mem£t
(&
mccsReque°C⁄ãxt
.
ªque°Såög
[0], 0, 
	`ARRAYSIZE
(mccsRequestContext.requestString));

2304 
	`mem£t
(&
mccsReque°C⁄ãxt
.
ª∂ySåög
[0], 0, 
	`ARRAYSIZE
(mccsRequestContext.replyString));

2305 
mccsReque°C⁄ãxt
.
ª∂ySåögSize
 = mccsReque°C⁄ãxt.
ªque°SåögSize
 = 0;

2311 
ª∂y
->
hódî
.
comm™d
 = 
I2C_AUX_NACK
;

2312 
ª∂y
->
d©a
[0] = 0;

2313 
ª∂y
->
Àn
 = 2;

2318 
ª∂y
->
hódî
.
comm™d
 = 
I2C_AUX_NACK
;

2319 
ª∂y
->
d©a
[0] = 0;

2320 
ª∂y
->
Àn
 = 2;

2322 
	}
}

2332 
	$LexEdidWrôeH™dÀr
(
AUX_Reque°
 *
ªq
, 
AUX_Rïly
 *
ª∂y
, 
uöt8_t
 
åueD©aLí
)

2334 
boﬁ
 
«ck
 = 
Ál£
;

2338 i‡(
ªq
->
hódî
.
addªss
 =
EDID_ADDRESS
)

2340 i‡(
åueD©aLí
 =0 || 
ªq
->
hódî
.
comm™d
 =
I2C_AUX_WRITE
 )

2342 
ÀxTønsInôCtx
.
i2cOff£t
 = 0;

2344 i‡(
åueD©aLí
 == 1)

2346 
ÀxTønsInôCtx
.
i2cOff£t
 = 
ªq
->
d©a
[0];

2350 
«ck
 = 
åue
;

2353 i‡(
ªq
->
hódî
.
addªss
 =
MCCS_ADDRESS
)

2355 i‡(
dpC⁄figPå
->
noRódMccs
)

2357 i‡(
ªq
->
hódî
.
comm™d
 =
I2C_AUX_WRITE_MOT
 ||Ñeq->hódî.comm™d =
I2C_AUX_WRITE
 )

2359 i‡(
åueD©aLí
 > 0)

2361 i‡((
mccsReque°C⁄ãxt
.
ªque°SåögSize
 > 1Ë&& ((mccsReque°C⁄ãxt.ªque°SåögSizê+ 
åueD©aLí
Ë> 
	`ARRAYSIZE
(mccsReque°C⁄ãxt.
ªque°Såög
)))

2363 
	`mem£t
(&
mccsReque°C⁄ãxt
.
ªque°Såög
[0], 0, 
	`ARRAYSIZE
(mccsRequestContext.requestString));

2364 
	`mem£t
(&
mccsReque°C⁄ãxt
.
ª∂ySåög
[0], 0, 
	`ARRAYSIZE
(mccsRequestContext.replyString));

2365 
mccsReque°C⁄ãxt
.
ª∂ySåögSize
 = mccsReque°C⁄ãxt.
ªque°SåögSize
 = 0;

2367 
	`mem˝y
(&
mccsReque°C⁄ãxt
.
ªque°Såög
[0] + mccsReque°C⁄ãxt.
ªque°SåögSize
, &
ªq
->
d©a
[0], (
size_t
)
åueD©aLí
);

2368 
mccsReque°C⁄ãxt
.
ªque°SåögSize
 +(
size_t
)
åueD©aLí
;

2369 i‡(
åueD©aLí
 > 1)

2371 
mccsReque°C⁄ãxt
.
ty≥
 = mccsReque°C⁄ãxt.
ªque°Såög
[
MCCS_REQUEST_TYPE
];

2372 
mccsReque°C⁄ãxt
.
ty≥
)

2374 
CAP_REQUEST
:

2376 
mccsReque°C⁄ãxt
.
ª∂yIndex
 =

2377 (
mccsReque°C⁄ãxt
.
ªque°Såög
[
MCCS_CAP_OFFSET_HIGH_BYTE
] << 8Ë| mccsReque°C⁄ãxt.ªque°Såög[
MCCS_CAP_OFFSET_LOW_BYTE
];

2380 
VCP_REQUEST
:

2382 
v˝Opcode
 = 
mccsReque°C⁄ãxt
.
ªque°Såög
[
VCP_OPCODE_BYTE
];

2383 i‡(
v˝Opcode
 =
NEW_CONTROL_CODE
)

2385 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_NEW_CONTROL_REQ
);

2387 i‡(
v˝Opcode
 =
CODE_PAGE_CODE
)

2389 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_CODE_PAGE_REQ
);

2393 
VCP_SET
:

2394 
	`SaveV˝CacheToV˝TabÀ
(
mccsReque°C⁄ãxt
.
ªque°Såög
[
VCP_OPCODE_BYTE
],

2395 (
mccsReque°C⁄ãxt
.
ªque°Såög
[
VCP_SET_HIGH_BYTE
] << 8Ë| mccsReque°C⁄ãxt.ªque°Såög[
VCP_SET_LOW_BYTE
]);

2396 
	`SídMccsV˝Së
(&
mccsReque°C⁄ãxt
.
ªque°Såög
[0], mccsReque°C⁄ãxt.
ªque°SåögSize
);

2397 i‡(
ªq
->
hódî
.
comm™d
 =
I2C_AUX_WRITE
)

2399 
	`mem£t
(&
mccsReque°C⁄ãxt
.
ªque°Såög
[0], 0, 
	`ARRAYSIZE
(mccsRequestContext.requestString));

2400 
	`mem£t
(&
mccsReque°C⁄ãxt
.
ª∂ySåög
[0], 0, 
	`ARRAYSIZE
(mccsRequestContext.replyString));

2401 
mccsReque°C⁄ãxt
.
ª∂ySåögSize
 = mccsReque°C⁄ãxt.
ªque°SåögSize
 = 0;

2405 
SAVE_SETTING
:

2406 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_SAVE_SETTING_REQUEST
);

2409 
ID_REQUEST
:

2410 
TIMING_REQUEST
:

2411 
CAP_REPLY
:

2412 
VCP_REPLY
:

2413 
ID_REPLY
:

2414 
VCP_RESET
:

2422 
	`mem£t
(&
mccsReque°C⁄ãxt
.
ªque°Såög
[0], 0, 
	`ARRAYSIZE
(mccsRequestContext.requestString));

2423 
	`mem£t
(&
mccsReque°C⁄ãxt
.
ª∂ySåög
[0], 0, 
	`ARRAYSIZE
(mccsRequestContext.replyString));

2424 
mccsReque°C⁄ãxt
.
ª∂ySåögSize
 = mccsReque°C⁄ãxt.
ªque°SåögSize
 = 0;

2429 
«ck
 = 
åue
;

2434 
«ck
 = 
åue
;

2439 
«ck
 = 
åue
;

2442 if(!
«ck
)

2444 
ª∂y
->
hódî
.
comm™d
 = 
I2C_AUX_ACK
;

2445 
ª∂y
->
Àn
 = 1;

2449 
ª∂y
->
hódî
.
comm™d
 = 
I2C_AUX_NACK
;

2450 
ª∂y
->
d©a
[0] = 0;

2451 
ª∂y
->
Àn
 = 2;

2453 
	}
}

2462 
	$RëimîReöôD⁄eH™dÀr
()

2464 
ÀxTønsInôCtx
.
°©eFœgs
.
dp159ReöôD⁄e
 = 
åue
;

2465 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_RETIMER_REINIT_DONE
);

2466 
	}
}

2475 
	$RëimîCRPha£D⁄eH™dÀr
()

2477 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_RETIMER_CR_DONE
);

2478 
	}
}

2487 
	$RëimîLockCheckH™dÀr
(
boﬁ
 
locked
, 
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
)

2489 
ÀxTønsInôCtx
.
°©eFœgs
.
lökHasCr
 = 
locked
;

2490 if(
locked
)

2492 
	`_I2CD_lökTøöögPŒPﬁlFöished
(
RëimîPŒModeCh™geH™dÀr
);

2494 
ÀxTønsCtx
.
lockInfo
.
bwCr
 = 
bw
;

2495 
ÀxTønsCtx
.
lockInfo
.
lcCr
 = 
lc
;

2496 
	`DP_InôDpTøns˚ivîLex
(
bw
, 
lc
);

2497 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_RETIMER_CR_LOCK
);

2501 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_LOCK_FAIL
);

2503 
	}
}

2512 
	$RëimîPŒModeCh™geH™dÀr
()

2514 
ÀxTønsInôCtx
.
°©eFœgs
.
∂lModeCh™ged
 = 
åue
;

2515 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_RETIMER_CR_PLL_MODE_CHANGE
);

2516 
	}
}

2525 
	$Tøns˚ivîC⁄figCÆlback
(
boﬁ
 
suc˚ss
)

2527 
ÀxTønsInôCtx
.
°©eFœgs
.
gçSëD⁄e
 = 
suc˚ss
;

2529 if(
suc˚ss
)

2531 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_GTP_SET_DONE
);

2535 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_LOCK_FAIL
);

2537 
	}
}

2551 
	$LexDpFrqH™dÀr
(
uöt32_t
 
‰eqCou¡
)

2553 c⁄° 
uöt8_t
 
bw
 = 
	`DP_GëRéVÆueFromB™dwidth
(
ÀxTønsCtx
.
lockInfo
.
bwCr
);

2555 if(
	`DP_LexFªquícyIsVÆid
(
‰eqCou¡
, 
bw
))

2557 
uöt32_t
 
dëe˘edFrq
 = 
	`bb_t›_a7_gëNomöÆGcmFªquícyDëe˘ed
(
åue
);

2558 
boﬁ
 
sscE«bÀd
 = 
dëe˘edFrq
 <
sscFrqThªshﬁd
[
bw
];

2560 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
AUX_DP_SSC_INFO
, 
dëe˘edFrq
, 
ÀxTønsCtx
.
lockInfo
.
bwCr
, 
sscE«bÀd
);

2561 
ÀxTønsCtx
.
dpC⁄fig
.
sscDëe˘ed
 = 
sscE«bÀd
;

2562 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_GTP_FRQ_DONE
);

2567 
	`AUX_MakeSëtögUnsuµ‹ãd
();

2569 
	}
}

2579 
	$LexH™dÀN©iveAuxReque°
(

2580 
AUX_Reque°
 *
ªq
,

2581 
AUX_Rïly
 *
ª∂y
)

2583 c⁄° 
uöt32_t
 
‹igAddr
 = 
ªq
->
hódî
.
addªss
;

2584 
DpcdRegi°îSë
 *
dpcdReg
 = 
	`DPCD_GëDpcdRegi°î
(
‹igAddr
);

2586 c⁄° 
uöt8_t
 
ôîCou¡
 = 
ªq
->
hódî
.
d©aLí
 + 1;

2587 
uöt8_t
 
ôr
;

2588 
boﬁ
 
suc˚ss
 = 
åue
;

2591 
ôr
 =0 ; iå < 
ôîCou¡
 ; itr++)

2593 i‡(
ªq
->
hódî
.
comm™d
 =
NATIVE_AUX_WRITE
)

2596 if–(
dpcdReg
Ë&& (dpcdReg->
ªg
.
addªss
 =(
‹igAddr
 + 
ôr
)) &&

2597 (
dpcdReg
->
ªg
.
©å
.
ho°WrôabÀ
))

2599 
dpcdReg
->
	`wrôeH™dÀr
(&dpcdReg->
ªg
, 
ªq
->
d©a
[
ôr
], 
åue
);

2603 
suc˚ss
 = 
Ál£
;

2607 i‡(
ªq
->
hódî
.
comm™d
 =
NATIVE_AUX_READ
)

2610 if–(
dpcdReg
Ë&& (dpcdReg->
ªg
.
addªss
 =(
‹igAddr
 + 
ôr
)) )

2612 if(
dpcdReg
->
	`ªadH™dÀr
(&dpcdReg->
ªg
, &
ª∂y
->
d©a
[
ôr
]Ë=
READ_DEFER
)

2614 
suc˚ss
 = 
Ál£
;

2620 
ª∂y
->
d©a
[
ôr
] = 0;

2624 if(!
dpcdReg
)

2627 
dpcdReg
 = 
	`DPCD_GëDpcdRegi°î
(
‹igAddr
 + 
ôr
 + 1);

2629 if(
dpcdReg
->
ªg
.
addªss
 =(
‹igAddr
 + 
ôr
))

2632 
dpcdReg
++;

2637 i‡(
ªq
->
hódî
.
comm™d
 =
NATIVE_AUX_WRITE
)

2639 if(
suc˚ss
)

2641 
ª∂y
->
Àn
 = 1;

2642 
ª∂y
->
hódî
.
comm™d
 = 
NATIVE_AUX_ACK
;

2646 
ª∂y
->
Àn
 = 2;

2647 
ª∂y
->
hódî
.
comm™d
 = 
NATIVE_AUX_NACK
;

2648 
ª∂y
->
d©a
[0] = 
ôr
;

2653 if(
suc˚ss
)

2655 
ª∂y
->
Àn
 = 
ªq
->
hódî
.
d©aLí
 + 2;

2656 
ª∂y
->
hódî
.
comm™d
 = 
NATIVE_AUX_ACK
;

2659 
	}
}

2669 
boﬁ
 
	$LexLökTøöed
()

2671 
boﬁ
 
gŸClockRecovîy
 = 
	`DP_GŸClockRecovîy
();

2672 
boﬁ
 
gŸSymbﬁLock
 = 
	`DP_GŸSymbﬁLock
(
ÀxTønsCtx
.
dpC⁄fig
.
lc
);

2673 
boﬁ
 
gŸL™eAlignmít
 = 
	`DP_GŸL™eAlignmít
();

2674 
boﬁ
 
lökUp
 = 
gŸClockRecovîy
 && 
gŸSymbﬁLock
 && 
gŸL™eAlignmít
;

2676 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_LINK_STATUS
,

2677 
lökUp
, (
gŸClockRecovîy
 | 
gŸSymbﬁLock
<<4 | 
gŸL™eAlignmít
 << 8));

2679  
lökUp
;

2680 
	}
}

2689 
	$AUX_LexAâem±Eº‹Recovîy
(
LexSåómEº‹Ty≥
 
îr‹
)

2691 if(
îr‹
 =
LEX_EXTRACTION_ERROR
)

2693 i‡(
ÀxTønsInôCtx
.
ÀxExåa˘i⁄Eº‹Cou¡
 >
LEX_ERROR_RECOVERY_MAX_COUNT
)

2695 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_ERR_CNT
, 
ÀxTønsInôCtx
.
ÀxExåa˘i⁄Eº‹Cou¡
,ÜexTønsInôCtx.
ÀxSåómEº‹Cou¡
);

2696 
ÀxTønsCtx
.
mßFaûCode
 = 
LEX_MSA_ALIGN_ERROR
;

2697 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_WRONG_MSA_NEED_RETRAIN
);

2701 
ÀxTønsInôCtx
.
ÀxExåa˘i⁄Eº‹Cou¡
++;

2702 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_ERR_CNT
, 
ÀxTønsInôCtx
.
ÀxExåa˘i⁄Eº‹Cou¡
,ÜexTønsInôCtx.
ÀxSåómEº‹Cou¡
);

2703 
	`DP_LEX_ª£tSåómExåa˘‹
();

2706 if(
îr‹
 =
LEX_STREAM_ERROR
)

2708 i‡(
ÀxTønsInôCtx
.
ÀxSåómEº‹Cou¡
 >
LEX_ERROR_RECOVERY_MAX_COUNT
)

2710 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_ERR_CNT
, 
ÀxTønsInôCtx
.
ÀxExåa˘i⁄Eº‹Cou¡
,ÜexTønsInôCtx.
ÀxSåómEº‹Cou¡
);

2711 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_ERROR_RECOVERY_FAILED_EVENT
);

2716 
ÀxTønsInôCtx
.
ÀxSåómEº‹Cou¡
++;

2717 c⁄° 
uöt32_t
 
Âs
 = 
	`DP_LEX_GëCou¡edFps
();

2718 i‡(
	`DP_LexIsMßVÆid
(
Âs
, 
	`Aux_GëSymbﬁClock
(
ÀxTønsCtx
.
dpC⁄fig
.
bw
,ÜexTønsCtx.dpC⁄fig.
sscDëe˘ed
)Ë=
LEX_MSA_VALID
)

2720 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_ERR_CNT
, 
ÀxTønsInôCtx
.
ÀxExåa˘i⁄Eº‹Cou¡
,ÜexTønsInôCtx.
ÀxSåómEº‹Cou¡
);

2721 
uöt8_t
 
vÆidSymbﬁs
 = 
	`DP_LexCÆcuœãAlu
(
Âs
, 
	`Aux_GëSymbﬁClock
(
ÀxTønsCtx
.
dpC⁄fig
.
bw
,ÜexTønsCtx.dpC⁄fig.
sscDëe˘ed
));

2723 i‡(
	`DP_LexGëBµ
() == 30)

2725 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_10BPC_STREAM_FAIL
);

2726 
ÀxTønsCtx
.
mßFaûCode
 = 
LEX_MSA_10BPC
;

2727 
	`LexPmSèãSídEvítWôhD©a
(
LEX_AUX_WRONG_MSA_NEED_RETRAIN
,

2728 (
LexPmEvítD©a
*)(&
ÀxTønsCtx
.
mßFaûCode
));

2730 i‡((
vÆidSymbﬁs
 < 4) || (validSymbols > 62))

2732 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
DP_VALID_SYMBOL_STREAM_FAIL
, 
vÆidSymbﬁs
);

2733 
ÀxTønsCtx
.
mßFaûCode
 = 
LEX_MSA_VALID_SYMBOLS
;

2734 
	`LexPmSèãSídEvítWôhD©a
(
LEX_AUX_WRONG_MSA_NEED_RETRAIN
,

2735 (
LexPmEvítD©a
*)(&
ÀxTønsCtx
.
mßFaûCode
));

2741 
	`LexPmSèãSídEvítWôhNoD©a
(
LEX_AUX_STREAM_ERROR_DETECTED
);

2749 
	}
}

2758 
boﬁ
 
	$IsLexOnMaxVﬁègeSwög
()

2760  (
ÀxTønsInôCtx
.
lök
.
vs
[0] =
MAX_VOLTAGE_SWING
);

2761 
	}
}

2770 
boﬁ
 
	$IsLexLa°L™eReque°
(
uöt8_t
 
ödex
)

2773 
boﬁ
 
œ°Reque°
 = ((
ÀxTønsCtx
.
dpC⁄fig
.
lc
 <
LANE_COUNT_2
Ë&& (ÀxTønsCtx.dpC⁄fig.l¯=(
ödex
 + 1)))

2774 || ((
ÀxTønsCtx
.
dpC⁄fig
.
lc
 =
LANE_COUNT_4
Ë&& (
ödex
 ==3));

2776  
œ°Reque°
;

2777 
	}
}

2786 
boﬁ
 
	$LexAdvîti£NextVsAvaûabÀ
()

2788 
boﬁ
 
√xtVsAvaûabÀ
 = 
Ál£
;

2789 
uöt8_t
 
cuºítVs
 = 
cuºítVSPaús
[
ÀxTønsInôCtx
.
lök
.
vsSèã
].
vs
;

2792 if((
cuºítVs
 !
MAX_VOLTAGE_SWING
Ë&& (
avaûabÀVsPeCombö©i⁄
[cuºítVs+1][0] =
åue
))

2794 
√xtVsAvaûabÀ
 = 
åue
;

2797  
√xtVsAvaûabÀ
;

2798 
	}
}

2808 
boﬁ
 
	$LexAdvîti£NextPeAvaûabÀ
()

2810 
boﬁ
 
√xtPeAvaûabÀ
 = 
Ál£
;

2811 
uöt8_t
 
cuºítVs
 = 
cuºítVSPaús
[
ÀxTønsInôCtx
.
lök
.
vsSèã
].
vs
;

2812 
uöt8_t
 
cuºítPe
 = 
ÀxTønsInôCtx
.
lök
.
≥Sèã
;

2815 if((
cuºítPe
 !
MAX_PRE_EMPHASIS
Ë&& (
avaûabÀVsPeCombö©i⁄
[
cuºítVs
][cuºítPe+1] =
åue
))

2817 
√xtPeAvaûabÀ
 = 
åue
;

2819  
√xtPeAvaûabÀ
;

2820 
	}
}

2830 
boﬁ
 
	$LexLtRóchedHighe°Levñ
()

2832 
boﬁ
 
highe°
 = 
Ál£
;

2833 
uöt8_t
 
cuºítVs
 = 
ÀxTønsInôCtx
.
lök
.
vs
[0];

2834 
uöt8_t
 
cuºítPe
 = 
ÀxTønsInôCtx
.
lök
.
≥
[0];

2838 if(((
cuºítPe
 !
MAX_PRE_EMPHASIS
Ë&& (
avaûabÀVsPeCombö©i⁄
[
cuºítVs
][cuºítPe+1] =
Ál£
)) ||

2839 ((
cuºítPe
 =
MAX_PRE_EMPHASIS
Ë&& (
cuºítVs
 !
MAX_VOLTAGE_SWING
Ë&& (
avaûabÀVsPeCombö©i⁄
[cuºítVs+1][0] =
Ál£
)))

2841 
highe°
 = 
åue
;

2844 
	`ûog_DP_COMPONENT_3
(
ILOG_DEBUG
, 
DP_LEX_REACHED_HIGHEST_LEVEL
, 
cuºítVs
, 
cuºítPe
, 
highe°
);

2845  
highe°
;

2846 
	}
}

2855 
	$LexE«bÀDes¸ambÀr
(
boﬁ
 
íabÀ
)

2857 
	`DP_SökE«bÀDes¸ambÀr
(
íabÀ
);

2858 
	}
}

2867 
	$lökTøöögTPS23ˇŒback
()

2869 
ÀxTønsInôCtx
.
lök
.
≥Sèã
 = 0;

2870 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_TPS23_REQUEST
);

2871 
	}
}

2881 
	$SídMccsV˝Së
(
uöt8_t
 
£tV˝D©a
[], uöt8_à
£tV˝D©aLígth
 )

2883 
AUX_Down°ªamCpuMesßge
 
msg
 = {

2884 .
ty≥
 = 
AUX_MSG_VCP_SET_REQUEST
,

2885 .
msgBuf„r
 = &
£tV˝D©a
[0],

2886 .
msgLígth
 = 
£tV˝D©aLígth


2890 
	`LexSídCpuMesßgeToRex
(&
msg
);

2891 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
SET_VCP_FEATURE
);

2892 
	}
}

2901 
	$AUX_LexTps1TimeoutH™dÀr
()

2903 
	`LexLtSèãSídEvítWôhNoD©a
(
LEX_LT_DISABLE
);

2904 
	}
}

2913 
	$AUX_LexCÀ¨DpC⁄fig
()

2915 
ÀxTønsCtx
.
dpC⁄fig
.
lc
 = 
LANE_COUNT_INVALID
;

2916 
ÀxTønsCtx
.
dpC⁄fig
.
bw
 = 
BW_INVALID
;

2917 
ÀxTønsCtx
.
dpC⁄fig
.
íh™˚dFømög
 = 
Ál£
;

2918 
ÀxTønsCtx
.
dpC⁄fig
.
sscDëe˘ed
 = 
Ál£
;

2919 
ÀxTønsCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
 = 
TPS_0
;

2920 
	}
}

2929 
boﬁ
 
	$AUX_LexHasCR
()

2931  
	`DP_GŸClockRecovîy
(Ë&& 
ÀxTønsInôCtx
.
°©eFœgs
.
lökHasCr
;

2932 
	}
}

2941 
boﬁ
 
	$AUX_LexHasSymbﬁLock
()

2943  
	`DP_GŸSymbﬁLock
(
ÀxTønsCtx
.
dpC⁄fig
.
lc
Ë&& (ÀxTønsCtx.dpC⁄fig.
a˘iveTøöögP©ã∫
 !
TPS_1
);

2944 
	}
}

2953 
	$AUX_LexSèπCh™√lEQ
()

2955 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
DP_LINK_TRAINING_STATE
, 
START_CHANNEL_EQUALIZATION
);

2956 
	`_I2CD_lökTøöögRe£tRxL™e
(
NULL
);

2957 
	`DP_LexCÀ¨AutoFrqDë
();

2958 
	`DP_LexGëDpFrq
(
LexDpFrqH™dÀr
);

2959 
	}
}

2968 
	$AUX_ShowVsPeCombö©i⁄
()

2970 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
DP_LEX_VS0_PE
,

2971 
avaûabÀVsPeCombö©i⁄
[0][0],ávailableVsPeCombination[0][1],ávailableVsPeCombination[0][2]);

2972 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
DP_LEX_VS1_PE
,

2973 
avaûabÀVsPeCombö©i⁄
[1][0],ávailableVsPeCombination[1][1],ávailableVsPeCombination[1][2]);

2974 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
DP_LEX_VS2_PE
,

2975 
avaûabÀVsPeCombö©i⁄
[2][0],ávailableVsPeCombination[2][1],ávailableVsPeCombination[2][2]);

2977 
	}
}

	@components/dp/src/mccs.c

25 
	~<iba£.h
>

26 
	~"dp_loc.h
"

27 
	~"dp_log.h
"

28 
	~"u¨t.h
"

36 
Upd©eMccsRïlyChecksumByã
(
uöt8_t
 
mccsMesßge
[], uöt8_à
mccsMesßgeSize
);

37 
Upd©eV˝TabÀE¡ry
(
uöt8_t
 
v˝GëRïly
[], uöt8_à
›Code
);

39 
uöt8_t
 
	gmccs_m⁄ô‹
[
MCCS_CACHE_SIZE
];

40 
size_t
 
	gmccsM⁄ô‹Size
;

41 
uöt8_t
 
	gmccsC≠Rïly
[] = {0x6E, 0xA3, 0xE3, 0x00, 0x00};

42 
uöt8_t
 
	gv˝TabÀGëRïly
[] = {0x6E, 0x88, 0x02, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00};

43 
uöt8_t
 
	gˇpCrcPosôi⁄
;

44 
MccsV˝
 
	gloˇlV˝TabÀ
[
VCP_TABLE_SIZE
];

45 
uöt8_t
 
	gloˇlTimögSåög
[
TIMING_REPLY_SIZE
];

46 
size_t
 
	gloˇlV˝TabÀSize
;

47 
boﬁ
 
	gídFøme
;

63 
	$LﬂdRe˚ivîMccsCacheI¡oMccsTabÀ
(
uöt8_t
 
mccsSour˚
[
MCCS_CACHE_SIZE
], 
size_t
 
mccsC≠Size
)

65 
	`mem˝y
(
mccs_m⁄ô‹
, 
mccsSour˚
, 
mccsC≠Size
);

66 
mccsM⁄ô‹Size
 = 
mccsC≠Size
;

68 
uöt16_t
 
mccsCacheIdx
 = 0;

69 
uöt8_t
 
bøckëCou¡
 = 0;

70 
uöt8_t
 
ödex
 = 0;

71 
uöt8_t
 
ãmpV˝Code
;

73 i‡(
mccsC≠Size
 < 64)

75 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_CAP_RX_FAIL
, 
mccsCacheIdx
, 
ödex
, 
__LINE__
);

76 
	`mem£t
(&
mccs_m⁄ô‹
, 0, (mccs_monitor));

80 !((
mccs_m⁄ô‹
[
mccsCacheIdx
] == 'v')

81 && (
mccs_m⁄ô‹
[
mccsCacheIdx
+1] == 'c')

82 && (
mccs_m⁄ô‹
[
mccsCacheIdx
+2] == 'p')))

84 
mccsCacheIdx
++;

85 i‡(
mccsCacheIdx
 >
mccsC≠Size
)

87 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_CAP_RX_FAIL
, 
mccsCacheIdx
, 
ödex
, 
__LINE__
);

88 
	`mem£t
(&
mccs_m⁄ô‹
, 0, (mccs_monitor));

93 
mccs_m⁄ô‹
[
mccsCacheIdx
] != '(')

95 
mccsCacheIdx
++;

96 i‡(
mccsCacheIdx
 >
mccsC≠Size
)

98 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_CAP_RX_FAIL
, 
mccsCacheIdx
, 
ödex
, 
__LINE__
);

99 
	`mem£t
(&
mccs_m⁄ô‹
, 0, (mccs_monitor));

106 i‡(!(
mccs_m⁄ô‹
[
mccsCacheIdx
] ='(' || mccs_m⁄ô‹[mccsCacheIdx] =')' || mccs_m⁄ô‹[mccsCacheIdx] =' 'Ë&& 
bøckëCou¡
<=1)

108 
ãmpV˝Code
 = 
	`v˝ToHex
(
mccs_m⁄ô‹
[
mccsCacheIdx
], mccs_monitor[mccsCacheIdx+1]);

110 i‡(
ãmpV˝Code
 != 0x0D)

112 
loˇlV˝TabÀ
[
ödex
++].
v˝Code
 = 
ãmpV˝Code
;

113 i‡(
ödex
 >
VCP_TABLE_SIZE
)

118 
mccsCacheIdx
++;

120 i‡(
mccs_m⁄ô‹
[
mccsCacheIdx
] == '(')

122 
bøckëCou¡
++;

124 if(
mccs_m⁄ô‹
[
mccsCacheIdx
] == ')')

126 
bøckëCou¡
--;

128 
mccsCacheIdx
++;

129 i‡(
mccsCacheIdx
 >
mccsC≠Size
)

135 } 
bøckëCou¡
 > 0);

138 i‡(
bøckëCou¡
 > 0)

140 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_CAP_RX_FAIL
, 
mccsCacheIdx
, 
ödex
, 
__LINE__
);

141 
	`mem£t
(&
mccs_m⁄ô‹
, 0, (mccs_monitor));

145 
loˇlV˝TabÀSize
 = 
ödex
;

147 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_LEX_MCCS_RECEIVE_STATUS
, 
mccsM⁄ô‹Size
);

148 
	}
}

158 
uöt8_t
 
	$v˝ToHex
(
uöt8_t
 
asciiCh¨_1
, uöt8_à
asciiCh¨_2
 )

160 i‡(
asciiCh¨_1
 < '0' ||ásciiChar_1 > 'z')

165 
uöt8_t
 
highî_nibbÀ
 = 
asciiCh¨_1
 <= '9' ? (asciiChar_1 - '0') : ((asciiChar_1 <= 'Z') ? (asciiChar_1 - 'A' + 0xA) : (asciiChar_1 - 'a' + 0xA));

167 
uöt8_t
 
lowî_nibbÀ
 = 
asciiCh¨_2
 <= '9' ? (asciiChar_2 - '0') : ((asciiChar_2 <= 'Z') ? (asciiChar_2 - 'A' + 0xA) : (asciiChar_2 - 'a' + 0xA));

168 
uöt8_t
 
hexVÆue
 = (
highî_nibbÀ
 << 4Ë| 
lowî_nibbÀ
;

170  
hexVÆue
;

171 
	}
}

181 
	$LﬂdRe˚ivîV˝CacheI¡oV˝TabÀ
(
MccsV˝
 *
v˝TabÀSour˚
, 
size_t
 
v˝TabÀSize
)

183 
	`mem˝y
(
loˇlV˝TabÀ
, 
v˝TabÀSour˚
, 
v˝TabÀSize
);

184 
loˇlV˝TabÀSize
 = 
v˝TabÀSize
 / (
loˇlV˝TabÀ
[0]);

185 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_LEX_VCP_RECEIVE_STATUS
, 
loˇlV˝TabÀSize
);

186 
	}
}

196 
	$LﬂdRe˚ivîTimögCacheI¡oTabÀ
(
uöt8_t
 *
timögRï‹tSour˚
, 
size_t
 
timögRï‹tSize
)

198 
	`mem˝y
(
loˇlTimögSåög
, 
timögRï‹tSour˚
, 
timögRï‹tSize
);

199 
	}
}

209 
	$LexLoˇlMccsRód
(
uöt8_t
 
ªadLígth
, uöt8_à*
buf„r
, uöt8_à
‰ameCou¡
)

211 i‡(
‰ameCou¡
 == 1)

213 
ídFøme
 = 
mccsReque°C⁄ãxt
.
ª∂yIndex
 > 
mccsM⁄ô‹Size
 ? 
åue
 : 
Ál£
;

215 
mccsC≠Rïly
[1] = 
mccsM⁄ô‹Size
 - 
mccsReque°C⁄ãxt
.
ª∂yIndex
 > 32 ? 
MCCS_CAP_REPLY_LEN
 | 0x80 : (mccsM⁄ô‹Sizê- mccsReque°C⁄ãxt.ª∂yIndex + 
OPCODE_OFFSET_BYTE_LEN
) | 0x80;

216 
mccsC≠Rïly
[3] = (
mccsReque°C⁄ãxt
.
ª∂yIndex
 & 0xFF00) >> 8;

217 
mccsC≠Rïly
[4] = (
mccsReque°C⁄ãxt
.
ª∂yIndex
 & 0x00FF);

218 
	`mem˝y
(
buf„r
, 
mccsC≠Rïly
, 
	`ARRAYSIZE
(mccsCapReply));

219 
	`mem˝y
(
mccsReque°C⁄ãxt
.
ª∂ySåög
, 
mccsC≠Rïly
, 
	`ARRAYSIZE
(mccsCapReply));

220 i‡(
ídFøme
)

222 
mccsC≠Rïly
[1] = 
buf„r
[1] = 0x83;

223 
	`Upd©eMccsRïlyChecksumByã
(
mccsReque°C⁄ãxt
.
ª∂ySåög
, 
	`ARRAYSIZE
(
mccsC≠Rïly
));

224 
buf„r
[
	`ARRAYSIZE
(
mccsC≠Rïly
)] = 
mccsReque°C⁄ãxt
.
ª∂ySåög
[ARRAYSIZE(mccsCapReply)];

229 
ˇpCrcPosôi⁄
 = (
mccsC≠Rïly
[1] & 0x7F) + 2;

231 i‡(
ˇpCrcPosôi⁄
 <= 0x0F)

233 
	`mem˝y
(
buf„r
 + 
	`ARRAYSIZE
(
mccsC≠Rïly
), 
mccs_m⁄ô‹
 + 
mccsReque°C⁄ãxt
.
ª∂yIndex
, 
ˇpCrcPosôi⁄
 - 4);

234 
	`mem˝y
(
mccsReque°C⁄ãxt
.
ª∂ySåög
 + 
	`ARRAYSIZE
(
mccsC≠Rïly
), 
mccs_m⁄ô‹
 + mccsReque°C⁄ãxt.
ª∂yIndex
, 
ˇpCrcPosôi⁄
 - 4);

235 
mccsReque°C⁄ãxt
.
ª∂ySåögSize
 +
ˇpCrcPosôi⁄
 + 1;

236 
	`Upd©eMccsRïlyChecksumByã
(
mccsReque°C⁄ãxt
.
ª∂ySåög
, 
ˇpCrcPosôi⁄
);

237 
buf„r
[
ˇpCrcPosôi⁄
] = 
mccsReque°C⁄ãxt
.
ª∂ySåög
[capCrcPosition];

241 
	`mem˝y
(
buf„r
 + 
	`ARRAYSIZE
(
mccsC≠Rïly
), 
mccs_m⁄ô‹
 + 
mccsReque°C⁄ãxt
.
ª∂yIndex
, 11);

242 
	`mem˝y
(
mccsReque°C⁄ãxt
.
ª∂ySåög
 + 
	`ARRAYSIZE
(
mccsC≠Rïly
), 
mccs_m⁄ô‹
 + mccsReque°C⁄ãxt.
ª∂yIndex
, 11);

243 
mccsReque°C⁄ãxt
.
ª∂ySåögSize
 +
ªadLígth
;

247 i‡(
‰ameCou¡
 == 2)

249 i‡(
ídFøme
)

253 i‡(
ˇpCrcPosôi⁄
 > 0xF && capCrcPosition <= 0x1F)

255 
	`mem˝y
(
buf„r
, 
mccs_m⁄ô‹
 + 
mccsReque°C⁄ãxt
.
ª∂yIndex
 + 11, 
ªadLígth
);

256 
	`mem˝y
(
mccsReque°C⁄ãxt
.
ª∂ySåög
 + mccsReque°C⁄ãxt.
ª∂ySåögSize
, 
mccs_m⁄ô‹
 + mccsReque°C⁄ãxt.
ª∂yIndex
 + 11, 
ˇpCrcPosôi⁄
 - 16);

257 
mccsReque°C⁄ãxt
.
ª∂ySåögSize
 +
ˇpCrcPosôi⁄
 - 16 + 1;

258 
	`Upd©eMccsRïlyChecksumByã
(
mccsReque°C⁄ãxt
.
ª∂ySåög
, 
ˇpCrcPosôi⁄
);

260 
buf„r
[
ˇpCrcPosôi⁄
 - 16] = 
mccsReque°C⁄ãxt
.
ª∂ySåög
[capCrcPosition];

264 
	`mem˝y
(
buf„r
, 
mccs_m⁄ô‹
 + 
mccsReque°C⁄ãxt
.
ª∂yIndex
 + 11, 
ªadLígth
);

265 
	`mem˝y
(
mccsReque°C⁄ãxt
.
ª∂ySåög
 + mccsReque°C⁄ãxt.
ª∂ySåögSize
, 
mccs_m⁄ô‹
 + mccsReque°C⁄ãxt.
ª∂yIndex
 + 11, 
ªadLígth
);

266 
mccsReque°C⁄ãxt
.
ª∂ySåögSize
 +
ªadLígth
;

271 i‡(
‰ameCou¡
 == 3)

273 i‡(
ídFøme
)

275 
	`mem˝y
(
buf„r
, 
mccsReque°C⁄ãxt
.
ª∂ySåög
, 
	`ARRAYSIZE
(
mccsC≠Rïly
) + 1);

276 
ídFøme
 = 
Ál£
;

280 i‡(
ˇpCrcPosôi⁄
 <= 0x1F)

282 
	`mem˝y
(
buf„r
, 
mccsReque°C⁄ãxt
.
ª∂ySåög
, 
	`ARRAYSIZE
(
mccsC≠Rïly
) + 1);

286 
	`mem˝y
(
buf„r
, 
mccs_m⁄ô‹
 + 
mccsReque°C⁄ãxt
.
ª∂yIndex
 + 11 + 16, 
ˇpCrcPosôi⁄
 - 32);

287 
	`mem˝y
(
mccsReque°C⁄ãxt
.
ª∂ySåög
 + mccsReque°C⁄ãxt.
ª∂ySåögSize
, 
mccs_m⁄ô‹
 + mccsReque°C⁄ãxt.
ª∂yIndex
 + 11 + 16, 
ˇpCrcPosôi⁄
 - 32);

288 
mccsReque°C⁄ãxt
.
ª∂ySåögSize
 +
ˇpCrcPosôi⁄
 - 32;

289 
	`Upd©eMccsRïlyChecksumByã
(
mccsReque°C⁄ãxt
.
ª∂ySåög
, 
ˇpCrcPosôi⁄
);

290 
buf„r
[
ˇpCrcPosôi⁄
 - 32] = 
mccsReque°C⁄ãxt
.
ª∂ySåög
[capCrcPosition];

295 
	}
}

305 
	$LexLoˇlTimögRód
(
uöt16_t
 
ªadLígth
, 
uöt8_t
 *
buf„r
)

307 
	`mem˝y
(
buf„r
, 
loˇlTimögSåög
, 
	`ARRAYSIZE
(localTimingString));

308 
	}
}

318 
	$LexLoˇlV˝Ród
(
uöt16_t
 
ªadLígth
, 
uöt8_t
 *
buf„r
, uöt8_à
›Code
)

320 
v˝TabÀGëRïly
[4] = 
›Code
;

321 
	`Upd©eV˝TabÀE¡ry
(
v˝TabÀGëRïly
, 
›Code
);

322 
	`Upd©eMccsRïlyChecksumByã
(
v˝TabÀGëRïly
, 10);

323 
	`mem˝y
(
mccsReque°C⁄ãxt
.
ª∂ySåög
, 
v˝TabÀGëRïly
, 
	`ARRAYSIZE
(vcpTableGetReply));

324 
	`mem˝y
(
buf„r
, 
v˝TabÀGëRïly
, 
	`ARRAYSIZE
(vcpTableGetReply));

325 
	}
}

327 
	$SaveV˝CacheToV˝TabÀ
(
uöt8_t
 
v˝Code
, 
uöt16_t
 
cuºítVÆue
)

329 
uöt8_t
 
v˝Index
;

330 
v˝Index
 = 0; v˝Index < 
loˇlV˝TabÀSize
; vcpIndex++)

332 i‡(
loˇlV˝TabÀ
[
v˝Index
].
v˝Code
 == vcpCode)

337 
loˇlV˝TabÀ
[
v˝Index
].
cuºVÆ
 = 
cuºítVÆue
;

338 i‡(
v˝Code
 =
NEW_CONTROL_CODE
 && 
cuºítVÆue
 == 0x01)

340 
loˇlV˝TabÀ
[
v˝Index
].
cuºVÆ
 = 0x01;

341 
v˝Index
 = 0; v˝Index < 
loˇlV˝TabÀSize
; vcpIndex++)

343 i‡(
loˇlV˝TabÀ
[
v˝Index
].
v˝Code
 == 0x52)

348 
a˘iveC⁄åﬁFifoIdx
 = 0;

349 
loˇlV˝TabÀ
[
v˝Index
].
cuºVÆ
 = 0x00;

351 
	}
}

363 
	$Upd©eMccsRïlyChecksumByã
(
uöt8_t
 
mccsMesßge
[], uöt8_à
mccsMesßgeSize
)

365 
uöt8_t
 
¨øyIndex
 = 0;

366 
uöt8_t
 
mccsByãChk
 = 0;

368 
¨øyIndex
 = 0;áºayIndex < 
mccsMesßgeSize
;árrayIndex++)

370 
mccsByãChk
 ^
mccsMesßge
[
¨øyIndex
];

372 
mccsByãChk
 ^= 0x50;

373 
mccsMesßge
[
mccsMesßgeSize
] = 
mccsByãChk
;

374 
	}
}

384 
	$Upd©eV˝TabÀE¡ry
(
uöt8_t
 
v˝GëRïly
[], uöt8_à
›Code
)

386 
uöt8_t
 
v˝TabÀIdx
;

387 
uöt8_t
 
ª∂yD©aByã
 = 6;

388 
v˝TabÀIdx
 = 0; v˝TabÀIdx < 
loˇlV˝TabÀSize
; vcpTableIdx++)

390 if(
loˇlV˝TabÀ
[
v˝TabÀIdx
].
v˝Code
 =
›Code
)

395 i‡(
›Code
 =
ACTIVE_CONTROL_CODE
)

398 
loˇlV˝TabÀ
[
v˝TabÀIdx
].
cuºVÆ
 = 
a˘iveC⁄åﬁFifo
[
a˘iveC⁄åﬁFifoIdx
];

399 i‡(
a˘iveC⁄åﬁFifoIdx
 != 0)

401 
a˘iveC⁄åﬁFifoIdx
--;

404 
v˝GëRïly
[
ª∂yD©aByã
++] = (
loˇlV˝TabÀ
[
v˝TabÀIdx
].
maxVÆ
 & 0xFF00) >> 8;

405 
v˝GëRïly
[
ª∂yD©aByã
++] = (
loˇlV˝TabÀ
[
v˝TabÀIdx
].
maxVÆ
 & 0x00FF);

406 
v˝GëRïly
[
ª∂yD©aByã
++] = (
loˇlV˝TabÀ
[
v˝TabÀIdx
].
cuºVÆ
 & 0xFF00) >> 8;

407 
v˝GëRïly
[
ª∂yD©aByã
++] = (
loˇlV˝TabÀ
[
v˝TabÀIdx
].
cuºVÆ
 & 0x00FF);

409 
	}
}

	@components/dp/src/mccs.h

11 #i‚de‡
MCCS_H


12 
	#MCCS_H


	)

15 
	~"dp_loc.h
"

17 
	#MCCS_CACHE_SIZE
 600

	)

18 
	#MCCS_CAP_REQ_LEN
 6

	)

19 
	#VCP_REQ_LEN
 5

	)

20 
	#OPCODE_BYTE
 4

	)

21 
	#MCCS_CAP_REPLY_LEN
 35

	)

22 
	#VCP_REPLY_LEN
 11

	)

23 
	#OPCODE_OFFSET_BYTE_LEN
 3

	)

24 
	#MCCS_MSG_LEN_MASK
 0x7F

	)

25 
	#MCCS_LENGTH_BYTE
 1

	)

26 
	#MCCS_DATA_BLOCK_SIZE
 0x1A

	)

27 
	#MCCS_OFFSET_HIGH_BYTE
 4

	)

28 
	#MCCS_OFFSET_LOW_BYTE
 5

	)

29 
	#MCCS_CHK_BYTE
 6

	)

30 
	#CAP_DATA_START_INDEX
 5

	)

31 
	#VCP_TABLE_SIZE
 64

	)

32 
	#MCCS_INVALID_FRAGMENT_SIZE
 0x0

	)

33 
	#MAX_MCCS_REQUEST_SIZE
 6

	)

34 
	#MAX_MCCS_REPLY_SIZE
 14

	)

35 
	#MCCS_END_FRAME_SIZE
 0x3

	)

36 
	#VCP_FEATURE_REPLY_SIZE
 0x88

	)

37 
	#VCP_REPLY_OPCODE
 0x02

	)

38 
	#VCP_REPLY_OPCODE_BYTE
 2

	)

39 
	#MCCS_REQUEST_TYPE
 2

	)

40 
	#MCCS_CAP_OFFSET_HIGH_BYTE
 3

	)

41 
	#MCCS_CAP_OFFSET_LOW_BYTE
 4

	)

42 
	#VCP_OPCODE_BYTE
 3

	)

43 
	#VCP_SET_HIGH_BYTE
 4

	)

44 
	#VCP_SET_LOW_BYTE
 5

	)

45 
	#MCCS_TYPE_BYTE
 2

	)

46 
	#MCCS_CAP_REPLY_HIGH_BYTE
 3

	)

47 
	#MCCS_CAP_REPLY_LOW_BYTE
 4

	)

48 
	#FACTORY_DEFAULT_CODE
 0x04

	)

49 
	#LUM_CON_DEFAULT_CODE
 0x05

	)

50 
	#GEOMETRY_DEFAULT_CODE
 0x06

	)

51 
	#COLOR_DEFAULT_CODE
 0x08

	)

52 
	#LUMINANCE_CODE
 0x10

	)

53 
	#CONTRAST_CODE
 0x12

	)

54 
	#TIMING_REPLY_SIZE
 9

	)

55 
	#NEW_CONTROL_FIFO_SIZE
 10

	)

56 
	#NEW_CONTROL_SCAN_INTERVAL
 120000

	)

57 
	#ACTIVE_CONTROL_CODE
 0x52

	)

58 
	#NEW_CONTROL_CODE
 0x02

	)

59 
	#CODE_PAGE_CODE
 0x00

	)

60 
	#NEW_CONTROL_STOP_COUNTER
 240

62 

	)

64 
	eV˝Comm™dTy≥s


66 
	mID_REQUEST
 = 0xF1,

67 
	mID_REPLY
 = 0xE1,

68 
	mCAP_REQUEST
 = 0xF3,

69 
	mCAP_REPLY
 = 0xE3,

70 
	mVCP_REQUEST
 = 0x01,

71 
	mVCP_REPLY
 = 0x02,

72 
	mVCP_SET
 = 0x03,

73 
	mVCP_RESET
 = 0x09,

74 
	mTIMING_REQUEST
 = 0x07,

75 
	mSAVE_SETTING
 = 0x0C

79 
	sMccsReque°C⁄ãxt


81 
V˝Comm™dTy≥s
 
	mty≥
;

82 
uöt8_t
 
	mªque°Såög
[
MAX_MCCS_REQUEST_SIZE
];

83 
size_t
 
	mªque°SåögSize
;

84 
uöt8_t
 
	mª∂ySåög
[
MCCS_CAP_REPLY_LEN
 + 
OPCODE_OFFSET_BYTE_LEN
];

85 
size_t
 
	mª∂ySåögSize
;

86 
uöt16_t
 
	mª∂yIndex
;

87 
boﬁ
 
	mmccsSètus
;

91 
	sMccsV˝


93 
uöt8_t
 
	mv˝Code
;

94 
uöt16_t
 
	mmaxVÆ
;

95 
uöt16_t
 
	mcuºVÆ
;

99 
MccsReque°C⁄ãxt
 
	gmccsReque°C⁄ãxt
;

100 
MccsV˝
 
	gmccsV˝
;

101 
uöt8_t
 
	ga˘iveC⁄åﬁFifo
[
NEW_CONTROL_FIFO_SIZE
];

103 
uöt8_t
 
	ga˘iveC⁄åﬁFifoIdx
;

106 
	$LﬂdRe˚ivîMccsCacheI¡oMccsTabÀ
(

107 
uöt8_t
 
mccsSour˚
[
MCCS_CACHE_SIZE
],

108 
size_t
 
mccsC≠Size
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

109 
	$LexLoˇlMccsRód
(

110 
uöt8_t
 
ªadLígth
,

111 
uöt8_t
 *
buf„r
,

112 
uöt8_t
 
°¨tFøme
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

113 
	$LﬂdRe˚ivîV˝CacheI¡oV˝TabÀ
(

114 
MccsV˝
 *
v˝TabÀSour˚
,

115 
size_t
 
v˝TabÀSize
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

116 
	$LexLoˇlV˝Ród
(

117 
uöt16_t
 
ªadLígth
,

118 
uöt8_t
 *
buf„r
,

119 
uöt8_t
 
›Code
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

120 
	$SaveV˝CacheToV˝TabÀ
(

121 
uöt8_t
 
v˝Code
,

122 
uöt16_t
 
cuºítVÆue
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

123 
	$LexLoˇlTimögRód
(

124 
uöt16_t
 
ªadLígth
,

125 
uöt8_t
 *
buf„r
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

126 
	$LﬂdRe˚ivîTimögCacheI¡oTabÀ
(

127 
uöt8_t
 *
timögRï‹tSour˚
,

128 
size_t
 
timögRï‹tSize
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

129 
uöt8_t
 
	`v˝ToHex
(uöt8_à
asciiCh¨_1
, uöt8_à
asciiCh¨_2
 );

	@components/dp/src/rex_compliance.c

25 
	~<iba£.h
>

26 
	~<bb_t›.h
>

27 
	~<bb_chù_ªgs.h
>

28 
	~<dp_sour˚_ªgs.h
>

29 
	~<dp_°ªam.h
>

30 
	~"ªx_pﬁicy_makî.h
"

31 
	~"dpcd.h
"

32 
	~"dp_loc.h
"

33 
	~"dp_log.h
"

37 
	#TEST_LINK_TRAINING
 0x01

38 
	#PHY_TEST_PATTERN
 0x08

39 
	#DEVICE_IRQ_AUTOMATION_CLR
 0x02

40 
	#NO_TEST_AUTOMATION
 0x00

	)

44 
	$Te°LökR©eRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

45 
	$Te°L™eCou¡RïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

46 
	$Te°P©ã∫RïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

47 
	$Te°Re•⁄£
(
uöt8_t
 
ª•⁄£
, 
AUX_RexRïlyH™dÀr
 
ª∂yH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

48 
	$LökTøöögTe°Autom©i⁄
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

50 
	$Te°RexXYL™eRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

51 
	$Te°Ród80BôCu°omP©ã∫
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

52 
	$Te°80BôCu°omRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

57 vﬁ©ûê
dp_sour˚_s
* 
dp_sour˚
;

60 
uöt8_t
 
ªquúedTe°P©ã∫
;

61 
RexLtEvítD©a
 
…EvítD©a
;

62 
LökAndSåómP¨amëîs
 
lökAndSåómP¨amëîs
;

63 } 
ªxCom∂ün˚
;

77 
	$Te°Reque°RïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

79 if(
ª∂y
->
d©a
[0] =
PHY_TEST_PATTERN
)

82 
	`SubmôN©iveAuxRód
(0x00200, 0x05, 
NULL
);

83 
	`SubmôN©iveAuxRód
(
PHY_TEST_PATTERN_ADDR
, 0x01, 
Te°P©ã∫RïlyH™dÀr
);

85 if(
ª∂y
->
d©a
[0] =
TEST_LINK_TRAINING
)

87 
	`LökTøöögTe°Autom©i⁄
();

92 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
NOT_LINk_OR_PHY_TEST_REQUEST
);

95 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_DP_DISABLE
);

96 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_DP_ENABLE
);

98 
	}
}

108 
	$LökTøöögTe°Autom©i⁄
()

110 
	`SubmôN©iveAuxRód
(
TEST_LINK_RATE
, 0x01, 
Te°LökR©eRïlyH™dÀr
);

111 
	}
}

120 
	$Te°LökR©eRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

122 
ªxCom∂ün˚
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
 = 
ª∂y
->
d©a
[0];

123 
	`DP_SëMaöLökB™dwidth
(
ªxCom∂ün˚
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
);

125 
	`SubmôN©iveAuxRód
(
TEST_LANE_COUNT
, 0x01, 
Te°L™eCou¡RïlyH™dÀr
);

126 
	}
}

135 
	$Te°L™eCou¡RïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

137 
ªxCom∂ün˚
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
 = 
ª∂y
->
d©a
[0] & 0x1F;

138 
ªxCom∂ün˚
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
íh™˚dFømögE«bÀ
 = 
ª∂y
->
d©a
[0] & (1<<7);

140 
	`DP_SëL™eCou¡
(
ªxCom∂ün˚
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
);

143 
	`Te°Re•⁄£
(0x01, 
NULL
);

145 
	`WrôeLökC⁄figuøti⁄P¨amëîs
(

146 
ªxCom∂ün˚
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
,

147 
ªxCom∂ün˚
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
,

148 
ªxCom∂ün˚
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
íh™˚dFømögE«bÀ
);

150 
ªxCom∂ün˚
.
…EvítD©a
.
lökAndSåómP¨amëîs
 = &rexCompliance.linkAndStreamParameters;

151 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_DISABLE
);

152 
	`RexLtSèãSídEvítWôhD©a
(
REX_LT_ENABLE
, &
ªxCom∂ün˚
.
…EvítD©a
);

153 
	}
}

162 
	$Te°Re•⁄£
(
uöt8_t
 
ª•⁄£
, 
AUX_RexRïlyH™dÀr
 
ª∂yH™dÀr
)

164 c⁄° 
AUX_Reque°
 
AckRe•⁄£
 = {

165 .
hódî
 = {

166 .
comm™d
 = 
NATIVE_AUX_WRITE
,

167 .
addªss
 = 
TEST_RESPONSE
,

168 .
d©aLí
 = 0

170 .
d©a
 = {

171 
ª•⁄£


173 .
Àn
 = 4 + 1

175 
	`AUX_RexEnqueueLoˇlReque°
(&
AckRe•⁄£
, 
ª∂yH™dÀr
);

176 
	}
}

208 
	$Te°P©ã∫RïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

210 
ªxCom∂ün˚
.
ªquúedTe°P©ã∫
 = 
ª∂y
->
d©a
[0];

211 
	`SubmôN©iveAuxRód
(
ADJUST_REQUEST_LANE0_1
, 0x02, 
Te°RexXYL™eRïlyH™dÀr
);

213 
	}
}

222 
	$Te°RexXYL™eRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

224 
	`Adju°VﬁègeSwögAndPªEmphasisL™e0_1
(
ª∂y
->
d©a
[0]);

225 
	`Adju°VﬁègeSwögAndPªEmphasisL™e2_3
(
ª∂y
->
d©a
[1]);

226 
	`IssueTøöögL™eXSëReque°
(
ªxCom∂ün˚
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
, 
NULL
);

227 
	`DP_Rex8b10bEncodögE«bÀ
(
Ál£
);

229 
ªxCom∂ün˚
.
ªquúedTe°P©ã∫
)

235 
	`DP_Sour˚E«bÀS¸ambÀr
(
Ál£
);

236 
	`DP_Rex8b10bEncodögE«bÀ
(
åue
);

237 
	`DP_SëTøöögP©ã∫Sequí˚
(
TPS_1
);

238 
	`Te°Re•⁄£
(0x01, 
NULL
);

245 
	`DP_Sour˚E«bÀS¸ambÀr
(
Ál£
);

246 
	`DP_Rex8b10bEncodögE«bÀ
(
Ál£
);

247 
	`DP_SëTøöögP©ã∫Sequí˚
(
PRBS_7
);

248 
	`Te°Re•⁄£
(0x01, 
NULL
);

256 
	`DP_Sour˚E«bÀS¸ambÀr
(
Ál£
);

257 
	`DP_Rex8b10bEncodögE«bÀ
(
Ál£
);

258 
	`Te°Ród80BôCu°omP©ã∫
();

265 
	`DP_Sour˚E«bÀS¸ambÀr
(
åue
);

266 
	`DP_Rex8b10bEncodögE«bÀ
(
åue
);

267 
	`DP_SëTøöögP©ã∫Sequí˚
(
CPAT2520_1
);

268 
	`Te°Re•⁄£
(0x01, 
NULL
);

275 
	`DP_Sour˚E«bÀS¸ambÀr
(
åue
);

276 
	`DP_Rex8b10bEncodögE«bÀ
(
åue
);

277 
	`DP_SëTøöögP©ã∫Sequí˚
(
CPAT2520_2p
);

278 
	`Te°Re•⁄£
(0x01, 
NULL
);

285 
	`DP_Sour˚E«bÀS¸ambÀr
(
åue
);

286 
	`DP_Rex8b10bEncodögE«bÀ
(
åue
);

287 
	`DP_SëTøöögP©ã∫Sequí˚
(
CPAT2520_3
);

289 
	`Te°Re•⁄£
(0x01, 
NULL
);

293 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
WRONG_TEST_PATTERN
);

294 
	`Te°Re•⁄£
(0x02, 
NULL
);

296 
	}
}

305 
	$Te°Ród80BôCu°omP©ã∫
()

307 
	`SubmôN©iveAuxRód
(
TEST_80BIT_CUSTOM_PATTERN
, 0xA, 
Te°80BôCu°omRïlyH™dÀr
);

308 
	}
}

317 
	$Te°80BôCu°omRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

319 
dp_sour˚
 = (
dp_sour˚_s
*)
bb_chù_dp_sour˚_maö_s_ADDRESS
;

321 
dp_sour˚
->
com∂ün˚
.
s
.
cu°om_80bôs_3_0
.
bf
.
byã0
 = 
ª∂y
->
d©a
[0];

322 
dp_sour˚
->
com∂ün˚
.
s
.
cu°om_80bôs_3_0
.
bf
.
byã1
 = 
ª∂y
->
d©a
[1];

323 
dp_sour˚
->
com∂ün˚
.
s
.
cu°om_80bôs_3_0
.
bf
.
byã2
 = 
ª∂y
->
d©a
[2];

324 
dp_sour˚
->
com∂ün˚
.
s
.
cu°om_80bôs_3_0
.
bf
.
byã3
 = 
ª∂y
->
d©a
[3];

325 
dp_sour˚
->
com∂ün˚
.
s
.
cu°om_80bôs_7_4
.
bf
.
byã4
 = 
ª∂y
->
d©a
[4];

326 
dp_sour˚
->
com∂ün˚
.
s
.
cu°om_80bôs_7_4
.
bf
.
byã5
 = 
ª∂y
->
d©a
[5];

327 
dp_sour˚
->
com∂ün˚
.
s
.
cu°om_80bôs_7_4
.
bf
.
byã6
 = 
ª∂y
->
d©a
[6];

328 
dp_sour˚
->
com∂ün˚
.
s
.
cu°om_80bôs_7_4
.
bf
.
byã7
 = 
ª∂y
->
d©a
[7];

329 
dp_sour˚
->
com∂ün˚
.
s
.
cu°om_80bôs_9_8
.
bf
.
byã8
 = 
ª∂y
->
d©a
[8];

330 
dp_sour˚
->
com∂ün˚
.
s
.
cu°om_80bôs_9_8
.
bf
.
byã9
 = 
ª∂y
->
d©a
[9];

331 
	`DP_SëTøöögP©ã∫Sequí˚
(
PLTPAT
);

332 
	`Te°Re•⁄£
(0x01, 
NULL
);

333 
	}
}

	@components/dp/src/rex_policy_maker.c

25 
	~<iba£.h
>

26 
	~<bb_chù_ªgs.h
>

27 
	~<bb_t›.h
>

28 
	~<c⁄figuøti⁄.h
>

29 
	~<öãºu±s.h
>

30 
	~<idt_˛k.h
>

31 
	~<evít.h
>

32 
	~<À⁄_timîs.h
>

33 
	~<timög_timîs.h
>

34 
	~<˝u_comm.h
>

35 
	~<ˇŒback.h
>

36 
	~<mˇ.h
>

37 
	~<i2cd_dp130.h
>

38 
	~<dp_°ªam.h
>

39 
	~<ã°_dügno°ics.h
>

40 
	~<aux_≠i.h
>

41 
	~"ªx_pﬁicy_makî.h
"

42 
	~"dp_loc.h
"

43 
	~"dp_log.h
"

44 
	~"dpcd.h
"

45 
	~"mccs.h
"

48 
	~<u¨t.h
>

51 
	#REX_PENDING_TIME
 250

52 
	#REX_MONITOR_READ_RETRY
 5

53 
	#REX_MCCS_CAP_READ_RETRY
 5

54 
	#REX_ERROR_RECOVERY_MAX_COUNT
 5

55 
	#REX_MCCS_REPLY_TIME
 80

56 
	#REX_VCP_REPLY_TIME
 80

57 
	#REX_DDCCI_RETRY_TIME
 80

58 
	#REX_TIMING_REPLY_TIME
 80

59 
	#REX_VCP_SEND_WAIT_TIME
 10

60 
	#REX_PENDING_TIME
 250

61 
	#REX_RESET_ERROR_CNT_TIMER
 1000

	)

63 
	#REX_MONITOR_READ_RETRY
 5

64 
	#VIDEO_START_DELAY_TIME
 3000

	)

65 
	#SAVE_SETTING_TIME
 200

	)

66 
	#COMPLIANCE_DELAY_TIME
 3000

	)

67 
	#MCCS_RETRY_DELAY_TIME
 1000

69 
	eRexPmSèã


	)

71 
	mPM_DISABLE
,

72 
	mPM_IDLE
,

73 
	mPM_GET_MONITOR_INFO
,

74 
	mPM_WAIT_REDRIVER_INIT
,

75 
	mPM_MONITOR_LINK_TRAINING
,

76 
	mPM_LINK_TRAINED_NO_VIDEO
,

77 
	mPM_LINK_TRAINED_WAIT_MCA
,

78 
	mPM_WAIT_HOST_VIDEO
,

79 
	mPM_VIDEO_FLOWING
,

80 
	mPM_IDLE_PENDING
,

81 
	mPM_DISABLE_PENDING
,

82 
	mREX_PM_COMPLIANCE_MODE
,

83 
	mPM_ERROR
,

84 
	mNUM_STATES_POLICY_MAKER


87 
	ePro˚ssEdidBa£BlockResu…


89 
	mEDID_INVALID_HEADER
,

90 
	mEDID_CHECKSUM_INVALID
,

91 
	mEDID_VALID


95 
	eAudioF‹m©


97 
	mLPCM
 = 1,

98 
	mAC_3
,

99 
	mMPEG1
,

100 
	mMP3
,

101 
	mMPEG2
,

102 
	mAAC
,

103 
	mDTS
,

104 
	mATRAC
,

105 
	mSACD
,

106 
	mDDP
,

107 
	mDTS_HD
,

108 
	mMLP
,

109 
	mDST_AUDIO
,

110 
	mWMA_PRO


114 
	eAudioFªq


116 
	mKHZ_32
,

117 
	mKHZ_44
,

118 
	mKHZ_48
,

119 
	mKHZ_88
,

120 
	mKHZ_96
,

121 
	mKHZ_176
,

122 
	mKHZ_192


125 
	eRexRëryTy≥s


127 
	mREX_LINK_RETRY
,

128 
	mREX_ADJ_LINK_RETRY
,

129 
	mREX_EDID_READ_RETRY
,

130 
	mREX_CAP_READ_RETRY
,

133 
	sRexPmSèãFœgs


135 
uöt32_t
 
	mÀxWaôM⁄ô‹Info
 : 1;

136 
uöt32_t
 
	mgŸNewSåómP¨ams
 : 1;

137 
uöt32_t
 
	mphyUp
 : 1;

138 
uöt32_t
 
	mÀxA˘ive
 : 1;

139 
uöt32_t
 
	misﬁ©edRex
 : 1;

140 
uöt32_t
 
	mªdrivîInôD⁄e
 : 1;

143 
	sRexAudioC⁄ãxt


145 
boﬁ
 
	mÀxAudioMuãSètus
;

146 
uöt8_t
 
	mmaudVÆue
;

149 
	sRexPmInôC⁄ãxt


151 
SökP¨amëîs
 
	msökP¨amëîs
;

152 
DP_SåómP¨amëîs
 
	m°ªamP¨amëîsNew
;

153 
LökAndSåómP¨amëîs
 
	mlökAndSåómP¨amëîs
;

154 
uöt16_t
 
	medidIndex
;

155 
uöt8_t
 
	medidExtBlkIndex
;

156 
VideoSètus
 
	mvideoSètus
;

157 
RexLtEvítD©a
 
	m…EvítD©a
;

158 
uöt8_t
 
	mmccsC≠RódRëry
;

159 
uöt8_t
 
	mv˝RódRëry
;

160 
boﬁ
 
	mmccsRódyToSíd
;

161 
boﬁ
 
	mmccsSídPídög
;

162 
boﬁ
 
	mª°‹eDeÁu…Reque°
;

163 
boﬁ
 
	m√wC⁄åﬁFœg
;

164 
boﬁ
 
	m√wC⁄åﬁRe£ndFœg
;

165 
boﬁ
 
	m√wC⁄åﬁRe£tD⁄e
;

166 
boﬁ
 
	mmccsAµRu¬ög
;

167 
boﬁ
 
	m√wC⁄åﬁSyncFœg
;

168 
boﬁ
 
	mmccsSídögFœg
;

169 
boﬁ
 
	mcodePageRódSètus
;

170 
uöt8_t
 
	m√wC⁄åﬁReqCou¡î
;

171 
uöt8_t
 
	m√wC⁄åﬁFifoIdx
;

172 
uöt8_t
 
	mmccsRódCou¡
;

173 
uöt8_t
 
	maudioEº‹Cou¡
;

174 
uöt8_t
 
	mªxEº‹Cou¡
;

175 
boﬁ
 
	mgŸSåómP¨amãrs
;

176 
RexAudioC⁄ãxt
 
	mªxAudioCtx
;

177 
boﬁ
 
	medidRódIcmd
;

178 
boﬁ
 
	mˇpIsVÆid
;

179 
boﬁ
 
	mm⁄ô‹InfoRódy
;

182 
	sRexPmC⁄ãxt


184 
TIMING_TimîH™dÀrT
 
	m≥ndögTimî
;

185 
TIMING_TimîH™dÀrT
 
	mª£tEº‹C¡Timî
;

186 
RexPmSèãFœgs
 
	m°©eFœgs
;

187 
RexPmSètusFœgs
 
	mªxSètus
;

188 
LexPmSètusFœgs
 
	mÀxSètus
;

189 
UtûSmInfo
 
	m°©eMachöeInfo
;

190 
uöt8_t
 
	mlökRëryCou¡
;

191 
uöt8_t
 
	madju°LökP¨amCou¡
;

192 
uöt8_t
 
	mm⁄ô‹EdidRódRëry
;

193 
uöt8_t
 
	mm⁄ô‹C≠RódRëry
;

194 
boﬁ
 
	mmccsRódSuc˚ss
;

195 
uöt8_t
 
	mmccsSídCou¡
;

198 
	sRexPmAudio


200 
AudioF‹m©
 
	msökF‹m©
;

201 
uöt8_t
 
	mnumCh™√l
;

202 
AudioFªq
 
	msökFªq
[7];

203 
uöt8_t
 
	msökFªqSize
;

204 
uöt8_t
 
	mbôøã
;

208 
RexPmSèã
 
	$RexPmDißbÀdH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

209 
RexPmSèã
 
	$RexPmIdÀH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

210 
RexPmSèã
 
	$RexPmM⁄ô‹InfoH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

211 
RexPmSèã
 
	$RexPmLökTøöögH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

212 
RexPmSèã
 
	$RexPmWaôRedrivîInôH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

213 
RexPmSèã
 
	$RexPmLökTøöedNoVideoH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

214 
RexPmSèã
 
	$RexPmLökTøöedWaôMˇH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

215 
RexPmSèã
 
	$RexPmWaôHo°VideoH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

216 
RexPmSèã
 
	$RexPmVideoFlowögH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

217 
RexPmSèã
 
	$RexPmIdÀPídögH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

218 
RexPmSèã
 
	$RexPmDißbÀPídögH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

219 
RexPmSèã
 
	$RexPmCom∂ün˚H™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

220 
RexPmSèã
 
	$RexPmEº‹H™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

221 
RexPmSèã
 
	$RexPmComm⁄H™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

223 
	$RexPmCpuMsgRe˚ivedEvítH™dÀr
(

224 
uöt8_t
 
subTy≥
, c⁄° uöt8_à*
msg
, 
uöt16_t
 
msgLígth
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

225 
uöt32_t
 
	$RexGíMvid
(
LökAndSåómP¨amëîs
 *
lökSåómP¨ams
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

226 
	$RexPmIdÀE¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

227 
	$RexPmLökTøöögE¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

228 
	$RexPmDißbÀE¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

229 
	$RexPmDißbÀExô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

230 
	$RexPmCÀ¨C⁄ãxt
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

231 
	$AuxRïlyC≠H™dÀr
(

232 c⁄° 
AUX_Reque°
 *
ªque°
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

234 
	$RexPmMccsRódögH™dÀr
(c⁄° 
RexPmEvítD©a
 *
evítD©a
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

235 
size_t
 
	$Upd©eMccsCache
(

236 c⁄° 
AUX_Reque°AndRïlyC⁄èöî
 *
ªque°AndRïlyC⁄èöî
,

237 
MCCSCache
 *
mccsCache
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

238 
size_t
 
	$Upd©eV˝TabÀ
(

239 c⁄° 
AUX_Reque°AndRïlyC⁄èöî
 *
ªque°AndRïlyC⁄èöî
,

240 
MccsV˝
 
V˝TabÀ
[],

241 
size_t
 
V˝TabÀSize
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

242 
boﬁ
 
	$EndRódMccs
(
MCCSCache
 *
mccsCache
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

243 
	$RódMccsC≠
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

244 
	$MccsRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªque°
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

245 
	$V˝RïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªque°
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

246 
	$Upd©eMccsChecksumByã
(
uöt8_t
 *
ªque°Meßge
, uöt8_à
mesßgeLí
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

247 
	$RexMccsRïlyTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

248 
	$RexV˝RïlyTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

249 
	$RexDdcciRëryTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

250 
	$RódTimögRï‹t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

251 
	$RexTimögRï‹tTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

252 
boﬁ
 
	$LökP¨amsCh™gedDurögLökTøöög
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

253 
	$TimögRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªque°
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

254 
	$RódV˝TabÀ
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

255 
	$RexPmV˝RódögH™dÀr
(c⁄° 
RexPmEvítD©a
 *
evítD©a
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

256 
	$EndRódV˝TabÀ
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

257 
	$RexSídMccsC≠abûôõs
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

258 
	$RexSídM⁄ô‹Info
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

259 
	$RexMccsReque°TimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

260 
	$RexPro˚ssCom∂ün˚Reque°
(
uöt8_t
 *
ªque°Meßge
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

261 
	$SídTimögRï‹t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

262 
	$NewC⁄åﬁTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

263 
	$Com∂ün˚TimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

264 
	$RexMccsEvítH™dÀr
(
boﬁ
 
°©us
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

265 
	$MccsRëryTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

266 
	$SídV˝Reque°
(
uöt8_t
 
v˝Code
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

267 
	$St‹eV˝CodeInFifo
(
uöt16_t
 
cuºítVÆ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

268 
	$V˝SëTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

269 
	$SídNewC⁄åﬁFifo
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

270 
	$Re£tNewC⁄åﬁVÆue
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

272 
	$RexPmEdidRódögH™dÀr
(c⁄° 
RexPmEvítD©a
 *
evítD©a
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

273 
size_t
 
	$Upd©eEdidCache
(

274 c⁄° 
AUX_Reque°AndRïlyC⁄èöî
 *
ªque°AndRïlyC⁄èöî
, 
uöt8_t
 *
edidCache
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

275 
	$EndRódEdid
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

276 
	$RódEdidBlock
–
uöt8_t
 
blockNum
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

277 
Pro˚ssEdidBa£BlockResu…
 
	$Pro˚ssEdidBa£Block
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

278 
boﬁ
 
	$Ho°SåómP¨amsCh™ged
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

279 
	$Upd©eAudioD©a
(c⁄° 
uöt8_t
 *
edidBa£Block
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

280 
	$lﬂdDeÁu…LökSåómP¨am
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

281 
	$RexPmCommLökEvítH™dÀr
(

282 
uöt32_t
 
lökUp
, uöt32_à
u£rC⁄ãxt
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

283 
	$RexPmC⁄figuøti⁄EvítH™dÀr
(

284 
uöt32_t
 
evítInfo
, uöt32_à
u£rC⁄ãxt
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

285 
boﬁ
 
	$RexPmDpE«bÀd
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

286 
	$RexPmM⁄ô‹C⁄√˘MsgH™dÀr
(
boﬁ
 
c⁄√˘ed
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

287 
	$RexPídögTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

288 
	$RexVideoSèπTimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

289 
	$RexRe£tCou¡TimîH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

290 
	$RexPmUpd©eVideoSètus
(
VideoSètus
 
videoSètus
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

291 
uöt32_t
 
	$RexPmGëVideoSètus
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

292 
	$RexPowîSëAndSökCou¡
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

293 
	$RexSökCou¡H™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

294 
	$RexSëM⁄ô‹PowîDown
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

295 
	$RexRódM⁄ô‹C≠
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

296 
	$RexEvítCÆlback
(*
∑øm1
, *
∑øm2
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

297 
	$RexLexA˘iveEvítGíî©e
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

298 
	$RexUpd©eVideoRxRódyInfo
(
boﬁ
 
ªady
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

299 
	$RexSídRexPmSètus
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

300 
	$RexSídBœckVideo
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

301 
	$RexUpd©eAUX™dDpSåómP¨ams
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

302 
	$RexDP130InôCÆlback
(
boﬁ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

303 
	$RexPmMˇEº‹CÆlback
(
MCA_Ch™√lEº‹
 
mˇEº‹
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

304 
	$RexHPDI¡îru±H™dÀr
(
RexHPDI¡îru±
 
hpdI¡îru±
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

305 
	$RexPmMˇEvítH™dÀr
(
MCA_Ch™√lSètus
 
ch™√lSètus
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

306 
	$RexSídCpuMesßgeToLex
(c⁄° 
AUX_Up°ªamCpuMesßge
*Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

307 
	$EdidRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªque°
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

308 
	$RexCheckMaxBw
(
uöt8_t
 *
ª˚ivîC≠Cache
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

309 
	$M⁄ô‹IrqH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

310 
	$Devi˚Sîvi˚IrqRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

311 
	$RexRódLökSètusIrq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

312 
	$RexRódLökSètusIrqH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

313 
	$RexM⁄ô‹InfoEvítH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

314 
	$RexSëFÆlbckSåómP¨ams
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

315 
	$RexVideoFlowögE¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

316 
	$RexSèπVideo
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

317 
RexPmSèã
 
	$RexRëryH™dÀr
(
RexRëryTy≥s
 
ty≥
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

318 
	$RexUpd©eMvid
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

325 
TIMING_TimîH™dÀrT
 
MccsRïlyTimî
;

326 
TIMING_TimîH™dÀrT
 
MccsReque°Timî
;

327 
TIMING_TimîH™dÀrT
 
V˝RïlyTimî
;

328 
TIMING_TimîH™dÀrT
 
DDCCIRëryTimî
;

329 
TIMING_TimîH™dÀrT
 
TimögRïlyTimî
;

330 
TIMING_TimîH™dÀrT
 
VideoSèπTimî
;

331 
TIMING_TimîH™dÀrT
 
MCCSRëryTimî
;

333 
TIMING_TimîH™dÀrT
 
Com∂ün˚Timî
;

334 
TIMING_TimîH™dÀrT
 
NewC⁄åﬁTimî
;

335 
TIMING_TimîH™dÀrT
 
V˝SëTimî
;

336 
uöt8_t
 
RódReqCou¡î
 = 0;

337 
uöt8_t
 
mccsC≠Req
[] = {0x6E, 0x51, 0x83, 0xF3, 0x00, 0x00, 0x4F
	}
};

338 
uöt8_t
 
	gv˝GëReq
[] = {0x6E, 0x51, 0x82, 0x01, 0x00, 0x00};

339 
uöt8_t
 
	gv˝SëReq
[] = {0x6E, 0x51, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00};

340 
uöt8_t
 
	gtimögRï‹tReq
[] = {0x6E, 0x51, 0x81, 0x07, 0xB9};

341 
uöt8_t
 
	g√wC⁄åﬁReq
[] = {0x6E, 0x51, 0x82, 0x01, 0x02, 0xBE};

342 
uöt8_t
 
	ga˘iveC⁄åﬁReq
[] = {0x6E, 0x5, 0x82, 0x01, 0x52, 0xEE};

343 
uöt8_t
 
	g√wC⁄åﬁFifo
[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

344 
uöt8_t
 
	gtimögRï‹tRïly
[
TIMING_REPLY_SIZE
];

345 
uöt8_t
 
	gßveSëtögReq
[] = {0x6E, 0x51, 0x81, 0x0C, 0xB2};

346 
uöt8_t
 
	gv˝TabÀIndex
 = 0;

347 
size_t
 
	gv˝TabÀSize
;

348 
MccsV˝
 
	gv˝TabÀ
[
VCP_TABLE_SIZE
];

349 
MCCSCache
 
	gmccsCache
;

350 
MCCSCache
 
	gmccsC›y
;

351 
boﬁ
 
	gmccsRódRequúed
;

352 
uöt8_t
 
	gmccsSuc˚ssCou¡î
;

353 
uöt8_t
 
	gmccsFaûuªCou¡î
;

357 c⁄° 
EvítH™dÀr
 
	gpmSèãTabÀ
[
NUM_STATES_POLICY_MAKER
] =

359 [
PM_DISABLE
] = 
RexPmDißbÀdH™dÀr
,

360 [
PM_IDLE
] = 
RexPmIdÀH™dÀr
,

361 [
PM_GET_MONITOR_INFO
] = 
RexPmM⁄ô‹InfoH™dÀr
,

362 [
PM_WAIT_REDRIVER_INIT
] = 
RexPmWaôRedrivîInôH™dÀr
,

363 [
PM_MONITOR_LINK_TRAINING
] = 
RexPmLökTøöögH™dÀr
,

364 [
PM_LINK_TRAINED_NO_VIDEO
] = 
RexPmLökTøöedNoVideoH™dÀr
,

365 [
PM_LINK_TRAINED_WAIT_MCA
] = 
RexPmLökTøöedWaôMˇH™dÀr
,

366 [
PM_WAIT_HOST_VIDEO
] = 
RexPmWaôHo°VideoH™dÀr
,

367 [
PM_VIDEO_FLOWING
] = 
RexPmVideoFlowögH™dÀr
,

368 [
PM_IDLE_PENDING
] = 
RexPmIdÀPídögH™dÀr
,

369 [
PM_DISABLE_PENDING
] = 
RexPmDißbÀPídögH™dÀr
,

370 [
REX_PM_COMPLIANCE_MODE
] = 
RexPmCom∂ün˚H™dÀr
,

371 [
PM_ERROR
] = 
RexPmEº‹H™dÀr
,

374 
RexPmC⁄ãxt
 
	gªxPmC⁄ãxt
 =

376 .
°©eMachöeInfo
.
°©eH™dÀrs
 = 
pmSèãTabÀ
,

377 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gª£rved
 = 0,

378 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	glogLevñ
 = (
uöt8_t
)
ILOG_MAJOR_EVENT
,

379 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gûogComp⁄ít
 = 
DP_COMPONENT
,

380 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gûogId
 = 
PM_STATE_TRANSITION


383 
RexPmC⁄ãxt
 
	gªxPmC⁄ãxt
;

384 
RexPmInôC⁄ãxt
 
	gªxPmInôC⁄ãxt
;

385 
RexPmAudio
 
	gªxAudio
;

387 c⁄° 
DP_SåómP¨amëîs
 
	gÁŒbackSåómP¨am
 =

389 .
mvid
 = 1531,

390 .
	gnvid
 = 32768,

391 .
	gh
.
	gtŸÆ
 = 800,

392 .
	gh
.
	g°¨t
 = 144,

393 .
	gh
.
	gwidth
 = 640,

394 .
	gh
.
	gpﬁ¨ôy
 = 1,

395 .
	gh
.
	gsync_width
 = 96,

396 .
	gv
.
	gtŸÆ
 = 525,

397 .
	gv
.
	g°¨t
 = 35,

398 .
	gv
.
	gheight
 = 480,

399 .
	gv
.
	gpﬁ¨ôy
 = 1,

400 .
	gv
.
	gsync_width
 = 2,

401 .
	gmisc
.
	gy_⁄ly
 = 0,

402 .
	gmisc
.
	g°îeo
 = 0,

403 .
	gmisc
.
	göt_tŸÆ
 = 0,

404 .
	gmisc
.
	gcﬁ‹
 = 0,

405 .
	gmisc
.
	g˛k_sync
 = 0,

406 .
	gcs_pkt_Àngth
 = 60,

407 .
	gtu_size
 = 64,

408 .
	gÂs
 = 60000

419 
	$AUX_RexPﬁicyMakîInô
()

421 
	`EVENT_Regi°î
(
ET_VIDEO_STATUS_CHANGE
, 
RexPmGëVideoSètus
);

422 
	`EVENT_Subs¸ibe
(
ET_COMLINK_STATUS_CHANGE
, 
RexPmCommLökEvítH™dÀr
, 0);

423 
	`EVENT_Subs¸ibe
(
ET_CONFIGURATION_CHANGE
, 
RexPmC⁄figuøti⁄EvítH™dÀr
, 0);

424 
	`CPU_COMM_Regi°îH™dÀr
(
CPU_COMM_TYPE_AUX
, 
RexPmCpuMsgRe˚ivedEvítH™dÀr
);

426 
	`MCA_Ch™√lInô
(
MCA_CHANNEL_NUMBER_DP
, 
RexPmMˇEvítH™dÀr
, 
RexPmMˇEº‹CÆlback
);

428 
	`AUX_RexTønß˘i⁄H™dÀrInô
();

430 
ªxPmC⁄ãxt
.
≥ndögTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

431 
RexPídögTimîH™dÀr
, 
Ál£
, 
REX_PENDING_TIME
);

433 
MccsRïlyTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
RexMccsRïlyTimîH™dÀr
, 
Ál£
, 
REX_MCCS_REPLY_TIME
);

434 
MccsReque°Timî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
RexMccsReque°TimîH™dÀr
, 
Ál£
, 
REX_MCCS_REPLY_TIME
);

435 
V˝RïlyTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
RexV˝RïlyTimîH™dÀr
, 
Ál£
, 
REX_VCP_REPLY_TIME
);

436 
DDCCIRëryTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
RexDdcciRëryTimîH™dÀr
, 
Ál£
, 
REX_DDCCI_RETRY_TIME
);

437 
TimögRïlyTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
RexTimögRï‹tTimîH™dÀr
, 
Ál£
, 
REX_TIMING_REPLY_TIME
);

438 
VideoSèπTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
RexVideoSèπTimîH™dÀr
, 
Ál£
, 
VIDEO_START_DELAY_TIME
);

440 
MCCSRëryTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
MccsRëryTimîH™dÀr
, 
Ál£
, 
MCCS_RETRY_DELAY_TIME
);

441 
Com∂ün˚Timî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
Com∂ün˚TimîH™dÀr
, 
Ál£
, 
COMPLIANCE_DELAY_TIME
);

443 
NewC⁄åﬁTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
NewC⁄åﬁTimîH™dÀr
, 
åue
, 
NEW_CONTROL_SCAN_INTERVAL
);

444 
V˝SëTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
V˝SëTimîH™dÀr
, 
Ál£
, 
REX_VCP_REPLY_TIME
);

446 
ªxPmC⁄ãxt
.
ª£tEº‹C¡Timî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

447 
RexRe£tCou¡TimîH™dÀr
, 
Ál£
, 
REX_RESET_ERROR_CNT_TIMER
);

449 
ªxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©edRex
 = 
dpC⁄figPå
->
íabÀIsﬁ©e
;

451 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
,

452 
ªxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©edRex
 ? 
AUX_ISOLATED_REX_ENABLED
 : 
AUX_ISOLATED_REX_DISABLED
);

455 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_EVENT_ENTER
);

458 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_DP_ENABLE
);

460 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFifoIdx
 = 1;

461 
	}
}

470 
	$AUX_RexSëIsﬁ©edSèã
()

472 
ªxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©edRex
 = 
åue
;

473 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
,

474 
ªxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©edRex
 ? 
AUX_ISOLATED_REX_ENABLED
 : 
AUX_ISOLATED_REX_DISABLED
);

475 
	}
}

484 
	$AUX_RexEdidRód
()

486 
ªxPmInôC⁄ãxt
.
edidIndex
 = 0;

487 
ªxPmInôC⁄ãxt
.
edidRódIcmd
 = 
åue
;

488 
ªxPmInôC⁄ãxt
.
edidExtBlkIndex
 = 1;

489 
	`RódEdidBlock
(0);

490 
	}
}

501 
	$RexPmSèãSídEvítWôhD©a
(
RexPmEvít
 
evít
, 
RexPmEvítD©a
 *
evítD©a
)

504 
uöt32_t
 
evítx
 = 
evít
;

506 
	`CALLBACK_Run
(
RexEvítCÆlback
, (*)
evítx
, (*)
evítD©a
);

507 
	}
}

517 
	$RexPmSèãSídEvítWôhNoD©a
(
RexPmEvít
 
evít
)

520 
uöt32_t
 
evítx
 = 
evít
;

522 
	`CALLBACK_Run
(
RexEvítCÆlback
, (*)
evítx
, 
NULL
);

523 
	}
}

532 
	$AUX_RexPmLogSèã
()

534 
	`ûog_DP_COMPONENT_1
(
ILOG_USER_LOG
, 
PM_LOG_STATE
, 
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
cuºítSèã
);

535 
	}
}

545 
uöt8_t
 
	$RexLoˇlDpcdRód
(
uöt32_t
 
dpcdAddr
)

547 
	`üs£π_DP_COMPONENT_1
(
dpcdAddr
 < 
AUX_CAP_READ_SIZE
, 
AUX_CAP_WRONG_ADDR
, dpcdAddr);

548  
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
ª˚ivîC≠Cache
[
dpcdAddr
];

549 
	}
}

562 
	$SubmôN©iveAuxRód
(
uöt32_t
 
addªss
, 
uöt8_t
 
ªadLígth
, 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
)

564 c⁄° 
AUX_Reque°
 
ªadReque°
 = {

565 .
d©a
 = { 0 },

566 .
hódî
 = {

567 .
comm™d
 = 
NATIVE_AUX_READ
,

568 .
addªss
 =áddress,

569 .
d©aLí
 = 
ªadLígth
 - 1 },

570 .
Àn
 = 4

572 
	`AUX_RexEnqueueLoˇlReque°
(&
ªadReque°
, 
ªxRïlyH™dÀr
);

573 
	}
}

580 
	$SubmôN©iveAuxWrôe
(
uöt32_t
 
addªss
, 
uöt8_t
 
wrôeD©a
, 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
)

582 c⁄° 
AUX_Reque°
 
wrôeReque°
 = {

583 .
hódî
 = {

584 .
comm™d
 = 
NATIVE_AUX_WRITE
,

585 .
addªss
 =áddress,

586 .
d©aLí
 = 0 },

587 .
d©a
 = {
wrôeD©a
},

588 .
Àn
 = 4 + 1

590 
	`AUX_RexEnqueueLoˇlReque°
(&
wrôeReque°
, 
ªxRïlyH™dÀr
);

591 
	}
}

600 
	$RexI§H™dÀr
(
uöt32_t
 
i§Ty≥
)

602 
i§Ty≥
)

604 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_IRQ
:

605 
	`RexHPDI¡îru±H™dÀr
(
HPD_INT_IRQ
);

608 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_REPLUG
:

609 
	`RexHPDI¡îru±H™dÀr
(
HPD_INT_REPLUG
);

612 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT
:

613 
	`RexHPDI¡îru±H™dÀr
(
HPD_INT_DISCONNECT
);

616 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_CONNECT
:

617 
	`RexHPDI¡îru±H™dÀr
(
HPD_INT_CONNECT
);

623 
	}
}

632 
	$RexEº‹H™dÀr
(
AuxEº‹Code
 
îrCode
)

634 
îrCode
)

636 
AUX_REQUEST_FAIL
:

637 i‡(
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
cuºítSèã
 =
PM_MONITOR_LINK_TRAINING
)

639 
	`RexSãpAuxSèãMachöe
(
AUX_REX_RESET_REQUEST
);

640 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MONITOR_LINK_TRAINING_FAIL
);

642 i‡(
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
cuºítSèã
 =
PM_GET_MONITOR_INFO
)

644 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_EDID_READ_FAIL
);

648 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MONITOR_DISCONNECT
);

655 
	}
}

664 
	$DP_REX_RódMccs
()

666 
	`mem£t
((
uöt8_t
 *)&
mccsCache
, 0, (
MCCSCache
));

667 
	`RódMccsC≠
();

668 
	}
}

677 
	$DP_REX_CheckNewC⁄åﬁVÆues
()

679 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFœg
 = 
åue
;

680 
	`SídV˝Reque°
(
NEW_CONTROL_CODE
);

681 
	}
}

690 
	$AUX_RexSídV˝Reque°
(
uöt8_t
 
›code
)

692 
	`SídV˝Reque°
(
›code
);

693 
	}
}

702 
uöt8_t
* 
	$DP_REX_GëLoˇlEdid
()

704  
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
;

705 
	}
}

714 
	$DP_REX_IcmdPrötAŒSètusFœg
()

716 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_PRINT_STATUS
);

717 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_PHYUP
, 
ªxPmC⁄ãxt
.
°©eFœgs
.
phyUp
);

718 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LEXWAITMONINFO
, 
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxWaôM⁄ô‹Info
);

719 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_GOTNEWSTRMPARA
, 
ªxPmC⁄ãxt
.
°©eFœgs
.
gŸNewSåómP¨ams
);

720 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_ISOLATE
, 
ªxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©edRex
);

721 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_REXDRIVEINIT
, 
ªxPmC⁄ãxt
.
°©eFœgs
.
ªdrivîInôD⁄e
);

722 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LEXACT
, 
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxA˘ive
);

723 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_REXDPEN
, 
ªxPmC⁄ãxt
.
ªxSètus
.
ªxDpE«bÀd
);

724 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MONCONN
, 
ªxPmC⁄ãxt
.
ªxSètus
.
m⁄ô‹C⁄√˘ed
);

725 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_VIDEORXRDY
, 
ªxPmC⁄ãxt
.
ªxSètus
.
videoRxRódy
);

726 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LEXDPEN
, 
ªxPmC⁄ãxt
.
ÀxSètus
.
ÀxDpE«bÀd
);

727 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_HOSTCONN
, 
ªxPmC⁄ãxt
.
ÀxSètus
.
ho°C⁄√˘ed
);

728 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LEXRXREADY
, 
ªxPmC⁄ãxt
.
ÀxSètus
.
ÀxVideoTxRódy
);

729 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_GOTSTREAMPARAM
, 
ªxPmInôC⁄ãxt
.
gŸSåómP¨amãrs
);

730 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MONINFORDY
, 
ªxPmInôC⁄ãxt
.
m⁄ô‹InfoRódy
);

731 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_CAPVALID
, 
ªxPmInôC⁄ãxt
.
ˇpIsVÆid
);

732 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_CURNTSTATE
, 
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
cuºítSèã
);

733 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_PREVSTATE
, 
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
¥evSèã
);

734 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_EVENT
, 
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
evít
);

736 
	}
}

747 
	$RexEvítCÆlback
(*
∑øm1
, *
∑øm2
)

750 
	`UTILSM_Po°Evít
(&
ªxPmC⁄ãxt
.
°©eMachöeInfo
,

751 (
uöt32_t
)
∑øm1
,

752 (c⁄° 
RexPmEvítD©a
 *)
∑øm2
);

753 
	}
}

764 
RexPmSèã
 
	$RexPmDißbÀdH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

766 
RexPmSèã
 
√wSèã
 = (RexPmSèã)
cuºítSèã
;

768 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

770 
	`RexPmDißbÀE¡î
();

772 i‡(
evít
 =
REX_AUX_EVENT_EXIT
)

774 
	`RexPmDißbÀExô
();

776 i‡(
evít
 =
REX_AUX_DP_ENABLE
)

778 if(
	`RexPmDpE«bÀd
())

780 
√wSèã
 = 
PM_IDLE
;

783 i‡(
evít
 =
REX_AUX_DP_DISABLE
)

785 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
PM_UNHANDLED_EVENT
, 
evít
, 
PM_DISABLE
);

789 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

792  
√wSèã
;

793 
	}
}

804 
RexPmSèã
 
	$RexPmIdÀH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

806 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

808 i‡(
evít
=
REX_AUX_EVENT_ENTER
)

810 
	`RexPmIdÀE¡î
();

811 if((
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxA˘ive
) &&

812 (
ªxPmC⁄ãxt
.
ªxSètus
.
m⁄ô‹C⁄√˘ed
))

814 
√wSèã
 = 
PM_GET_MONITOR_INFO
;

817 if(
evít
 =
REX_AUX_MONITOR_CONNECT
)

819 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_NO_HPD
);

820 if((
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxA˘ive
) ||

821 (
ªxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©edRex
))

823 
√wSèã
 = 
PM_GET_MONITOR_INFO
;

826 i‡(
evít
 =
REX_AUX_LEX_REQUEST_MONITOR_INFO
)

828 
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxWaôM⁄ô‹Info
 = 
åue
;

830 i‡((
evít
 =
REX_AUX_LEX_ACTIVE
) &&

831 (
ªxPmC⁄ãxt
.
ªxSètus
.
m⁄ô‹C⁄√˘ed
))

833 
√wSèã
 = 
PM_GET_MONITOR_INFO
;

837 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

840  
√wSèã
;

841 
	}
}

853 
RexPmSèã
 
	$RexPmM⁄ô‹InfoH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

855 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

857 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

859 
	`RexPowîSëAndSökCou¡
();

860 
	`RexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

862 i‡(
evít
 =
REX_AUX_GOT_EDID_INFO
)

864 
ªxPmC⁄ãxt
.
m⁄ô‹EdidRódRëry
 = 0;

865 
ªxPmC⁄ãxt
.
m⁄ô‹C≠RódRëry
 = 0;

866 
√wSèã
 = 
PM_WAIT_REDRIVER_INIT
;

868 i‡(
evít
 =
REX_AUX_EDID_READ_FAIL
)

870 
√wSèã
 = 
	`RexRëryH™dÀr
(
REX_EDID_READ_RETRY
);

872 i‡(
evít
 =
REX_AUX_CAP_READ_FAIL
)

874 
√wSèã
 = 
	`RexRëryH™dÀr
(
REX_CAP_READ_RETRY
);

876 i‡–(
evít
 =
REX_AUX_MONITOR_DISCONNECT
) ||

877 (
evít
 =
REX_AUX_LEX_OFFLINE
) )

879 
√wSèã
 = 
PM_IDLE_PENDING
;

881 i‡(
evít
 =
REX_AUX_LEX_REQUEST_MONITOR_INFO
)

883 
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxWaôM⁄ô‹Info
 = 
åue
;

887 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

890  
√wSèã
;

891 
	}
}

900 
RexPmSèã
 
	$RexPmWaôRedrivîInôH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

902 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

904 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

906 if(
ªxPmC⁄ãxt
.
°©eFœgs
.
ªdrivîInôD⁄e
)

908 
√wSèã
 = 
PM_MONITOR_LINK_TRAINING
;

910 
	`RexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

912 i‡(
evít
 =
REX_AUX_DP_RX_HOST_INFO
)

915 i‡(
evít
 =
REX_AUX_LEX_REQUEST_MONITOR_INFO
)

917 
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxWaôM⁄ô‹Info
 = 
åue
;

919 i‡((
evít
 =
REX_AUX_MONITOR_DISCONNECT
) ||

920 (
evít
 =
REX_AUX_LEX_OFFLINE
))

922 
√wSèã
 = 
PM_IDLE_PENDING
;

924 i‡(
evít
 =
REX_AUX_REDRIVER_INIT_DONE
)

926 if(!
ªxPmC⁄ãxt
.
°©eFœgs
.
ªdrivîInôD⁄e
)

928 
√wSèã
 = 
PM_ERROR
;

932 
√wSèã
 = 
PM_MONITOR_LINK_TRAINING
;

937 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

940  
√wSèã
;

941 
	}
}

952 
RexPmSèã
 
	$RexPmLökTøöögH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

954 
RexPmSèã
 
√wSèã
 = (RexPmSèãË
cuºítSèã
;

956 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

958 
	`RexPmLökTøöögE¡î
();

959 
	`RexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

961 i‡(
evít
 =
REX_AUX_MONITOR_DISCONNECT
)

963 
√wSèã
 = 
PM_IDLE_PENDING
;

965 i‡(
evít
 =
REX_AUX_CAP_READ_FAIL
)

967 
√wSèã
 = 
	`RexRëryH™dÀr
(
REX_CAP_READ_RETRY
);

969 i‡(
evít
 =
REX_AUX_MONITOR_LINK_TRAINING_SUCCESS
)

971 
	`RexPmUpd©eVideoSètus
(
VIDEO_TRAINING_UP
);

972 if(
	`LökP¨amsCh™gedDurögLökTøöög
())

974 
√wSèã
 = 
	`RexRëryH™dÀr
(
REX_ADJ_LINK_RETRY
);

980 
ªxPmC⁄ãxt
.
adju°LökP¨amCou¡
 = 0;

981 
ªxPmC⁄ãxt
.
lökRëryCou¡
 = 0;

982 
√wSèã
 = 
PM_LINK_TRAINED_NO_VIDEO
;

984 i‡(
	`TEST_GëDügSèã
(Ë&& (
	`TEST_GëEº‹Sèã
(Ë<
DIAG_NO_HPD
))

986 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_NO_ERROR
);

987 
	`TEST_PrötTe°V¨übÀs
();

990 i‡(
evít
 =
REX_AUX_MONITOR_LINK_TRAINING_FAIL
)

993 i‡(
	`TEST_GëDügSèã
())

995 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_LT_FAIL
);

998 
√wSèã
 = 
	`RexRëryH™dÀr
(
REX_LINK_RETRY
);

1000 i‡(
evít
 =
REX_AUX_LEX_REQUEST_MONITOR_INFO
)

1002 
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxWaôM⁄ô‹Info
 = 
åue
;

1004 i‡(
evít
 =
REX_AUX_MONITOR_IRQ
)

1006 
	`M⁄ô‹IrqH™dÀr
();

1008 i‡(
evít
 =
REX_AUX_MONITOR_REPLUG
)

1010 
√wSèã
 = 
PM_IDLE_PENDING
;

1020 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1023  
√wSèã
;

1024 
	}
}

1035 
RexPmSèã
 
	$RexPmLökTøöedNoVideoH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

1037 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

1039 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

1041 
	`RexPmUpd©eVideoSètus
(
VIDEO_TRAINING_UP
);

1042 i‡(
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
¥evSèã
 =
PM_MONITOR_LINK_TRAINING
)

1044 
	`RexUpd©eMvid
();

1045 
	`RexSëFÆlbckSåómP¨ams
();

1046 
	`RexUpd©eAUX™dDpSåómP¨ams
();

1047 
	`SídIdÀP©ã∫
();

1048 
	`RexProgømALU
();

1049 
	`DP_SëCpuM©hResu…Ródy
(
åue
);

1051 
	`RexSídBœckVideo
();

1053 
ªxPmInôC⁄ãxt
.
m⁄ô‹InfoRódy
 = 
åue
;

1056 if(
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxWaôM⁄ô‹Info
 ||ÑexPmC⁄ãxt.°©eFœgs.
ÀxA˘ive
)

1058 
	`RexM⁄ô‹InfoEvítH™dÀr
();

1061 i‡(
	`TEST_GëDügSèã
())

1063 
	`TEST_PrötTe°V¨übÀs
();

1066 i‡(
evít
 =
REX_AUX_LEX_ACTIVE
)

1068 
	`RexPowîSëAndSökCou¡
();

1069 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_SEND_CRITERIA
,

1070 
ªxPmInôC⁄ãxt
.
mccsRódyToSíd
, 
ªxPmC⁄ãxt
.
mccsSídCou¡
);

1071 i‡((
ªxPmInôC⁄ãxt
.
mccsRódyToSíd
 || 
ªxPmC⁄ãxt
.
mccsSídCou¡
Ë&& 
dpC⁄figPå
->
noRódMccs
)

1073 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_SEND_PENDING
);

1074 
ªxPmInôC⁄ãxt
.
mccsSídPídög
 = 
åue
;

1076 
	`RexM⁄ô‹InfoEvítH™dÀr
();

1078 i‡(
evít
 =
REX_AUX_DP_RX_HOST_INFO
)

1080 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_SEND_CRITERIA
, 
ªxPmInôC⁄ãxt
.
mccsRódyToSíd
, 
ªxPmC⁄ãxt
.
mccsSídCou¡
);

1081 i‡((
ªxPmInôC⁄ãxt
.
mccsRódyToSíd
 || 
ªxPmC⁄ãxt
.
mccsSídCou¡
Ë&& 
dpC⁄figPå
->
noRódMccs
)

1083 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_SEND_PENDING
);

1084 
ªxPmInôC⁄ãxt
.
mccsSídPídög
 = 
åue
;

1086 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_REX_READY_FOR_MCA
);

1087 
√wSèã
 = 
PM_LINK_TRAINED_WAIT_MCA
;

1089 i‡(
evít
 =
REX_AUX_MONITOR_DISCONNECT
)

1091 
√wSèã
 = 
PM_IDLE_PENDING
;

1093 i‡(
evít
 =
REX_AUX_MONITOR_IRQ
)

1095 
	`M⁄ô‹IrqH™dÀr
();

1097 i‡(
evít
 =
REX_PM_EVENT_COMPLIANCE_MODE
)

1099 
√wSèã
 = 
REX_PM_COMPLIANCE_MODE
;

1103 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1105  
√wSèã
;

1106 
	}
}

1116 
RexPmSèã
 
	$RexPmLökTøöedWaôMˇH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

1118 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

1120 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

1122 
	`RexPmUpd©eVideoSètus
(
VIDEO_TRAINING_UP
);

1123 
	`MCA_Ch™√lLökUp
(
MCA_CHANNEL_NUMBER_DP
);

1125 i‡(
evít
 =
REX_AUX_EVENT_EXIT
)

1127 if(
cuºítSèã
 !
PM_WAIT_HOST_VIDEO
)

1129 
	`MCA_Ch™√lLökDn
(
MCA_CHANNEL_NUMBER_DP
);

1132 i‡(
evít
 =
REX_AUX_MCA_UP
)

1134 
√wSèã
 = 
PM_WAIT_HOST_VIDEO
;

1136 i‡(
evít
 =
REX_AUX_LEX_OFFLINE
)

1138 
√wSèã
 = 
PM_LINK_TRAINED_NO_VIDEO
;

1140 i‡(
evít
 =
REX_AUX_MCA_DN
)

1142 
	`MCA_Ch™√lLökUp
(
MCA_CHANNEL_NUMBER_DP
);

1144 i‡(
evít
 =
REX_AUX_MONITOR_DISCONNECT
)

1146 
√wSèã
 = 
PM_IDLE_PENDING
;

1148 i‡(
evít
 =
REX_AUX_MONITOR_IRQ
)

1150 
	`M⁄ô‹IrqH™dÀr
();

1154 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1156  (
uöt8_t
Ë
√wSèã
;

1157 
	}
}

1168 
RexPmSèã
 
	$RexPmWaôHo°VideoH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

1170 
RexPmSèã
 
√wSèã
 = (RexPmSèã)
cuºítSèã
;

1172 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

1174 
	`RexSídBœckVideo
();

1175 i‡(
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
¥evSèã
 !
PM_VIDEO_FLOWING
)

1177 
	`RexUpd©eVideoRxRódyInfo
(
åue
);

1179 
	`RexPmUpd©eVideoSètus
(
VIDEO_TRAINING_UP
);

1181 i‡(
evít
 =
REX_AUX_EVENT_EXIT
)

1183 
	`RexPowîSëAndSökCou¡
();

1184 if(
cuºítSèã
 !
PM_VIDEO_FLOWING
)

1186 
	`RexUpd©eVideoRxRódyInfo
(
Ál£
);

1187 
	`MCA_Ch™√lLökDn
(
MCA_CHANNEL_NUMBER_DP
);

1190 i‡((
evít
 =
REX_AUX_LEX_OFFLINE
Ë|| (evíà=
REX_AUX_MCA_DN
))

1192 
√wSèã
 = 
PM_LINK_TRAINED_NO_VIDEO
;

1194 i‡(
evít
 =
REX_AUX_MONITOR_DISCONNECT
)

1196 
√wSèã
 = 
PM_IDLE_PENDING
;

1198 i‡(
evít
 =
REX_AUX_VIDEO_TX_READY
)

1200 
√wSèã
 = 
PM_VIDEO_FLOWING
;

1202 i‡(
evít
 =
REX_AUX_MONITOR_IRQ
)

1204 
	`M⁄ô‹IrqH™dÀr
();

1206 i‡(
evít
 =
REX_PM_EVENT_COMPLIANCE_MODE
)

1208 
√wSèã
 = 
REX_PM_COMPLIANCE_MODE
;

1212 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1215  
√wSèã
;

1216 
	}
}

1226 
RexPmSèã
 
	$RexPmVideoFlowögH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

1228 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

1230 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

1232 
	`RexPmUpd©eVideoSètus
(
VIDEO_OPERATING
);

1233 
	`DP_RexE«bÀAŒI¡îru±s
();

1234 
	`RexSèπVideo
();

1235 
	`RexVideoFlowögE¡î
();

1237 i‡(
evít
 =
REX_AUX_EVENT_EXIT
)

1239 
	`TIMING_TimîSt›
(
ªxPmC⁄ãxt
.
ª£tEº‹C¡Timî
);

1240 
	`TIMING_TimîSt›
(
NewC⁄åﬁTimî
);

1241 
	`RexSídBœckVideo
();

1243 
	`DP_RexAudioFifoFlush
();

1245 
	`RexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

1246 if(
cuºítSèã
 !
PM_WAIT_HOST_VIDEO
)

1248 
	`RexUpd©eVideoRxRódyInfo
(
Ál£
);

1249 
	`MCA_Ch™√lLökDn
(
MCA_CHANNEL_NUMBER_DP
);

1252 i‡((
evít
 =
REX_AUX_LEX_OFFLINE
Ë|| (evíà=
REX_AUX_MCA_DN
Ë|| (evíà=
REX_AUX_VIDEO_TX_NOT_READY
))

1254 
√wSèã
 = 
PM_LINK_TRAINED_NO_VIDEO
;

1260 i‡(
evít
 =
REX_AUX_MONITOR_DISCONNECT
)

1262 
√wSèã
 = 
PM_IDLE_PENDING
;

1264 i‡((
evít
 =
REX_PM_EVENT_COMPLIANCE_MODE
)|| \

1265 (
evít
 =
REX_AUX_MONITOR_IRQ
))

1267 
	`M⁄ô‹IrqH™dÀr
();

1269 if(
evít
 =
REX_AUX_VIDEO_ERROR_EVENT
)

1278 i‡(
ªxPmInôC⁄ãxt
.
ªxEº‹Cou¡
 >
REX_ERROR_RECOVERY_MAX_COUNT
)

1280 
√wSèã
 = 
PM_ERROR
;

1284 
ªxPmInôC⁄ãxt
.
ªxEº‹Cou¡
++;

1285 
√wSèã
 = 
PM_LINK_TRAINED_NO_VIDEO
;

1289 if(
evít
 =
REX_AUX_AUDIO_ERROR_EVENT
)

1291 i‡(
ªxPmInôC⁄ãxt
.
audioEº‹Cou¡
 >= 25)

1293 
	`DP_RexDißbÀAudioModuÀ
();

1294 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
AUX_AUDIO_ERR
, 
ªxPmInôC⁄ãxt
.
audioEº‹Cou¡
);

1295 
ªxPmInôC⁄ãxt
.
audioEº‹Cou¡
 = 0;

1299 
ªxPmInôC⁄ãxt
.
audioEº‹Cou¡
++;

1300 
	`DP_RexAudioFifoFlush
();

1303 i‡((
evít
 =
REX_AUX_MONITOR_RELINK_TRAINING
)

1304 ||(
evít
 =
REX_AUX_MONITOR_REPLUG
))

1306 
√wSèã
 = 
PM_MONITOR_LINK_TRAINING
;

1310 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1312  
√wSèã
;

1313 
	}
}

1323 
	$RexSèπVideo
()

1325 
	`DP_Sour˚E«bÀBœckS¸ìn
(
Ál£
);

1326 
	`RexUpd©eAUX™dDpSåómP¨ams
();

1327 
	`RexProgømALU
();

1328 
	`SídVideoToM⁄ô‹
();

1329 
	}
}

1339 
	$RexVideoFlowögE¡î
()

1341 
	`TIMING_TimîSèπ
(
ªxPmC⁄ãxt
.
ª£tEº‹C¡Timî
);

1343 if(!
ªxPmInôC⁄ãxt
.
ªxAudioCtx
.
ÀxAudioMuãSètus
 && !
dpC⁄figPå
->
noSídAudio
)

1345 
	`DP_RexE«bÀAudioModuÀ
(
ªxPmInôC⁄ãxt
.
ªxAudioCtx
.
ÀxAudioMuãSètus
,

1346 
ªxPmInôC⁄ãxt
.
ªxAudioCtx
.
maudVÆue
);

1349 i‡((!
ªxPmC⁄ãxt
.
mccsRódSuc˚ss
 && 
dpC⁄figPå
->
noRódMccs
 && 
mccsRódRequúed
)

1350 && !
ªxPmC⁄ãxt
.
°©eFœgs
.
isﬁ©edRex
 && (ªxPmC⁄ãxt.
°©eMachöeInfo
.
¥evSèã
 !
PM_VIDEO_FLOWING
))

1352 
ªxPmC⁄ãxt
.
mccsSídCou¡
 = 0;

1353 
ªxPmInôC⁄ãxt
.
mccsC≠RódRëry
 = 0;

1354 
	`mem£t
((
uöt8_t
 *)&
mccsCache
, 0, (
MCCSCache
));

1355 
ªxPmInôC⁄ãxt
.
mccsRódCou¡
++;

1356 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_READ_RETRY_COUNT
, 
ªxPmInôC⁄ãxt
.
mccsRódCou¡
);

1357 
	`TIMING_TimîSèπ
(
VideoSèπTimî
);

1360 i‡(
ªxPmInôC⁄ãxt
.
mccsSídPídög
 && !ªxPmInôC⁄ãxt.
mccsSídögFœg
)

1362 
ªxPmInôC⁄ãxt
.
mccsSídPídög
 = 
Ál£
;

1363 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_START_SENDING_MCCS
);

1364 
ªxPmC⁄ãxt
.
mccsSídCou¡
++;

1365 
	`RexSídMccsC≠abûôõs
();

1372 i‡((
ªxPmInôC⁄ãxt
.
mccsRódyToSíd
 || 
ªxPmC⁄ãxt
.
mccsSídCou¡
Ë&& 
dpC⁄figPå
->
noRódMccs
)

1374 
	`TIMING_TimîSèπ
(
NewC⁄åﬁTimî
);

1376 
	}
}

1387 
RexPmSèã
 
	$RexPmIdÀPídögH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

1389 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

1391 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

1393 
	`TIMING_TimîSèπ
(
ªxPmC⁄ãxt
.
≥ndögTimî
);

1394 
	`RexSëM⁄ô‹PowîDown
();

1395 
	`RexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

1397 i‡(
evít
 =
REX_AUX_PENDING_COMPLETE
)

1399 
√wSèã
 = 
PM_IDLE
;

1403 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1406  
√wSèã
;

1407 
	}
}

1418 
RexPmSèã
 
	$RexPmDißbÀPídögH™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

1420 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

1422 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

1424 
	`TIMING_TimîSèπ
(
ªxPmC⁄ãxt
.
≥ndögTimî
);

1425 
	`RexSëM⁄ô‹PowîDown
();

1426 
	`RexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

1428 i‡(
evít
 =
REX_AUX_PENDING_COMPLETE
)

1430 
√wSèã
 = 
PM_DISABLE
;

1432 i‡(
evít
 =
REX_AUX_DP_ENABLE
)

1434 if(
	`RexPmDpE«bÀd
())

1436 
√wSèã
 = 
PM_IDLE_PENDING
;

1441 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1443  
√wSèã
;

1444 
	}
}

1455 
RexPmSèã
 
	$RexPmCom∂ün˚H™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

1457 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

1459 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

1461 
	`RexPmUpd©eVideoSètus
(
VIDEO_TRAINING_UP
);

1463 i‡(
evít
 =
REX_AUX_MONITOR_IRQ
)

1465 
	`M⁄ô‹IrqH™dÀr
();

1467 i‡(
evít
 =
REX_AUX_MONITOR_LINK_TRAINING_SUCCESS
)

1469 
	`DP_Sour˚SëDpTøöögD⁄e
(
åue
);

1471 
	`DP_SëTøöögP©ã∫Sequí˚
(
TPS_0
);

1473 i‡(
evít
 =
REX_AUX_MONITOR_DISCONNECT
)

1475 
√wSèã
 = 
PM_IDLE_PENDING
;

1479 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1481  (
uöt8_t
Ë
√wSèã
;

1482 
	}
}

1492 
RexPmSèã
 
	$RexPmEº‹H™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

1494 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

1496 i‡(
evít
 =
REX_AUX_EVENT_ENTER
)

1498 
	`RexPmUpd©eVideoSètus
(
VIDEO_ERROR
);

1499 
	`RexSãpAuxSèãMachöe
(
AUX_REX_RESET_REQUEST
);

1500 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_DISABLE
);

1502 i‡(
evít
 =
REX_AUX_MONITOR_DISCONNECT
)

1504 
√wSèã
 = 
PM_IDLE_PENDING
;

1508 
√wSèã
 = 
	`RexPmComm⁄H™dÀr
(
evít
, 
cuºítSèã
);

1510  
√wSèã
;

1511 
	}
}

1521 
RexPmSèã
 
	$RexPmComm⁄H™dÀr
(
RexPmEvít
 
evít
, 
RexPmSèã
 
cuºítSèã
)

1523 
RexPmSèã
 
√wSèã
 = 
cuºítSèã
;

1525 
evít
)

1527 
REX_AUX_EVENT_ENTER
:

1528 
REX_AUX_EVENT_EXIT
:

1530 
REX_AUX_DP_DISABLE
:

1531 
√wSèã
 = 
PM_DISABLE_PENDING
;

1533 
REX_AUX_ERROR_EVENT
:

1534 
√wSèã
 = 
PM_ERROR
;

1536 
REX_AUX_REDRIVER_INIT_DONE
:

1537 if(!
ªxPmC⁄ãxt
.
°©eFœgs
.
ªdrivîInôD⁄e
)

1539 
√wSèã
 = 
PM_ERROR
;

1544 
REX_AUX_START_DIAGNOSTIC
:

1545 
√wSèã
 = 
PM_IDLE
;

1548 
REX_AUX_AUDIO_ERROR_EVENT
:

1549 
REX_AUX_DP_ENABLE
:

1550 
REX_AUX_LEX_ACTIVE
:

1551 
REX_AUX_LEX_OFFLINE
:

1552 
REX_AUX_MCA_UP
:

1553 
REX_AUX_MCA_DN
:

1554 
REX_AUX_MONITOR_CONNECT
:

1555 
REX_AUX_MONITOR_DISCONNECT
:

1556 
REX_AUX_MONITOR_REPLUG
:

1557 
REX_AUX_MONITOR_IRQ
:

1558 
REX_AUX_GOT_EDID_INFO
:

1559 
REX_AUX_EDID_READ_FAIL
:

1560 
REX_AUX_CAP_READ_FAIL
:

1561 
REX_AUX_DP_RX_HOST_INFO
:

1562 
REX_AUX_MONITOR_LINK_TRAINING_SUCCESS
:

1563 
REX_AUX_MONITOR_LINK_TRAINING_FAIL
:

1564 
REX_AUX_VIDEO_TX_READY
:

1565 
REX_AUX_VIDEO_TX_NOT_READY
:

1566 
REX_AUX_PENDING_COMPLETE
:

1567 
REX_PM_EVENT_COMPLIANCE_MODE
:

1568 
REX_AUX_VIDEO_ERROR_EVENT
:

1569 
REX_AUX_LEX_REQUEST_MONITOR_INFO
:

1570 
REX_AUX_MONITOR_RELINK_TRAINING
:

1572 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
PM_INVALID_EVENT
, 
evít
, 
cuºítSèã
);

1575  
√wSèã
;

1576 
	}
}

1585 
	$RexDdcciRëryTimîH™dÀr
()

1587 i‡(
ªxPmInôC⁄ãxt
.
mccsC≠RódRëry
 > 0)

1589 
	`RódMccsC≠
();

1591 i‡(
ªxPmInôC⁄ãxt
.
v˝RódRëry
 > 0)

1593 
	`RódV˝TabÀ
();

1595 
	}
}

1604 
	$RexPmCpuMsgRe˚ivedEvítH™dÀr
(
uöt8_t
 
subTy≥
, c⁄° uöt8_à*
msg
, 
uöt16_t
 
msgLígth
)

1606 
	`ûog_DP_COMPONENT_2
(
ILOG_MINOR_EVENT
, 
AUX_READ_CPU_MESSAGE
, 
subTy≥
, 
msgLígth
);

1608 
subTy≥
)

1610 
AUX_MSG_STREAM_PARAMETERS
:

1611 
	`mem˝y
((
uöt8_t
 *)&
ªxPmInôC⁄ãxt
.
°ªamP¨amëîsNew
, 
msg
, 
msgLígth
);

1613 
ªxPmInôC⁄ãxt
.
gŸSåómP¨amãrs
 = 
åue
;

1614 
ªxPmC⁄ãxt
.
°©eFœgs
.
gŸNewSåómP¨ams
 = 
	`Ho°SåómP¨amsCh™ged
();

1615 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_STREAM_PARAMETERS_ACK
);

1616 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_DP_RX_HOST_INFO
);

1619 
AUX_MSG_LEX_REQUEST_MONITOR_INFO
:

1620 
	`RexM⁄ô‹InfoEvítH™dÀr
();

1623 
AUX_MSG_LEX_PM_STATUS
:

1625 
	`mem˝y
((
uöt8_t
 *)&
ªxPmC⁄ãxt
.
ÀxSètus
, 
msg
, 
msgLígth
);

1626 
	`RexLexA˘iveEvítGíî©e
();

1627 
	`RexPmSèãSídEvítWôhNoD©a
(
ªxPmC⁄ãxt
.
ÀxSètus
.
ÀxVideoTxRódy
 ? 
REX_AUX_VIDEO_TX_READY
 : 
REX_AUX_VIDEO_TX_NOT_READY
);

1630 
AUX_MSG_SEND_AUDIO_STATUS
:

1631 
ªxPmInôC⁄ãxt
.
ªxAudioCtx
.
ÀxAudioMuãSètus
 = 
msg
[0];

1632 
ªxPmInôC⁄ãxt
.
ªxAudioCtx
.
maudVÆue
 = 
msg
[1];

1633 
	`DP_RexE«bÀAudioModuÀ
(
ªxPmInôC⁄ãxt
.
ªxAudioCtx
.
ÀxAudioMuãSètus
,

1634 
ªxPmInôC⁄ãxt
.
ªxAudioCtx
.
maudVÆue
);

1635 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_AUDIO_STATUS_ACK
);

1638 
AUX_MSG_SET_MONITOR_SLEEP
:

1639 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
DP_POWER_STATE
, 
msg
[0]);

1640 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MONITOR_DISCONNECT
);

1643 
AUX_MSG_SINK_PARAMETERS_ACK
:

1644 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_SINK_PARAMS_SENT
);

1647 
AUX_MSG_MCCS_CAP_ACK
:

1648 
	`ûog_DP_COMPONENT_0
(
ILOG_USER_LOG
, 
PM_SENT_MCCS_CAPS
);

1650 
	`EndRódV˝TabÀ
();

1653 
AUX_MSG_VCP_SET_REQUEST
:

1654 
	`mem˝y
(&
v˝SëReq
[1], 
msg
, (
size_t
)
msgLígth
);

1655 
	`AUX_RexEnqueueDDCCIOvîI2CWrôe
(&
v˝SëReq
[1], 
	`ARRAYSIZE
(v˝SëReqË- 1, 
MCCS_ADDRESS
, 
åue
, 
NULL
);

1656 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
SET_VCP_FEATURE
);

1657 
	`TIMING_TimîSèπ
(
Com∂ün˚Timî
);

1660 
AUX_MSG_SAVE_SETTING_REQUEST
:

1661 
	`AUX_RexEnqueueDDCCIOvîI2CWrôe
(&
ßveSëtögReq
[1], 
	`ARRAYSIZE
(ßveSëtögReqË- 1, 
MCCS_ADDRESS
, 
åue
, 
NULL
);

1664 
AUX_MSG_VCP_TABLE_ACK
:

1665 
	`ûog_DP_COMPONENT_0
(
ILOG_USER_LOG
, 
PM_SENT_VCP_TABLE
);

1666 i‡(
ªxPmInôC⁄ãxt
.
√wC⁄åﬁRe£ndFœg
)

1668 
	`SídNewC⁄åﬁFifo
();

1672 
	`SídTimögRï‹t
();

1677 
AUX_MSG_MCCS_TIMING_ACK
:

1678 
ªxPmC⁄ãxt
.
mccsRódSuc˚ss
 = 
Ál£
;

1679 
ªxPmInôC⁄ãxt
.
mccsSídögFœg
 = 
Ál£
;

1681 i‡(!
ªxPmInôC⁄ãxt
.
ª°‹eDeÁu…Reque°
)

1683 
	`ûog_DP_COMPONENT_0
(
ILOG_USER_LOG
, 
PM_SENT_TIMING_REPORT
);

1684 
mccsRódRequúed
 = 
Ál£
;

1688 
ªxPmInôC⁄ãxt
.
ª°‹eDeÁu…Reque°
 = 
Ál£
;

1692 
AUX_MSG_NEW_CONTROL_FIFO_ACK
:

1693 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁRe£ndFœg
 = 
Ál£
;

1694 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFifoIdx
 = 1;

1695 
ªxPmInôC⁄ãxt
.
mccsSídögFœg
 = 
Ál£
;

1699 
AUX_MSG_NEW_CONTROL_REQ
:

1701 i‡(!
ªxPmInôC⁄ãxt
.
mccsAµRu¬ög
)

1704 
ªxPmInôC⁄ãxt
.
mccsAµRu¬ög
 = 
åue
;

1705 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁReqCou¡î
 = 0;

1706 
	`TIMING_TimîSèπ
(
NewC⁄åﬁTimî
);

1710 
AUX_MSG_CODE_PAGE_REQ
:

1711 
ªxPmInôC⁄ãxt
.
codePageRódSètus
 = 
åue
;

1712 
	`TIMING_TimîSt›
(
NewC⁄åﬁTimî
);

1713 
	`SídV˝Reque°
(
CODE_PAGE_CODE
);

1717 
	`iÁû_DP_COMPONENT_1
(
AUX_UNHANDLED_CPU_MESSAGE
, 
subTy≥
);

1720 
	}
}

1729 
	$RexPro˚ssCom∂ün˚Reque°
(
uöt8_t
 *
ª£tReque°
)

1731 
uöt8_t
 
›Code
 = 
ª£tReque°
[
OPCODE_BYTE
];

1732 
uöt16_t
 
ªque°VÆ
 = (
ª£tReque°
[5] << 8) |ÑesetRequest[6];

1734 i‡(((
›Code
 =
FACTORY_DEFAULT_CODE
Ë|| (›Codê=
LUM_CON_DEFAULT_CODE
) ||

1735 (
›Code
 =
GEOMETRY_DEFAULT_CODE
Ë|| (›Codê=
COLOR_DEFAULT_CODE
)Ë&& (
ªque°VÆ
))

1738 
ªxPmInôC⁄ãxt
.
ª°‹eDeÁu…Reque°
 = 
åue
;

1739 
ªxPmInôC⁄ãxt
.
v˝RódRëry
 = 1;

1740 
v˝TabÀIndex
 = 0;

1741 
	`RódV˝TabÀ
();

1745 
	}
}

1756 
uöt32_t
 
	$RexGíMvid
(
LökAndSåómP¨amëîs
 *
lökSåómP¨ams
)

1758 
uöt32_t
 
symbﬁClock
 = 
	`Aux_GëSymbﬁClock
(
lökSåómP¨ams
->
lökP¨amëîs
.
bw
,

1759 
lökSåómP¨ams
->
lökP¨amëîs
.
íabÀSsc
) >> 6;

1760 
uöt64_t
 
tHeight
 = 
lökSåómP¨ams
->
°ªamP¨amëîs
.
v
.
tŸÆ
;

1761 
uöt64_t
 
tWidth
 = 
lökSåómP¨ams
->
°ªamP¨amëîs
.
h
.
tŸÆ
;

1762 
uöt64_t
 
Âs
 = 
lökSåómP¨ams
->
°ªamP¨amëîs
.fps;

1764 
uöt64_t
 
pixñClock
 = (
tHeight
 * 
tWidth
 * 
Âs
);

1766 
uöt64_t
 
NvidAdju°ed
 = 
lökSåómP¨ams
->
°ªamP¨amëîs
.
nvid
 >> 6;

1767 
uöt64_t
 
pixñMulNvid
 = 
pixñClock
 * 
NvidAdju°ed
;

1770 
uöt32_t
 
mvidBef‹eAdju°
 = 
pixñMulNvid
 / 
symbﬁClock
;

1772 
uöt32_t
 
mvid
 = 
mvidBef‹eAdju°
 / 1000;

1774 
uöt8_t
 
bµ
 = 
	`DP_GëBµFromCﬁ‹Code
(
lökSåómP¨ams
->
°ªamP¨amëîs
.
misc
.
cﬁ‹
);

1776 
uöt32_t
 
utûiz©i⁄
 = ((
uöt64_t
)
mvid
 * 
bµ
 * 10000) /

1777 ((
uöt64_t
)
lökSåómP¨ams
->
°ªamP¨amëîs
.
nvid
 * 8 *ÜökSåómP¨ams->
lökP¨amëîs
.
lc
);

1779 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_REX_UTILIZATION
, 
utûiz©i⁄
);

1781 if(
utûiz©i⁄
 > 10000)

1783 
boﬁ
 
adju°
 = 
Ál£
;

1785 if((
Âs
 % 1000) < 200)

1787 
adju°
 = 
åue
;

1788 
lökSåómP¨ams
->
°ªamP¨amëîs
.
Âs
 = ((fps / 1000) * 1000);

1789 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_ADJUST_FPS
, 
Âs
, 
lökSåómP¨ams
->
°ªamP¨amëîs
.fps);

1792 if(
lökSåómP¨ams
->
lökP¨amëîs
.
íabÀSsc
)

1794 
adju°
 = 
åue
;

1795 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
AUX_ADJUST_SSC
, 
lökSåómP¨ams
->
lökP¨amëîs
.
íabÀSsc
);

1796 
lökSåómP¨ams
->
lökP¨amëîs
.
íabÀSsc
 = 
Ál£
;

1799 if(
adju°
)

1802 
mvid
 = 
	`RexGíMvid
(
lökSåómP¨ams
);

1806 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
DP_REX_MIVD
, 
mvid
, 
lökSåómP¨ams
->
°ªamP¨amëîs
.
nvid
);

1807  
mvid
;

1808 
	}
}

1818 
	$RexPmDißbÀE¡î
()

1820 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
AUX_STATE_DISABLE
);

1823 
	`TOPLEVEL_˛órPﬁlögMask
(
SECONDARY_INT_DP_SOURCE_MAIN_INT_MSK
 | 
SECONDARY_INT_DP_SOURCE_AUX_HPD_INT_MSK
);

1824 
	`AUX_DißbÀAuxI¡îru±s
(
	`AUX_GëC⁄figuªdI¡îru±s
());

1826 
	`I2CD_dp130DißbÀ
();

1827 
ªxPmC⁄ãxt
.
°©eFœgs
.
ªdrivîInôD⁄e
 = 
Ál£
;

1828 
	`RexPmCÀ¨C⁄ãxt
();

1829 
	`RexSãpAuxSèãMachöe
(
AUX_REX_RESET_REQUEST
);

1830 
	`RexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

1832 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_DISABLE
);

1833 
	}
}

1843 
	$RexPmDißbÀExô
()

1845 
ªxPmC⁄ãxt
.
°©eFœgs
.
ªdrivîInôD⁄e
 = 
Ál£
;

1846 
	`I2CD_dp130E«bÀ
(
RexDP130InôCÆlback
);

1847 
	}
}

1857 
	$RexPmIdÀE¡î
()

1859 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
AUX_STATE_IDLE
);

1860 
	`RexSãpAuxSèãMachöe
(
AUX_REX_RESET_REQUEST
);

1861 
	`RexPmUpd©eVideoSètus
(
VIDEO_IN_RESET
);

1863 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_DISABLE
);

1864 
	`RexPmCÀ¨C⁄ãxt
();

1867 
	`TOPLEVEL_£tPﬁlögMask
(
SECONDARY_INT_DP_SOURCE_MAIN_INT_MSK
 | 
SECONDARY_INT_DP_SOURCE_AUX_HPD_INT_MSK
);

1868 
	`AUX_E«bÀAuxI¡îru±s
(
	`AUX_GëC⁄figuªdI¡îru±s
());

1869 
	}
}

1878 
	$RexPmLökTøöögE¡î
()

1880 
	`lﬂdDeÁu…LökSåómP¨am
();

1882 if(
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
íabÀSsc
)

1884 
	`IDT_CLK_SscC⁄åﬁ
(
åue
);

1885 
	`SubmôN©iveAuxWrôe
(
DOWNSPREAD_CTRL
, 0x10, 
NULL
);

1889 
	`IDT_CLK_SscC⁄åﬁ
(
Ál£
);

1891 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_MONITOR_SSC_INFO
, 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
íabÀSsc
);

1892 
ªxPmInôC⁄ãxt
.
…EvítD©a
.
lökAndSåómP¨amëîs
 = &rexPmInitContext.linkAndStreamParameters;

1894 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_DISABLE
);

1895 
	`RexLtSèãSídEvítWôhD©a
(
REX_LT_ENABLE
, &
ªxPmInôC⁄ãxt
.
…EvítD©a
);

1896 
	}
}

1905 
	$RexPmCÀ¨C⁄ãxt
()

1907 
	`mem£t
(&
ªxPmInôC⁄ãxt
, 0, ÑexPmInitContext);

1909 
ªxPmC⁄ãxt
.
ªxSètus
.
m⁄ô‹C⁄√˘ed
 = 
Ál£
;

1910 
ªxPmC⁄ãxt
.
ªxSètus
.
videoRxRódy
 = 
Ál£
;

1911 
ªxPmC⁄ãxt
.
mccsRódSuc˚ss
 = 
Ál£
;

1912 
ªxPmInôC⁄ãxt
.
ªxAudioCtx
.
ÀxAudioMuãSètus
 = 
åue
;

1913 
	`RexSídRexPmSètus
();

1914 
	}
}

1923 
	$AuxRïlyC≠H™dÀr
(c⁄° 
AUX_Reque°
 *
ªque°
, c⁄° 
AUX_Rïly
 *
ª∂y
)

1925 i‡(
ª∂y
->
hódî
.
comm™d
 =
NATIVE_AUX_ACK
)

1927 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
PM_END_READ_RECEIVER_CAP
);

1929 
uöt8_t
 *
ª˚ivîC≠Cache
 = &
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.receiverCapCache[0];

1930 c⁄° 
uöt8_t
 *
ª∂yD©a
 = &
ª∂y
->
d©a
[0];

1932 
	`mem˝y
(
ª˚ivîC≠Cache
, 
ª∂yD©a
, 
AUX_CAP_READ_SIZE
);

1933 
	`RexCheckMaxBw
(
ª˚ivîC≠Cache
);

1935 c⁄° 
uöt8_t
 
lc
 = 
ª˚ivîC≠Cache
[
MAX_LANE_COUNT
] & 0x1F;

1936 c⁄° 
uöt8_t
 
bw
 = 
ª˚ivîC≠Cache
[
MAX_LINK_RATE
];

1937 c⁄° 
uöt8_t
 
dpcd_ªv
 = 
ª˚ivîC≠Cache
[
DPCD_REV
];

1938 c⁄° 
boﬁ
 
lökP¨amVÆid
 = ((
lc
 !0Ë&& (
bw
 != 0));

1940 i‡(
lökP¨amVÆid
)

1942 if(
	`RexAuxCheckDpcdRevRïlyH™dÀr
(
dpcd_ªv
))

1944 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_DPCD_REV
, 
dpcd_ªv
);

1947 
ªxPmInôC⁄ãxt
.
edidExtBlkIndex
 = 1;

1948 
ªxPmInôC⁄ãxt
.
ˇpIsVÆid
 = 
åue
;

1949 
	`RódEdidBlock
(0);

1953 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_INVALID_DPCD_REV
, 
dpcd_ªv
, 
__LINE__
 );

1954 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_CAP_READ_FAIL
);

1959 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_ERROR
, 
AUX_INVALID_BW_LC
, 
lc
, 
bw
, 
__LINE__
 );

1960 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_CAP_READ_FAIL
);

1967 
	`ûog_DP_COMPONENT_1
(
ILOG_MINOR_ERROR
, 
AUX_MONITOR_INFO_FAIL
, 
__LINE__
);

1968 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MONITOR_DISCONNECT
);

1970 
	}
}

1979 
	$RexMccsEvítH™dÀr
(
boﬁ
 
°©us
)

1982 if(
°©us
)

1984 
mccsSuc˚ssCou¡î
++;

1985 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_REX_MCCS_SUCCESS_COUNTER
, 
mccsSuc˚ssCou¡î
);

1986 
mccsFaûuªCou¡î
 = 0;

1990 
mccsSuc˚ssCou¡î
 = 0;

1991 
mccsFaûuªCou¡î
++;

1994 i‡(
mccsSuc˚ssCou¡î
 >= 1)

1996 
ªxPmInôC⁄ãxt
.
mccsRódyToSíd
 = 
åue
;

1997 i‡(
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxA˘ive
 && !
ªxPmInôC⁄ãxt
.
mccsSídögFœg
)

1999 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_START_SENDING_MCCS
);

2000 
ªxPmC⁄ãxt
.
mccsSídCou¡
++;

2001 
	`RexSídMccsC≠abûôõs
();

2002 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFifoIdx
 = 1;

2003 
	`TIMING_TimîSèπ
(
NewC⁄åﬁTimî
);

2008 i‡(
mccsFaûuªCou¡î
 <= 3)

2011 i‡(!
ªxPmInôC⁄ãxt
.
√wC⁄åﬁRe£ndFœg
)

2013 
ªxPmInôC⁄ãxt
.
mccsC≠RódRëry
 =ÑexPmInôC⁄ãxt.
v˝RódRëry
 = 0;

2014 
	`mem£t
((
uöt8_t
 *)&
mccsCache
, 0, (
MCCSCache
));

2015 
ªxPmInôC⁄ãxt
.
mccsRódCou¡
++;

2016 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_READ_RETRY_COUNT
, 
ªxPmInôC⁄ãxt
.
mccsRódCou¡
);

2017 
	`TIMING_TimîSèπ
(
MCCSRëryTimî
);

2021 
ªxPmInôC⁄ãxt
.
v˝RódRëry
 = 0;

2022 
v˝TabÀIndex
 = 0;

2023 
	`RódV˝TabÀ
();

2029 i‡(
ªxPmC⁄ãxt
.
mccsSídCou¡
)

2031 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFifoIdx
 = 1;

2032 
	`TIMING_TimîSèπ
(
NewC⁄åﬁTimî
);

2036 
	}
}

2045 
	$MccsRëryTimîH™dÀr
()

2047 
	`RódMccsC≠
();

2048 
	}
}

2057 
	$RódTimögRï‹t
()

2059 c⁄° 
uöt8_t
 
wrôeLí
 = 
	`ARRAYSIZE
(
timögRï‹tReq
) - 1;

2060 
	`AUX_RexEnqueueDDCCIOvîI2CWrôe
(&
timögRï‹tReq
[1], 
wrôeLí
, 
MCCS_ADDRESS
, 
åue
, 
TimögRïlyH™dÀr
);

2061 
	`TIMING_TimîSèπ
(
TimögRïlyTimî
);

2062 
	}
}

2071 
	$RexTimögRï‹tTimîH™dÀr
()

2073 c⁄° 
uöt8_t
 
ªadLí
 = 
TIMING_REPLY_SIZE
;

2074 
	`AUX_RexEnqueueI2cOvîAuxRód
(
ªadLí
, 
MCCS_ADDRESS
, 
åue
, 
TimögRïlyH™dÀr
);

2075 
	}
}

2084 
	$TimögRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªque°
, c⁄° 
AUX_Rïly
 *
ª∂y
)

2086 if(
ª∂y
->
hódî
.
comm™d
 =
I2C_AUX_ACK
)

2088 if(!
	`AUX_DDCCIReque°IsAddªssO∆y
(
ªque°
) &&

2089 (
ªque°
->
hódî
.
comm™d
 =
I2C_AUX_READ
 ||Ñeque°->hódî.comm™d =
I2C_AUX_READ_MOT
))

2092 
	`mem˝y
(
timögRï‹tRïly
, 
ª∂y
->
d©a
, 
TIMING_REPLY_SIZE
);

2093 
ªxPmC⁄ãxt
.
mccsRódSuc˚ss
 = 
åue
;

2094 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_END_READ_MCCS
);

2095 i‡(
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxA˘ive
 && 
mccsRódRequúed
 && !
ªxPmInôC⁄ãxt
.
mccsSídögFœg
)

2097 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_START_SENDING_MCCS
);

2098 
ªxPmC⁄ãxt
.
mccsSídCou¡
++;

2099 
	`RexSídMccsC≠abûôõs
();

2101 i‡(
	`memeq
(&
mccsC›y
.
byãs
[0], &
mccsCache
.byãs[0], mccsCache.
√xtFªeIndex
))

2103 
	`RexMccsEvítH™dÀr
(
åue
);

2107 
	`mem˝y
(&
mccsC›y
, &
mccsCache
, (mccsCache));

2108 
	`RexMccsEvítH™dÀr
(
Ál£
);

2111 i‡(
ªxPmInôC⁄ãxt
.
ª°‹eDeÁu…Reque°
)

2113 
	`EndRódV˝TabÀ
();

2119 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_GOT_OTHERS_REQ
,

2120 
	`AUX_DDCCIReque°IsAddªssO∆y
(
ªque°
),Ñeque°->
hódî
.
comm™d
);

2125 
	`ûog_DP_COMPONENT_1
(
ILOG_MINOR_ERROR
, 
AUX_MONITOR_INFO_FAIL
, 
__LINE__
);

2127 
	}
}

2136 
	$St‹eV˝CodeInFifo
(
uöt16_t
 
cuºítVÆ
)

2138 i‡(
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFifoIdx
 < 
	`ARRAYSIZE
(
√wC⁄åﬁFifo
) - 1)

2140 
√wC⁄åﬁFifo
[
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFifoIdx
++] = 
cuºítVÆ
;

2142 
	}
}

2151 
	$SídNewC⁄åﬁFifo
()

2153 
AUX_Up°ªamCpuMesßge
 
°©usMsg
 = {

2154 .
ty≥
 = 
AUX_MSG_NEW_CONTROL_FIFO
,

2155 .
msgBuf„r
 = &
√wC⁄åﬁFifo
[0],

2156 .
msgLígth
 = 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFifoIdx


2158 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_SEND_NEW_CONTROL
);

2159 
	`RexSídCpuMesßgeToLex
(&
°©usMsg
);

2160 
	}
}

2169 
	$NewC⁄åﬁTimîH™dÀr
()

2171 i‡(!
ªxPmInôC⁄ãxt
.
ª°‹eDeÁu…Reque°
)

2173 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁReqCou¡î
++;

2174 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁRe£tD⁄e
 = 
Ál£
;

2175 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFœg
 = 
åue
;

2176 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
AUX_REX_NEW_CONTROL_REQUEST
);

2177 
	`SídV˝Reque°
(
NEW_CONTROL_CODE
);

2180 i‡(
ªxPmInôC⁄ãxt
.
√wC⁄åﬁReqCou¡î
 =
NEW_CONTROL_STOP_COUNTER
)

2182 
ªxPmInôC⁄ãxt
.
mccsAµRu¬ög
 = 
Ál£
;

2183 
	`TIMING_TimîSt›
(
NewC⁄åﬁTimî
);

2185 
	}
}

2194 
	$SídV˝Reque°
(
uöt8_t
 
v˝Code
)

2196 
v˝GëReq
[
OPCODE_BYTE
] = 
v˝Code
;

2197 
	`Upd©eMccsChecksumByã
(
v˝GëReq
, 
	`ARRAYSIZE
(vcpGetReq));

2198 c⁄° 
uöt8_t
 
wrôeLí
 = 
VCP_REQ_LEN
;

2199 
	`AUX_RexEnqueueDDCCIOvîI2CWrôe
(&
v˝GëReq
[1], 
wrôeLí
, 
MCCS_ADDRESS
, 
åue
, 
V˝RïlyH™dÀr
);

2200 
	`TIMING_TimîSèπ
(
V˝RïlyTimî
);

2201 
	}
}

2210 
	$RódV˝TabÀ
()

2212 
	`SídV˝Reque°
(
v˝TabÀ
[
v˝TabÀIndex
].
v˝Code
);

2213 
	}
}

2222 
	$RexV˝RïlyTimîH™dÀr
()

2224 c⁄° 
uöt8_t
 
ªadLí
 = 
VCP_REPLY_LEN
;

2225 
	`AUX_RexEnqueueI2cOvîAuxRód
(
ªadLí
, 
MCCS_ADDRESS
, 
åue
, 
V˝RïlyH™dÀr
);

2226 
	}
}

2235 
	$V˝RïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªque°
, c⁄° 
AUX_Rïly
 *
ª∂y
)

2237 if(
ª∂y
->
hódî
.
comm™d
 =
I2C_AUX_ACK
)

2239 if(!
	`AUX_DDCCIReque°IsAddªssO∆y
(
ªque°
) &&

2240 (
ªque°
->
hódî
.
comm™d
 =
I2C_AUX_READ
 ||Ñeque°->hódî.comm™d =
I2C_AUX_READ_MOT
))

2243 c⁄° 
RexPmEvítD©a
 
evítD©a
 = {

2244 .
ªque°AndRïlyC⁄èöî
 = {.
ªque°
 =Ñeque°, .
ª∂y
 =Ñeply}};

2245 
	`RexPmV˝RódögH™dÀr
(&
evítD©a
);

2249 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_GOT_OTHERS_REQ
,

2250 
	`AUX_DDCCIReque°IsAddªssO∆y
(
ªque°
),Ñeque°->
hódî
.
comm™d
);

2255 
	`ûog_DP_COMPONENT_1
(
ILOG_MINOR_ERROR
, 
AUX_MONITOR_INFO_FAIL
, 
__LINE__
);

2257 
	}
}

2266 
	$V˝SëTimîH™dÀr
()

2268 
	`SídV˝Reque°
(
NEW_CONTROL_CODE
);

2269 
	}
}

2278 
	$Re£tNewC⁄åﬁVÆue
()

2280 
v˝SëReq
[4] = 0x02;

2281 
v˝SëReq
[5] = 0x00;

2282 
v˝SëReq
[6] = 0x01;

2283 
v˝SëReq
[7] = 0xBB;

2284 
	`AUX_RexEnqueueDDCCIOvîI2CWrôe
(&
v˝SëReq
[1], 
	`ARRAYSIZE
(v˝SëReqË- 1, 
MCCS_ADDRESS
, 
åue
, 
NULL
);

2285 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁRe£tD⁄e
 = 
åue
;

2286 
	`TIMING_TimîSèπ
(
V˝SëTimî
);

2287 
	}
}

2296 
	$RexPmV˝RódögH™dÀr
(c⁄° 
RexPmEvítD©a
 *
evítD©a
)

2299 if(
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFœg
)

2301 i‡((
evítD©a
->
ªque°AndRïlyC⁄èöî
.
ª∂y
->
d©a
[
VCP_REPLY_OPCODE_BYTE
] =
VCP_REPLY_OPCODE
))

2303 
uöt16_t
 
cuºítVÆ
 = (
evítD©a
->
ªque°AndRïlyC⁄èöî
.
ª∂y
->
d©a
[8] << 8) |

2304 (
evítD©a
->
ªque°AndRïlyC⁄èöî
.
ª∂y
->
d©a
[9]);

2306 i‡(
evítD©a
->
ªque°AndRïlyC⁄èöî
.
ª∂y
->
d©a
[4] =
NEW_CONTROL_CODE
 && 
cuºítVÆ
 == 0x02)

2308 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁRe£ndFœg
 = 
åue
;

2309 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁSyncFœg
 = 
åue
;

2311 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_REX_NEW_CONTROL_CHANGED
, 0x02);

2312 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_ACTIVE_CONTROL_REQUEST
);

2313 
	`SídV˝Reque°
(
ACTIVE_CONTROL_CODE
);

2316 i‡(
evítD©a
->
ªque°AndRïlyC⁄èöî
.
ª∂y
->
d©a
[4] =
ACTIVE_CONTROL_CODE
 && 
cuºítVÆ
 > 0x0)

2318 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_REX_ACTIVE_CONTROL_CHANGED
, 
cuºítVÆ
);

2319 
	`St‹eV˝CodeInFifo
(
cuºítVÆ
);

2320 
	`Re£tNewC⁄åﬁVÆue
();

2323 i‡(
evítD©a
->
ªque°AndRïlyC⁄èöî
.
ª∂y
->
d©a
[4] =
ACTIVE_CONTROL_CODE
 && 
cuºítVÆ
 == 0x0)

2325 if(!
ªxPmInôC⁄ãxt
.
√wC⁄åﬁRe£tD⁄e
)

2327 
	`Re£tNewC⁄åﬁVÆue
();

2331 i‡(
evítD©a
->
ªque°AndRïlyC⁄èöî
.
ª∂y
->
d©a
[4] =
NEW_CONTROL_CODE
 && 
cuºítVÆ
 =0x01 && 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁSyncFœg
)

2333 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁSyncFœg
 = 
Ál£
;

2334 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFœg
 = 
Ál£
;

2335 
ªxPmInôC⁄ãxt
.
v˝RódRëry
 = 0;

2336 
v˝TabÀIndex
 = 0;

2337 
	`RódV˝TabÀ
();

2342 
ªxPmInôC⁄ãxt
.
√wC⁄åﬁFœg
 = 
Ál£
;

2348 c⁄° 
size_t
 
√xtSize
 = 
	`Upd©eV˝TabÀ
(

2349 &
evítD©a
->
ªque°AndRïlyC⁄èöî
, 
v˝TabÀ
, 
v˝TabÀSize
);

2351 
boﬁ
 
v˝TabÀRódD⁄e
 = 
Ál£
;

2352 i‡(
v˝TabÀIndex
 >
v˝TabÀSize
)

2354 
ªxPmInôC⁄ãxt
.
v˝RódRëry
 = 0;

2355 
v˝TabÀRódD⁄e
 = 
åue
;

2357 i‡(
√xtSize
 =
VCP_FEATURE_REPLY_SIZE
)

2359 
ªxPmC⁄ãxt
.
mccsRódSuc˚ss
 = 
åue
;

2360 
ªxPmInôC⁄ãxt
.
v˝RódRëry
 = 0;

2361 
	`RódV˝TabÀ
();

2365 i‡(
ªxPmInôC⁄ãxt
.
v˝RódRëry
 < 
REX_MCCS_CAP_READ_RETRY
)

2367 
ªxPmInôC⁄ãxt
.
v˝RódRëry
++;

2368 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_REX_VCP_RETRY_COUNT
, 
ªxPmInôC⁄ãxt
.
v˝RódRëry
);

2369 
	`TIMING_TimîSèπ
(
DDCCIRëryTimî
);

2373 
ªxPmC⁄ãxt
.
mccsRódSuc˚ss
 = 
Ál£
;

2374 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_VCP_READ_FAIL
);

2375 
	`RexMccsEvítH™dÀr
(
Ál£
);

2379 if(
v˝TabÀRódD⁄e
)

2382 i‡(
ªxPmInôC⁄ãxt
.
ª°‹eDeÁu…Reque°
)

2384 
ªxPmC⁄ãxt
.
mccsRódSuc˚ss
 = 
åue
;

2385 
	`EndRódV˝TabÀ
();

2387 i‡(
ªxPmInôC⁄ãxt
.
√wC⁄åﬁRe£ndFœg
 ||ÑexPmInôC⁄ãxt.
codePageRódSètus
)

2389 
	`EndRódV˝TabÀ
();

2390 
ªxPmInôC⁄ãxt
.
codePageRódSètus
 = 
Ál£
;

2391 
	`TIMING_TimîSèπ
(
NewC⁄åﬁTimî
);

2395 
	`RódTimögRï‹t
();

2399 
	}
}

2408 
	$SídTimögRï‹t
()

2410 
AUX_Up°ªamCpuMesßge
 
°©usMsg
 = {

2411 .
ty≥
 = 
AUX_MSG_MCCS_TIMING
,

2412 .
msgBuf„r
 = &
timögRï‹tRïly
,

2413 .
msgLígth
 = 
	`ARRAYSIZE
(
timögRï‹tRïly
)

2415 
	`RexSídCpuMesßgeToLex
(&
°©usMsg
);

2416 
	}
}

2425 
	$EndRódV˝TabÀ
()

2427 
AUX_Up°ªamCpuMesßge
 
°©usMsg
 = {

2428 .
ty≥
 = 
AUX_MSG_VCP_TABLE
,

2429 .
msgBuf„r
 = &
v˝TabÀ
,

2430 .
msgLígth
 = (
v˝TabÀ
[0]Ë* 
v˝TabÀSize


2432 
	`RexSídCpuMesßgeToLex
(&
°©usMsg
);

2433 
	}
}

2443 
size_t
 
	$Upd©eV˝TabÀ
(

2444 c⁄° 
AUX_Reque°AndRïlyC⁄èöî
 *
ªque°AndRïlyC⁄èöî
,

2445 
MccsV˝
 
V˝TabÀ
[],

2446 
size_t
 
V˝TabÀSize
)

2448 i‡((
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[
VCP_REPLY_OPCODE_BYTE
] =
VCP_REPLY_OPCODE
) &&

2449 
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[
OPCODE_BYTE
] =
v˝TabÀ
[
v˝TabÀIndex
].
v˝Code
)

2451 
v˝TabÀ
[
v˝TabÀIndex
].
maxVÆ
 = (
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[6] << 8) |

2452 (
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[7]);

2454 
v˝TabÀ
[
v˝TabÀIndex
].
cuºVÆ
 = (
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[8] << 8) |

2455 (
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[9]);

2457 
v˝TabÀIndex
++;

2458  
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[
MCCS_LENGTH_BYTE
];

2465 
	}
}

2474 
	$RódMccsC≠
()

2476 
mccsC≠Req
[
MCCS_OFFSET_HIGH_BYTE
] = (
mccsCache
.
√xtFøgmítAddªss
 & 0xFF00) >> 8;

2477 
mccsC≠Req
[
MCCS_OFFSET_LOW_BYTE
] = 
mccsCache
.
√xtFøgmítAddªss
 & 0x00FF;

2478 
	`Upd©eMccsChecksumByã
(
mccsC≠Req
, 
	`ARRAYSIZE
(mccsCapReq));

2479 c⁄° 
uöt8_t
 
wrôeLí
 = 
MCCS_CAP_REQ_LEN
;

2480 
	`AUX_RexEnqueueDDCCIOvîI2CWrôe
(&
mccsC≠Req
[1], 
wrôeLí
, 
MCCS_ADDRESS
, 
åue
, 
MccsRïlyH™dÀr
);

2481 
	`TIMING_TimîSèπ
(
MccsRïlyTimî
);

2482 
	}
}

2491 
	$Upd©eMccsChecksumByã
(
uöt8_t
 *
ªque°Meßge
, uöt8_à
mesßgeLí
)

2493 
uöt8_t
 
¨øyIndex
 = 0;

2494 
uöt8_t
 
mccsByãChk
 = 0;

2496 
¨øyIndex
 = 0;áºayIndex < 
mesßgeLí
-1;árrayIndex++)

2498 
mccsByãChk
 ^
ªque°Meßge
[
¨øyIndex
];

2500 
ªque°Meßge
[
mesßgeLí
-1] = 
mccsByãChk
;

2501 
	}
}

2510 
	$RexMccsRïlyTimîH™dÀr
()

2512 c⁄° 
uöt8_t
 
ªadLí
 = 
MCCS_CAP_REPLY_LEN
 + 
OPCODE_OFFSET_BYTE_LEN
;

2513 
	`AUX_RexEnqueueI2cOvîAuxRód
(
ªadLí
, 
MCCS_ADDRESS
, 
åue
, 
MccsRïlyH™dÀr
);

2514 
	}
}

2523 
	$RexMccsReque°TimîH™dÀr
()

2525 
	`RódMccsC≠
();

2526 
	}
}

2535 
	$MccsRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªque°
, c⁄° 
AUX_Rïly
 *
ª∂y
)

2537 if(
ª∂y
->
hódî
.
comm™d
 =
I2C_AUX_ACK
)

2539 if(!
	`AUX_DDCCIReque°IsAddªssO∆y
(
ªque°
) &&

2540 (
ªque°
->
hódî
.
comm™d
 =
I2C_AUX_READ
 ||Ñeque°->hódî.comm™d =
I2C_AUX_READ_MOT
))

2543 c⁄° 
RexPmEvítD©a
 
evítD©a
 = {

2544 .
ªque°AndRïlyC⁄èöî
 = {.
ªque°
 =Ñeque°, .
ª∂y
 =Ñeply}};

2545 
	`RexPmMccsRódögH™dÀr
(&
evítD©a
);

2549 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_GOT_OTHERS_REQ
,

2550 
	`AUX_DDCCIReque°IsAddªssO∆y
(
ªque°
),Ñeque°->
hódî
.
comm™d
);

2555 
ªxPmC⁄ãxt
.
mccsRódSuc˚ss
 = 
Ál£
;

2556 
mccsRódRequúed
 = 
Ál£
;

2557 
	`ûog_DP_COMPONENT_1
(
ILOG_MINOR_ERROR
, 
AUX_MONITOR_INFO_FAIL
, 
__LINE__
);

2559 
	}
}

2568 
	$RexPmMccsRódögH™dÀr
(c⁄° 
RexPmEvítD©a
 *
evítD©a
)

2570 
RódReqCou¡î
++;

2571 c⁄° 
size_t
 
√xtSize
 = 
	`Upd©eMccsCache
(

2572 &
evítD©a
->
ªque°AndRïlyC⁄èöî
, &
mccsCache
);

2574 
boﬁ
 
mccsC≠RódD⁄e
 = 
Ál£
;

2576 i‡(
RódReqCou¡î
 == 3)

2578 
RódReqCou¡î
 = 0;

2580 i‡(
√xtSize
 =
MCCS_END_FRAME_SIZE
)

2582 
ªxPmInôC⁄ãxt
.
mccsC≠RódRëry
 = 0;

2583 
mccsC≠RódD⁄e
 = 
åue
;

2585 i‡(
√xtSize
 =
MCCS_INVALID_FRAGMENT_SIZE
)

2587 i‡(
ªxPmInôC⁄ãxt
.
mccsC≠RódRëry
 < 
REX_MCCS_CAP_READ_RETRY
)

2589 
ªxPmInôC⁄ãxt
.
mccsC≠RódRëry
++;

2590 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_RETRY_COUNT
, 
ªxPmInôC⁄ãxt
.
mccsC≠RódRëry
);

2591 
	`TIMING_TimîSèπ
(
DDCCIRëryTimî
);

2595 
ªxPmC⁄ãxt
.
mccsRódSuc˚ss
 = 
Ál£
;

2596 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_READ_FAIL
);

2597 
	`RexMccsEvítH™dÀr
(
Ál£
);

2602 
ªxPmInôC⁄ãxt
.
mccsC≠RódRëry
 = 0;

2603 
	`TIMING_TimîSèπ
(
MccsReque°Timî
);

2608 if(
mccsC≠RódD⁄e
)

2611 i‡(
	`EndRódMccs
(&
mccsCache
))

2613 
v˝TabÀIndex
 = 0;

2614 
	`RódV˝TabÀ
();

2618 
	`mem£t
((
uöt8_t
 *)&
mccsCache
, 0, (
MCCSCache
));

2619 
ªxPmInôC⁄ãxt
.
mccsC≠RódRëry
 =ÑexPmInôC⁄ãxt.
v˝RódRëry
 = 0;

2620 
ªxPmC⁄ãxt
.
mccsRódSuc˚ss
 = 
Ál£
;

2621 
	`RexMccsEvítH™dÀr
(
Ál£
);

2624 
	}
}

2634 
size_t
 
	$Upd©eMccsCache
(

2635 c⁄° 
AUX_Reque°AndRïlyC⁄èöî
 *
ªque°AndRïlyC⁄èöî
,

2636 
MCCSCache
 *
mccsC≠Cache
)

2639 i‡(
RódReqCou¡î
 == 1)

2641 
mccsC≠Cache
->
‰agmítSize
 = 
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[
MCCS_LENGTH_BYTE
] & 
MCCS_MSG_LEN_MASK
;

2642 i‡(
mccsC≠Cache
->
‰agmítSize
 < 3 || mccsCapCache->fragmentSize > 35)

2644 
mccsC≠Cache
->
‰agmítSize
 = 0;

2647 i‡(
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[
MCCS_TYPE_BYTE
] != 0xE3)

2649 
mccsC≠Cache
->
‰agmítSize
 = 0;

2652 i‡(
mccsC≠Cache
->
√xtFøgmítAddªss
 !=

2653 (
size_t
)((
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[
MCCS_CAP_REPLY_HIGH_BYTE
] << 8Ë|Ñeque°AndRïlyC⁄èöî->ª∂y->d©a[
MCCS_CAP_REPLY_LOW_BYTE
]))

2655 
mccsC≠Cache
->
‰agmítSize
 = 0;

2658 
mccsC≠Cache
->
√xtFøgmítAddªss
 +mccsC≠Cache->
‰agmítSize
 - 
OPCODE_OFFSET_BYTE_LEN
;

2662 i‡((
RódReqCou¡î
 =1Ë&& (
mccsC≠Cache
->
√xtFªeIndex
 < mccsC≠Cache->
√xtFøgmítAddªss
 - 1 ))

2664 i‡(
mccsC≠Cache
->
‰agmítSize
 <= 0xE)

2666 
	`mem˝y
(
mccsC≠Cache
->
byãs
 + mccsC≠Cache->
√xtFªeIndex
,

2667 &
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[
CAP_DATA_START_INDEX
],

2668 
mccsC≠Cache
->
‰agmítSize
 - 3);

2669 
mccsC≠Cache
->
√xtFªeIndex
 +mccsC≠Cache->
‰agmítSize
 - 3;

2673 
	`mem˝y
(
mccsC≠Cache
->
byãs
 + mccsC≠Cache->
√xtFªeIndex
,

2674 &
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[
CAP_DATA_START_INDEX
],

2676 
mccsC≠Cache
->
√xtFªeIndex
 += 11;

2680 i‡((
RódReqCou¡î
 =2Ë&& (
mccsC≠Cache
->
√xtFªeIndex
 < mccsC≠Cache->
√xtFøgmítAddªss
 - 1 ))

2682 i‡(
mccsC≠Cache
->
‰agmítSize
 > 0xE && mccsCapCache->fragmentSize <= 0x1E)

2684 
	`mem˝y
(
mccsC≠Cache
->
byãs
 + mccsC≠Cache->
√xtFªeIndex
,

2685 &
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[0],

2686 
mccsC≠Cache
->
‰agmítSize
 - 3 - 11 );

2687 
mccsC≠Cache
->
√xtFªeIndex
 +mccsC≠Cache->
‰agmítSize
 - 3 - 11;

2689 i‡(
mccsC≠Cache
->
‰agmítSize
 > 0x1E)

2691 
	`mem˝y
(
mccsC≠Cache
->
byãs
 + mccsC≠Cache->
√xtFªeIndex
,

2692 &
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[0],

2694 
mccsC≠Cache
->
√xtFªeIndex
 += 16;

2700 i‡((
RódReqCou¡î
 =3Ë&& (
mccsC≠Cache
->
√xtFªeIndex
 < mccsC≠Cache->
√xtFøgmítAddªss
 - 1 ))

2702 i‡(
mccsC≠Cache
->
‰agmítSize
 > 0x1E)

2704 
	`mem˝y
(
mccsC≠Cache
->
byãs
 + mccsC≠Cache->
√xtFªeIndex
,

2705 &
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
[0],

2706 
mccsC≠Cache
->
‰agmítSize
 - 3 - 0x0B - 16);

2707 
mccsC≠Cache
->
√xtFªeIndex
 +mccsC≠Cache->
‰agmítSize
 - 3 - 11 - 16;

2711 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
PM_UPDATING_MCCS_CACHE
, 
mccsC≠Cache
->
√xtFªeIndex
);

2713  
mccsC≠Cache
->
‰agmítSize
;

2714 
	}
}

2723 
boﬁ
 
	$EndRódMccs
(
MCCSCache
 *
mccsC≠Cache
)

2725 
uöt16_t
 
mccsCacheIdx
 = 0;

2726 
uöt8_t
 
bøckëCou¡
 = 0;

2727 
uöt8_t
 
ödex
 = 1;

2728 
uöt8_t
 
ãmpV˝Code
;

2731 if(
mccsC≠Cache
->
√xtFªeIndex
 < 64)

2733  
Ál£
;

2737 !((
mccsC≠Cache
->
byãs
[
mccsCacheIdx
] == 'v')

2738 && (
mccsC≠Cache
->
byãs
[
mccsCacheIdx
+1] == 'c')

2739 && (
mccsC≠Cache
->
byãs
[
mccsCacheIdx
+2] == 'p')))

2741 
mccsCacheIdx
++;

2742 i‡(
mccsCacheIdx
 >
mccsC≠Cache
->
√xtFªeIndex
)

2744  
Ál£
;

2749 
mccsC≠Cache
->
byãs
[
mccsCacheIdx
] != '(')

2751 
mccsCacheIdx
++;

2752 i‡(
mccsCacheIdx
 >
mccsC≠Cache
->
√xtFªeIndex
)

2754  
Ál£
;

2760 i‡(!(
mccsC≠Cache
->
byãs
[
mccsCacheIdx
] ='(' || mccsC≠Cache->byãs[mccsCacheIdx] =')' || mccsC≠Cache->byãs[mccsCacheIdx] =' 'Ë&& 
bøckëCou¡
<=1)

2762 
ãmpV˝Code
 = 
	`v˝ToHex
(
mccsC≠Cache
->
byãs
[
mccsCacheIdx
], mccsCapCache->bytes[mccsCacheIdx+1]);

2764 i‡(
ãmpV˝Code
 != 0x0D)

2766 
v˝TabÀ
[
ödex
++].
v˝Code
 = 
ãmpV˝Code
;

2767 i‡(
ödex
 >
VCP_TABLE_SIZE
)

2772 
mccsCacheIdx
++;

2774 i‡(
mccsC≠Cache
->
byãs
[
mccsCacheIdx
] == '(')

2776 
bøckëCou¡
++;

2778 if(
mccsC≠Cache
->
byãs
[
mccsCacheIdx
] == ')')

2780 
bøckëCou¡
--;

2782 
mccsCacheIdx
++;

2783 i‡(
mccsCacheIdx
 >
mccsC≠Cache
->
√xtFªeIndex
)

2789 } 
bøckëCou¡
 > 0);

2792 i‡(
bøckëCou¡
 > 0)

2794  
Ál£
;

2797 
v˝TabÀSize
 = 
ödex
;

2798 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
AUX_REX_MCCS_CAP_READ_DONE
, 
mccsC≠Cache
->
√xtFªeIndex
, 
v˝TabÀSize
);

2800  
åue
;

2801 
	}
}

2812 
	$RódEdidBlock
(
uöt8_t
 
blockNum
)

2815 c⁄° 
uöt8_t
 
edidOff£t
 = 
blockNum
 * 
EDID_BLOCK_SIZE
;

2816 c⁄° 
uöt8_t
 
wrôeLí
 = 1;

2817 c⁄° 
uöt8_t
 
ªadLí
 = 
EDID_BLOCK_SIZE
;

2819 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
PM_READING_EDID_BLOCK
, 
blockNum
);

2820 
	`AUX_RexEnqueueI2cOvîAuxWrôeRód
(

2821 &
edidOff£t
, 
wrôeLí
, 
ªadLí
, 
EDID_ADDRESS
, 
åue
, 
EdidRïlyH™dÀr
);

2822 
	}
}

2831 
	$EdidRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªque°
, c⁄° 
AUX_Rïly
 *
ª∂y
)

2833 if(
ª∂y
->
hódî
.
comm™d
 =
I2C_AUX_ACK
)

2835 if(!
	`AUX_Reque°IsAddªssO∆y
(
ªque°
) &&

2836 (
ªque°
->
hódî
.
comm™d
 =
I2C_AUX_READ
 ||Ñeque°->hódî.comm™d =
I2C_AUX_READ_MOT
))

2839 c⁄° 
RexPmEvítD©a
 
evítD©a
 = {

2840 .
ªque°AndRïlyC⁄èöî
 = {.
ªque°
 =Ñeque°, .
ª∂y
 =Ñeply}};

2841 
	`RexPmEdidRódögH™dÀr
(&
evítD©a
);

2845 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_GOT_OTHERS_REQ
,

2846 
	`AUX_Reque°IsAddªssO∆y
(
ªque°
),Ñeque°->
hódî
.
comm™d
);

2851 
	`ûog_DP_COMPONENT_1
(
ILOG_MINOR_ERROR
, 
AUX_MONITOR_INFO_FAIL
, 
__LINE__
);

2852 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MONITOR_DISCONNECT
);

2854 
	}
}

2863 
	$RexPmEdidRódögH™dÀr
(c⁄° 
RexPmEvítD©a
 *
evítD©a
)

2865 c⁄° 
size_t
 
√xtAddªss
 = 
	`Upd©eEdidCache
(

2866 &
evítD©a
->
ªque°AndRïlyC⁄èöî
, 
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
);

2868 
boﬁ
 
edidRódD⁄e
 = 
Ál£
;

2871 i‡(
√xtAddªss
 =(
size_t
)(
EDID_BLOCK_SIZE
 +

2872 ((
size_t
)
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
[
EDID_EXTENSION_FLAG_ADDR
] * 
EDID_BLOCK_SIZE
)))

2874 
edidRódD⁄e
 = 
åue
;

2876 i‡((
√xtAddªss
 % 
EDID_BLOCK_SIZE
) == 0)

2880 
uöt8_t
 
edidPro˚ssResu…
 = 
	`Pro˚ssEdidBa£Block
();

2881 
edidPro˚ssResu…
)

2883 
EDID_INVALID_HEADER
:

2884 
EDID_CHECKSUM_INVALID
:

2885 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
PM_EDID_ERROR
, 
__LINE__
, 
edidPro˚ssResu…
);

2886 i‡(!
ªxPmInôC⁄ãxt
.
edidRódIcmd
)

2888 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_EDID_READ_FAIL
);

2890 
	`EndRódEdid
();

2891 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_EDID_READ_FAIL
);

2894 
EDID_VALID
:

2895 i‡(
ªxPmInôC⁄ãxt
.
edidExtBlkIndex
)

2898 
	`RódEdidBlock
(
ªxPmInôC⁄ãxt
.
edidExtBlkIndex
);

2902 
edidRódD⁄e
 = 
åue
;

2912 if(
edidRódD⁄e
)

2914 i‡(!
ªxPmInôC⁄ãxt
.
edidRódIcmd
)

2916 
mccsRódRequúed
 = 
	`RexEdidCh™ged
(&
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
[0]);

2917 
	`EdidUpd©eHódî
(&
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
[0]);

2918 i‡(
	`EdidSuµ‹tsAudio
())

2920 
	`Upd©eAudioD©a
(
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
);

2923 i‡(
mccsRódRequúed
)

2925 
ªxPmInôC⁄ãxt
.
mccsRódCou¡
 = 0;

2928 
	`EndRódEdid
();

2929 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_GOT_EDID_INFO
);

2933 
ªxPmInôC⁄ãxt
.
edidRódIcmd
 = 
Ál£
;

2935 
size_t
 
ödex
 = 0; index < 
√xtAddªss
; index++)

2937 
	`ûog_DP_COMPONENT_2
(
ILOG_USER_LOG
, 
AUX_EDID_READ_ICMD
,

2938 
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
[
ödex
], index);

2939 
	`UART_WaôF‹Tx
();

2943 
	}
}

2953 
size_t
 
	$Upd©eEdidCache
(

2954 c⁄° 
AUX_Reque°AndRïlyC⁄èöî
 *
ªque°AndRïlyC⁄èöî
, 
uöt8_t
 *
edidCache
)

2959 c⁄° 
uöt8_t
 
auxD©aLí
 = 
ªque°AndRïlyC⁄èöî
->
ªque°
->
hódî
.
d©aLí
 + 1;

2962 c⁄° 
uöt8_t
 
c›yLí
 = 
	`CompuãD©aChunkSize
(

2963 
EDID_CACHE_SIZE
, 
ªxPmInôC⁄ãxt
.
edidIndex
, 
auxD©aLí
);

2965 
	`mem˝y
(
edidCache
 + 
ªxPmInôC⁄ãxt
.
edidIndex
,

2966 
ªque°AndRïlyC⁄èöî
->
ª∂y
->
d©a
,

2967 
c›yLí
);

2968 
ªxPmInôC⁄ãxt
.
edidIndex
 +
c›yLí
;

2970 
	`ûog_DP_COMPONENT_1
(
ILOG_DEBUG
, 
PM_UPDATING_EDID_CACHE
, 
ªxPmInôC⁄ãxt
.
edidIndex
);

2972  
ªxPmInôC⁄ãxt
.
edidIndex
;

2973 
	}
}

2982 
	$EndRódEdid
()

2984 
	`ûog_DP_COMPONENT_1
(

2985 
ILOG_MAJOR_EVENT
, 
PM_END_READ_EDID
, 
ªxPmInôC⁄ãxt
.
edidIndex
);

2987 
size_t
 
i
 = 0; i < 
ªxPmInôC⁄ãxt
.
edidIndex
; i++)

2989 
	`ûog_DP_COMPONENT_2
(

2990 
ILOG_DEBUG
, 
PM_EDID_BYTE_VALUE
, 
i
, 
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
[i]);

2992 
	}
}

3005 
Pro˚ssEdidBa£BlockResu…
 
	$Pro˚ssEdidBa£Block
()

3008 c⁄° 
uöt8_t
 
edidHódî
[8] = {0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0};

3009 
uöt8_t
 *
edidBa£Block
 = 
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
edidCache
;

3010 i‡(!
	`memeq
(
edidBa£Block
, 
edidHódî
, (edidHeader)))

3012  
EDID_INVALID_HEADER
;

3015 i‡(!
	`EdidBlockVîifyChecksum
(
edidBa£Block
, 
ªxPmInôC⁄ãxt
.
edidExtBlkIndex
))

3017  
EDID_CHECKSUM_INVALID
;

3020 i‡(
edidBa£Block
[
EDID_EXTENSION_FLAG_ADDR
] > 1)

3022 
	`ûog_DP_COMPONENT_1
(
ILOG_MINOR_ERROR
, 
PM_MULTIPLE_EDID_EXTENSION_BLOCKS
,

3023 
edidBa£Block
[
EDID_EXTENSION_FLAG_ADDR
]);

3024 
edidBa£Block
[
EDID_EXTENSION_FLAG_ADDR
] = 1;

3025 
edidBa£Block
[
EDID_CHECKSUM_BYTE
] = 
	`Upd©eEdidChecksumByã
((
uöt8_t
 *)edidBaseBlock);

3027 i‡(
edidBa£Block
[
EDID_EXTENSION_FLAG_ADDR
] == 0)

3029 
ªxPmInôC⁄ãxt
.
edidExtBlkIndex
 = 0;

3032  
EDID_VALID
;

3033 
	}
}

3044 
	$Upd©eAudioD©a
(c⁄° 
uöt8_t
 *
edidBa£Block
)

3046 
uöt8_t
 
i
;

3047 
uöt8_t
 
p
;

3048 
uöt8_t
 
‰qIdx
 = 0;

3049 
uöt8_t
 
suµFªq
;

3050 
i
 = 
EDID_BLOCK_SIZE
 + 4; i <= EDID_BLOCK_SIZE+0x19; )

3052 if(
edidBa£Block
[
i
] & 0x20)

3058 
i
 +(
edidBa£Block
[i] & 0x1F) + 1;

3061 
ªxAudio
.
sökF‹m©
 = (
edidBa£Block
[
i
 + 1] & 0x78) >> 3;

3062 
ªxAudio
.
numCh™√l
 = (
edidBa£Block
[
i
 + 1] & 0x07) + 1;

3063 
suµFªq
 = (
edidBa£Block
[
i
 + 2] & 0x7F);

3064 
p
 = 0;Ö < 7;Ö++)

3066 i‡(
suµFªq
 & 0x1)

3068 
ªxAudio
.
sökFªq
[
‰qIdx
++] = 
p
;

3069 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_REX_AUDIO_FREQ
, 
ªxAudio
.
sökFªq
[
‰qIdx
 - 1]);

3071 
suµFªq
 >>= 1;

3073 i‡(
ªxAudio
.
sökF‹m©
 =
LPCM
)

3075 
edidBa£Block
[
i
 + 3] & 0x07)

3078 
ªxAudio
.
bôøã
 = 16;

3081 
ªxAudio
.
bôøã
 = 20;

3084 
ªxAudio
.
bôøã
 = 24;

3087 
ªxAudio
.
bôøã
 = 24;

3093 
ªxAudio
.
bôøã
 = 
edidBa£Block
[
i
 + 3] / 8;

3095 
	}
}

3104 
	$lﬂdDeÁu…LökSåómP¨am
()

3106 c⁄° 
uöt8_t
 
ªxL™eCou¡
 = (
dpC⁄figPå
->
œ√Cou¡
 != 0) ?

3107 
dpC⁄figPå
->
œ√Cou¡
:

3108 
	`RexLoˇlDpcdRód
(
MAX_LANE_COUNT
);

3110 c⁄° 
uöt8_t
 
ªxB™dwidth
 = (
dpC⁄figPå
->
b™dwidth
 != 0) ?

3111 
dpC⁄figPå
->
b™dwidth
:

3112 
	`RexLoˇlDpcdRód
(
MAX_LINK_RATE
);

3114 c⁄° 
uöt8_t
 
ªxSscMode
 = ((
dpC⁄figPå
->
ªxSscAdvîti£Mode
 =
CONFIG_SSC_ENABLE
) ?

3115 
	`RexLoˇlDpcdRód
(
DOWNSPREAD_SUPPORTED
) | DOWNSPREAD_SUPPORTED:

3116 (
dpC⁄figPå
->
ªxSscAdvîti£Mode
 =
CONFIG_SSC_DISABLE
) ?

3117 
	`RexLoˇlDpcdRód
(
DOWNSPREAD_SUPPORTED
) & ~DOWNSPREAD_SUPPORTED:

3118 
	`RexLoˇlDpcdRód
(
DOWNSPREAD_SUPPORTED
));

3120 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
 = 
ªxL™eCou¡
 & 0x1F;

3121 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
 = 
ªxB™dwidth
;

3122 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
íabÀSsc
 = 
ªxSscMode
;

3123 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
íh™˚dFømögE«bÀ
 = 
	`RexLoˇlDpcdRód
(
MAX_LANE_COUNT
) & (1 << 7);

3125 c⁄° 
boﬁ
 
lökP¨amVÆid
 = ((
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
 != 0)

3126 && (
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
 != 0));

3128 i‡(
lökP¨amVÆid
)

3130 i‡(!
ªxPmInôC⁄ãxt
.
gŸSåómP¨amãrs
)

3132 
	`RexSëFÆlbckSåómP¨ams
();

3133 
	`RexUpd©eMvid
();

3138 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_ERROR
, 
AUX_INVALID_BW_LC
, 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
,

3139 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
 ,

3140 
__LINE__
 );

3141 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_CAP_READ_FAIL
);

3144 
	}
}

3156 
boﬁ
 
	$Ho°SåómP¨amsCh™ged
()

3158 
DP_SåómP¨amëîs
 *
√wSåómP¨ams
 = &
ªxPmInôC⁄ãxt
.
°ªamP¨amëîsNew
;

3159 
DP_SåómP¨amëîs
 *
ﬁdSåómP¨ams
 = &
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
;

3161 
boﬁ
 
°ªamP¨amCh™ged
 = !
	`memeq
(
√wSåómP¨ams
, 
ﬁdSåómP¨ams
, (
DP_SåómP¨amëîs
));

3165 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_NEW_HOST_INFO
, 
°ªamP¨amCh™ged
, 0);

3167 if(
°ªamP¨amCh™ged
)

3169 
	`mem˝y
(
ﬁdSåómP¨ams
, 
√wSåómP¨ams
, (
DP_SåómP¨amëîs
));

3172  (
°ªamP¨amCh™ged
);

3173 
	}
}

3182 
	$RexPmCommLökEvítH™dÀr
(
uöt32_t
 
lökUp
, uöt32_à
u£rC⁄ãxt
)

3184 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_LINK_MSG
, 
lökUp
);

3186 if(
lökUp
)

3188 
	`RexSídRexPmSètus
();

3194 
	`mem£t
(&
ªxPmC⁄ãxt
.
ÀxSètus
, 0, (rexPmContext.lexStatus));

3197 
ªxPmC⁄ãxt
.
°©eFœgs
.
phyUp
 = 
lökUp
;

3198 
	`RexLexA˘iveEvítGíî©e
();

3199 
	}
}

3208 
	$RexSídMccsC≠abûôõs
()

3210 
AUX_Up°ªamCpuMesßge
 
MccsMsg
 = {

3211 .
ty≥
 = 
AUX_MSG_MCCS_CAP_SEND
,

3212 .
msgBuf„r
 = &
mccsCache
,

3213 .
msgLígth
 = (
mccsCache
)

3216 
ªxPmInôC⁄ãxt
.
mccsSídögFœg
 = 
åue
;

3218 
	`RexSídCpuMesßgeToLex
(&
MccsMsg
);

3219 
	}
}

3228 
	$RexSídM⁄ô‹Info
()

3230 
AUX_Up°ªamCpuMesßge
 
sökP¨amMsg
 = {

3231 .
ty≥
 = 
AUX_MSG_SINK_PARAMETERS
,

3232 .
msgBuf„r
 = &
ªxPmInôC⁄ãxt
.
sökP¨amëîs
,

3233 .
msgLígth
 = (
ªxPmInôC⁄ãxt
.
sökP¨amëîs
)

3236 
	`RexSídCpuMesßgeToLex
(&
sökP¨amMsg
);

3237 
	`ûog_DP_COMPONENT_0
(
ILOG_USER_LOG
, 
PM_SENT_SINK_PARAMS
);

3238 
	}
}

3248 
	$RexPmC⁄figuøti⁄EvítH™dÀr
(
uöt32_t
 
evítInfo
, uöt32_à
u£rC⁄ãxt
)

3250 if(
evítInfo
 =
CONFIG_VARS_BB_FEATURE_CONTROL
)

3252 
boﬁ
 
dpE«bÀd
 = 
	`RexPmDpE«bÀd
();

3253 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_FEATURE_MSG
, 
dpE«bÀd
);

3255 
	`RexPmSèãSídEvítWôhNoD©a
(
dpE«bÀd
 ? 
REX_AUX_DP_ENABLE
 : 
REX_AUX_DP_DISABLE
);

3257 
	}
}

3267 
boﬁ
 
	$RexPmDpE«bÀd
()

3269 
boﬁ
 
dpE«bÀd
 = 
	`AUX_gëDPFótuª
();

3271 if(
ªxPmC⁄ãxt
.
ªxSètus
.
ªxDpE«bÀd
 !
dpE«bÀd
)

3273 
ªxPmC⁄ãxt
.
ªxSètus
.
ªxDpE«bÀd
 = 
dpE«bÀd
;

3274 
	`RexSídRexPmSètus
();

3277  
dpE«bÀd
;

3278 
	}
}

3288 
	$RexPmM⁄ô‹C⁄√˘MsgH™dÀr
(
boﬁ
 
c⁄√˘ed
)

3290 
ªxPmC⁄ãxt
.
ªxSètus
.
m⁄ô‹C⁄√˘ed
 = 
c⁄√˘ed
;

3291 
	`RexSídRexPmSètus
();

3292 if(!
c⁄√˘ed
)

3295 
ªxPmC⁄ãxt
.
adju°LökP¨amCou¡
 = 0;

3296 
ªxPmC⁄ãxt
.
lökRëryCou¡
 = 0;

3298 
	`RexPmSèãSídEvítWôhNoD©a
(
c⁄√˘ed
 ? 
REX_AUX_MONITOR_CONNECT
 : 
REX_AUX_MONITOR_DISCONNECT
);

3299 
	}
}

3310 
	$RexPídögTimîH™dÀr
()

3312 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_PENDING_COMPLETE
);

3313 
	}
}

3323 
	$RexVideoSèπTimîH™dÀr
()

3325 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_REX_READ_MCCS
);

3326 
	`RódMccsC≠
();

3327 
	}
}

3350 
	$Com∂ün˚TimîH™dÀr
()

3352 
	`RexPro˚ssCom∂ün˚Reque°
(
v˝SëReq
);

3353 
	}
}

3363 
	$RexRe£tCou¡TimîH™dÀr
()

3365 
	`DP_PrötRexI°©usMesßges
(&
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
);

3366 
ªxPmInôC⁄ãxt
.
ªxEº‹Cou¡
 = 0;

3367 
	}
}

3377 
	$RexPowîSëAndSökCou¡
()

3380 
	`SubmôN©iveAuxWrôe
(
SET_POWER_AND_SET_DP_PWR_VOLTAGE
, 
SET_NORMAL_OPERATION
, 
NULL
);

3381 
	`SubmôN©iveAuxRód
(
SINK_COUNT
, 0x01, 
RexSökCou¡H™dÀr
);

3383 
	}
}

3393 
	$RexSökCou¡H™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

3395 i‡(
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
cuºítSèã
 =
PM_GET_MONITOR_INFO
)

3397 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
PM_DPCD_BYTE_VALUE
, 
SINK_COUNT
, 
ª∂y
->
d©a
[0]);

3398 
	`AUX_PªC≠C⁄figuøti⁄
();

3399 
	`RexRódM⁄ô‹C≠
();

3401 
	}
}

3411 
	$RexRódM⁄ô‹C≠
()

3413 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
REX_READ_MONITOR_CAP
);

3414 
	`SubmôN©iveAuxRód
(0x0000, 
AUX_CAP_READ_SIZE
, 
AuxRïlyC≠H™dÀr
);

3415 
	}
}

3425 
	$RexSëM⁄ô‹PowîDown
()

3427 if(
	`HPD_GëLöeSèã
())

3429 
	`SubmôN©iveAuxWrôe
(
SET_POWER_AND_SET_DP_PWR_VOLTAGE
, 
SET_POWERDOWN
, 
NULL
);

3431 
	}
}

3440 
	$RexPmUpd©eVideoSètus
(
VideoSètus
 
videoSètus
)

3442 
ªxPmInôC⁄ãxt
.
videoSètus
 = videoStatus;

3443 
	`EVENT_Triggî
(
ET_VIDEO_STATUS_CHANGE
, 
videoSètus
);

3444 
	}
}

3453 
uöt32_t
 
	$RexPmGëVideoSètus
()

3455  
ªxPmInôC⁄ãxt
.
videoSètus
;

3456 
	}
}

3466 
	$RexLexA˘iveEvítGíî©e
()

3468 
boﬁ
 
ÀxA˘ive
 = 
ªxPmC⁄ãxt
.
°©eFœgs
.
phyUp


3469 && 
ªxPmC⁄ãxt
.
ÀxSètus
.
ÀxDpE«bÀd


3470 && 
ªxPmC⁄ãxt
.
ÀxSètus
.
ho°C⁄√˘ed
;

3472 i‡(
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxA˘ive
 !=ÜexActive)

3474 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
AUX_ACTIVE_INFO_REX
,

3475 
ªxPmC⁄ãxt
.
°©eFœgs
.
phyUp
,

3476 
ªxPmC⁄ãxt
.
ÀxSètus
.
ÀxDpE«bÀd
,

3477 
ªxPmC⁄ãxt
.
ÀxSètus
.
ho°C⁄√˘ed
);

3479 
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxA˘ive
 =ÜexActive;

3481 
	`RexPmSèãSídEvítWôhNoD©a
–
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxA˘ive
 ? 
REX_AUX_LEX_ACTIVE
 : 
REX_AUX_LEX_OFFLINE
);

3483 
	}
}

3493 
	$RexUpd©eVideoRxRódyInfo
(
boﬁ
 
ªady
)

3495 
ªxPmC⁄ãxt
.
ªxSètus
.
videoRxRódy
 = 
ªady
;

3496 
	`RexSídRexPmSètus
();

3497 
	}
}

3507 
	$RexSídBœckVideo
()

3509 if(!
	`DP_IsBœckS¸ìnE«bÀd
())

3511 
	`SídBœckVideoToM⁄ô‹
();

3513 
	}
}

3526 
	$RexSídRexPmSètus
()

3528 
AUX_Up°ªamCpuMesßge
 
°©usMsg
 = {

3529 .
ty≥
 = 
AUX_MSG_REX_PM_STATUS
,

3530 .
msgBuf„r
 = &
ªxPmC⁄ãxt
.
ªxSètus
,

3531 .
msgLígth
 = (
ªxPmC⁄ãxt
.
ªxSètus
)

3534 
	`RexSídCpuMesßgeToLex
(&
°©usMsg
);

3535 
	}
}

3545 
	$RexUpd©eAUX™dDpSåómP¨ams
()

3548 
	`RexUpd©eMvid
();

3550 
	`AUX_RexUpd©eSåómP¨ams
(&
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
);

3552 i‡(!
	`DP_Sour˚InRe£t
())

3554 
	`DP_RexUpd©eSåómP¨amëîs
(&
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
);

3559 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
SOURCE_OUT_RESET
);

3561 
	}
}

3571 
	$RexSëFÆlbckSåómP¨ams
()

3573 
	`mem˝y
(&
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
,

3574 &
ÁŒbackSåómP¨am
,

3575 (
DP_SåómP¨amëîs
));

3576 
	}
}

3586 
	$RexDP130InôCÆlback
(
boﬁ
 
suc˚ss
)

3588 
ªxPmC⁄ãxt
.
°©eFœgs
.
ªdrivîInôD⁄e
 = 
suc˚ss
;

3589 
	`RexPmSèãSídEvítWôhNoD©a
–
REX_AUX_REDRIVER_INIT_DONE
);

3590 
	}
}

3599 
	$RexPmMˇEº‹CÆlback
(
MCA_Ch™√lEº‹
 
mˇEº‹
)

3601 if(
mˇEº‹
 =
MCA_CHANNEL_ERROR_RX_FIFO_OVERFLOW
)

3603 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_VIDEO_ERROR_EVENT
);

3605 
	}
}

3614 
	$RexHPDI¡îru±H™dÀr
(
RexHPDI¡îru±
 
hpdI¡îru±
)

3616 
hpdI¡îru±
)

3618 
HPD_INT_CONNECT
:

3619 
	`ILOG_i°©us
(
ISTATUS_DP_REX_MONITOR_CONNECTED
, 0);

3620 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_HPD_UP
);

3621 
	`RexPmM⁄ô‹C⁄√˘MsgH™dÀr
(
åue
);

3623 
HPD_INT_DISCONNECT
:

3624 
	`ILOG_i°©us
(
ISTATUS_DP_REX_MONITOR_REMOVED
, 0);

3625 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_HPD_DOWN
);

3626 
	`RexPmM⁄ô‹C⁄√˘MsgH™dÀr
(
Ál£
);

3628 
HPD_INT_REPLUG
:

3629 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_HPD_REPLUG
);

3630 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MONITOR_REPLUG
);

3632 
HPD_INT_IRQ
:

3633 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_HPD_IRQ
);

3634 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MONITOR_IRQ
);

3639 
	}
}

3649 
	$RexPmMˇEvítH™dÀr
(
MCA_Ch™√lSètus
 
ch™√lSètus
)

3651 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_DP_CHANNEL_STATUS
, 
ch™√lSètus
);

3653 
ch™√lSètus
)

3655 
MCA_CHANNEL_STATUS_LINK_ACTIVE
:

3656 
	`MCA_Ch™√lTxRxSëup
(
MCA_CHANNEL_NUMBER_DP
);

3658 
MCA_CHANNEL_STATUS_CHANNEL_READY
:

3659 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MCA_UP
);

3661 
MCA_CHANNEL_STATUS_LINK_DOWN
:

3662 
MCA_CHANNEL_STATUS_CHANNEL_DISABLED
:

3663 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
AUX_MCA_DETECT_LINKDN
);

3664 
	`MCA_Ch™√lLökDn
(
MCA_CHANNEL_NUMBER_DP
);

3665 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MCA_DN
);

3670 
	}
}

3679 
	$RexSídCpuMesßgeToLex
(c⁄° 
AUX_Up°ªamCpuMesßge
 *
msg
)

3681 
	`ûog_DP_COMPONENT_1
(
ILOG_MINOR_EVENT
, 
AUX_SENT_CPU_MESSAGE
, 
msg
->
ty≥
);

3682 
	`CPU_COMM_£ndMesßge
(
CPU_COMM_TYPE_AUX
, 
msg
->
ty≥
, (c⁄° 
uöt8_t
*)(msg->
msgBuf„r
), msg->
msgLígth
);

3683 
	}
}

3692 
	$RexCheckMaxBw
(
uöt8_t
 *
ª˚ivîC≠Cache
)

3694 if(
ª˚ivîC≠Cache
[
MAX_LINK_RATE
] > 
MAX_LINK_RATE_DEFAULT
)

3696 
	`ûog_DP_COMPONENT_2
(
ILOG_MINOR_ERROR
,

3697 
AUX_MAX_BW_OVER
, 
ª˚ivîC≠Cache
[
MAX_LINK_RATE
], 
MAX_LINK_RATE_DEFAULT
);

3698 
ª˚ivîC≠Cache
[
MAX_LINK_RATE
] = 
MAX_LINK_RATE_DEFAULT
;

3700 
	}
}

3710 
	$M⁄ô‹IrqH™dÀr
()

3712 
	`SubmôN©iveAuxRód
(
DEVICE_SERVICE_IRQ_VECTOR
, 0x01, 
Devi˚Sîvi˚IrqRïlyH™dÀr
);

3713 
	}
}

3723 
	$Devi˚Sîvi˚IrqRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

3725 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
PM_READ_IRQ_VECTOR
, 
DEVICE_SERVICE_IRQ_VECTOR
, 
ª∂y
->
d©a
[0]);

3727 
uöt8_t
 
úqH™dÀd
 = 0;

3729 if(
ª∂y
->
d©a
[0] & 
AUTOMATED_TEST_REQUEST
)

3731 
úqH™dÀd
 |
AUTOMATED_TEST_REQUEST
;

3732 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_PM_EVENT_COMPLIANCE_MODE
);

3733 
	`SubmôN©iveAuxRód
(
TEST_REQUEST
, 0x01, 
Te°Reque°RïlyH™dÀr
);

3735 if((
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
cuºítSèã
 =
REX_PM_COMPLIANCE_MODE
Ë&& (
ª∂y
->
d©a
[0] == 0))

3737 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_DP_DISABLE
);

3738 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_DP_ENABLE
);

3742 
	`RexRódLökSètusIrq
();

3745 
	`SubmôN©iveAuxWrôe
(
DEVICE_SERVICE_IRQ_VECTOR
, 
úqH™dÀd
, 
NULL
);

3746 
	}
}

3756 
	$RexRódLökSètusIrq
()

3758 
	`SubmôN©iveAuxRód
(
LINK_SERVICE_IRQ_VECTOR_ESI0
, 0x01, 
RexRódLökSètusIrqH™dÀr
);

3759 
	}
}

3769 
	$RexRódLökSètusIrqH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

3771 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
PM_READ_IRQ_VECTOR
, 
LINK_SERVICE_IRQ_VECTOR_ESI0
, 
ª∂y
->
d©a
[0]);

3773 
uöt8_t
 
úqH™dÀd
 = 0;

3775 if(
ª∂y
->
d©a
[0] & 
RX_CAP_CAHANGED
)

3777 
úqH™dÀd
 |
RX_CAP_CAHANGED
;

3778 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_DP_DISABLE
);

3779 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_DP_ENABLE
);

3783 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_READ_ALL_LANES
);

3786 
	`SubmôN©iveAuxWrôe
(
LINK_SERVICE_IRQ_VECTOR_ESI0
, 
úqH™dÀd
, 
NULL
);

3787 
	}
}

3797 
	$RexM⁄ô‹InfoEvítH™dÀr
()

3799 if(
ªxPmInôC⁄ãxt
.
m⁄ô‹InfoRódy
)

3801 
	`RexSídM⁄ô‹Info
();

3802 
ªxPmC⁄ãxt
.
°©eFœgs
.
ÀxWaôM⁄ô‹Info
 = 
Ál£
;

3804 
	`CPU_COMM_£ndSubTy≥
(
CPU_COMM_TYPE_AUX
, 
AUX_MSG_REX_WAIT_HOST_INFO
);

3808 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_LEX_REQUEST_MONITOR_INFO
);

3810 
	}
}

3821 
boﬁ
 
	$LökP¨amsCh™gedDurögLökTøöög
()

3825 
DpC⁄fig
 *
ªxTøöedC⁄fig
 = (DpC⁄fig*)
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
evítD©a
;

3826 
MaöLökB™dwidth
 
åaöedBW
 = 
ªxTøöedC⁄fig
->
bw
;

3827 
L™eCou¡
 
åaöedLC
 = 
ªxTøöedC⁄fig
->
lc
;

3829 if((
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
 !
åaöedBW
) ||

3830 (
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
 !
åaöedLC
))

3832 if(
ªxPmC⁄ãxt
.
adju°LökP¨amCou¡
 =
REX_ERROR_RECOVERY_MAX_COUNT
)

3835 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
 = 
åaöedBW
;

3836 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
 = 
åaöedLC
;

3839 
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
ª˚ivîC≠Cache
[
MAX_LINK_RATE
] = 
åaöedBW
;

3840 
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
ª˚ivîC≠Cache
[
MAX_LANE_COUNT
] =

3841 ((
ªxPmInôC⁄ãxt
.
sökP¨amëîs
.
ª˚ivîC≠Cache
[
MAX_LANE_COUNT
] & ~
MAX_LANE_COUNT_MASK
Ë| 
åaöedLC
);

3843  
åue
;

3846  
Ál£
;

3847 
	}
}

3857 
RexPmSèã
 
	$RexRëryH™dÀr
(
RexRëryTy≥s
 
ty≥
)

3859 
RexPmSèã
 
√wSèã
 = 
ªxPmC⁄ãxt
.
°©eMachöeInfo
.
cuºítSèã
;

3861 
ty≥
)

3863 
REX_LINK_RETRY
:

3864 if(
ªxPmC⁄ãxt
.
lökRëryCou¡
 < 
REX_ERROR_RECOVERY_MAX_COUNT
)

3866 
ªxPmC⁄ãxt
.
lökRëryCou¡
++;

3867 
√wSèã
 = 
PM_IDLE_PENDING
;

3871 
ªxPmC⁄ãxt
.
adju°LökP¨amCou¡
 = 0;

3872 
ªxPmC⁄ãxt
.
lökRëryCou¡
 = 0;

3873 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_LINK_FAIL
, 0, 
ªxPmC⁄ãxt
.
lökRëryCou¡
);

3874 
√wSèã
 = 
PM_ERROR
;

3878 
REX_ADJ_LINK_RETRY
:

3879 if(
ªxPmC⁄ãxt
.
adju°LökP¨amCou¡
 < 
REX_ERROR_RECOVERY_MAX_COUNT
)

3883 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
AUX_REX_LINK_PARAM_RETRY
,

3884 
ªxPmC⁄ãxt
.
adju°LökP¨amCou¡
);

3885 
ªxPmC⁄ãxt
.
adju°LökP¨amCou¡
++;

3886 
√wSèã
 = 
PM_IDLE_PENDING
;

3892 
ªxPmC⁄ãxt
.
adju°LökP¨amCou¡
 = 0;

3893 
ªxPmC⁄ãxt
.
lökRëryCou¡
 = 0;

3894 
√wSèã
 = 
PM_LINK_TRAINED_NO_VIDEO
;

3898 
REX_EDID_READ_RETRY
:

3899 i‡(
ªxPmC⁄ãxt
.
m⁄ô‹EdidRódRëry
 < 
REX_MONITOR_READ_RETRY
)

3901 
ªxPmC⁄ãxt
.
m⁄ô‹EdidRódRëry
++;

3902 
√wSèã
 = 
PM_IDLE_PENDING
;

3906 i‡(
ªxPmInôC⁄ãxt
.
ˇpIsVÆid
)

3910 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_EDID_INVALID
);

3911 
√wSèã
 = 
PM_WAIT_REDRIVER_INIT
;

3915 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_INVALID_CAP_EDID
);

3916 
√wSèã
 = 
PM_ERROR
;

3921 
REX_CAP_READ_RETRY
:

3922 i‡(
ªxPmC⁄ãxt
.
m⁄ô‹C≠RódRëry
 < 
REX_MONITOR_READ_RETRY
)

3924 
ªxPmC⁄ãxt
.
m⁄ô‹C≠RódRëry
++;

3925 
√wSèã
 = 
PM_IDLE_PENDING
;

3930 
ªxPmC⁄ãxt
.
m⁄ô‹C≠RódRëry
 = 0;

3931 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_CAP_INVALID
);

3932 
√wSèã
 = 
PM_ERROR
;

3940  
√wSèã
;

3941 
	}
}

3951 
	$RexUpd©eMvid
()

3953 c⁄° 
boﬁ
 
lökP¨amVÆid
 = ((
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
 != 0)

3954 && (
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
 != 0));

3956 
	`üs£π_DP_COMPONENT_3
(
lökP¨amVÆid
, 
AUX_INVALID_BW_LC
,

3957 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
lc
,

3958 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
lökP¨amëîs
.
bw
,

3959 
__LINE__
 );

3961 
ªxPmInôC⁄ãxt
.
lökAndSåómP¨amëîs
.
°ªamP¨amëîs
.
mvid
 = 
	`RexGíMvid
(&rexPmInitContext.linkAndStreamParameters);

3962 
	}
}

	@components/dp/src/rex_policy_maker.h

11 #i‚de‡
REX_POLICY_MAKER_H


12 
	#REX_POLICY_MAKER_H


	)

15 
	~<iba£.h
>

16 
	~<°©e_machöe.h
>

17 
	~"dp_loc.h
"

22 
	eRexPmEvít


24 
	mREX_AUX_EVENT_ENTER
 = 
UTILSM_EVENT_ENTER
,

25 
	mREX_AUX_EVENT_EXIT
 = 
UTILSM_EVENT_EXIT
,

26 
	mREX_AUX_DP_ENABLE
,

27 
	mREX_AUX_DP_DISABLE
,

28 
	mREX_AUX_MCA_UP
,

29 
	mREX_AUX_MCA_DN
,

30 
	mREX_AUX_LEX_ACTIVE
,

31 
	mREX_AUX_LEX_OFFLINE
,

32 
	mREX_AUX_MONITOR_CONNECT
,

33 
	mREX_AUX_MONITOR_DISCONNECT
,

34 
	mREX_AUX_MONITOR_REPLUG
,

35 
	mREX_AUX_MONITOR_IRQ
,

36 
	mREX_AUX_GOT_EDID_INFO
,

37 
	mREX_AUX_EDID_READ_FAIL
,

38 
	mREX_AUX_CAP_READ_FAIL
,

39 
	mREX_AUX_LEX_REQUEST_MONITOR_INFO
,

40 
	mREX_AUX_DP_RX_HOST_INFO
,

41 
	mREX_AUX_REDRIVER_INIT_DONE
,

42 
	mREX_AUX_MONITOR_LINK_TRAINING_SUCCESS
,

43 
	mREX_AUX_MONITOR_LINK_TRAINING_FAIL
,

44 
	mREX_AUX_VIDEO_TX_READY
,

45 
	mREX_AUX_VIDEO_TX_NOT_READY
,

46 
	mREX_AUX_PENDING_COMPLETE
,

47 
	mREX_AUX_VIDEO_ERROR_EVENT
,

48 
	mREX_AUX_ERROR_EVENT
,

49 
	mREX_PM_EVENT_COMPLIANCE_MODE
,

50 
	mREX_AUX_AUDIO_ERROR_EVENT
,

51 
	mREX_AUX_START_DIAGNOSTIC
,

52 
	mREX_AUX_MONITOR_RELINK_TRAINING


55 
	eRexHPDI¡îru±


57 
	mHPD_INT_CONNECT
,

58 
	mHPD_INT_DISCONNECT
,

59 
	mHPD_INT_REPLUG
,

60 
	mHPD_INT_IRQ


63 
	eAUX_PªFëchResu…


65 
	mPREFETCH_SUCCESS
,

66 
	mPREFETCH_CAP_FAIL
,

67 
	mPREFETCH_EDID_FAIL
,

71 
	uRexPmEvítD©a


74 c⁄° 
AUX_Reque°AndRïlyC⁄èöî
 
	mªque°AndRïlyC⁄èöî
;

77 c⁄° 
AUX_Down°ªamCpuMesßge
 *
	mdown°ªamCpuMesßge
;

80 
AUX_PªFëchResu…
 
	m¥eFëchResu…
;

82 c⁄° 
DpC⁄fig
 *
	mªxTøöedC⁄fig
;

86 
uöt8_t
 
	$RexLoˇlDpcdRód
(
uöt32_t
 
addªss
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

87 
	$AUX_RexPﬁicyMakîInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

88 
	$RexPmSèãSídEvítWôhNoD©a
(
RexPmEvít
 
evít
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

89 
	$SubmôN©iveAuxRód
(
uöt32_t
 
addªss
, 
uöt8_t
 
ªadLígth
,

90 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

91 
	$SubmôN©iveAuxWrôe
(
uöt32_t
 
addªss
, 
uöt8_t
 
wrôeD©a
,

92 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

93 
	$RexI§H™dÀr
(
uöt32_t
 
i§Ty≥
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

94 
	$RexEº‹H™dÀr
(
AuxEº‹Code
 
îrCode
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

95 
	$AUX_RexPmLogSèã
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

96 
	$DP_REX_RódMccs
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

97 
	$RexPmSèãSídEvítWôhD©a
(
RexPmEvít
 
evít
,

98 
RexPmEvítD©a
 *
evítD©a
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

99 
	$AUX_RexSëIsﬁ©edSèã
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

100 
	$DP_REX_CheckNewC⁄åﬁVÆues
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

101 
	$AUX_RexEdidRód
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

102 
	$DP_REX_IcmdPrötAŒSètusFœg
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

	@components/dp/src/rex_transaction_handlers.c

25 
	~<iba£.h
>

26 
	~<bb_t›.h
>

27 
	~<bb_t›_dp_a7.h
>

28 
	~<dp_sour˚_ªgs.h
>

29 
	~<ˇŒback.h
>

30 
	~<À⁄_timîs.h
>

31 
	~<timög_timîs.h
>

32 
	~<dp_°ªam.h
>

33 
	~<ã°_dügno°ics.h
>

35 
	~"ªx_pﬁicy_makî.h
"

36 
	~"dpcd.h
"

37 
	~"dp_loc.h
"

38 
	~"dp_log.h
"

39 
	~<aux_≠i.h
>

43 
	#MAX_CHANNEL_EQUALIZATION_LOOP_COUNT
 5

	)

44 
	#MAX_LANEXY_STATUS_READS
 10

	)

45 
	#MAX_ADJUSTMENT_REQUESTS
 5

	)

47 
	#LANE0_CR_DONE
 (1 << 0)

48 
	#LANE0_CE_DONE
 (1 << 1)

49 
	#LANE0_SB_LOCK
 (1 << 2)

50 

	)

51 
	#LANE1_CR_DONE
 (1 << 4)

52 
	#LANE1_CE_DONE
 (1 << 5)

53 
	#LANE1_SB_LOCK
 (1 << 6)

54 

	)

55 
	#LANE2_CR_DONE
 (1 << 0)

56 
	#LANE2_CE_DONE
 (1 << 1)

57 
	#LANE2_SB_LOCK
 (1 << 2)

58 

	)

59 
	#LANE3_CR_DONE
 (1 << 4)

60 
	#LANE3_CE_DONE
 (1 << 5)

61 
	#LANE3_SB_LOCK
 (1 << 6)

62 

	)

63 
	#INTERLANE_ALIGN_DONE
 (1 << 0)

64 
	#NUM_READ_LANE_STATUS
 6

	)

70 
	eRexLtSèã


72 
	mRT_DISABLE
,

73 
	mRT_CLOCK_RECOVERY
,

74 
	mRT_CHANNEL_EQ
,

75 
	mRT_LINK_TRAINED
,

76 
	mNUM_STATES_REX_TRAINING


83 
uöt8_t
 
	ma202
;

84 
uöt8_t
 
	ma203
;

85 
uöt8_t
 
	ma204
;

86 
uöt8_t
 
	ma205
;

87 
uöt8_t
 
	ma206
;

88 
uöt8_t
 
	ma207
;

89 } 
	maddr
;

90 
uöt8_t
 
	mbyãs
[
NUM_READ_LANE_STATUS
];

91 } 
	tL™eSètus
;

95 
	$RexLtEvítCÆlback
(*
∑øm1
, *
∑øm2
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

96 
RexLtSèã
 
	$RexLtDißbÀdH™dÀr
(
RexLtEvít
 
evít
, 
RexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

97 
RexLtSèã
 
	$RexLtClockRecovîyH™dÀr
(
RexLtEvít
 
evít
, 
RexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

98 
RexLtSèã
 
	$RexLtCh™√lEqH™dÀr
(
RexLtEvít
 
evít
, 
RexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

99 
RexLtSèã
 
	$RexLtLökTøöedH™dÀr
(
RexLtEvít
 
evít
, 
RexLtSèã
 
cuºítSèã
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

100 
RexLtSèã
 
	$AUX_RexLtComm⁄H™dÀr
(
RexLtEvít
 
evít
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

102 
	$GëDpcdL™eSètus
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

103 
	$RódAŒL™eSètus
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

104 
	$RexL™eXYSètusRódRïlyH™dÀr
(

105 c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

107 
boﬁ
 
	$AŒL™esHaveClockRecovîy
–c⁄° 
L™eSètus
 *
œ√Sètus
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

108 
boﬁ
 
	$AŒL™esHaveCh™√lEq
–c⁄° 
L™eSètus
 *
œ√Sètus
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

109 
boﬁ
 
	$AŒL™esHaveSymbﬁLock
–c⁄° 
L™eSètus
 *
œ√Sètus
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

110 
boﬁ
 
	$AŒL™esHaveAlignmít
(c⁄° 
L™eSètus
 *
œ√Sètus
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

112 
boﬁ
 
	$SökSuµ‹tsTps3
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

113 
	$IssueTøöögP©ã∫SëReque°
(

114 
TøöögP©ã∫Sequí˚
 
çs
,

115 
boﬁ
 
s¸ambÀE«bÀ
,

116 
AUX_RexRïlyH™dÀr
 
ª∂yH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

118 
	$AUX_RexSèπCR
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

119 
	$AUX_RexDriveSëupAndRódL™eSètus
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

120 
	$AUX_RexSèπCh™√lEq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

121 
boﬁ
 
	$Redu˚CrL™eCou¡
(
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

122 
	$Tîmö©eLökTøöögSequí˚
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

123 
	$Checkf‹MaxVsAndPe
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

124 
	$AUX_CÀ™upLökCtx
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

125 
	$£tTøöögEQI¡îvÆ
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

126 
boﬁ
 
	$GëL™eSètusResu…
(
boﬁ
 
œ√0D⁄e
, boﬁ 
œ√1D⁄e
, boﬁ 
œ√2D⁄e
, boﬁ 
œ√3D⁄e
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

128 
	`AUX_RexSëupLökTøöög
(c⁄° 
LökP¨amëîs
 *
lökP¨amëîs
);

129 
	$AUX_RexClockRecovîyNoCr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

130 
	$AUX_RexVﬁègeAndPeSë
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

131 
	$AUX_RexCrAdju°R©eOrL™e
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

132 
boﬁ
 
	$AUX_RexCh™√lEqNoCr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

133 
	$AUX_RexCh™√lEqHaveCr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

134 
	$AUX_Re£tRexTønß˘i⁄H™dÀrSèãs
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

143 
DP_SåómP¨amëîs
 
°ªamP¨amëîs
;

144 
DpC⁄fig
 
dpC⁄fig
;

145 
uöt8_t
 
åaöögL™eXSë
[4];

146 
VﬁègeSwög
 
vs
[4];

147 
PªEmphasis
 
≥
[4];

148 
uöt8_t
 
œ√XYSètusRódCou¡
;

149 
uöt8_t
 
lökTøöögSuc˚ssCou¡
;

150 
boﬁ
 
°ªamP¨amsVÆid
;

151 
boﬁ
 
maxVﬁègeSwögRóched
;

152 
uöt8_t
 
œ°L™e0_1_adju°mítReque°
;

153 
uöt8_t
 
œ°L™e2_3_adju°mítReque°
;

154 
uöt8_t
 
ßmeAdju°mítReque°Cou¡î
;

155 
boﬁ
 
ãrmö©eLökTøöög
;

156 
uöt8_t
 
EquÆiz©i⁄Lo›Cou¡
;

158 
L™eSètus
 
œ√Sètus
;

159 } 
ªxTønsInôCtx
;

161 
	sRexTønß˘i⁄Ctx


163 
TIMING_TimîH™dÀrT
 
åaöögAuxRódI¡îvÆTimî
;

164 
UtûSmInfo
 
°©eMachöeInfo
;

168 c⁄° 
uöt8_t
 
åaöögEQI¡îvÆ
[] =

175 
	}
};

177 c⁄° 
EvítH™dÀr
 
	g…SèãTabÀ
[
NUM_STATES_REX_TRAINING
] =

179 [
RT_DISABLE
] = 
RexLtDißbÀdH™dÀr
,

180 [
RT_CLOCK_RECOVERY
] = 
RexLtClockRecovîyH™dÀr
,

181 [
RT_CHANNEL_EQ
] = 
RexLtCh™√lEqH™dÀr
,

182 [
RT_LINK_TRAINED
] = 
RexLtLökTøöedH™dÀr
,

185 
RexTønß˘i⁄Ctx
 
	gªxTønsCtx
 =

187 .
°©eMachöeInfo
.
°©eH™dÀrs
 = 
…SèãTabÀ
,

188 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gª£rved
 = 0,

189 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	glogLevñ
 = (
uöt8_t
)
ILOG_MAJOR_EVENT
,

190 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gûogComp⁄ít
 = 
DP_COMPONENT
,

191 .
	g°©eMachöeInfo
.
	glogInfo
.
	göfo
.
	gûogId
 = 
LT_STATE_TRANSITION


206 
	$AUX_RexTønß˘i⁄H™dÀrInô
()

208 
ªxTønsCtx
.
åaöögAuxRódI¡îvÆTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(
GëDpcdL™eSètus
, 
Ál£
, 1);

209 
	}
}

218 
boﬁ
 
	$RexAuxCheckDpcdRevRïlyH™dÀr
(
uöt8_t
 
dpcd_ªv
)

220 
dpcd_ªv
)

222 
DPCD_REV_1_0
:

223 
DPCD_REV_1_1
:

224 
DPCD_REV_1_2
:

225 
DPCD_REV_1_3
:

226 
DPCD_REV_1_4
:

227  
åue
;

231  
Ál£
;

234 
	}
}

243 
	$SídVideoToM⁄ô‹
()

246 
	`bb_t›_AµlyDpSour˚TicoDCålRe£t
(
åue
);

248 
	`bb_t›_AµlyDpSour˚TicoDCålRe£t
(
Ál£
);

251 
	`DP_ProgømSåómDecodî
(

252 
ªxTønsInôCtx
.
°ªamP¨amëîs
.
mvid
,ÑexTønsInôCtx.°ªamP¨amëîs.
nvid
,ÑexTønsInôCtx.°ªamP¨amëîs.
h
.
tŸÆ
);

253 
	`DP_E«bÀSåómDecodî
();

255 
	`DP_SëCpuM©hResu…Ródy
(
Ál£
);

256 
	`DP_Sour˚E«bÀVidSåómGíî©‹
(
åue
);

257 
	`DP_Sour˚E«bÀBœckS¸ìn
(
Ál£
);

258 
	`DP_SëCpuM©hResu…Ródy
(
åue
);

259 
	}
}

267 
	$RexProgømALU
()

269 
	`DP_Sour˚C⁄figuªDïackëizî
(&
ªxTønsInôCtx
.
°ªamP¨amëîs
,ÑexTønsInôCtx.
dpC⁄fig
.
lc
,

270 
	`Aux_GëSymbﬁClock
(
ªxTønsInôCtx
.
dpC⁄fig
.
bw
,ÑexTønsInôCtx.dpC⁄fig.
sscDëe˘ed
),

271 
	`Aux_GëSymbﬁClock
(
ªxTønsInôCtx
.
dpC⁄fig
.
bw
, 
Ál£
));

272 
	}
}

280 
	$RexDebugProgømALU
()

282 
	`DP_Sour˚DebugC⁄figuªDïackëizî
(&
ªxTønsInôCtx
.
°ªamP¨amëîs
,ÑexTønsInôCtx.
dpC⁄fig
.
lc
,

283 
	`Aux_GëSymbﬁClock
(
ªxTønsInôCtx
.
dpC⁄fig
.
bw
,ÑexTønsInôCtx.dpC⁄fig.
sscDëe˘ed
),

284 
	`Aux_GëSymbﬁClock
(
ªxTønsInôCtx
.
dpC⁄fig
.
bw
, 
Ál£
));

285 
	}
}

299 
	$SídIdÀP©ã∫
()

302 
ªxTønsInôCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
 = 
TPS_0
;

304 
	`DP_Sour˚E«bÀS¸ambÀr
(
åue
);

305 
	`DP_Sour˚E«bÀSynSåómGíî©‹
(
åue
);

309 
	`DP_Sour˚SëDpTøöögD⁄e
(
åue
);

311 
	`DP_SëTøöögP©ã∫Sequí˚
(
TPS_0
);

312 
	}
}

320 
	$SídBœckVideoToM⁄ô‹
()

322 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_REX_SEND_DUMMY
);

323 
	`DP_Sour˚E«bÀBœckS¸ìn
(
åue
);

328 
	`DP_Sour˚E«bÀVidSåómGíî©‹
(
Ál£
);

333 
	`bb_t›_AµlyDpSour˚TicoDCålRe£t
(
åue
);

334 
	}
}

344 
	$RexLtSèãSídEvítWôhD©a
(
RexLtEvít
 
evít
, 
RexLtEvítD©a
 *
evítD©a
)

347 
uöt32_t
 
evítx
 = 
evít
;

349 
	`CALLBACK_Run
(
RexLtEvítCÆlback
, (*)
evítx
, (*)
evítD©a
);

350 
	}
}

360 
	$RexLtSèãSídEvítWôhNoD©a
(
RexLtEvít
 
evít
)

362 
	`RexLtSèãSídEvítWôhD©a
(
evít
, 
NULL
);

363 
	}
}

373 
	$WrôeLökC⁄figuøti⁄P¨amëîs
(

374 
MaöLökB™dwidth
 
b™dwidth
,

375 
L™eCou¡
 
œ√Cou¡
,

376 
boﬁ
 
íh™˚dFømög
)

380 c⁄° 
AUX_Reque°
 
£tBwLcReque°
 = {

381 .
hódî
 = {

382 .
comm™d
 = 
NATIVE_AUX_WRITE
,

383 .
addªss
 = 
LINK_BW_SET
,

384 .
d©aLí
 = 1

386 .
d©a
 = {
ªxTønsInôCtx
.
dpC⁄fig
.
bw
, (ªxTønsInôCtx.dpC⁄fig.
íh™˚dFømög
 << 7Ë|ÑexTønsInôCtx.dpC⁄fig.
lc
},

387 .
Àn
 = 4 + 2

389 
	`AUX_RexEnqueueLoˇlReque°
(&
£tBwLcReque°
, 
NULL
);

420 
	}
}

430 
	$IssueTøöögL™eXSëReque°
(
L™eCou¡
 
lc
, 
AUX_RexRïlyH™dÀr
 
ª∂yH™dÀr
)

432 c⁄° 
AUX_Reque°
 
åaöögL™eXSëReq
 = {

433 .
hódî
 = {

434 .
comm™d
 = 
NATIVE_AUX_WRITE
,

435 .
addªss
 = 
TRAINING_LANE0_SET
,

436 .
d©aLí
 = 
lc
 - 1

438 .
d©a
 = {

441 
ªxTønsInôCtx
.
åaöögL™eXSë
[0],

442 
ªxTønsInôCtx
.
åaöögL™eXSë
[1],

443 
ªxTønsInôCtx
.
åaöögL™eXSë
[2],

444 
ªxTønsInôCtx
.
åaöögL™eXSë
[3]

446 .
Àn
 = 4 + 
lc


449 
	`AUX_RexEnqueueLoˇlReque°
(&
åaöögL™eXSëReq
, 
ª∂yH™dÀr
);

450 
	}
}

460 
	$Adju°VﬁègeSwögAndPªEmphasisL™e0_1
(
uöt8_t
 
ªque°
)

462 
uöt8_t
 
œ√Mask
 = 0x3;

464 
ªxTønsInôCtx
.
vs
[0] = 
ªque°
 & 
œ√Mask
;

465 
ªxTønsInôCtx
.
vs
[1] = (
ªque°
 >> 4Ë& 
œ√Mask
;

467 
ªxTønsInôCtx
.
≥
[0] = (
ªque°
 >> 2Ë& 
œ√Mask
;

468 
ªxTønsInôCtx
.
≥
[1] = (
ªque°
 >> 6Ë& 
œ√Mask
;

470 
ªxTønsInôCtx
.
åaöögL™eXSë
[0] = (ªxTønsInôCtx.
≥
[0] << 3Ë|ÑexTønsInôCtx.
vs
[0];

471 
ªxTønsInôCtx
.
åaöögL™eXSë
[1] = (ªxTønsInôCtx.
≥
[1] << 3Ë|ÑexTønsInôCtx.
vs
[1];

472 
	}
}

482 
	$Adju°VﬁègeSwögAndPªEmphasisL™e2_3
(
uöt8_t
 
ªque°
)

484 
uöt8_t
 
œ√Mask
 = 0x3;

486 
ªxTønsInôCtx
.
vs
[2] = 
ªque°
 & 
œ√Mask
;

487 
ªxTønsInôCtx
.
vs
[3] = (
ªque°
 >> 4Ë& 
œ√Mask
;

489 
ªxTønsInôCtx
.
≥
[2] = (
ªque°
 >> 2Ë& 
œ√Mask
;

490 
ªxTønsInôCtx
.
≥
[3] = (
ªque°
 >> 6Ë& 
œ√Mask
;

492 
ªxTønsInôCtx
.
åaöögL™eXSë
[2] = (ªxTønsInôCtx.
≥
[2] << 3Ë|ÑexTønsInôCtx.
vs
[2];

493 
ªxTønsInôCtx
.
åaöögL™eXSë
[3] = (ªxTønsInôCtx.
≥
[3] << 3Ë|ÑexTønsInôCtx.
vs
[3];

494 
	}
}

503 
	$AUX_PªC≠C⁄figuøti⁄
()

506 c⁄° 
AUX_Reque°
 
£tM°mCålReque°
 = {

507 .
hódî
 = {

508 .
comm™d
 = 
NATIVE_AUX_WRITE
,

509 .
addªss
 = 
MSTM_CTRL
,

510 .
d©aLí
 = 0

512 .
d©a
 = { 0x04 },

513 .
Àn
 = 4 + 1

515 
	`AUX_RexEnqueueLoˇlReque°
(&
£tM°mCålReque°
, 
NULL
);

516 
	}
}

526 
	$AUX_RexUpd©eSåómP¨ams
(c⁄° 
DP_SåómP¨amëîs
 *
°ªamP¨ams
)

528 
	`mem˝y
(&
ªxTønsInôCtx
.
°ªamP¨amëîs
, 
°ªamP¨ams
, (rexTransInitCtx.streamParameters));

529 
ªxTønsInôCtx
.
°ªamP¨amsVÆid
 = 
åue
;

530 
	}
}

540 
	$AUX_DpRexI§EvítH™dÀr
(
uöt32_t
 
i§Ty≥
)

542 
	`ûog_DP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_GOT_DP_ISR
, 
i§Ty≥
);

544 
i§Ty≥
)

546 
DP_SOURCE_IRQ_ENABLE_FIFO_CS_UNDERFLOW_MASK
:

547 
DP_SOURCE_IRQ_ENABLE_FIFO_CS_OVERFLOW_MASK
:

550 
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_OVERFLOW_MASK
:

551 
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_UNDERFLOW_MASK
:

552 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_AUDIO_ERROR_EVENT
);

557 
	}
}

566 
	$AUX_RexUpd©eMvidVÆue
(
uöt32_t
 
mvid
)

568 
ªxTønsInôCtx
.
°ªamP¨amëîs
.
mvid
 = mvid;

569 
ªxTønsInôCtx
.
°ªamP¨amsVÆid
 = 
åue
;

570 
	}
}

581 
	$RexLtEvítCÆlback
(*
∑øm1
, *
∑øm2
)

583 
	`UTILSM_Po°Evít
(&
ªxTønsCtx
.
°©eMachöeInfo
,

584 (
uöt32_t
)
∑øm1
,

585 
∑øm2
);

586 
	}
}

597 
RexLtSèã
 
	$RexLtDißbÀdH™dÀr
(
RexLtEvít
 
evít
, 
RexLtSèã
 
cuºítSèã
)

599 
RexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

601 if(
evít
 =
REX_LT_EVENT_ENTER
)

603 
	`AUX_Re£tRexTønß˘i⁄H™dÀrSèãs
();

605 if(
evít
 =
REX_LT_ENABLE
)

607 
RexLtEvítD©a
* 
evítD©a
 = (RexLtEvítD©a*Ë
ªxTønsCtx
.
°©eMachöeInfo
.eventData;

608 
	`AUX_RexSëupLökTøöög
(&
evítD©a
->
lökAndSåómP¨amëîs
->
lökP¨amëîs
);

609 
√xtSèã
 = 
RT_CLOCK_RECOVERY
;

613 
√xtSèã
 = 
	`AUX_RexLtComm⁄H™dÀr
(
evít
);

615  
√xtSèã
;

616 
	}
}

627 
RexLtSèã
 
	$RexLtClockRecovîyH™dÀr
(
RexLtEvít
 
evít
, 
RexLtSèã
 
cuºítSèã
)

629 
RexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

631 if(
evít
 =
REX_LT_EVENT_ENTER
)

634 i‡(
evít
 =
REX_LT_READ_ALL_LANES
)

636 
	`RódAŒL™eSètus
();

638 if(
evít
 =
REX_LT_HAVE_CR
 ||Évíà=
REX_LT_HAVE_ALL
)

640 
√xtSèã
 = 
RT_CHANNEL_EQ
;

642 if(
evít
 =
REX_LT_NO_CR
)

644 
	`AUX_RexClockRecovîyNoCr
();

648 
√xtSèã
 = 
	`AUX_RexLtComm⁄H™dÀr
(
evít
);

650  
√xtSèã
;

651 
	}
}

662 
RexLtSèã
 
	$RexLtCh™√lEqH™dÀr
(
RexLtEvít
 
evít
, 
RexLtSèã
 
cuºítSèã
)

664 
RexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

666 if(
evít
 =
REX_LT_EVENT_ENTER
)

668 
ªxTønsInôCtx
.
EquÆiz©i⁄Lo›Cou¡
 = 0;

669 
	`AUX_RexSèπCh™√lEq
();

671 i‡(
evít
 =
REX_LT_READ_ALL_LANES
)

673 
	`RódAŒL™eSètus
();

675 if(
evít
 =
REX_LT_HAVE_CR
)

677 
	`AUX_RexCh™√lEqHaveCr
();

679 if(
evít
 =
REX_LT_NO_CR
)

681 if(
	`AUX_RexCh™√lEqNoCr
())

683 
√xtSèã
 = 
RT_CLOCK_RECOVERY
;

684 
	`AUX_RexSèπCR
();

688 
√xtSèã
 = 
RT_DISABLE
;

691 if(
evít
 =
REX_LT_HAVE_ALL
)

695 
√xtSèã
 = 
RT_LINK_TRAINED
;

699 
√xtSèã
 = 
	`AUX_RexLtComm⁄H™dÀr
(
evít
);

702  
√xtSèã
;

703 
	}
}

714 
RexLtSèã
 
	$RexLtLökTøöedH™dÀr
(
RexLtEvít
 
evít
, 
RexLtSèã
 
cuºítSèã
)

716 
RexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

718 if(
evít
 =
REX_LT_EVENT_ENTER
)

720 
ªxTønsInôCtx
.
EquÆiz©i⁄Lo›Cou¡
 = 0;

721 
	`RexPmSèãSídEvítWôhD©a
(
REX_AUX_MONITOR_LINK_TRAINING_SUCCESS
, (
RexPmEvítD©a
*)&
ªxTønsInôCtx
.
dpC⁄fig
);

723 
	`SubmôN©iveAuxWrôe
(
TRAINING_PATTERN_SET
, 
TPS_0
, 
NULL
);

725 i‡(
evít
 =
REX_LT_READ_ALL_LANES
)

727 
	`RódAŒL™eSètus
();

729 if((
evít
 =
REX_LT_NO_CR
Ë|| (evíà=
REX_LT_HAVE_CR
))

731 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MONITOR_RELINK_TRAINING
);

737 
√xtSèã
 = 
	`AUX_RexLtComm⁄H™dÀr
(
evít
);

740  
√xtSèã
;

741 
	}
}

751 
RexLtSèã
 
	$AUX_RexLtComm⁄H™dÀr
(
RexLtEvít
 
evít
)

753 
RexLtSèã
 
cuºítSèã
 = 
ªxTønsCtx
.
°©eMachöeInfo
.currentState;

754 
RexLtSèã
 
√xtSèã
 = 
cuºítSèã
;

756 
evít
)

758 
REX_LT_DISABLE
:

759 
√xtSèã
 = 
RT_DISABLE
;

762 
REX_LT_EVENT_ENTER
:

763 
REX_LT_EVENT_EXIT
:

764 
REX_LT_ENABLE
:

765 
REX_LT_READ_ALL_LANES
:

766 
	`ûog_DP_COMPONENT_2
(
ILOG_DEBUG
, 
LT_UNHANDLED_EVENT
, 
evít
, 
cuºítSèã
);

769 
REX_LT_NO_CR
:

770 
REX_LT_HAVE_ALL
:

771 
REX_LT_HAVE_CR
:

773 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
LT_INVALID_EVENT
, 
evít
, 
cuºítSèã
);

776  
√xtSèã
;

777 
	}
}

788 
	$GëDpcdL™eSètus
()

790 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_READ_ALL_LANES
);

791 
	}
}

802 
	$RódAŒL™eSètus
()

807 
	`SubmôN©iveAuxRód
(
LANE0_1_STATUS
, 
NUM_READ_LANE_STATUS
, 
RexL™eXYSètusRódRïlyH™dÀr
);

808 
	}
}

817 
	$RexL™eXYSètusRódRïlyH™dÀr
(c⁄° 
AUX_Reque°
 *
ªq
, c⁄° 
AUX_Rïly
 *
ª∂y
)

822 
	`üs£π_DP_COMPONENT_3
(

823 
ªq
->
hódî
.
comm™d
 =
NATIVE_AUX_READ
 &&Ñeq->hódî.
addªss
 =
LANE0_1_STATUS
 &&

824 
ªq
->
hódî
.
d©aLí
 == 5,

825 
AUX_INVALID_REQUEST
, 
__LINE__
, 
ªq
->
hódî
.
addªss
,Ñeq->hódî.
d©aLí
);

827 
L™eSètus
 *
œ√Sètus
 = &
ªxTønsInôCtx
.laneStatus;

828 
	`mem˝y
(
œ√Sètus
->
byãs
, 
ª∂y
->
d©a
, 
NUM_READ_LANE_STATUS
);

830 
	`ûog_DP_COMPONENT_3
(
ILOG_DEBUG
, 
AUX_READ_TRAINING1
, 
œ√Sètus
->
addr
.
a202
,Ü™eSètus->addr.
a203
,Ü™eSètus->addr.
a204
);

831 
	`ûog_DP_COMPONENT_3
(
ILOG_DEBUG
, 
AUX_READ_TRAINING2
, 
œ√Sètus
->
addr
.
a205
,Ü™eSètus->addr.
a206
,Ü™eSètus->addr.
a207
);

834 
ªxTønsInôCtx
.
œ√XYSètusRódCou¡
++;

837 if–
ªxTønsInôCtx
.
œ°L™e0_1_adju°mítReque°
 =
œ√Sètus
->
addr
.
a206
 &&

838 
ªxTønsInôCtx
.
œ°L™e2_3_adju°mítReque°
 =
œ√Sètus
->
addr
.
a207
)

840 
ªxTønsInôCtx
.
ßmeAdju°mítReque°Cou¡î
++;

844 
ªxTønsInôCtx
.
œ°L™e0_1_adju°mítReque°
 = 
œ√Sètus
->
addr
.
a206
;

845 
ªxTønsInôCtx
.
œ°L™e2_3_adju°mítReque°
 = 
œ√Sètus
->
addr
.
a207
;

846 
ªxTønsInôCtx
.
ßmeAdju°mítReque°Cou¡î
 = 0;

849 c⁄° 
boﬁ
 
ÆlL™esHaveCr
 = 
	`AŒL™esHaveClockRecovîy
(
œ√Sètus
);

850 c⁄° 
boﬁ
 
ÆlL™esHaveCe
 = 
	`AŒL™esHaveCh™√lEq
(
œ√Sètus
);

851 c⁄° 
boﬁ
 
ÆlL™esHaveSl
 = 
	`AŒL™esHaveSymbﬁLock
(
œ√Sètus
);

852 c⁄° 
boﬁ
 
ÆlL™esHaveAl
 = 
	`AŒL™esHaveAlignmít
(
œ√Sètus
);

854 if(!
ÆlL™esHaveCr
)

856 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_NO_CR
);

858 if(
ÆlL™esHaveCe
 && 
ÆlL™esHaveSl
 && 
ÆlL™esHaveAl
)

860 
ªxTønsInôCtx
.
œ√XYSètusRódCou¡
 = 0;

861 i‡((
ªxTønsInôCtx
.
œ°L™e0_1_adju°mítReque°
 != 0x66) &&

862 (
ªxTønsInôCtx
.
œ°L™e2_3_adju°mítReque°
 !0x66Ë&& (
	`TEST_GëDügSèã
()))

864 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_LT_NOT_HIGH_SETTING
);

866 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_HAVE_ALL
);

871 
ªxTønsInôCtx
.
œ√XYSètusRódCou¡
 = 0;

872 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_HAVE_CR
);

874 
	}
}

883 
boﬁ
 
	$GëL™eSètusResu…
–
boﬁ
 
œ√0D⁄e
, boﬁ 
œ√1D⁄e
, boﬁ 
œ√2D⁄e
, boﬁ 
œ√3D⁄e
)

885 
boﬁ
 
ªsu…
 = 
Ál£
;

887 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
)

889 
LANE_COUNT_1
:

890 
ªsu…
 = 
œ√0D⁄e
;

892 
LANE_COUNT_2
:

893 
ªsu…
 = 
œ√0D⁄e
 && 
œ√1D⁄e
;

895 
LANE_COUNT_4
:

896 
ªsu…
 = 
œ√0D⁄e
 && 
œ√1D⁄e
 && 
œ√2D⁄e
 && 
œ√3D⁄e
;

898 
LANE_COUNT_INVALID
:

900 
	`iÁû_DP_COMPONENT_2
(
AUX_INVALID_LANE_INDEX
, 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
, 
__LINE__
);

904  
ªsu…
;

905 
	}
}

914 
boﬁ
 
	$SökSuµ‹tsTps3
()

916  
	`RexLoˇlDpcdRód
(
MAX_LANE_COUNT
) & (1 << 6);

917 
	}
}

925 
	$IssueTøöögP©ã∫SëReque°
(

926 
TøöögP©ã∫Sequí˚
 
åaöögP©ã∫
,

927 
boﬁ
 
s¸ambÀE«bÀ
,

928 
AUX_RexRïlyH™dÀr
 
ª∂yH™dÀr
)

930 
ªxTønsInôCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
 = 
åaöögP©ã∫
;

933 
	`DP_SëTøöögP©ã∫Sequí˚
(
åaöögP©ã∫
);

936 c⁄° 
AUX_Reque°
 
£tTpsXReq
 = {

937 .
hódî
 =

939 .
comm™d
 = 
NATIVE_AUX_WRITE
,

940 .
addªss
 = 
TRAINING_PATTERN_SET
,

941 .
d©aLí
 = 0

943 .
d©a
 =

945 (!
s¸ambÀE«bÀ
 << 5Ë| 
åaöögP©ã∫


947 .
Àn
 = 4 + 1

952 
	`DP_Sour˚E«bÀS¸ambÀr
(
s¸ambÀE«bÀ
);

954 
	`AUX_RexEnqueueLoˇlReque°
(&
£tTpsXReq
, 
ª∂yH™dÀr
);

955 
	}
}

965 
	$AUX_RexDriveSëupAndRódL™eSètus
()

967 
	`AUX_RexVﬁègeAndPeSë
();

969 
	`IssueTøöögP©ã∫SëReque°
(
TPS_1
, 
Ál£
, 
NULL
);

974 
	`TIMING_TimîRe£tTimeout
(
ªxTønsCtx
.
åaöögAuxRódI¡îvÆTimî
, 1);

975 
	`TIMING_TimîSèπ
(
ªxTønsCtx
.
åaöögAuxRódI¡îvÆTimî
);

976 
	}
}

989 
boﬁ
 
	$Redu˚CrL™eCou¡
(
L™eCou¡
 
lc
)

991 
boﬁ
 
suc˚ss
 = 
åue
;

993 
lc
)

995 
LANE_COUNT_4
:

996 
LANE_COUNT_2
:

999 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
 = (l¯=(
LANE_COUNT_4
Ë? 
LANE_COUNT_2
 : 
LANE_COUNT_1
);

1000 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 = 
	`RexLoˇlDpcdRód
(
MAX_LINK_RATE
);

1001 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_CHANGE_LC
, 
lc
, 
ªxTønsInôCtx
.
dpC⁄fig
.lc);

1006 
LANE_COUNT_1
:

1007 
LANE_COUNT_INVALID
:

1009 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
AUX_CR_LC_1
);

1010 
suc˚ss
 = 
Ál£
;

1014  (
suc˚ss
);

1015 
	}
}

1025 
	$Tîmö©eLökTøöögSequí˚
()

1029 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_ERROR
,

1030 
AUX_LINK_TRAINING_FAILED
,

1031 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
,

1032 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
,

1033 
ªxTønsInôCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
);

1035 
	`RexPmSèãSídEvítWôhNoD©a
(
REX_AUX_MONITOR_LINK_TRAINING_FAIL
);

1036 
	}
}

1049 
	$Checkf‹MaxVsAndPe
()

1051 
uöt8_t
 
i
 = 0; i < 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
; i++)

1053 
	`ûog_DP_COMPONENT_3
(
ILOG_DEBUG
,

1054 
AUX_VS_PE
,

1055 
i
,

1056 
ªxTønsInôCtx
.
vs
[
i
],

1057 
ªxTønsInôCtx
.
≥
[
i
]);

1059 if(
ªxTønsInôCtx
.
vs
[
i
] =
VOLTAGE_SWING_LEVEL_3
)

1061 
ªxTønsInôCtx
.
åaöögL™eXSë
[
i
] =ÑexTønsInôCtx.åaöögL™eXSë[i] | ( 1 << 
MAX_SWING_REACHED_OFFSET
);

1062 
ªxTønsInôCtx
.
maxVﬁègeSwögRóched
 = 
åue
;

1064 if(
ªxTønsInôCtx
.
≥
[
i
] =
PREEMPHASIS_LEVEL_3
)

1066 
ªxTønsInôCtx
.
åaöögL™eXSë
[
i
] =ÑexTønsInôCtx.åaöögL™eXSë[i] | ( 1 << 
MAX_PREEMPHASIS_REACHED_OFFSET
);

1069 
	}
}

1078 
	$AUX_RexSèπCh™√lEq
()

1080 c⁄° 
uöt8_t
 
åaöögP©ã∫
 =

1081 –(
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 =
BW_1_62_GBPS
)

1082 || (
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 =
BW_2_70_GBPS
)

1083 || (
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 =
BW_5_40_GBPS
 && !
	`SökSuµ‹tsTps3
())Ë? 
TPS_2
 :

1084 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 =
BW_5_40_GBPS
 ? 
TPS_3
 :

1086 
	`üs£π_DP_COMPONENT_2
(
åaöögP©ã∫
 !0xFF, 
AUX_INVALID_BW
, 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
, 
__LINE__
);

1088 
	`£tTøöögEQI¡îvÆ
();

1091 
	`IssueTøöögP©ã∫SëReque°
(
åaöögP©ã∫
, 
Ál£
, 
NULL
);

1093 
	`IssueTøöögL™eXSëReque°
(
ªxTønsInôCtx
.
dpC⁄fig
.
lc
 , 
NULL
);

1095 
	`TIMING_TimîSèπ
(
ªxTønsCtx
.
åaöögAuxRódI¡îvÆTimî
);

1096 
	}
}

1105 
	$AUX_CÀ™upLökCtx
()

1107 
ªxTønsInôCtx
.
maxVﬁègeSwögRóched
 = 
Ál£
;

1108 
ªxTønsInôCtx
.
œ°L™e0_1_adju°mítReque°
 = 0;

1109 
ªxTønsInôCtx
.
œ°L™e2_3_adju°mítReque°
 = 0;

1110 
ªxTønsInôCtx
.
ßmeAdju°mítReque°Cou¡î
 = 0;

1111 
ªxTønsInôCtx
.
œ√XYSètusRódCou¡
 = 0;

1112 
	}
}

1122 
	$£tTøöögEQI¡îvÆ
()

1124 
uöt8_t
 
öãrvÆ
 = 
	`RexLoˇlDpcdRód
(
TRAINING_AUX_RD_INTERVAL
) & 0x7F;

1125 
	`üs£π_DP_COMPONENT_1
(
öãrvÆ
 < 
	`ARRAYSIZE
(
åaöögEQI¡îvÆ
), 
AUX_INVALID_INTERVAL
, interval);

1126 
	`TIMING_TimîRe£tTimeout
(
ªxTønsCtx
.
åaöögAuxRódI¡îvÆTimî
, 
åaöögEQI¡îvÆ
[
öãrvÆ
]);

1127 
	}
}

1142 
	$AUX_RexSëupLökTøöög
(c⁄° 
LökP¨amëîs
 *
lökP¨amëîs
)

1145 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
 = 
lökP¨amëîs
->lc;

1146 
ªxTønsInôCtx
.
dpC⁄fig
.
íh™˚dFømög
 = 
lökP¨amëîs
->
íh™˚dFømögE«bÀ
;

1147 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 = 
lökP¨amëîs
->bw;

1148 
ªxTønsInôCtx
.
dpC⁄fig
.
sscDëe˘ed
 = 
lökP¨amëîs
->
íabÀSsc
;

1150 
ªxTønsInôCtx
.
°ªamP¨amsVÆid
 = 
åue
;

1152 
	`ûog_DP_COMPONENT_3
(
ILOG_USER_LOG
, 
AUX_LINK_PARAMETERS
, 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
,ÑexTønsInôCtx.dpC⁄fig.
lc
,ÑexTønsInôCtx.dpC⁄fig.
íh™˚dFømög
);

1156 
	`bb_t›_AµlyRe£tDpSour˚
(
åue
);

1157 
	`DP_C⁄figuªDpTøns˚ivîRex
(
ªxTønsInôCtx
.
dpC⁄fig
.
bw
,ÑexTønsInôCtx.dpC⁄fig.
lc
);

1158 
	`DP_E«bÀDpSour˚
();

1160 
	`DP_SëL™eCou¡
(
ªxTønsInôCtx
.
dpC⁄fig
.
lc
);

1161 
	`DP_SëMaöLökB™dwidth
(
ªxTønsInôCtx
.
dpC⁄fig
.
bw
);

1162 
	`DP_SëEnh™˚dFømögE«bÀ
(
ªxTønsInôCtx
.
dpC⁄fig
.
íh™˚dFømög
);

1164 
	`DP_Sour˚SëDpTøöögD⁄e
(
Ál£
);

1165 
	`DP_Sour˚E«bÀS¸ambÀr
(
Ál£
);

1167 
	`ûog_DP_COMPONENT_0
(
ILOG_DEBUG
, 
AUX_STARTING_LINK_TRAINING
);

1169 
	`DP_E«bÀPixñGíî©‹
(
Ál£
);

1171 
	`SubmôN©iveAuxRód
(
SINK_COUNT
, 0x01, 
NULL
);

1172 
	`SubmôN©iveAuxRód
(
DEVICE_SERVICE_IRQ_VECTOR
, 0x01, 
NULL
);

1174 
	`WrôeLökC⁄figuøti⁄P¨amëîs
(

1175 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
,

1176 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
,

1177 
ªxTønsInôCtx
.
dpC⁄fig
.
íh™˚dFømög
 );

1181 
	`DP_PªCh¨geMaöLök
(
åue
, 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
);

1182 
	`LEON_TimîWaôMi¸oSec
(20);

1183 
	`DP_PªCh¨geMaöLök
(
Ál£
, 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
);

1185 
	`AUX_RexDriveSëupAndRódL™eSètus
();

1186 
	}
}

1196 
	$AUX_RexSèπCR
()

1198 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
DP_REX_START_CR
,

1199 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
,ÑexTønsInôCtx.dpC⁄fig.
bw
);

1203 
	`bb_t›_AµlyRe£tDpSour˚
(
åue
);

1205 
	`DP_C⁄figuªDpTøns˚ivîRex
(
ªxTønsInôCtx
.
dpC⁄fig
.
bw
,ÑexTønsInôCtx.dpC⁄fig.
lc
);

1206 
	`bb_t›_dpE«bÀDpSour˚A7
();

1207 
	`DP_SëL™eCou¡
(
ªxTønsInôCtx
.
dpC⁄fig
.
lc
);

1208 
	`DP_SëMaöLökB™dwidth
(
ªxTønsInôCtx
.
dpC⁄fig
.
bw
);

1210 
	`WrôeLökC⁄figuøti⁄P¨amëîs
(

1211 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
,

1212 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
,

1213 
ªxTønsInôCtx
.
dpC⁄fig
.
íh™˚dFømög
 );

1217 
	`DP_PªCh¨geMaöLök
(
åue
, 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
);

1218 
	`LEON_TimîWaôMi¸oSec
(20);

1219 
	`DP_PªCh¨geMaöLök
(
Ál£
, 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
);

1221 
	`AUX_RexDriveSëupAndRódL™eSètus
();

1222 
	}
}

1232 
	$AUX_RexClockRecovîyNoCr
()

1234 i‡(
ªxTønsInôCtx
.
maxVﬁègeSwögRóched
 =
åue
 ||

1235 
ªxTønsInôCtx
.
œ√XYSètusRódCou¡
 >
MAX_LANEXY_STATUS_READS
||

1236 
ªxTønsInôCtx
.
ßmeAdju°mítReque°Cou¡î
 >
MAX_ADJUSTMENT_REQUESTS
)

1238 
	`ûog_DP_COMPONENT_3
(
ILOG_MAJOR_ERROR
, 
AUX_RESTART_CR
,

1239 
ªxTønsInôCtx
.
maxVﬁègeSwögRóched
,

1240 
ªxTønsInôCtx
.
œ√XYSètusRódCou¡
,

1241 
ªxTønsInôCtx
.
ßmeAdju°mítReque°Cou¡î
);

1243 
	`AUX_RexCrAdju°R©eOrL™e
();

1249 
	`AUX_RexVﬁègeAndPeSë
();

1250 
	`TIMING_TimîRe£tTimeout
(
ªxTønsCtx
.
åaöögAuxRódI¡îvÆTimî
, 1);

1251 
	`TIMING_TimîSèπ
(
ªxTønsCtx
.
åaöögAuxRódI¡îvÆTimî
);

1253 
	}
}

1263 
	$AUX_RexVﬁègeAndPeSë
()

1265 
	`Adju°VﬁègeSwögAndPªEmphasisL™e0_1
(
ªxTønsInôCtx
.
œ°L™e0_1_adju°mítReque°
);

1266 
	`Adju°VﬁègeSwögAndPªEmphasisL™e2_3
(
ªxTønsInôCtx
.
œ°L™e2_3_adju°mítReque°
);

1267 
	`Checkf‹MaxVsAndPe
();

1268 
	`IssueTøöögL™eXSëReque°
(
ªxTønsInôCtx
.
dpC⁄fig
.
lc
, 
NULL
);

1269 
	}
}

1278 
	$AUX_RexCrAdju°R©eOrL™e
()

1280 
boﬁ
 
adju°Suc˚ss
 = 
åue
;

1282 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
)

1284 
BW_1_62_GBPS
:

1285 
	`ûog_DP_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
AUX_CR_RBR
);

1286 
adju°Suc˚ss
 = 
	`Redu˚CrL™eCou¡
(
ªxTønsInôCtx
.
dpC⁄fig
.
lc
);

1289 
BW_2_70_GBPS
:

1290 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 = 
BW_1_62_GBPS
;

1291 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_CHANGE_BW
, 
BW_2_70_GBPS
, 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
);

1294 
BW_5_40_GBPS
:

1295 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 = 
BW_2_70_GBPS
;

1296 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_CHANGE_BW
, 
BW_5_40_GBPS
, 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
);

1299 
BW_8_10_GBPS
:

1300 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 = 
BW_5_40_GBPS
;

1301 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_CHANGE_BW
, 
BW_8_10_GBPS
, 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
);

1304 
BW_INVALID
:

1306 
	`iÁû_DP_COMPONENT_3
(
AUX_LINK_TRAINING_FAILED
,

1307 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
,

1308 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
,

1309 
ªxTønsInôCtx
.
dpC⁄fig
.
a˘iveTøöögP©ã∫
);

1310 
adju°Suc˚ss
 = 
Ál£
;

1314 i‡(
adju°Suc˚ss
)

1320 
	`AUX_CÀ™upLökCtx
();

1322 c⁄° 
AUX_Reque°
 
˛órTpsXReq
 = {

1323 .
hódî
 = {

1324 .
comm™d
 = 
NATIVE_AUX_WRITE
,

1325 .
addªss
 = 
TRAINING_PATTERN_SET
,

1326 .
d©aLí
 = 0

1328 .
d©a
 = {0x00},

1329 .
Àn
 = 4 + 1

1331 
	`AUX_RexEnqueueLoˇlReque°
(&
˛órTpsXReq
, 
NULL
);

1332 
	`AUX_RexSèπCR
();

1336 
	`Tîmö©eLökTøöögSequí˚
();

1338 
	}
}

1347 
boﬁ
 
	$AUX_RexCh™√lEqNoCr
()

1349 
L™eCou¡
 
cuºítLc
 = 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
;

1350 
boﬁ
 
°¨tFromCr
 = 
åue
;

1352 
cuºítLc
)

1354 
LANE_COUNT_4
:

1355 
LANE_COUNT_2
:

1356 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
 = (
cuºítLc
 =(
LANE_COUNT_4
Ë? 
LANE_COUNT_2
 : 
LANE_COUNT_1
);

1357 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_CHANGE_LC
, 
cuºítLc
, 
ªxTønsInôCtx
.
dpC⁄fig
.
lc
);

1360 
LANE_COUNT_1
:

1361 if(
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 =
BW_1_62_GBPS
)

1363 
°¨tFromCr
 = 
Ál£
;

1364 
	`Tîmö©eLökTøöögSequí˚
();

1368 
MaöLökB™dwidth
 
ﬁdBw
 = 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
;

1370 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 = 
ﬁdBw
 =
BW_8_10_GBPS
 ? 
BW_5_40_GBPS
 :

1371 
ﬁdBw
 =
BW_5_40_GBPS
 ? 
BW_2_70_GBPS
 :

1372 
ﬁdBw
 =
BW_2_70_GBPS
 ? 
BW_1_62_GBPS
 :

1373 
BW_INVALID
;

1375 
	`ûog_DP_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
AUX_CHANGE_BW
, 
ﬁdBw
, 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
);

1378 
LANE_COUNT_INVALID
:

1383 
	`üs£π_DP_COMPONENT_3
((
ªxTønsInôCtx
.
dpC⁄fig
.
bw
 !
BW_INVALID
) &&

1384 (
ªxTønsInôCtx
.
dpC⁄fig
.
lc
 !
LANE_COUNT_INVALID
), 
AUX_LINK_TRAINING_FAILED
,

1385 
ªxTønsInôCtx
.
dpC⁄fig
.
bw
,ÑexTønsInôCtx.dpC⁄fig.
lc
,ÑexTønsInôCtx.dpC⁄fig.
a˘iveTøöögP©ã∫
);

1387  
°¨tFromCr
;

1388 
	}
}

1397 
	$AUX_RexCh™√lEqHaveCr
()

1399 if(
ªxTønsInôCtx
.
EquÆiz©i⁄Lo›Cou¡
 <
MAX_CHANNEL_EQUALIZATION_LOOP_COUNT
)

1401 
ªxTønsInôCtx
.
EquÆiz©i⁄Lo›Cou¡
++;

1403 
	`AUX_RexVﬁègeAndPeSë
();

1404 
	`TIMING_TimîSèπ
(
ªxTønsCtx
.
åaöögAuxRódI¡îvÆTimî
);

1408 
	`RexLtSèãSídEvítWôhNoD©a
(
REX_LT_NO_CR
);

1410 
	}
}

1420 
boﬁ
 
	$AŒL™esHaveClockRecovîy
–c⁄° 
L™eSètus
 *
œ√Sètus
)

1422 
	`ûog_DP_COMPONENT_3
(
ILOG_USER_LOG
, 
AUX_CR_DATA
, 
œ√Sètus
->
addr
.
a202
,Ü™eSètus->addr.
a203
, 
__LINE__
);

1424 
boﬁ
 
œ√0D⁄e
 = 
œ√Sètus
->
addr
.
a202
 & 
LANE0_CR_DONE
;

1425 
boﬁ
 
œ√1D⁄e
 = 
œ√Sètus
->
addr
.
a202
 & 
LANE1_CR_DONE
;

1426 
boﬁ
 
œ√2D⁄e
 = 
œ√Sètus
->
addr
.
a203
 & 
LANE2_CR_DONE
;

1427 
boﬁ
 
œ√3D⁄e
 = 
œ√Sètus
->
addr
.
a203
 & 
LANE3_CR_DONE
;

1429  
	`GëL™eSètusResu…
(
œ√0D⁄e
, 
œ√1D⁄e
, 
œ√2D⁄e
, 
œ√3D⁄e
);

1430 
	}
}

1439 
boﬁ
 
	$AŒL™esHaveCh™√lEq
–c⁄° 
L™eSètus
 *
œ√Sètus
)

1441 
boﬁ
 
œ√0D⁄e
 = 
œ√Sètus
->
addr
.
a202
 & 
LANE0_CE_DONE
;

1442 
boﬁ
 
œ√1D⁄e
 = 
œ√Sètus
->
addr
.
a202
 & 
LANE1_CE_DONE
;

1443 
boﬁ
 
œ√2D⁄e
 = 
œ√Sètus
->
addr
.
a203
 & 
LANE2_CE_DONE
;

1444 
boﬁ
 
œ√3D⁄e
 = 
œ√Sètus
->
addr
.
a203
 & 
LANE3_CE_DONE
;

1446  
	`GëL™eSètusResu…
(
œ√0D⁄e
, 
œ√1D⁄e
, 
œ√2D⁄e
, 
œ√3D⁄e
);

1447 
	}
}

1456 
boﬁ
 
	$AŒL™esHaveSymbﬁLock
–c⁄° 
L™eSètus
 *
œ√Sètus
)

1458 
boﬁ
 
œ√0Lock
 = 
œ√Sètus
->
addr
.
a202
 & 
LANE0_SB_LOCK
;

1459 
boﬁ
 
œ√1Lock
 = 
œ√Sètus
->
addr
.
a202
 & 
LANE1_SB_LOCK
;

1460 
boﬁ
 
œ√2Lock
 = 
œ√Sètus
->
addr
.
a203
 & 
LANE2_SB_LOCK
;

1461 
boﬁ
 
œ√3Lock
 = 
œ√Sètus
->
addr
.
a203
 & 
LANE3_SB_LOCK
;

1463  
	`GëL™eSètusResu…
(
œ√0Lock
, 
œ√1Lock
, 
œ√2Lock
, 
œ√3Lock
);

1464 
	}
}

1473 
boﬁ
 
	$AŒL™esHaveAlignmít
(c⁄° 
L™eSètus
 *
œ√Sètus
)

1475  
œ√Sètus
->
addr
.
a204
 & 
INTERLANE_ALIGN_DONE
;

1476 
	}
}

1486 
	$AUX_Re£tRexTønß˘i⁄H™dÀrSèãs
()

1489 
	`mem£t
(&
ªxTønsInôCtx
, 0, ÑexTransInitCtx);

1491 
	`DP_Re£tDpSour˚
();

1492 
	`DP_Re£tDpTøns˚ivîRex
();

1494 
	`TIMING_TimîSt›
(
ªxTønsCtx
.
åaöögAuxRódI¡îvÆTimî
);

1495 
	}
}

	@components/dp_aux/inc/dp_aux.h

11 #i‚de‡
DP_AUX_H


12 
	#DP_AUX_H


	)

15 
	~<ôy≥s.h
>

18 
	#AUX_REQUEST_COMMAND_WIDTH
 4

	)

19 
	#AUX_REQUEST_ADDRESS_WIDTH
 20

	)

20 
	#AUX_REQUEST_DATA_LEN_WIDTH
 8

21 
	#AUX_REPLY_COMMAND_WIDTH
 4

	)

22 
	#AUX_REPLY_PADDING_WIDTH
 4

	)

23 
	#AUX_MAX_DATA_BURST_SIZE
 16

	)

24 
	#AUX_MAX_REQUEST_SIZE
 20

	)

25 
	#AUX_MIN_REQUEST_SIZE
 3

	)

26 
	#AUX_MAX_REPLY_SIZE
 17

	)

27 
	#AUX_MIN_REPLY_SIZE
 1

	)

30 
	eAUX_Reque°Comm™d


33 
	mI2C_AUX_WRITE
 = 0x0,

34 
	mI2C_AUX_READ
 = 0x1,

35 
	mI2C_AUX_WRITE_STATUS_UPDATE
 = 0x2,

37 
	mI2C_AUX_WRITE_MOT
 = 0x4,

38 
	mI2C_AUX_READ_MOT
 = 0x5,

39 
	mI2C_AUX_WRITE_STATUS_UPDATE_MOT
 = 0x6,

40 
	mAUX_I2C_REQUEST_COMMAND_MAX
 = 
I2C_AUX_WRITE_STATUS_UPDATE_MOT
,

42 
	mNATIVE_AUX_WRITE
 = 0x8,

43 
	mNATIVE_AUX_READ
 = 0x9,

44 
	mAUX_REQUEST_COMMAND_UPPER_BOUND


46 } 
__©åibuã__
((
∑cked
));

48 
	eAUX_RïlyComm™d


51 
	mNATIVE_AUX_ACK
 = 0x0,

52 
	mI2C_AUX_ACK
 = 0x0,

53 
	mAUX_ACK
 = 0x0,

55 
	mNATIVE_AUX_NACK
 = 0x1,

56 
	mNATIVE_AUX_DEFER
 = 0x2,

58 
	mI2C_AUX_NACK
 = 0x4,

60 
	mI2C_AUX_DEFER
 = 0x8,

61 
	mAUX_REPLY_COMMAND_UPPER_BOUND


63 } 
__©åibuã__
((
∑cked
));

65 
	eRexAuxEvítCode


67 
	mAUX_REX_RX
,

68 
	mAUX_REX_TX
,

69 
	mAUX_REX_LOCAL_REQUEST
,

70 
	mAUX_REX_REPLY_TIMEOUT
,

71 
	mAUX_REX_RESET_REQUEST
,

74 
	eLexAuxEvítCode


76 
	mAUX_LEX_RX
,

77 
	mAUX_LEX_RESET_REQUEST
,

80 
	eAuxEº‹Code


82 
	mAUX_REQUEST_FAIL
,

85 
	sAUX_Reque°Hódî


87 
uöt32_t
 
	mcomm™d
: 
AUX_REQUEST_COMMAND_WIDTH
;

88 
uöt32_t
 
	maddªss
: 
AUX_REQUEST_ADDRESS_WIDTH
;

89 
uöt32_t
 
	md©aLí
: 
AUX_REQUEST_DATA_LEN_WIDTH
;

92 
	sAUX_Reque°


98 
AUX_Reque°Hódî
 
	mhódî
;

99 
uöt8_t
 
	md©a
[
AUX_MAX_DATA_BURST_SIZE
];

101 
uöt8_t
 
	mbyãs
[
AUX_MAX_REQUEST_SIZE
];

103 
uöt8_t
 
	mÀn
;

104 } 
__©åibuã__
((
∑cked
));

106 
	sAUX_RïlyHódî


108 
uöt8_t
 
	mcomm™d
: 
AUX_REPLY_COMMAND_WIDTH
;

109 
	muöt8_t
 : 
AUX_REPLY_PADDING_WIDTH
;

112 
	sAUX_Rïly


118 
AUX_RïlyHódî
 
	mhódî
;

119 
uöt8_t
 
	md©a
[
AUX_MAX_DATA_BURST_SIZE
];

121 
uöt8_t
 
	mbyãs
[
AUX_MAX_REPLY_SIZE
];

123 
uöt8_t
 
	mÀn
;

124 } 
__©åibuã__
((
∑cked
));

126 
	sAUX_Reque°AndRïlyC⁄èöî


128 c⁄° 
AUX_Reque°
 *
	mªque°
;

129 c⁄° 
AUX_Rïly
 *
	mª∂y
;

132 (*
	tAUX_RexRïlyH™dÀr
)(

133 c⁄° 
	tAUX_Reque°
 *
	tªq
, c⁄° 
	tAUX_Rïly
 *
	tª∂y
);

134 (*
	tI§CÆlback
)(
	tuöt32_t
 
	ti§Ty≥
);

135 (*
	tAuxReqH™dÀr
)(
	tAUX_Reque°
*, 
	tAUX_Rïly
*);

136 (*
	tAuxEºH™dÀr
)(
	tAuxEº‹Code
);

141 
	$AUX_LexHÆInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

142 
boﬁ
 
	$AUX_GëHo°C⁄√˘edInfo
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

143 
boﬁ
 
	$AUX_GëHo°PowîInfo
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

146 
	$AUX_RexHÆInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

149 
uöt32_t
 
	$AUX_GëC⁄figuªdI¡îru±s
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

150 
	$AUX_E«bÀAuxI¡îru±s
(
uöt32_t
 
ötsToE«bÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

151 
	$AUX_DißbÀAuxI¡îru±s
(
uöt32_t
 
ötsToDißbÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

152 
boﬁ
 
	$AUX_Reque°IsI2c
(c⁄° 
AUX_Reque°
*Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

153 
boﬁ
 
	$AUX_Reque°IsAddªssO∆y
(c⁄° 
AUX_Reque°
 *
ªque°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

154 
boﬁ
 
	$AUX_DDCCIReque°IsAddªssO∆y
(c⁄° 
AUX_Reque°
 *
ªque°
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

155 
uöt8_t
 
	$AUX_GëDe„rC¡
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

156 
	$AUX_C¡æSour˚C⁄√˘Cou¡î
(
boﬁ
 
°©e
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

157 
	$AUX_C¡æSour˚Disc⁄√˘Cou¡î
(
boﬁ
 
°©e
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

158 
uöt8_t
 
	$AUX_Sour˚C⁄√˘Cou¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

159 
uöt8_t
 
	$AUX_Sour˚Disc⁄√˘Cou¡î
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

160 
	$AUX_Sour˚EdgeCou¡îR°
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

164 
	$AUX_LexInô
(
AuxReqH™dÀr
 
auxH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

165 
	$LexPro˚ssAuxReque°
(
LexAuxEvítCode
 
ev
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

168 
	$AUX_RexInô
(
AuxEºH™dÀr
 
îrCÆlback
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

169 
	$RexSãpAuxSèãMachöe
(
RexAuxEvítCode
 
ev
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

170 
	$AUX_RexEnqueueLoˇlReque°
(

171 c⁄° 
AUX_Reque°
 *
ªque°
, 
AUX_RexRïlyH™dÀr
 
ª∂yH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

172 
	$AUX_RexEnqueueI2cOvîAuxRód
(

173 
uöt8_t
 
ªadLí
,

174 
uöt8_t
 
i2cAddr
,

175 
boﬁ
 
ídOfTønß˘i⁄
,

176 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

177 
	$AUX_RexEnqueueI2cOvîAuxWrôe
(

178 c⁄° 
uöt8_t
 *
d©a
,

179 
uöt8_t
 
d©aLí
,

180 
uöt8_t
 
i2cAddr
,

181 
boﬁ
 
ídOfTønß˘i⁄
,

182 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

183 
	$AUX_RexEnqueueDDCCIOvîI2CWrôe
(

184 c⁄° 
uöt8_t
 *
d©a
,

185 
uöt8_t
 
d©aLí
,

186 
uöt8_t
 
i2cAddr
,

187 
boﬁ
 
ídOfTønß˘i⁄
,

188 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

189 
	$AUX_RexEnqueueI2cOvîAuxWrôeRód
(

190 c⁄° 
uöt8_t
 *
wrôeD©a
,

191 
uöt8_t
 
wrôeLí
,

192 
uöt8_t
 
ªadLí
,

193 
uöt8_t
 
i2cAddr
,

194 
boﬁ
 
ídOfTønß˘i⁄
,

195 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

198 
	$HPD_C⁄√˘
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

199 
	$HPD_Disc⁄√˘
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

200 
	$HPD_SídIrq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

201 
	$HPD_SídRïlug
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

204 
boﬁ
 
	$HPD_GëLöeSèã
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

207 
	$AUX_LexI§Inô
(
I§CÆlback
 
ˇŒback
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

208 
	$AUX_LexISR
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

211 
	$AUX_RexI§Inô
(
I§CÆlback
 
ˇŒback
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

212 
	$AUX_RexISR
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

215 
	$DP_LexDißbÀSåómIrq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

216 
	$DP_LexRe°‹eSåómIrq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

217 
	$DP_LexCÀ¨BackupIrq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

	@components/dp_aux/src/aux_cmd.h

11 #i‚de‡
DP_AUX_CMD_H


12 
	#DP_AUX_CMD_H


	)

15 
	~<icmd.h
>

18 
	$ICMD_FUNCTIONS_CREATE
(
DP_AUX_COMPONENT
)

19 #ifde‡
PLUG_TEST


20 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
Aux_icmdAuxTønsGëRódAndWrôeIndex
, "Divide by 20Åo getÅheáctualÇumber\n", )

21 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
Aux_icmdAuxTønsSëRódIndex
, "Index f‹ sèπögÅhêauxÑód (mu° bê®mu…ùÀ o‡20)\n", 
uöt16_t
)

22 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
Aux_icmdRódAuxTøns
, "Dump 20 bytes from savedáuxÅransaction\n", )

23 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
Aux_icmdCÀ¨AuxTøns
, "ClearsÅhe savedáuxÅransactions\n", )

25 
	$ICMD_FUNCTIONS_END
(
DP_AUX_COMPONENT
)

	@components/dp_aux/src/aux_hal.c

25 
	~<iba£.h
>

26 
	~<bb_t›.h
>

27 
	~<bb_chù_a7_ªgs.h
>

28 
	~<À⁄_timîs.h
>

29 
	~<dp_aux_hpd_ªgs.h
>

30 
	~<moduÀ_addªs£s_ªgs.h
>

32 
	~<dp_aux.h
>

33 
	~"aux_loc.h
"

34 
	~"aux_log.h
"

35 #ifde‡
PLUG_TEST


36 
	~<aux_≠i.h
>

38 
	~<u¨t.h
>

40 
	#AUX_SINK_IRQ_ENABLE
 \

42 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED_MASK
 | \

43 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR_MASK
 | \

44 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DEFER_SENT_MASK
 | \

45 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT_MASK
 | \

46 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW_MASK
 | \

47 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_REPLUG_MASK
 | \

48 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_IRQ
 | \

49 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_CONNECT_MASK
 | \

50 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT_MASK
 | \

51 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_MASK
 | \

52 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED_MASK
 | \

53 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET_MASK
 | \

54 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET_MASK
 \

55 )

	)

57 
	#AUX_SINK_IRQ_DISABLE
 \

59 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR_MASK
 | \

60 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DEFER_SENT_MASK
 | \

61 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT_MASK
 | \

62 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_REPLUG_MASK
 | \

63 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_IRQ
 | \

64 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED_MASK
 | \

65 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET_MASK
 | \

66 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET_MASK
 \

67 )

	)

69 
	#AUX_SOURCE_IRQ_ENABLE
 \

71 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED_MASK
 | \

72 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR_MASK
 | \

73 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DEFER_SENT_MASK
 | \

74 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_REPLY_TIMEOUT_MASK
 | \

75 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW_MASK
 | \

76 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_REPLUG_MASK
 | \

77 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_IRQ
 | \

78 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_CONNECT_MASK
 | \

79 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_DISCONNECT_MASK
 | \

80 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_MASK
 | \

81 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED_MASK
 | \

82 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET_MASK
 | \

83 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET_MASK
 \

84 )

	)

86 
	#AUX_SOURCE_IRQ_DISABLE
 \

88 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_GO_BIT_CLEAR_MASK
 | \

89 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DEFER_SENT_MASK
 | \

90 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW_MASK
 | \

91 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_MASK
 | \

92 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_DP_SOURCE_POWERED_MASK
 | \

93 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_RISE_DET_MASK
 | \

94 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_ENABLE_HPD_FALL_DET_MASK
 \

95 )

	)

97 
	#AUX_TRANS_MAX_BUFF_SIZE
 20000

	)

98 
	#AUX_TRANS_INTERVAL
 20

100 

	)

106 vﬁ©ûê
dp_aux_hpd_s
 *
	gaux
;

107 
uöt32_t
 
	gauxI¡îru±s
;

111 
boﬁ
 
	gíabÀAuxTøns
;

113 #ifde‡
PLUG_TEST


116 
uöt16_t
 
	mWrôeIndex
;

117 
boﬁ
 
	mbuf„rOvîÊow
;

118 
uöt8_t
 
	mbuf„r
[
AUX_TRANS_MAX_BUFF_SIZE
];

120 
uöt16_t
 
	mRódIndex
;

121 } 
	gAuxBuf„rInfo
;

125 #ifde‡
PLUG_TEST


126 
AUX_AuxTønsBuffCÀ¨
();

127 
AUX_AuxTønsBuf„rWrôe
(c⁄° 
uöt8_t
* 
å™sD©a
, uöt8_à
å™sD©aSize
);

128 
uöt8_t
* 
AUX_AuxTønsBuf„rRód
();

140 
	$AUX_LexHÆInô
()

142 
	`HPD_LexInô
();

144 
aux
 = (vﬁ©ûê
dp_aux_hpd_s
 *Ë
bb_chù_dp_sök_aux_hpd_s_ADDRESS
;

145 
auxI¡îru±s
 = 
AUX_SINK_IRQ_ENABLE
;

147 
aux
->
aux_˘æ2
.
bf
.
¥e_ch¨ge_Àngth
 = 30;

150 
auxI¡îru±s
 &~
AUX_SINK_IRQ_DISABLE
;

151 
aux
->
úq
.
s
.
íabÀ
.
dw
 = 
auxI¡îru±s
;

153 
	`AUX_C¡æSour˚Disc⁄√˘Cou¡î
(
åue
);

154 
	`AUX_C¡æSour˚C⁄√˘Cou¡î
(
åue
);

156 #ifde‡
PLUG_TEST


157 
	`AUX_AuxTønsBuffCÀ¨
();

159 
	}
}

169 
	$AUX_RexHÆInô
()

171 
	`HPD_RexInô
();

173 
aux
 = (vﬁ©ûê
dp_aux_hpd_s
 *Ë
bb_chù_dp_sour˚_aux_hpd_s_ADDRESS
;

174 
auxI¡îru±s
 = 
AUX_SOURCE_IRQ_ENABLE
;

176 
aux
->
aux_˘æ2
.
bf
.
¥e_ch¨ge_Àngth
 = 30;

179 
auxI¡îru±s
 &~
AUX_SOURCE_IRQ_DISABLE
;

180 
aux
->
úq
.
s
.
íabÀ
.
dw
 = 
auxI¡îru±s
;

182 #ifde‡
PLUG_TEST


183 
	`AUX_AuxTønsBuffCÀ¨
();

185 
	}
}

194 
uöt32_t
 
	$AUX_GëC⁄figuªdI¡îru±s
()

196  
auxI¡îru±s
;

197 
	}
}

206 
	$AUX_E«bÀAuxI¡îru±s
(
uöt32_t
 
ötsToE«bÀ
)

208 c⁄° 
dp_aux_hpd_úq_íabÀ
 
ﬁdIrqs
 = { .
dw
 = 
aux
->
úq
.
s
.
íabÀ
.dw };

209 c⁄° 
dp_aux_hpd_úq_íabÀ
 
hwEn
 = { .
dw
 = 
ötsToE«bÀ
 };

210 c⁄° 
dp_aux_hpd_úq_íabÀ
 
√wIrqs
 = { .
dw
 = 
hwEn
.dw | 
ﬁdIrqs
.dw };

211 
aux
->
úq
.
s
.
íabÀ
.
dw
 = 
√wIrqs
.dw;

213 #ifde‡
PLUG_TEST


214 
íabÀAuxTøns
 = 
	`DP_GëE«bÀAuxTøfficSètus
();

216 
íabÀAuxTøns
 = 
Ál£
;

218 
	}
}

227 
	$AUX_DißbÀAuxI¡îru±s
(
uöt32_t
 
ötsToDißbÀ
)

229 c⁄° 
dp_aux_hpd_úq_íabÀ
 
ﬁdIrqs
 = { .
dw
 = 
aux
->
úq
.
s
.
íabÀ
.dw };

230 c⁄° 
dp_aux_hpd_úq_íabÀ
 
hwDis
 = { .
dw
 = ~
ötsToDißbÀ
};

231 c⁄° 
dp_aux_hpd_úq_íabÀ
 
√wIrqs
 = { .
dw
 = 
hwDis
.dw & 
ﬁdIrqs
.dw };

232 
aux
->
úq
.
s
.
íabÀ
.
dw
 = 
√wIrqs
.dw;

234 
	`AUX_AckPídögAuxI¡îru±s
(
ötsToDißbÀ
);

235 
	}
}

246 
boﬁ
 
	$AUX_GëHo°C⁄√˘edInfo
()

248  ((
aux
->
aux_°©us
.
bf
.
aux_£n£_p_ö_deboun˚
 |áux->aux_°©us.bf.
aux_£n£_p_ö
) ? 0: 1);

249 
	}
}

260 
boﬁ
 
	$AUX_GëHo°PowîInfo
()

262  
aux
->
aux_°©us
.
bf
.
aux_£n£_n_ö
;

263 
	}
}

273 
boﬁ
 
	$AUX_Reque°IsAddªssO∆y
(c⁄° 
AUX_Reque°
 *
ªque°
)

275  
ªque°
->
hódî
.
d©aLí
 == 0;

276 
	}
}

286 
boﬁ
 
	$AUX_DDCCIReque°IsAddªssO∆y
(c⁄° 
AUX_Reque°
 *
ªque°
)

288  ((
ªque°
->
hódî
.
d©aLí
 == 6) || (request->header.dataLen == 0));

289 
	}
}

291 #ifde‡
PLUG_TEST


300 
	$Aux_icmdRódAuxTøns
()

302 
uöt8_t
 * 
±r
 = 
	`AUX_AuxTønsBuf„rRód
();

304 
uöt8_t
 
ödex
 = 0; index < 
AUX_TRANS_INTERVAL
; index += 4)

306 
	`ûog_DP_AUX_COMPONENT_2
(
ILOG_DEBUG_GREEN
, 
AUX_TRANS_REQUEST_BYTE
, (
ödex
/4),

307 
±r
[
ödex
] << 24 |Ötr[index + 1] << 16 |Ötr[index + 2] << 8 |Ötr[index + 3]);

309 
	}
}

319 
	$Aux_icmdAuxTønsGëRódAndWrôeIndex
()

321 
	`ûog_DP_AUX_COMPONENT_2
(
ILOG_DEBUG_GREEN
, 
AUX_TRANS_READ_WRITE_INDEX
, 
AuxBuf„rInfo
.
RódIndex
, AuxBuf„rInfo.
WrôeIndex
);

322 
	}
}

332 
	$Aux_icmdAuxTønsSëRódIndex
(
uöt16_t
 
ödex
)

334 
AuxBuf„rInfo
.
RódIndex
 = 
ödex
;

335 
	`ûog_DP_AUX_COMPONENT_1
(
ILOG_DEBUG_GREEN
, 
AUX_TRANS_SET_READ_INDEX
, 
AuxBuf„rInfo
.
RódIndex
);

336 
	}
}

346 
	$Aux_icmdCÀ¨AuxTøns
()

348 
	`AUX_AuxTønsBuffCÀ¨
();

349 
	}
}

365 
uöt8_t
 
	$AUX_LﬂdTønß˘i⁄
(
uöt8_t
 *
buf
)

367 
uöt8_t
 
rxCou¡
 = 0;

368 c⁄° 
boﬁ
 
isLex
 = 
	`bb_t›_IsDevi˚Lex
();

369 c⁄° 
uöt8_t
 
rxCou¡Mö
 = 
isLex
 ? 
AUX_MIN_REQUEST_SIZE
 : 
AUX_MIN_REPLY_SIZE
;

370 c⁄° 
uöt8_t
 
rxCou¡Max
 = 
isLex
 ? 
AUX_MAX_REQUEST_SIZE
 : 
AUX_MAX_REPLY_SIZE
;

372 
rxCou¡
 <
rxCou¡Max
)

374 c⁄° 
dp_aux_hpd_aux_rx
 
rxReg
 = { .
dw
 = 
aux
->
aux_rx
.dw };

375 
buf
[
rxCou¡
++] = 
rxReg
.
bf
.
rx_d©a
;

376 i‡(
rxReg
.
bf
.
rx_Êag
)

381 #ifde‡
PLUG_TEST


382 if(
íabÀAuxTøns
)

384 
	`AUX_AuxTønsBuf„rWrôe
(
buf
, 
AUX_TRANS_INTERVAL
);

393 if(
rxCou¡Mö
 > 
rxCou¡
 ||ÑxCou¡ > 
rxCou¡Max
)

395 
	`ûog_DP_AUX_COMPONENT_1
(
ILOG_FATAL_ERROR
, 
AUX_RX_INVALID_TRANSACTION_SIZE
, 
rxCou¡
);

396 
rxCou¡
 = 0xFF;

398  
rxCou¡
;

399 
	}
}

412 
AUX_Tønß˘i⁄Sètus
 
	$AUX_WrôeTønß˘i⁄
(c⁄° 
uöt8_t
 *
buf
, uöt8_à
n
)

414 if((
	`bb_t›_IsDevi˚Lex
(Ë&& ((
n
 < 
AUX_MIN_REPLY_SIZE
Ë|| (¿> 
AUX_MAX_REPLY_SIZE
 ))) ||

415 (!
	`bb_t›_IsDevi˚Lex
(Ë&& ((
n
 < 
AUX_MIN_REQUEST_SIZE
Ë|| (¿> 
AUX_MAX_REQUEST_SIZE
 ))))

417 
uöt8_t
 
i
=0; i<
AUX_MAX_REQUEST_SIZE
; i++)

419 
	`ûog_DP_AUX_COMPONENT_2
(
ILOG_FATAL_ERROR
, 
AUX_TX_INVALID_TRANSACTION_DATA
, 
i
, 
buf
[i]);

422 if(
	`bb_t›_IsDevi˚Lex
())

424 
	`LEX_PrötHo°Reque°
();

426 
	`iÁû_DP_AUX_COMPONENT_1
(
AUX_TX_INVALID_TRANSACTION_SIZE
, 
n
);

429 i‡(
aux
->
aux_tx
.
bf
.
go_bô
 == 1)

431 
	`ûog_DP_AUX_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_I2C_STATUS
, 
aux
->
aux_tx
.
bf
.
go_bô
);

432  
AUX_TRANSACTION_TX_BUSY
;

435 #ifde‡
PLUG_TEST


436 if(
íabÀAuxTøns
)

438 
	`AUX_AuxTønsBuf„rWrôe
(
buf
, 
AUX_TRANS_INTERVAL
);

442 
uöt8_t
 
i
 = 0; i < 
n
; i++)

445 if(
i
 =
n
-1)

447 c⁄° 
dp_aux_hpd_aux_tx
 
txReg
 = { .
bf
 = {

448 .
tx_Êag
 = 1,

449 .
go_bô
 = 1,

450 .
tx_d©a
 = 
buf
[
i
] } };

451 
aux
->
aux_tx
.
dw
 = 
txReg
.dw;

455 c⁄° 
dp_aux_hpd_aux_tx
 
txReg
 = { .
bf
 = {

456 .
tx_Êag
 = 0,

457 .
go_bô
 = 0,

458 .
tx_d©a
 = 
buf
[
i
] } };

459 
aux
->
aux_tx
.
dw
 = 
txReg
.dw;

462  
AUX_TRANSACTION_SUCCESS
;

463 
	}
}

472 
uöt32_t
 
	$AUX_GëPídögAuxI¡îru±s
()

474  (
aux
->
úq
.
s
.
≥ndög
.
dw
 &áux->úq.s.
íabÀ
.dw);

475 
	}
}

484 
	$AUX_AckPídögAuxI¡îru±s
(
uöt32_t
 
acks
)

486 
aux
->
úq
.
s
.
≥ndög
.
dw
 = 
acks
;

487 
	}
}

497 
uöt8_t
 
	$AUX_GëDe„rC¡
()

499  
aux
->
aux_°©us
.
bf
.
£¡_de„r_˙t
;

500 
	}
}

511 
boﬁ
 
	$AUX_Re•⁄£TimeUndîUs
(
AUX_Re•⁄£TimeVÆues
 
À·Time
)

513 
uöt32_t
 
ª•⁄£Tmr
 = 
aux
->
aux_°©us
.
bf
.
ª•⁄£_timeout_˙t
;

514  
ª•⁄£Tmr
 > ((
uöt32_t
)(
AUX_RESPONSE_MAX
 - 
À·Time
));

515 
	}
}

526 
boﬁ
 
	$AUX_Reque°IsI2c
(c⁄° 
AUX_Reque°
 *
ªque°
)

528  
ªque°
->
hódî
.
comm™d
 <
AUX_I2C_REQUEST_COMMAND_MAX
;

529 
	}
}

537 
	$AUX_C¡æSour˚C⁄√˘Cou¡î
(
boﬁ
 
°©e
)

539 
aux
->
dp_sour˚_c⁄√˘_dë
.
bf
.
˘æ
 = 
°©e
;

540 
	}
}

548 
	$AUX_C¡æSour˚Disc⁄√˘Cou¡î
(
boﬁ
 
°©e
)

550 
aux
->
dp_sour˚_disc⁄√˘_dë
.
bf
.
˘æ
 = 
°©e
;

551 
	}
}

560 
uöt8_t
 
	$AUX_Sour˚C⁄√˘Cou¡î
()

562  
aux
->
dp_sour˚_c⁄√˘_dë
.
bf
.
˙t
;

563 
	}
}

572 
uöt8_t
 
	$AUX_Sour˚Disc⁄√˘Cou¡î
()

574  
aux
->
dp_sour˚_disc⁄√˘_dë
.
bf
.
˙t
;

575 
	}
}

584 
	$AUX_Sour˚EdgeCou¡îR°
()

587 
aux
->
dp_sour˚_c⁄√˘_dë
.
bf
.
r°
 = 1;

588 
aux
->
dp_sour˚_c⁄√˘_dë
.
bf
.
r°
 = 0;

590 
aux
->
dp_sour˚_disc⁄√˘_dë
.
bf
.
r°
 = 1;

591 
aux
->
dp_sour˚_disc⁄√˘_dë
.
bf
.
r°
 = 0;

592 
	}
}

595 #ifde‡
PLUG_TEST


602 
	$AUX_AuxTønsBuffCÀ¨
()

604 
	`ûog_DP_AUX_COMPONENT_0
(
ILOG_DEBUG_GREEN
, 
AUX_TRANS_BUFF_CLEAR
);

605 
	`mem£t
(&
AuxBuf„rInfo
, 0, (AuxBufferInfo));

606 
	}
}

614 
	$AUX_AuxTønsBuf„rWrôe
(c⁄° 
uöt8_t
* 
å™sD©a
, uöt8_à
å™sD©aSize
)

616 i‡(!
AuxBuf„rInfo
.
buf„rOvîÊow
)

618 
	`mem˝y
(&
AuxBuf„rInfo
.
buf„r
[AuxBuf„rInfo.
WrôeIndex
], 
å™sD©a
, 
å™sD©aSize
);

619 
AuxBuf„rInfo
.
WrôeIndex
 +
AUX_TRANS_INTERVAL
;

621 i‡(
AuxBuf„rInfo
.
WrôeIndex
 >
AUX_TRANS_MAX_BUFF_SIZE
)

623 
	`ûog_DP_AUX_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
AUX_TRANS_BUFF_WRITE_OVERFLOW
);

624 
AuxBuf„rInfo
.
buf„rOvîÊow
 = 
åue
;

627 
	}
}

635 
uöt8_t
 *
	$AUX_AuxTønsBuf„rRód
()

637 
uöt8_t
* 
±r
 = 
NULL
;

638 i‡(
AuxBuf„rInfo
.
RódIndex
 >
AUX_TRANS_MAX_BUFF_SIZE
)

640 
	`ûog_DP_AUX_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
AUX_TRANS_BUFF_READ_OVERFLOW
);

644 
±r
 = &
AuxBuf„rInfo
.
buf„r
[AuxBuf„rInfo.
RódIndex
];

645 
AuxBuf„rInfo
.
RódIndex
 +
AUX_TRANS_INTERVAL
;

647  
±r
;

648 
	}
}

	@components/dp_aux/src/aux_hpd.c

26 
	~<iba£.h
>

27 
	~<dp_aux_hpd_ªgs.h
>

28 
	~<moduÀ_addªs£s_ªgs.h
>

29 
	~<dp_aux.h
>

30 
	~"aux_log.h
"

41 vﬁ©ûê
dp_aux_hpd_s
 *
	ghpd
;

53 
	$HPD_LexInô
()

55 
hpd
 = (vﬁ©ûê
dp_aux_hpd_s
 *)
bb_chù_dp_sök_aux_hpd_s_ADDRESS
;

56 
	}
}

66 
	$HPD_C⁄√˘
()

68 
	`ûog_DP_AUX_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_GEN_HPD_UP
);

69 
hpd
->
hpd_˘æ
.
bf
.
hpd_high
 = 1;

70 
	}
}

80 
	$HPD_Disc⁄√˘
()

82 
	`ûog_DP_AUX_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_GEN_HPD_DOWN
);

83 
hpd
->
hpd_˘æ
.
bf
.
hpd_low
 = 1;

84 
	}
}

94 
	$HPD_SídIrq
()

96 
	`ûog_DP_AUX_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_GEN_HPD_IRQ
);

97 
hpd
->
hpd_˘æ
.
bf
.
hpd_úq
 = 1;

98 
	}
}

108 
	$HPD_SídRïlug
()

110 
	`ûog_DP_AUX_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_GEN_HPD_REPLUG
);

111 
hpd
->
hpd_˘æ
.
bf
.
hpd_ª∂ug
 = 1;

112 
	}
}

121 
	$HPD_RexInô
()

123 
hpd
 = (vﬁ©ûê
dp_aux_hpd_s
 *Ë
bb_chù_dp_sour˚_aux_hpd_s_ADDRESS
;

124 
	}
}

135 
boﬁ
 
	$HPD_GëLöeSèã
()

137  
hpd
->
hpd_°©us
.
bf
.
hpd_löe_ö_deboun˚
 && hpd->hpd_°©us.bf.
hpd_löe_ö
;

138 
	}
}

	@components/dp_aux/src/aux_lexIsr.c

26 
	~<À⁄_timîs.h
>

27 
	~<bb_chù_ªgs.h
>

28 
	~<dp_aux_hpd_ªgs.h
>

29 
	~<dp_aux.h
>

30 
	~<timög_timîs.h
>

31 
	~"aux_loc.h
"

32 
	~"aux_log.h
"

33 
	~<u¨t.h
>

35 
	#AUX_HPD_DEBOUNCE_TIMER
 100

37 
	sAUX_LexI§Ctx


	)

39 
I§CÆlback
 
	mi§CÆlback
;

46 
AUX_LexI§Ctx
 
	gauxLexI§Ctx
;

56 
	$AUX_LexI§Inô
(
I§CÆlback
 
ˇŒback
)

58 
auxLexI§Ctx
.
i§CÆlback
 = 
ˇŒback
;

59 
	}
}

69 
	$AUX_LexISR
()

71 
LEON_TimîVÆueT
 
íãrTime
;

72 
LEON_TimîVÆueT
 
¥eExôTime
;

73 
LEON_TimîVÆueT
 
po°ExôTime
;

75 
íãrTime
 = 
	`LEON_TimîRód
();

78 
uöt32_t
 
auxI¡s
 = 
	`AUX_GëPídögAuxI¡îru±s
();

80 
	`ûog_DP_AUX_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_ENTERING_ISR
, 
auxI¡s
);

82 i‡((
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET_MASK
) ||

83 (
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET_MASK
))

85 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET_MASK
 |

86 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET_MASK
);

87 
auxI¡s
 &~(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DISCONNECT_DET_MASK
 |

88 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_CONNECT_DET_MASK
);

90 c⁄° 
boﬁ
 
ho°C⁄√˘i⁄
 = 
	`AUX_GëHo°C⁄√˘edInfo
();

91 c⁄° 
uöt8_t
 
disc⁄√˘Cou¡
 = 
	`AUX_Sour˚Disc⁄√˘Cou¡î
();

92 c⁄° 
uöt8_t
 
c⁄√˘Cou¡
 = 
	`AUX_Sour˚C⁄√˘Cou¡î
();

93 
	`AUX_Sour˚EdgeCou¡îR°
();

95 
	`ûog_DP_AUX_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
AUX_LEX_SRC_IRQ_COUNT
,

96 
c⁄√˘Cou¡
, 
disc⁄√˘Cou¡
, 
ho°C⁄√˘i⁄
);

98 i‡((!
ho°C⁄√˘i⁄
Ë&& (
disc⁄√˘Cou¡
 > 
c⁄√˘Cou¡
))

100 
	`DP_LexDißbÀSåómIrq
();

102 i‡(
c⁄√˘Cou¡
 > 
disc⁄√˘Cou¡
)

104 
	`DP_LexRe°‹eSåómIrq
();

108 i‡(
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_MASK
)

110 
auxI¡s
 &~
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_MASK
;

111 
auxLexI§Ctx
.
	`i§CÆlback
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_DP_SOURCE_DETECTED_MASK
);

113 c⁄° 
boﬁ
 
ho°C⁄√˘i⁄
 = 
	`AUX_GëHo°C⁄√˘edInfo
();

114 
	`DP_LexCÀ¨BackupIrq
();

115 if(!
ho°C⁄√˘i⁄
)

120 
auxI¡s
 &~
dp_aux_hpd_úq_≥ndög_WRITEMASK
;

121 
	`AUX_DißbÀAuxI¡îru±s
(
dp_aux_hpd_úq_≥ndög_WRITEMASK
);

125 
	`AUX_E«bÀAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_OVERFLOW_MASK
 |

126 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED_MASK
);

127 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_DP_SOURCE_DETECTED_MASK
);

131 i‡((
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW_MASK
) != 0)

135 
	`ûog_DP_AUX_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
AUX_RX_FIFO_OVERFLOW
);

136 
auxI¡s
 &~
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW_MASK
;

137 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_OVERFLOW_MASK
);

139 i‡(
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED_MASK
)

141 
	`LexPro˚ssAuxReque°
(
AUX_LEX_RX
);

142 
auxI¡s
 &~
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED_MASK
;

143 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_ENABLE_RX_FIFO_PKT_RECEIVED_MASK
);

146 
¥eExôTime
 = 
	`LEON_TimîRód
();

148 
	`ûog_DP_AUX_COMPONENT_2
(
ILOG_DEBUG
,

149 
AUX_LEX_ISR_TIME
,

150 
	`LEON_TimîCÆcU£cDiff
(
íãrTime
, 
¥eExôTime
),

151 
	`LEON_TimîCÆcU£cDiff
(
po°ExôTime
, 
íãrTime
));

152 
	`üs£π_DP_AUX_COMPONENT_2
(
auxI¡s
 =0, 
AUX_UNHANDLED_INTERRUPT
, 
__LINE__
,áuxInts);

153 
po°ExôTime
 = 
	`LEON_TimîRód
();

154 
	}
}

	@components/dp_aux/src/aux_loc.h

11 #i‚de‡
DP_AUX_LOC_H


12 
	#DP_AUX_LOC_H


	)

15 
	~<iba£.h
>

16 
	~<dp_aux.h
>

20 
	#AUX_HEADER_INIT
 0xF

21 

	)

24 
	eAUX_Tønß˘i⁄Sètus


26 
	mAUX_TRANSACTION_SUCCESS
,

27 
	mAUX_TRANSACTION_TIMED_OUT
,

28 
	mAUX_TRANSACTION_NEW_REQUEST
,

29 
	mAUX_TRANSACTION_TX_BUSY
,

30 
	mAUX_TRANSACTION_RX_BUSY


33 
	eAUX_Re•⁄£TimeVÆues


35 
	mAUX_RESPONSE_LEFT_5US
 = 375,

36 
	mAUX_RESPONSE_LEFT_10US
 = 750,

37 
	mAUX_RESPONSE_LEFT_20US
 = 1500,

38 
	mAUX_RESPONSE_LEFT_30US
 = 2250,

39 
	mAUX_RESPONSE_MAX
 = 22500

42 
	sAUX_Reque°AndRexRïlyH™dÀr


44 
AUX_Reque°
 
	mªque°
;

45 
AUX_RexRïlyH™dÀr
 
	mªxRïlyH™dÀr
;

50 
boﬁ
 
	$AUX_Re•⁄£TimeUndîUs
(
AUX_Re•⁄£TimeVÆues
 
À·Time
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

52 
uöt8_t
 
	$AUX_LﬂdTønß˘i⁄
(
uöt8_t
 *
buf
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

53 
AUX_Tønß˘i⁄Sètus
 
	$AUX_WrôeTønß˘i⁄
(c⁄° 
uöt8_t
 *
buf
, uöt8_à
n
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

54 
uöt32_t
 
	$AUX_GëPídögAuxI¡îru±s
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

55 
	$AUX_AckPídögAuxI¡îru±s
(
uöt32_t
 
acks
Ë
	`__©åibuã__
((
	`£˘i⁄
(".ftext")));

58 
	$HPD_LexInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

59 
	$HPD_RexInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

62 
	$LEX_PrötHo°Reque°
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

	@components/dp_aux/src/aux_log.h

11 #i‚de‡
AUX_LOG_H


12 
	#AUX_LOG_H


	)

15 
	~<¥oje˘_comp⁄íts.h
>

16 
	~<ûog.h
>

23 
	$ILOG_CREATE
(
DP_AUX_COMPONENT
)

24 
	`ILOG_ENTRY
(
AUX_RX_INVALID_TRANSACTION_SIZE
, "RECEIVED AUX TRANSACTION WITH INVALID SIZE %d !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n")

25 
	`ILOG_ENTRY
(
AUX_RECEIVE_TRANSACTION
, "Receivedán AUXÅransaction withÜength %d B, first word = 0x%x\n")

26 
	`ILOG_ENTRY
(
AUX_RX_HEX_DUMP
, "RX Word %d = 0x%x\n")

27 
	`ILOG_ENTRY
(
AUX_TX_HEX_DUMP
, "TX Word %d = 0x%x\n")

28 
	`ILOG_ENTRY
(
AUX_TX_INVALID_TRANSACTION_SIZE
, "RequestedÅoÅransmit AUXÅransaction with invalid size %d\n")

29 
	`ILOG_ENTRY
(
AUX_TX_INVALID_TRANSACTION_DATA
, "Tx Request Buffer[%d]: 0%x\n")

30 
	`ILOG_ENTRY
(
AUX_HOST_REQUEST
, "Host Request Buffer[%d]: 0%x\n")

31 
	`ILOG_ENTRY
(
AUX_TX_BUSY
, "AttemptedÅoÅransmit whenálreadyÅransmitting\n")

32 
	`ILOG_ENTRY
(
AUX_SEND_TRANSACTION
, "Sentán AUXÅransaction withÜength %d B, first word = 0x%x\n")

33 
	`ILOG_ENTRY
(
AUX_INVALID_REQUEST_COMMAND
, "InvalidÑequest command 0x%xátÜine %d\n")

34 
	`ILOG_ENTRY
(
AUX_DEFERRING
, "DeferringÑequest forÅheÑequest header 0x%x,áddress 0x%x,Üength 0x%x\n")

35 
	`ILOG_ENTRY
(
AUX_DEFERRING_STAT
, "DeferringÑequestÅookÅime %d by 0x%x\n")

36 
	`ILOG_ENTRY
(
AUX_DEFER_OVER
, "Aux defer overÅhe maximumámount %d. RestartÜinkÅraining\n")

37 
	`ILOG_ENTRY
(
AUX_REQUEST_FIFO_OVERFLOW
, "Request FIFO overflow Handler = 0x%x\n")

38 
	`ILOG_ENTRY
(
AUX_STATE_CHANGE
, "Changing state from %dÅo %d\n")

39 
	`ILOG_ENTRY
(
AUX_RETRY_MAX
, "AUXÑeply maximumÑetrial failed\n")

40 
	`ILOG_ENTRY
(
AUX_LOADED_LOCAL_REQUEST
, "LoadedÜocalÑequest:Üength = %d B, first word = 0x%x\n")

41 
	`ILOG_ENTRY
(
AUX_GEN_HPD_IRQ
, "Generating HPD IRQÉvent\n")

42 
	`ILOG_ENTRY
(
AUX_GEN_HPD_REPLUG
, "Generating HPDÑeplugÉvent\n")

43 
	`ILOG_ENTRY
(
AUX_GEN_HPD_UP
, "Generating HPD upÉvent\n")

44 
	`ILOG_ENTRY
(
AUX_GEN_HPD_DOWN
, "Generating HPD downÉvent\n")

45 
	`ILOG_ENTRY
(
AUX_ENTERING_ISR
, "Entering AUX ISR: %x\n")

46 
	`ILOG_ENTRY
(
AUX_LEX_ISR_TIME
, "Time spent in AUX ISR = %d us;Åime between AUX ISRs = %d us\n")

47 
	`ILOG_ENTRY
(
AUX_RX_FIFO_OVERFLOW
, "RX FIFO overflow\n")

48 
	`ILOG_ENTRY
(
AUX_UNHANDLED_INTERRUPT
, "Unhandled interruptátÜine %d: unhandled interrupts = 0x%x\n")

49 
	`ILOG_ENTRY
(
AUX_ISR_TIME
, "Time spent in AuxISR = %d us\n")

50 
	`ILOG_ENTRY
(
AUX_DDCCI_WRITE_REQUEST
, "DDC/CI WriteÑequest with size : %d\n")

51 
	`ILOG_ENTRY
(
AUX_I2C_READ_REQUEST
, "I2CÑeadÑequest with size : %d\n")

52 
	`ILOG_ENTRY
(
AUX_I2C_WRITE_REQUEST
, "AUX I2C WriteÑequest with size : %d\n")

53 
	`ILOG_ENTRY
(
AUX_I2C_STATUS
, "Go bit status for I2C : %d\n")

54 
	`ILOG_ENTRY
(
AUX_TRANS_REQUEST_BYTE
, "Word = %d | Data = 0x%.8x\n")

55 
	`ILOG_ENTRY
(
AUX_TRANS_READ_WRITE_INDEX
, "Read Index = %d | Write Index = %d\n")

56 
	`ILOG_ENTRY
(
AUX_I2C_DEBUG
, "I2C writeátÜine : %d\n")

57 
	`ILOG_ENTRY
(
AUX_LEX_SRC_IRQ_COUNT
, "Source connect count = %d source disconnect count = %d Aux status = %d\n")

58 
	`ILOG_ENTRY
(
AUX_RX_RETRY_MAX
, "AUXÑeceive maximumÑetrail failed\n")

59 
	`ILOG_ENTRY
(
AUX_TRANS_BUFF_WRITE_OVERFLOW
, "AUXÅrans buff is full,Çot saving more data\n")

60 
	`ILOG_ENTRY
(
AUX_TRANS_BUFF_READ_OVERFLOW
, "AUXÅransÑead buff hasÑeachedÉnd ofÅhe buffer\n")

61 
	`ILOG_ENTRY
(
AUX_TRANS_SET_READ_INDEX
, "SettingÅheÇewÑead indexÅo %d\n")

62 
	`ILOG_ENTRY
(
AUX_TRANS_BUFF_CLEAR
, "ClearingÅhe AUXÅrans buffer\n")

64 
	`ILOG_ENTRY
(
AUX_NATIVE_WRITE_REQ_SRC
, "Source Native Req WR %d bytesÅo 0x%x\n")

65 
	`ILOG_ENTRY
(
AUX_NATIVE_READ_REQ_SRC
, "Source Native Req RD %d bytes from 0x%x\n")

66 
	`ILOG_ENTRY
(
AUX_NATIVE_ACK_SNK
, "Sink Native AUX_ACK - %d bytes\n")

67 
	`ILOG_ENTRY
(
AUX_NATIVE_HEX_DUMP
, "" )

68 
	`ILOG_ENTRY
(
AUX_I2C_WRITE_REQ_SRC
, "Source I2C Req WR %d bytesÅo 0x%x MOT=%d\n")

69 
	`ILOG_ENTRY
(
AUX_I2C_READ_REQ_SRC
, "Source I2C Req RD %d bytesÅo 0x%x MOT=%d\n")

70 
	`ILOG_ENTRY
(
AUX_I2C_ACK_SNK
, "Sink I2C AUX_ACK - %d bytes\n")

71 
	`ILOG_ENTRY
(
AUX_I2C_HEX_DUMP
, "")

72 
	`ILOG_ENTRY
(
AUX_NATIVE_DEFER
, "Sink Native AUX_DEFER - 0 bytes\n")

74 
	$ILOG_END
(
DP_AUX_COMPONENT
, 
ILOG_MAJOR_EVENT
)

	@components/dp_aux/src/aux_rexIsr.c

26 
	~<À⁄_timîs.h
>

27 
	~<bb_chù_ªgs.h
>

28 
	~<dp_aux.h
>

29 
	~"aux_loc.h
"

30 
	~"aux_log.h
"

35 
	sAUX_RexI§Ctx


37 
I§CÆlback
 
	mi§CÆlback
;

45 
AUX_RexI§Ctx
 
	gauxRexI§Ctx
;

56 
	$AUX_RexI§Inô
(
I§CÆlback
 
ˇŒback
)

58 
auxRexI§Ctx
.
i§CÆlback
 = 
ˇŒback
;

59 
	}
}

69 
	$AUX_RexISR
()

71 c⁄° 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

74 
uöt32_t
 
auxI¡s
 = 
	`AUX_GëPídögAuxI¡îru±s
();

76 
	`ûog_DP_AUX_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_ENTERING_ISR
, 
auxI¡s
);

78 i‡(
auxI¡s
 & 
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED
)

80 
	`RexSãpAuxSèãMachöe
(
AUX_REX_RX
);

81 
auxI¡s
 &~
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED
;

82 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SOURCE_AUX_HPD_IRQ_PENDING_RX_FIFO_PKT_RECEIVED
);

84 i‡(
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR
)

86 
	`RexSãpAuxSèãMachöe
(
AUX_REX_TX
);

87 
auxI¡s
 &~
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR
;

88 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_GO_BIT_CLEAR
);

90 i‡(
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT
)

92 
	`RexSãpAuxSèãMachöe
(
AUX_REX_REPLY_TIMEOUT
);

93 
auxI¡s
 &~
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT
;

94 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_REPLY_TIMEOUT
);

100 i‡(
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT
)

102 
auxRexI§Ctx
.
	`i§CÆlback
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT
);

103 
auxI¡s
 &~
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT
;

104 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_DISCONNECT
);

106 i‡(
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_CONNECT
)

108 
auxRexI§Ctx
.
	`i§CÆlback
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_CONNECT
);

109 
auxI¡s
 &~
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_CONNECT
;

110 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_CONNECT
);

112 i‡(
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_IRQ
)

114 
auxRexI§Ctx
.
	`i§CÆlback
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_IRQ
);

115 
auxI¡s
 &~
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_IRQ
;

116 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_IRQ
);

118 i‡(
auxI¡s
 & 
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_REPLUG
)

120 
auxRexI§Ctx
.
	`i§CÆlback
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_REPLUG
);

121 
auxI¡s
 &~
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_REPLUG
;

122 
	`AUX_AckPídögAuxI¡îru±s
(
BB_CHIP_DP_SINK_AUX_HPD_IRQ_PENDING_HPD_REPLUG
);

125 
	`üs£π_DP_AUX_COMPONENT_2
(
auxI¡s
 =0, 
AUX_UNHANDLED_INTERRUPT
, 
__LINE__
,áuxInts);

126 
	`ûog_DP_AUX_COMPONENT_1
(
ILOG_DEBUG
,

127 
AUX_ISR_TIME
,

128 
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()));

129 
	}
}

	@components/dp_aux/src/aux_rx.c

25 
	~<À⁄_timîs.h
>

26 
	~<timög_timîs.h
>

27 
	~<bb_t›.h
>

28 
	~<ˇŒback.h
>

29 
	~<dp_aux.h
>

30 
	~"aux_loc.h
"

31 
	~"aux_log.h
"

35 
	#MAX_DEFER_CNT
 7

36 

	)

38 
	sLexAuxC⁄ãxt


40 
AUX_Reque°
 
	mªque°
;

41 
AUX_Rïly
 
	mª∂y
;

42 
boﬁ
 
	movîMaxDe„r
;

47 
	$LexLﬂdReque°
(
AUX_Reque°
*Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

48 
	$LexSídRïlyUp°ªam
(c⁄° 
AUX_Rïly
*Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

49 
	$LexDoRe£t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

50 
boﬁ
 
	$SameReque°
(c⁄° 
AUX_Reque°
*, c⁄° AUX_Reque°*Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

51 
	$LexAuxReqRïlyInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

52 
boﬁ
 
	$LexAuxRïlyBuf„rEm±y
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

53 
	$AUX_C›yReque°
(
AUX_Reque°
 *
d°
,

54 c⁄° 
AUX_Reque°
 *
§c
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

55 
	$AUX_LexOvîCuºítI§H™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

56 
	$AUX_LexOvîCuºítI¡CÆlback
(*
∑øm1
, *
∑øm2
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

62 
LexAuxC⁄ãxt
 
ÀxCtx
;

63 
AuxReqH™dÀr
 
auxH™dÀr
;

75 
	$AUX_LexInô
(
AuxReqH™dÀr
 
h™dÀr
)

77 
auxH™dÀr
 = 
h™dÀr
;

78 
	`AUX_LexOvîCuºítI§H™dÀr
();

80 
	`GpioRegi°îIrqH™dÀr
(
GPIO_CONN_DP_OVER_CURRENT
, 
GPIO_IRQ_RISING_OR_FALLING_EDGE
, 
AUX_LexOvîCuºítI§H™dÀr
);

82 
	`GpioE«bÀIrq
(
GPIO_CONN_DP_OVER_CURRENT
);

83 
	}
}

96 
	$LexPro˚ssAuxReque°
(
LexAuxEvítCode
 
ev
)

98 i‡(
ev
 =
AUX_LEX_RX
)

100 
boﬁ
 
de„r
 = 
åue
;

101 
uöt8_t
 
de„rC¡
 = 
	`AUX_GëDe„rC¡
();

103 if(!
	`AUX_Re•⁄£TimeUndîUs
(
AUX_RESPONSE_LEFT_10US
))

105 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

106 
AUX_Reque°
 
ªq
;

108 
	`LexLﬂdReque°
(&
ªq
);

110 if(
ªq
.
Àn
 != 0xFF)

112 i‡(!
	`SameReque°
(&
ÀxCtx
.
ªque°
, &
ªq
Ë|| 
	`LexAuxRïlyBuf„rEm±y
())

114 
	`AUX_C›yReque°
(&
ÀxCtx
.
ªque°
, &
ªq
);

116 c⁄° 
uöt8_t
 
cmd
 = 
ÀxCtx
.
ªque°
.
hódî
.
comm™d
;

117 
	`üs£π_DP_AUX_COMPONENT_2
(

118 
cmd
 < 
AUX_REQUEST_COMMAND_UPPER_BOUND
 && cmd != 3 && cmd != 7,

119 
AUX_INVALID_REQUEST_COMMAND
, 
cmd
, 
__LINE__
);

121 
	`auxH™dÀr
(&
ÀxCtx
.
ªque°
, &ÀxCtx.
ª∂y
);

124 
boﬁ
 
undî5us
 = 
	`AUX_Re•⁄£TimeUndîUs
(
AUX_RESPONSE_LEFT_5US
);

125 
boﬁ
 
de„rC¡Up
 = (
de„rC¡
 < 
	`AUX_GëDe„rC¡
());

127 if–!
undî5us
 &&

128 !
de„rC¡Up
 &&

129 !
	`LexAuxRïlyBuf„rEm±y
())

131 
	`LexSídRïlyUp°ªam
(&
ÀxCtx
.
ª∂y
);

132 
	`LexAuxReqRïlyInô
();

133 
de„r
 = 
Ál£
;

134 
ÀxCtx
.
ovîMaxDe„r
 = 
Ál£
;

138 
	`ûog_DP_AUX_COMPONENT_3
(
ILOG_DEBUG
, 
AUX_DEFERRING
,

139 
ÀxCtx
.
ªque°
.
hódî
.
comm™d
,ÜexCtx.ªque°.hódî.
addªss
,ÜexCtx.ªque°.hódî.
d©aLí
);

140 
	`ûog_DP_AUX_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_DEFERRING_STAT
,

141 
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()),

142 (
undî5us
 << 8Ë| (
	`LexAuxRïlyBuf„rEm±y
(Ë<< 4Ë| 
de„rC¡Up
);

148 
	`LexAuxReqRïlyInô
();

153 
	`ûog_DP_AUX_COMPONENT_2
(
ILOG_DEBUG
, 
AUX_DEFERRING_STAT
, 0, 1 << 12);

156 if(
de„r
 && (
de„rC¡
 > 
MAX_DEFER_CNT
Ë&& !
ÀxCtx
.
ovîMaxDe„r
)

160 
	`ûog_DP_AUX_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
AUX_DEFER_OVER
, 
de„rC¡
);

161 
ÀxCtx
.
ovîMaxDe„r
 = 
åue
;

163 
	`bb_t›_Re£tAuxHpd
(
åue
);

164 
	`bb_t›_Re£tAuxHpd
(
Ál£
);

165 
	`LexDoRe£t
();

168 i‡(
ev
 =
AUX_LEX_RESET_REQUEST
)

170 
	`LexDoRe£t
();

172 
	}
}

181 
	$LEX_PrötHo°Reque°
()

183 
uöt8_t
 
i
=0; i<
AUX_MAX_REQUEST_SIZE
; i++)

185 
	`ûog_DP_AUX_COMPONENT_2
(
ILOG_FATAL_ERROR
, 
AUX_HOST_REQUEST
, 
i
, 
ÀxCtx
.
ªque°
.
byãs
[i]);

187 
	}
}

201 
boﬁ
 
	$SameReque°
(c⁄° 
AUX_Reque°
 *
r1
, c⁄° AUX_Reque° *
r2
)

203  (
r1
->
Àn
 =0 || 
r2
->À¿=0 ||Ñ1->À¿!r2->ÀnË? 
Ál£
 :

204 
	`memeq
(
r1
->
byãs
, 
r2
->byãs,Ñ1->
Àn
);

205 
	}
}

214 
	$LexLﬂdReque°
(
AUX_Reque°
 *
ªq
)

216 
ªq
->
Àn
 = 
	`AUX_LﬂdTønß˘i⁄
‘eq->
byãs
);

217 
	}
}

227 
	$LexSídRïlyUp°ªam
(c⁄° 
AUX_Rïly
 *
ª∂y
)

229 
	`AUX_WrôeTønß˘i⁄
(
ª∂y
->
byãs
,Ñïly->
Àn
);

230 
	}
}

239 
	$LexDoRe£t
()

241 
	`mem£t
(&
ÀxCtx
, 0, (lexCtx));

242 
	`LexAuxReqRïlyInô
();

243 
	}
}

252 
	$LexAuxReqRïlyInô
()

254 
ÀxCtx
.
ªque°
.
hódî
.
comm™d
 = 
AUX_HEADER_INIT
;

255 
ÀxCtx
.
ª∂y
.
hódî
.
comm™d
 = 
AUX_HEADER_INIT
;

256 
	}
}

265 
boﬁ
 
	$LexAuxRïlyBuf„rEm±y
()

267  
ÀxCtx
.
ª∂y
.
hódî
.
comm™d
 =
AUX_HEADER_INIT
;

268 
	}
}

278 
	$AUX_C›yReque°
(
AUX_Reque°
 *
d°
, c⁄° AUX_Reque° *
§c
)

280 
	`mem˝y
(
d°
, 
§c
, (*dst));

281 
	}
}

290 
	$AUX_LexOvîCuºítI§H™dÀr
()

292 
	`CALLBACK_Run
(
AUX_LexOvîCuºítI¡CÆlback
, 
NULL
, NULL);

293 
	}
}

302 
	$AUX_LexOvîCuºítI¡CÆlback
(*
∑øm1
, *
∑øm2
)

304 i‡(!
	`GpioRód
(
GPIO_CONN_DP_OVER_CURRENT
))

306 
	`ILOG_i°©us
(
ISTATUS_DP_OVER_CURRENT_WARNING
, 0);

310 
	`ILOG_i°©us
(
ISTATUS_DP_OVER_CURRENT_RECOVER
, 0);

312 
	}
}

	@components/dp_aux/src/aux_tx.c

25 
	~<À⁄_timîs.h
>

26 
	~<bb_t›.h
>

27 
	~<ififo.h
>

28 
	~<ˇŒback.h
>

29 
	~<dp_aux.h
>

30 
	~"aux_loc.h
"

31 
	~"aux_log.h
"

32 
	~"u¨t.h
"

35 
	#MAX_RETRIES_AUX_REX
 10

36 
	#REX_LOCAL_REQUEST_FIFO_DEPTH
 21

37 

	)

40 
	eRexAuxSèã


42 
	mREX_REQUEST_PENDING
,

43 
	mREX_REPLY_PENDING
,

44 
	m_NUM_STATES_AUX_REX


47 
	sRexAuxC⁄ãxt


49 
AUX_Reque°
 
	mªque°
;

50 
AUX_Rïly
 
	mª∂y
;

51 
AUX_RexRïlyH™dÀr
 
	mªxRïlyH™dÀr
;

52 
RexAuxSèã
 
	m°©e
;

53 
uöt8_t
 
	mªåyCou¡
;

54 
uöt8_t
 
	mªque°TryCou¡
;

57 
	$RexAuxSèã
 (*
	tRexAuxSèãFn
)(
	tRexAuxEvítCode
);

61 
	$RexAuxEvítCÆlback
(*
∑øm1
, *
∑øm2
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

62 
RexAuxSèã
 
	$RexAuxSu≥rH™dÀr
(
RexAuxEvítCode
 
ev
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

63 
boﬁ
 
	$RexLﬂdLoˇlReque°AndRexRïlyH™dÀr
(

64 
AUX_Reque°
 *
ªq
, 
AUX_RexRïlyH™dÀr
 *
ªxRïlyH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

65 
boﬁ
 
	$RexSídReque°Down°ªam
(c⁄° 
AUX_Reque°
*Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

66 
boﬁ
 
	$RexSídWrôeSètusUpd©e
(c⁄° 
AUX_Reque°
*Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

67 
	$RexDoRe£t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

68 
RexAuxSèã
 
	$RexReque°PídögH™dÀr
(
RexAuxEvítCode
 
ev
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

69 
RexAuxSèã
 
	$RexRïlyPídögH™dÀr
(
RexAuxEvítCode
 
ev
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

71 
	$Cª©eI2cOvîAuxWrôeReque°
(

72 
AUX_Reque°
 *
ªq
,

73 c⁄° 
uöt8_t
 *
d©a
,

74 
uöt8_t
 
wrôeLí
,

75 
uöt8_t
 
i2cAddr
,

76 
boﬁ
 
ídOfTønß˘i⁄
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

78 
	$Cª©eI2cOvîAuxRódReque°
(

79 
AUX_Reque°
 *
ªq
, 
uöt8_t
 
ªadLí
, uöt8_à
i2cAddr
, 
boﬁ
 
ídOfTønß˘i⁄
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

81 
RexAuxSèã
 
	$AUX_RexH™dÀRxMsg
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

82 
boﬁ
 
	$AUX_I2cWrôeRequúesSètusUpd©e
(c⁄° 
AUX_Rïly
 *
ª∂y
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

83 
boﬁ
 
	$AUX_RïlyIsDe„r
(c⁄° 
AUX_Rïly
*Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

84 
boﬁ
 
	$AUX_I2cRïlyHasD©aByãM
(c⁄° 
AUX_Rïly
*Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

85 
	$AUX_RexOvîCuºítI§H™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

86 
	$AUX_RexOvîCuºítI¡CÆlback
(*
∑øm1
, *
∑øm2
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

92 c⁄° 
RexAuxSèãFn
 
°©eTabÀ
[
_NUM_STATES_AUX_REX
] = {

93 [
REX_REQUEST_PENDING
] = 
RexReque°PídögH™dÀr
,

94 [
REX_REPLY_PENDING
] = 
RexRïlyPídögH™dÀr


95 
	}
};

97 
RexAuxC⁄ãxt
 
	gªxCtx
;

98 
AuxEºH™dÀr
 
	gîrH™dÀr
;

100 
	$IFIFO_CREATE_FIFO_LOCK_UNSAFE
(
loˇlReque°
, 
AUX_Reque°AndRexRïlyH™dÀr
, 
REX_LOCAL_REQUEST_FIFO_DEPTH
)

112 
	$AUX_RexInô
(
AuxEºH™dÀr
 
îrCÆlback
)

114 
îrH™dÀr
 = 
îrCÆlback
;

115 
	`AUX_RexOvîCuºítI§H™dÀr
();

117 
	`GpioRegi°îIrqH™dÀr
(
GPIO_CONN_DP_OVER_CURRENT
, 
GPIO_IRQ_RISING_OR_FALLING_EDGE
, 
AUX_RexOvîCuºítI§H™dÀr
);

119 
	`GpioE«bÀIrq
(
GPIO_CONN_DP_OVER_CURRENT
);

120 
	}
}

130 
	$AUX_RexEnqueueDDCCIOvîI2CWrôe
(

131 c⁄° 
uöt8_t
 *
d©a
,

132 
uöt8_t
 
d©aLí
,

133 
uöt8_t
 
i2cAddr
,

134 
boﬁ
 
ídOfTønß˘i⁄
,

135 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
)

141 
AUX_Reque°
 
i2cAddrO∆yWrôeReq
;

142 c⁄° 
boﬁ
 
eŸ
 = 
d©aLí
 =0 && 
ídOfTønß˘i⁄
;

144 
	`Cª©eI2cOvîAuxWrôeReque°
(&
i2cAddrO∆yWrôeReq
, 
NULL
, 0, 
i2cAddr
, 
eŸ
);

145 
	`AUX_RexEnqueueLoˇlReque°
(&
i2cAddrO∆yWrôeReq
, 
ªxRïlyH™dÀr
);

147 i‡(
d©aLí
 > 0)

150 
uöt8_t
 
d©aOff£t
 = 0;

151 
AUX_Reque°
 
ddcAddWrôeReq
;

152 
	`Cª©eI2cOvîAuxWrôeReque°
(

153 &
ddcAddWrôeReq
, 
d©a
 + 
d©aOff£t
, 1, 
i2cAddr
, 
Ál£
);

154 
	`AUX_RexEnqueueLoˇlReque°
(&
ddcAddWrôeReq
, 
ªxRïlyH™dÀr
);

157 
d©aOff£t
 = 1;

158 
d©aOff£t
 < 
d©aLí
)

160 
AUX_Reque°
 
i2cWrôeReq
;

161 c⁄° 
uöt8_t
 
ånD©aLí
 = 
	`MIN
(16, 
d©aLí
 - 
d©aOff£t
);

163 
	`Cª©eI2cOvîAuxWrôeReque°
(

164 &
i2cWrôeReq
, 
d©a
 + 
d©aOff£t
, 
ånD©aLí
, 
i2cAddr
, 
Ál£
);

165 
	`AUX_RexEnqueueLoˇlReque°
(&
i2cWrôeReq
, 
ªxRïlyH™dÀr
);

167 
d©aOff£t
 +
ånD©aLí
;

170 i‡(
ídOfTønß˘i⁄
)

172 
AUX_Reque°
 
i2cAddrO∆yWrôeReq
;

174 
	`Cª©eI2cOvîAuxWrôeReque°
(&
i2cAddrO∆yWrôeReq
, 
NULL
, 0, 
i2cAddr
, 
åue
);

175 
	`AUX_RexEnqueueLoˇlReque°
(&
i2cAddrO∆yWrôeReq
, 
ªxRïlyH™dÀr
);

179 
	}
}

189 
	$AUX_RexEnqueueI2cOvîAuxWrôe
(

190 c⁄° 
uöt8_t
 *
d©a
,

191 
uöt8_t
 
d©aLí
,

192 
uöt8_t
 
i2cAddr
,

193 
boﬁ
 
ídOfTønß˘i⁄
,

194 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
)

200 
AUX_Reque°
 
i2cAddrO∆yWrôeReq
;

201 c⁄° 
boﬁ
 
eŸ
 = 
d©aLí
 =0 && 
ídOfTønß˘i⁄
;

203 
	`Cª©eI2cOvîAuxWrôeReque°
(&
i2cAddrO∆yWrôeReq
, 
NULL
, 0, 
i2cAddr
, 
eŸ
);

204 
	`AUX_RexEnqueueLoˇlReque°
(&
i2cAddrO∆yWrôeReq
, 
ªxRïlyH™dÀr
);

207 i‡(
d©aLí
 > 0)

209 
uöt8_t
 
d©aOff£t
 = 0;

210 
d©aOff£t
 < 
d©aLí
)

212 
AUX_Reque°
 
i2cWrôeReq
;

213 c⁄° 
uöt8_t
 
ånD©aLí
 = 
	`MIN
(16, 
d©aLí
 - 
d©aOff£t
);

215 
	`Cª©eI2cOvîAuxWrôeReque°
(

216 &
i2cWrôeReq
, 
d©a
 + 
d©aOff£t
, 
ånD©aLí
, 
i2cAddr
, 
Ál£
);

217 
	`AUX_RexEnqueueLoˇlReque°
(&
i2cWrôeReq
, 
ªxRïlyH™dÀr
);

219 
d©aOff£t
 +
ånD©aLí
;

222 i‡(
ídOfTønß˘i⁄
)

224 
AUX_Reque°
 
i2cAddrO∆yWrôeReq
;

226 
	`Cª©eI2cOvîAuxWrôeReque°
(&
i2cAddrO∆yWrôeReq
, 
NULL
, 0, 
i2cAddr
, 
åue
);

227 
	`AUX_RexEnqueueLoˇlReque°
(&
i2cAddrO∆yWrôeReq
, 
ªxRïlyH™dÀr
);

230 
	`ûog_DP_AUX_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
AUX_I2C_WRITE_REQUEST
, 
d©aLí
);

231 
	}
}

241 
	$AUX_RexEnqueueI2cOvîAuxRód
(

242 
uöt8_t
 
ªadLí
, uöt8_à
i2cAddr
, 
boﬁ
 
ídOfTønß˘i⁄
, 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
)

248 
AUX_Reque°
 
i2cAddrO∆yRódReq
;

249 c⁄° 
boﬁ
 
eŸ
 = 
ªadLí
 =0 && 
ídOfTønß˘i⁄
;

251 
	`Cª©eI2cOvîAuxRódReque°
(&
i2cAddrO∆yRódReq
, 0, 
i2cAddr
, 
eŸ
);

252 
	`AUX_RexEnqueueLoˇlReque°
(&
i2cAddrO∆yRódReq
, 
ªxRïlyH™dÀr
);

255 i‡(
ªadLí
 > 0)

257 
uöt8_t
 
ªadOff£t
 = 0;

258 
ªadOff£t
 < 
ªadLí
)

260 
AUX_Reque°
 
i2cRódReq
;

261 c⁄° 
uöt8_t
 
ånRódLí
 = 
	`MIN
(
AUX_MAX_DATA_BURST_SIZE
, 
ªadLí
 - 
ªadOff£t
);

263 
	`Cª©eI2cOvîAuxRódReque°
(&
i2cRódReq
, 
ånRódLí
, 
i2cAddr
, 
Ál£
);

264 
	`AUX_RexEnqueueLoˇlReque°
(&
i2cRódReq
, 
ªxRïlyH™dÀr
);

266 
ªadOff£t
 +
ånRódLí
;

269 i‡(
ídOfTønß˘i⁄
)

271 
AUX_Reque°
 
i2cAddrO∆yRódReq
;

273 
	`Cª©eI2cOvîAuxRódReque°
(&
i2cAddrO∆yRódReq
, 0, 
i2cAddr
, 
åue
);

274 
	`AUX_RexEnqueueLoˇlReque°
(&
i2cAddrO∆yRódReq
, 
ªxRïlyH™dÀr
);

278 
	}
}

288 
	$AUX_RexEnqueueI2cOvîAuxWrôeRód
(

289 c⁄° 
uöt8_t
 *
wrôeD©a
,

290 
uöt8_t
 
wrôeLí
,

291 
uöt8_t
 
ªadLí
,

292 
uöt8_t
 
i2cAddr
,

293 
boﬁ
 
ídOfTønß˘i⁄
,

294 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
)

296 
	`AUX_RexEnqueueI2cOvîAuxWrôe
(
wrôeD©a
, 
wrôeLí
, 
i2cAddr
, 
Ál£
, 
ªxRïlyH™dÀr
);

297 
	`AUX_RexEnqueueI2cOvîAuxRód
(
ªadLí
, 
i2cAddr
, 
ídOfTønß˘i⁄
, 
ªxRïlyH™dÀr
);

298 
	}
}

311 
	$RexSãpAuxSèãMachöe
(
RexAuxEvítCode
 
evít
)

314 
uöt32_t
 
evítx
 = 
evít
;

316 
	`CALLBACK_Run
(
RexAuxEvítCÆlback
, (*)
evítx
, 
NULL
);

317 
	}
}

326 
	$AUX_RexEnqueueLoˇlReque°
(

327 c⁄° 
AUX_Reque°
 *
ªque°
, 
AUX_RexRïlyH™dÀr
 
ªxRïlyH™dÀr
)

329 
	`üs£π_DP_AUX_COMPONENT_1
(!
	`loˇlReque°_fifoFuŒ
(), 
AUX_REQUEST_FIFO_OVERFLOW
, (
uöt32_t
)
ªxRïlyH™dÀr
);

330 c⁄° 
AUX_Reque°AndRexRïlyH™dÀr
 
ªque°AndRexRïlyH™dÀr
 = {

331 .
ªque°
 = *request,

332 .
ªxRïlyH™dÀr
 =ÑexReplyHandler

335 
	`loˇlReque°_fifoWrôe
(
ªque°AndRexRïlyH™dÀr
);

342 
	`RexSãpAuxSèãMachöe
(
AUX_REX_LOCAL_REQUEST
);

343 
	}
}

355 
	$RexAuxEvítCÆlback
(*
∑øm1
, *
∑øm2
)

357 
RexAuxEvítCode
 
evít
 = (RexAuxEvítCode)
∑øm1
;

359 c⁄° 
RexAuxSèã
 
√xtSèã
 = 
°©eTabÀ
[
ªxCtx
.
°©e
](
evít
);

361 i‡(
√xtSèã
 !
ªxCtx
.
°©e
)

363 
	`ûog_DP_AUX_COMPONENT_2
(
ILOG_MINOR_EVENT
, 
AUX_STATE_CHANGE
, 
ªxCtx
.
°©e
, 
√xtSèã
);

366 
ªxCtx
.
°©e
 = 
√xtSèã
;

367 
	}
}

385 
RexAuxSèã
 
	$RexReque°PídögH™dÀr
(
RexAuxEvítCode
 
ev
)

387 
RexAuxSèã
 
√xtSèã
 = 
REX_REQUEST_PENDING
;

389 i‡(
ev
 =
AUX_REX_LOCAL_REQUEST


390 && 
	`RexLﬂdLoˇlReque°AndRexRïlyH™dÀr
(&
ªxCtx
.
ªque°
, &ªxCtx.
ªxRïlyH™dÀr
))

392 c⁄° 
uöt8_t
 
cmd
 = 
ªxCtx
.
ªque°
.
hódî
.
comm™d
;

393 
	`üs£π_DP_AUX_COMPONENT_1
(

394 (
cmd
 < 
AUX_REQUEST_COMMAND_UPPER_BOUND
) && (cmd != 3) && (cmd != 7),

395 
AUX_INVALID_REQUEST_COMMAND
,

396 
__LINE__
);

399 
	`RexSídReque°Down°ªam
(&
ªxCtx
.
ªque°
);

400 
√xtSèã
 = 
REX_REPLY_PENDING
;

404 
√xtSèã
 = 
	`RexAuxSu≥rH™dÀr
(
ev
);

406  
√xtSèã
;

407 
	}
}

425 
RexAuxSèã
 
	$RexRïlyPídögH™dÀr
(
RexAuxEvítCode
 
evít
)

427 
RexAuxSèã
 
√xtSèã
 = 
REX_REPLY_PENDING
;

429 i‡(
evít
 =
AUX_REX_REPLY_TIMEOUT
)

431 i‡(
ªxCtx
.
ªåyCou¡
 >
MAX_RETRIES_AUX_REX
)

433 
	`ûog_DP_AUX_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
AUX_RETRY_MAX
);

434 
	`îrH™dÀr
(
AUX_REQUEST_FAIL
);

435 
ªxCtx
.
ªåyCou¡
 = 0;

436 
√xtSèã
 = 
REX_REQUEST_PENDING
;

440 
ªxCtx
.
ªåyCou¡
++;

441 
	`ûog_DP_AUX_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_I2C_DEBUG
, 
__LINE__
);

442 i‡(!
	`RexSídReque°Down°ªam
(&
ªxCtx
.
ªque°
))

444 
	`îrH™dÀr
(
AUX_REQUEST_FAIL
);

445 
ªxCtx
.
ªåyCou¡
 = 0;

446 
√xtSèã
 = 
REX_REQUEST_PENDING
;

450 i‡(
evít
 =
AUX_REX_RX
)

452 
√xtSèã
 = 
	`AUX_RexH™dÀRxMsg
();

456 
√xtSèã
 = 
	`RexAuxSu≥rH™dÀr
(
evít
);

459  
√xtSèã
;

460 
	}
}

469 
RexAuxSèã
 
	$RexAuxSu≥rH™dÀr
(
RexAuxEvítCode
 
ev
)

471 
RexAuxSèã
 
√xtSèã
 = 
ªxCtx
.
°©e
;

472 
ev
)

474 
AUX_REX_RX
:

475 
AUX_REX_LOCAL_REQUEST
:

476 
AUX_REX_REPLY_TIMEOUT
:

480 
AUX_REX_RESET_REQUEST
:

481 
	`bb_t›_Re£tAuxHpd
(
åue
);

482 
	`bb_t›_Re£tAuxHpd
(
Ál£
);

483 
	`RexDoRe£t
();

484 
√xtSèã
 = 
REX_REQUEST_PENDING
;

487 
AUX_REX_TX
:

491  
√xtSèã
;

492 
	}
}

501 
boﬁ
 
	$RexLﬂdLoˇlReque°AndRexRïlyH™dÀr
(

502 
AUX_Reque°
 *
ªq
, 
AUX_RexRïlyH™dÀr
 *
ªxRïlyH™dÀr
)

504 i‡(!
	`loˇlReque°_fifoEm±y
())

508 
AUX_Reque°AndRexRïlyH™dÀr
 
ªque°AndRexRïlyH™dÀr
 = 
	`loˇlReque°_fifoRód
();

509 *
ªq
 = 
ªque°AndRexRïlyH™dÀr
.
ªque°
;

510 *
ªxRïlyH™dÀr
 = 
ªque°AndRexRïlyH™dÀr
.rexReplyHandler;

511 
	`ûog_DP_AUX_COMPONENT_2
(

512 
ILOG_DEBUG
,

513 
AUX_LOADED_LOCAL_REQUEST
,

514 
ªq
->
Àn
,

515 (
ªq
->
Àn
 > 3 ? (ªq->
byãs
[3] << 0) : 0) |

516 (
ªq
->
Àn
 > 2 ? (ªq->
byãs
[2] << 8) : 0) |

517 (
ªq
->
Àn
 > 1 ? (ªq->
byãs
[1] << 16) : 0) |

518 (
ªq
->
Àn
 > 0 ? (ªq->
byãs
[0] << 24) : 0) );

519  
åue
;

521  
Ál£
;

522 
	}
}

532 
boﬁ
 
	$RexSídReque°Down°ªam
(c⁄° 
AUX_Reque°
 *
ªque°
)

540  
	`AUX_WrôeTønß˘i⁄
(
ªque°
->
byãs
,Ñeque°->
Àn
Ë=
AUX_TRANSACTION_SUCCESS
;

541 
	}
}

550 
boﬁ
 
	$RexSídWrôeSètusUpd©e
(c⁄° 
AUX_Reque°
 *
ªque°
)

552 
AUX_Reque°
 
wsuReque°
 = *
ªque°
;

553 
wsuReque°
.
hódî
.
comm™d
 = 
I2C_AUX_WRITE_STATUS_UPDATE_MOT
;

554 
wsuReque°
.
hódî
.
d©aLí
 = 0;

555 
wsuReque°
.
Àn
 = 4;

556 
	`ûog_DP_AUX_COMPONENT_1
(
ILOG_DEBUG
, 
AUX_I2C_DEBUG
, 
__LINE__
);

557  
	`RexSídReque°Down°ªam
(&
wsuReque°
);

558 
	}
}

567 
	$RexDoRe£t
()

569 
	`mem£t
(&
ªxCtx
, 0, (rexCtx));

575 
	`loˇlReque°_fifoFlush
();

576 
	}
}

585 
	$Cª©eI2cOvîAuxWrôeReque°
(

586 
AUX_Reque°
 *
ªq
,

587 c⁄° 
uöt8_t
 *
d©a
,

588 
uöt8_t
 
wrôeLí
,

589 
uöt8_t
 
i2cAddr
,

590 
boﬁ
 
ídOfTønß˘i⁄
)

592 
wrôeLí
 = 
	`MIN
(wrôeLí, 
AUX_MAX_DATA_BURST_SIZE
);

594 
ªq
->
hódî
.
comm™d
 = 
ídOfTønß˘i⁄
 ? 
I2C_AUX_WRITE
 : 
I2C_AUX_WRITE_MOT
;

595 
ªq
->
hódî
.
addªss
 = 
i2cAddr
;

596 
ªq
->
hódî
.
d©aLí
 = 
wrôeLí
 > 0 ? writeLen - 1 : 0;

597 i‡(
d©a
)

599 
	`mem˝y
(&
ªq
->
d©a
, d©a, 
wrôeLí
);

603 
ªq
->
Àn
 = 
wrôeLí
 > 0 ? 3 + 1 + writeLen : 3;

604 
	}
}

613 
	$Cª©eI2cOvîAuxRódReque°
(

614 
AUX_Reque°
 *
ªq
, 
uöt8_t
 
ªadLí
, uöt8_à
i2cAddr
, 
boﬁ
 
ídOfTønß˘i⁄
)

616 
ªq
->
hódî
.
comm™d
 = 
ídOfTønß˘i⁄
 ? 
I2C_AUX_READ
 : 
I2C_AUX_READ_MOT
;

617 
ªq
->
hódî
.
addªss
 = 
i2cAddr
;

618 
ªq
->
hódî
.
d©aLí
 = 
ªadLí
 > 0 ?ÑeadLen - 1 : 0;

621 
ªq
->
Àn
 = 
ªadLí
 > 0 ? 3 + 1 : 3;

622 
	}
}

631 
RexAuxSèã
 
	$AUX_RexH™dÀRxMsg
()

633 
RexAuxSèã
 
√xtSèã
 = 
REX_REPLY_PENDING
;

635 
ªxCtx
.
ª∂y
.
Àn
 = 
	`AUX_LﬂdTønß˘i⁄
‘exCtx.ª∂y.
byãs
);

637 i‡(
ªxCtx
.
ªque°TryCou¡
 >
MAX_RETRIES_AUX_REX
)

639 
	`ûog_DP_AUX_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
AUX_RX_RETRY_MAX
);

640 
	`îrH™dÀr
(
AUX_REQUEST_FAIL
);

641 
ªxCtx
.
ªque°TryCou¡
 = 0;

642 
√xtSèã
 = 
REX_REQUEST_PENDING
;

643  
√xtSèã
;

646 if(
ªxCtx
.
ª∂y
.
Àn
 <
AUX_MAX_REPLY_SIZE
)

648 c⁄° 
uöt8_t
 
cmd
 = 
ªxCtx
.
ªque°
.
hódî
.
comm™d
;

649 
	`üs£π_DP_AUX_COMPONENT_1
(
cmd
 < 
AUX_REQUEST_COMMAND_UPPER_BOUND
 && cmd != 3 && cmd != 7,

650 
AUX_INVALID_REQUEST_COMMAND
,

651 
__LINE__
);

657 i‡((
ªxCtx
.
ªque°
.
hódî
.
comm™d
 =
I2C_AUX_WRITE
Ë&& 
	`AUX_I2cWrôeRequúesSètusUpd©e
(&ªxCtx.
ª∂y
))

662 
ªxCtx
.
ªque°TryCou¡
++;

663 
	`RexSídWrôeSètusUpd©e
(&
ªxCtx
.
ªque°
);

665 i‡(
	`AUX_RïlyIsDe„r
(&
ªxCtx
.
ª∂y
))

670 
ªxCtx
.
ªque°TryCou¡
++;

672 
	`RexSídReque°Down°ªam
(&
ªxCtx
.
ªque°
);

676 i‡(
ªxCtx
.
ªxRïlyH™dÀr
)

678 
ªxCtx
.
	`ªxRïlyH™dÀr
(&ªxCtx.
ªque°
, &ªxCtx.
ª∂y
);

680 
ªxCtx
.
ªque°TryCou¡
 = 0;

681 
√xtSèã
 = 
REX_REQUEST_PENDING
;

683 
	`RexSãpAuxSèãMachöe
(
AUX_REX_LOCAL_REQUEST
);

689 
ªxCtx
.
ªque°TryCou¡
++;

691 
	`RexSídReque°Down°ªam
(&
ªxCtx
.
ªque°
);

695 
	`mem£t
(&
ªxCtx
.
ª∂y
, 0, (rexCtx.reply));

697  
√xtSèã
;

698 
	}
}

706 
boﬁ
 
	$AUX_I2cWrôeRequúesSètusUpd©e
(c⁄° 
AUX_Rïly
 *
ª∂y
)

710  
ª∂y
->
hódî
.
comm™d
 =
I2C_AUX_DEFER
 || 
	`AUX_I2cRïlyHasD©aByãM
(reply);

711 
	}
}

723 
boﬁ
 
	$AUX_RïlyIsDe„r
(c⁄° 
AUX_Rïly
 *
ª∂y
)

725  
ª∂y
->
hódî
.
comm™d
 =
NATIVE_AUX_DEFER
 ||Ñïly->hódî.comm™d =
I2C_AUX_DEFER
;

726 
	}
}

734 
boﬁ
 
	$AUX_I2cRïlyHasD©aByãM
(c⁄° 
AUX_Rïly
 *
ª∂y
)

736  
ª∂y
->
hódî
.
comm™d
 =
I2C_AUX_ACK
 &&Ñïly->
Àn
 > 1;

737 
	}
}

746 
	$AUX_RexOvîCuºítI§H™dÀr
()

748 
	`CALLBACK_Run
(
AUX_RexOvîCuºítI¡CÆlback
, 
NULL
, NULL);

749 
	}
}

758 
	$AUX_RexOvîCuºítI¡CÆlback
(*
∑øm1
, *
∑øm2
)

760 i‡(!
	`GpioRód
(
GPIO_CONN_DP_OVER_CURRENT
))

762 
	`ILOG_i°©us
(
ISTATUS_DP_OVER_CURRENT_WARNING
, 0);

766 
	`ILOG_i°©us
(
ISTATUS_DP_OVER_CURRENT_RECOVER
, 0);

768 
	}
}

	@components/dp_stream/inc/dp_stream.h

11 #i‚de‡
DP_STREAM_H


12 
	#DP_STREAM_H


	)

15 
	~<iba£.h
>

16 
	~<bb_t›_dp.h
>

19 
	#DISPARITY_ERROR
 
åue


	)

20 
	#NIT_ERROR
 
Ál£


	)

21 
	#LANE0
 0

	)

22 
	#LANE1
 1

	)

23 
	#LANE2
 2

	)

24 
	#LANE3
 3

	)

26 (*
	tI§CÆlback
)(
	tuöt32_t
 
	ti§Ty≥
);

28 
	sDP_SåómP¨amëîs


31 
uöt32_t
 
mvid
;

32 
uöt32_t
 
nvid
;

35 
uöt32_t
 
tŸÆ
: 16;

36 
uöt32_t
 
°¨t
: 16;

37 
uöt32_t
 
width
: 16;

38 
uöt32_t
 
pﬁ¨ôy
: 1;

39 
uöt32_t
 
sync_width
: 15;

40 } 
h
;

43 
uöt32_t
 
tŸÆ
: 16;

44 
uöt32_t
 
°¨t
: 16;

45 
uöt32_t
 
height
: 16;

46 
uöt32_t
 
pﬁ¨ôy
: 1;

47 
uöt32_t
 
sync_width
: 15;

48 } 
v
;

51 
uöt16_t
 
y_⁄ly
: 1;

52 
uöt16_t
 
°îeo
: 2;

53 
uöt16_t
 
öt_tŸÆ
: 1;

54 
uöt16_t
 
cﬁ‹
: 7;

55 
uöt16_t
 
˛k_sync
: 1;

56 } 
misc
;

58 
uöt16_t
 
cs_pkt_Àngth
;

59 
uöt8_t
 
tu_size
;

60 
uöt32_t
 
Âs
;

61 } 
	`__©åibuã__
((
∑cked
));

65 
	eTøöögP©ã∫Sequí˚


67 
TPS_0
 = 0x0,

68 
TPS_1
 = 0x1,

69 
TPS_2
 = 0x2,

70 
TPS_3
 = 0x3,

71 
CPAT2520_1
 = 0x4,

72 
CPAT2520_2p
 = 0x5,

73 
CPAT2520_2m
 = 0x6,

74 
CPAT2520_3
 = 0x7,

75 
PLTPAT
 = 0x8,

76 
PRBS_7


79 
	eAUX_LexMßFaûCode


81 
LEX_MSA_VALID
,

82 
LEX_MSA_YCBCR422
,

83 
LEX_MSA_10BPC
,

84 
LEX_MSA_VALID_SYMBOLS
,

85 
LEX_MSA_ALIGN_ERROR
,

86 
LEX_MSA_NEED_REFRESH
,

89 
	eDP_LexCom¥essi⁄R©io


91 
LEX_COMP_RATIO_DEFAULT
,

92 
LEX_COMP_RATIO_2_1
 = 2,

93 
LEX_COMP_RATIO_4_1
 = 4,

94 
LEX_COMP_RATIO_6_1
 = 6,

99 
	$DP_LexHÆInô
(
I§CÆlback
 
ˇŒback
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

100 
	$DP_LexISRInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

101 
	$DP_LexDißbÀSåómIrq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

102 
	$DP_LexCÀ¨PídögSåómIrq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

103 
	$DP_LexRe°‹eSåómIrq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

104 
	$DP_LexCÀ¨BackupIrq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

105 
	$DP_LexDpISR
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

106 
	$DP_Re£tDpSök
(
boﬁ
 
ª£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

107 
boﬁ
 
	$DP_DpSökInRe£t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

108 
boﬁ
 
	$DP_DpEncodîInRe£t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

109 
	$DP_Re£tEncodî
(
boﬁ
 
ª£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

110 
	$DP_Re£tSökAndEncodî
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

111 
	$DP_InôDpTøns˚ivîLex
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

112 
	$DP_C⁄figuªDpTøns˚ivîLex
((*
ˇŒback
)(
boﬁ
)Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

113 
	$DP_Re£tDpTøns˚ivîLex
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

114 
boﬁ
 
	$DP_GŸClockRecovîy
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

115 
boﬁ
 
	$DP_GŸSymbﬁLock
(
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

116 
	$DP_E«bÀL™eAlig√r
(
boﬁ
 
í
, 
TøöögP©ã∫Sequí˚
 
çs
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

117 
boﬁ
 
	$DP_GŸL™eAlignmít
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

118 
	$DP_SökE«bÀSåómExåa˘‹
(
boﬁ
 
í
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

119 
	$DP_SökCÀ¨CxFifoOvîÊowSèts
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

120 
boﬁ
 
	$DP_SökSåómExåa˘‹E«bñd
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

121 
	$DP_SökE«bÀDes¸ambÀr
(
boﬁ
 
í
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

122 
	$DP_E«bÀSåómEncodî
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

123 
	$DP_GëEncodîRódyF‹Re£t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

124 
boﬁ
 
	$DP_Sour˚InRe£t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

125 
	$DP_LexDr›CsPçPkt
(
boﬁ
 
dr›
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

126 
	$DP_C⁄figuªEncodîExåa˘‹
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

127 
boﬁ
 
	$DP_IsAudioMuãd
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

128 
uöt8_t
 
	$DP_GëMaudVÆue
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

129 
	$DP_LexE«bÀCou¡ögFømes
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

130 
uöt32_t
 
	$DP_LexFømeCou¡
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

131 
	$DP_LexGëVÆidSåómP¨amëîs
(
DP_SåómP¨amëîs
 *
∑øms
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

132 
	$DP_SökE«bÀDebugMß
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

133 
	$DP_SëAPBtoAXImode
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

134 
boﬁ
 
	$DP_CheckLöeEº‹C¡
(
uöt16_t
 
îrThªshﬁd
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

135 
boﬁ
 
	$DP_GçEº‹C¡
(
uöt16_t
 
îrThªshﬁd
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

136 
	$DP_LexGëDpFrq
((*
ˇŒback
)(
uöt32_t
)Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

137 
	$DP_LexC⁄figRxCdr
(
boﬁ
 
sscOn
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

138 
AUX_LexMßFaûCode
 
	$DP_LexIsMßVÆid
(
uöt32_t
 
Âs
, uöt32_à
symbﬁClk
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

139 
	$DP_LexE«bÀSpdDr›Pkt
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

140 
	$DP_Re£tEº‹C¡
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

141 
	$DP_8b10bRe£tEº‹C¡
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

142 
	$DP_8b10bE«bÀDisEº‹C¡
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

143 
	$DP_8b10bE«bÀNôEº‹C¡
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

144 
	$DP_E«bÀL™esNŸAlig√dC¡
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

145 
	$DP_L™esNŸAlignC¡Re£t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

146 
boﬁ
 
	$DP_L™esNŸAlignC¡
(
uöt16_t
 
îrThªshﬁd
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

147 
	$DP_E«bÀRxByãReAlignC¡
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

148 
	$DP_RxByãReAlignRe£tC¡
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

149 
uöt8_t
 
	$DP_SymbﬁEºCou¡L™eXY
(
boﬁ
 
îrTy≥
, 
uöt8_t
 
œ√Numbî
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

150 
	$DP_LexCheckCxFifoOvîÊow
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

151 
uöt8_t
 
	$DP_Gë8b10bEº‹C¡
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

152 
	$DP_LexVideoInfo
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

153 
	$DP_LexFrqDëI§
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

154 
	$DP_LexSèπDpFªqDë
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

155 
	$DP_LexCÀ¨AutoFrqDë
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

156 
	$DP_LexE«bÀIrqBef‹eMSA
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

157 
	$DP_LexDißbÀAŒIrq
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

158 
	$DP_LexE«bÀAudioMuã
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

159 
	$DP_LexE«bÀSDP
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

160 
uöt8_t
 
	$DP_LexGëBµ
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

161 
boﬁ
 
	$DP_LexFªquícyIsVÆid
(
uöt32_t
 
‰eqCou¡
, 
uöt8_t
 
bw
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

162 
boﬁ
 
	$DP_LexGŸCﬁ‹YCbCr422
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

163 
	$DP_PrötLexI°©usMesßges
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

164 
uöt8_t
 
	$DP_LexCÆcuœãAlu
(c⁄° 
uöt32_t
 
Âs
, c⁄° uöt32_à
symbﬁClock
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

165 
	$DP_LexSwôchCom¥essi⁄R©io
(
DP_LexCom¥essi⁄R©io
 
øtioSë
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

166 
	$DP_E«bÀVideoSåómIrqO∆y
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

168 
	$DP_RexHÆInô
(
I§CÆlback
 
ˇŒback
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

169 
	$DP_RexDpISR
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

170 
	$DP_C⁄figuªDpTøns˚ivîRex
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

171 
	$DP_Re£tDpTøns˚ivîRex
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

172 
	$DP_PªCh¨geMaöLök
(
boﬁ
 
ch¨ge
, 
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

173 
	$DP_E«bÀDpSour˚
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

174 
	$DP_Re£tDpSour˚
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

175 
	$DP_E«bÀPixñGíî©‹
(
boﬁ
 
í
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

176 
	$DP_Sour˚E«bÀS¸ambÀr
(
boﬁ
 
í
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

177 
	$DP_Sour˚SëDpTøöögD⁄e
(
boﬁ
 
d⁄e
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

178 
	$DP_Sour˚C⁄figuªDïackëizî
(c⁄° 
DP_SåómP¨amëîs
 *
•
,

179 
L™eCou¡
 
lc
, 
uöt32_t
 
symbﬁClock
, uöt32_à
symbﬁClockNoSSC
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

180 
	$DP_Sour˚DebugC⁄figuªDïackëizî
(c⁄° 
DP_SåómP¨amëîs
 *
•
,

181 
L™eCou¡
 
lc
, 
uöt32_t
 
symbﬁClock
, uöt32_à
symbﬁClockNoSSC
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

182 
	$DP_Sour˚E«bÀVidSåómGíî©‹
(
boﬁ
 
í
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

183 
	$DP_Sour˚E«bÀSynSåómGíî©‹
(
boﬁ
 
í
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

184 
	$DP_Sour˚E«bÀBœckS¸ìn
(
boﬁ
 
í
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

185 
boﬁ
 
	$DP_IsBœckS¸ìnE«bÀd
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

186 
	$DP_ProgømSåómDecodî
(
uöt32_t
 
mvid
, uöt32_à
nvid
, 
uöt16_t
 
tŸÆ_width
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

187 
	$DP_E«bÀSåómDecodî
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

188 
	$DP_SëCpuM©hResu…Ródy
(
boﬁ
 
ªady
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

189 
	$DP_RexC⁄figuªHWSåómP¨amëîs
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

190 
	$DP_RexUpd©eSåómP¨amëîs
(c⁄° 
DP_SåómP¨amëîs
 *
•
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

191 
	$DP_Rex8b10bEncodögE«bÀ
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

192 
	$DP_RexE«bÀAudioModuÀ
(
uöt8_t
 
audioMuã
, uöt8_à
maud
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

193 
	$DP_RexDißbÀAudioModuÀ
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

194 
	$DP_RexAudioFifoFlush
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

195 
	$DP_RexUpd©eSåómMvid
(
uöt32_t
 
mvid
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

196 
	$DP_RexGëDpFrq
((*
ˇŒback
)(
uöt32_t
)Ë
	`__©åibuã__
((
	`£˘i⁄
(".flashcode")));

197 
	$DP_RexE«bÀAŒI¡îru±s
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

198 
uöt8_t
 
	$DP_GëBµFromCﬁ‹Code
(
uöt8_t
 
cﬁ‹Code
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

199 
	$DP_PrötRexI°©usMesßges
(c⁄° 
DP_SåómP¨amëîs
 *
•
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

201 
uöt8_t
 
	`DP_GëRéVÆueFromB™dwidth
(
MaöLökB™dwidth
 
bw
);

202 
	`DP_SëMaöLökB™dwidth
(
MaöLökB™dwidth
 
bw
);

203 
	`DP_SëL™eCou¡
(
L™eCou¡
 
lc
);

204 
	`DP_SëEnh™˚dFømögE«bÀ
(
boﬁ
 
íh™˚dFømögE«bÀ
);

205 
	`DP_SëTøöögP©ã∫Sequí˚
(
TøöögP©ã∫Sequí˚
 
çs
);

	@components/dp_stream/src/dp_stream.c

25 
	~<iba£.h
>

26 
	~<bb_t›.h
>

27 
	~<bb_t›_dp.h
>

28 
	~<dp_°ªam.h
>

29 
	~"dp_°ªam_loc.h
"

30 
	~"dp_°ªam_log.h
"

31 
	~"dp_°ªam_cmd.h
"

43 c⁄° 
BôsPîPixñTabÀ
 
	gbµTabÀ
[] ={

44 { .
cﬁ‹Code
 = 0x00, .
	gbµ
 = 18, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
LEGACY_RGB_MODE
},

45 { .
	gcﬁ‹Code
 = 0x10, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
LEGACY_RGB_MODE
},

46 { .
	gcﬁ‹Code
 = 0x20, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
LEGACY_RGB_MODE
},

47 { .
	gcﬁ‹Code
 = 0x30, .
	gbµ
 = 36, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
LEGACY_RGB_MODE
},

48 { .
	gcﬁ‹Code
 = 0x40, .
	gbµ
 = 48, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
LEGACY_RGB_MODE
},

50 { .
	gcﬁ‹Code
 = 0x04, .
	gbµ
 = 18, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
CEA_RGB
},

51 { .
	gcﬁ‹Code
 = 0x14, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
CEA_RGB
},

52 { .
	gcﬁ‹Code
 = 0x24, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
CEA_RGB
},

53 { .
	gcﬁ‹Code
 = 0x34, .
	gbµ
 = 36, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
CEA_RGB
},

54 { .
	gcﬁ‹Code
 = 0x44, .
	gbµ
 = 48, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
CEA_RGB
},

56 { .
	gcﬁ‹Code
 = 0x13, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
RGB_WIDE_GAMUT_FIXED_POINT
},

57 { .
	gcﬁ‹Code
 = 0x23, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
RGB_WIDE_GAMUT_FIXED_POINT
},

58 { .
	gcﬁ‹Code
 = 0x33, .
	gbµ
 = 36, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
RGB_WIDE_GAMUT_FIXED_POINT
},

63 { .
	gcﬁ‹Code
 = 0x15, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr422
, .
	gf‹m©
 = 
YCBCR
},

64 { .
	gcﬁ‹Code
 = 0x1d, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr422
, .
	gf‹m©
 = 
YCBCR
},

65 { .
	gcﬁ‹Code
 = 0x11, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr422
, .
	gf‹m©
 = 
YCBCR
},

66 { .
	gcﬁ‹Code
 = 0x19, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr422
, .
	gf‹m©
 = 
YCBCR
},

67 { .
	gcﬁ‹Code
 = 0x25, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr422
, .
	gf‹m©
 = 
YCBCR
},

68 { .
	gcﬁ‹Code
 = 0x2d, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr422
, .
	gf‹m©
 = 
YCBCR
},

69 { .
	gcﬁ‹Code
 = 0x21, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr422
, .
	gf‹m©
 = 
YCBCR
},

70 { .
	gcﬁ‹Code
 = 0x29, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr422
, .
	gf‹m©
 = 
YCBCR
},

71 { .
	gcﬁ‹Code
 = 0x35, .
	gbµ
 = 36, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr422
, .
	gf‹m©
 = 
YCBCR
},

72 { .
	gcﬁ‹Code
 = 0x45, .
	gbµ
 = 48, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr422
, .
	gf‹m©
 = 
YCBCR
},

74 { .
	gcﬁ‹Code
 = 0x16, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr444
, .
	gf‹m©
 = 
YCBCR
},

75 { .
	gcﬁ‹Code
 = 0x1E, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr444
, .
	gf‹m©
 = 
YCBCR
},

76 { .
	gcﬁ‹Code
 = 0x12, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr444
, .
	gf‹m©
 = 
YCBCR
},

77 { .
	gcﬁ‹Code
 = 0x1A, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr444
, .
	gf‹m©
 = 
YCBCR
},

78 { .
	gcﬁ‹Code
 = 0x26, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr444
, .
	gf‹m©
 = 
YCBCR
},

79 { .
	gcﬁ‹Code
 = 0x2E, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr444
, .
	gf‹m©
 = 
YCBCR
},

80 { .
	gcﬁ‹Code
 = 0x22, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr444
, .
	gf‹m©
 = 
YCBCR
},

81 { .
	gcﬁ‹Code
 = 0x2A, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr444
, .
	gf‹m©
 = 
YCBCR
},

82 { .
	gcﬁ‹Code
 = 0x3E, .
	gbµ
 = 36, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr444
, .
	gf‹m©
 = 
YCBCR
},

83 { .
	gcﬁ‹Code
 = 0x4E, .
	gbµ
 = 48, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_YCbCr444
, .
	gf‹m©
 = 
YCBCR
},

85 { .
	gcﬁ‹Code
 = 0x0A, .
	gbµ
 = 18, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
ADOBE_RGB
},

86 { .
	gcﬁ‹Code
 = 0x1A, .
	gbµ
 = 24, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
ADOBE_RGB
},

87 { .
	gcﬁ‹Code
 = 0x2A, .
	gbµ
 = 30, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
ADOBE_RGB
},

88 { .
	gcﬁ‹Code
 = 0x3A, .
	gbµ
 = 36, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
ADOBE_RGB
},

89 { .
	gcﬁ‹Code
 = 0x4A, .
	gbµ
 = 48, .
	gcﬁ‹Mode
 = 
TICO_E_MODE_RGB
, .
	gf‹m©
 = 
ADOBE_RGB
},

93 
DP_STREAM_‰qPröt
(
uöt32_t
 
‰qCou¡
);

104 
uöt8_t
 
	$DP_GëRéVÆueFromB™dwidth
(
MaöLökB™dwidth
 
bw
)

107 c⁄° 
uöt8_t
 
b™dwidth
 = 
bw
 =
BW_1_62_GBPS
 ? 0x00:

108 
bw
 =
BW_2_70_GBPS
 ? 0x01:

109 
bw
 =
BW_5_40_GBPS
 ? 0x02:

112 
	`üs£π_DP_STREAM_COMPONENT_2
(
b™dwidth
 !0xFF, 
DP_INVALID_BANDWIDTH
, 
bw
, 
__LINE__
);

113  
b™dwidth
;

114 
	}
}

125 
	$DP_SëMaöLökB™dwidth
(
MaöLökB™dwidth
 
bw
)

128 c⁄° 
uöt8_t
 
b™dwidth
 = 
	`DP_GëRéVÆueFromB™dwidth
(
bw
);

130 i‡(
	`bb_t›_IsDevi˚Lex
())

132 
	`DP_LexSëMaöLökB™dwidth
(
b™dwidth
);

136 
	`DP_RexSëMaöLökB™dwidth
(
b™dwidth
);

138 
	}
}

149 
	$DP_SëL™eCou¡
(
L™eCou¡
 
lc
)

152 c⁄° 
uöt8_t
 
œ√Cou¡
 = 
lc
 =
LANE_COUNT_1
 ? 0x00:

153 
lc
 =
LANE_COUNT_2
 ? 0x01:

154 
lc
 =
LANE_COUNT_4
 ? 0x03:

156 
	`üs£π_DP_STREAM_COMPONENT_2
(
œ√Cou¡
 !0xFF, 
DP_INVALID_LANE_COUNT
, 
lc
, 
__LINE__
);

158 i‡(
	`bb_t›_IsDevi˚Lex
())

160 
	`DP_LexSëL™eCou¡
(
œ√Cou¡
);

164 
	`DP_RexSëL™eCou¡
(
œ√Cou¡
);

166 
	}
}

178 
	$DP_SëEnh™˚dFømögE«bÀ
(
boﬁ
 
íh™˚dFømögE«bÀ
)

180 i‡(
	`bb_t›_IsDevi˚Lex
())

182 
	`DP_LexSëEnh™˚dFømögE«bÀ
(
íh™˚dFømögE«bÀ
);

186 
	`DP_RexSëEnh™˚dFømögE«bÀ
(
íh™˚dFømögE«bÀ
);

188 
	}
}

197 
	$DP_SëTøöögP©ã∫Sequí˚
(
TøöögP©ã∫Sequí˚
 
çs
)

199 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SETTING_TRAINING_PATTERN
, 
çs
);

204 i‡(
	`bb_t›_IsDevi˚Lex
())

206 
	`DP_LexSëTøöögP©ã∫Sequí˚
(
çs
);

210 
	`DP_RexSëTøöögP©ã∫Sequí˚
(
çs
);

212 
	}
}

223 c⁄° 
BôsPîPixñTabÀ
 *
	$m≠Cﬁ‹CodeToBôsPîPixñ
(
uöt8_t
 
cﬁ‹Code
)

225 
size_t
 
ödex
 = 0; index <
	`ARRAYSIZE
(
bµTabÀ
); index++)

227 i‡(
bµTabÀ
[
ödex
].
cﬁ‹Code
 == colorCode)

229  &
bµTabÀ
[
ödex
];

233  
NULL
;

234 
	}
}

242 
boﬁ
 
	$DP_LexIsCﬁ‹CodeVÆid
(
uöt8_t
 
cﬁ‹Code
)

244 
size_t
 
ödex
 = 0; index <
	`ARRAYSIZE
(
bµTabÀ
); index++)

246 i‡(
bµTabÀ
[
ödex
].
cﬁ‹Code
 == colorCode)

248  
åue
;

251  
Ál£
;

252 
	}
}

261 
	$DP_STREAM_GëVideoInfoIcmd
()

263 i‡(
	`bb_t›_IsDevi˚Lex
())

265 
	`DP_LexVideoInfo
();

266 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_STATS_0
);

267 
	`DP_PrötLexSèts
();

268 
	`DP_PrötGçSèts
();

269 
	`AUX_PrötFöÆLökSëtögs
();

273 
	`DP_RexVideoInfo
();

274 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_STATS_0
);

275 
	`DP_RexSèts
();

276 
	`DP_RexAluS©s
();

277 
	`DP_RexFsmS©s
();

279 
	}
}

288 
	$DP_STREAM_SdpSètsIcmd
()

290 i‡(
	`bb_t›_IsDevi˚Lex
())

292 
	`DP_LexPrötSdpFifoSèts
();

296 
	`DP_RexPrötSdpFifoSèts
();

298 
	}
}

306 
	$DP_STREAM_‰eqMósuªIcmd
()

308 i‡(
	`bb_t›_IsDevi˚Lex
())

310 
	`DP_LexCÀ¨AutoFrqDë
();

311 
	`DP_LexGëDpFrq
(&
DP_STREAM_‰qPröt
);

315 
	`bb_t›_a7_‰eqDëAutoE«bÀ
(
Ál£
);

316 
	`DP_RexGëDpFrq
(&
DP_STREAM_‰qPröt
);

318 
	}
}

327 
	$DP_STREAM_RexE«bÀAudioIcmd
()

329 c⁄° 
uöt8_t
 
audioMuãSètus
 = 0;

330 c⁄° 
uöt8_t
 
maudVÆue
 = 210;

331 
	`DP_RexE«bÀAudioModuÀ
(
audioMuãSètus
, 
maudVÆue
);

332 
	}
}

340 
uöt8_t
 
	$DP_GëBµ
(
uöt8_t
 
cﬁ‹Code
)

342 
size_t
 
ödex
 = 0; index <
	`ARRAYSIZE
(
bµTabÀ
); index++)

344 i‡(
bµTabÀ
[
ödex
].
cﬁ‹Code
 == colorCode)

346  
bµTabÀ
[
ödex
].
bµ
;

350 
	}
}

358 
	$DP_STREAM_LexPrötEºCou¡
()

360 
	`DP_PrötGçSèts
();

361 
	`DP_Pröt8b10bEº‹Sèts
();

362 
	}
}

373 
	$DP_STREAM_‰qPröt
(
uöt32_t
 
‰qCou¡
)

375 
uöt32_t
 
‰q
 = 0;

376 
‰q
 = 
	`bb_t›_a7_gëNomöÆGcmFªquícyDëe˘ed
(
åue
);

377 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_FRQ_DETC
, 
‰q
);

378 
	}
}

	@components/dp_stream/src/dp_stream_cmd.h

11 #i‚de‡
DP_STREAM_CMD_H


12 
	#DP_STREAM_CMD_H


	)

15 
	~<icmd.h
>

18 
	$ICMD_FUNCTIONS_CREATE
(
DP_STREAM_COMPONENT
)

19 #i‡!
deföed
 
BB_ISO
 && !deföed 
BB_USB


20 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_STREAM_GëVideoInfoIcmd
, "Prints outÅhe video information", )

21 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_STREAM_SdpSètsIcmd
, "Prints outÅhe DP SDP stats", )

22 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_STREAM_‰eqMósuªIcmd
, "Measure DP clock", )

23 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_STREAM_RexE«bÀAudioIcmd
, "Enablesáudio on REX", )

24 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_STREAM_LexPrötEºCou¡
, "PrintsállÅheÉrror count\n", )

25 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_STREAM_LexRe£tIdÀP©ã∫C¡
, "Resets idleÖattern counter", )

26 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
DP_STREAM_RexSëAdju°WidthOff£t
, "Së dp_width_tŸÆ_möus/∂us_off£t0/1.árg0:-off1, 1:+off1, 2:-off0, 3:+off0)", 
uöt8_t
, uint8_t, uint8_t, uint8_t)

28 
	$ICMD_FUNCTIONS_END
(
DP_STREAM_COMPONENT
)

	@components/dp_stream/src/dp_stream_lex.c

24 
	~<iba£.h
>

25 
	~<bb_chù_ªgs.h
>

26 
	~<bb_t›.h
>

27 
	~<bb_t›_dp.h
>

28 
	~<bb_t›_dp_a7.h
>

29 
	~<bb_t›_ªgs.h
>

30 
	~<dp_sök_ªgs.h
>

31 
	~<tico_ícodî_ªgs.h
>

32 
	~<ã°_dügno°ics.h
>

33 
	~<dp_°ªam.h
>

34 
	~<c⁄figuøti⁄.h
>

35 
	~<timög_timîs.h
>

36 
	~<u¨t.h
>

38 
	~"dp_°ªam_loc.h
"

39 
	~"dp_°ªam_log.h
"

40 
	~"dp_°ªam_cmd.h
"

43 
	#NUM_PIX_COMPONENTS
 3

	)

44 
	#AUDIOMUTE_FLAG
 (1 << 4)

	)

45 
	#FPGA_RESET_WAIT_PERIOD
 2

46 
	#FRQ_DET_TIME_INTERVAL
 750

47 

	)

49 
	#COMPRESSION_2
 24

	)

50 
	#COMPRESSION_4
 40

	)

51 
	#COMPRESSION_6
 60

	)

53 
	#DP_SINK_IRQ_ENABLES
 \

	)

55 
	gDP_SINK_IRQ_ENABLE_TU_SIZE_RDY_MASK
 | \

56 
	gDP_SINK_IRQ_ENABLE_VBD_MAJORITY_FAIL_MASK
 | \

57 
	gDP_SINK_IRQ_ENABLE_MSA_MAJORITY_FAIL_MASK
 | \

58 
	gDP_SINK_IRQ_ENABLE_NOVIDEOSTREAM_MASK
 | \

60 
	gDP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK
 | \

61 
	gDP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_MASK
 | \

62 
	gDP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_MASK
 | \

63 
	gDP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_MASK
 | \

64 
	gDP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK
 | \

65 
	gDP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_MASK
 | \

66 
	gDP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_MASK
 | \

67 
	gDP_SINK_IRQ_ENABLE_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_MASK
 | \

68 
	gDP_SINK_IRQ_ENABLE_SDP_FIFO_UNDERFLOW_MASK
 | \

69 
	gDP_SINK_IRQ_ENABLE_SDP_FIFO_OVERFLOW_MASK
 \

72 
	#DP_SINK_IRQ_ENABLES_BEFORE_MSA
 \

	)

74 
	gDP_SINK_IRQ_ENABLE_TU_SIZE_RDY_MASK
 | \

75 
	gDP_SINK_IRQ_ENABLE_VBD_MAJORITY_FAIL_MASK
 | \

76 
	gDP_SINK_IRQ_ENABLE_MSA_MAJORITY_FAIL_MASK
 | \

77 
	gDP_SINK_IRQ_ENABLE_NOVIDEOSTREAM_MASK
 \

85 vﬁ©ûê
bb_chù_s
* 
	gbb_chù
 = (vﬁ©ûê*)(
bb_chù_s_ADDRESS
);

86 vﬁ©ûê
tico_ícodî_s
 *
	gtico_íc
;

87 c⁄° 
C⁄figDpC⁄fig
 *
	gdpC⁄figPåSåóm
;

88 
I§CÆlback
 
	gi§CÆlback
;

89 vﬁ©ûê
dp_sök_s
* 
	gdp_sök
;

91 
uöt32_t
 
	gÀxSåómIrqBackup
;

92 
uöt8_t
 
	g‰qOutofR™gCou¡
;

93 
TIMING_TimîH™dÀrT
 
	g‰qDëI¡îvÆ
;

95 
DP_SåómP¨amëîs
 
	mÀxSåómP¨amëîs
;

96 
uöt8_t
 
	msubSam∂ögMode
;

97 
uöt8_t
 
	mbpc_mode
;

98 c⁄° 
BôsPîPixñTabÀ
 *
	mbµT
;

99 
uöt8_t
 
	mbôsPîComp⁄ít
;

100 } 
	gÀxEncodîP¨ams
;

104 c⁄° 
uöt32_t
 
	gCompMöCou¡
[] =

113 c⁄° 
uöt32_t
 
	gCompMaxCou¡Ssc
[] =

122 
	$DP_ProgømSåómEncodî
(
uöt32_t
 
budgë
,

123 
uöt16_t
 
width
, uöt16_à
height
,

124 
uöt8_t
 
subSam∂ögMode
, uöt8_à
bpc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

125 
	$DP_SökC⁄figuªDebugMSA
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

126 
uöt16_t
 
	$CompuãEncodîPackëLígth
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

127 
uöt32_t
 
	$CompuãEncodîBudgë
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

128 
	$DP_SökSëRódCÀ¨Sèts
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

129 
	$LexDpShutdownFrqH™dÀr
(
uöt32_t
 
dëe˘edFrqCou¡
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

130 
	$DP_LexFrqDëI¡îvÆH™dÀr
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

131 
uöt8_t
 
	$DP_GëCom¥essi⁄R©io
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

143 
	$DP_LexHÆInô
–
I§CÆlback
 
ˇŒback
 )

145 
dp_sök
 = (vﬁ©ûê*Ë&
bb_chù
->
dp_sök_maö
.
s
;

146 
tico_íc
 = (vﬁ©ûê*Ë&
bb_chù
->
dp_sök_tico
.
s
;

147 
	`DP_SökSëRódCÀ¨Sèts
();

148 
i§CÆlback
 = 
ˇŒback
;

149 
dpC⁄figPåSåóm
 = (
C⁄figDpC⁄fig
*)
	`C⁄fig_GëD©aPoöãr
(
CONFIG_VAR_BB_DP_CONFIG
);

150 
‰qDëI¡îvÆ
 = 
	`TIMING_TimîRegi°îH™dÀr
(

151 
DP_LexFrqDëI¡îvÆH™dÀr
, 
Ál£
, 
FRQ_DET_TIME_INTERVAL
);

152 
	}
}

162 
	$DP_LexISRInô
()

165 
dp_sök
->
úq
.
s
.
íabÀ
.
dw
 = 
DP_SINK_IRQ_ENABLES_BEFORE_MSA
;

166 
	}
}

177 
	$DP_LexGëVÆidSåómP¨amëîs
(
DP_SåómP¨amëîs
 *
∑øms
)

179 if(
dp_sök
->
c⁄figuøti⁄
.
bf
.
debug_mß_í
)

181 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
mvid
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.mvid.
bf
.mvid;

182 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
nvid
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.nvid.
bf
.nvid;

184 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.
tŸÆ
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
h‹iz⁄èl_0
.
bf
.total;

185 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.
°¨t
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
h‹iz⁄èl_0
.
bf
.start;

186 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.
width
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
h‹iz⁄èl_1
.
bf
.width;

187 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.
pﬁ¨ôy
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
h‹iz⁄èl_1
.
bf
.polarity;

188 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.
sync_width
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
h‹iz⁄èl_1
.
bf
.sync_width;

190 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.
tŸÆ
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
vîtiˇl_0
.
bf
.total;

191 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.
°¨t
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
vîtiˇl_0
.
bf
.start;

192 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.
height
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
vîtiˇl_1
.
bf
.height;

193 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.
pﬁ¨ôy
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
vîtiˇl_1
.
bf
.polarity;

194 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.
sync_width
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
vîtiˇl_1
.
bf
.sync_width;

196 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
y_⁄ly
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.misc.
bf
.y_only;

197 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
°îeo
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.misc.
bf
.stereo;

198 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
öt_tŸÆ
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.misc.
bf
.int_total;

199 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
cﬁ‹
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.misc.
bf
.color;

200 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
˛k_sync
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.misc.
bf
.clk_sync;

202 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
cs_pkt_Àngth
 = 
	`CompuãEncodîPackëLígth
();

203 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
tu_size
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
Æu
.
bf
.tu_size;

205 
	`mem˝y
(
∑øms
, &
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
, (
DP_SåómP¨amëîs
));

209 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
mvid
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.mvid.
bf
.mvid;

210 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
nvid
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.nvid.
bf
.nvid;

212 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.
tŸÆ
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_0
.
bf
.total;

213 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.
°¨t
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_0
.
bf
.start;

214 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.
width
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.width;

215 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.
pﬁ¨ôy
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.polarity;

216 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.
sync_width
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.sync_width;

218 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.
tŸÆ
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_0
.
bf
.total;

219 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.
°¨t
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_0
.
bf
.start;

220 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.
height
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.height;

221 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.
pﬁ¨ôy
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.polarity;

222 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.
sync_width
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.sync_width;

224 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
y_⁄ly
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.misc.
bf
.y_only;

225 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
°îeo
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.misc.
bf
.stereo;

226 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
öt_tŸÆ
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.misc.
bf
.int_total;

227 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
cﬁ‹
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.misc.
bf
.color;

228 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
˛k_sync
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.misc.
bf
.clk_sync;

230 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
cs_pkt_Àngth
 = 
	`CompuãEncodîPackëLígth
();

231 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
tu_size
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
Æu
.
bf
.tu_size;

233 
	`mem˝y
(
∑øms
, &
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
, (
DP_SåómP¨amëîs
));

236 i‡(
	`TEST_GëDügSèã
())

239 i‡((
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
width
 != 640) &&

240 (
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
height
 != 480))

242 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_NOT_640_480
);

246 i‡((
dp_sök
->
c⁄figuøti⁄
.
bf
.
œ√_num
 + 1 != 4) &&

247 (
dp_sök
->
c⁄figuøti⁄
.
bf
.
œ√_bô_øã
 != 0x02))

249 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_LC_BW_NOT_HIGH
);

253 
	}
}

262 
	$DP_C⁄figuªEncodîExåa˘‹
()

264 c⁄° 
uöt16_t
 
width
 = 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.width;

265 c⁄° 
uöt16_t
 
height
 = 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.height;

269 
dp_sök_°ªam_exåa˘‹_pixgí
 
debugPixGíC⁄åﬁ
 = {

270 .
dw
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
pixgí
.dw};

271 
debugPixGíC⁄åﬁ
.
bf
.
í
 = 0u;

272 
debugPixGíC⁄åﬁ
.
bf
.
ªd
 = 0u;

273 
debugPixGíC⁄åﬁ
.
bf
.
gªí
 = 0u;

274 
debugPixGíC⁄åﬁ
.
bf
.
blue
 = 0u;

275 
dp_sök
->
°ªam_exåa˘‹
.
s
.
pixgí
.
dw
 = 
debugPixGíC⁄åﬁ
.dw;

278 c⁄° 
uöt32_t
 
budgë
 = 
	`CompuãEncodîBudgë
();

280 
	`DP_ProgømSåómEncodî
(
budgë
, 
width
, 
height
, 
ÀxEncodîP¨ams
.
bµT
->
cﬁ‹Mode
,ÜexEncodîP¨ams.
bôsPîComp⁄ít
);

281 
	}
}

290 
boﬁ
 
	$DP_GŸClockRecovîy
()

292  
	`bb_t›_dpGŸClockRecovîy
();

293 
	}
}

302 
boﬁ
 
	$DP_GŸSymbﬁLock
(
L™eCou¡
 
lc
)

304  
	`bb_t›_dpGŸSymbﬁLock
(
lc
);

305 
	}
}

315 
	$DP_LexDpISR
()

318 
uöt32_t
 
dpI¡s
 = (
dp_sök
->
úq
.
s
.
≥ndög
.
dw
 & dp_sök->úq.s.
íabÀ
.dw);

319 
dp_sök
->
úq
.
s
.
≥ndög
.
dw
 = dp_sink->irq.s.pending.dw;

323 i‡(
dpI¡s
 & 
DP_SINK_IRQ_PENDING_FIRST_IDLE_PATTERN_MASK
)

325 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_FIRST_IDLE_PATTERN
);

327 i‡(
dpI¡s
 & 
DP_SINK_IRQ_PENDING_NOVIDEOSTREAM_MASK
)

329 
boﬁ
 
noVideo
 = 
dp_sök
->
úq
.
s
.
øw
.
bf
.
novideo°ªam
;

330 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
DP_NO_VID_STREAM
, 
noVideo
);

332 if(
noVideo
)

334 
	`DP_E«bÀVideoSåómIrqO∆y
();

335 
	`i§CÆlback
(
DP_SINK_IRQ_PENDING_NOVIDEOSTREAM_MASK
);

340 
dp_sök
->
úq
.
s
.
íabÀ
.
dw
 = 
DP_SINK_IRQ_ENABLES_BEFORE_MSA
;

343 i‡(
dpI¡s
 & 
DP_SINK_IRQ_PENDING_AUDIOMUTE_MASK
 && !
dpC⁄figPåSåóm
->
noSídAudio
)

346 
	`i§CÆlback
(
DP_SINK_IRQ_PENDING_AUDIOMUTE_MASK
);

348 i‡(((
dpI¡s
 & 
DP_SINK_IRQ_PENDING_SDP_FIFO_UNDERFLOW_MASK
) ||

349 (
dpI¡s
 & 
DP_SINK_IRQ_PENDING_SDP_FIFO_OVERFLOW_MASK
)) &&

350 !
dpC⁄figPåSåóm
->
noSídAudio
)

352 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_LEX_SDP_FIFO_OF
,

353 
dp_sök
->
°©s1
.
s
.
sdp_fifo_ovîÊow
.
bf
.sdp_fifo_overflow,

354 
dp_sök
->
°©s1
.
s
.
sdp_fifo_undîÊow
.
bf
.sdp_fifo_underflow);

355 
dp_sök
->
°ªam_exåa˘‹
.
s
.
cfg
.
bf
.
sdp_í
 = 
Ál£
;

356 
dp_sök
->
°©s1
.
s
.
rd2˛r_c⁄fig
.
dw
 = 
DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_OVERFLOW_MASK
 |

357 
DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_EMPTY_MASK
 |

358 
DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_FULL_MASK
 |

359 
DP_SINK_STATS1_RD2CLR_CONFIG_SDP_FIFO_UNDERFLOW_MASK
;

360 
dp_sök
->
°ªam_exåa˘‹
.
s
.
cfg
.
bf
.
sdp_í
 = 
åue
;

362 i‡(
dpI¡s
 & 
DP_SINK_IRQ_PENDING_TU_SIZE_RDY_MASK
)

372 
dp_sök
->
úq
.
s
.
íabÀ
.
dw
 = 
DP_SINK_IRQ_ENABLES
;

373 
	`i§CÆlback
(
DP_SINK_IRQ_PENDING_TU_SIZE_RDY_MASK
);

376 i‡(
dpI¡s
 & 
DP_SINK_IRQ_PENDING_VBD_MAJORITY_FAIL_MASK
)

378 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_VBD_MAJORITY_FAIL
);

379 
	`i§CÆlback
(
DP_SINK_IRQ_PENDING_VBD_MAJORITY_FAIL_MASK
);

380 
	`DP_E«bÀVideoSåómIrqO∆y
();

382 i‡(
dpI¡s
 & 
DP_SINK_IRQ_PENDING_MSA_MAJORITY_FAIL_MASK
)

384 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_MSA_MAJORITY_FAIL
);

385 
	`i§CÆlback
(
DP_SINK_IRQ_PENDING_MSA_MAJORITY_FAIL_MASK
);

386 
	`DP_E«bÀVideoSåómIrqO∆y
();

388 i‡((
dpI¡s
 & 
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK
) ||

389 (
dpI¡s
 & 
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW1_MASK
) ||

390 (
dpI¡s
 & 
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW2_MASK
) ||

391 (
dpI¡s
 & 
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW3_MASK
))

393 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
DP_STREAM_EXTRACTOR_OVERFLOW
, 
dpI¡s
);

394 
	`i§CÆlback
(
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_OVERFLOW0_MASK
);

395 
	`DP_E«bÀVideoSåómIrqO∆y
();

397 i‡((
dpI¡s
 & 
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK
) ||

398 (
dpI¡s
 & 
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW1_MASK
) ||

399 (
dpI¡s
 & 
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW2_MASK
) ||

400 (
dpI¡s
 & 
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW3_MASK
))

402 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_STREAM_EXTRACTOR_UNDERFLOW
);

403 
	`i§CÆlback
(
DP_SINK_IRQ_PENDING_STREAM_EXTRACTOR_VID_FIFO_UNDERFLOW0_MASK
);

404 
	`DP_E«bÀVideoSåómIrqO∆y
();

406 
	}
}

417 
	$DP_InôDpTøns˚ivîLex
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
)

419 
	`bb_t›_dpInôC⁄figuªDpTøns˚ivîLex
(
bw
, 
lc
);

420 
	}
}

429 
	$DP_C⁄figuªDpTøns˚ivîLex
((*
ˇŒback
)(
boﬁ
))

431 
	`bb_t›_dpC⁄figuªDpTøns˚ivîLex
(
ˇŒback
);

432 
	}
}

441 
	$DP_Re£tDpTøns˚ivîLex
()

443 
	`bb_t›_dpRe£tDpTøns˚ivîLex
();

444 
	}
}

453 
	$DP_Re£tDpSök
(
boﬁ
 
ª£t
)

455 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_RESET_SINK
, 
ª£t
);

456 
	`bb_t›_dpRe£tDpSök
(
ª£t
);

457 
	}
}

466 
boﬁ
 
	$DP_DpSökInRe£t
()

468  
	`bb_t›_DpSökInRe£t
();

469 
	}
}

478 
	$DP_Re£tEncodî
(
boﬁ
 
ª£t
)

480 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_RESET_ENC
, 
ª£t
);

481 
	`bb_t›_AµlyRe£tEncodî
(
ª£t
);

482 
	}
}

491 
	$DP_Re£tSökAndEncodî
()

493 
	`DP_Re£tDpSök
(
åue
);

494 
	`DP_Re£tEncodî
(
åue
);

495 
	}
}

504 
boﬁ
 
	$DP_DpEncodîInRe£t
()

507  (
	`bb_t›_DpEncodîInRe£t
());

508 
	}
}

517 
	$DP_SökE«bÀSåómExåa˘‹
(
boﬁ
 
íabÀ
)

519 i‡(
íabÀ
)

522 
dp_sök
->
c⁄figuøti⁄
.
bf
.
°ªam_exåa˘‹_í
 = 
íabÀ
;

523 
dp_sök
->
c⁄figuøti⁄
.
bf
.
vid_°ªam_exåa˘‹_í
 = 
íabÀ
;

528 
dp_sök
->
c⁄figuøti⁄
.
bf
.
vid_°ªam_exåa˘‹_í
 = 
íabÀ
;

529 
dp_sök
->
c⁄figuøti⁄
.
bf
.
°ªam_exåa˘‹_í
 = 
íabÀ
;

531 
	}
}

540 
	$DP_SökCÀ¨CxFifoOvîÊowSèts
()

543 
dp_sök
->
°©s0
.
s
.
rd2˛r_c⁄fig
.
dw
 = 
DP_SINK_STATS0_RD2CLR_CONFIG_VID_C0_FIFO_OVERFLOW_MASK
 |

544 
DP_SINK_STATS0_RD2CLR_CONFIG_VID_C1_FIFO_OVERFLOW_MASK
 |

545 
DP_SINK_STATS0_RD2CLR_CONFIG_VID_C2_FIFO_OVERFLOW_MASK
;

547 
	`ûog_DP_STREAM_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
DP_STREAM_CLEAR_CXFIFO
,

548 
dp_sök
->
°©s0
.
s
.
vid_c0_fifo_ovîÊow
.
bf
.vid_c0_fifo_overflow,

549 
dp_sök
->
°©s0
.
s
.
vid_c1_fifo_ovîÊow
.
bf
.vid_c1_fifo_overflow,

550 
dp_sök
->
°©s0
.
s
.
vid_c2_fifo_ovîÊow
.
bf
.vid_c2_fifo_overflow);

553 
	}
}

562 
boﬁ
 
	$DP_SökSåómExåa˘‹E«bñd
()

564  
dp_sök
->
c⁄figuøti⁄
.
bf
.
°ªam_exåa˘‹_í
 &&

565 
dp_sök
->
c⁄figuøti⁄
.
bf
.
vid_°ªam_exåa˘‹_í
;

566 
	}
}

576 
	$DP_SökE«bÀDes¸ambÀr
(
boﬁ
 
í
)

578 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_DEBUG
, 
DP_DESCRAMBLE_EN
, 
í
);

579 
dp_sök
->
des¸ambÀr
.
bf
.
íabÀ
 = 
í
;

580 
	}
}

590 
	$DP_E«bÀSåómEncodî
()

592 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_ENABLING_TICO_ENC
);

593 
tico_íc
->
tico_e_vld
.
dw
 = (
tico_ícodî_tico_e_vld
Ë{.
bf
={.tico_e_vld=1u}}.dw;

594 
dp_sök
->
°ªam_exåa˘‹
.
s
.
Æu
.
bf
.
ícodî_¥ogøm_d⁄e
 = 1;

595 
	}
}

605 
	$DP_GëEncodîRódyF‹Re£t
()

613 
	}
}

624 
	$DP_SökE«bÀDebugMß
(
boﬁ
 
íabÀ
)

626 
dp_sök
->
c⁄figuøti⁄
.
bf
.
debug_mß_í
 = 
íabÀ
;

628 if(
íabÀ
)

630 
	`DP_SökC⁄figuªDebugMSA
();

632 
	}
}

642 
	$DP_E«bÀL™eAlig√r
(
boﬁ
 
í
, 
TøöögP©ã∫Sequí˚
 
çs
)

644 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_DEBUG
, 
DP_ALIGNER_CONTROL
, 
í
, 
çs
);

646 
dp_sök_Æig√r_c⁄åﬁ
 
˘æ
 = {.
bf
 = {.
Æign_í
 = 
í
,

647 .
çs3_n_çs2
 = (
çs
 =
TPS_3
),

649 
dp_sök
->
Æig√r
.
s
.
c⁄åﬁ
.
dw
 = 
˘æ
.dw;

650 
	}
}

659 
boﬁ
 
	$DP_GŸL™eAlignmít
()

661  
dp_sök
->
Æig√r
.
s
.
°©us
.
bf
.
b⁄d_Æign_d⁄e
 && !dp_sök->Æig√r.s.°©us.bf.
œ√s_nŸ_Æig√d
;

662 
	}
}

674 
	$DP_SëAPBtoAXImode
()

676 i‡(
	`bb_t›_IsDevi˚Lex
())

678 
dp_sök
->
c⁄figuøti⁄
.
bf
.
≠b_to_axi_mode_£À˘
 = 1;

685 
	}
}

694 
	$DP_LexDr›CsPçPkt
(
boﬁ
 
dr›
)

696 
dp_sök
->
°ªam_exåa˘‹
.
s
.
cfg
.
bf
.
dr›_cs_±p_pkt
 = 
dr›
;

697 
	}
}

707 
	$DP_LexDißbÀSåómIrq
()

710 
ÀxSåómIrqBackup
 = 
dp_sök
->
úq
.
s
.
íabÀ
.
dw
;

712 
dp_sök
->
úq
.
s
.
íabÀ
.
dw
 &~
dp_sök_úq_íabÀ_WRITEMASK
;

714 
dp_sök
->
úq
.
s
.
≥ndög
.
dw
 = 
dp_sök_úq_≥ndög_WRITEMASK
;

715 
	}
}

725 
	$DP_LexCÀ¨PídögSåómIrq
()

727 
dp_sök
->
úq
.
s
.
≥ndög
.
dw
 = 
dp_sök_úq_≥ndög_WRITEMASK
;

728 
	}
}

738 
	$DP_LexRe°‹eSåómIrq
()

741 
dp_sök
->
úq
.
s
.
íabÀ
.
dw
 = 
ÀxSåómIrqBackup
;

742 
	}
}

751 
	$DP_LexCÀ¨BackupIrq
()

753 
ÀxSåómIrqBackup
 = 0;

754 
	}
}

763 
boﬁ
 
	$DP_CheckLöeEº‹C¡
(
uöt16_t
 
îrThªshﬁd
)

765 c⁄° 
uöt16_t
 
dp_8b10bEºC¡
 = 
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√0_8b10b_dis_îr_po°_¸_˙t
 +

766 
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√1_8b10b_dis_îr_po°_¸_˙t
 +

767 
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√2_8b10b_dis_îr_po°_¸_˙t
 +

768 
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√3_8b10b_dis_îr_po°_¸_˙t
 +

769 
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√0_8b10b_nô_îr_po°_¸_˙t
 +

770 
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√1_8b10b_nô_îr_po°_¸_˙t
 +

771 
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√2_8b10b_nô_îr_po°_¸_˙t
 +

772 
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√3_8b10b_nô_îr_po°_¸_˙t
 ;

774 c⁄° 
uöt16_t
 
dp_gçEºC¡
 = 
dp_sök
->
°©s
.
s
.
˙t_gç
.
bf
.
dp_gt0_rxbyãªÆign_˙t
 +

775 
dp_sök
->
°©s
.
s
.
˙t_gç
.
bf
.
dp_gt1_rxbyãªÆign_˙t
 +

776 
dp_sök
->
°©s
.
s
.
˙t_gç
.
bf
.
dp_gt2_rxbyãªÆign_˙t
 +

777 
dp_sök
->
°©s
.
s
.
˙t_gç
.
bf
.
dp_gt3_rxbyãªÆign_˙t
 ;

779 c⁄° 
uöt16_t
 
Æig√rEºC¡
 = 
dp_sök
->
Æig√r
.
s
.
°©s
.
bf
.
œ√s_nŸ_Æig√d_˙t
;

781 c⁄° 
uöt32_t
 
îrCou¡
 = 
dp_8b10bEºC¡
 + 
dp_gçEºC¡
 + 
Æig√rEºC¡
;

784 i‡((
îrCou¡
 > 0Ë&& (
	`TEST_GëDügSèã
()))

786 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_8b10b_ERROR
);

789 i‡(
îrCou¡
 > 
îrThªshﬁd
)

791 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_BER_ERR_CNT
, 
îrThªshﬁd
, 
îrCou¡
);

792  
åue
;

796  
Ál£
;

798 
	}
}

807 
	$DP_Re£tEº‹C¡
()

809 
	`DP_8b10bRe£tEº‹C¡
();

810 
	`DP_RxByãReAlignRe£tC¡
();

811 
	`DP_L™esNŸAlignC¡Re£t
();

812 
	}
}

821 
uöt8_t
 
	$DP_Gë8b10bEº‹C¡
()

823  
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√0_8b10b_dis_îr_po°_¸_˙t
;

824 
	}
}

833 
	$DP_8b10bE«bÀDisEº‹C¡
(
boﬁ
 
íabÀ
)

835 
dp_sök
->
°©s
.
s
.
˙t_í_r°_8b10b_0
.
bf
.
œ√s_8b10b_dis_îr_dë_í
 = 
íabÀ
;

836 
	}
}

845 
	$DP_8b10bE«bÀNôEº‹C¡
(
boﬁ
 
íabÀ
)

847 
dp_sök
->
°©s
.
s
.
˙t_í_r°_8b10b_1
.
bf
.
œ√s_8b10b_nô_îr_dë_í
 = 
íabÀ
;

848 
	}
}

857 
	$DP_8b10bRe£tEº‹C¡
()

860 
	`DP_8b10bE«bÀDisEº‹C¡
(
Ál£
);

861 
	`DP_8b10bE«bÀDisEº‹C¡
(
åue
);

862 
	`DP_8b10bE«bÀNôEº‹C¡
(
Ál£
);

863 
	`DP_8b10bE«bÀNôEº‹C¡
(
åue
);

864 
	}
}

873 
uöt8_t
 
	$DP_SymbﬁEºCou¡L™eXY
(
boﬁ
 
îrTy≥
, 
uöt8_t
 
œ√Numbî
)

875 i‡(
DISPARITY_ERROR
 =
îrTy≥
)

877 
œ√Numbî
)

879 
LANE0
:

880  
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√0_8b10b_dis_îr_po°_¸_˙t
;

881 
LANE1
:

882  
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√1_8b10b_dis_îr_po°_¸_˙t
;

883 
LANE2
:

884  
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√2_8b10b_dis_îr_po°_¸_˙t
;

885 
LANE3
:

886  
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√3_8b10b_dis_îr_po°_¸_˙t
;

893 
œ√Numbî
)

895 
LANE0
:

896  
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√0_8b10b_nô_îr_po°_¸_˙t
;

897 
LANE1
:

898  
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√1_8b10b_nô_îr_po°_¸_˙t
;

899 
LANE2
:

900  
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√2_8b10b_nô_îr_po°_¸_˙t
;

901 
LANE3
:

902  
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√3_8b10b_nô_îr_po°_¸_˙t
;

907 
	}
}

916 
	$DP_E«bÀL™esNŸAlig√dC¡
(
boﬁ
 
íabÀ
)

918 
dp_sök
->
Æig√r
.
s
.
°©s
.
bf
.
œ√s_Æign_dë_í
 = 
íabÀ
;

919 
	}
}

928 
	$DP_L™esNŸAlignC¡Re£t
()

930 
dp_sök
->
Æig√r
.
s
.
°©s
.
bf
.
œ√s_nŸ_Æig√d_˙t_r°
 = 
åue
;

931 
dp_sök
->
Æig√r
.
s
.
°©s
.
bf
.
œ√s_nŸ_Æig√d_˙t_r°
 = 
Ál£
;

932 
	}
}

941 
	$DP_E«bÀRxByãReAlignC¡
(
boﬁ
 
íabÀ
)

943 
dp_sök
->
°©s
.
s
.
˙t_í_r°_gç
.
bf
.
dp_gt_rxbyãªÆign_˙t_í
 = 
íabÀ
;

944 
	}
}

953 
	$DP_RxByãReAlignRe£tC¡
()

955 
dp_sök
->
°©s
.
s
.
˙t_í_r°_gç
.
bf
.
dp_gt_rxbyãªÆign_˙t_r°
 = 
åue
;

956 
dp_sök
->
°©s
.
s
.
˙t_í_r°_gç
.
bf
.
dp_gt_rxbyãªÆign_˙t_r°
 = 
Ál£
;

957 
	}
}

966 
	$DP_LexGëDpFrq
((*
ˇŒback
)(
uöt32_t
))

968 c⁄° 
DpFªqCÆcuœã
 
dpFªqCÆcuœã
 =

970 .
max_cou¡
 = 
DP_MAX_COUNT
,

971 .
˛k_£l
 = 
DP_GT_TXUSRCLK2
,

973 
	`bb_t›_a7_gëDpFªq
(&
dpFªqCÆcuœã
, 
ˇŒback
);

974 
	}
}

982 
	$DP_LexSèπDpFªqDë
()

984 
uöt8_t
 
bw
 = 
dp_sök
->
c⁄figuøti⁄
.
bf
.
œ√_bô_øã
;

985 c⁄° 
DpFªqDëAuto
 
dpFªqDëAutoLﬂd
 =

987 .
comp_max_cou¡
 = 
CompMaxCou¡Ssc
[
bw
],

988 .
comp_mö_cou¡
 = 
CompMöCou¡
[
bw
],

990 
	`bb_t›_a7_dp_‰q_dë_auto
(&
dpFªqDëAutoLﬂd
);

991 
	}
}

1000 
	$DP_LexFrqDëI§
()

1002 
	`bb_t›_a7_˛órPídögO‹Irq
();

1003 i‡(!
	`DP_DpSökInRe£t
())

1005 
	`LexDpShutdownFrqH™dÀr
(
	`bb_t›_a7_gëCuºítFrqCou¡
());

1007 
	}
}

1016 
	$DP_LexC⁄figRxCdr
(
boﬁ
 
sscOn
)

1018 
	`bb_t›_a7_c⁄figRxCdr
(
sscOn
);

1019 
	}
}

1028 
AUX_LexMßFaûCode
 
	$DP_LexIsMßVÆid
(
uöt32_t
 
Âs
, uöt32_à
symbﬁClk
)

1030 
AUX_LexMßFaûCode
 
mßResu…
 = 
LEX_MSA_VALID
;

1032 c⁄° 
uöt32_t
 
˛ockMask
 = 10000000;

1033 c⁄° 
uöt32_t
 
mvid
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.mvid.
bf
.mvid;

1034 c⁄° 
uöt32_t
 
nvid
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.nvid.
bf
.nvid;

1035 c⁄° 
uöt32_t
 
hTŸÆ
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_0
.
bf
.
tŸÆ
;

1036 c⁄° 
uöt32_t
 
vTŸÆ
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_0
.
bf
.
tŸÆ
;

1037 c⁄° 
uöt8_t
 
cﬁ‹
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
misc
.
bf
.color;

1038 c⁄° 
boﬁ
 
width
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.width;

1039 c⁄° 
boﬁ
 
height
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.height;

1040 c⁄° 
boﬁ
 
hSyncWidth
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
sync_width
;

1041 c⁄° 
boﬁ
 
vSyncWidth
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
sync_width
;

1042 
boﬁ
 
n⁄ZîoMßVÆues
 = 
width
 && 
height
 && 
vSyncWidth
 && 
hSyncWidth
 && 
nvid
;

1043 c⁄° 
uöt8_t
 
tuSize
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
Æu
.
bf
.
tu_size
;

1045 if(
mvid
 > 
nvid
)

1048 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_STANDARD_BLANKING
);

1051 if(
	`DP_LexGŸCﬁ‹YCbCr422
())

1053 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
DP_YCBCR422_DETECTED
, 
cﬁ‹
);

1054 
mßResu…
 = 
LEX_MSA_YCBCR422
;

1056 if(
n⁄ZîoMßVÆues
 == 0)

1058 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_MSA_ALIGN_ERROR
,

1059 ((
height
 << 3Ë| (
width
 << 2Ë| (
hSyncWidth
 << 1Ë| (
vSyncWidth
 << 0)), 
nvid
);

1060 
mßResu…
 = 
LEX_MSA_ALIGN_ERROR
;

1062 if(
	`DP_LexIsCﬁ‹CodeVÆid
(
cﬁ‹
Ë&& 
tuSize
 !=0)

1064 
uöt32_t
 
pixñClock1
 = ((
uöt64_t
)
hTŸÆ
 * 
vTŸÆ
 * 
Âs
) / 1000;

1065 
uöt32_t
 
pixñClock2
 = ((
uöt64_t
)
mvid
 * 
symbﬁClk
Ë/ 
nvid
;

1066 
uöt32_t
 
absﬁuãDiffPixClock
 = (
pixñClock1
 > 
pixñClock2
) ?

1067 
pixñClock1
 - 
pixñClock2
 :ÖixelClock2 -ÖixelClock1;

1069 if(
absﬁuãDiffPixClock
 > 
˛ockMask
)

1071 
	`ûog_DP_STREAM_COMPONENT_3
(
ILOG_MAJOR_ERROR
, 
DP_PIXEL_CLOCK_ERROR
, 
pixñClock1
, 
pixñClock2
, 
absﬁuãDiffPixClock
);

1072 
mßResu…
 = 
LEX_MSA_NEED_REFRESH
;

1077 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_INVALID_MSA
, 
cﬁ‹
, 
tuSize
);

1078 
mßResu…
 = 
LEX_MSA_NEED_REFRESH
;

1081  
mßResu…
;

1082 
	}
}

1091 
	$DP_LexE«bÀSpdDr›Pkt
(
boﬁ
 
íabÀ
)

1093 
dp_sök
->
°ªam_exåa˘‹
.
s
.
cfg
.
bf
.
dr›_sdp_±p_pkt
 = 
íabÀ
;

1094 
	}
}

1103 
boﬁ
 
	$DP_IsAudioMuãd
()

1105  
dp_sök
->
°ªam_exåa˘‹
.
s
.
vbd
.s.
vbid
.
bf
.vbid & 
AUDIOMUTE_FLAG
;

1106 
	}
}

1115 
uöt8_t
 
	$DP_GëMaudVÆue
()

1117  
dp_sök
->
°ªam_exåa˘‹
.
s
.
vbd
.s.
vbid
.
bf
.
maud
;

1118 
	}
}

1127 
	$DP_LexE«bÀCou¡ögFømes
(
boﬁ
 
íabÀ
)

1129 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
Âs
.
bf
.
cou¡_í
 = 
íabÀ
;

1130 
	}
}

1140 
uöt32_t
 
	$DP_LexFømeCou¡
()

1142  
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
Âs
.
bf
.
cou¡
;

1143 
	}
}

1152 
boﬁ
 
	$DP_LexFªquícyIsVÆid
(
uöt32_t
 
‰eqCou¡
, 
uöt8_t
 
bw
)

1154  ((
‰eqCou¡
 >
CompMöCou¡
[
bw
]Ë&& (‰eqCou¡ <
CompMaxCou¡Ssc
[bw]));

1155 
	}
}

1164 
boﬁ
 
	$DP_LexGŸCﬁ‹YCbCr422
()

1166 
uöt8_t
 
cﬁ‹
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
misc
.
bf
.color;

1167 c⁄° 
BôsPîPixñTabÀ
 *
cﬁ‹TabÀ
 = 
	`m≠Cﬁ‹CodeToBôsPîPixñ
(
cﬁ‹
);

1169  (
cﬁ‹TabÀ
 && (cﬁ‹TabÀ->
cﬁ‹Mode
 =
TICO_E_MODE_YCbCr422
));

1170 
	}
}

1180 
	$DP_LexSëMaöLökB™dwidth
(
uöt8_t
 
b™dwidth
)

1182 
dp_sök
->
c⁄figuøti⁄
.
bf
.
œ√_bô_øã
 = 
b™dwidth
;

1183 
	}
}

1192 
MaöLökB™dwidth
 
	$DP_LexGëMaöLökB™dwidth
()

1194 c⁄° 
uöt8_t
 
bwTabÀ
[] =

1196 
BW_1_62_GBPS
, 
BW_2_70_GBPS
, 
BW_5_40_GBPS


1199  
bwTabÀ
[
dp_sök
->
c⁄figuøti⁄
.
bf
.
œ√_bô_øã
];

1200 
	}
}

1209 
	$DP_LexSëL™eCou¡
(
uöt8_t
 
œ√Cou¡
)

1211 
dp_sök
->
c⁄figuøti⁄
.
bf
.
œ√_num
 = 
œ√Cou¡
;

1212 
	}
}

1221 
	$DP_LexSëEnh™˚dFømögE«bÀ
(
boﬁ
 
íh™˚dFømögE«bÀ
)

1223 
dp_sök
->
c⁄figuøti⁄
.
bf
.
íh_‰m_í
 = 
íh™˚dFømögE«bÀ
;

1224 
	}
}

1233 
	$DP_LexSëTøöögP©ã∫Sequí˚
(
TøöögP©ã∫Sequí˚
 
çs
)

1235 
çs
)

1237 
TPS_3
:

1238 
dp_sök
->
Æig√r
.
s
.
c⁄åﬁ
.
bf
.
çs3_n_çs2
 = 1;

1241 
TPS_2
:

1242 
dp_sök
->
Æig√r
.
s
.
c⁄åﬁ
.
bf
.
çs3_n_çs2
 = 0;

1245 
TPS_0
:

1246 
TPS_1
:

1247 
CPAT2520_1
:

1248 
CPAT2520_2p
:

1249 
CPAT2520_2m
:

1250 
CPAT2520_3
:

1251 
PLTPAT
:

1252 
PRBS_7
:

1257 
	}
}

1266 
	$DP_LexCheckCxFifoOvîÊow
()

1268 
uöt16_t
 
ovîFlowC¡
 = 
dp_sök
->
°©s0
.
s
.
vid_c0_fifo_ovîÊow
.
bf
.vid_c0_fifo_overflow +

1269 
dp_sök
->
°©s0
.
s
.
vid_c1_fifo_ovîÊow
.
bf
.vid_c1_fifo_overflow +

1270 
dp_sök
->
°©s0
.
s
.
vid_c2_fifo_ovîÊow
.
bf
.vid_c2_fifo_overflow;

1272 if(
ovîFlowC¡
)

1274 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_STREAM_CXFIFO_OVERFLOW
);

1275 
	`DP_PrötLexSèts
();

1276 
	`i§CÆlback
(
DP_SINK_IRQ_PENDING_MSA_MAJORITY_FAIL_MASK
);

1277 
	`DP_E«bÀVideoSåómIrqO∆y
();

1279 
	}
}

1288 
	$DP_LexVideoInfo
()

1290 
uöt8_t
 
bw
 = 
dp_sök
->
c⁄figuøti⁄
.
bf
.
œ√_bô_øã
;

1291 c⁄° 
uöt32_t
 
b™dwidth
 = 
bw
 == 0x00 ? 162:

1292 
bw
 == 0x01 ? 270:

1293 
bw
 == 0x02 ? 540:

1294 
bw
 == 0x03 ? 810:

1296 
uöt8_t
 
cﬁ‹
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
misc
.
bf
.color;

1297 c⁄° 
uöt8_t
 
bµ
 = 
	`DP_GëBµ
(
cﬁ‹
);

1298 c⁄° 
uöt8_t
 
com¥essi⁄R©io
 = 
	`DP_GëCom¥essi⁄R©io
();

1300 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LC
, 
dp_sök
->
c⁄figuøti⁄
.
bf
.
œ√_num
 + 1);

1301 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
DP_BW
, 
b™dwidth
/100, bandwidth%100);

1302 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_ENHANCED_FRAMING
, 
dp_sök
->
c⁄figuøti⁄
.
bf
.
íh_‰m_í
);

1303 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_MVID
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
mvid
.
bf
.mvid);

1304 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_NVID
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
nvid
.
bf
.nvid);

1305 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_H_TOTAL
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_0
.
bf
.
tŸÆ
);

1306 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_H_START
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_0
.
bf
.
°¨t
);

1307 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_H_WIDTH
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
width
);

1308 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_H_POLARITY
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
pﬁ¨ôy
);

1309 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_H_SYNC_WIDTH
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
sync_width
);

1310 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_V_TOTAL
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_0
.
bf
.
tŸÆ
);

1311 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_V_START
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_0
.
bf
.
°¨t
);

1312 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_V_HEIGHT
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
height
);

1313 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_V_POLARITY
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
pﬁ¨ôy
);

1314 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_V_SYNC_WIDTH
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
sync_width
);

1315 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_Y_ONLY
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
misc
.
bf
.
y_⁄ly
);

1316 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_STEREO
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
misc
.
bf
.
°îeo
);

1317 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_INT_TOTAL
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
misc
.
bf
.
öt_tŸÆ
);

1318 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_CLK_SYNC
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
misc
.
bf
.
˛k_sync
);

1319 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_CS_PKT_LENGTH
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
cfg
.
bf
.
cs_pkt_Àngth
);

1320 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
DP_MSA_COLOR
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
misc
.
bf
.
cﬁ‹
, 
bµ
);

1321 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_BOND_ALIGN_DEBUG_STATS4
, 
dp_sök
->
Æig√r
.
s
.
debug
.s.
°©s4
.
bf
.
b⁄d_Æign_debug_°©s
);

1322 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_BOND_ALIGN_DEBUG_STATS3
, 
dp_sök
->
Æig√r
.
s
.
debug
.s.
°©s3
.
bf
.
com_dë_dbg
);

1323 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_BOND_ALIGN_DEBUG_STATS2
, 
dp_sök
->
Æig√r
.
s
.
debug
.s.
°©s2
.
bf
.
fifo_rd_í_dbg
);

1324 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_BOND_ALIGN_DEBUG_STATS1
, 
dp_sök
->
Æig√r
.
s
.
debug
.s.
°©s1
.
bf
.
°©e_dbg
);

1325 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_TPS_USE
, (
dp_sök
->
Æig√r
.
s
.
c⁄åﬁ
.
bf
.
çs3_n_çs2
 == 0 ? 2:3));

1326 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_TU_SIZE
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
Æu
.
bf
.
tu_size
);

1327 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_FPS
, 
	`DP_LEX_GëCou¡edFps
());

1328 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
DP_COMPRESSION_RATIO
, 
com¥essi⁄R©io
/10, compressionRatio%10);

1329 
	`UART_WaôF‹Tx
();

1330 
	}
}

1339 
	$DP_PrötLexSèts
()

1341 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C0_FIFO_OVERFLOW
, 
dp_sök
->
°©s0
.
s
.
vid_c0_fifo_ovîÊow
.
bf
.vid_c0_fifo_overflow);

1342 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C0_FIFO_UNDERFLOW
, 
dp_sök
->
°©s0
.
s
.
vid_c0_fifo_undîÊow
.
bf
.vid_c0_fifo_underflow);

1343 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C0_FIFO_LEVEL
, 
dp_sök
->
°©s0
.
s
.
vid_c0_fifo_Àvñ
.
bf
.vid_c0_fifo_level);

1344 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C0_FIFO_LEVEL_WATERMARK
, 
dp_sök
->
°©s0
.
s
.
vid_c0_fifo_Àvñ_w©îm¨k
.
bf
.vid_c0_fifo_level_watermark);

1345 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C0_SR_FULL
, 
dp_sök
->
°©s0
.
s
.
vid_c0_§_fuŒ
.
bf
.vid_c0_sr_full);

1346 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C1_FIFO_OVERFLOW
, 
dp_sök
->
°©s0
.
s
.
vid_c1_fifo_ovîÊow
.
bf
.vid_c1_fifo_overflow);

1347 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C1_FIFO_UNDERFLOW
, 
dp_sök
->
°©s0
.
s
.
vid_c1_fifo_undîÊow
.
bf
.vid_c1_fifo_underflow);

1348 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C1_FIFO_LEVEL
, 
dp_sök
->
°©s0
.
s
.
vid_c1_fifo_Àvñ
.
bf
.vid_c1_fifo_level);

1349 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C1_FIFO_LEVEL_WATERMARK
, 
dp_sök
->
°©s0
.
s
.
vid_c1_fifo_Àvñ_w©îm¨k
.
bf
.vid_c1_fifo_level_watermark);

1350 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C1_SR_FULL
, 
dp_sök
->
°©s0
.
s
.
vid_c1_§_fuŒ
.
bf
.vid_c1_sr_full);

1351 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C2_FIFO_OVERFLOW
, 
dp_sök
->
°©s0
.
s
.
vid_c2_fifo_ovîÊow
.
bf
.vid_c2_fifo_overflow);

1352 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C2_FIFO_UNDERFLOW
, 
dp_sök
->
°©s0
.
s
.
vid_c2_fifo_undîÊow
.
bf
.vid_c2_fifo_underflow);

1353 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C2_FIFO_LEVEL
, 
dp_sök
->
°©s0
.
s
.
vid_c2_fifo_Àvñ
.
bf
.vid_c2_fifo_level);

1354 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C2_FIFO_LEVEL_WATERMARK
, 
dp_sök
->
°©s0
.
s
.
vid_c2_fifo_Àvñ_w©îm¨k
.
bf
.vid_c2_fifo_level_watermark);

1355 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SINK_VID_C2_SR_FULL
, 
dp_sök
->
°©s0
.
s
.
vid_c2_§_fuŒ
.
bf
.vid_c2_sr_full);

1356 
	}
}

1365 
	$DP_PrötGçSèts
()

1367 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_GTP_STATS
);

1368 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_GT3_RXBYTE_ALIGN_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_gç
.
bf
.
dp_gt3_rxbyãªÆign_˙t
);

1369 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_GT0_RXBYTE_ALIGN_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_gç
.
bf
.
dp_gt0_rxbyãªÆign_˙t
);

1370 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_GT2_RXBYTE_ALIGN_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_gç
.
bf
.
dp_gt2_rxbyãªÆign_˙t
);

1371 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_GT1_RXBYTE_ALIGN_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_gç
.
bf
.
dp_gt1_rxbyãªÆign_˙t
);

1372 
	}
}

1382 
	$DP_Pröt8b10bEº‹Sèts
()

1384 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_8B10B_DISP_ERROR_STATS
);

1385 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_LANES_WITH_8B10B_ERR
 );

1387 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LANE_0_WITH_8B10B_DIS_ERR_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√0_8b10b_dis_îr_po°_¸_˙t
);

1388 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LANE_1_WITH_8B10B_DIS_ERR_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√1_8b10b_dis_îr_po°_¸_˙t
);

1389 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LANE_2_WITH_8B10B_DIS_ERR_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√2_8b10b_dis_îr_po°_¸_˙t
);

1390 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LANE_3_WITH_8B10B_DIS_ERR_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_8b10b_0
.
bf
.
œ√3_8b10b_dis_îr_po°_¸_˙t
);

1392 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_8B10B_NIT_ERROR_STATS
);

1393 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LANE_0_WITH_8B10B_NIT_ERR_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√0_8b10b_nô_îr_po°_¸_˙t
);

1394 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LANE_1_WITH_8B10B_NIT_ERR_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√1_8b10b_nô_îr_po°_¸_˙t
);

1395 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LANE_2_WITH_8B10B_NIT_ERR_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√2_8b10b_nô_îr_po°_¸_˙t
);

1396 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LANE_3_WITH_8B10B_NIT_ERR_CNT
, 
dp_sök
->
°©s
.
s
.
˙t_8b10b_1
.
bf
.
œ√3_8b10b_nô_îr_po°_¸_˙t
);

1398 
	}
}

1407 
	$DP_LexPrötSdpFifoSèts
()

1409 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_SDP_STATS
);

1410 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_FULL
, 
dp_sök
->
°©s1
.
s
.
sdp_fifo_fuŒ
.
bf
.sdp_fifo_full);

1411 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_EMPTY
, 
dp_sök
->
°©s1
.
s
.
sdp_fifo_em±y
.
bf
.sdp_fifo_empty);

1412 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_OVERFLOW
, 
dp_sök
->
°©s1
.
s
.
sdp_fifo_ovîÊow
.
bf
.sdp_fifo_overflow);

1413 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_UNDERFLOW
, 
dp_sök
->
°©s1
.
s
.
sdp_fifo_undîÊow
.
bf
.sdp_fifo_underflow);

1414 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_LEVEL
, 
dp_sök
->
°©s1
.
s
.
sdp_fifo_Àvñ
.
bf
.sdp_fifo_level);

1415 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_LEVEL_WATERMARK
, 
dp_sök
->
°©s1
.
s
.
sdp_fifo_Àvñ_w©îm¨k
.
bf
.sdp_fifo_level_watermark);

1416 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_SS_SE_BYTE_NUM
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
sdp
.s.
debug
.
bf
.
ss_£_ßme_cy˛e_byã_num
);

1417 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_PKT_SENT
, 
dp_sök
->
°©s1
.
s
.
sdp_pkt_£¡_˙t
.
bf
.sdp_pkt_sent_cnt);

1418 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_PK_SENT_WATERMARK
, 
dp_sök
->
°©s1
.
s
.
sdp_pkt_£¡_˙t_w©îm¨k
.
bf
.sdp_pkt_sent_cnt_watermark);

1419 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_SDP_TAG_STATS
);

1420 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_FULL
, 
dp_sök
->
°©s1
.
s
.
sdp_èg_fifo_fuŒ
.
bf
.sdp_tag_fifo_full);

1421 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_EMPTY
, 
dp_sök
->
°©s1
.
s
.
sdp_èg_fifo_em±y
.
bf
.sdp_tag_fifo_empty);

1422 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_OVERFLOW
, 
dp_sök
->
°©s1
.
s
.
sdp_èg_fifo_ovîÊow
.
bf
.sdp_tag_fifo_overflow);

1423 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_UNDERFLOW
, 
dp_sök
->
°©s1
.
s
.
sdp_èg_fifo_undîÊow
.
bf
.sdp_tag_fifo_underflow);

1424 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_LEVEL
, 
dp_sök
->
°©s1
.
s
.
sdp_èg_fifo_Àvñ
.
bf
.sdp_tag_fifo_level);

1425 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_LEVEL_WATERMARK
, 
dp_sök
->
°©s1
.
s
.
sdp_èg_fifo_Àvñ_w©îm¨k
.
bf
.sdp_tag_fifo_level_watermark);

1427 
	`ûog_DP_STREAM_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
DP_SDP_VBID
, 
dp_sök
->
°ªam_exåa˘‹
.
s
.
vbd
.s.
vbid
.
bf
.vbid,

1428 
dp_sök
->
°ªam_exåa˘‹
.
s
.
vbd
.s.
vbid
.
bf
.
maud
,

1429 
dp_sök
->
°ªam_exåa˘‹
.
s
.
vbd
.s.
vbid
.
bf
.
mvid
);

1430 
	}
}

1439 
	$DP_STREAM_LexRe£tIdÀP©ã∫C¡
()

1441 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug
.
bf
.
idÀ_∑âîn_˙t_r°
 = 1;

1442 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug
.
bf
.
idÀ_∑âîn_˙t_r°
 = 0;

1443 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_LEX_IDLE_PATTERN_CNT_RESET
);

1444 
	}
}

1455 
uöt8_t
 
	$DP_STREAM_LexGëP©ã∫C¡
()

1457  
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug
.
bf
.
idÀ_∑âîn_˙t
;

1458 
	}
}

1467 
	$DP_LexCÀ¨AutoFrqDë
()

1469 
‰qOutofR™gCou¡
 = 0;

1470 
	`TIMING_TimîSt›
(
‰qDëI¡îvÆ
);

1471 
	`bb_t›_a7_‰eqDëAutoE«bÀ
(
Ál£
);

1472 
	}
}

1480 
	$DP_LexDißbÀAŒIrq
()

1482 
dp_sök
->
úq
.
s
.
íabÀ
.
dw
 &~
DP_SINK_IRQ_ENABLES
;

1483 
	}
}

1491 
	$DP_LexE«bÀAudioMuã
()

1493 
dp_sök
->
úq
.
s
.
íabÀ
.
dw
 |
DP_SINK_IRQ_ENABLE_AUDIOMUTE_MASK
;

1494 
	}
}

1502 
	$DP_LexE«bÀSDP
()

1504 
dp_sök
->
°ªam_exåa˘‹
.
s
.
cfg
.
bf
.
sdp_í
 = 
åue
;

1505 
	}
}

1513 
uöt8_t
 
	$DP_LexGëBµ
()

1515 
uöt8_t
 
cﬁ‹
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
misc
.
bf
.color;

1516  
	`DP_GëBµ
(
cﬁ‹
);

1517 
	}
}

1525 
uöt8_t
 
	$DP_LexCÆcuœãAlu
(c⁄° 
uöt32_t
 
Âs
, c⁄° uöt32_à
symbﬁClock
)

1528 c⁄° 
uöt32_t
 
Nb¨
 = (
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
width
 * 
	`DP_LexGëBµ
()) /

1529 (8 * (
dp_sök
->
c⁄figuøti⁄
.
bf
.
œ√_num
 + 1));

1530 c⁄° 
uöt64_t
 
°ªamClk1000
 = (uöt64_t)
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_0
.
bf
.
tŸÆ
*

1531 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_0
.
bf
.
tŸÆ
 *

1532 
Âs
;

1533 
uöt32_t
 
dpWidthA˘iveT¨gë
 = ((
uöt64_t
)
symbﬁClock
 * 1000 * 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
width
) /

1534 
°ªamClk1000
;

1536 
uöt32_t
 
fuŒTuNum
 = 0;

1537 
uöt32_t
 
tu_size
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
Æu
.
bf
.tu_size;

1538 i‡(
tu_size
 != 0)

1540 
fuŒTuNum
 = (
dpWidthA˘iveT¨gë
 % 
tu_size
) != 0 ?

1541 (
dpWidthA˘iveT¨gë
 / 
tu_size
) :

1542 (
dpWidthA˘iveT¨gë
 / 
tu_size
)-1;

1548 
uöt16_t
 
œ°Tu
 = 
	`MIN
(
dpWidthA˘iveT¨gë
 - (
fuŒTuNum
 * 
tu_size
), 
Nb¨
 / (fullTuNum + 1));

1550 
uöt16_t
 
vsInTu
 = 0;

1552 if(((
Nb¨
 - 
œ°Tu
Ë% 
fuŒTuNum
) == 0)

1554 
vsInTu
 = ((
Nb¨
 - 
œ°Tu
Ë/ 
fuŒTuNum
) - 1;

1558 
vsInTu
 = (
Nb¨
 - 
œ°Tu
Ë/ 
fuŒTuNum
;

1561  
vsInTu
;

1562 
	}
}

1571 
	$DP_PrötLexI°©usMesßges
()

1573 
uöt8_t
 
cﬁ‹
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
misc
.
bf
.color;

1574 
uöt8_t
 
ªÆ_cﬁ‹
 = 
cﬁ‹
<<1;

1575 c⁄° 
uöt8_t
 
bpc
 = 
	`DP_GëBµ
(
cﬁ‹
)/3;

1576 
uöt16_t
 
width
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.width;

1577 
uöt16_t
 
height
 = 
dp_sök
->
°ªam_exåa˘‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.height;

1578 
uöt32_t
 
Âs
 = 
	`DP_LEX_GëCou¡edFps
();

1579 
uöt16_t
 
Âs_1
 = 
Âs
/1000;

1580 
uöt16_t
 
Âs_2
 = (
Âs
%1000)/10;

1581 
	`ILOG_i°©us
(
ISTATUS_VIDEO_RESOLUTION
, 6, 
width
, 
height
, 
Âs_1
, 
Âs_2
, 
bpc
, 
ªÆ_cﬁ‹
);

1582 
	}
}

1591 
	$DP_E«bÀVideoSåómIrqO∆y
()

1594 
dp_sök
->
úq
.
s
.
íabÀ
.
dw
 = (
DP_SINK_IRQ_ENABLE_NOVIDEOSTREAM_MASK
 | 
DP_SINK_IRQ_ENABLE_TU_SIZE_RDY_MASK
);

1595 
	}
}

1605 
uöt32_t
 
	$CompuãEncodîBudgë
()

1607  
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
cs_pkt_Àngth
 *ÜexEncodîP¨ams.ÀxSåómP¨amëîs.
v
.
height
 * 8;

1608 
	}
}

1617 
uöt16_t
 
	$CompuãEncodîPackëLígth
()

1620 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_ERROR
, 
DP_COLOR_CODE
, 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
misc
.
cﬁ‹
);

1622 
ÀxEncodîP¨ams
.
bµT
 = 
	`m≠Cﬁ‹CodeToBôsPîPixñ
÷exEncodîP¨ams.
ÀxSåómP¨amëîs
.
misc
.
cﬁ‹
);

1623 
ÀxEncodîP¨ams
.
bôsPîComp⁄ít
 = 
	`CLAMP
÷exEncodîP¨ams.
bµT
->
bµ
 / 
NUM_PIX_COMPONENTS
, 8, 12);

1625 c⁄° 
uöt16_t
 
width
 = 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
h
.width;

1626 c⁄° 
uöt16_t
 
height
 = 
ÀxEncodîP¨ams
.
ÀxSåómP¨amëîs
.
v
.height;

1628 c⁄° 
uöt8_t
 
bôsPîPixñ
 = 
NUM_PIX_COMPONENTS
 * 
ÀxEncodîP¨ams
.
bôsPîComp⁄ít
;

1630 c⁄° 
uöt32_t
 
budgëPrime
 = (uöt32_t)(
width
 * 
height
 * 
bôsPîPixñ
 * 10Ë/ (uöt32_t)(8 * 
	`DP_GëCom¥essi⁄R©io
());

1632 c⁄° 
uöt16_t
 
ícodîPackëLígth
 = 
budgëPrime
 /(
height
 * 8);

1634 
dp_sök
->
°ªam_exåa˘‹
.
s
.
cfg
.
bf
.
cs_pkt_Àngth
 = 
ícodîPackëLígth
;

1635  
ícodîPackëLígth
;

1636 
	}
}

1647 
	$DP_SökC⁄figuªDebugMSA
()

1649 if(
dp_sök
->
c⁄figuøti⁄
.
bf
.
debug_mß_í
)

1708 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
mvid
.
bf
.mvid = 30038;

1709 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
nvid
.
bf
.nvid = 32768;

1711 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
h‹iz⁄èl_0
.
bf
.
tŸÆ
 = 2200;

1712 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
h‹iz⁄èl_0
.
bf
.
°¨t
 = 192;

1713 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
h‹iz⁄èl_1
.
bf
.
width
 = 1920;

1714 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
h‹iz⁄èl_1
.
bf
.
pﬁ¨ôy
 = 0;

1715 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
h‹iz⁄èl_1
.
bf
.
sync_width
 = 44;

1717 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
vîtiˇl_0
.
bf
.
tŸÆ
 = 1125;

1718 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
vîtiˇl_0
.
bf
.
°¨t
 = 41;

1719 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
vîtiˇl_1
.
bf
.
height
 = 1080;

1720 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
vîtiˇl_1
.
bf
.
pﬁ¨ôy
 = 0;

1721 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
vîtiˇl_1
.
bf
.
sync_width
 = 5;

1723 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
misc
.
bf
.
y_⁄ly
 = 0;

1724 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
misc
.
bf
.
°îeo
 = 0;

1725 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
misc
.
bf
.
öt_tŸÆ
 = 0;

1726 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
misc
.
bf
.
˛k_sync
 = 0;

1737 
dp_sök
->
°ªam_exåa˘‹
.
s
.
debug_mß
.s.
misc
.
bf
.
cﬁ‹
 = 0x10;

1739 
dp_sök
->
°ªam_exåa˘‹
.
s
.
cfg
.
bf
.
cs_pkt_Àngth
 = 180;

1741 
	}
}

1750 
	$DP_SökSëRódCÀ¨Sèts
()

1752 
dp_sök
->
°©s0
.
s
.
rd2˛r_c⁄fig
.
dw
 = 
dp_sök_°©s0_rd2˛r_c⁄fig_WRITEMASK
;

1753 
dp_sök
->
°©s1
.
s
.
rd2˛r_c⁄fig
.
dw
 = 
dp_sök_°©s1_rd2˛r_c⁄fig_WRITEMASK
;

1754 
	}
}

1779 
	$DP_ProgømSåómEncodî
(

1780 
uöt32_t
 
budgë
,

1781 
uöt16_t
 
width
,

1782 
uöt16_t
 
height
,

1783 
uöt8_t
 
subSam∂ögMode
,

1784 
uöt8_t
 
bpc
)

1788 
tico_íc
->
tico_e_width
.
dw
 = (
tico_ícodî_tico_e_width
Ë{.
bf
={.tico_e_width=
width
}}.dw;

1789 
tico_íc
->
tico_e_height
.
dw
 = (
tico_ícodî_tico_e_height
Ë{.
bf
={.tico_e_height=
height
}}.dw;

1790 
tico_íc
->
tico_e_comp
.
dw
 = (
tico_ícodî_tico_e_comp
Ë{.
bf
={.tico_e_comp=
NUM_PIX_COMPONENTS
}}.dw;

1791 
tico_íc
->
tico_e_mode
.
dw
 = (
tico_ícodî_tico_e_mode
Ë{.
bf
={.tico_e_mode=
subSam∂ögMode
}}.dw;

1793 
tico_íc
->
tico_e_hlvls
.
dw
 = (
tico_ícodî_tico_e_hlvls
Ë{.
bf
={.tico_e_hlvls=5u}}.dw;

1795 
tico_íc
->
tico_e_nbr
.
dw
 = (
tico_ícodî_tico_e_nbr
Ë{.
bf
={.tico_e_nbr=5u}}.dw;

1796 
tico_íc
->
tico_e_bgt
.
dw
 = (
tico_ícodî_tico_e_bgt
Ë{.
bf
={.tico_e_bgt=
budgë
}}.dw;

1797 
tico_íc
->
tico_e_vid_dïth
.
dw
 = (
tico_ícodî_tico_e_vid_dïth
Ë{.
bf
={.tico_e_vid_dïth=
bpc
}}.dw;

1798 
tico_íc
->
tico_e_∂ay_mode
.
dw
 = (
tico_ícodî_tico_e_∂ay_mode
Ë{.
bf
={.tico_e_play_mode=1u}}.dw;

1799 
	}
}

1808 
	$LexDpShutdownFrqH™dÀr
(
uöt32_t
 
dëe˘edFrqCou¡
)

1810 i‡(
‰qOutofR™gCou¡
 >= 5)

1812 
	`DP_LexCÀ¨AutoFrqDë
();

1813 
	`i§CÆlback
(
BB_TOP_IRQ_PENDING_FREQ_DET_DP_OOR_MASK
);

1817 
uöt8_t
 
bw
 = 
dp_sök
->
c⁄figuøti⁄
.
bf
.
œ√_bô_øã
;

1819 i‡(
	`DP_LexFªquícyIsVÆid
(
dëe˘edFrqCou¡
, 
bw
))

1822 
‰qOutofR™gCou¡
 = 0;

1823 
	`TIMING_TimîSt›
(
‰qDëI¡îvÆ
);

1824 
	`DP_LexSèπDpFªqDë
();

1828 
‰qOutofR™gCou¡
++;

1829 
	`bb_t›_a7_‰eqDëAutoE«bÀ
(
Ál£
);

1830 
	`TIMING_TimîSèπ
(
‰qDëI¡îvÆ
);

1831 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
DP_LEX_FRQ_OOR
, 
‰qOutofR™gCou¡
, 
dëe˘edFrqCou¡
);

1834 
	}
}

1843 
	$DP_LexFrqDëI¡îvÆH™dÀr
()

1845 
	`DP_LexGëDpFrq
(
LexDpShutdownFrqH™dÀr
);

1846 
	}
}

1857 
uöt8_t
 
	$DP_GëCom¥essi⁄R©io
()

1859 
uöt8_t
 
com¥essi⁄R©io
;

1860 
dpC⁄figPåSåóm
->
com¥essi⁄R©io
)

1862 
LEX_COMP_RATIO_2_1
:

1863 
com¥essi⁄R©io
 = 
COMPRESSION_2
;

1866 
LEX_COMP_RATIO_DEFAULT
:

1868 
LEX_COMP_RATIO_4_1
:

1869 
com¥essi⁄R©io
 = 
COMPRESSION_4
;

1872 
LEX_COMP_RATIO_6_1
:

1873 
com¥essi⁄R©io
 = 
COMPRESSION_6
;

1877 
	`üs£π_DP_STREAM_COMPONENT_1
(
Ál£
, 
DP_INVALID_COMP_RATIO
, 
dpC⁄figPåSåóm
->
com¥essi⁄R©io
);

1880  
com¥essi⁄R©io
;

1881 
	}
}

	@components/dp_stream/src/dp_stream_loc.h

11 #i‚de‡
DP_STREAM_LOC_H


12 
	#DP_STREAM_LOC_H


	)

15 
	~<iba£.h
>

18 
	#TICO_E_MODE_RGB
 0b0000

	)

19 
	#TICO_E_MODE_YCbCr422
 0b0001

	)

20 
	#TICO_E_MODE_YCbCr444
 0b1000

	)

23 
uöt32_t
 
	tRexDpI¡îru±s
;

26 
	eCﬁ‹F‹m©


28 
	mLEGACY_RGB_MODE
,

29 
	mCEA_RGB
,

30 
	mRGB_WIDE_GAMUT_FIXED_POINT
,

31 
	mRGB_WIDE_GAMUT_FLOATING_POINT
,

32 
	mY_ONLY
,

33 
	mRAW
,

34 
	mYCBCR
,

35 
	mXVYCC
,

36 
	mADOBE_RGB
,

37 
	mDCI_P3
,

38 
	mCOLOR_PROFILE


41 
	sBôsPîPixñTabÀ


43 
uöt8_t
 
	mcﬁ‹Code
;

44 
uöt8_t
 
	mbµ
;

45 
uöt8_t
 
	mcﬁ‹Mode
;

46 
Cﬁ‹F‹m©
 
	mf‹m©
;

51 
	$DP_LexSëMaöLökB™dwidth
(
uöt8_t
 
b™dwidth
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

52 
MaöLökB™dwidth
 
	$DP_LexGëMaöLökB™dwidth
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

53 
	$DP_LexSëL™eCou¡
(
uöt8_t
 
œ√Cou¡
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

54 
	$DP_LexSëEnh™˚dFømögE«bÀ
(
boﬁ
 
íh™˚dFømögE«bÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

55 
	$DP_LexSëTøöögP©ã∫Sequí˚
(
TøöögP©ã∫Sequí˚
 
çs
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

56 
	$DP_PrötLexSèts
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

57 
	$DP_PrötGçSèts
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

58 
	$DP_LexPrötSdpFifoSèts
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

59 
	$DP_Pröt8b10bEº‹Sèts
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

62 
	$DP_RexISRInô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

63 
	$DP_RexSëMaöLökB™dwidth
(
uöt8_t
 
b™dwidth
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

64 
	$DP_RexSëL™eCou¡
(
uöt8_t
 
œ√Cou¡
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

65 
	$DP_RexSëEnh™˚dFømögE«bÀ
(
boﬁ
 
íh™˚dFømögE«bÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

66 
	$DP_RexSëTøöögP©ã∫Sequí˚
(
TøöögP©ã∫Sequí˚
 
çs
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

67 
	$DP_RexVideoInfo
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexatext")));

68 
	$DP_RexSèts
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

69 
	$DP_RexAluS©s
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

70 
	$DP_RexFsmS©s
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

71 
	$DP_RexPrötSdpFifoSèts
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

74 c⁄° 
BôsPîPixñTabÀ
 *
	`m≠Cﬁ‹CodeToBôsPîPixñ
(
uöt8_t
 
cﬁ‹Code
);

75 
boﬁ
 
	$DP_LexIsCﬁ‹CodeVÆid
(
uöt8_t
 
cﬁ‹Code
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

76 
uöt8_t
 
	`DP_GëBµ
(uöt8_à
cﬁ‹Code
);

79 
	`AUX_PrötFöÆLökSëtögs
();

80 
uöt32_t
 
	`DP_LEX_GëCou¡edFps
();

	@components/dp_stream/src/dp_stream_log.h

11 #i‚de‡
DP_STREAM_LOG_H


12 
	#DP_STREAM_LOG_H


	)

15 
	~<¥oje˘_comp⁄íts.h
>

16 
	~<ûog.h
>

23 
	$ILOG_CREATE
(
DP_STREAM_COMPONENT
)

24 
	`ILOG_ENTRY
(
DP_INVALID_BANDWIDTH
, "Invalid bandwidth setting %dátÜine %d\n")

25 
	`ILOG_ENTRY
(
DP_INVALID_LANE_COUNT
, "InvalidÜane count setting %dátÜine %d\n")

26 
	`ILOG_ENTRY
(
DP_SETTING_TRAINING_PATTERN
, "SettingÅrainingÖattern %d\n")

27 
	`ILOG_ENTRY
(
DP_SCRAMBLE_EN
, "ScramblingÉnabled = %d\n")

28 
	`ILOG_ENTRY
(
DP_DESCRAMBLE_EN
, "DescramblingÉnabled = %d\n")

29 
	`ILOG_ENTRY
(
DP_INVALID_VALUE
, "DP Has Wrong Value. mvid = %d,Çvid = %d,Üc= %d\n")

30 
	`ILOG_ENTRY
(
DP_INVALID_VALUE2
, "DP Has Wrong Value. vs0 = %d,Åu_size = %d, bpp = %d\n")

31 
	`ILOG_ENTRY
(
DP_LEX_TU_SIZE_RDY
, "Got TU sizeÑeady interrupt:Åu_size = %d\n")

32 
	`ILOG_ENTRY
(
DP_RESET_SINK
, "Reset DP Sink = %d | (1:reset, 0:take out ofÑeset)\n")

33 
	`ILOG_ENTRY
(
DP_RESET_ENC
, "Reset TICO Encoder = %d | (1:reset, 0:take out ofÑeset)\n")

34 
	`ILOG_ENTRY
(
DP_ENABLING_TICO_ENC
, "Enabling TICOÉncoder\n")

35 
	`ILOG_ENTRY
(
DP_CONFIGURE_ENCODER_EXTRACTOR
, "ConfiguringÉncoderÉxtractor\n")

36 
	`ILOG_ENTRY
(
DP_COMMAND_MODE
, "Put TICOÉncoder in command mode\n")

37 
	`ILOG_ENTRY
(
DP_ENABLING_TICO_DEC
, "Enabling TICO decoder\n")

38 
	`ILOG_ENTRY
(
DP_MSA_PARAMS
, "MSA MVID value = %dánd NVID value = %dátÜine = %d\n")

39 
	`ILOG_ENTRY
(
DP_MSA_TWIDTH
, "MSAÅotal_width = %dándÜine duration = %dátÜine = %d\n")

40 
	`ILOG_ENTRY
(
DP_COLOR_CODE
, "Color Code = 0x%x\n")

41 
	`ILOG_ENTRY
(
DP_INVALID_MSA
, "Invalid MSA, colorCode = 0x%x,ÅuSize = %d\n")

42 
	`ILOG_ENTRY
(
DP_MSA_ALIGN_ERROR
, "MSA Align Error, height(b3), width(b2), hSyncWidth(b1), vSyncWidth(b0) = 0x%x,Çvid = %d\n")

43 
	`ILOG_ENTRY
(
DP_PIXEL_CLOCK_ERROR
, "Invalid MSA, Pixel Clock1(%d) & Pixel Clock2(%d)áre different by %d\n")

44 
	`ILOG_ENTRY
(
DP_LEX_RESET_LANE_ERR_CNT
, "8b10b Error CountÑeset\n")

45 
	`ILOG_ENTRY
(
DP_LAST_TU_ZERO
, "Last Tu is zero, manifulate Last Tu\n")

46 
	`ILOG_ENTRY
(
DP_SET_LANE
, "RexÑequestÅo setÜane count %d, RTL %d\n")

47 
	`ILOG_ENTRY
(
DP_ALIGNER_CONTROL
, "Aligner En(1)/Disable(0): %d, TPS: %d\n")

48 
	`ILOG_ENTRY
(
DP_YCBCR422_DETECTED
, "YCbCr422 is detected. Color code:0x%x\n")

49 
	`ILOG_ENTRY
(
DP_INVALID_COLOR
, "Invalid color code: 0x%x\n")

52 
	`ILOG_ENTRY
(
DP_VBD_MAJORITY_FAIL
, "DP VBD Majority Fail interrupt occurred\n")

53 
	`ILOG_ENTRY
(
DP_MSA_MAJORITY_FAIL
, "DP MSA Majority Fail interrupt occurred\n")

54 
	`ILOG_ENTRY
(
DP_NO_VID_STREAM
, "DP No Video Stream status = %d\n")

55 
	`ILOG_ENTRY
(
DP_AUDIO_MUTE
, "DP Audio Mute status = %d\n")

56 
	`ILOG_ENTRY
(
DP_STREAM_CLEAR_CXFIFO
, "Read Cx Fifo OverflowÅo clear it. C0:%d, C1:%d, C2:%d\n")

57 
	`ILOG_ENTRY
(
DP_STREAM_CXFIFO_OVERFLOW
, "DP Stream Extractor Overflow detected by Cx Fifo Overflow\n")

58 
	`ILOG_ENTRY
(
DP_STREAM_EXTRACTOR_OVERFLOW
, "DP Stream Extractor Overflow interrupt occurred: dpInt:0x%x\n")

59 
	`ILOG_ENTRY
(
DP_STREAM_EXTRACTOR_UNDERFLOW
, "DP Stream Extractor Underflow interrupt occurred\n")

60 
	`ILOG_ENTRY
(
DP_BOND_ALIGN_DONE
, "DP Bond Align Done interrupt occurred\n")

61 
	`ILOG_ENTRY
(
DP_LANES_WITH_8B10B_ERR
, "DP Lanes with 8b10bÉrror interrupt occurred\n")

62 
	`ILOG_ENTRY
(
DP_GT_RXBYTE_REALIGN
, "DP GTP RX byteÑe-align interrupt occurred\n")

63 
	`ILOG_ENTRY
(
DP_ALIGNER_FIFO_OVERFLOW
, "DP Aligner Fifo Overflow interrupt occurred\n")

64 
	`ILOG_ENTRY
(
DP_FIRST_IDLE_PATTERN
, "DP First idleÖattern interrupt occured \n")

65 
	`ILOG_ENTRY
(
DP_ALIGNER_FIFO_UNDERFLOW
, "DP Aligner Fifo Underflow interrupt occurred\n")

66 
	`ILOG_ENTRY
(
DP_EDID_CHANGE
, "Edid changedÅo %d dueÅo Standard blanking\n")

67 
	`ILOG_ENTRY
(
DP_BER_ERR_CNT
, "DP Link Quality managementÉrror Threshold = %d Error count = %d\n")

68 
	`ILOG_ENTRY
(
DP_LEX_SDP_FIFO_OF
, "SDP fifo overflow = %d or Underflow occured = %d\n")

69 
	`ILOG_ENTRY
(
DP_LEX_FRQ_OOR
, "DP freq out ofÑange count = %d , Frq Count = %d\n")

72 
	`ILOG_ENTRY
(
DP_DECODER_ERR_FLAG
, "DP Decoder Error Flag interrupt occurred\n")

73 
	`ILOG_ENTRY
(
DP_FIFO_PIX_0_UNDERFLOW
, "DP FIFO PIX 0 Underflow interrupt occurred\n")

74 
	`ILOG_ENTRY
(
DP_FIFO_PIX_0_OVERFLOW
, "DP FIFO PIX 0 Overflow interrupt occurred\n")

75 
	`ILOG_ENTRY
(
DP_FIFO_SDP_UNDERFLOW
, "DP FIFO SDP Underflow interrupt occurred\n")

76 
	`ILOG_ENTRY
(
DP_FIFO_SDP_OVERFLOW
, "DP FIFO SDP Overflow interrupt occurred\n")

77 
	`ILOG_ENTRY
(
DP_FIFO_CS_UNDERFLOW
, "DP FIFO CS Underflow interrupt occurred\n")

78 
	`ILOG_ENTRY
(
DP_FIFO_CS_OVERFLOW
, "DP FIFO CS Overflow interrupt occurred\n")

79 
	`ILOG_ENTRY
(
DP_VIDEO_STREAM_END
, "DP Video Stream End interrupt occurred\n")

80 
	`ILOG_ENTRY
(
IDLE_PATTERN_INTERRUPT
, "DP IdleÖattern interrupt occurred\n")

81 
	`ILOG_ENTRY
(
DP_FIFO_SDP_TAG_UNDERFLOW
, "DP FIFO SDP TAG UNDERFLOW interrupt occured\nÑunning count = %d\n,ássociated frameÇumber = %d\n")

82 
	`ILOG_ENTRY
(
DP_FIFO_SDP_TAG_OVERFLOW
, "DP FIFO SDP TAG OVERFLOW interrupt occured\nÑunning count = %d\n,ássociated frameÇumber = %d\n")

84 
	`ILOG_ENTRY
(
DP_SDP_MAUD
, "DP sdp AudioMute flag status = %d || Maud set value = %d || Maud method select = %d\n")

85 
	`ILOG_ENTRY
(
DP_SDP_VBID
, "DP sdp vbid = 0x%x || Maud = %d || Mvid = %d\n")

87 
	`ILOG_ENTRY
(
DP_LC
, "Lane Count = %d\n")

88 
	`ILOG_ENTRY
(
DP_BW
, "Bandwidth = %d.%2d Gbps\n")

89 
	`ILOG_ENTRY
(
DP_ENHANCED_FRAMING
, "Enhanced Framing = %d\n")

90 
	`ILOG_ENTRY
(
DP_MSA_MVID
, "Mvid = %d\n")

91 
	`ILOG_ENTRY
(
DP_MSA_NVID
, "Nvid = %d\n")

92 
	`ILOG_ENTRY
(
DP_MSA_H_TOTAL
, "H Total = %d\n")

93 
	`ILOG_ENTRY
(
DP_MSA_H_START
, "H Start = %d\n")

94 
	`ILOG_ENTRY
(
DP_MSA_H_WIDTH
, "H Width = %d\n")

95 
	`ILOG_ENTRY
(
DP_MSA_H_POLARITY
, "H Polarity = %d\n")

96 
	`ILOG_ENTRY
(
DP_MSA_H_SYNC_WIDTH
, "H Sync Width = %d\n")

97 
	`ILOG_ENTRY
(
DP_MSA_V_TOTAL
, "V Total = %d\n")

98 
	`ILOG_ENTRY
(
DP_MSA_V_START
, "V Start = %d\n")

99 
	`ILOG_ENTRY
(
DP_MSA_V_HEIGHT
, "V Height = %d\n")

100 
	`ILOG_ENTRY
(
DP_MSA_V_POLARITY
, "V Polarity = %d\n")

101 
	`ILOG_ENTRY
(
DP_MSA_V_SYNC_WIDTH
, "V Sync Width = %d\n")

102 
	`ILOG_ENTRY
(
DP_MSA_Y_ONLY
, "Misc Y Only = %d\n")

103 
	`ILOG_ENTRY
(
DP_MSA_STEREO
, "Misc Stereo = %d\n")

104 
	`ILOG_ENTRY
(
DP_MSA_INT_TOTAL
, "Misc Int Total = %d\n")

105 
	`ILOG_ENTRY
(
DP_MSA_CLK_SYNC
, "Misc Clock Sync = %d\n")

106 
	`ILOG_ENTRY
(
DP_CS_PKT_LENGTH
, "CS Packet Length = %d\n")

107 
	`ILOG_ENTRY
(
DP_MSA_COLOR
, "Color Code = 0x%xánd BPP = %d\n")

108 
	`ILOG_ENTRY
(
DP_SINK_BOND_ALIGN_DEBUG_STATS4
, "bond_align_debug_stats = 0x%x\n")

109 
	`ILOG_ENTRY
(
DP_SINK_BOND_ALIGN_DEBUG_STATS3
, "com_det_dbg = 0x%x\n")

110 
	`ILOG_ENTRY
(
DP_SINK_BOND_ALIGN_DEBUG_STATS2
, "fifo_rd_en_dbg = 0x%x\n")

111 
	`ILOG_ENTRY
(
DP_SINK_BOND_ALIGN_DEBUG_STATS1
, "state_dbg = 0x%x\n")

112 
	`ILOG_ENTRY
(
DP_TPS_USE
, "TPSÖattern used = %d\n")

113 
	`ILOG_ENTRY
(
DP_TU_SIZE
, "Tu Size = %d\n")

114 
	`ILOG_ENTRY
(
DP_FPS
, "FramesÖer second = %d\n")

115 
	`ILOG_ENTRY
(
DP_COMPRESSION_RATIO
, "TICO compressionÑatio = %d.%dÅo 1\n")

117 
	`ILOG_ENTRY
(
DP_STATS_0
, "**** DP STATS ****\n")

118 
	`ILOG_ENTRY
(
DP_SINK_VID_C0_FIFO_OVERFLOW
, "vid_c0_fifo_overflow = %d\n")

119 
	`ILOG_ENTRY
(
DP_SINK_VID_C0_FIFO_UNDERFLOW
, "vid_c0_fifo_underflow = %d\n")

120 
	`ILOG_ENTRY
(
DP_SINK_VID_C0_FIFO_LEVEL
, "vid_c0_fifo_level = %d\n")

121 
	`ILOG_ENTRY
(
DP_SINK_VID_C0_FIFO_LEVEL_WATERMARK
, "vid_c0_fifo_level_watermark = %d\n")

122 
	`ILOG_ENTRY
(
DP_SINK_VID_C0_SR_FULL
, "vid_c0_sr_full = %d\n")

123 
	`ILOG_ENTRY
(
DP_SINK_VID_C1_FIFO_OVERFLOW
, "vid_c1_fifo_overflow = %d\n")

124 
	`ILOG_ENTRY
(
DP_SINK_VID_C1_FIFO_UNDERFLOW
, "vid_c1_fifo_underflow = %d\n")

125 
	`ILOG_ENTRY
(
DP_SINK_VID_C1_FIFO_LEVEL
, "vid_c1_fifo_level = %d\n")

126 
	`ILOG_ENTRY
(
DP_SINK_VID_C1_FIFO_LEVEL_WATERMARK
, "vid_c1_fifo_level_watermark = %d\n")

127 
	`ILOG_ENTRY
(
DP_SINK_VID_C1_SR_FULL
, "vid_c1_sr_full = %d\n")

128 
	`ILOG_ENTRY
(
DP_SINK_VID_C2_FIFO_OVERFLOW
, "vid_c2_fifo_overflow = %d\n")

129 
	`ILOG_ENTRY
(
DP_SINK_VID_C2_FIFO_UNDERFLOW
, "vid_c2_fifo_underflow = %d\n")

130 
	`ILOG_ENTRY
(
DP_SINK_VID_C2_FIFO_LEVEL
, "vid_c2_fifo_level = %d\n")

131 
	`ILOG_ENTRY
(
DP_SINK_VID_C2_FIFO_LEVEL_WATERMARK
, "vid_c2_fifo_level_watermark = %d\n")

132 
	`ILOG_ENTRY
(
DP_SINK_VID_C2_SR_FULL
, "vid_c2_sr_full = %d\n")

134 
	`ILOG_ENTRY
(
DP_SOURCE_FIFO_PIX_0_OVERFLOW
, "fifo_pix_0_overflow = %d\n")

135 
	`ILOG_ENTRY
(
DP_SOURCE_FIFO_PIX_0_UNDERFLOW
, "fifo_pix_0_underflow = %d\n")

136 
	`ILOG_ENTRY
(
DP_SOURCE_PIX_0_SR_UNDERFLOW
, "pix_0_sr_underflow = %d\n")

137 
	`ILOG_ENTRY
(
DP_SOURCE_PIX_1_SR_UNDERFLOW
, "pix_1_sr_underflow = %d\n")

138 
	`ILOG_ENTRY
(
DP_SOURCE_PIX_2_SR_UNDERFLOW
, "pix_2_sr_underflow = %d\n")

139 
	`ILOG_ENTRY
(
DP_SOURCE_PIX_3_SR_UNDERFLOW
, "pix_3_sr_underflow = %d\n")

140 
	`ILOG_ENTRY
(
DP_SOURCE_FIFO_PIX_0_LEVEL_WATERMARK
, "fifo_pix_0_level_watermark = %d\n")

141 
	`ILOG_ENTRY
(
DP_SOURCE_FIFO_PIX_0_LEVEL
, "fifo_pix_0_level = %d\n")

142 
	`ILOG_ENTRY
(
DP_SOURCE_FIFO_CS_OVERFLOW
, "fifo_cs_overflow = %d\n")

143 
	`ILOG_ENTRY
(
DP_SOURCE_FIFO_CS_UNDERFLOW
, "fifo_cs_underflow = %d\n")

144 
	`ILOG_ENTRY
(
DP_SOURCE_FIFO_CS_LEVEL
, "fifo_cs_level = %d\n")

145 
	`ILOG_ENTRY
(
DP_SOURCE_FIFO_CS_LEVEL_WATERMARK
, "fifo_cs_level_watermark = %d\n")

147 
	`ILOG_ENTRY
(
DP_VS_VALUE
, "Average Valid Symbol: Int %d: Fraction %d /1000\n")

148 
	`ILOG_ENTRY
(
DP_ALU_STATS
, "**** DP_ALU_STATS ****\n")

149 
	`ILOG_ENTRY
(
DP_WIDTH_ACTIVE
, "dp_width_active = %d\n")

150 
	`ILOG_ENTRY
(
DP_WIDTH_TOTAL
, "dp_width_total = %d\n")

151 
	`ILOG_ENTRY
(
DP_FULL_TU_SIZE
, "full_tu_size = %d\n")

152 
	`ILOG_ENTRY
(
DP_LAST_TU_SIZE
, "last_tu_size = %d\n")

153 
	`ILOG_ENTRY
(
DP_FULL_TU_NUM
, "full_tu_num = %d\n")

154 
	`ILOG_ENTRY
(
DP_CPU_MATH_RESULT_READY
, "cpu_math_result_rdy = %d\n")

155 
	`ILOG_ENTRY
(
DP_VALID_BYTES_RPT_NUM
, "valid_bytes_repeat_num = %d\n")

156 
	`ILOG_ENTRY
(
DP_VALID_BYTES_PER_FULL_TU
, "valid_bytes_per_full_tu = %d\n")

157 
	`ILOG_ENTRY
(
DP_VALID_BYTES_NUM_PER_LANE
, "valid_bytes_num_per_lane = %d\n")

159 
	`ILOG_ENTRY
(
DP_GTP_STATS
, "**** DP GTP STATS ****\n")

160 
	`ILOG_ENTRY
(
DP_GT3_RXBYTE_ALIGN_CNT
, "dp_lane0_rxbyterealign_cnt = %d\n")

161 
	`ILOG_ENTRY
(
DP_GT2_RXBYTE_ALIGN_CNT
, "dp_lane2_rxbyterealign_cnt = %d\n")

162 
	`ILOG_ENTRY
(
DP_GT1_RXBYTE_ALIGN_CNT
, "dp_lane3_rxbyterealign_cnt = %d\n")

163 
	`ILOG_ENTRY
(
DP_GT0_RXBYTE_ALIGN_CNT
, "dp_lane1_rxbyterealign_cnt = %d\n")

165 
	`ILOG_ENTRY
(
DP_8B10B_DISP_ERROR_STATS
, "**** DP 8b10b DISP ERROR STATS ****\n")

166 
	`ILOG_ENTRY
(
DP_8B10B_NIT_ERROR_STATS
, "**** DP 8b10b NIT ERROR STATS ****\n")

168 
	`ILOG_ENTRY
(
DP_LANE_0_WITH_8B10B_DIS_ERR_CNT
, "lane_0_with_8b10b_dis_err_cnt = %d\n")

169 
	`ILOG_ENTRY
(
DP_LANE_1_WITH_8B10B_DIS_ERR_CNT
, "lane_1_with_8b10b_dis_err_cnt = %d\n")

170 
	`ILOG_ENTRY
(
DP_LANE_2_WITH_8B10B_DIS_ERR_CNT
, "lane_2_with_8b10b_dis_err_cnt = %d\n")

171 
	`ILOG_ENTRY
(
DP_LANE_3_WITH_8B10B_DIS_ERR_CNT
, "lane_3_with_8b10b_dis_err_cnt = %d\n")

173 
	`ILOG_ENTRY
(
DP_LANE_0_WITH_8B10B_NIT_ERR_CNT
, "lane_0_with_8b10b_nit_err_cnt = %d\n")

174 
	`ILOG_ENTRY
(
DP_LANE_1_WITH_8B10B_NIT_ERR_CNT
, "lane_1_with_8b10b_nit_err_cnt = %d\n")

175 
	`ILOG_ENTRY
(
DP_LANE_2_WITH_8B10B_NIT_ERR_CNT
, "lane_2_with_8b10b_nit_err_cnt = %d\n")

176 
	`ILOG_ENTRY
(
DP_LANE_3_WITH_8B10B_NIT_ERR_CNT
, "lane_3_with_8b10b_nit_err_cnt = %d\n")

178 
	`ILOG_ENTRY
(
DP_FSM_STATS
, "**** DP FSM STATS ****\n")

179 
	`ILOG_ENTRY
(
DP_FIFO_CS_STATUS_STATE_VID
, "fsm_state_vid = %d\n")

180 
	`ILOG_ENTRY
(
DP_FIFO_CS_STATUS_STATE_DP
, "fsm_state_dp = %d\n")

182 
	`ILOG_ENTRY
(
DP_SDP_STATS
, "**** DP SDP FIFO STATS ****\n")

183 
	`ILOG_ENTRY
(
DP_SDP_FIFO_FULL
, "sdp_fifo_status_full = %d\n")

184 
	`ILOG_ENTRY
(
DP_SDP_FIFO_EMPTY
, "sdp_fifo_status_empty = %d\n")

185 
	`ILOG_ENTRY
(
DP_SDP_FIFO_OVERFLOW
, "sdp_fifo_status_overflow = %d\n")

186 
	`ILOG_ENTRY
(
DP_SDP_FIFO_UNDERFLOW
, "sdp_fifo_status_underflow = %d\n")

187 
	`ILOG_ENTRY
(
DP_SDP_FIFO_LEVEL
, "sdp_fifo_status_level = %d\n")

188 
	`ILOG_ENTRY
(
DP_SDP_FIFO_LEVEL_WATERMARK
, "sdp_fifo_status_level_watermark = %d\n")

189 
	`ILOG_ENTRY
(
DP_SDP_SS_SE_BYTE_NUM
, "sdp_ss_se_same_cycle_byte_num = 0x%x\n")

190 
	`ILOG_ENTRY
(
DP_SDP_PKT_SENT
, "sdp_pkt_sent_cnt = %d\n")

191 
	`ILOG_ENTRY
(
DP_SDP_PK_SENT_WATERMARK
, "sdp_pkt_sent_cnt_watermark = %d\n")

192 
	`ILOG_ENTRY
(
DP_SDP_TAG_STATS
, "**** DP SDP TAG FIFO STATS ****\n")

193 
	`ILOG_ENTRY
(
DP_SDP_TAG_FIFO_FULL
, "sdp_tag_fifo_status_full = %d\n")

194 
	`ILOG_ENTRY
(
DP_SDP_TAG_FIFO_EMPTY
, "sdp_tag_fifo_status_empty = %d\n")

195 
	`ILOG_ENTRY
(
DP_SDP_TAG_FIFO_OVERFLOW
, "sdp_tag_fifo_status_overflow = %d\n")

196 
	`ILOG_ENTRY
(
DP_SDP_TAG_FIFO_UNDERFLOW
, "sdp_tag_fifo_status_underflow = %d\n")

197 
	`ILOG_ENTRY
(
DP_SDP_TAG_FIFO_LEVEL
, "sdp_tag_fifo_status_level = %d\n")

198 
	`ILOG_ENTRY
(
DP_SDP_TAG_FIFO_LEVEL_WATERMARK
, "sdp_tag_fifo_status_level_watermark = %d\n")

199 
	`ILOG_ENTRY
(
DP_SDP_MADU
, "Maud value = %d\n")

200 
	`ILOG_ENTRY
(
DP_STANDARD_BLANKING
, "STANDARD BLANKING DETECTED\n")

202 
	`ILOG_ENTRY
(
DP_LEX_IDLE_PATTERN_CNT_RESET
, "DpÜex idleÖattern counter has beenÑeset\n")

203 
	`ILOG_ENTRY
(
DP_REX_IDLE_PATTERN_CNT_RESET
, "DpÑex idleÖattern counter has beenÑeset\n")

204 
	`ILOG_ENTRY
(
DP_REX_TU_INVAID
, "TU isÇot measureÖroperly, substituting it with 64 forÖrogramming ALU\n")

206 
	`ILOG_ENTRY
(
DP_LEX_ERR_CNT_RESET
, "DP 8b10bÉrror counter setÅo 0x%x\n")

207 
	`ILOG_ENTRY
(
DEBUG_ASSERT_BB
, "CAUSE AN ASSERT IN BB FOR DEBUGGING IRQ count %d\n")

208 
	`ILOG_ENTRY
(
DP_FRQ_DETC
, "Measured frequency = %d\n")

209 
	`ILOG_ENTRY
(
DP_INVALID_COMP_RATIO
, "Invalid compressionÑatio = %d\n")

210 
	$ILOG_END
(
DP_STREAM_COMPONENT
, 
ILOG_MINOR_EVENT
)

	@components/dp_stream/src/dp_stream_rex.c

25 #i‡!
deföed
 
BB_ISO
 && !deföed 
BB_USB


27 
	~<iba£.h
>

28 
	~<bb_chù_ªgs.h
>

29 
	~<bb_t›.h
>

30 
	~<bb_t›_dp.h
>

31 
	~<bb_t›_dp_a7.h
>

32 
	~<dp_sour˚_ªgs.h
>

33 
	~<tico_decodî_ªgs.h
>

34 
	~<c⁄figuøti⁄.h
>

35 
	~<moduÀ_addªs£s_ªgs.h
>

36 
	~<timög_timîs.h
>

37 
	~<dp_°ªam.h
>

38 
	~<ã°_dügno°ics.h
>

40 
	~"dp_°ªam_loc.h
"

41 
	~"dp_°ªam_log.h
"

42 
	~"dp_°ªam_cmd.h
"

43 
	~<u¨t.h
>

48 
	#DP_SOURCE_IRQ_ENABLES
 \

50 
DP_SOURCE_IRQ_ENABLE_DECODER_ERR_FLAG_MASK
 | \

51 
DP_SOURCE_IRQ_ENABLE_FIFO_PIX_0_UNDERFLOW_MASK
 | \

52 
DP_SOURCE_IRQ_ENABLE_FIFO_PIX_0_OVERFLOW_MASK
 | \

53 
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_UNDERFLOW_MASK
 | \

54 
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_OVERFLOW_MASK
 | \

55 
DP_SOURCE_IRQ_ENABLE_FIFO_CS_UNDERFLOW_MASK
 | \

56 
DP_SOURCE_IRQ_ENABLE_FIFO_CS_OVERFLOW_MASK
 | \

59 
DP_SOURCE_IRQ_ENABLE_FIRST_IDLE_PATTERN_SENT_MASK
 \

60 )

	)

62 
	#PIX_GEN_BLACK
 0x00

63 
	#PIX_GEN_WHITE
 0x01

64 
	#PIX_GEN_GRAY
 0x02

65 
	#PIX_GEN_DARKGRAY
 0x03

66 

	)

67 
	#FREE_RUNNING_CLK
 13500

68 
	#PKT_INTERVAL_SCALLING
 (1000 * 1000 * 10)

	)

78 
	#DP_SOURCE_MSA_CONTROL0
(
mvid
) \

80 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
c⁄åﬁ_0
.
bf
.
nvid_£l
 = 1; \

81 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
c⁄åﬁ_0
.
bf
.
mvid_£l
 = 1; \

82 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
c⁄åﬁ_0
.
bf
.
mvid_£t_vÆue
 = 
mvid
; \

83 }

	)

85 
	#DP_SOURCE_MSA_CONTROL1
(
nvid
) \

87 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
c⁄åﬁ_1
.
bf
.
ö£π_löe_£l
 = 0; \

88 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
c⁄åﬁ_1
.
bf
.
nvid_£t_vÆue
 = 
nvid
; \

89 }

	)

92 
	#DP_SOURCE_STREAM_GENERATOR_CFG1
(
pktI¡îvÆ
) \

94 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg1
.
bf
.
cs_pkt_öãrvÆ
 = 
pktI¡îvÆ
; \

95 }

	)

98 
	#DP_SOURCE_CS_PACKET_LEN
(
twi˚PktLí
) \

100 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg0
.
bf
.
cs_°¨t_Àvñ
 = 
twi˚PktLí
; \

101 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg0
.
bf
.
pix_°¨t_Àvñ
 = 512; \

102 }

	)

105 
	#DP_SOURCE_CS_CONTROL_0
(
twi˚PktLí
) \

107 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_cs_c⁄åﬁ0
.
bf
.
´t0
 = 
twi˚PktLí
 -16; \

108 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_cs_c⁄åﬁ0
.
bf
.
a·0
 = 1500 - (16 + 
twi˚PktLí
); \

109 }

	)

111 
	#DP_SOURCE_CS_CONTROL_1
(
twi˚PktLí
) \

113 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_cs_c⁄åﬁ1
.
bf
.
´t1
 = 
twi˚PktLí
 -32; \

114 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_cs_c⁄åﬁ1
.
bf
.
a·1
 = 1500 - (32 + 
twi˚PktLí
); \

115 }

	)

117 
	#DP_SOURCE_CS_PACKET_INTERVAL
() \

119 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg2
.
bf
.
cs_pkt_öãrvÆ_„edback_˘æ
 = 0; \

120 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg2
.
bf
.
cs_pkt_öãrvÆ_„edback_˘æ_debug
 = 0; \

121 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg2
.
bf
.
cs_pkt_öãrvÆ_möus_off£t0
 = 1; \

122 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg2
.
bf
.
cs_pkt_öãrvÆ_∂us_off£t0
 = 1; \

123 }

	)

125 
	#DP_SOURCE_PIX_CONTROL_0
() \

127 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_pix_c⁄åﬁ0
.
bf
.
´t0
 = 16; \

128 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_pix_c⁄åﬁ0
.
bf
.
a·0
 = 16; \

129 }

	)

131 
	#DP_SOURCE_PIX_CONTROL_1
() \

133 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_pix_c⁄åﬁ1
.
bf
.
´t1
 = 32; \

134 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_pix_c⁄åﬁ1
.
bf
.
a·1
 = 32; \

135 }

	)

137 
	#DP_SOURCE_PIX_CONTROL_2
() \

139 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_pix_c⁄åﬁ2
.
bf
.
off£t
 = 100; \

140 }

	)

142 
	#DP_SOURCE_WIDTH_TOTAL
() \

144 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg3
.
bf
.
dp_width_tŸÆ_„edback_˘æ
 = 1; \

145 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg3
.
bf
.
dp_width_tŸÆ_„edback_˘æ_debug
 = 2; \

146 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg3
.
bf
.
dp_width_tŸÆ_möus_off£t0
 = 4; \

147 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg3
.
bf
.
dp_width_tŸÆ_∂us_off£t0
 = 4; \

148 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg3
.
bf
.
dp_width_tŸÆ_möus_off£t1
 = 2; \

149 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg3
.
bf
.
dp_width_tŸÆ_∂us_off£t1
 = 2; \

150 }

	)

152 
	#TU_DEFAULT
 64

	)

153 
	#dp_sour˚_°©s0_rd2˛r_c⁄fig_fifo_WRITEMASK
 0xFF

	)

154 
	#dp_sour˚_°©s1_rd2˛r_c⁄fig_fifo_WRITEMASK
 0xF3C0F

	)

160 vﬁ©ûê
bb_chù_s
* 
	gbb_chù
 = (vﬁ©ûê*)(
bb_chù_s_ADDRESS
);

161 vﬁ©ûê
tico_decodî_s
 *
	gtico_dec
;

162 vﬁ©ûê
dp_sour˚_s
* 
	gdp_sour˚
;

163 
uöt32_t
 
	gtwi˚Pak˚tLígth
;

164 
I§CÆlback
 
	gi§CÆlback
;

165 c⁄° 
C⁄figDpC⁄fig
 *
	gdp°ªamC⁄figPå
;

166 
uöt16_t
 
	gcs_∑ckë_öãrvÆ
;

167 
uöt64_t
 
	g°ªamClk1000
;

170 
	$DP_RexCÃTøöögP©ã∫Sequí˚
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

171 
	$DP_Sour˚SëRódCÀ¨Sèts
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

182 
	$DP_RexHÆInô
(
I§CÆlback
 
ˇŒback
)

184 
dp_sour˚
 = (vﬁ©ûê
dp_sour˚_s
*Ë
bb_chù_dp_sour˚_maö_s_ADDRESS
;

185 
tico_dec
 = (vﬁ©ûê
tico_decodî_s
*Ë
bb_chù_dp_sour˚_tico_s_ADDRESS
;

186 
dp°ªamC⁄figPå
 = (
C⁄figDpC⁄fig
*)
	`C⁄fig_GëD©aPoöãr
(
CONFIG_VAR_BB_DP_CONFIG
);

188 
	`DP_Sour˚SëRódCÀ¨Sèts
();

189 
i§CÆlback
 = 
ˇŒback
;

190 
	}
}

199 
	$DP_RexDpISR
()

201 
uöt32_t
 
dpI¡s
 = (
dp_sour˚
->
úq
.
s
.
≥ndög
.
dw
 & dp_sour˚->úq.s.
íabÀ
.dw);

202 
dp_sour˚
->
úq
.
s
.
≥ndög
.
dw
 = 
dpI¡s
;

204 i‡(
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_FIRST_IDLE_PATTERN_SENT_MASK
)

206 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
IDLE_PATTERN_INTERRUPT
);

207 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_DECODER_ERR_FLAG_MASK
;

210 i‡(
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_DECODER_ERR_FLAG_MASK
)

212 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_DECODER_ERR_FLAG
);

213 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_DECODER_ERR_FLAG_MASK
;

216 i‡(
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_FIFO_PIX_0_UNDERFLOW_MASK
)

218 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_FIFO_PIX_0_UNDERFLOW
);

219 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_PIX_0_UNDERFLOW_MASK
;

220 
dp_sour˚
-> 
úq
.
s
.
íabÀ
.
dw
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_PIX_0_UNDERFLOW_MASK
;

223 i‡(
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_FIFO_PIX_0_OVERFLOW_MASK
)

225 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_FIFO_PIX_0_OVERFLOW
);

226 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_PIX_0_OVERFLOW_MASK
;

227 
dp_sour˚
-> 
úq
.
s
.
íabÀ
.
dw
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_PIX_0_OVERFLOW_MASK
;

230 i‡((
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_UNDERFLOW_MASK
Ë&& (!
dp°ªamC⁄figPå
->
noSídAudio
))

232 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_FIFO_SDP_UNDERFLOW
);

233 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_UNDERFLOW_MASK
;

234 
	`i§CÆlback
(
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_UNDERFLOW_MASK
);

237 i‡((
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_OVERFLOW_MASK
Ë&& (!
dp°ªamC⁄figPå
->
noSídAudio
))

239 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_FIFO_SDP_OVERFLOW
);

240 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_OVERFLOW_MASK
;

241 
	`i§CÆlback
(
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_OVERFLOW_MASK
);

244 i‡(
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_FIFO_CS_UNDERFLOW_MASK
)

246 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_FIFO_CS_UNDERFLOW
);

247 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_CS_UNDERFLOW_MASK
;

248 
	`i§CÆlback
(
DP_SOURCE_IRQ_ENABLE_FIFO_CS_UNDERFLOW_MASK
);

249 
dp_sour˚
-> 
úq
.
s
.
íabÀ
.
dw
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_CS_UNDERFLOW_MASK
;

252 i‡(
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_FIFO_CS_OVERFLOW_MASK
)

254 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_FIFO_CS_OVERFLOW
);

255 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_CS_OVERFLOW_MASK
;

256 
	`i§CÆlback
(
DP_SOURCE_IRQ_ENABLE_FIFO_CS_OVERFLOW_MASK
);

257 
dp_sour˚
-> 
úq
.
s
.
íabÀ
.
dw
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_CS_OVERFLOW_MASK
;

260 i‡(
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_VIDEO_STREAM_END_MASK
)

262 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_VIDEO_STREAM_END
);

263 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_VIDEO_STREAM_END_MASK
;

266 i‡(
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_TAG_UNDERFLOW_MASK
)

268 
uöt8_t
 
ru¬ögCou¡Fømes
 = 
dp_sour˚
->
°©s1
.
s
.
fifo_cs_´0
.
bf
.fifo_cs_ae0;

269 
uöt8_t
 
assocüãdFømeNumbî
 = 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_cs_c⁄fig
.
bf
.
dïth
;

270 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_FIFO_SDP_TAG_UNDERFLOW
, 
ru¬ögCou¡Fømes
, 
assocüãdFømeNumbî
);

271 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_TAG_UNDERFLOW_MASK
;

274 i‡(
dpI¡s
 & 
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_TAG_OVERFLOW_MASK
)

276 
uöt8_t
 
ru¬ögCou¡Fømes
 = 
dp_sour˚
->
°©s1
.
s
.
fifo_cs_af0
.
bf
.fifo_cs_af0;

277 
uöt8_t
 
assocüãdFømeNumbî
 = 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fifo_pix_c⁄fig
.
bf
.
dïth
;

278 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_ERROR
, 
DP_FIFO_SDP_TAG_OVERFLOW
, 
ru¬ögCou¡Fømes
, 
assocüãdFømeNumbî
);

279 
dpI¡s
 &~
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_TAG_OVERFLOW_MASK
;

281 
	}
}

290 
	$DP_Re£tDpTøns˚ivîRex
()

292 
	`bb_t›_dpRe£tDpTøns˚ivîRex
();

293 
	}
}

302 
	$DP_Re£tDpSour˚
()

304 
	`bb_t›_AµlyRe£tDpSour˚
(
åue
);

305 
	`bb_t›_AµlyDpSour˚TicoDCålRe£t
(
åue
);

306 
	}
}

315 
boﬁ
 
	$DP_Sour˚InRe£t
()

317  
	`bb_t›_DpSour˚InRe£t
();

318 
	}
}

328 
	$DP_E«bÀDpSour˚
()

330 
	`bb_t›_dpE«bÀDpSour˚
();

331 
	`DP_RexISRInô
();

332 
	}
}

343 
	$DP_C⁄figuªDpTøns˚ivîRex
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
)

345 
	`bb_t›_dpC⁄figuªDpTøns˚ivîRex
(
bw
, 
lc
);

346 
	}
}

356 
	$DP_PªCh¨geMaöLök
(
boﬁ
 
ch¨ge
, 
L™eCou¡
 
lc
)

358 
	`bb_t›_dpPªCh¨geMaöLök
(
ch¨ge
, 
lc
);

359 
	}
}

368 
	$DP_E«bÀPixñGíî©‹
(
boﬁ
 
í
)

370 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
pix_gí_£l
 = 
í
;

371 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
pix_gí_mode
 = 
PIX_GEN_BLACK
;

372 
	}
}

381 
	$DP_Sour˚E«bÀS¸ambÀr
(
boﬁ
 
í
)

383 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SCRAMBLE_EN
, 
í
);

384 
dp_sour˚
->
s¸ambÀr
.
bf
.
íabÀ
 = 
í
;

385 
	}
}

394 
	$DP_Sour˚SëDpTøöögD⁄e
(
boﬁ
 
d⁄e
)

396 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
dp_åaöög_d⁄e
 = 
d⁄e
;

397 
	}
}

409 
	$DP_Sour˚C⁄figuªDïackëizî
(c⁄° 
DP_SåómP¨amëîs
 *
•
, 
L™eCou¡
 
lc
, 
uöt32_t
 
symbﬁClock
, uöt32_à
symbﬁClockNoSSC
)

411 c⁄° 
BôsPîPixñTabÀ
 *
bµT
 = 
	`m≠Cﬁ‹CodeToBôsPîPixñ
(
•
->
misc
.
cﬁ‹
);

412 
uöt8_t
 
tu_size
 = 
•
->tu_size;

414 
	`DP_SOURCE_MSA_CONTROL0
(
•
->
mvid
);

415 
	`DP_SOURCE_MSA_CONTROL1
(
•
->
nvid
);

417 if(
tu_size
 > 
TU_DEFAULT
)

421 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_REX_TU_INVAID
);

422 
tu_size
 = 
TU_DEFAULT
;

427 c⁄° 
uöt32_t
 
Nb¨
 = (
•
->
h
.
width
 * 
bµT
->
bµ
Ë/ (8 * 
lc
);

429 if(
dp°ªamC⁄figPå
->
√wAluCÆcuœti⁄
)

431 
	`DP_SOURCE_STREAM_GENERATOR_CFG1
(
cs_∑ckë_öãrvÆ
);

436 c⁄° 
uöt64_t
 
vsNew
 = (
°ªamClk1000
 * 
tu_size
 * 
bµT
->
bµ
Ë/ (8u * 
lc
 * (uöt64_t)
symbﬁClock
);

437 c⁄° 
uöt8_t
 
vsI¡
 = 
vsNew
 / 1000;

438 
uöt16_t
 
œ°TuNew
 = (((
uöt64_t
)
Nb¨
 * 1000Ë% 
vsNew
) / 1000;

441 if(
œ°TuNew
 == 0)

443 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_LAST_TU_ZERO
);

444 
œ°TuNew
 = 
vsI¡
;

447 c⁄° 
uöt16_t
 
fuŒTuSymbﬁ
 = 
Nb¨
 - 
œ°TuNew
;

448 c⁄° 
uöt16_t
 
fuŒTuNew
 = ((
uöt32_t
)
fuŒTuSymbﬁ
 * 1000Ë/ 
vsNew
;

449 c⁄° 
uöt16_t
 
ªmaödîNew
 = 
fuŒTuSymbﬁ
 - (
vsI¡
 * 
fuŒTuNew
);

450 
uöt16_t
 
ª≥©New
;

452 if(
ªmaödîNew
 <
fuŒTuNew
)

454 
ª≥©New
 = 
fuŒTuNew
 - 
ªmaödîNew
;

458 
œ°TuNew
 +(
ªmaödîNew
 - 
fuŒTuNew
);

459 
ª≥©New
 = 0;

462 c⁄° 
uöt16_t
 
a˘uÆDpA˘iveWidthNew
 = (
tu_size
 * 
fuŒTuNew
Ë+ 
œ°TuNew
;

463 c⁄° 
uöt32_t
 
dPWidthTŸÆNew
 = (((
uöt64_t
)
symbﬁClock
 * 
•
->
h
.
tŸÆ
 * 1000Ë/ 
°ªamClk1000
);

476 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu0
.
bf
.
dp_width_a˘ive
 = 
a˘uÆDpA˘iveWidthNew
;

477 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu1
.
bf
.
œ°_tu_size
 = 
œ°TuNew
;

478 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu1
.
bf
.
fuŒ_tu_num
 = 
fuŒTuNew
;

479 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
vÆid_byãs_ª≥©_num
 = 
ª≥©New
;

480 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
vÆid_byãs_≥r_fuŒ_tu
 = 
vsI¡
;

481 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu0
.
bf
.
dp_width_tŸÆ
 = 
dPWidthTŸÆNew
;

483 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
DP_VS_VALUE
, 
vsI¡
, (
uöt32_t
)(
vsNew
 % 1000));

487 
	`DP_SOURCE_STREAM_GENERATOR_CFG1
(
cs_∑ckë_öãrvÆ
);

489 
uöt32_t
 
dpWidthTŸÆ
 = ((
uöt64_t
)
symbﬁClock
 * 1000 * 
•
->
h
.
tŸÆ
Ë/ 
°ªamClk1000
;

490 
uöt32_t
 
dpWidthA˘iveT¨gë
 = ((
uöt64_t
)
symbﬁClock
 * 1000 * 
•
->
h
.
width
Ë/ 
°ªamClk1000
;

491 
uöt32_t
 
fuŒTuNum
 = (
dpWidthA˘iveT¨gë
 % 
tu_size
) != 0 ?

492 (
dpWidthA˘iveT¨gë
 / 
tu_size
) : (dpWidthActiveTarget /Åu_size)-1;

494 
uöt16_t
 
œ°Tu
 = 
	`MIN
(
dpWidthA˘iveT¨gë
 - (
fuŒTuNum
 * 
tu_size
), 
Nb¨
 / (fullTuNum + 1));

496 
uöt32_t
 
dpWidthA˘ive
 = 
fuŒTuNum
 * 
tu_size
 + 
œ°Tu
;

497 
uöt16_t
 
vsRïótNum
 = 0;

498 
uöt16_t
 
vsInTu
 = 0;

500 if(((
Nb¨
 - 
œ°Tu
Ë% 
fuŒTuNum
) == 0)

502 
vsRïótNum
 = 0;

503 
vsInTu
 = ((
Nb¨
 - 
œ°Tu
Ë/ 
fuŒTuNum
) - 1;

507 
vsInTu
 = (
Nb¨
 - 
œ°Tu
Ë/ 
fuŒTuNum
;

508 
vsRïótNum
 = (
fuŒTuNum
 * (
vsInTu
 + 1)Ë- (
Nb¨
 - 
œ°Tu
);

511 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu0
.
bf
.
dp_width_a˘ive
 = 
dpWidthA˘ive
;

512 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu1
.
bf
.
œ°_tu_size
 = 
œ°Tu
;

513 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu1
.
bf
.
fuŒ_tu_num
 = 
fuŒTuNum
;

514 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
vÆid_byãs_ª≥©_num
 = 
vsRïótNum
;

515 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
vÆid_byãs_≥r_fuŒ_tu
 = 
vsInTu
;

516 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu0
.
bf
.
dp_width_tŸÆ
 = 
dpWidthTŸÆ
;

518 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
DP_VS_VALUE
, 
vsInTu
, 0);

521 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu1
.
bf
.
fuŒ_tu_size
 = 
tu_size
;

522 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
vÆid_byãs_num_≥r_œ√
 = 
Nb¨
;

525 
	`DP_SOURCE_CS_PACKET_LEN
(
twi˚Pak˚tLígth
);

531 
	`DP_SOURCE_CS_CONTROL_0
(
twi˚Pak˚tLígth
);

533 
	`DP_SOURCE_CS_CONTROL_1
(
twi˚Pak˚tLígth
);

535 
	`DP_SOURCE_CS_PACKET_INTERVAL
();

541 
	`DP_SOURCE_PIX_CONTROL_0
();

542 
	`DP_SOURCE_PIX_CONTROL_1
();

551 
	`DP_SOURCE_PIX_CONTROL_2
();

553 
	`DP_SOURCE_WIDTH_TOTAL
();

554 
	}
}

564 
	$DP_SëCpuM©hResu…Ródy
(
boﬁ
 
ªady
)

566 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
˝u_m©h_ªsu…_rdy
 = 
ªady
;

567 
	}
}

576 
	$DP_Sour˚E«bÀVidSåómGíî©‹
(
boﬁ
 
í
)

578 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
vid_°ªam_gíî©‹_í
 = 
í
;

579 
	}
}

588 
	$DP_Sour˚E«bÀSynSåómGíî©‹
(
boﬁ
 
í
)

590 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
syn_°ªam_gíî©‹_í
 = 
í
;

591 
	}
}

600 
	$DP_Sour˚E«bÀBœckS¸ìn
(
boﬁ
 
í
)

602 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
vid_°ªam_íd
 = 
í
;

603 
	}
}

612 
boﬁ
 
	$DP_IsBœckS¸ìnE«bÀd
()

614  
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
vid_°ªam_íd
;

615 
	}
}

625 
	$DP_ProgømSåómDecodî
(
uöt32_t
 
mvid
, uöt32_à
nvid
, 
uöt16_t
 
tŸÆ_width
)

629 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_ENABLING_TICO_DEC
);

639 
tico_dec
->
tico_d_mode
.
dw
 = (
tico_decodî_tico_d_mode
Ë{.
bf
={.tico_d_mode = 0u}}.dw;

640 
tico_dec
->
tico_d_c⁄fig
.
dw
 = (
tico_decodî_tico_d_c⁄fig
Ë{.
bf
={.tico_d_config = 1u}}.dw;

644 c⁄° 
uöt16_t
 
löe_duøti⁄
 = 
cs_∑ckë_öãrvÆ
;

647 
tico_dec
->
tico_d_löe_duøti⁄
.
dw
 =

648 (
tico_decodî_tico_d_löe_duøti⁄
Ë{.
bf
={.
tico_d_löe_duøti⁄
 = 
löe_duøti⁄
}}.
dw
;

649 
tico_dec
->
tico_d_∂ay_mode
.
dw
 = (
tico_decodî_tico_d_∂ay_mode
Ë{.
bf
={.tico_d_play_mode = 1u}}.dw;

651 
	`DP_RexVideoInfo
();

652 
	}
}

662 
	$DP_E«bÀSåómDecodî
()

664 
tico_dec
->
tico_d_vld
.
dw
 = (
tico_decodî_tico_d_vld
Ë{.
bf
={.tico_d_vld = 1u}}.dw;

665 
	}
}

674 
	$DP_RexUpd©eSåómP¨amëîs
(c⁄° 
DP_SåómP¨amëîs
 *
•
)

676 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
mvid
.
bf
.mvid = 
•
->mvid;

677 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
nvid
.
bf
.nvid = 
•
->nvid;

679 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_0
.
bf
.
tŸÆ
 = 
•
->
h
.total;

680 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_0
.
bf
.
°¨t
 = 
•
->
h
.start;

681 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
width
 = 
•
->
h
.width;

682 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
pﬁ¨ôy
 = 
•
->
h
.polarity;

683 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
sync_width
 = 
•
->
h
.sync_width;

685 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_0
.
bf
.
tŸÆ
 = 
•
->
v
.total;

686 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_0
.
bf
.
°¨t
 = 
•
->
v
.start;

687 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
height
 = 
•
->
v
.height;

688 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
pﬁ¨ôy
 = 
•
->
v
.polarity;

689 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
sync_width
 = 
•
->
v
.sync_width;

691 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.
y_⁄ly
 = 
•
->misc.y_only;

692 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.
°îeo
 = 
•
->misc.stereo;

693 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.
öt_tŸÆ
 = 
•
->misc.int_total;

694 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.
cﬁ‹
 = 
•
->misc.color;

695 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.
˛k_sync
 = 
•
->misc.clk_sync;

697 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg0
.
bf
.
cs_pkt_Àngth
 = 
•
->cs_pkt_length;

698 
twi˚Pak˚tLígth
 = 
•
->
cs_pkt_Àngth
 + sp->cs_pkt_length;

700 i‡(
	`TEST_GëDügSèã
())

703 i‡((
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
width
 != 640) &&

704 (
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
height
 != 480))

706 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_NOT_640_480
);

710 i‡((
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
œ√_num
 + 1 != 4) &&

711 (
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
œ√_bô_øã
 != 0x02))

713 
	`TEST_SëEº‹Sèã
(
DIAG_DP
, 
DIAG_LC_BW_NOT_HIGH
);

717 
°ªamClk1000
 = (
uöt64_t
)
•
->
h
.
tŸÆ
 * sp->
v
.tŸÆ * sp->
Âs
;

718 
cs_∑ckë_öãrvÆ
 = ((
uöt64_t
)
•
->
h
.
tŸÆ
 * 
FREE_RUNNING_CLK
 * 
PKT_INTERVAL_SCALLING
)/ ((uöt64_t)
°ªamClk1000
);

719 
	}
}

729 
	$DP_RexUpd©eSåómMvid
(
uöt32_t
 
mvid
)

731 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
mvid
.
bf
.mvid = mvid;

732 
	}
}

741 
	$DP_Rex8b10bEncodögE«bÀ
(
boﬁ
 
íabÀ
)

743 
	`bb_t›_dpE«bÀ8b10bíA7
(
íabÀ
);

744 
	}
}

753 
	$DP_RexAudioFifoFlush
()

756 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
sdp_í
 = 0;

757 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
sdp_í
 = 1;

758 
	}
}

767 
	$DP_RexE«bÀAudioModuÀ
(
uöt8_t
 
audioMuã
, uöt8_à
maud
)

771 c⁄° 
boﬁ
 
maud_mëhod_£l
 = 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
sdp_˘æ
.
bf
.maud_method_sel;

772 
	`ûog_DP_STREAM_COMPONENT_3
(
ILOG_DEBUG
, 
DP_SDP_MAUD
, 
audioMuã
, 
maud
, 
maud_mëhod_£l
);

774 if(
audioMuã
)

776 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
sdp_˘æ
.
bf
.
audiomuã_Êag
 = 
audioMuã
;

782 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
sdp_˘æ
.
bf
.
maud_£t_vÆue
 = 
maud
;

783 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
sdp_˘æ
.
bf
.
audiomuã_Êag
 = 
audioMuã
;

785 
	}
}

793 
	$DP_RexDißbÀAudioModuÀ
()

795 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
sdp_˘æ
.
bf
.
audiomuã_Êag
 = 1;

796 
dp_sour˚
->
úq
.
s
.
íabÀ
.
dw
 &~(
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_UNDERFLOW_MASK
 | 
DP_SOURCE_IRQ_ENABLE_FIFO_SDP_OVERFLOW_MASK
);

797 
	}
}

806 
	$DP_RexGëDpFrq
((*
ˇŒback
)(
uöt32_t
))

808 c⁄° 
DpFªqCÆcuœã
 
dpFªqCÆcuœã
 =

810 .
max_cou¡
 = 
DP_MAX_COUNT
,

811 .
˛k_£l
 = 
DP_GT_RXUSRCLK2


813 
	`bb_t›_a7_gëDpFªq
(&
dpFªqCÆcuœã
, 
ˇŒback
);

814 
	}
}

824 
uöt8_t
 
	$DP_GëBµFromCﬁ‹Code
(
uöt8_t
 
cﬁ‹Code
)

826 c⁄° 
BôsPîPixñTabÀ
 *
bµT
 = 
	`m≠Cﬁ‹CodeToBôsPîPixñ
(
cﬁ‹Code
);

827 
	`üs£π_DP_STREAM_COMPONENT_1
(
bµT
 !
NULL
, 
DP_INVALID_COLOR
, 
cﬁ‹Code
);

829  
bµT
->
bµ
;

830 
	}
}

841 
	$DP_RexISRInô
()

845 i‡(
dp°ªamC⁄figPå
->
noSídAudio
 =
Ál£
)

847 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
sdp_í
 = 1;

848 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
sdp_˘æ
.
bf
.
maud_mëhod_£l
 = 1;

849 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
sdp_˘æ
.
bf
.
audiomuã_Êag
 = 1;

850 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
debug_£l
 = 8;

852 
	}
}

861 
	$DP_RexSëMaöLökB™dwidth
(
uöt8_t
 
b™dwidth
)

863 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
œ√_bô_øã
 = 
b™dwidth
;

864 
	}
}

873 
	$DP_RexSëL™eCou¡
(
uöt8_t
 
œ√Cou¡
)

875 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
œ√_num
 = 
œ√Cou¡
;

876 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_EVENT
,

877 
DP_SET_LANE
, 
œ√Cou¡
, 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
œ√_num
);

878 
	}
}

887 
	$DP_RexSëEnh™˚dFømögE«bÀ
(
boﬁ
 
íh™˚dFømögE«bÀ
)

889 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
dp_íh_‰m_í
 = 
íh™˚dFømögE«bÀ
;

890 
	}
}

899 
	$DP_RexSëTøöögP©ã∫Sequí˚
(
TøöögP©ã∫Sequí˚
 
çs
)

901 
	`DP_RexCÃTøöögP©ã∫Sequí˚
();

902 
çs
)

904 
TPS_0
:

905 
TPS_1
:

906 
TPS_2
:

907 
TPS_3
:

908 
CPAT2520_1
:

909 
CPAT2520_2p
:

910 
CPAT2520_2m
:

911 
CPAT2520_3
:

912 
PLTPAT
:

913 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
çs_£l
 = 
çs
;

916 
PRBS_7
:

917 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_¥bs_˘æ
.
bf
.
gt0_tx¥bs£l
 = 0x1;

918 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_¥bs_˘æ
.
bf
.
gt1_tx¥bs£l
 = 0x1;

919 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_¥bs_˘æ
.
bf
.
gt2_tx¥bs£l
 = 0x1;

920 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_¥bs_˘æ
.
bf
.
gt3_tx¥bs£l
 = 0x1;

927 
	}
}

936 
	$DP_RexVideoInfo
()

938 
uöt8_t
 
bw
 = 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
œ√_bô_øã
;

939 c⁄° 
uöt32_t
 
b™dwidth
 = 
bw
 == 0x00 ? 162:

940 
bw
 == 0x01 ? 270:

941 
bw
 == 0x02 ? 540:

942 
bw
 == 0x03 ? 810:

945 
uöt8_t
 
cﬁ‹
 = 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.color;

946 c⁄° 
uöt8_t
 
bµ
 = 
	`DP_GëBµ
(
cﬁ‹
);

948 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LC
, 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
œ√_num
 + 1);

949 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
DP_BW
, 
b™dwidth
/100, bandwidth%100);

950 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_ENHANCED_FRAMING
, 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
dp_íh_‰m_í
);

951 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_MVID
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
mvid
.
bf
.mvid);

952 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_NVID
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
nvid
.
bf
.nvid);

953 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_H_TOTAL
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_0
.
bf
.
tŸÆ
);

954 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_H_START
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_0
.
bf
.
°¨t
);

955 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_H_WIDTH
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
width
);

956 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_H_POLARITY
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
pﬁ¨ôy
);

957 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_H_SYNC_WIDTH
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.
sync_width
);

958 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_V_TOTAL
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_0
.
bf
.
tŸÆ
);

959 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_V_START
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_0
.
bf
.
°¨t
);

960 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_V_HEIGHT
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
height
);

961 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_V_POLARITY
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
pﬁ¨ôy
);

962 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_V_SYNC_WIDTH
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.
sync_width
);

963 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_Y_ONLY
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.
y_⁄ly
);

964 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_STEREO
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.
°îeo
);

965 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_INT_TOTAL
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.
öt_tŸÆ
);

966 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_MSA_CLK_SYNC
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.
˛k_sync
);

967 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_CS_PKT_LENGTH
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg0
.
bf
.
cs_pkt_Àngth
);

968 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
DP_MSA_COLOR
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.
cﬁ‹
, 
bµ
);

969 
	}
}

978 
	$DP_RexSèts
()

980 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_FIFO_PIX_0_OVERFLOW
, 
dp_sour˚
->
°©s0
.
s
.
fifo_pix_0_ovîÊow
.
bf
.fifo_pix_0_overflow);

981 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_FIFO_PIX_0_UNDERFLOW
, 
dp_sour˚
->
°©s0
.
s
.
fifo_pix_0_undîÊow
.
bf
.fifo_pix_0_underflow);

982 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_PIX_0_SR_UNDERFLOW
, 
dp_sour˚
->
°©s0
.
s
.
pix_0_§_undîÊow
.
bf
.pix_0_sr_underflow);

983 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_PIX_1_SR_UNDERFLOW
, 
dp_sour˚
->
°©s0
.
s
.
pix_1_§_undîÊow
.
bf
.pix_1_sr_underflow);

984 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_PIX_2_SR_UNDERFLOW
, 
dp_sour˚
->
°©s0
.
s
.
pix_2_§_undîÊow
.
bf
.pix_2_sr_underflow);

985 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_PIX_3_SR_UNDERFLOW
, 
dp_sour˚
->
°©s0
.
s
.
pix_3_§_undîÊow
.
bf
.pix_3_sr_underflow);

986 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_FIFO_PIX_0_LEVEL
, 
dp_sour˚
->
°©s0
.
s
.
fifo_pix_0_Àvñ
.
bf
.fifo_pix_0_level);

987 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_FIFO_PIX_0_LEVEL_WATERMARK
, 
dp_sour˚
->
°©s0
.
s
.
fifo_pix_0_Àvñ_w©îm¨k
.
bf
.fifo_pix_0_level_watermark);

988 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_FIFO_CS_OVERFLOW
, 
dp_sour˚
->
°©s1
.
s
.
fifo_cs_ovîÊow
.
bf
.fifo_cs_overflow);

989 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_FIFO_CS_UNDERFLOW
, 
dp_sour˚
->
°©s1
.
s
.
fifo_cs_undîÊow
.
bf
.fifo_cs_underflow);

990 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_FIFO_CS_LEVEL
, 
dp_sour˚
->
°©s1
.
s
.
fifo_cs_Àvñ
.
bf
.fifo_cs_level);

991 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SOURCE_FIFO_CS_LEVEL_WATERMARK
, 
dp_sour˚
->
°©s1
.
s
.
fifo_cs_Àvñ_w©îm¨k
.
bf
.fifo_cs_level_watermark);

992 
	}
}

1001 
	$DP_RexAluS©s
()

1003 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_ALU_STATS
);

1004 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_WIDTH_ACTIVE
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu0
.
bf
.
dp_width_a˘ive
);

1005 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_WIDTH_TOTAL
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu0
.
bf
.
dp_width_tŸÆ
);

1007 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_FULL_TU_SIZE
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu1
.
bf
.
fuŒ_tu_size
);

1008 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_LAST_TU_SIZE
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu1
.
bf
.
œ°_tu_size
);

1009 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_FULL_TU_NUM
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu1
.
bf
.
fuŒ_tu_num
);

1011 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_CPU_MATH_RESULT_READY
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
˝u_m©h_ªsu…_rdy
);

1012 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_VALID_BYTES_RPT_NUM
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
vÆid_byãs_ª≥©_num
);

1013 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_VALID_BYTES_PER_FULL_TU
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
vÆid_byãs_≥r_fuŒ_tu
);

1014 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_VALID_BYTES_NUM_PER_LANE
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
vÆid_byãs_num_≥r_œ√
);

1015 
	}
}

1024 
	$DP_RexFsmS©s
()

1026 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_FSM_STATS
);

1027 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_FIFO_CS_STATUS_STATE_VID
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fsm_°©us
.
bf
.
°©e_vid
);

1028 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_FIFO_CS_STATUS_STATE_DP
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
fsm_°©us
.
bf
.
°©e_dp
);

1029 
	}
}

1038 
	$DP_RexE«bÀAŒI¡îru±s
()

1040 
dp_sour˚
->
úq
.
s
.
íabÀ
.
dw
 = 
DP_SOURCE_IRQ_ENABLES
;

1041 
	}
}

1050 
	$DP_RexPrötSdpFifoSèts
()

1052 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_SDP_STATS
);

1053 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_FULL
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_fuŒ
.
bf
.fifo_sdp_full);

1054 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_EMPTY
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_em±y
.
bf
.fifo_sdp_empty);

1055 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_OVERFLOW
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_ovîÊow
.
bf
.fifo_sdp_overflow);

1056 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_UNDERFLOW
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_undîÊow
.
bf
.fifo_sdp_underflow);

1057 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_LEVEL
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_Àvñ
.
bf
.fifo_sdp_level);

1058 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_FIFO_LEVEL_WATERMARK
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_Àvñ_w©îm¨k
.
bf
.fifo_sdp_level_watermark);

1059 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_SDP_TAG_STATS
);

1060 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_FULL
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_èg_fuŒ
.
bf
.fifo_sdp_tag_full);

1061 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_EMPTY
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_èg_em±y
.
bf
.fifo_sdp_tag_empty);

1062 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_OVERFLOW
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_èg_ovîÊow
.
bf
.fifo_sdp_tag_overflow);

1063 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_UNDERFLOW
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_èg_undîÊow
.
bf
.fifo_sdp_tag_underflow);

1064 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_LEVEL
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_èg_Àvñ
.
bf
.fifo_sdp_tag_level);

1065 
	`ûog_DP_STREAM_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
DP_SDP_TAG_FIFO_LEVEL_WATERMARK
, 
dp_sour˚
->
°©s1
.
s
.
fifo_sdp_èg_Àvñ_w©îm¨k
.
bf
.fifo_sdp_tag_level_watermark);

1066 
	`ûog_DP_STREAM_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
DP_SDP_MAUD
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
sdp_˘æ
.
bf
.
audiomuã_Êag
,

1067 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
sdp_˘æ
.
bf
.
maud_£t_vÆue
,

1068 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
sdp_˘æ
.
bf
.
maud_mëhod_£l
);

1069 
	`ûog_DP_STREAM_COMPONENT_3
(
ILOG_MAJOR_EVENT
, 
DP_SDP_VBID
, 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
vbd
.
bf
.
vbid
,

1070 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
vbd
.
bf
.
maud
,

1071 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
vbd
.
bf
.
mvid
);

1072 
	}
}

1082 
	$DP_RexCÃTøöögP©ã∫Sequí˚
()

1084 
dp_sour˚
->
c⁄figuøti⁄
.
bf
.
çs_£l
 = 0x0;

1085 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_¥bs_˘æ
.
bf
.
gt0_tx¥bs£l
 = 0x0;

1086 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_¥bs_˘æ
.
bf
.
gt1_tx¥bs£l
 = 0x0;

1087 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_¥bs_˘æ
.
bf
.
gt2_tx¥bs£l
 = 0x0;

1088 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_¥bs_˘æ
.
bf
.
gt3_tx¥bs£l
 = 0x0;

1089 
	}
}

1098 
	$DP_Sour˚SëRódCÀ¨Sèts
()

1100 
dp_sour˚
->
°©s0
.
s
.
rd2˛r_c⁄fig
.
dw
 = 
dp_sour˚_°©s0_rd2˛r_c⁄fig_WRITEMASK
;

1101 
dp_sour˚
->
°©s1
.
s
.
rd2˛r_c⁄fig
.
dw
 = 
dp_sour˚_°©s1_rd2˛r_c⁄fig_WRITEMASK
;

1102 
	}
}

1111 
	$DP_STREAM_RexRe£tIdÀP©ã∫C¡
()

1113 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
idÀ_∑âîn_debug
.
bf
.
˙t_r°
 = 0;

1114 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
idÀ_∑âîn_debug
.
bf
.
˙t_r°
 = 1;

1115 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
DP_REX_IDLE_PATTERN_CNT_RESET
);

1116 
	}
}

1126 
	$DP_STREAM_RexSëAdju°WidthOff£t
(
uöt8_t
 
mOff£t1
, uöt8_à
pOff£t1
, uöt8_à
mOff£t0
, uöt8_à
pOff£t0
)

1128 
uöt32_t
 
off£tVÆue
 = ((
mOff£t1
 & 0x0F) << 12) +

1129 ((
pOff£t1
 & 0x0F) << 8) +

1130 ((
mOff£t0
 & 0x0F) << 4) +

1131 ((
pOff£t0
 & 0x0F) << 0);

1133 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
cfg3
.
dw
 = 
off£tVÆue
;

1134 
	}
}

1143 
	$DP_PrötRexI°©usMesßges
(c⁄° 
DP_SåómP¨amëîs
 *
•
)

1145 
uöt8_t
 
cﬁ‹
 = 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
misc
.
bf
.color;

1146 
uöt8_t
 
ªÆ_cﬁ‹
 = 
cﬁ‹
<<1;

1147 c⁄° 
uöt8_t
 
bpc
 = 
	`DP_GëBµ
(
cﬁ‹
)/3;

1148 
uöt16_t
 
width
 = 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
h‹iz⁄èl_1
.
bf
.width;

1149 
uöt16_t
 
height
 = 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
mß
.s.
vîtiˇl_1
.
bf
.height;

1150 
uöt32_t
 
Âs
 = 
•
->fps;

1151 
uöt16_t
 
Âs_1
 = 
Âs
/1000;

1152 
uöt16_t
 
Âs_2
 = (
Âs
%1000)/10;

1153 
	`ILOG_i°©us
(
ISTATUS_VIDEO_RESOLUTION
, 6, 
width
, 
height
, 
Âs_1
, 
Âs_2
, 
bpc
, 
ªÆ_cﬁ‹
);

1154 
	}
}

1167 
	$DP_Sour˚DebugC⁄figuªDïackëizî
(c⁄° 
DP_SåómP¨amëîs
 *
•
, 
L™eCou¡
 
lc
, 
uöt32_t
 
symbﬁClock
, uöt32_à
symbﬁClockNoSSC
)

1169 c⁄° 
BôsPîPixñTabÀ
 *
bµT
 = 
	`m≠Cﬁ‹CodeToBôsPîPixñ
(
•
->
misc
.
cﬁ‹
);

1170 
uöt8_t
 
tu_size
 = 
•
->tu_size;

1172 
	`DP_SOURCE_MSA_CONTROL0
(
•
->
mvid
);

1173 
	`DP_SOURCE_MSA_CONTROL1
(
•
->
nvid
);

1175 if(
tu_size
 > 
TU_DEFAULT
)

1179 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_REX_TU_INVAID
);

1180 
tu_size
 = 
TU_DEFAULT
;

1184 c⁄° 
uöt32_t
 
Nb¨
 = (
•
->
h
.
width
 * 
bµT
->
bµ
Ë/ (8 * 
lc
);

1186 
	`DP_SOURCE_STREAM_GENERATOR_CFG1
(
cs_∑ckë_öãrvÆ
);

1191 c⁄° 
uöt64_t
 
vsNew
 = (
°ªamClk1000
 * 
tu_size
 * 
bµT
->
bµ
Ë/ (8u * 
lc
 * (uöt64_t)
symbﬁClock
);

1192 c⁄° 
uöt8_t
 
vsI¡
 = 
vsNew
 / 1000;

1193 
uöt16_t
 
œ°TuNew
 = (((
uöt64_t
)
Nb¨
 * 1000Ë% 
vsNew
) / 1000;

1196 if(
œ°TuNew
 == 0)

1198 
	`ûog_DP_STREAM_COMPONENT_0
(
ILOG_MAJOR_ERROR
, 
DP_LAST_TU_ZERO
);

1199 
œ°TuNew
 = 
vsI¡
;

1202 c⁄° 
uöt16_t
 
fuŒTuSymbﬁ
 = 
Nb¨
 - 
œ°TuNew
;

1203 c⁄° 
uöt16_t
 
fuŒTuNew
 = ((
uöt32_t
)
fuŒTuSymbﬁ
 * 1000Ë/ 
vsNew
;

1204 c⁄° 
uöt16_t
 
ªmaödîNew
 = 
fuŒTuSymbﬁ
 - (
vsI¡
 * 
fuŒTuNew
);

1205 
uöt16_t
 
ª≥©New
;

1207 if(
ªmaödîNew
 <
fuŒTuNew
)

1209 
ª≥©New
 = 
fuŒTuNew
 - 
ªmaödîNew
;

1213 
œ°TuNew
 +(
ªmaödîNew
 - 
fuŒTuNew
);

1214 
ª≥©New
 = 0;

1217 c⁄° 
uöt16_t
 
a˘uÆDpA˘iveWidthNew
 = (
tu_size
 * 
fuŒTuNew
Ë+ 
œ°TuNew
;

1218 c⁄° 
uöt32_t
 
dPWidthTŸÆNew
 = (((
uöt64_t
)
symbﬁClock
 * 
•
->
h
.
tŸÆ
 * 1000Ë/ 
°ªamClk1000
);

1221 if(
œ°TuNew
 < 4)

1223 
uöt8_t
 
moveToVÆidSymbﬁ
 = 8 - 
œ°TuNew
;

1224 if(
ªmaödîNew
 >
moveToVÆidSymbﬁ
)

1226 
ª≥©New
 +
moveToVÆidSymbﬁ
;

1227 
œ°TuNew
 = 8;

1231 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu0
.
bf
.
dp_width_a˘ive
 = 
a˘uÆDpA˘iveWidthNew
;

1232 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu1
.
bf
.
œ°_tu_size
 = 
œ°TuNew
;

1233 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu1
.
bf
.
fuŒ_tu_num
 = 
fuŒTuNew
;

1234 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
vÆid_byãs_ª≥©_num
 = 
ª≥©New
;

1235 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu2
.
bf
.
vÆid_byãs_≥r_fuŒ_tu
 = 
vsI¡
;

1236 
dp_sour˚
->
°ªam_gíî©‹
.
s
.
Æu0
.
bf
.
dp_width_tŸÆ
 = 
dPWidthTŸÆNew
;

1238 
	`ûog_DP_STREAM_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
DP_VS_VALUE
, 
vsI¡
, (
uöt32_t
)(
vsNew
 % 1000));

1239 
	}
}

	@components/top/inc/bb_top.h

11 #i‚de‡
BB_TOP_H


12 
	#BB_TOP_H


	)

15 
	~<iba£.h
>

16 
	~<t›_gpio.h
>

17 
	~<gpio.h
>

18 
	~<bb_t›_a7_ªgs.h
>

19 #ifde‡
PLATFORM_K7


20 
	~<bb_t›_k7.h
>

22 #ifde‡
PLATFORM_A7


23 
	~<bb_t›_a7.h
>

27 
	#MDIO_MUX_NOT_PRESENT
 (0xF)

	)

28 
	#I2C_MUX_NOT_PRESENT
 (0xFF)

	)

29 
	#I2C_SWITCH_NOT_PRESENT
 (0xFF)

	)

33 
	eCORE_REV_BB


35 
	mBOM_23_00200_A01
,

36 
	mBOM_23_00200_A02
,

37 
	mBOM_23_00200_A03


41 
bb_t›_Inô
();

43 
bb_t›_TriSèãI2cS˛
(
boﬁ
 
åiSèã
);

44 
bb_t›_SëMdioSœve
(
MdioMa°îSœveSñ
 
ma°îSœveSñ
);

45 
bb_t›_F‹˚SëMdioSœve
(
uöt8_t
 
ma°îSœveSñ
);

46 
bb_t›_AµlyRe£tPhyGtx
(
boﬁ
 
ª£t
);

48 
bb_t›_AµlyRe£tMˇTxRx
(
boﬁ
 
ª£t
);

49 
bb_t›_AµlyRe£tMˇTx
(
boﬁ
 
ª£t
);

50 
bb_t›_AµlyRe£tMˇRx
(
boﬁ
 
ª£t
);

51 
bb_t›_AµlyRe£tMacTx
(
boﬁ
 
ª£t
);

52 
bb_t›_AµlyRe£tMacRx
(
boﬁ
 
ª£t
);

53 
boﬁ
 
bb_t›_DpSour˚InRe£t
();

54 
bb_t›_AµlyRe£tDpSour˚
(
boﬁ
 
ª£t
);

55 
bb_t›_AµlyDpSour˚TicoDCålRe£t
(
boﬁ
 
ª£t
);

56 
boﬁ
 
bb_t›_DpSökInRe£t
();

57 
boﬁ
 
bb_t›_DpEncodîInRe£t
();

58 
bb_t›_AµlyRe£tDpSök
(
boﬁ
 
ª£t
);

59 
bb_t›_AµlyRe£tEncodî
(
boﬁ
 
ª£t
);

60 
bb_t›_AµlyRe£tUÕPhyClkPŒ
(
boﬁ
 
ª£t
);

61 
	$bb_t›_UÕPhyTxClockC⁄åﬁ
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

62 
	`bb_t›_AµlyRe£tUÕC‹e
(
boﬁ
 
ª£t
);

63 
	`bb_t›_AµlyRe£tUÕPhy
(
boﬁ
 
ª£t
);

64 
	`bb_t›_AµlyRe£tXusb
(
boﬁ
 
ª£t
);

65 
	`bb_t›_AµlyRe£tUµ
(
boﬁ
 
ª£t
);

66 
boﬁ
 
	`bb_t›_IsDevi˚Lex
();

67 
	`bb_t›_LökClockE«bÀ
(
boﬁ
 
íabÀ
);

68 
	`bb_t›_AµlyRe£tRxLökSèts
(
boﬁ
 
ª£t
);

69 
	`bb_t›_AµlyRe£tLayî3Rx
(
boﬁ
 
ª£t
);

70 
	`bb_t›_AµlyRe£tLayî3Tx
(
boﬁ
 
ª£t
);

71 
boﬁ
 
	`bb_t›_isUÕPhyClkLocked
();

72 
	`bb_t›_Re£tGpio
(
boﬁ
 
ª£t
);

73 
	`bb_t›_Re£tSpiFœsh
(
boﬁ
 
ª£t
);

74 
	`bb_t›_Re£tBBU¨t
(
boﬁ
 
ª£t
);

75 
	`bb_t›_Re£tMdioMa°î
(
boﬁ
 
ª£t
);

76 
	`bb_t›_Re£tI2CMa°î
(
boﬁ
 
ª£t
);

77 
	`bb_t›_Re£tI2CSœve
(
boﬁ
 
ª£t
);

78 
	`bb_t›_Re£tGeU¨t
(
boﬁ
 
ª£t
);

79 
	`bb_t›_‰eqDëDpAutoE«bÀ
(
boﬁ
 
íabÀ
);

81 
	`bb_t›_SëRéI2cMuxP‹t
(
I2cP‹tSñ
 
p‹t
);

82 
	`bb_t›_AµlyE«bÀDp159
(
boﬁ
 
íabÀ
);

83 
	`bb_t›_AµlyE«bÀDp130
(
boﬁ
 
íabÀ
);

84 
	`bb_t›_AµlyRe£tDp130
(
boﬁ
 
ª£t
);

85 
	`bb_t›_Re£tAuxHpd
(
boﬁ
 
ª£t
);

88 
	`bb_t›_dΩWrôe
(
uöt16_t
 
dΩAddr
, uöt16_à
wrôeD©a
, uöt16_à
dΩEnMask
);

89 
uöt16_t
 
	`bb_t›_dΩRód
(uöt16_à
dΩAddr
, 
bb_t›_dΩ_dΩ_í_mask
 
dΩEnMask
);

90 
	`bb_t›_dΩRódModWrôe
(
uöt16_t
 
dΩAddr
,

91 
uöt16_t
 
wrôeD©a
,

92 
uöt16_t
 
wrôeMask
,

93 
bb_t›_dΩ_dΩ_í_mask
 
dΩEnMask
);

95 
boﬁ
 
	`bb_t›_IsASIC
();

96 
uöt8_t
 
	`bb_t›_gëRxauiSètusDebug
();

98 #ifde‡
PLATFORM_A7_K7


99 
	`bb_t›_£tDpGçRxClkCål
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçSysClkSñCfg
 
˛kCfg
);

100 
	`bb_t›_£tDpGçTxClkCål
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçSysClkSñCfg
 
˛kCfg
);

101 
	`bb_t›_£tGzpPŒRefClkSñ
(
DpGçPŒClkSñ
 
∂lClkSñ
, 
DpGçPŒCålRefClkSñ
 
ªfClkSñ
);

102 
	`bb_t›_≠∂yGçPŒPowîDown
(
DpGçPŒClkSñ
 
∂lClkSñ
, 
boﬁ
 
powîDn
);

103 
boﬁ
 
	`bb_t›_isGçPŒRefClkLo°
(
DpGçPŒClkSñ
 
∂lClkSñ
);

104 
boﬁ
 
	`bb_t›_isGçPŒLock
(
DpGçPŒClkSñ
 
∂lClkSñ
);

105 
	`bb_t›_£tDpGçRxMiscCålPd
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPdMode
 
pdMode
);

106 
	`bb_t›_£tDpGçTxMiscCålPd
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPdMode
 
pdMode
);

107 
	`bb_t›_£tDpGçRxPrbsCålSñ
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPrbsSñ
 
¥bs
);

108 
	`bb_t›_≠∂yDpGçRxPrbsCålPrbsC¡Re£t
(
DpGçSysL™eSñ
 
œ√Sñ
, 
boﬁ
 
ª£t
);

109 
	`bb_t›_£tDpGçTxPrbsCålSñ
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPrbsSñ
 
¥bs
);

112 
	`bb_t›_£tDpGçRxMiscCålPﬁ¨ôy
(
boﬁ
 
£t
);

113 
	`bb_t›_£tDpGçTxMiscCålPﬁ¨ôy
(
boﬁ
 
£t
);

114 
	`bb_t›_≠∂yDpRxSo·Re£t
(
boﬁ
 
ª£t
);

115 
	`bb_t›_≠∂yDpTxSo·Re£t
(
boﬁ
 
ª£t
);

118 
	`bb_t›_AµlyRe£tEthî√tPhy
(
boﬁ
 
ª£t
);

121 
	`bb_t›_úqSÂE«bÀ
(
boﬁ
 
íabÀ
);

124 
	`bb_t›_£tupI2c
();

126 
	`bb_t›_n⁄CpuModuÀRe£t
();

127 
	`bb_t›_ªlﬂdFpga
();

128 
boﬁ
 
	`bb_t›_IsFpgaGﬁdíImage
();

129 
	`bb_t›_dißbÀFpgaW©chdog
();

130 
boﬁ
 
	`bb_t›_isFpgaFÆlback
();

132 
uöt32_t
 
	`bb_t›_ªadU£rReg
();

133 
	`bb_t›_wrôeU£rReg
(
uöt32_t
 
vÆ
);

134 
uöt32_t
 
	`bb_t›_ªadSètusReg
();

136 
	`bb_t›_åiggîFpgaFÆlback
();

137 
	`bb_t›_swôchFpgaImage
();

138 
	$bb_t›_öôüãXmiiRxClkDëe˘
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

139 
boﬁ
 
	$bb_t›_isXmiiRxClkDëe˘Com∂ëe
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

140 
uöt32_t
 
	$bb_t›_gëXmiiRxClockFªquícy
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

141 
	$bb_t›_xmiiTxClkDëe˘
(
boﬁ
 
tx_˛k
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

142 
	$bb_t›_xmiiGtxClkEn
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

143 
	$bb_t›_gmiiCålSëTri°©es
(
boﬁ
 
£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

144 
	$bb_t›_miiCålSëTri°©es
(
boﬁ
 
£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

145 
	$bb_t›_≠∂yXmiiRxRe£t
(
boﬁ
 
ª£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

146 
	$bb_t›_≠∂yXmiiTxRe£t
(
boﬁ
 
ª£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

147 
CORE_REV_BB
 
	$bb_t›_gëC‹eBﬂrdRev
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

149 
	$bb_t›_rs232Re£t
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

150 
	$bb_t›_rs232ChùC⁄figuª
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

151 
boﬁ
 
	$bb_t›_isDash3
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

	@components/top/inc/bb_top_a7.h

11 #i‚de‡
BB_TOP_A7_H


12 
	#BB_TOP_A7_H


	)

15 
	~<iba£.h
>

16 
	~<t›_gpio.h
>

17 
	~<gpio.h
>

18 
	~<bb_t›.h
>

24 
	eUsb3TxM¨gö


27 
	mUSB3_TX_MARGIN_800MV_1200MV_NORMAL
,

28 
	mUSB3_TX_MARGIN_800MV_1200MV
,

29 
	mUSB3_TX_MARGIN_700MV_900MV
,

30 
	mUSB3_TX_MARGIN_400MV_600MV
,

31 
	mUSB3_TX_MARGIN_200MV_400MV


34 
	eUsb3TxDìmph


36 
	mUSB3_TX_DEEMPH_NEG_6DB
,

37 
	mUSB3_TX_DEEMPH_NEG_3_5DB
,

38 
	mUSB3_TX_DEEMPH_NONE


41 
	eDpGçSysL™eSñ


43 
	mDP_GTP_GT0_SYS_LANE_SEL
,

44 
	mDP_GTP_GT1_SYS_LANE_SEL
,

45 
	mDP_GTP_GT2_SYS_LANE_SEL
,

46 
	mDP_GTP_GT3_SYS_LANE_SEL


49 
	eDpGçSysL™eSñMask


51 
	mDP_GTP_GT0_SYS_LANE_SEL_MASK
 = 1,

52 
	mDP_GTP_GT1_SYS_LANE_SEL_MASK
 = 2,

53 
	mDP_GTP_GT2_SYS_LANE_SEL_MASK
 = 4,

54 
	mDP_GTP_GT3_SYS_LANE_SEL_MASK
 = 8

57 
	eDpGçSysClkSñCfg


59 
	mDP_GTP_SYS_CLK_SEL_CFG_REF_PLL0_SRC_PLL0
,

60 
	mDP_GTP_SYS_CLK_SEL_CFG_REF_PLL0_SRC_PLL1
,

61 
	mDP_GTP_SYS_CLK_SEL_CFG_REF_PLL1_SRC_PLL0
,

62 
	mDP_GTP_SYS_CLK_SEL_CFG_REF_PLL1_SRC_PLL1


65 
	eDpGçPŒClkSñ


67 
	mDP_GTP_PLL_CLK_SEL_PLL0
,

68 
	mDP_GTP_PLL_CLK_SEL_PLL1


71 
	eDpGçPŒCålRefClkSñ


73 
	mDP_GTP_PLL_CTRL_REF_CLK_SEL_RSRVD
,

74 
	mDP_GTP_PLL_CTRL_REF_CLK_SEL_GTREFCLK0
,

75 
	mDP_GTP_PLL_CTRL_REF_CLK_SEL_GTREFCLK1
,

76 
	mDP_GTP_PLL_CTRL_REF_CLK_SEL_GTEASTREFCLK0
,

77 
	mDP_GTP_PLL_CTRL_REF_CLK_SEL_GTEASTREFCLK1
,

78 
	mDP_GTP_PLL_CTRL_REF_CLK_SEL_GTWESTREFCLK0
,

79 
	mDP_GTP_PLL_CTRL_REF_CLK_SEL_GTWESTREFCLK1
,

80 
	mDP_GTP_PLL_CTRL_REF_CLK_SEL_GTGREFCLK0_1


83 
	eDpGçTxRxPdMode


85 
	mDP_GTP_TX_RX_PD_MODE_0
,

86 
	mDP_GTP_TX_RX_PD_MODE_1
,

87 
	mDP_GTP_TX_RX_PD_MODE_2
,

88 
	mDP_GTP_TX_RX_PD_MODE_3


91 
	eDpGçTxRxPrbsSñ


93 
	mDP_GTP_TX_RX_PRBS_OFF
,

94 
	mDP_GTP_TX_RX_PRBS_7
,

95 
	mDP_GTP_TX_RX_PRBS_15
,

96 
	mDP_GTP_TX_RX_PRBS_23
,

97 
	mDP_GTP_TX_RX_PRBS_31


103 
	eMdioMa°îSœveSñ


105 
	mMDIO_SLAVE_FMC_HPC
,

106 
	mMDIO_SLAVE_KC705_MARVELL
,

107 
	mMDIO_SLAVE_10G_PCS_PMA
,

108 
	mMDIO_SLAVE_RXAUI_CORE
,

109 
	mMDIO_MASTER_MOTHERBOARD
 = 0,

110 
	mMDIO_MASTER_RXAUI
 = 1

113 
	eI2cP‹tSñ


115 
	mI2C_MASTER_CORE
 = 0,

116 
	mI2C_MASTER_MOTHERBOARD
 = 1

119 
	eGcmFªquí˚yDëe˘Sñe˘


121 
	mGCM_FREQ_DET_SEL_XMII_RX_CLK
,

122 
	mGCM_FREQ_DET_SEL_GE_CLM_RX_CLK
,

126 
	eDpFªquí˚yDëe˘Sñe˘


128 
	mDP_GT_RXUSRCLK2
,

129 
	mDP_GT_TXUSRCLK2


132 
	sDpFªqCÆcuœã


134 
uöt16_t
 
	mmax_cou¡
 : 14;

135 
DpFªquí˚yDëe˘Sñe˘
 
	m˛k_£l
;

138 
	sDpFªqDëAuto


140 
uöt16_t
 
	mcomp_max_cou¡
 : 14;

141 
uöt16_t
 
	mcomp_mö_cou¡
 : 14;

145 
bb_t›_a7_Inô
();

146 
bb_t›_a7_TriSèãI2cS˛
(
boﬁ
 
åiSèã
);

147 
bb_t›_a7_SëMdioSœve
(
MdioMa°îSœveSñ
 
ma°îSœveSñ
);

148 
bb_t›_a7_F‹˚SëMdioSœve
(
uöt8_t
 
ma°îSœveSñ
);

149 
bb_t›_a7_SëRéI2cMuxP‹t
(
I2cP‹tSñ
 
ma°îSœveSñ
);

150 
bb_t›_a7_AµlyE«bÀDp159
(
boﬁ
 
íabÀ
);

151 
bb_t›_a7_AµlyE«bÀDp130
(
boﬁ
 
íabÀ
);

152 
bb_t›_a7_AµlyRe£tDp130
(
boﬁ
 
ª£t
);

154 
	$bb_t›_≠∂ySÂTønsmôãrE«bÀ
(
boﬁ
 
dißbÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

155 
	`bb_t›_≠∂ySÂTxFa°R©e
(
boﬁ
 
Á°R©e
);

156 
	`bb_t›_≠∂ySÂRxFa°R©e
(
boﬁ
 
Á°R©e
);

157 
boﬁ
 
	`bb_t›_hasSÂRxLos
();

158 
boﬁ
 
	`bb_t›_hasSÂTxFau…
();

159 
boﬁ
 
	`bb_t›_isSÂModuÀAb£¡
();

160 
boﬁ
 
	`bb_t›_isRxauiClk156Locked
();

162 
	`bb_t›_≠∂yUsb3PhyCålR°
(
boﬁ
 
ª£t
);

163 
	$bb_t›_≠∂yUsb3PhyCålSå≠pögD⁄e
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

164 
	$bb_t›_≠∂yUsb3PhyCålOuçutE«bÀ
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

165 
	$bb_t›_≠∂yUsb3PhyCålXèlDißbÀ
(
boﬁ
 
dißbÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

166 
	$bb_t›_≠∂yUsb3PhyCålSscDißbÀ
(
boﬁ
 
dißbÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

167 
	`bb_t›_≠∂yUsb3PhyCålVbusSwCål
(
boﬁ
 
íabÀ
);

168 
	`bb_t›_≠∂yUsb3PhyCålVbusPª£¡
(
boﬁ
 
a˘ive
);

171 
	`bb_t›_£tDpGçRxClkCål
(
DpGçSysClkSñCfg
 
˛kCfg
);

172 
	`bb_t›_£tDpGçTxClkCål
(
DpGçSysClkSñCfg
 
˛kCfg
);

173 
	`bb_t›_£tGçPŒRefClkSñ
(
DpGçPŒClkSñ
 
∂lClkSñ
, 
DpGçPŒCålRefClkSñ
 
ªfClkSñ
);

174 
	`bb_t›_≠∂yGçPŒPowîDown
(
DpGçPŒClkSñ
 
∂lClkSñ
, 
boﬁ
 
powîDn
);

175 
boﬁ
 
	`bb_t›_isGçPŒRefClkLo°
(
DpGçPŒClkSñ
 
∂lClkSñ
);

176 
boﬁ
 
	`bb_t›_isGçPŒLock
(
DpGçPŒClkSñ
 
∂lClkSñ
);

177 
	`bb_t›_£tDpGçRxMiscCålPd
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPdMode
 
pdMode
);

178 
	`bb_t›_£tDpGçTxMiscCålPd
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPdMode
 
pdMode
);

179 
	`bb_t›_£tDpGçRxPrbsCålSñ
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPrbsSñ
 
¥bs
);

180 
	`bb_t›_≠∂yDpGçRxPrbsCålPrbsC¡Re£t
(
DpGçSysL™eSñ
 
œ√Sñ
, 
boﬁ
 
ª£t
);

181 
	`bb_t›_£tDpGçTxPrbsCålSñ
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPrbsSñ
 
¥bs
);

182 
	`bb_t›_a7_≠∂yDpRxSo·Re£t
(
boﬁ
 
ª£t
);

183 
	`bb_t›_a7_≠∂yDpTxSo·Re£t
(
boﬁ
 
ª£t
);

184 
	`bb_t›_a7_˛órPídögO‹Irq
();

185 
uöt16_t
 
	`bb_t›_a7_gëCuºítFrqCou¡
();

186 
boﬁ
 
	`bb_t›_a7_isRefClkFa°îbô
();

188 
	$bb_t›_úqAqu™tüE«bÀ
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

189 
	$bb_t›_úqAqu™tüCÀ¨
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

190 
	$bb_t›_úqUsbVbusDëe˘
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

191 
	$bb_t›_a7_RxauiAlig√dE«bÀ
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

193 
boﬁ
 
	`bb_t›_isIrqUsbVbusDëe˘RawSë
();

194 
	`bb_t›_TriSèãMdioMdc
(
boﬁ
 
åiSèã
);

196 
	$bb_t›_≠∂yRe£tGmiiPhy
(
boﬁ
 
ª£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

197 
	$bb_t›_a7_≠∂yXmiiRxRe£t
(
boﬁ
 
ª£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

198 
	$bb_t›_a7_≠∂yXmiiTxRe£t
(
boﬁ
 
ª£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

199 
	$bb_t›_sy°emRe£t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

200 
	$bb_t›_a7_n⁄CpuModuÀRe£t
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

201 
	`bb_t›_a7_ªlﬂdFpga
();

202 
	`bb_t›_a7_dißbÀFpgaW©chdog
();

203 
boﬁ
 
	`bb_t›_a7_isFpgaFÆlback
();

204 
	`bb_t›_a7_åiggîFpgaFÆlback
();

205 
	`bb_t›_a7_ch™geFpgaImage
(
boﬁ
 
ÁŒback
);

206 
	`bb_t›_a7_wrôeU£rReg
(
uöt32_t
 
vÆ
);

207 
uöt32_t
 
	`bb_t›_a7_ªadU£rReg
();

208 
uöt32_t
 
	`bb_t›_a7_ªadSètusReg
();

210 
	$bb_t›_a7_öôüãGcmFªquícyDëe˘i⁄
(
GcmFªquí˚yDëe˘Sñe˘
 
˛ock_£À˘
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

211 
boﬁ
 
	$bb_t›_a7_hasGcmFªquícyDëe˘i⁄Com∂ëed
(
boﬁ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

212 
uöt32_t
 
	$bb_t›_a7_gëNomöÆGcmFªquícyDëe˘ed
(
boﬁ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

213 
	$bb_t›_a7_‰eqDëDpO‹Irq
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

214 
	$bb_t›_a7_‰eqDëAutoE«bÀ
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

215 
	$bb_t›_a7_xmiiTxClkSñ
(
boﬁ
 
tx_˛k
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

216 
	$bb_t›_a7_gmiiCålSëTri°©es
(
boﬁ
 
£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

217 
	$bb_t›_a7_miiCålSëTri°©es
(
boﬁ
 
£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

218 
	$bb_t›_a7_xmiiGtxClkEn
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

219 
	$bb_t›_a7_rs232Re£t
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

220 
	$bb_t›_a7_rs232ChùC⁄figuª
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

	@components/top/inc/bb_top_dp.h

11 #i‚de‡
BB_TOP_DP_H


12 
	#BB_TOP_DP_H


	)

15 
	~<iba£.h
>

16 
	~<bb_c‹e.h
>

21 
	#GT_RESET_TIMEOUT_USEC
 (1 * 1000 * 1000)

22 
	#GT_LOCK_TIMEOUT_USEC
 5000

23 
	#GT_FRQ_TIMEOUT_USEC
 1000

24 
	#DP_MAX_COUNT
 (0x3FFF)

25 

	)

29 
	eMaöLökB™dwidth


31 
	mBW_INVALID
 = 0x00,

32 
	mBW_1_62_GBPS
 = 0x06,

33 
	mBW_2_70_GBPS
 = 0x0A,

34 
	mBW_5_40_GBPS
 = 0x14,

35 
	mBW_8_10_GBPS
 = 0x1E

39 
	eL™eCou¡


41 
	mLANE_COUNT_INVALID
 = 0x00,

42 
	mLANE_COUNT_1
 = 0x01,

43 
	mLANE_COUNT_2
 = 0x02,

44 
	mLANE_COUNT_4
 = 0x04

49 
	eVﬁègeSwög


51 
	mVOLTAGE_SWING_LEVEL_0
 = 0x0,

52 
	mVOLTAGE_SWING_LEVEL_1
 = 0x1,

53 
	mVOLTAGE_SWING_LEVEL_2
 = 0x2,

54 
	mVOLTAGE_SWING_LEVEL_3
 = 0x3

58 
	ePªEmphasis


60 
	mPREEMPHASIS_LEVEL_0
 = 0x0,

61 
	mPREEMPHASIS_LEVEL_1
 = 0x1,

62 
	mPREEMPHASIS_LEVEL_2
 = 0x2,

63 
	mPREEMPHASIS_LEVEL_3
 = 0x3

66 
	eDpcdRevisi⁄


68 
	mDPCD_REV_1_0
 = 0x10,

69 
	mDPCD_REV_1_1
 = 0x11,

70 
	mDPCD_REV_1_2
 = 0x12,

71 
	mDPCD_REV_1_3
 = 0x13,

72 
	mDPCD_REV_1_4
 = 0x14

75 
	eMmcmTxClkOutEncodög


77 
	mMMCM_TX_CLK_OUT_ENCODING_HBR2_40B
,

78 
	mMMCM_TX_CLK_OUT_ENCODING_HBR_40B
,

79 
	mMMCM_TX_CLK_OUT_ENCODING_RBR_40B


82 
	stxOutClkMmcm


84 
uöt8_t
 
	maddr
;

85 
uöt16_t
 
	mhbr2_40b
;

86 
uöt16_t
 
	mhbr_40b
;

87 
uöt16_t
 
	mrbr_40b
;

88 
uöt16_t
 
	mhbr_20b
;

89 
uöt16_t
 
	mrbr_20b
;

94 
	$bb_t›_dpRe£tDpSök
(
boﬁ
 
ª£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

95 
	$bb_t›_dpC⁄figuªDpTøns˚ivîLex
((*
ˇŒback
)(
boﬁ
)Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

96 
	$bb_t›_dpRe£tDpTøns˚ivîLex
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

97 
boﬁ
 
	$bb_t›_dpGŸClockRecovîy
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

98 
boﬁ
 
	$bb_t›_dpGŸSymbﬁLock
(
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexftext")));

99 
	$bb_t›_dpC⁄figuªDpTøns˚ivîLex
((*
ˇŒback
)(
boﬁ
)Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

100 
	$bb_t›_ˇn˚lDpC⁄figuªDpTøns˚ivîLex
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

101 
	$bb_t›_dpRe£tDpTøns˚ivîLex
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

102 
boﬁ
 
	$bb_t›_dpGŸClockRecovîy
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

103 
boﬁ
 
	$bb_t›_dpGŸSymbﬁLock
(
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

104 
	$bb_t›_dpInôC⁄figuªDpTøns˚ivîLex
(

105 
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

108 
	$bb_t›_dpC⁄figuªDpTøns˚ivîRex
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

109 
	$bb_t›_dpRe£tDpTøns˚ivîRex
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

110 
	$bb_t›_dpPªCh¨geMaöLök
(
boﬁ
 
ch¨ge
, 
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

111 
	$bb_t›_dpE«bÀDpSour˚
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

112 
	$bb_t›_dpE«bÀ8b10bíA7
(
boﬁ
 
íabÀ
Ë
	`__©åibuã__
((
	`£˘i⁄
(".rexftext")));

115 
MmcmTxClkOutEncodög
 
	`compuãMmcmTxClkOutEncodög
(
MaöLökB™dwidth
 
bw
);

116 
	`bb_t›_dpInô
();

117 
	`bb_t›_dΩInô
();

118 
	`bb_t›_dpDΩWrôe
(
uöt16_t
 
dΩAddr
, uöt16_à
wrôeD©a
, 
uöt32_t
 
dΩEnMask
);

119 
	`bb_t›_dpDΩRódModWrôe
(
uöt16_t
 
dΩAddr
,

120 
uöt16_t
 
wrôeD©a
,

121 
uöt16_t
 
wrôeMask
,

122 
uöt32_t
 
dΩEnMask
);

	@components/top/inc/bb_top_dp_a7.h

11 #i‚de‡
BB_TOP_DP_A7_H


12 
	#BB_TOP_DP_A7_H


	)

15 
	~<iba£.h
>

16 
	~<bb_t›_dp.h
>

17 
	~<bb_t›_a7_ªgs.h
>

25 
bb_t›_dpE«bÀDpSökA7
();

26 
	$bb_t›_dpInôC⁄figuªDpTøns˚ivîLexA7
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

27 
	$bb_t›_dpC⁄figuªDpTøns˚ivîLexA7
((*
ˇŒback
)(
boﬁ
)Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

28 
	$bb_t›_ˇn˚lDpC⁄figuªDpTøns˚ivîLexA7
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

29 
	$bb_t›_dpRe£tDpTøns˚ivîLexA7
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

30 
boﬁ
 
	$bb_t›_dpGŸClockRecovîyA7
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

31 
boﬁ
 
	$bb_t›_dpGŸSymbﬁLockA7
(
L™eCou¡
 
lc
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

32 
	$bb_t›_a7_c⁄figRxCdr
(
boﬁ
 
sscOn
Ë
	`__©åibuã__
((
	`£˘i⁄
(".lexatext")));

35 
	`bb_t›_dpC⁄figuªDpTøns˚ivîRexA7
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
);

36 
	`bb_t›_dpRe£tDpTøns˚ivîRexA7
();

37 
	`bb_t›_dpSëPªEmphasisA7
();

38 
	`bb_t›_dpSëVﬁègeSwögA7
();

39 
	`bb_t›_dpPªCh¨geMaöLökA7
(
boﬁ
 
ch¨ge
, 
L™eCou¡
 
lc
);

40 
	`bb_t›_dpE«bÀDpSour˚A7
();

41 
	`bb_t›_dpSëTxDiffCålA7
(
uöt8_t
 
txDiffCål
,
boﬁ
 
ch™geDiffCål
);

42 
	`bb_t›_dpSëTxPo°Curs‹A7
(
uöt8_t
 
txPo°Curs‹
, 
boﬁ
 
ch™gePo°Curs‹
);

44 
	`bb_t›_dpInôA7
();

45 
	`bb_t›_dΩInôA7
(vﬁ©ûê* 
dΩBa£Addr
);

48 
	`bb_t›_a7_gëDpFªq
(c⁄° 
DpFªqCÆcuœã
 *
dpFªqCÆcuœã
, (*
ˇŒback
)(
uöt32_t
));

49 
	`bb_t›_a7_dp_‰q_dë_auto
(c⁄° 
DpFªqDëAuto
 *
dpFªqDëAutoLﬂd
);

	@components/top/inc/bb_top_dp_k7.h

11 #i‚de‡
DP_H


12 
	#DP_H


	)

15 
	~<iba£.h
>

16 
	~<bb_t›_dp.h
>

24 
bb_t›_dpE«bÀDpSökK7
();

25 
bb_t›_dpC⁄figuªDpTøns˚ivîLexK7
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
);

26 
bb_t›_dpRe£tDpTøns˚ivîLexK7
();

27 
boﬁ
 
bb_t›_dpGŸClockRecovîyK7
();

28 
boﬁ
 
bb_t›_dpGŸSymbﬁLockK7
(
L™eCou¡
 
lc
);

31 
bb_t›_dpC⁄figuªDpTøns˚ivîRexK7
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
);

32 
bb_t›_dpSëPªEmphasisK7
(
PªEmphasis
 
≥
[4], 
uöt8_t
 
œ√Mask
);

33 
bb_t›_dpSëVﬁègeSwögK7
(
VﬁègeSwög
 
vs
[4], 
uöt8_t
 
œ√Mask
);

34 
bb_t›_dpPªCh¨geMaöLökK7
(
boﬁ
 
ch¨ge
, 
L™eCou¡
 
lc
);

35 
bb_t›_dpE«bÀDpSour˚K7
();

36 
bb_t›_dpRe£tDpTøns˚ivîRexK7
();

38 
bb_t›_dpInôK7
(vﬁ©ûê* 
gtComm⁄Ba£Addr
,

39 vﬁ©ûê* 
dΩBa£Addr
);

40 
uöt16_t
 
bb_t›_dpDΩRódK7
(uöt16_à
dΩAddr
, 
bb_t›_dΩ_í_mask
 
dΩEnMask
);

41 
bb_t›_dpDΩRódModWrôeK7
(
uöt16_t
 
dΩAddr
,

42 
uöt16_t
 
wrôeD©a
,

43 
uöt16_t
 
wrôeMask
,

44 
bb_t›_dΩ_í_mask
 
dΩEnMask
);

	@components/top/inc/bb_top_ge.h

11 #i‚de‡
BB_TOP_GE_H


12 
	#BB_TOP_GE_H


	)

15 
	~<iba£.h
>

16 
	~<ôy≥s.h
>

21 (*
	tW©chdogCÆlback
)();

23 
	eGeU¨tSœveSñ


25 
GE_UART_SLAVE_SEL_MOTHERBOARD
,

26 
GE_UART_SLAVE_SEL_GE_UART


30 
	$bb_t›_ge_Inô
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

31 
	$bb_t›_SëGEToRunMode
(
W©chdogCÆlback
 
ª£tH™dÀr
, W©chdogCÆlback 
runH™dÀr
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

32 
	$bb_t›_SëGEToRe£tMode
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

33 
	$bb_t›_SëGEToBoŸlﬂdîMode
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

34 
	$bb_t›_SèπGEW©chdogRu¬ögTimî
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

35 
	$bb_t›_St›GEW©chdogRe£tTimî
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

36 
	$bb_t›_St›GEW©chdogRu¬ögTimî
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

37 
	$bb_t›_AµlyGERe£t
(
boﬁ
 
ª£t
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

38 
boﬁ
 
	$bb_t›_isGERe£tOn
(Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

39 
	`bb_t›_AµlyGEI¡îru±
(
boﬁ
 
£tI¡
);

40 
	`bb_t›_C⁄åﬁGeD©aPhy
(
boﬁ
 
ª£t
);

41 
	`bb_t›_AµlyGEVbusDëe˘
(
boﬁ
 
£tVbus
);

	@components/top/inc/bb_top_k7.h

11 #i‚de‡
BB_TOP_K7_H


12 
	#BB_TOP_K7_H


	)

15 
	~<iba£.h
>

16 
	~<t›_gpio.h
>

17 
	~<gpio.h
>

18 
	~<bb_t›.h
>

24 
	eBbT›LökSñ


26 
	mBB_TOP_LINK_SEL_PCS_PMA
,

27 
	mBB_TOP_LINK_SEL_RXAUI


30 
	ePcsPmaPmdTy≥


32 
	mPCS_PMA_PMD_TYPE_10GBASE_SR
,

33 
	mPCS_PMA_PMD_TYPE_10GBASE_LR
,

34 
	mPCS_PMA_PMD_TYPE_10GBASE_ER


40 
	eMdioMa°îSœveSñ


42 
	mMDIO_SLAVE_FMC_HPC
,

43 
	mMDIO_SLAVE_KC705_MARVELL
,

44 
	mMDIO_SLAVE_10G_PCS_PMA
,

45 
	mMDIO_SLAVE_RXAUI_CORE
,

46 
	mMDIO_MASTER_MOTHERBOARD
 = 0,

47 
	mMDIO_MASTER_RXAUI
 = 1

50 
	eI2cP‹tSñ


52 
	mI2C_MASTER_CORE
 = 0,

53 
	mI2C_MASTER_MOTHERBOARD
 = 1

56 
	eDpGtxSysL™eSñ


58 
	mDP_GTX_GT0_SYS_LANE_SEL
,

59 
	mDP_GTX_GT1_SYS_LANE_SEL
,

60 
	mDP_GTX_GT2_SYS_LANE_SEL
,

61 
	mDP_GTX_GT3_SYS_LANE_SEL


64 
	eDpGtxC∂lRefSñ


66 
	mDP_GTX_GT_RESERVED
,

67 
	mDP_GTX_GTREFCLK0
,

68 
	mDP_GTX_GTREFCLK1
,

69 
	mDP_GTX_GTNORTHREFCLK0
,

70 
	mDP_GTX_GTNORTHREFCLK1
,

71 
	mDP_GTX_GTSOUTHREFCLK0
,

72 
	mDP_GTX_GTSOUTHREFCLK1
,

73 
	mDP_GTX_GTGRREFCLK


76 
	eDpGtxTxRxPdMode


78 
	mDP_GTX_TX_RX_PD_MODE_0
,

79 
	mDP_GTX_TX_RX_PD_MODE_1
,

80 
	mDP_GTX_TX_RX_PD_MODE_2
,

81 
	mDP_GTX_TX_RX_PD_MODE_3


87 
bb_t›_k7_Inô
();

88 
bb_t›_AµlyRe£tI2cSwôch
(
boﬁ
 
ª£t
);

90 
bb_t›_k7_TriSèãI2cS˛
(
boﬁ
 
åiSèã
);

91 
bb_t›_k7_SëMdioSœve
(
MdioMa°îSœveSñ
 
ma°îSœveSñ
);

92 
bb_t›_k7_F‹˚SëMdioSœve
(
uöt8_t
 
ma°îSœveSñ
);

94 
bb_t›_AµlyRe£tHpcI2cGpio
(
boﬁ
 
ª£t
);

95 
bb_t›_AµlyRe£tLpcI2cGpio
(
boﬁ
 
ª£t
);

96 
bb_t›_AµlyRe£tDejôãrChù
(
boﬁ
 
ª£t
);

98 
bb_t›_k7_AµlyRe£tPhyRx
(
boﬁ
 
ª£t
);

99 
bb_t›_k7_AµlyRe£tPhyGtx
(
boﬁ
 
ª£t
);

101 
bb_t›_k7_AµlyRe£tEthî√tPhy
(
boﬁ
 
ª£t
);

103 
bb_t›_k7_SëRéI2cMuxP‹t
(
I2cP‹tSñ
 
ma°îSœveSñ
);

105 
uöt8_t
 
bb_t›_GëHpcId
();

106 
uöt8_t
 
bb_t›_GëLpcId
();

108 
bb_t›_k7_AµlyE«bÀDp159
(
boﬁ
 
íabÀ
);

109 
bb_t›_k7_AµlyE«bÀDp130
(
boﬁ
 
íabÀ
);

110 
bb_t›_k7_AµlyRe£tDp130
(
boﬁ
 
ª£t
);

112 
bb_t›_AµlyE«bÀDejôãrI¡îru±
(
boﬁ
 
íabÀ
);

113 
bb_t›_LökSñ
(
BbT›LökSñ
 
lök_£l
);

114 
boﬁ
 
bb_t›_k7_isLökSñRxaui
();

115 
boﬁ
 
bb_t›_k7_isBﬂrdRevZîo
();

117 
uöt16_t
 
bb_t›_k7_dΩRód
(uöt16_à
dΩAddr
, 
uöt8_t
 
dΩEnMask
);

119 
bb_t›_£tDpGtxC∂lRefClkSñ
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
DpGtxC∂lRefSñ
 
ªfClkSñ
);

121 #ifde‡
PLATFORM_A7_K7


122 
bb_t›_£tDpGçTxClkCål
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçSysClkSñCfg
 
˛kCfg
);

123 
bb_t›_£tGçPŒRefClkSñ
(
DpGçPŒClkSñ
 
∂lClkSñ
, 
DpGçPŒCålRefClkSñ
 
ªfClkSñ
);

126 
bb_t›_≠∂yGtxC∂lPowîDown
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
boﬁ
 
powîDn
);

128 #ifde‡
PLATFORM_A7_K7


129 
boﬁ
 
bb_t›_isGçPŒRefClkLo°
(
DpGçPŒClkSñ
 
∂lClkSñ
);

130 
boﬁ
 
bb_t›_isGçPŒLock
(
DpGçPŒClkSñ
 
∂lClkSñ
);

133 
bb_t›_£tDpGtxRxMiscCålLpm
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
boﬁ
 
íLpm
);

134 
bb_t›_£tDpGtxRxMiscCålPd
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
DpGtxTxRxPdMode
 
pdMode
);

135 
bb_t›_£tDpGtxTxMiscCålPd
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
DpGtxTxRxPdMode
 
pdMode
);

137 #ifde‡
PLATFORM_A7_K7


138 
bb_t›_£tDpGçRxPrbsCålSñ
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPrbsSñ
 
¥bs
);

139 
bb_t›_≠∂yDpGçRxPrbsCålPrbsC¡Re£t
(
DpGçSysL™eSñ
 
œ√Sñ
, 
boﬁ
 
ª£t
);

140 
bb_t›_£tDpGçTxPrbsCålSñ
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPrbsSñ
 
¥bs
);

142 
bb_t›_k7_≠∂yDpRxSo·Re£t
(
boﬁ
 
ª£t
);

143 
bb_t›_k7_≠∂yDpTxSo·Re£t
(
boﬁ
 
ª£t
);

145 
bb_t›_£t10GEthCålPcsPmaPmdTy≥
(
PcsPmaPmdTy≥
 
ty≥
);

146 
bb_t›_≠∂y10GEthCålPcsPmaRe£t
(
boﬁ
 
ª£t
);

147 
bb_t›_övît10GEthCålPcsPmaGt0TxPﬁ¨ôy
(
boﬁ
 
övîãd
);

148 
bb_t›_övît10GEthCålPcsPmaGt0RxPﬁ¨ôy
(
boﬁ
 
övîãd
);

149 
bb_t›_k7_n⁄CpuModuÀRe£t
();

	@components/top/inc/bb_top_lmk04906.h

11 #i‚de‡
LMK04906_H


12 
	#LMK04906_H


	)

21 
PLL_lmk04906Inô
();

22 
uöt32_t
 
PLL_lmk04906RódFromReg
(
uöt8_t
 
addr
);

	@components/top/src/bb_top.c

25 
	~<›ti⁄s.h
>

26 
	~<bb_t›.h
>

27 
	~<bb_t›_ge.h
>

28 
	~<À⁄_timîs.h
>

29 
	~<bb_chù_ªgs.h
>

30 
	~<bb_t›_ªgs.h
>

31 
	~<bb_c‹e.h
>

32 
	~<¸c.h
>

33 
	~<moduÀ_addªs£s_ªgs.h
>

34 
	~<öãºu±s.h
>

35 
	~<u¨t.h
>

37 
	~"bb_t›_log.h
"

42 
	#BB_TOP_LINK_LOCK_TIMEOUT
 (2*1000)

43 
	#BB_TOP_CORE_IDENTIFICATION_MASK_1
 0xf0

44 
	#BB_TOP_CORE_IDENTIFICATION_MASK_2
 0x0f

45 
	#BB_TOP_CORE_DASH_THREE
 0x10

	)

52 vﬁ©ûê
bb_t›_s
* 
	gbb_t›_ªgi°îs
;

53 vﬁ©ûê
bb_t›_dΩ
 *
	gdΩ
;

56 
dΩWrôe
(
uöt16_t
 
dΩAddr
, uöt16_à
wrôeD©a
, 
bb_t›_dΩ_dΩ_í_mask
 
dΩEnMask
);

67 
	$bb_t›_Inô
()

69 
bb_t›_ªgi°îs
 = (vﬁ©ûê
bb_t›_s
*Ë
bb_chù_bb_t›_s_ADDRESS
;

70 
bb_t›_ªgi°îs
->
úq
.
s
.
íabÀ
.
dw
 = 0;

71 
bb_t›_ªgi°îs
->
úq
.
s
.
≥ndög
.
dw
 = 
bb_t›_úq_≥ndög_WRITEMASK
;

73 #ifde‡
PLATFORM_K7


74 
	`bb_t›_k7_Inô
();

76 #ifde‡
PLATFORM_A7


77 
	`bb_t›_a7_Inô
();

79 
	`bb_t›_ge_Inô
();

81 
	`TOPLEVEL_£tPﬁlögMask
(
SECONDARY_INT_BBTOP_INT_MSK
);

82 
	}
}

92 
	$bb_t›_dΩInô
()

94 
dΩ
 = (vﬁ©ûê
bb_t›_dΩ
*Ë
bb_chù_bb_t›_dΩ_ADDRESS
;

95 
	}
}

105 
	$bb_t›_swôchFpgaImage
()

109 
	`bb_t›_a7_ch™geFpgaImage
(
	`bb_t›_IsFpgaGﬁdíImage
());

110 
	}
}

120 
	$bb_t›_TriSèãI2cS˛
(
boﬁ
 
åiSèã
)

122 #ifde‡
PLATFORM_K7


123 
	`bb_t›_k7_TriSèãI2cS˛
(
åiSèã
);

125 #ifde‡
PLATFORM_A7


126 
	`bb_t›_a7_TriSèãI2cS˛
(
åiSèã
);

128 
	}
}

139 
	$bb_t›_SëMdioSœve
(
MdioMa°îSœveSñ
 
ma°îSœveSñ
)

141 #ifde‡
PLATFORM_K7


142 
	`bb_t›_k7_SëMdioSœve
(
ma°îSœveSñ
);

144 #ifde‡
PLATFORM_A7


145 
	`bb_t›_a7_SëMdioSœve
(
ma°îSœveSñ
);

147 
	}
}

157 
	$bb_t›_rs232Re£t
(
boﬁ
 
íabÀ
)

159 #ifde‡
PLATFORM_A7


160 
	`bb_t›_a7_rs232Re£t
(
íabÀ
);

162 
	}
}

172 
	$bb_t›_rs232ChùC⁄figuª
(
boﬁ
 
íabÀ
)

174 #ifde‡
PLATFORM_A7


175 
	`bb_t›_a7_rs232ChùC⁄figuª
(
íabÀ
);

177 
	}
}

187 
	$bb_t›_n⁄CpuModuÀRe£t
()

189 #ifde‡
PLATFORM_K7


190 
	`bb_t›_k7_n⁄CpuModuÀRe£t
();

192 #ifde‡
PLATFORM_A7


193 
	`bb_t›_a7_n⁄CpuModuÀRe£t
();

195 
	}
}

207 
	$bb_t›_F‹˚SëMdioSœve
(
uöt8_t
 
ma°îSœveSñ
)

209 #ifde‡
PLATFORM_K7


210 
	`bb_t›_k7_F‹˚SëMdioSœve
(
ma°îSœveSñ
);

212 #ifde‡
PLATFORM_A7


213 
	`bb_t›_a7_F‹˚SëMdioSœve
(
ma°îSœveSñ
);

215 
	}
}

227 
	$bb_t›_LökClockE«bÀ
(
boﬁ
 
íabÀ
)

229 i‡(
íabÀ
)

232 
bb_t›_ªgi°îs
->
gcm
.
s
.
c⁄åﬁ
.
bf
.
lök_gt_comm⁄_∂l0ª£t
 = 0;

235 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

236 (
bb_t›_ªgi°îs
->
gcm
.
s
.
°©us
.
bf
.
lök_mmcm_lock
 == 0))

238 
	`üs£π_TOP_COMPONENT_0
(

239 
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()Ë< 
BB_TOP_LINK_LOCK_TIMEOUT
,

240 
BB_TOP_LINK_LOCK_WAIT_TIMEOUT
);

246 
bb_t›_ªgi°îs
->
gcm
.
s
.
c⁄åﬁ
.
bf
.
lök_gt_comm⁄_∂l0ª£t
 = 1;

248 
	}
}

261 
	$bb_t›_AµlyRe£tRxLökSèts
(
boﬁ
 
ª£t
)

263 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
lök_°©s_rx_r°
 = 
ª£t
;

264 
	}
}

276 
	$bb_t›_AµlyRe£tLayî3Rx
(
boﬁ
 
ª£t
)

278 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
l3_rx_r°
 = 
ª£t
;

279 
	}
}

291 
	$bb_t›_AµlyRe£tLayî3Tx
(
boﬁ
 
ª£t
)

293 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
l3_tx_r°
 = 
ª£t
;

294 
	}
}

305 
	$bb_t›_AµlyRe£tMˇTxRx
(
boﬁ
 
ª£t
)

307 
bb_t›_grm_so·_r°_˘æ
 
r°_˘æ
 = { .
dw
 = 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.dw };

308 i‡(
ª£t
)

310 
r°_˘æ
.
bf
.
mˇ_c‹e_rx_r°
 = 1;

311 
r°_˘æ
.
bf
.
mˇ_c‹e_tx_r°
 = 1;

315 
r°_˘æ
.
bf
.
mˇ_c‹e_rx_r°
 = 0;

316 
r°_˘æ
.
bf
.
mˇ_c‹e_tx_r°
 = 0;

318 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
dw
 = 
r°_˘æ
.dw;

319 
	}
}

329 
	$bb_t›_AµlyRe£tMˇTx
(
boﬁ
 
ª£t
)

331 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
mˇ_c‹e_tx_r°
 = 
ª£t
;

332 
	}
}

342 
	$bb_t›_AµlyRe£tMˇRx
(
boﬁ
 
ª£t
)

344 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
mˇ_c‹e_rx_r°
 = 
ª£t
;

345 
	}
}

356 
	$bb_t›_AµlyRe£tMacTx
(
boﬁ
 
ª£t
)

358 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dŒ_tx_r°
 = 
ª£t
;

359 
	}
}

369 
	$bb_t›_AµlyRe£tMacRx
(
boﬁ
 
ª£t
)

371 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dŒ_rx_r°
 = 
ª£t
;

372 
	}
}

382 
	$bb_t›_AµlyRe£tDpSök
(
boﬁ
 
ª£t
)

384 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dp_sök_r°
 = 
ª£t
 ? 1 : 0;

385 
	}
}

396 
	$bb_t›_AµlyRe£tEncodî
(
boﬁ
 
ª£t
)

398 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
tico_e_˘æ_r°
 = 
ª£t
 ? 1 : 0;

399 
	}
}

409 
boﬁ
 
	$bb_t›_DpEncodîInRe£t
()

411  
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
tico_e_˘æ_r°
;

412 
	}
}

421 
boﬁ
 
	$bb_t›_DpSökInRe£t
()

423  
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dp_sök_r°
;

424 
	}
}

433 
boﬁ
 
	$bb_t›_DpSour˚InRe£t
()

435  
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dp_sour˚_r°
;

436 
	}
}

446 
	$bb_t›_AµlyDpSour˚TicoDCålRe£t
(
boﬁ
 
ª£t
)

448 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
tico_d_˘æ_r°
 = 
ª£t
 ? 1 : 0;

449 
	}
}

460 
	$bb_t›_AµlyRe£tDpSour˚
(
boﬁ
 
ª£t
)

462 
	`ûog_TOP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
BB_TOP_DP_SOURCE_RST
, 
ª£t
);

463 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dp_sour˚_r°
 = 
ª£t
;

464 
	}
}

474 
boﬁ
 
	$bb_t›_IsDevi˚Lex
()

476  !
	`bb_c‹e_isRex
();

477 
	}
}

488 
	$bb_t›_AµlyRe£tUÕPhyClkPŒ
(
boﬁ
 
ª£t
)

492 
bb_t›_ªgi°îs
->
gcm
.
s
.
c⁄åﬁ
.
bf
.
uÕ_phy_˛k_∂l_r°
 = 
ª£t
 ;

493 
	}
}

503 
	$bb_t›_UÕPhyTxClockC⁄åﬁ
(
boﬁ
 
íabÀ
)

505 
bb_t›_ªgi°îs
->
usb3phy_˘æ
.
bf
.
tx_˛k_í
 = 
íabÀ
 ;

506 
	}
}

516 
	$bb_t›_AµlyRe£tUÕPhy
(
boﬁ
 
ª£t
)

518 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
uÕ_phy_r°
 = 
ª£t
;

519 
	}
}

529 
	$bb_t›_AµlyRe£tXusb
(
boﬁ
 
ª£t
)

531 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
xusb_r°
 = 
ª£t
;

532 
	}
}

542 
	$bb_t›_AµlyRe£tUµ
(
boﬁ
 
ª£t
)

544 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
uµ_r°
 = 
ª£t
;

545 
	}
}

556 
	$bb_t›_AµlyRe£tUÕC‹e
(
boﬁ
 
ª£t
)

558 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
uÕ_c‹e_r°
 = 
ª£t
;

559 
	}
}

569 
	$bb_t›_SëRéI2cMuxP‹t
(
I2cP‹tSñ
 
p‹t
)

572 #ifde‡
PLATFORM_K7


573 
	`bb_t›_k7_SëRéI2cMuxP‹t
(
p‹t
);

575 #ifde‡
PLATFORM_A7


576 
	`bb_t›_a7_SëRéI2cMuxP‹t
(
p‹t
);

578 
	}
}

588 
	$bb_t›_AµlyE«bÀDp159
(
boﬁ
 
íabÀ
)

590 #ifde‡
PLATFORM_K7


591 
	`bb_t›_k7_AµlyE«bÀDp159
(
íabÀ
);

593 #ifde‡
PLATFORM_A7


594 
	`bb_t›_a7_AµlyE«bÀDp159
(
íabÀ
);

596 
	}
}

606 
	$bb_t›_AµlyE«bÀDp130
(
boﬁ
 
íabÀ
)

608 #ifde‡
PLATFORM_K7


609 
	`bb_t›_k7_AµlyE«bÀDp130
(
íabÀ
);

611 #ifde‡
PLATFORM_A7


612 
	`bb_t›_a7_AµlyE«bÀDp130
(
íabÀ
);

614 
	}
}

624 
	$bb_t›_AµlyRe£tDp130
(
boﬁ
 
ª£t
)

626 #ifde‡
PLATFORM_K7


627 
	`bb_t›_k7_AµlyRe£tDp130
(
ª£t
);

629 #ifde‡
PLATFORM_A7


630 
	`bb_t›_a7_AµlyRe£tDp130
(
ª£t
);

632 
	}
}

642 
	$bb_t›_dΩWrôe
(
uöt16_t
 
dΩAddr
,

643 
uöt16_t
 
wrôeD©a
,

644 
uöt16_t
 
dΩEnMask
)

647 c⁄° 
bb_t›_dΩ_dΩ_˘æ
 
dΩCål
 = { .
bf
 = {

648 .
dΩ_addr
 = 
dΩAddr
,

649 .
dΩ_we
 = 1,

650 .
dΩ_di
 = 
wrôeD©a


652 
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_˘æ
.
dw
 = 
dΩCål
.dw;

655 (
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_dΩ_í_mask_READMASK
) != 0);

658 
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_í_mask
.
dw
 = 
dΩEnMask
;

659 
	}
}

669 
uöt16_t
 
	$bb_t›_dΩRód
(
uöt16_t
 
dΩAddr
, 
bb_t›_dΩ_dΩ_í_mask
 
dΩEnMask
)

671 
	`üs£π_TOP_COMPONENT_1
(
dΩEnMask
.
dw
 && !(drpEnMask.dw & (drpEnMask.dw - 1)),

672 
BB_TOP_DP_INVALID_DRP_READ
,

673 
dΩEnMask
.
dw
);

676 
bb_t›_dΩ_dΩ_˘æ
 
dΩCål
;

677 
dΩCål
.
dw
 = 0;

678 
dΩCål
.
bf
.
dΩ_addr
 = 
dΩAddr
;

679 
dΩCål
.
bf
.
dΩ_we
 = 0;

681 
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_˘æ
.
dw
 = 
dΩCål
.dw;

683 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

685 (
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_dΩ_í_mask_READMASK
) != 0);

687 
	`üs£π_TOP_COMPONENT_1
(
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()) < 10000,

688 
BB_TOP_DRP_READ_TIME_OVER
, 
__LINE__
);

692 
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_í_mask
.
dw
 = 
dΩEnMask
.dw;

694 
°¨tTime
 = 
	`LEON_TimîRód
();

696 (
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_dΩ_í_mask_READMASK
) != 0);

698 
	`üs£π_TOP_COMPONENT_1
(
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()) < 10000,

699 
BB_TOP_DRP_READ_TIME_OVER
, 
__LINE__
);

703  
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_ªad_d©a
.
bf
.
dΩ_do
;

704 
	}
}

718 
	$bb_t›_dΩRódModWrôe
(
uöt16_t
 
dΩAddr
,

719 
uöt16_t
 
wrôeD©a
,

720 
uöt16_t
 
wrôeMask
,

721 
bb_t›_dΩ_dΩ_í_mask
 
dΩEnMask
)

729 
	`COMPILE_TIME_ASSERT
(

730 
bb_t›_dΩ_dΩ_í_mask_WRITEMASK
 == 0x1FFF &&

731 
BB_TOP_DRP_DRP_EN_MASK_DP_GT0
 == 0x01 &&

732 
BB_TOP_DRP_DRP_EN_MASK_XADC
 == 0x1000

734 
uöt32_t
 
i
 = 
BB_TOP_DRP_DRP_EN_MASK_DP_GT0
;

735 
i
 <
BB_TOP_DRP_DRP_EN_MASK_XADC
;

736 
i
 <<= 1)

738 i‡(
dΩEnMask
.
dw
 & 
i
)

741 c⁄° 
bb_t›_dΩ_dΩ_í_mask
 
ªadMask
 = { .
dw
 = 
i
 };

742 c⁄° 
uöt16_t
 
ªadVÆ
 = 
	`bb_t›_dΩRód
(
dΩAddr
, 
ªadMask
);

745 c⁄° 
bb_t›_dΩ_dΩ_˘æ
 
dΩCål
 = { .
bf
 = {

746 .
dΩ_addr
 = 
dΩAddr
,

747 .
dΩ_we
 = 1,

748 .
dΩ_di
 = (
ªadVÆ
 & ~
wrôeMask
Ë| 
wrôeD©a


750 
dΩ
->
dΩ_˘æ
.
dw
 = 
dΩCål
.dw;

752 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

755 (
dΩ
->
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_dΩ_í_mask_READMASK
) != 0)

757 
	`üs£π_TOP_COMPONENT_1
(
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()) < 1000000,

758 
BB_TOP_DRP_WRITE_TIMER_OVER
,

759 
dΩ
->
dΩ_í_mask
.
dw


764 
dΩ
->
dΩ_í_mask
.
dw
 = 
dΩEnMask
.dw;

767 
	}
}

780 
	$bb_t›_dpDΩWrôe
(
uöt16_t
 
dΩAddr
, uöt16_à
wrôeD©a
, 
uöt32_t
 
dΩEnMask
)

782 
	`dΩWrôe
(
dΩAddr
, 
wrôeD©a
, (
bb_t›_dΩ_dΩ_í_mask
Ë
dΩEnMask
);

783 
	`ûog_TOP_COMPONENT_3
(
ILOG_USER_LOG
, 
BB_TOP_DP_DRP_WRITE
, 
dΩAddr
, 
dΩEnMask
, 
wrôeD©a
);

784 
	}
}

793 
boﬁ
 
	$bb_t›_IsASIC
()

795  (
bb_t›_ªgi°îs
->
sys_c⁄fig
.
bf
.
ãchnﬁogy
 == 1);

796 
	}
}

806 
boﬁ
 
	$bb_t›_IsFpgaGﬁdíImage
()

809 if(
bb_t›_ªgi°îs
->
sys_c⁄fig
.
bf
.
image_ty≥
 == 0)

810  
åue
;

811  
Ál£
;

812 
	}
}

822 
	$bb_t›_£tDpGçTxMiscCålPﬁ¨ôy
(
boﬁ
 
£t
)

824 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt0_txpﬁ¨ôy
 = 
£t
;

825 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt1_txpﬁ¨ôy
 = 
£t
;

826 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt2_txpﬁ¨ôy
 = 
£t
;

827 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt3_txpﬁ¨ôy
 = 
£t
;

828 
	}
}

838 
	$bb_t›_£tDpGçRxMiscCålPﬁ¨ôy
(
boﬁ
 
£t
)

840 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt0_rxpﬁ¨ôy
 = 
£t
;

841 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt1_rxpﬁ¨ôy
 = 
£t
;

842 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt2_rxpﬁ¨ôy
 = 
£t
;

843 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt3_rxpﬁ¨ôy
 = 
£t
;

845 
	}
}

855 
uöt8_t
 
	$bb_t›_gëRxauiSètusDebug
()

857  (
bb_t›_ªgi°îs
->
rxaui
.
s
.
°©us
.
bf
.
debug
);

858 
	}
}

861 #ifde‡
PLATFORM_A7_K7


869 
	$bb_t›_£tDpGçRxClkCål
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçSysClkSñCfg
 
˛kCfg
)

871 
œ√Sñ
)

873 
DP_GTP_GT0_SYS_LANE_SEL
:

874 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt0_rxsys˛k£l
 = 
˛kCfg
;

876 
DP_GTP_GT1_SYS_LANE_SEL
:

877 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt1_rxsys˛k£l
 = 
˛kCfg
;

879 
DP_GTP_GT2_SYS_LANE_SEL
:

880 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt2_rxsys˛k£l
 = 
˛kCfg
;

882 
DP_GTP_GT3_SYS_LANE_SEL
:

883 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt3_rxsys˛k£l
 = 
˛kCfg
;

889 
	}
}

899 
	$bb_t›_£tDpGçTxClkCål
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçSysClkSñCfg
 
˛kCfg
)

901 
œ√Sñ
)

903 
DP_GTP_GT0_SYS_LANE_SEL
:

904 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt0_txsys˛k£l
 = 
˛kCfg
;

906 
DP_GTP_GT1_SYS_LANE_SEL
:

907 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt1_txsys˛k£l
 = 
˛kCfg
;

909 
DP_GTP_GT2_SYS_LANE_SEL
:

910 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt2_txsys˛k£l
 = 
˛kCfg
;

912 
DP_GTP_GT3_SYS_LANE_SEL
:

913 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt3_txsys˛k£l
 = 
˛kCfg
;

919 
	}
}

929 
	$bb_t›_£tGçPŒRefClkSñ
(
DpGçPŒClkSñ
 
∂lClkSñ
, 
DpGçPŒCålRefClkSñ
 
ªfClkSñ
)

931 i‡(
∂lClkSñ
 =
DP_GTP_PLL_CLK_SEL_PLL0
)

933 
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_˘æ
.
bf
.
∂l0ªf˛k£l
 = 
ªfClkSñ
;

937 
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_˘æ
.
bf
.
∂l1ªf˛k£l
 = 
ªfClkSñ
;

939 
	}
}

949 
	$bb_t›_≠∂yGçPŒPowîDown
(
DpGçPŒClkSñ
 
∂lClkSñ
, 
boﬁ
 
powîDn
)

951 i‡(
∂lClkSñ
 =
DP_GTP_PLL_CLK_SEL_PLL0
)

953 
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_˘æ
.
bf
.
∂l0pd
 = 
powîDn
 ? 1 : 0;

957 
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_˘æ
.
bf
.
∂l1pd
 = 
powîDn
 ? 1 : 0;

959 
	}
}

969 
boﬁ
 
	$bb_t›_isGçPŒRefClkLo°
(
DpGçPŒClkSñ
 
∂lClkSñ
)

971 i‡(
∂lClkSñ
 =
DP_GTP_PLL_CLK_SEL_PLL0
)

973  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l0ªf˛klo°
 == 1);

977  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l1ªf˛klo°
 == 1);

979 
	}
}

989 
boﬁ
 
	$bb_t›_isGçPŒLock
(
DpGçPŒClkSñ
 
∂lClkSñ
)

991 i‡(
∂lClkSñ
 =
DP_GTP_PLL_CLK_SEL_PLL0
)

993  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l0lock
 == 1);

997  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l1lock
 == 1);

999 
	}
}

1009 #ifde‡
PLATFORM_K7


1010 
	$bb_t›_£tDpGtRxMiscCålPd
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
DpGtxTxRxPdMode
 
pdMode
)

1012 
	`bb_t›_£tDpGtxRxMiscCålPd
(
œ√Sñ
, 
pdMode
);

1014 #ifde‡
PLATFORM_A7


1015 
	$bb_t›_£tDpGtRxMiscCålPd
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPdMode
 
pdMode
)

1017 
	`bb_t›_£tDpGçRxMiscCålPd
(
œ√Sñ
, 
pdMode
);

1019 
	}
}

1029 #ifde‡
PLATFORM_K7


1030 
	$bb_t›_£tDpGtTxMiscCålPd
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
DpGtxTxRxPdMode
 
pdMode
)

1032 
	`bb_t›_£tDpGtxTxMiscCålPd
(
œ√Sñ
, 
pdMode
);

1034 #ifde‡
PLATFORM_A7


1035 
	$bb_t›_£tDpGtTxMiscCålPd
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPdMode
 
pdMode
)

1037 
	`bb_t›_£tDpGçTxMiscCålPd
(
œ√Sñ
, 
pdMode
);

1039 
	}
}

1051 
	$bb_t›_≠∂yDpRxSo·Re£t
(
boﬁ
 
ª£t
)

1053 #ifde‡
PLATFORM_K7


1054 
	`bb_t›_k7_≠∂yDpRxSo·Re£t
(
ª£t
);

1056 #ifde‡
PLATFORM_A7


1057 
	`bb_t›_a7_≠∂yDpRxSo·Re£t
(
ª£t
);

1059 
	}
}

1071 
	$bb_t›_≠∂yDpTxSo·Re£t
(
boﬁ
 
ª£t
)

1073 #ifde‡
PLATFORM_K7


1074 
	`bb_t›_k7_≠∂yDpTxSo·Re£t
(
ª£t
);

1076 #ifde‡
PLATFORM_A7


1077 
	`bb_t›_a7_≠∂yDpTxSo·Re£t
(
ª£t
);

1079 
	}
}

1090 
	$bb_t›_£tupI2c
()

1092 #ifde‡
PLATFORM_K7


1093 
	`bb_t›_AµlyRe£tI2cSwôch
(
Ál£
);

1095 
	`bb_t›_TriSèãI2cS˛
(
Ál£
);

1096 
	}
}

1106 
	$bb_t›_úqSÂE«bÀ
(
boﬁ
 
íabÀ
)

1108 
bb_t›_ªgi°îs
->
úq
.
s
.
íabÀ
.
bf
.
sÂ_los
 =Énable;

1109 
	}
}

1120 
	$bb_t›_AµlyRe£tEthî√tPhy
(
boﬁ
 
ª£t
)

1122 #ifde‡
PLATFORM_K7


1123 
	`bb_t›_k7_AµlyRe£tEthî√tPhy
(
ª£t
);

1125 #ifde‡
PLATFORM_A7


1126 
	`bb_t›_≠∂yRe£tGmiiPhy
(
ª£t
);

1128 
	}
}

1139 
boﬁ
 
	$bb_t›_isUÕPhyClkLocked
()

1141  
bb_t›_ªgi°îs
->
gcm
.
s
.
°©us
.
bf
.
uÕ_phy_˛k_lock
 == 1;

1142 
	}
}

1153 
	$bb_t›_≠∂yXmiiRxRe£t
(
boﬁ
 
ª£t
)

1155 #ifde‡
PLATFORM_A7


1156 
	`bb_t›_a7_≠∂yXmiiRxRe£t
(
ª£t
);

1158 
	}
}

1169 
	$bb_t›_≠∂yXmiiTxRe£t
(
boﬁ
 
ª£t
)

1171 #ifde‡
PLATFORM_A7


1172 
	`bb_t›_a7_≠∂yXmiiTxRe£t
(
ª£t
);

1174 
	}
}

1184 
	$bb_t›_xmiiTxClkDëe˘
(
boﬁ
 
tx_˛k
)

1186 #ifde‡
PLATFORM_A7


1187 
	`bb_t›_a7_xmiiTxClkSñ
(
tx_˛k
);

1189 
	}
}

1199 
	$bb_t›_xmiiGtxClkEn
(
boﬁ
 
íabÀ
)

1201 #ifde‡
PLATFORM_A7


1202 
	`bb_t›_a7_xmiiGtxClkEn
(
íabÀ
);

1204 
	}
}

1214 
	$bb_t›_gmiiCålSëTri°©es
(
boﬁ
 
£t
)

1216 #ifde‡
PLATFORM_A7


1217 
	`bb_t›_a7_gmiiCålSëTri°©es
(
£t
);

1219 
	}
}

1229 
	$bb_t›_miiCålSëTri°©es
(
boﬁ
 
£t
)

1231 #ifde‡
PLATFORM_A7


1232 
	`bb_t›_a7_miiCålSëTri°©es
(
£t
);

1234 
	}
}

1244 
	$bb_t›_öôüãXmiiRxClkDëe˘
()

1246 #ifde‡
PLATFORM_A7


1247 
	`bb_t›_a7_öôüãGcmFªquícyDëe˘i⁄
(
GCM_FREQ_DET_SEL_XMII_RX_CLK
);

1249 
	}
}

1259 
boﬁ
 
	$bb_t›_isXmiiRxClkDëe˘Com∂ëe
()

1261 #ifde‡
PLATFORM_A7


1262  
	`bb_t›_a7_hasGcmFªquícyDëe˘i⁄Com∂ëed
(
Ál£
);

1264  
åue
;

1266 
	}
}

1276 
uöt32_t
 
	$bb_t›_gëXmiiRxClockFªquícy
()

1278 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

1279 
	`bb_t›_öôüãXmiiRxClkDëe˘
();

1281 (!
	`bb_t›_isXmiiRxClkDëe˘Com∂ëe
()) &&

1282 (
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()) < 6))

1285 #ifde‡
PLATFORM_A7


1286  
	`bb_t›_a7_gëNomöÆGcmFªquícyDëe˘ed
(
Ál£
);

1290 
	}
}

1300 
	$bb_t›_ªlﬂdFpga
()

1302 #ifde‡
PLATFORM_A7


1303  
	`bb_t›_a7_ªlﬂdFpga
();

1305 
	}
}

1315 
	$bb_t›_dißbÀFpgaW©chdog
()

1317 #ifde‡
PLATFORM_A7


1318  
	`bb_t›_a7_dißbÀFpgaW©chdog
();

1320 
	}
}

1330 #ifde‡
PLATFORM_A7


1331 
	$bb_t›_åiggîFÆlbackFpgaIcmd
()

1333  
	`bb_t›_åiggîFpgaFÆlback
();

1334 
	}
}

1345 #ifde‡
PLATFORM_A7


1346 
boﬁ
 
	$bb_t›_isFpgaFÆlback
()

1348  
	`bb_t›_a7_isFpgaFÆlback
();

1349 
	}
}

1359 
	$bb_t›_åiggîFpgaFÆlback
()

1361  
	`bb_t›_a7_åiggîFpgaFÆlback
();

1362 
	}
}

1371 
uöt32_t
 
	$bb_t›_ªadU£rReg
()

1373 
uöt32_t
 
vÆ
 = 
	`bb_t›_a7_ªadU£rReg
();

1374 
	`ûog_TOP_COMPONENT_1
(
ILOG_USER_LOG
, 
BB_TOP_READ_USER_REG
,
vÆ
);

1375  
vÆ
;

1376 
	}
}

1385 
boﬁ
 
	$bb_t›_isDash3
()

1387 if((
bb_t›_ªgi°îs
->
sys_c⁄fig
.
bf
.
ív_öfo


1388 & 
BB_TOP_CORE_IDENTIFICATION_MASK_1
Ë=
BB_TOP_CORE_DASH_THREE
)

1390  
åue
;

1394  
Ál£
;

1396 
	}
}

1405 
	$bb_t›_wrôeU£rReg
(
uöt32_t
 
vÆ
)

1407 
	`ûog_TOP_COMPONENT_1
(
ILOG_USER_LOG
, 
BB_TOP_WRITE_USER_REG
,
vÆ
);

1408 
	`bb_t›_a7_wrôeU£rReg
(
vÆ
);

1409 
	}
}

1418 
uöt32_t
 
	$bb_t›_ªadSètusReg
()

1420 (
	`bb_t›_a7_ªadSètusReg
());

1421 
	}
}

1431 
CORE_REV_BB
 
	$bb_t›_gëC‹eBﬂrdRev
()

1433  
bb_t›_ªgi°îs
->
sys_c⁄fig
.
bf
.
ív_öfo
;

1434 
	}
}

1443 
	$bb_t›_Re£tAuxHpd
(
boﬁ
 
ª£t
)

1445 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dp_aux_hpd_r°
 = 
ª£t
;

1446 
	}
}

1455 
	$bb_t›_Re£tGpio
(
boﬁ
 
ª£t
)

1457 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
gpio_˘æ_r°
 = 0;

1458 
	}
}

1467 
	$bb_t›_Re£tSpiFœsh
(
boﬁ
 
ª£t
)

1469 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
•i_Êash_˘æ_r°
 = 0;

1470 
	}
}

1479 
	$bb_t›_Re£tBBU¨t
(
boﬁ
 
ª£t
)

1481 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
bb_u¨t_r°
 = 0;

1482 
	}
}

1491 
	$bb_t›_Re£tMdioMa°î
(
boﬁ
 
ª£t
)

1493 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
mdio_ma°î_r°
 = 
ª£t
;

1494 
	}
}

1503 
	$bb_t›_Re£tI2CMa°î
(
boﬁ
 
ª£t
)

1505 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
i2c_ma°î_r°
 = 
ª£t
;

1506 
	}
}

1515 
	$bb_t›_Re£tI2CSœve
(
boﬁ
 
ª£t
)

1517 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
i2c_¶ave_r°
 = 
ª£t
;

1518 
	}
}

1527 
	$bb_t›_Re£tGeU¨t
(
boﬁ
 
ª£t
)

1529 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
ge_u¨t_r°
 = 
ª£t
;

1530 
	}
}

1539 
	$bb_t›_CÆcT¨gëImageCrc
()

1541 
¸cImageSize
 = *(*)0xC0A00004;

1542 
uöt32_t
 
¸c
 = 0;

1544 
	`¸cInô
();

1545 
	`UART_¥ötf
("T¨gë size: 0x%x\n",
¸cImageSize
);

1547 if(
¸cImageSize
 < 0x80000)

1549 
¸c
 = 
	`¸cFa°
((c⁄° 
uöt8_t
 *)0xC0A00100, 
¸cImageSize
);

1552 
	`UART_¥ötf
("T¨gë CRC: 0x%x\n",
¸c
);

1553 
	}
}

1562 
	$bb_t›_CÆcFpgaImageCrc
()

1564 
uöt32_t
 
¸cImageSize
 = *(*)0xC0000000;

1565 
uöt32_t
 *
¸cHÆfW‹d
;

1567 
uöt64_t
 
¸c
 = 
	`¸cFa°Inô
();

1569 
	`UART_¥ötf
("FPGA size: 0x%x\n",
¸cImageSize
);

1570 if(
¸cImageSize
 < 0x600000)

1572 
¸c
 = 
	`¸cFa°Block
((
uöt8_t
 *)0xC0000010, 
¸cImageSize
, crc);

1575 
¸c
 = 
	`¸cFa°FöÆize
(crc);

1577 
¸cHÆfW‹d
 = (
uöt32_t
 *)&
¸c
;

1578 
	`UART_¥ötf
("FPGA CRC: 0x%x%x\n",
¸cHÆfW‹d
[0],crcHalfWord[1]);

1580 
	}
}

1589 
	$bb_t›_c‹eTy≥Icmd
()

1591 
	`ûog_TOP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
BB_TOP_CORE_TYPE
, 
	`bb_t›_isDash3
() ? 3 : 2);

1592 
	}
}

1608 
	$dΩWrôe
(
uöt16_t
 
dΩAddr
, uöt16_à
wrôeD©a
, 
bb_t›_dΩ_dΩ_í_mask
 
dΩEnMask
)

1611 c⁄° 
bb_t›_dΩ_dΩ_˘æ
 
dΩCål
 = { .
bf
 = {

1612 .
dΩ_addr
 = 
dΩAddr
,

1613 .
dΩ_we
 = 1,

1614 .
dΩ_di
 = 
wrôeD©a


1616 
dΩ
->
dΩ_˘æ
.
dw
 = 
dΩCål
.dw;

1618 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

1620 ((
dΩ
->
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_dΩ_í_mask_READMASK
) != 0)

1621 && (
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()) < 10000))

1624 i‡((
dΩ
->
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_dΩ_í_mask_READMASK
) != 0)

1626 
	`ûog_TOP_COMPONENT_0
(
ILOG_FATAL_ERROR
, 
BB_TOP_DRP_WRITE_WAIT_TIMEOUT
);

1629 
dΩ
->
dΩ_í_mask
.
dw
 = 
dΩEnMask
.dw;

1630 
	}
}

	@components/top/src/bb_top_a7.c

23 #ifde‡
PLATFORM_A7


26 
	~<›ti⁄s.h
>

27 
	~<bb_t›.h
>

28 
	~<bb_t›_a7.h
>

29 
	~<bb_t›_a7_ªgs.h
>

30 
	~<bb_c‹e.h
>

31 
	~"bb_t›_log.h
"

32 
	~<À⁄_timîs.h
>

33 
	~<mˇ.h
>

34 
	~<˝u_comm.h
>

35 
	~<Àd.h
>

36 
	~<u¨t.h
>

37 
	~<evít.h
>

38 
	~<moduÀ_addªs£s_ªgs.h
>

42 
	#ICAP_CRC_REG
 0

	)

43 
	#ICAP_CMD_REG
 (0x04 << 13)

	)

44 
	#ICAP_CTL0_REG
 (0x05 << 13)

	)

45 
	#ICAP_CTL1_REG
 (0x18 << 13)

	)

46 
	#ICAP_STAT_REG
 (0x07 << 13)

	)

47 
	#ICAP_COR0_REG
 (0x09 << 13)

	)

48 
	#ICAP_IDCODE_REG
 (0x0C << 13)

	)

49 
	#ICAP_AXSS_REG
 (0x0D << 13)

	)

50 
	#ICAP_TIMER_REG
 (0x11 << 13)

	)

51 
	#ICAP_WBSTAR_REG
 (0x10 << 13)

	)

52 
	#ICAP_BOOTSTS_REG
 (0x16 << 13)

	)

53 
	#JUMP_TIMEOUT
 0x401D0EA9

	)

60 vﬁ©ûê
bb_t›_s
* 
	gbb_t›_ªgi°îs
;

63 
bb_t›_a7_wrôePªambÀ
();

64 
bb_t›_a7_wrôeIˇpRegi°î
(
uöt32_t
 
ªg
, uöt32_à
vÆ
);

65 
uöt32_t
 
bb_t›_a7_ªadIˇpRegi°î
(uöt32_à
ªg
);

78 
	$bb_t›_a7_Inô
()

80 
bb_t›_ªgi°îs
 = (vﬁ©ûê
bb_t›_s
*Ë
bb_chù_bb_t›_s_ADDRESS
;

81 
	}
}

92 
	$bb_t›_a7_TriSèãI2cS˛
(
boﬁ
 
åiSèã
)

94 
bb_t›_ªgi°îs
->
i2c_˘æ
.
bf
.
ma°î_s˛_åi
 = 
åiSèã
;

95 
	}
}

106 
	$bb_t›_a7_SëMdioSœve
(
MdioMa°îSœveSñ
 
ma°îSœveSñ
)

110 i‡((
ma°îSœveSñ
 =
MDIO_SLAVE_10G_PCS_PMA
Ë|| (ma°îSœveSñ =
MDIO_SLAVE_RXAUI_CORE
))

112 
ma°îSœveSñ
 = 
MDIO_MASTER_RXAUI
;

116 
ma°îSœveSñ
 = 
MDIO_MASTER_MOTHERBOARD
;

118 
bb_t›_ªgi°îs
->
mdio_˘æ
.
bf
.
ma°î_bus_£l
 = 
ma°îSœveSñ
;

119 
	}
}

131 
	$bb_t›_a7_F‹˚SëMdioSœve
(
uöt8_t
 
ma°îSœveSñ
)

133 i‡(
ma°îSœveSñ
 =
MDIO_SLAVE_RXAUI_CORE
)

135 
ma°îSœveSñ
 = 
MDIO_MASTER_RXAUI
;

137 
bb_t›_ªgi°îs
->
mdio_˘æ
.
bf
.
ma°î_bus_£l
 = 
ma°îSœveSñ
;

138 
	}
}

148 
	$bb_t›_a7_rs232Re£t
(
boﬁ
 
íabÀ
)

150 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
rs232_r°
 = 
íabÀ
;

151 
	}
}

161 
	$bb_t›_a7_rs232ChùC⁄figuª
(
boﬁ
 
íabÀ
)

163 i‡(
íabÀ
)

165 
bb_t›_ªgi°îs
->
rs232_˘æ
.
bf
.
f‹˚_off_b
 = 1;

166 
bb_t›_ªgi°îs
->
rs232_˘æ
.
bf
.
í_b
 = 0;

170 
bb_t›_ªgi°îs
->
rs232_˘æ
.
bf
.
f‹˚_off_b
 = 0;

171 
bb_t›_ªgi°îs
->
rs232_˘æ
.
bf
.
í_b
 = 1;

173 
	}
}

183 
	$bb_t›_a7_n⁄CpuModuÀRe£t
()

187 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
dw
 = ~–
BB_TOP_GRM_SOFT_RST_CTRL_CPU_RST_MASK
 |

188 
BB_TOP_GRM_SOFT_RST_CTRL_SPI_FLASH_CTRL_RST_MASK
 );

189 
	}
}

198 
	$bb_t›_a7_SëRéI2cMuxP‹t
(
I2cP‹tSñ
 
ma°îSœveSñ
)

200 
bb_t›_ªgi°îs
->
i2c_˘æ
.
bf
.
ma°î_bus_£l
 = 
ma°îSœveSñ
;

201 
	}
}

211 
	$bb_t›_a7_AµlyE«bÀDp159
(
boﬁ
 
íabÀ
)

213 i‡(
íabÀ
)

215 
	`GpioSë
(
GPIO_CONN_DP_REDRV_RETMR_EN_A
);

219 
	`GpioCÀ¨
(
GPIO_CONN_DP_REDRV_RETMR_EN_A
);

221 
	}
}

231 
	$bb_t›_a7_AµlyE«bÀDp130
(
boﬁ
 
íabÀ
)

233 i‡(
íabÀ
)

235 
	`GpioSë
(
GPIO_CONN_DP_REDRV_RETMR_EN_A
);

239 
	`GpioCÀ¨
(
GPIO_CONN_DP_REDRV_RETMR_EN_A
);

241 
	}
}

251 
	$bb_t›_a7_AµlyRe£tDp130
(
boﬁ
 
ª£t
)

253 i‡(
ª£t
)

255 
	`GpioCÀ¨
(
GPIO_CONN_DP_REDRV_RETMR_RST_B_A
);

259 
	`GpioSë
(
GPIO_CONN_DP_REDRV_RETMR_RST_B_A
);

261 
	}
}

270 
	$bb_t›_≠∂ySÂTønsmôãrE«bÀ
(
boﬁ
 
íabÀ
)

272 
bb_t›_ªgi°îs
->
sÂ_˘æ
.
bf
.
tx_dißbÀ
 = !
íabÀ
;

273 
	}
}

283 
	$bb_t›_≠∂ySÂTxFa°R©e
(
boﬁ
 
Á°R©e
)

285 
bb_t›_ªgi°îs
->
sÂ_˘æ
.
bf
.
rs1
 = 
Á°R©e
;

286 
	}
}

296 
	$bb_t›_≠∂ySÂRxFa°R©e
(
boﬁ
 
Á°R©e
)

298 
bb_t›_ªgi°îs
->
sÂ_˘æ
.
bf
.
rs0
 = 
Á°R©e
;

299 
	}
}

309 
boﬁ
 
	$bb_t›_hasSÂRxLos
()

311  (
bb_t›_ªgi°îs
->
sÂ_°©us
.
bf
.
rx_los
 == 1);

312 
	}
}

322 
boﬁ
 
	$bb_t›_hasSÂTxFau…
()

324  (
bb_t›_ªgi°îs
->
sÂ_°©us
.
bf
.
tx_Áu…
 == 1);

325 
	}
}

335 
boﬁ
 
	$bb_t›_isSÂModuÀAb£¡
()

337  (
bb_t›_ªgi°îs
->
sÂ_°©us
.
bf
.
mod_abs
 == 1);

338 
	}
}

348 
	$bb_t›_≠∂yUsb3PhyCålR°
(
boﬁ
 
ª£t
)

351 
bb_t›_ªgi°îs
->
usb3phy_˘æ
.
bf
.
r°_b
 = !
ª£t
;

352 
	}
}

362 
	$bb_t›_≠∂yUsb3PhyCålSå≠pögD⁄e
(
boﬁ
 
íabÀ
)

364 
bb_t›_ªgi°îs
->
usb3phy_˘æ
.
bf
.
°øµög_d⁄e
 = 
íabÀ
;

365 
	}
}

375 
	$bb_t›_≠∂yUsb3PhyCålOuçutE«bÀ
(
boﬁ
 
íabÀ
)

377 
bb_t›_ªgi°îs
->
usb3phy_˘æ
.
bf
.
out_íabÀ
 = 
íabÀ
;

378 
	}
}

388 
	$bb_t›_≠∂yUsb3PhyCålXèlDißbÀ
(
boﬁ
 
dißbÀ
)

390 
bb_t›_ªgi°îs
->
usb3phy_˘æ
.
bf
.
xèl_dis
 = 
dißbÀ
;

391 
	}
}

401 
	$bb_t›_≠∂yUsb3PhyCålSscDißbÀ
(
boﬁ
 
dißbÀ
)

403 
bb_t›_ªgi°îs
->
usb3phy_˘æ
.
bf
.
ssc_dis
 = 
dißbÀ
;

404 
	}
}

414 
	$bb_t›_≠∂yUsb3PhyCålVbusSwCål
(
boﬁ
 
íabÀ
)

416 
bb_t›_ªgi°îs
->
usb3phy_˘æ
.
bf
.
powî_¥e£¡_£l
 = 
íabÀ
;

417 
	}
}

427 
	$bb_t›_≠∂yUsb3PhyCålVbusPª£¡
(
boﬁ
 
a˘ive
)

429 
bb_t›_ªgi°îs
->
usb3phy_˘æ
.
bf
.
powî_¥e£¡
 = 
a˘ive
;

430 
	}
}

440 
	$bb_t›_£tDpGçRxClkCål
(
DpGçSysClkSñCfg
 
˛kCfg
)

443 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt0_rxsys˛k£l
 = 
˛kCfg
;

444 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt1_rxsys˛k£l
 = 
˛kCfg
;

445 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt2_rxsys˛k£l
 = 
˛kCfg
;

446 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt3_rxsys˛k£l
 = 
˛kCfg
;

448 
	}
}

458 
	$bb_t›_£tDpGçTxClkCål
(
DpGçSysClkSñCfg
 
˛kCfg
)

460 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt0_txsys˛k£l
 = 
˛kCfg
;

461 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt1_txsys˛k£l
 = 
˛kCfg
;

462 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt2_txsys˛k£l
 = 
˛kCfg
;

463 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt3_txsys˛k£l
 = 
˛kCfg
;

464 
	}
}

473 
	$bb_t›_£tGçPŒRefClkSñ
(
DpGçPŒClkSñ
 
∂lClkSñ
, 
DpGçPŒCålRefClkSñ
 
ªfClkSñ
)

475 i‡(
∂lClkSñ
 =
DP_GTP_PLL_CLK_SEL_PLL0
)

477 
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_˘æ
.
bf
.
∂l0ªf˛k£l
 = 
ªfClkSñ
;

481 
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_˘æ
.
bf
.
∂l1ªf˛k£l
 = 
ªfClkSñ
;

483 
	}
}

493 
	$bb_t›_≠∂yGçPŒPowîDown
(
DpGçPŒClkSñ
 
∂lClkSñ
, 
boﬁ
 
powîDn
)

495 i‡(
∂lClkSñ
 =
DP_GTP_PLL_CLK_SEL_PLL0
)

497 
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_˘æ
.
bf
.
∂l0pd
 = 
powîDn
;

501 
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_˘æ
.
bf
.
∂l1pd
 = 
powîDn
;

503 
	}
}

513 
boﬁ
 
	$bb_t›_isGçPŒRefClkLo°
(
DpGçPŒClkSñ
 
∂lClkSñ
)

515 i‡(
∂lClkSñ
 =
DP_GTP_PLL_CLK_SEL_PLL0
)

517  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l0ªf˛klo°
 == 1);

521  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l1ªf˛klo°
 == 1);

523 
	}
}

533 
boﬁ
 
	$bb_t›_isGçPŒLock
(
DpGçPŒClkSñ
 
∂lClkSñ
)

535 i‡(
∂lClkSñ
 =
DP_GTP_PLL_CLK_SEL_PLL0
)

537  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l0lock
 == 1);

541  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l1lock
 == 1);

543 
	}
}

553 
	$bb_t›_£tDpGçRxMiscCålPd
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPdMode
 
pdMode
)

555 
œ√Sñ
)

557 
DP_GTP_GT0_SYS_LANE_SEL
:

558 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt0_rxpd
 = 
pdMode
;

560 
DP_GTP_GT1_SYS_LANE_SEL
:

561 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt1_rxpd
 = 
pdMode
;

563 
DP_GTP_GT2_SYS_LANE_SEL
:

564 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt2_rxpd
 = 
pdMode
;

566 
DP_GTP_GT3_SYS_LANE_SEL
:

567 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt3_rxpd
 = 
pdMode
;

573 
	}
}

583 
	$bb_t›_£tDpGçTxMiscCålPd
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPdMode
 
pdMode
)

585 
œ√Sñ
)

587 
DP_GTP_GT0_SYS_LANE_SEL
:

588 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt0_txpd
 = 
pdMode
;

590 
DP_GTP_GT1_SYS_LANE_SEL
:

591 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt1_txpd
 = 
pdMode
;

593 
DP_GTP_GT2_SYS_LANE_SEL
:

594 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt2_txpd
 = 
pdMode
;

596 
DP_GTP_GT3_SYS_LANE_SEL
:

597 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt3_txpd
 = 
pdMode
;

603 
	}
}

613 
	$bb_t›_£tDpGçRxPrbsCålPrbsSñ
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPrbsSñ
 
¥bs
)

615 
œ√Sñ
)

617 
DP_GTP_GT0_SYS_LANE_SEL
:

618 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt0_rx¥bs£l
 = 
¥bs
;

620 
DP_GTP_GT1_SYS_LANE_SEL
:

621 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt1_rx¥bs£l
 = 
¥bs
;

623 
DP_GTP_GT2_SYS_LANE_SEL
:

624 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt2_rx¥bs£l
 = 
¥bs
;

626 
DP_GTP_GT3_SYS_LANE_SEL
:

627 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt3_rx¥bs£l
 = 
¥bs
;

633 
	}
}

643 
	$bb_t›_≠∂yDpGçRxPrbsCålPrbsC¡Re£t
(
DpGçSysL™eSñ
 
œ√Sñ
, 
boﬁ
 
ª£t
)

645 
œ√Sñ
)

647 
DP_GTP_GT0_SYS_LANE_SEL
:

648 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt0_rx¥bs˙åe£t
 = 
ª£t
;

650 
DP_GTP_GT1_SYS_LANE_SEL
:

651 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt1_rx¥bs˙åe£t
 = 
ª£t
;

653 
DP_GTP_GT2_SYS_LANE_SEL
:

654 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt2_rx¥bs˙åe£t
 = 
ª£t
;

656 
DP_GTP_GT3_SYS_LANE_SEL
:

657 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt3_rx¥bs˙åe£t
 = 
ª£t
;

663 
	}
}

673 
	$bb_t›_£tDpGçTxPrbsCålSñ
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPrbsSñ
 
¥bs
)

675 
œ√Sñ
)

677 
DP_GTP_GT0_SYS_LANE_SEL
:

678 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_¥bs_˘æ
.
bf
.
gt0_tx¥bs£l
 = 
¥bs
;

680 
DP_GTP_GT1_SYS_LANE_SEL
:

681 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_¥bs_˘æ
.
bf
.
gt1_tx¥bs£l
 = 
¥bs
;

683 
DP_GTP_GT2_SYS_LANE_SEL
:

684 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_¥bs_˘æ
.
bf
.
gt2_tx¥bs£l
 = 
¥bs
;

686 
DP_GTP_GT3_SYS_LANE_SEL
:

687 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_¥bs_˘æ
.
bf
.
gt3_tx¥bs£l
 = 
¥bs
;

693 
	}
}

704 
	$bb_t›_a7_≠∂yDpRxSo·Re£t
(
boﬁ
 
ª£t
)

706 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_r°_˘æ
.
bf
.
so·_ª£t_rx
 = 
ª£t
;

707 
	}
}

718 
	$bb_t›_a7_≠∂yDpTxSo·Re£t
(
boﬁ
 
ª£t
)

720 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_r°_˘æ
.
bf
.
so·_ª£t_tx
 = 
ª£t
;

721 
	}
}

731 
	$bb_t›_úqAqu™tüE«bÀ
(
boﬁ
 
íabÀ
)

733 
bb_t›_ªgi°îs
->
úq
.
s
.
íabÀ
.
bf
.
mdio_öt_b
 =Énable;

734 
	}
}

744 
	$bb_t›_úqAqu™tüCÀ¨
()

746 
bb_t›_ªgi°îs
->
úq
.
s
.
≥ndög
.
bf
.
mdio_öt_b
 = 1;

747 
	}
}

757 
	$bb_t›_úqUsbVbusDëe˘
(
boﬁ
 
íabÀ
)

759 
bb_t›_ªgi°îs
->
úq
.
s
.
íabÀ
.
bf
.
usb_vbus_dëe˘
 =Énable;

760 
	}
}

770 
	$bb_t›_a7_RxauiAlig√dE«bÀ
(
boﬁ
 
íabÀ
)

772 
bb_t›_ªgi°îs
->
úq
.
s
.
íabÀ
.
bf
.
rxaui_Æign_°©us
 =Énable;

773 
	}
}

782 
boﬁ
 
	$bb_t›_isIrqUsbVbusDëe˘RawSë
()

784  (
bb_t›_ªgi°îs
->
úq
.
s
.
øw
.
bf
.
usb_vbus_dëe˘
 == 1);

785 
	}
}

796 
	$bb_t›_TriSèãMdioMdc
(
boﬁ
 
åiSèã
)

798 
bb_t›_ªgi°îs
->
mdio_˘æ
.
bf
.
ma°î_mdc_åi
 = 
åiSèã
;

799 
	}
}

811 
	$bb_t›_≠∂yRe£tGmiiPhy
(
boﬁ
 
ª£t
)

813 i‡(
ª£t
)

815 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
r°_b
 = 0;

816 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
gtx_˛k_í
 = 0;

820 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
gtx_˛k_í
 = 1;

821 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
r°_b
 = 1;

823 
	}
}

834 
	$bb_t›_a7_≠∂yXmiiRxRe£t
(
boﬁ
 
ª£t
)

836 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
xmii_rx_r°
 = 
ª£t
;

837 
	}
}

848 
	$bb_t›_a7_xmiiTxClkSñ
(
boﬁ
 
tx_˛k
)

850 
bb_t›_ªgi°îs
->
gcm
.
s
.
c⁄åﬁ
.
bf
.
xmii_tx_˛k_£l
 = 
tx_˛k
;

851 
	}
}

862 
	$bb_t›_a7_xmiiGtxClkEn
(
boﬁ
 
íabÀ
)

864 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
gtx_˛k_í
 = 
íabÀ
;

865 
	}
}

877 
	$bb_t›_a7_gmiiCålSëTri°©es
(
boﬁ
 
£t
)

879 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
tx_í_åi
 = 
£t
;

880 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
tx_î_åi
 = 
£t
;

881 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
txd_åi
 = 
£t
 ? 0xFF : 0;

882 
	}
}

894 
	$bb_t›_a7_miiCålSëTri°©es
(
boﬁ
 
£t
)

896 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
tx_í_åi
 = 
£t
;

897 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
tx_î_åi
 = 
£t
;

898 
bb_t›_ªgi°îs
->
xmii_˘æ
.
bf
.
txd_åi
 = 
£t
 ? 0xFF : 0xF0;

899 
	}
}

910 
	$bb_t›_a7_≠∂yXmiiTxRe£t
(
boﬁ
 
ª£t
)

912 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
xmii_tx_r°
 = 
ª£t
;

913 
	}
}

924 
	$bb_t›_a7_öôüãGcmFªquícyDëe˘i⁄
(
GcmFªquí˚yDëe˘Sñe˘
 
˛ock_£À˘
)

926 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë
.
bf
.
max_cou¡
 = 0xff;

927 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë
.
bf
.
˛k_£l
 = 
˛ock_£À˘
;

928 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë
.
bf
.
go
 = 1;

929 
	}
}

940 
boﬁ
 
	$bb_t›_a7_hasGcmFªquícyDëe˘i⁄Com∂ëed
(
boﬁ
 
dp
)

942 if(
dp
)

944  (
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.
go
 == 0);

948  (
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë
.
bf
.
go
 == 0);

950 
	}
}

961 
uöt32_t
 
	$bb_t›_a7_gëNomöÆGcmFªquícyDëe˘ed
(
boﬁ
 
dp
)

963 
uöt32_t
 
sˇÀr
 = 1000;

964 
uöt32_t
 
cou¡
 = 0;

965 
uöt32_t
 
max_cou¡
 = 0;

966 
uöt32_t
 
nomöÆFªquícy
 = 0;

967 
uöt32_t
 
‰equícyAdju°
 = 0;

968 
boﬁ
 
ªf_˛k_Á°î
;

970 if(
dp
)

972 
cou¡
 = 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.count;

973 
max_cou¡
 = 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.max_count;

974 
ªf_˛k_Á°î
 = 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.ref_clk_faster;

978 
cou¡
 = 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë
.
bf
.count;

979 
max_cou¡
 = 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë
.
bf
.max_count;

980 
ªf_˛k_Á°î
 = 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë
.
bf
.ref_clk_faster;

983 i‡((
cou¡
 =0Ë|| (
max_cou¡
 == 0))

985  
nomöÆFªquícy
;

987 i‡(
ªf_˛k_Á°î
 == 1)

989 
‰equícyAdju°
 = (((
cou¡
 + 3Ë* 
sˇÀr
)/
max_cou¡
);

993 
‰equícyAdju°
 = (((
max_cou¡
 + 3Ë* 
sˇÀr
)/
cou¡
);

996 
nomöÆFªquícy
 = (
	`bb_c‹e_gëCpuClkFªquícy
(Ë/ 
sˇÀr
Ë* 
‰equícyAdju°
;

997  
nomöÆFªquícy
;

998 
	}
}

1007 
	$bb_t›_a7_‰eqDëDpO‹Irq
(
boﬁ
 
íabÀ
)

1009 
bb_t›_ªgi°îs
->
úq
.
s
.
íabÀ
.
bf
.
‰eq_dë_dp_o‹
 =Énable;

1010 
	}
}

1019 
	$bb_t›_a7_‰eqDëAutoE«bÀ
(
boﬁ
 
íabÀ
)

1021 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp_auto
.
bf
.
auto_íabÀ
 = 
íabÀ
;

1022 
	}
}

1033 
	$bb_t›_sy°emRe£t
()

1035 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
˝u_r°
 = 1;

1036 
	}
}

1045 
	$bb_t›_a7_˛órPídögO‹Irq
()

1047 
bb_t›_ªgi°îs
->
úq
.
s
.
≥ndög
.
bf
.
‰eq_dë_dp_o‹
 = 1;

1048 
	}
}

1057 
uöt16_t
 
	$bb_t›_a7_gëCuºítFrqCou¡
()

1059  
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.
cou¡
;

1060 
	}
}

1069 
boﬁ
 
	$bb_t›_a7_isRefClkFa°îbô
()

1071  
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp_auto
.
bf
.
comp_ªf_˛k_Á°î
;

1072 
	}
}

1084 
	$bb_t›_a7_ªlﬂdFpga
()

1089 
	`bb_t›_a7_ch™geFpgaImage
(
Ál£
);

1090 
	}
}

1102 
	$bb_t›_a7_ch™geFpgaImage
(
boﬁ
 
ÁŒback
)

1106 
	`bb_t›_a7_wrôePªambÀ
();

1108 if(
ÁŒback
)

1112 
	`bb_t›_a7_wrôeIˇpRegi°î
(
ICAP_TIMER_REG
, 
JUMP_TIMEOUT
);

1114 
	`bb_t›_a7_wrôeIˇpRegi°î
(
ICAP_WBSTAR_REG
, 0x00010001);

1117 
	`bb_t›_a7_wrôeIˇpRegi°î
(
ICAP_WBSTAR_REG
, 0x00000000);

1119 
	`bb_t›_a7_wrôeIˇpRegi°î
(
ICAP_CMD_REG
, 0x0000000F);

1120 
	}
}

1132 
	$bb_t›_a7_wrôeTimîReg
(
uöt32_t
 
vÆ
)

1136 
	`bb_t›_a7_wrôeIˇpRegi°î
(
ICAP_TIMER_REG
, 
vÆ
);

1137 
	}
}

1149 
	$bb_t›_a7_wrôeU£rReg
(
uöt32_t
 
vÆ
)

1153 
	`bb_t›_a7_wrôePªambÀ
();

1154 
	`bb_t›_a7_wrôeIˇpRegi°î
(
ICAP_AXSS_REG
, 
vÆ
);

1155 
	}
}

1167 
uöt32_t
 
	$bb_t›_a7_ªadU£rReg
()

1171 
	`bb_t›_a7_wrôePªambÀ
();

1172 (
	`bb_t›_a7_ªadIˇpRegi°î
(
ICAP_AXSS_REG
));

1173 
	}
}

1185 
uöt32_t
 
	$bb_t›_a7_ªadSètusReg
()

1189 
	`bb_t›_a7_wrôePªambÀ
();

1190 (
	`bb_t›_a7_ªadIˇpRegi°î
(
ICAP_BOOTSTS_REG
));

1191 
	}
}

1201 
	$bb_t›_a7_wrôePªambÀ
()

1204 
bb_t›_ªgi°îs
->
iˇp
.
s
.
wd©a
.
bf
.
vÆ
 = 0xFFFFFFFF;

1205 
bb_t›_ªgi°îs
->
iˇp
.
s
.
wd©a
.
bf
.
vÆ
 = 0xFFFFFFFF;

1206 
bb_t›_ªgi°îs
->
iˇp
.
s
.
wd©a
.
bf
.
vÆ
 = 0xAA995566;

1207 
bb_t›_ªgi°îs
->
iˇp
.
s
.
wd©a
.
bf
.
vÆ
 = 0x20000000;

1208 
	}
}

1216 
	$bb_t›_a7_wrôeIˇpRegi°î
(
uöt32_t
 
ªg
, uöt32_à
vÆ
)

1218 
bb_t›_ªgi°îs
->
iˇp
.
s
.
wd©a
.
bf
.
vÆ
 = (0x30000001 | 
ªg
);

1219 
bb_t›_ªgi°îs
->
iˇp
.
s
.
wd©a
.
bf
.
vÆ
 = val;

1220 
bb_t›_ªgi°îs
->
iˇp
.
s
.
wd©a
.
bf
.
vÆ
 = 0x20000000;

1223 
	}
}

1232 
uöt32_t
 
	$bb_t›_a7_ªadIˇpRegi°î
(
uöt32_t
 
ªg
)

1234 
uöt32_t
 
vÆ
;

1235 
bb_t›_ªgi°îs
->
iˇp
.
s
.
wd©a
.
bf
.
vÆ
 = (0x28000001 | 
ªg
);

1236 
bb_t›_ªgi°îs
->
iˇp
.
s
.
wd©a
.
bf
.
vÆ
 = 0x20000000;

1237 
bb_t›_ªgi°îs
->
iˇp
.
s
.
wd©a
.
bf
.
vÆ
 = 0x20000000;

1239 
bb_t›_ªgi°îs
->
iˇp
.
s
.
rd©a
.
bf
.
vÆ
 = 0x20000000;

1240 
vÆ
 = 
bb_t›_ªgi°îs
->
iˇp
.
s
.
rd©a
.
bf
.val;

1241 if(
vÆ
 == 0x20000000)

1242 
vÆ
 = 
bb_t›_ªgi°îs
->
iˇp
.
s
.
rd©a
.
bf
.val;

1246 (
vÆ
);

1247 
	}
}

1257 
	$bb_t›_a7_dißbÀFpgaW©chdog
()

1261 
	`bb_t›_a7_wrôePªambÀ
();

1262 
	`bb_t›_a7_wrôeIˇpRegi°î
(
ICAP_TIMER_REG
, 0);

1263 
	`bb_t›_a7_wrôeIˇpRegi°î
(
ICAP_CMD_REG
, 0x0000000D);

1264 
	}
}

1275 
	$bb_t›_a7_åiggîFpgaFÆlback
()

1278 
	`bb_t›_a7_wrôePªambÀ
();

1279 
	`bb_t›_a7_wrôeIˇpRegi°î
(
ICAP_TIMER_REG
, 0x80000001);

1280 
	}
}

1290 
boﬁ
 
	$bb_t›_a7_isFpgaFÆlback
()

1292 if(
	`bb_t›_ªadSètusReg
() & 0x00000002)

1293  
åue
;

1294  
Ál£
;

1295 
	}
}

	@components/top/src/bb_top_dp.c

26 
	~<bb_c‹e.h
>

27 
	~<iba£.h
>

28 
	~<bb_t›_ªgs.h
>

30 
	~<bb_t›.h
>

31 
	~<bb_chù_ªgs.h
>

32 
	~<bb_t›_dp.h
>

33 #ifde‡
PLATFORM_K7


34 
	~<bb_t›_dp_k7.h
>

36 #ifde‡
PLATFORM_A7


37 
	~<bb_t›_dp_a7.h
>

39 
	~<À⁄_timîs.h
>

40 
	~"bb_t›_log.h
"

42 
	~<u¨t.h
>

53 vﬁ©ûê
bb_chù_s
* 
	gbb_chù
 = (vﬁ©ûê*)(
bb_chù_s_ADDRESS
);

69 
	$bb_t›_dpInô
()

71 #ifde‡
PLATFORM_K7


72 
	`bb_t›_dpInôK7
();

74 #ifde‡
PLATFORM_A7


75 
	`bb_t›_dpInôA7
();

77 
	}
}

90 
	$bb_t›_dpC⁄figuªDpTøns˚ivîLex
((*
ˇŒback
)(
boﬁ
))

92 #ifde‡
PLATFORM_K7


93 
	`bb_t›_dpC⁄figuªDpTøns˚ivîLexK7
(
ˇŒback
);

95 #ifde‡
PLATFORM_A7


96 
	`bb_t›_dpC⁄figuªDpTøns˚ivîLexA7
(
ˇŒback
);

98 
	}
}

108 
	$bb_t›_ˇn˚lDpC⁄figuªDpTøns˚ivîLex
()

110 
	`bb_t›_ˇn˚lDpC⁄figuªDpTøns˚ivîLexA7
();

111 
	}
}

120 
	$bb_t›_dpRe£tDpTøns˚ivîLex
()

122 
	`bb_t›_≠∂yDpRxSo·Re£t
(
åue
);

123 #ifde‡
PLATFORM_K7


124 
	`bb_t›_dpRe£tDpTøns˚ivîLexK7
();

126 #ifde‡
PLATFORM_A7


127 
	`bb_t›_dpRe£tDpTøns˚ivîLexA7
();

129 
	`bb_t›_≠∂yDpRxSo·Re£t
(
Ál£
);

130 
	}
}

141 
	$bb_t›_dpC⁄figuªDpTøns˚ivîRex
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
)

143 #ifde‡
PLATFORM_K7


144 
	`bb_t›_dpC⁄figuªDpTøns˚ivîRexK7
(
bw
, 
lc
);

146 #ifde‡
PLATFORM_A7


147 
	`bb_t›_dpC⁄figuªDpTøns˚ivîRexA7
(
bw
, 
lc
);

149 
	}
}

159 
	$bb_t›_dpRe£tDpTøns˚ivîRex
()

161 
	`bb_t›_≠∂yDpTxSo·Re£t
(
åue
);

162 #ifde‡
PLATFORM_K7


163 
	`bb_t›_dpRe£tDpTøns˚ivîRexK7
();

165 #ifde‡
PLATFORM_A7


166 
	`bb_t›_dpRe£tDpTøns˚ivîRexA7
();

168 
	`bb_t›_≠∂yDpTxSo·Re£t
(
Ál£
);

169 
	}
}

179 
	$bb_t›_dpRe£tDpSök
(
boﬁ
 
ª£t
)

181 i‡(!
ª£t
)

184 
	`üs£π_TOP_COMPONENT_0
((
	`bb_t›_dpGŸClockRecovîyA7
(Ë=
åue
), 
BB_TOP_DP_GTX_RESET_TOO_SLOW
);

186 
	`bb_t›_AµlyRe£tDpSök
(
ª£t
);

187 
	}
}

196 
	$bb_t›_dpE«bÀDpSour˚
()

198 #ifde‡
PLATFORM_K7


199 
	`bb_t›_dpE«bÀDpSour˚K7
();

201 #ifde‡
PLATFORM_A7


202 
	`bb_t›_dpE«bÀDpSour˚A7
();

204 
	}
}

215 
boﬁ
 
	$bb_t›_dpGŸClockRecovîy
()

217 #ifde‡
PLATFORM_K7


218  
	`bb_t›_dpGŸClockRecovîyK7
();

220 #ifde‡
PLATFORM_A7


221  
	`bb_t›_dpGŸClockRecovîyA7
();

223 
	}
}

234 
boﬁ
 
	$bb_t›_dpGŸSymbﬁLock
(
L™eCou¡
 
lc
)

236 #ifde‡
PLATFORM_K7


237  
	`bb_t›_dpGŸSymbﬁLockK7
(
lc
);

239 #ifde‡
PLATFORM_A7


240  
	`bb_t›_dpGŸSymbﬁLockA7
(
lc
);

242 
	}
}

253 
	$bb_t›_IcmddpSëTxDiffCål
(
uöt8_t
 
txDiffCål
, 
boﬁ
 
ch™geDiffCål
)

255 
	`bb_t›_dpSëTxDiffCålA7
(
txDiffCål
, 
ch™geDiffCål
);

256 
	}
}

268 
	$bb_t›_IcmddpSëTxPo°Curs‹
(
uöt8_t
 
txPo°Curs‹
, 
boﬁ
 
ch™gePo°Curs‹
)

270 
	`bb_t›_dpSëTxPo°Curs‹A7
(
txPo°Curs‹
, 
ch™gePo°Curs‹
);

271 
	}
}

282 
	$bb_t›_dpPªCh¨geMaöLök
(
boﬁ
 
ch¨ge
, 
L™eCou¡
 
lc
)

284 #ifde‡
PLATFORM_K7


285 
	`bb_t›_dpPªCh¨geMaöLökK7
(
ch¨ge
, 
lc
);

287 #ifde‡
PLATFORM_A7


288 
	`bb_t›_dpPªCh¨geMaöLökA7
(
ch¨ge
, 
lc
);

290 
	}
}

304 
MmcmTxClkOutEncodög
 
	$compuãMmcmTxClkOutEncodög
(
MaöLökB™dwidth
 
bw
)

306 c⁄° 
MmcmTxClkOutEncodög
 
íc
 =

307 
bw
 =
BW_1_62_GBPS
 ? 
MMCM_TX_CLK_OUT_ENCODING_RBR_40B
 :

308 
bw
 =
BW_2_70_GBPS
 ? 
MMCM_TX_CLK_OUT_ENCODING_HBR_40B
 :

309 
bw
 =
BW_5_40_GBPS
 ? 
MMCM_TX_CLK_OUT_ENCODING_HBR2_40B
 :

311 
	`üs£π_TOP_COMPONENT_1
(
íc
 !0xFF, 
BB_TOP_DP_INVALID_MMCM_OUTPUT_FREQ
, 
bw
);

313  
íc
;

314 
	}
}

323 
	$bb_t›_dpE«bÀ8b10bíA7
(
boﬁ
 
íabÀ
)

325 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_misc_˘æ
.
bf
.
gt2_tx8b10bí
 = 
íabÀ
;

326 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_misc_˘æ
.
bf
.
gt3_tx8b10bí
 = 
íabÀ
;

327 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_misc_˘æ
.
bf
.
gt0_tx8b10bí
 = 
íabÀ
;

328 
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s.
tx_misc_˘æ
.
bf
.
gt1_tx8b10bí
 = 
íabÀ
;

329 
	}
}

342 
	$bb_t›_dpInôC⁄figuªDpTøns˚ivîLex
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
)

344 
	`bb_t›_dpInôC⁄figuªDpTøns˚ivîLexA7
(
bw
, 
lc
);

345 
	}
}

	@components/top/src/bb_top_dp_a7.c

24 #ifde‡
PLATFORM_A7


27 
	~<bb_c‹e.h
>

28 
	~<iba£.h
>

29 
	~<bb_chù_ªgs.h
>

30 
	~<bb_t›_ªgs.h
>

32 
	~<bb_t›.h
>

33 
	~<bb_t›_dp.h
>

34 
	~<bb_t›_dp_a7.h
>

36 
	~<À⁄_timîs.h
>

37 
	~<ˇŒback.h
>

38 
	~<u¨t.h
>

39 
	~"bb_t›_log.h
"

47 
	#GTP_DRP_ADDR_RX_DATA_WIDTH
 0x11

	)

48 
	#GTP_DRP_OFFSET_RX_DATA_WIDTH
 11

	)

49 
	#GTP_DRP_VAL_RX_DATA_WIDTH_40_BIT_PORT
 (0x5 << 
GTP_DRP_OFFSET_RX_DATA_WIDTH
)

	)

50 
	#GTP_DRP_MASK_RX_DATA_WIDTH
 (0x7 << 
GTP_DRP_OFFSET_RX_DATA_WIDTH
)

	)

52 
	#GTP_DRP_ADDR_TX_DATA_WIDTH
 0x6B

	)

53 
	#GTP_DRP_OFFSET_TX_DATA_WIDTH
 0

	)

54 
	#GTP_DRP_VAL_TX_DATA_WIDTH_40_BIT_PORT
 (0x5 << 
GTP_DRP_OFFSET_TX_DATA_WIDTH
)

	)

55 
	#GTP_DRP_MASK_TX_DATA_WIDTH
 (0x7 << 
GTP_DRP_OFFSET_TX_DATA_WIDTH
)

	)

57 
	#GTP_DRP_ADDR_PLL0_REFCLK_DIV
 0x4

	)

58 
	#GTP_DRP_OFFSET_PLL0_REFCLK_DIV
 9

	)

59 
	#GTP_DRP_MASK_PLL0_REFCLK_DIV
 (0x1F << 
GTP_DRP_OFFSET_PLL0_REFCLK_DIV
)

	)

61 
	#GTP_DRP_ADDR_PLL0_FBDIV_45
 0x4

	)

62 
	#GTP_DRP_OFFSET_PLL0_FBDIV_45
 7

	)

63 
	#GTP_DRP_MASK_PLL0_FBDIV_45
 (0x1 << 
GTP_DRP_OFFSET_PLL0_FBDIV_45
)

	)

65 
	#GTP_DRP_ADDR_PLL0_FBDIV
 0x4

	)

66 
	#GTP_DRP_OFFSET_PLL0_FBDIV
 0

	)

67 
	#GTP_DRP_MASK_PLL0_FBDIV
 (0x3F << 
GTP_DRP_OFFSET_PLL0_FBDIV
)

	)

69 
	#GTP_DRP_ADDR_PLL1_REFCLK_DIV
 0x2b

	)

70 
	#GTP_DRP_OFFSET_PLL1_REFCLK_DIV
 9

	)

71 
	#GTP_DRP_MASK_PLL1_REFCLK_DIV
 (0x1F << 
GTP_DRP_OFFSET_PLL1_REFCLK_DIV
)

	)

73 
	#GTP_DRP_ADDR_PLL1_FBDIV_45
 0x2b

	)

74 
	#GTP_DRP_OFFSET_PLL1_FBDIV_45
 7

	)

75 
	#GTP_DRP_MASK_PLL1_FBDIV_45
 (0x1 << 
GTP_DRP_OFFSET_PLL1_FBDIV_45
)

	)

77 
	#GTP_DRP_ADDR_PLL1_FBDIV
 0x2b

	)

78 
	#GTP_DRP_OFFSET_PLL1_FBDIV
 0

	)

79 
	#GTP_DRP_MASK_PLL1_FBDIV
 (0x3F << 
GTP_DRP_OFFSET_PLL1_FBDIV
)

	)

81 
	#GTP_DRP_ADDR_TXOUT_DIV
 0x88

	)

82 
	#GTP_DRP_OFFSET_TXOUT_DIV
 4

	)

83 
	#GTP_DRP_MASK_TXOUT_DIV
 ( 0x7 << 
GTP_DRP_OFFSET_TXOUT_DIV
)

	)

85 
	#GTP_DRP_ADDR_RXOUT_DIV
 0x88

	)

86 
	#GTP_DRP_OFFSET_RXOUT_DIV
 0

	)

87 
	#GTP_DRP_MASK_RXOUT_DIV
 ( 0x7 << 
GTP_DRP_OFFSET_RXOUT_DIV
)

	)

89 
	#GTP_DRP_ADDR_RX_CLK25_DIV
 0x11

	)

90 
	#GTP_DRP_OFFSET_RX_CLK25_DIV
 6

	)

91 
	#GTP_DRP_MASK_RX_CLK25_DIV
 ( 0x1F << 
GTP_DRP_OFFSET_RX_CLK25_DIV
)

	)

95 
	#GTP_DRP_ADDR_RXCDR_CFG0
 0xA8

	)

96 
	#GTP_DRP_OFFSET_RXCDR_CFG0
 0

	)

97 
	#GTP_DRP_MASK_RXCDR_CFG0
 0xFFFF

	)

98 
	#GTP_DRP_MASK_RXCDR_CFG
 0xFFFF

	)

100 
	#GTP_DRP_ADDR_RXCDR_CFG1
 0xA9

	)

101 
	#GTP_DRP_OFFSET_RXCDR_CFG1
 0

	)

102 
	#GTP_DRP_MASK_RXCDR_CFG1
 0xFFFF

	)

104 
	#GTP_DRP_ADDR_RXCDR_CFG2
 0xAA

	)

105 
	#GTP_DRP_OFFSET_RXCDR_CFG2
 0

	)

106 
	#GTP_DRP_MASK_RXCDR_CFG2
 0xFFFF

	)

108 
	#GTP_DRP_ADDR_RXCDR_CFG3
 0xAB

	)

109 
	#GTP_DRP_OFFSET_RXCDR_CFG3
 0

	)

110 
	#GTP_DRP_MASK_RXCDR_CFG3
 0xFFFF

	)

112 
	#GTP_DRP_ADDR_RXCDR_CFG4
 0xAC

	)

113 
	#GTP_DRP_OFFSET_RXCDR_CFG4
 0

	)

114 
	#GTP_DRP_MASK_RXCDR_CFG4
 0xFFFF

	)

116 
	#GTP_RX_CDR_CFG_SIZE
 5

	)

119 
	uGçBa£Addªss


121 vﬁ©ûê
bb_t›_dp_gç_rx
 *
	mrx
;

122 vﬁ©ûê
bb_t›_dp_gç_tx
 *
	mtx
;

128 
boﬁ
 
	gTxDiffCål
;

129 
boﬁ
 
	gTxPo°Curs‹
;

132 
GçBa£Addªss
 
	ggç
;

133 vﬁ©ûê
bb_t›_s
* 
	gbb_t›_ªgi°îs
 = (vﬁ©ûêbb_t›_s*Ë
bb_chù_bb_t›_s_ADDRESS
;

134 vﬁ©ûê
bb_chù_s
* 
	gbb_chù
 = (vﬁ©ûê*)(
bb_chù_s_ADDRESS
);

136 
	srxOutClkMmcm


138 
uöt8_t
 
	maddr
;

139 
uöt16_t
 
	mhbr2_40b
;

140 
uöt16_t
 
	mhbr_40b
;

141 
uöt16_t
 
	mrbr_40b
;

142 
uöt16_t
 
	mhbr_20b
;

143 
uöt16_t
 
	mrbr_20b
;

146 c⁄° 
txOutClkMmcm
 
	gmmcmSour˚
[] =

173 c⁄° 
rxOutClkMmcm
 
	gmmcmSök
[] =

201 c⁄° 
uöt16_t
 
	grxCdrCfgSscOn5G
[
GTP_RX_CDR_CFG_SIZE
] =

207 c⁄° 
uöt16_t
 
	grxCdrCfgSscOn
[
GTP_RX_CDR_CFG_SIZE
] =

213 c⁄° 
uöt16_t
 
	grxCdrCfgSscOff5G
[
GTP_RX_CDR_CFG_SIZE
] =

219 c⁄° 
uöt16_t
 
	grxCdrCfgSscOff
[
GTP_RX_CDR_CFG_SIZE
] =

224 c⁄° 
uöt8_t
 
	gnumMmcmWrôesSour˚
 = 
ARRAYSIZE
(
mmcmSour˚
);

225 c⁄° 
uöt8_t
 
	gnumMmcmWrôesSök
 = 
ARRAYSIZE
(
mmcmSök
);

228 
MaöLökB™dwidth
 
	mbw
;

229 
L™eCou¡
 
	mlc
;

230 
bb_t›_dΩ_dΩ_í_mask
 
	mœ√Mask
;

231 
LEON_TimîVÆueT
 
	mgçLockSèπTime
;

232 
LEON_TimîVÆueT
 
	mgçFrqSèπTime
;

233 (*
	mgçC⁄figuªCÆlback
)(
	mboﬁ
);

234 (*
	mgçFrqCÆlback
)(
	muöt32_t
);

235 } 
	gbbT›DpCtx
;

239 
c⁄figuªDpTøns˚ivîComm⁄A7
();

240 
c⁄figuªPŒ0
(
MaöLökB™dwidth
 
bw
);

241 
c⁄figuªPŒ1
(
MaöLökB™dwidth
 
bw
);

242 
c⁄figuªSour˚SîülClkDiv
(

243 
MaöLökB™dwidth
 
bw
,

244 
bb_t›_dΩ_dΩ_í_mask
 
œ√Mask
);

245 
c⁄figuªSökSîülClkDiv
(

246 
MaöLökB™dwidth
 
bw
,

247 
bb_t›_dΩ_dΩ_í_mask
 
œ√Mask
);

248 
c⁄figuªGtTxOutClkMmcm
(
MmcmTxClkOutEncodög
 
ícodög
);

249 
c⁄figuªGtRxOutClkMmcm
(
MmcmTxClkOutEncodög
 
ícodög
);

250 
c⁄figuªSour˚TxPdMode
(
uöt8_t
 
a˘iveL™es
);

251 
c⁄figuªSökRxPdMode
(
uöt8_t
 
a˘iveL™es
);

252 
c⁄figuªSökRxPﬁ¨ôy
();

253 
c⁄figuªSour˚TxPﬁ¨ôy
();

254 
bb_t›_dpC⁄figuªDpTøns˚ivîLexA7_2
(*
∑øm1
, *
∑øm2
);

255 
bb_t›_dpC⁄figuªDpTøns˚ivîLexA7_3
(*
∑øm1
, *
∑øm2
);

256 
bb_t›_dpC⁄figuªDpTøns˚ivîLexA7_4
(*
∑øm1
, *
∑øm2
);

257 
bb_t›_GçRe£tCÆlback
(
boﬁ
 
suc˚ss
);

258 
bb_t›_a7_checkDpFªq
(*
∑øm1
, *
∑øm2
);

260 #ifde‡
FUTURE_USE


261 
c⁄figuªSour˚TxPrbsSñ
(
uöt8_t
 
a˘iveL™es
);

262 
c⁄figuªSökRxPrbsSñ
(
uöt8_t
 
a˘iveL™es
);

263 
c⁄figuªSökRxPrbsC¡R°
(
uöt8_t
 
a˘iveL™es
);

275 
	$bb_t›_dpInôA7
()

277 i‡(
	`bb_t›_IsDevi˚Lex
())

279 
gç
.
rx
 = (vﬁ©ûê*Ë&
bb_chù
->
bb_t›
.
s
.
dp_gç_rx
.s;

283 
gç
.
tx
 = (vﬁ©ûê*Ë&
bb_chù
->
bb_t›
.
s
.
dp_gç_tx
.s;

285 
	}
}

309 
	$bb_t›_dpInôC⁄figuªDpTøns˚ivîLexA7
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
)

311 
	`üs£π_TOP_COMPONENT_2
(
bw
 =
BW_1_62_GBPS
 || bw =
BW_2_70_GBPS
 || bw =
BW_5_40_GBPS
,

312 
BB_TOP_DP_TRANSCEIVER_CONFIG_VALUE_ERROR
, 
bw
, 
__LINE__
);

313 
	`üs£π_TOP_COMPONENT_2
(

314 
lc
 !
LANE_COUNT_INVALID
, 
BB_TOP_DP_TRANSCEIVER_CONFIG_VALUE_ERROR
,Üc, 
__LINE__
);

316 
bbT›DpCtx
.
bw
 = bw;

317 
bbT›DpCtx
.
lc
 =Üc;

318 
bbT›DpCtx
.
œ√Mask
.
dw
 = 0;

320 
lc
)

322 
LANE_COUNT_4
:

323 
bbT›DpCtx
.
œ√Mask
.
bf
.
dp_gt1
 = 1;

324 
bbT›DpCtx
.
œ√Mask
.
bf
.
dp_gt2
 = 1;

325 
LANE_COUNT_2
:

326 
bbT›DpCtx
.
œ√Mask
.
bf
.
dp_gt0
 = 1;

327 
LANE_COUNT_1
:

328 
bbT›DpCtx
.
œ√Mask
.
bf
.
dp_gt3
 = 1;

330 
LANE_COUNT_INVALID
:

334 
	}
}

346 
	$bb_t›_dpC⁄figuªDpTøns˚ivîLexA7
((*
ˇŒback
)(
boﬁ
))

348 
bbT›DpCtx
.
gçC⁄figuªCÆlback
 = 
ˇŒback
;

351 
	`bb_t›_≠∂yDpRxSo·Re£t
(
åue
);

352 
	`c⁄figuªDpTøns˚ivîComm⁄A7
();

354 
	`c⁄figuªPŒ0
(
bbT›DpCtx
.
bw
);

355 
	`c⁄figuªSökSîülClkDiv
(
bbT›DpCtx
.
bw
, bbT›DpCtx.
œ√Mask
);

357 
	`CALLBACK_Run
(
bb_t›_dpC⁄figuªDpTøns˚ivîLexA7_2
, 
NULL
, NULL);

358 
	}
}

367 
	$bb_t›_ˇn˚lDpC⁄figuªDpTøns˚ivîLexA7
()

369 
bbT›DpCtx
.
gçC⁄figuªCÆlback
 = 
NULL
;

370 
	}
}

373 
	$bb_t›_dpRe£tDpTøns˚ivîLexA7
()

376 
	`bb_t›_£tDpGçRxMiscCålPd
(
DP_GTP_GT0_SYS_LANE_SEL
, 
DP_GTP_TX_RX_PD_MODE_3
);

377 
	`bb_t›_£tDpGçRxMiscCålPd
(
DP_GTP_GT1_SYS_LANE_SEL
, 
DP_GTP_TX_RX_PD_MODE_3
);

378 
	`bb_t›_£tDpGçRxMiscCålPd
(
DP_GTP_GT2_SYS_LANE_SEL
, 
DP_GTP_TX_RX_PD_MODE_3
);

379 
	`bb_t›_£tDpGçRxMiscCålPd
(
DP_GTP_GT3_SYS_LANE_SEL
, 
DP_GTP_TX_RX_PD_MODE_3
);

382 
	`bb_t›_≠∂yGçPŒPowîDown
(
DP_GTP_PLL_CLK_SEL_PLL1
, 
åue
);

383 
	`bb_t›_≠∂yGçPŒPowîDown
(
DP_GTP_PLL_CLK_SEL_PLL0
, 
åue
);

384 
	}
}

397 
	$bb_t›_dpC⁄figuªDpTøns˚ivîRexA7
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
)

399 
	`üs£π_TOP_COMPONENT_2
(
bw
 =
BW_1_62_GBPS
 || bw =
BW_2_70_GBPS
 || bw =
BW_5_40_GBPS
,

400 
BB_TOP_DP_TRANSCEIVER_CONFIG_VALUE_ERROR
,

401 
bw
,

402 
__LINE__
);

403 
	`üs£π_TOP_COMPONENT_2
(
lc
 !
LANE_COUNT_INVALID
,

404 
BB_TOP_DP_TRANSCEIVER_CONFIG_VALUE_ERROR
,

405 
lc
,

406 
__LINE__
);

407 
	`ûog_TOP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
BB_TOP_DP_INITIALIZING_DP_TRANSCEIVERS
, 
bw
, 
lc
);

415 c⁄° 
bb_t›_dΩ_dΩ_í_mask
 
œ√Mask
 = { .
bf
 = {

416 .
dp_gt2
 = 
lc
 =
LANE_COUNT_1
 ||Ü¯=
LANE_COUNT_2
 ||Ü¯=
LANE_COUNT_4
,

417 .
dp_gt3
 = 
lc
 =
LANE_COUNT_2
 ||Ü¯=
LANE_COUNT_4
,

418 .
dp_gt0
 = 
lc
 =
LANE_COUNT_4
,

419 .
dp_gt1
 = 
lc
 =
LANE_COUNT_4
,

423 
	`bb_t›_≠∂yDpTxSo·Re£t
(
åue
);

424 
	`c⁄figuªDpTøns˚ivîComm⁄A7
();

425 c⁄° 
MmcmTxClkOutEncodög
 
íc
 = 
	`compuãMmcmTxClkOutEncodög
(
bw
);

427 
	`c⁄figuªPŒ1
(
bw
);

428 
	`c⁄figuªSour˚SîülClkDiv
(
bw
, 
œ√Mask
);

429 
	`c⁄figuªGtTxOutClkMmcm
(
íc
);

430 
	`c⁄figuªSour˚TxPﬁ¨ôy
();

431 
	`c⁄figuªSour˚TxPdMode
((
uöt8_t
)
œ√Mask
.
dw
);

433 
	`bb_t›_dpSëVﬁègeSwögA7
();

434 
	`bb_t›_dpSëPªEmphasisA7
();

436 
	`bb_t›_≠∂yDpTxSo·Re£t
(
Ál£
);

441 
	}
}

444 
	$bb_t›_dpRe£tDpTøns˚ivîRexA7
()

447 
	`bb_t›_£tDpGçTxMiscCålPd
(
DP_GTP_GT0_SYS_LANE_SEL
, 
DP_GTP_TX_RX_PD_MODE_3
);

448 
	`bb_t›_£tDpGçTxMiscCålPd
(
DP_GTP_GT1_SYS_LANE_SEL
, 
DP_GTP_TX_RX_PD_MODE_3
);

449 
	`bb_t›_£tDpGçTxMiscCålPd
(
DP_GTP_GT2_SYS_LANE_SEL
, 
DP_GTP_TX_RX_PD_MODE_3
);

450 
	`bb_t›_£tDpGçTxMiscCålPd
(
DP_GTP_GT3_SYS_LANE_SEL
, 
DP_GTP_TX_RX_PD_MODE_3
);

453 
	`bb_t›_≠∂yGçPŒPowîDown
(
DP_GTP_PLL_CLK_SEL_PLL1
, 
åue
);

454 
	`bb_t›_≠∂yGçPŒPowîDown
(
DP_GTP_PLL_CLK_SEL_PLL0
, 
åue
);

455 
	}
}

465 
	$bb_t›_dpE«bÀDpSökA7
()

467 c⁄° 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

469 !
gç
.
rx
->
rx_°©us
.
bf
.
gt3_rx_fsm_ª£t_d⁄e
)

471 
	`üs£π_TOP_COMPONENT_1
(

472 
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()Ë< 
GT_RESET_TIMEOUT_USEC
,

473 
BB_TOP_DP_GTP_RESET_TOO_SLOW
,

474 
GT_RESET_TIMEOUT_USEC
);

478 
	`bb_t›_AµlyRe£tDpSök
(
Ál£
);

479 
	}
}

489 
	$bb_t›_dpE«bÀDpSour˚A7
()

491 c⁄° 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

493 !
gç
.
tx
->
tx_°©us
.
bf
.
gt2_tx_fsm_ª£t_d⁄e
)

495 
	`üs£π_TOP_COMPONENT_1
(

496 
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()Ë< 
GT_RESET_TIMEOUT_USEC
,

497 
BB_TOP_DP_GTP_RESET_TOO_SLOW
,

498 
GT_RESET_TIMEOUT_USEC
);

501 
	`bb_t›_AµlyRe£tDpSour˚
(
Ál£
);

502 
	}
}

513 
boﬁ
 
	$bb_t›_dpGŸClockRecovîyA7
()

515  
gç
.
rx
->
rx_°©us
.
bf
.
gt_rxout˛k_mmcm_lock
;

516 
	}
}

527 
boﬁ
 
	$bb_t›_dpGŸSymbﬁLockA7
(
L™eCou¡
 
lc
)

530 c⁄° 
bb_t›_dp_gç_rx_rx_byã_Æign_°©us
 
ÆignSètus
 = { .
dw
 = 
gç
.
rx
->
rx_byã_Æign_°©us
.dw };

531 
boﬁ
 
symbﬁLock
 = (
lc
 > 0 ? 
ÆignSètus
.
bf
.
gt3_rxbyãißlig√d
 : 
åue
) &&

532 (
lc
 > 1 ? 
ÆignSètus
.
bf
.
gt0_rxbyãißlig√d
 : 
åue
) &&

533 (
lc
 > 2 ? 
ÆignSètus
.
bf
.
gt2_rxbyãißlig√d
 : 
åue
) &&

534 (
lc
 > 3 ? 
ÆignSètus
.
bf
.
gt1_rxbyãißlig√d
 : 
åue
);

536 if(!
symbﬁLock
)

538 
	`ûog_TOP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
BB_TOP_DP_NO_SYMBOL_LOCK
, 
ÆignSètus
.
dw
);

541  
symbﬁLock
;

542 
	}
}

554 
	$bb_t›_dpSëVﬁègeSwögA7
()

562 
bb_t›_dp_gç_tx_tx_diff_˘æ
 
txDiffCål
 = { .
dw
 = 
gç
.
tx
->
tx_diff_˘æ
.dw };

564 if(
TxDiffCål
 =
åue
)

570 
txDiffCål
.
bf
.
gt2_txdiff˘æ
 = 0xF;

571 
txDiffCål
.
bf
.
gt3_txdiff˘æ
 = 0xF;

572 
txDiffCål
.
bf
.
gt0_txdiff˘æ
 = 0xF;

573 
txDiffCål
.
bf
.
gt1_txdiff˘æ
 = 0xF;

575 
gç
.
tx
->
tx_diff_˘æ
.
dw
 = 
txDiffCål
.dw;

578 
	}
}

591 
	$bb_t›_dpSëPªEmphasisA7
()

599 
bb_t›_dp_gç_tx_tx_po°_curs‹
 
txPo°Curs‹
 = { .
dw
 = 
gç
.
tx
->
tx_po°_curs‹
.dw };

600 if(
TxPo°Curs‹
 =
åue
)

606 
txPo°Curs‹
.
bf
.
gt2_txpo°curs‹
 = 0;

607 
txPo°Curs‹
.
bf
.
gt3_txpo°curs‹
 = 0;

608 
txPo°Curs‹
.
bf
.
gt0_txpo°curs‹
 = 0;

609 
txPo°Curs‹
.
bf
.
gt1_txpo°curs‹
 = 0;

611 
gç
.
tx
->
tx_po°_curs‹
.
dw
 = 
txPo°Curs‹
.dw;

616 
	}
}

629 
	$bb_t›_dpPªCh¨geMaöLökA7
(
boﬁ
 
ch¨ge
, 
L™eCou¡
 
lc
)

631 
	`ûog_TOP_COMPONENT_2
(
ILOG_DEBUG
, 
BB_TOP_DP_PRECHARGE
, 
ch¨ge
, 
lc
);

633 
bb_t›_dp_gç_tx_tx_misc_˘æ
 
miscCål
 = { .
dw
 = 
gç
.
tx
->
tx_misc_˘æ
.dw };

636 i‡(
lc
 > 0)

638 
miscCål
.
bf
.
gt2_txöhibô
 = 
ch¨ge
;

640 i‡(
lc
 > 1)

642 
miscCål
.
bf
.
gt3_txöhibô
 = 
ch¨ge
;

644 i‡(
lc
 > 2)

646 
miscCål
.
bf
.
gt0_txöhibô
 = 
ch¨ge
;

648 i‡(
lc
 > 3)

650 
miscCål
.
bf
.
gt1_txöhibô
 = 
ch¨ge
;

653 
gç
.
tx
->
tx_misc_˘æ
.
dw
 = 
miscCål
.dw;

654 
	}
}

665 
	$bb_t›_dpSëTxDiffCålA7
(
uöt8_t
 
gtTxDiffCål
, 
boﬁ
 
ch™geDiffCål
)

667 
TxDiffCål
 = 
ch™geDiffCål
;

669 
bb_t›_dp_gç_tx_tx_diff_˘æ
 
txDiffCål
 = { .
dw
 = 
gç
.
tx
->
tx_diff_˘æ
.dw };

671 
txDiffCål
.
bf
.
gt2_txdiff˘æ
 = 
gtTxDiffCål
;

672 
txDiffCål
.
bf
.
gt3_txdiff˘æ
 = 
gtTxDiffCål
;

673 
txDiffCål
.
bf
.
gt0_txdiff˘æ
 = 
gtTxDiffCål
;

674 
txDiffCål
.
bf
.
gt1_txdiff˘æ
 = 
gtTxDiffCål
;

676 
gç
.
tx
->
tx_diff_˘æ
.
dw
 = 
txDiffCål
.dw;

677 
	}
}

689 
	$bb_t›_dpSëTxPo°Curs‹A7
(
uöt8_t
 
gtTxPo°Curs‹
, 
boﬁ
 
ch™gePo°Curs‹
)

691 
TxPo°Curs‹
 = 
ch™gePo°Curs‹
;

693 
bb_t›_dp_gç_tx_tx_po°_curs‹
 
txPo°Curs‹
 = { .
dw
 = 
gç
.
tx
->
tx_po°_curs‹
.dw };

695 
txPo°Curs‹
.
bf
.
gt2_txpo°curs‹
 = 
gtTxPo°Curs‹
;

696 
txPo°Curs‹
.
bf
.
gt3_txpo°curs‹
 = 
gtTxPo°Curs‹
;

697 
txPo°Curs‹
.
bf
.
gt0_txpo°curs‹
 = 
gtTxPo°Curs‹
;

698 
txPo°Curs‹
.
bf
.
gt1_txpo°curs‹
 = 
gtTxPo°Curs‹
;

700 
gç
.
tx
->
tx_po°_curs‹
.
dw
 = 
txPo°Curs‹
.dw;

701 
	}
}

713 
	$bb_t›_a7_gëDpFªq
(c⁄° 
DpFªqCÆcuœã
 *
dpFªqCÆcuœã
, (*
ˇŒback
)(
uöt32_t
))

715 
boﬁ
 
°ûlRu¬ög
 = 
bbT›DpCtx
.
gçFrqCÆlback
!=
NULL
 ? 
Ál£
 : 
åue
;

716 
	`üs£π_TOP_COMPONENT_0
(
°ûlRu¬ög
, 
BB_TOP_FRQ_RUNNING
);

718 
bbT›DpCtx
.
gçFrqCÆlback
 = 
ˇŒback
;

719 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.
max_cou¡
 = 
dpFªqCÆcuœã
->max_count;

720 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.
˛k_£l
 = 
dpFªqCÆcuœã
->clk_sel;

721 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.
go
 = 1;

723 
bbT›DpCtx
.
gçFrqSèπTime
 = 
	`LEON_TimîRód
();

724 
	`CALLBACK_Run
(
bb_t›_a7_checkDpFªq
, 
NULL
, NULL);

725 
	}
}

734 
	$bb_t›_a7_dp_‰q_dë_auto
(c⁄° 
DpFªqDëAuto
 *
dpFªqDëAutoLﬂd
)

736 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.
˛k_£l
 = 1;

737 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp_auto
.
bf
.
auto_íabÀ
 = 
åue
;

738 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp_auto
.
bf
.
comp_cou¡_max
 = 
dpFªqDëAutoLﬂd
->
comp_max_cou¡
;

739 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp_auto
.
bf
.
comp_cou¡_mö
 = 
dpFªqDëAutoLﬂd
->
comp_mö_cou¡
;

740 
bb_t›_ªgi°îs
->
úq
.
s
.
íabÀ
.
bf
.
‰eq_dë_dp_o‹
 = 
åue
;

741 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.
go
 = 1;

742 
	}
}

753 
	$bb_t›_a7_c⁄figRxCdr
(
boﬁ
 
sscOn
)

755 c⁄° 
uöt16_t
 *
rxCdrCfg
 = 
sscOn
 ? (
bbT›DpCtx
.
bw
 =
BW_5_40_GBPS
 ? 
rxCdrCfgSscOn5G
 : 
rxCdrCfgSscOn
) :

756 
bbT›DpCtx
.
bw
 =
BW_5_40_GBPS
 ? 
rxCdrCfgSscOff5G
 : 
rxCdrCfgSscOff
;

758 
uöt8_t
 
i
 = 0; i < 
GTP_RX_CDR_CFG_SIZE
; i++)

760 
	`bb_t›_dΩRódModWrôe
(
GTP_DRP_ADDR_RXCDR_CFG0
 + 
i
,

761 
rxCdrCfg
[
i
], 
GTP_DRP_MASK_RXCDR_CFG
, 
bbT›DpCtx
.
œ√Mask
);

763 
	}
}

773 
	$bb_t›_GçRe£tIcmd
()

775 
	`bb_t›_dpInôC⁄figuªDpTøns˚ivîLexA7
(
BW_5_40_GBPS
, 
LANE_COUNT_4
);

776 
	`bb_t›_dpC⁄figuªDpTøns˚ivîLexA7
(
bb_t›_GçRe£tCÆlback
);

777 
	}
}

786 
	$bb_t›_C⁄figuªDpTøns˚ivîLexIcmd
()

788 
	`bb_t›_GçRe£tIcmd
();

789 
	}
}

800 
	$c⁄figuªDpTøns˚ivîComm⁄A7
()

802 c⁄° 
DpGçPŒCålRefClkSñ
 
ªfClkSñ
 = 
	`bb_t›_IsDevi˚Lex
() ?

803 
DP_GTP_PLL_CTRL_REF_CLK_SEL_GTREFCLK0
 : 
DP_GTP_PLL_CTRL_REF_CLK_SEL_GTREFCLK1
;

806 i‡(
	`bb_t›_IsDevi˚Lex
())

808 
	`bb_t›_≠∂yGçPŒPowîDown
(
DP_GTP_PLL_CLK_SEL_PLL1
, 
åue
);

809 
	`bb_t›_≠∂yGçPŒPowîDown
(
DP_GTP_PLL_CLK_SEL_PLL0
, 
Ál£
);

813 
	`bb_t›_≠∂yGçPŒPowîDown
(
DP_GTP_PLL_CLK_SEL_PLL1
, 
Ál£
);

814 
	`bb_t›_≠∂yGçPŒPowîDown
(
DP_GTP_PLL_CLK_SEL_PLL0
, 
åue
);

817 
	`bb_t›_£tGçPŒRefClkSñ
(
DP_GTP_PLL_CLK_SEL_PLL0
, 
ªfClkSñ
);

818 
	`bb_t›_£tGçPŒRefClkSñ
(
DP_GTP_PLL_CLK_SEL_PLL1
, 
ªfClkSñ
);

820 
	`bb_t›_£tDpGçRxClkCål
(
DP_GTP_SYS_CLK_SEL_CFG_REF_PLL0_SRC_PLL0
);

823 
	`bb_t›_£tDpGçTxClkCål
(
DP_GTP_SYS_CLK_SEL_CFG_REF_PLL1_SRC_PLL1
);

825 
	}
}

836 
	$c⁄figuªPŒ0
(
MaöLökB™dwidth
 
bw
)

838 c⁄° 
bb_t›_dΩ_dΩ_í_mask
 
mask
 = { .
bf
.
dp_gt_comm⁄
 = 1};

846 c⁄° 
uöt16_t
 
ªfClkDiv
 = ((
bw
 =
BW_1_62_GBPS
 || bw =
BW_2_70_GBPS
) ? 16 :

847 
bw
 =
BW_5_40_GBPS
 ? 0 : 0xFFË<< 
GTP_DRP_OFFSET_PLL0_REFCLK_DIV
;

849 c⁄° 
uöt16_t
 
fbDiv45
 = 1 << 
GTP_DRP_OFFSET_PLL0_FBDIV_45
;

851 c⁄° 
uöt16_t
 
fbDiv
 = 2 << 
GTP_DRP_OFFSET_PLL0_FBDIV
;

853 
	`üs£π_TOP_COMPONENT_2
(
ªfClkDiv
 !(0xFF << 
GTP_DRP_OFFSET_PLL0_FBDIV_45
),

854 
BB_TOP_DP_INVALID_BANDWIDTH
,

855 
bw
,

856 
__LINE__
);

857 
	`bb_t›_dΩRódModWrôe
(
GTP_DRP_ADDR_PLL0_REFCLK_DIV
,

858 
ªfClkDiv
 | 
fbDiv45
 | 
fbDiv
,

859 
GTP_DRP_MASK_PLL0_REFCLK_DIV


860 | 
GTP_DRP_MASK_PLL0_FBDIV_45


861 | 
GTP_DRP_MASK_PLL0_FBDIV
,

862 
mask
);

863 
	}
}

874 
	$c⁄figuªPŒ1
(
MaöLökB™dwidth
 
bw
)

876 c⁄° 
bb_t›_dΩ_dΩ_í_mask
 
mask
 = { .
bf
.
dp_gt_comm⁄
 = 1};

884 c⁄° 
uöt16_t
 
ªfClkDiv
 = 16 << 
GTP_DRP_OFFSET_PLL1_REFCLK_DIV
;

886 c⁄° 
uöt16_t
 
fbDiv45
 = (
bw
 =
BW_1_62_GBPS
 ? 0 :

887 (
bw
 =
BW_2_70_GBPS
 || bw =
BW_5_40_GBPS
) ? 1 : 0xff)

888 << 
GTP_DRP_OFFSET_PLL1_FBDIV_45
;

890 c⁄° 
uöt16_t
 
fbDiv
 = (
bw
 =
BW_1_62_GBPS
 ? 1 :

891 (
bw
 =
BW_2_70_GBPS
 || bw =
BW_5_40_GBPS
) ? 2 : 0xff)

892 << 
GTP_DRP_OFFSET_PLL1_FBDIV
;

894 
	`üs£π_TOP_COMPONENT_2
(
fbDiv45
 !(0xf‡<< 
GTP_DRP_OFFSET_PLL1_FBDIV_45
) &&

895 
fbDiv
 !(0xf‡<< 
GTP_DRP_OFFSET_PLL1_FBDIV
),

896 
BB_TOP_DP_INVALID_BANDWIDTH
,

897 
bw
,

898 
__LINE__
);

899 
	`bb_t›_dΩRódModWrôe
(
GTP_DRP_ADDR_PLL1_REFCLK_DIV
,

900 
ªfClkDiv
 | 
fbDiv45
 | 
fbDiv
,

901 
GTP_DRP_MASK_PLL1_REFCLK_DIV


902 | 
GTP_DRP_MASK_PLL1_FBDIV_45


903 | 
GTP_DRP_MASK_PLL1_FBDIV
,

904 
mask
);

905 
	}
}

917 
	$c⁄figuªSour˚SîülClkDiv
(

918 
MaöLökB™dwidth
 
bw
,

919 
bb_t›_dΩ_dΩ_í_mask
 
œ√Mask
)

922 c⁄° 
uöt16_t
 
txOutDiv
 = (
bw
 =
BW_5_40_GBPS
 ? 0 : 1Ë<< 
GTP_DRP_OFFSET_TXOUT_DIV
;

923 
	`bb_t›_dΩRódModWrôe
(
GTP_DRP_ADDR_TXOUT_DIV
,

924 
txOutDiv
,

925 
GTP_DRP_MASK_TXOUT_DIV
,

926 
œ√Mask
);

928 c⁄° 
uöt16_t
 
txD©aWidth
 = 
GTP_DRP_VAL_TX_DATA_WIDTH_40_BIT_PORT
;

930 
	`bb_t›_dΩRódModWrôe
(
GTP_DRP_ADDR_TX_DATA_WIDTH
,

931 
txD©aWidth
,

932 
GTP_DRP_MASK_TX_DATA_WIDTH
,

933 
œ√Mask
);

934 
	}
}

946 
	$c⁄figuªSökSîülClkDiv
(

947 
MaöLökB™dwidth
 
bw
,

948 
bb_t›_dΩ_dΩ_í_mask
 
œ√Mask
)

951 c⁄° 
uöt16_t
 
rxOutDiv
 = (
bw
 =
BW_5_40_GBPS
 ? 0 : 1Ë<< 
GTP_DRP_OFFSET_RXOUT_DIV
;

952 
	`bb_t›_dΩRódModWrôe
(
GTP_DRP_ADDR_RXOUT_DIV
,

953 
rxOutDiv
,

954 
GTP_DRP_MASK_RXOUT_DIV
,

955 
œ√Mask
);

957 c⁄° 
uöt16_t
 
rxD©aWidth
 = 
GTP_DRP_VAL_RX_DATA_WIDTH_40_BIT_PORT
;

958 
	`bb_t›_dΩRódModWrôe
(
GTP_DRP_ADDR_RX_DATA_WIDTH
,

959 
rxD©aWidth
,

960 
GTP_DRP_MASK_RX_DATA_WIDTH
,

961 
œ√Mask
);

963 c⁄° 
uöt16_t
 
rxClkDiv
 = (
bw
 =
BW_5_40_GBPS
 ? 11 : bw =
BW_2_70_GBPS
 ? 6 : 4Ë<< 
GTP_DRP_OFFSET_RX_CLK25_DIV
;

964 
	`bb_t›_dΩRódModWrôe
(
GTP_DRP_ADDR_RX_CLK25_DIV
,

965 
rxClkDiv
,

966 
GTP_DRP_MASK_RX_CLK25_DIV
,

967 
œ√Mask
);

968 
	}
}

979 
	$c⁄figuªSour˚TxPdMode
(
uöt8_t
 
a˘iveL™es
)

981 
uöt8_t
 
œ√
 = 0;

982 
œ√
 = 0;Üane < 4;Üane++)

984 i‡((1 << 
œ√
Ë& 
a˘iveL™es
)

986 
	`bb_t›_£tDpGçTxMiscCålPd
(
œ√
, 
DP_GTP_TX_RX_PD_MODE_0
);

990 
	`bb_t›_£tDpGçTxMiscCålPd
(
œ√
, 
DP_GTP_TX_RX_PD_MODE_3
);

993 
	}
}

1004 
	$c⁄figuªSour˚TxPﬁ¨ôy
()

1007 if(
	`bb_t›_gëC‹eBﬂrdRev
(Ë>
BOM_23_00200_A03
)

1009 
	`bb_t›_£tDpGçTxMiscCålPﬁ¨ôy
(
åue
);

1011 
	}
}

1022 
	$c⁄figuªSökRxPﬁ¨ôy
()

1025 
	`bb_t›_£tDpGçRxMiscCålPﬁ¨ôy
(
åue
);

1027 
	}
}

1038 
	$c⁄figuªSökRxPdMode
(
uöt8_t
 
a˘iveL™es
)

1040 
uöt8_t
 
œ√
 = 0;

1041 
œ√
 = 0;Üane < 4;Üane++)

1043 i‡((1 << 
œ√
Ë& 
a˘iveL™es
)

1045 
	`bb_t›_£tDpGçRxMiscCålPd
(
œ√
, 
DP_GTP_TX_RX_PD_MODE_0
);

1049 
	`bb_t›_£tDpGçRxMiscCålPd
(
œ√
, 
DP_GTP_TX_RX_PD_MODE_3
);

1052 
	}
}

1054 #ifde‡
FUTURE_USE


1055 
	$c⁄figuªSour˚TxPrbsSñ
(
uöt8_t
 
a˘iveL™es
)

1057 
uöt8_t
 
œ√
 = 0;

1058 
œ√
 = 0;Üane < 4;Üane++)

1060 i‡((1 << 
œ√
Ë& 
a˘iveL™es
)

1062 
	`bb_t›_£tDpGçTxPrbsCålSñ
(
œ√
, 
DP_GTP_TX_RX_PRBS_7
);

1065 
	}
}

1067 
	$c⁄figuªSour˚RxPrbsSñ
(
uöt8_t
 
a˘iveL™es
)

1069 
uöt8_t
 
œ√
 = 0;

1070 
œ√
 = 0;Üane < 4;Üane++)

1072 i‡((1 << 
œ√
Ë& 
a˘iveL™es
)

1074 
	`bb_t›_£tDpGçRxPrbsCålSñ
(
œ√
, 
DP_GTP_TX_RX_PRBS_7
);

1077 
	}
}

1079 
	$c⁄figuªSour˚RxPrbsC¡R°
(
uöt8_t
 
a˘iveL™es
)

1081 
uöt8_t
 
œ√
 = 0;

1082 
œ√
 = 0;Üane < 4;Üane++)

1084 i‡((1 << 
œ√
Ë& 
a˘iveL™es
)

1086 
	`bb_t›_≠∂yDpGçRxPrbsCålPrbsC¡Re£t
(
œ√
, 
Ál£
);

1089 
	}
}

1101 
	$c⁄figuªGtTxOutClkMmcm
(
MmcmTxClkOutEncodög
 
ícodög
)

1103 c⁄° 
bb_t›_dΩ_dΩ_í_mask
 
mask
 = { .
bf
.
dp_gt_txout˛k_mmcm
 = 1};

1104 
uöt16_t
 
mmcmVÆue
 = 0;

1105 
uöt8_t
 
mmcmWrôes
 = 0;

1106 
mmcmWrôes
 = 0; mmcmWrôe†< 
numMmcmWrôesSour˚
; mmcmWrites++)

1108 
ícodög
)

1110 
MMCM_TX_CLK_OUT_ENCODING_RBR_40B
:

1111 
mmcmVÆue
 = 
mmcmSour˚
[
mmcmWrôes
].
rbr_40b
;

1113 
MMCM_TX_CLK_OUT_ENCODING_HBR_40B
:

1114 
mmcmVÆue
 = 
mmcmSour˚
[
mmcmWrôes
].
hbr_40b
;

1116 
MMCM_TX_CLK_OUT_ENCODING_HBR2_40B
:

1117 
mmcmVÆue
 = 
mmcmSour˚
[
mmcmWrôes
].
hbr2_40b
;

1123 
	`bb_t›_dΩRódModWrôe
(
mmcmSour˚
[
mmcmWrôes
].
addr
,

1124 
mmcmVÆue
,

1125 
BB_TOP_DRP_DRP_READ_DATA_DRP_DO_MASK
,

1126 
mask
);

1128 
	}
}

1139 
	$c⁄figuªGtRxOutClkMmcm
(
MmcmTxClkOutEncodög
 
ícodög
)

1141 c⁄° 
bb_t›_dΩ_dΩ_í_mask
 
mask
 = { .
bf
.
dp_gt_rxout˛k_mmcm
 = 1};

1142 
uöt16_t
 
mmcmVÆue
 = 0;

1143 
uöt8_t
 
mmcmWrôes
 = 0;

1144 
mmcmWrôes
 = 0; mmcmWrôe†< 
numMmcmWrôesSök
; mmcmWrites++)

1146 
ícodög
)

1148 
MMCM_TX_CLK_OUT_ENCODING_RBR_40B
:

1149 
mmcmVÆue
 = 
mmcmSök
[
mmcmWrôes
].
rbr_40b
;

1151 
MMCM_TX_CLK_OUT_ENCODING_HBR_40B
:

1152 
mmcmVÆue
 = 
mmcmSök
[
mmcmWrôes
].
hbr_40b
;

1154 
MMCM_TX_CLK_OUT_ENCODING_HBR2_40B
:

1155 
mmcmVÆue
 = 
mmcmSök
[
mmcmWrôes
].
hbr2_40b
;

1161 
	`bb_t›_dΩRódModWrôe
(
mmcmSök
[
mmcmWrôes
].
addr
,

1162 
mmcmVÆue
,

1163 
BB_TOP_DRP_DRP_READ_DATA_DRP_DO_MASK
,

1164 
mask
);

1166 
	}
}

1177 
	$bb_t›_dpC⁄figuªDpTøns˚ivîLexA7_2
(*
∑øm1
, *
∑øm2
)

1179 if(
bbT›DpCtx
.
gçC⁄figuªCÆlback
)

1181 c⁄° 
MmcmTxClkOutEncodög
 
íc
 = 
	`compuãMmcmTxClkOutEncodög
(
bbT›DpCtx
.
bw
);

1182 
	`c⁄figuªGtRxOutClkMmcm
(
íc
);

1184 
	`CALLBACK_Run
(
bb_t›_dpC⁄figuªDpTøns˚ivîLexA7_3
, 
NULL
, NULL);

1186 
	}
}

1196 
	$bb_t›_dpC⁄figuªDpTøns˚ivîLexA7_3
(*
∑øm1
, *
∑øm2
)

1198 if(
bbT›DpCtx
.
gçC⁄figuªCÆlback
)

1200 
	`bb_t›_a7_c⁄figRxCdr
(
Ál£
);

1201 
	`c⁄figuªSökRxPﬁ¨ôy
();

1202 
	`c⁄figuªSökRxPdMode
((
uöt8_t
)
bbT›DpCtx
.
œ√Mask
.
dw
);

1205 
	`bb_t›_≠∂yDpRxSo·Re£t
(
Ál£
);

1207 
bbT›DpCtx
.
gçLockSèπTime
 = 
	`LEON_TimîRód
();

1208 
	`CALLBACK_Run
(
bb_t›_dpC⁄figuªDpTøns˚ivîLexA7_4
, 
NULL
, NULL);

1210 
	}
}

1222 
	$bb_t›_dpC⁄figuªDpTøns˚ivîLexA7_4
(*
∑øm1
, *
∑øm2
)

1224 if(
bbT›DpCtx
.
gçC⁄figuªCÆlback
)

1226 if(
	`bb_t›_dpGŸClockRecovîyA7
())

1228 
	`ûog_TOP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
BB_TOP_DP_MMCM_LOCK
, 
	`LEON_TimîCÆcU£cDiff
(
bbT›DpCtx
.
gçLockSèπTime
, 
	`LEON_TimîRód
()));

1229 
bbT›DpCtx
.
	`gçC⁄figuªCÆlback
(
åue
);

1233 if(
	`LEON_TimîCÆcU£cDiff
(
bbT›DpCtx
.
gçLockSèπTime
, 
	`LEON_TimîRód
()Ë< 
GT_LOCK_TIMEOUT_USEC
)

1235 
	`CALLBACK_Run
(
bb_t›_dpC⁄figuªDpTøns˚ivîLexA7_4
, 
NULL
, NULL);

1239 
bbT›DpCtx
.
	`gçC⁄figuªCÆlback
(
Ál£
);

1243 
	}
}

1253 
	$bb_t›_GçRe£tCÆlback
(
boﬁ
 
suc˚ss
)

1255 
	`LEON_TimîWaôMi¸oSec
(
GT_RESET_TIMEOUT_USEC
);

1257 if(!
gç
.
rx
->
rx_°©us
.
bf
.
gt3_rx_fsm_ª£t_d⁄e
)

1259 
	`ûog_TOP_COMPONENT_1
(
ILOG_MAJOR_EVENT
, 
BB_TOP_DP_GTP_RESET_TOO_SLOW
, 
GT_RESET_TIMEOUT_USEC
);

1263 
	`ûog_TOP_COMPONENT_0
(
ILOG_MAJOR_EVENT
, 
BB_TOP_GTP_OUT_OF_RESET
);

1265 
	}
}

1275 
	$bb_t›_a7_checkDpFªq
(*
∑øm1
, *
∑øm2
)

1277 if(
	`bb_t›_a7_hasGcmFªquícyDëe˘i⁄Com∂ëed
(
åue
))

1279 
	`ûog_TOP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
BB_TOP_DP_FRQ
, 
	`LEON_TimîCÆcU£cDiff
(
bbT›DpCtx
.
gçFrqSèπTime
, 
	`LEON_TimîRód
()),

1280 
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.
cou¡
);

1282 if(
bbT›DpCtx
.
gçFrqCÆlback
)

1284 
bbT›DpCtx
.
	`gçFrqCÆlback
(
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.
cou¡
);

1285 
bbT›DpCtx
.
gçFrqCÆlback
 = 
NULL
;

1290 if(
	`LEON_TimîCÆcU£cDiff
(
bbT›DpCtx
.
gçFrqSèπTime
, 
	`LEON_TimîRód
()Ë< 
GT_FRQ_TIMEOUT_USEC
)

1292 
	`CALLBACK_Run
(
bb_t›_a7_checkDpFªq
, 
NULL
, NULL);

1296 
bbT›DpCtx
.
	`gçFrqCÆlback
(
bb_t›_ªgi°îs
->
gcm
.
s
.
‰eq_dë_dp
.
bf
.
cou¡
);

1299 
	}
}

	@components/top/src/bb_top_dp_k7.c

24 #ifde‡
PLATFORM_K7


27 
	~<bb_c‹e.h
>

28 
	~<iba£.h
>

29 
	~<bb_t›_ªgs.h
>

31 
	~<bb_t›.h
>

32 
	~<bb_t›_dp.h
>

33 
	~<bb_t›_dp_k7.h
>

34 
	~<À⁄_timîs.h
>

35 
	~"bb_t›_log.h
"

42 
	#GTX_DRP_ADDR_RX_INT_DATAWIDTH
 0x11

	)

43 
	#GTX_DRP_OFFSET_RX_INT_DATAWIDTH
 14

	)

44 
	#GTX_DRP_VAL_RX_INT_DATAWIDTH_2_BYTE_INTERNAL_DATAPATH
 (0 << 
GTX_DRP_OFFSET_RX_INT_DATAWIDTH
)

	)

45 
	#GTX_DRP_VAL_RX_INT_DATAWIDTH_4_BYTE_INTERNAL_DATAPATH
 (1 << 
GTX_DRP_OFFSET_RX_INT_DATAWIDTH
)

	)

46 
	#GTX_DRP_MASK_RX_INT_DATAWIDTH
 (0x1 << 
GTX_DRP_OFFSET_RX_INT_DATAWIDTH
)

	)

48 
	#GTX_DRP_ADDR_RX_DATA_WIDTH
 0x11

	)

49 
	#GTX_DRP_OFFSET_RX_DATA_WIDTH
 11

	)

50 
	#GTX_DRP_VAL_RX_DATA_WIDTH_20_BIT_PORT
 (0x3 << 
GTX_DRP_OFFSET_RX_DATA_WIDTH
)

	)

51 
	#GTX_DRP_VAL_RX_DATA_WIDTH_40_BIT_PORT
 (0x5 << 
GTX_DRP_OFFSET_RX_DATA_WIDTH
)

	)

52 
	#GTX_DRP_MASK_RX_DATA_WIDTH
 (0x7 << 
GTX_DRP_OFFSET_RX_DATA_WIDTH
)

	)

54 
	#GTX_DRP_ADDR_TX_INT_DATAWIDTH
 0x6B

	)

55 
	#GTX_DRP_OFFSET_TX_INT_DATAWIDTH
 4

	)

56 
	#GTX_DRP_VAL_TX_INT_DATAWIDTH_2_BYTE_INTERNAL_DATAPATH
 (0 << 
GTX_DRP_OFFSET_TX_INT_DATAWIDTH
)

	)

57 
	#GTX_DRP_VAL_TX_INT_DATAWIDTH_4_BYTE_INTERNAL_DATAPATH
 (1 << 
GTX_DRP_OFFSET_TX_INT_DATAWIDTH
)

	)

58 
	#GTX_DRP_MASK_TX_INT_DATAWIDTH
 (0x1 << 
GTX_DRP_OFFSET_TX_INT_DATAWIDTH
)

	)

60 
	#GTX_DRP_ADDR_TX_DATA_WIDTH
 0x6B

	)

61 
	#GTX_DRP_OFFSET_TX_DATA_WIDTH
 0

	)

62 
	#GTX_DRP_VAL_TX_DATA_WIDTH_20_BIT_PORT
 (0x3 << 
GTX_DRP_OFFSET_TX_DATA_WIDTH
)

	)

63 
	#GTX_DRP_VAL_TX_DATA_WIDTH_40_BIT_PORT
 (0x5 << 
GTX_DRP_OFFSET_TX_DATA_WIDTH
)

	)

64 
	#GTX_DRP_MASK_TX_DATA_WIDTH
 (0x7 << 
GTX_DRP_OFFSET_TX_DATA_WIDTH
)

	)

66 
	#GTX_DRP_ADDR_CPLL_REFCLK_DIV
 0x5E

	)

67 
	#GTX_DRP_OFFSET_CPLL_REFCLK_DIV
 8

	)

69 
	#GTX_DRP_MASK_CPLL_REFCLK_DIV
 (0x1F << 
GTX_DRP_OFFSET_CPLL_REFCLK_DIV
)

	)

71 
	#GTX_DRP_ADDR_CPLL_FBDIV_45
 0x5E

	)

72 
	#GTX_DRP_OFFSET_CPLL_FBDIV_45
 7

	)

74 
	#GTX_DRP_MASK_CPLL_FBDIV_45
 (0x01 << 
GTX_DRP_OFFSET_CPLL_FBDIV_45
)

	)

76 
	#GTX_DRP_ADDR_CPLL_FBDIV
 0x5E

	)

77 
	#GTX_DRP_OFFSET_CPLL_FBDIV
 0

	)

79 
	#GTX_DRP_MASK_CPLL_FBDIV
 (0x7F << 
GTX_DRP_OFFSET_CPLL_FBDIV
)

	)

81 
	#GTX_DRP_ADDR_TXOUT_DIV
 0x88

	)

82 
	#GTX_DRP_OFFSET_TXOUT_DIV
 4

	)

84 
	#GTX_DRP_MASK_TXOUT_DIV
 (0x7 << 
GTX_DRP_OFFSET_TXOUT_DIV
)

	)

86 
	#GTX_DRP_ADDR_RXOUT_DIV
 0x88

	)

87 
	#GTX_DRP_OFFSET_RXOUT_DIV
 0

	)

89 
	#GTX_DRP_MASK_RXOUT_DIV
 (0x7 << 
GTX_DRP_OFFSET_RXOUT_DIV
)

	)

94 
	#GTX_GTREFCLK0
 0x1

	)

95 
	#GTX_GTREFCLK1
 0x2

	)

98 
	#GTX_RXPD_P0
 0x0

99 
	#GTX_RXPD_P2
 0x3

100 

	)

102 
	#GTX_TXPD_P0
 0x0

103 
	#GTX_TXPD_P2
 0x3

104 

	)

107 
	#GTX_DRP_ADDR_RXCDR_CFG0
 0xA8

	)

108 
	#GTX_DRP_OFFSET_RXCDR_CFG0
 0

	)

109 
	#GTX_DRP_MASK_RXCDR_CFG0
 0xFFFF

	)

111 
	#GTX_DRP_ADDR_RXCDR_CFG1
 0xA9

	)

112 
	#GTX_DRP_OFFSET_RXCDR_CFG1
 0

	)

113 
	#GTX_DRP_MASK_RXCDR_CFG1
 0xFFFF

	)

115 
	#GTX_DRP_ADDR_RXCDR_CFG2
 0xAA

	)

116 
	#GTX_DRP_OFFSET_RXCDR_CFG2
 0

	)

117 
	#GTX_DRP_MASK_RXCDR_CFG2
 0xFFFF

	)

119 
	#GTX_DRP_ADDR_RXCDR_CFG3
 0xAB

	)

120 
	#GTX_DRP_OFFSET_RXCDR_CFG3
 0

	)

121 
	#GTX_DRP_MASK_RXCDR_CFG3
 0xFFFF

	)

123 
	#GTX_DRP_ADDR_RXCDR_CFG4
 0xAC

	)

124 
	#GTX_DRP_OFFSET_RXCDR_CFG4
 0

	)

125 
	#GTX_DRP_MASK_RXCDR_CFG4
 0x00FF

	)

128 
	uGtxBa£Addªss


130 vﬁ©ûê
bb_t›_dp_gtx_rx
 *
	mrx
;

131 vﬁ©ûê
bb_t›_dp_gtx_tx
 *
	mtx
;

137 
GtxBa£Addªss
 
	ggtx
;

138 vﬁ©ûê
bb_t›_dΩ
 *
	gdΩ
;

140 c⁄° 
txOutClkMmcm
 
	gmmcmGtx
[] = {

155 c⁄° 
uöt8_t
 
	gnumMmcmWrôesGtx
 = 
ARRAYSIZE
(
mmcmGtx
);

159 
c⁄figuªDpTøns˚ivîComm⁄K7
(
bb_t›_dΩ_í_mask
 
œ√Mask
);

160 
c⁄figuªC∂l
(
MaöLökB™dwidth
 
bw
, 
bb_t›_dΩ_í_mask
 
œ√Mask
);

161 
c⁄figuªComm⁄TxOutDiv
(
MaöLökB™dwidth
 
bw
, 
bb_t›_dΩ_í_mask
 
œ√Mask
);

162 
c⁄figuªSökRxD©aWidth
(
bb_t›_dΩ_í_mask
 
œ√Mask
);

163 
c⁄figuªGtTxOutClkMmcmGtx
(
MmcmTxClkOutEncodög
 
ícodög
);

164 
c⁄figuªSour˚TxD©aWidth
(
bb_t›_dΩ_í_mask
 
œ√Mask
);

178 
	$bb_t›_dpInôK7
(vﬁ©ûê* 
gtComm⁄Ba£Addr
,

179 vﬁ©ûê* 
dΩBa£Addr
)

181 i‡(
	`bb_t›_IsDevi˚Lex
())

183 
gtx
.
rx
 = 
gtComm⁄Ba£Addr
;

187 
gtx
.
tx
 = 
gtComm⁄Ba£Addr
;

189 
dΩ
 = 
dΩBa£Addr
;

190 
	}
}

205 
	$bb_t›_dpC⁄figuªDpTøns˚ivîLexK7
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
)

207 
	`üs£π_TOP_COMPONENT_2
(
bw
 =
BW_1_62_GBPS
 || bw =
BW_2_70_GBPS
 || bw =
BW_5_40_GBPS
,

208 
BB_TOP_DP_TRANSCEIVER_CONFIG_VALUE_ERROR
,

209 
bw
,

210 
__LINE__
);

211 
	`üs£π_TOP_COMPONENT_2
(

212 
lc
 !
LANE_COUNT_INVALID
, 
BB_TOP_DP_TRANSCEIVER_CONFIG_VALUE_ERROR
,Üc, 
__LINE__
);

220 c⁄° 
bb_t›_dΩ_í_mask
 
œ√Mask
 = { .
bf
 = {

221 .
dp_gt0
 = 
lc
 =
LANE_COUNT_1
 ||Ü¯=
LANE_COUNT_2
 ||Ü¯=
LANE_COUNT_4
,

222 .
dp_gt1
 = 
lc
 =
LANE_COUNT_2
 ||Ü¯=
LANE_COUNT_4
,

223 .
dp_gt2
 = 
lc
 =
LANE_COUNT_4
,

224 .
dp_gt3
 = 
lc
 =
LANE_COUNT_4
,

228 
	`bb_t›_≠∂yDpRxSo·Re£t
(
åue
);

229 
	`c⁄figuªDpTøns˚ivîComm⁄K7
(
œ√Mask
);

231 c⁄° 
MmcmTxClkOutEncodög
 
íc
 = 
	`compuãMmcmTxClkOutEncodög
(
bw
);

233 
	`c⁄figuªC∂l
(
bw
, 
œ√Mask
);

234 
	`c⁄figuªComm⁄TxOutDiv
(
bw
, 
œ√Mask
);

235 
	`c⁄figuªSökRxD©aWidth
(
œ√Mask
);

236 
	`c⁄figuªGtTxOutClkMmcmGtx
(
íc
);

245 c⁄° 
uöt16_t
 
rxcdrCfg
[5] = {

246 
bw
 =
BW_5_40_GBPS
 ? 0x0010 : 0x0008,

247 
bw
 =
BW_5_40_GBPS
 ? 0x2020 : 0x4020,

249 
bw
 =
BW_5_40_GBPS
 ? 0x8C00 : 0x8000,

252 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_RXCDR_CFG0
, 
rxcdrCfg
[0], 
GTX_DRP_MASK_RXCDR_CFG0
, 
œ√Mask
);

253 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_RXCDR_CFG1
, 
rxcdrCfg
[1], 
GTX_DRP_MASK_RXCDR_CFG1
, 
œ√Mask
);

254 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_RXCDR_CFG2
, 
rxcdrCfg
[2], 
GTX_DRP_MASK_RXCDR_CFG2
, 
œ√Mask
);

255 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_RXCDR_CFG3
, 
rxcdrCfg
[3], 
GTX_DRP_MASK_RXCDR_CFG3
, 
œ√Mask
);

256 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_RXCDR_CFG4
, 
rxcdrCfg
[4], 
GTX_DRP_MASK_RXCDR_CFG4
, 
œ√Mask
);

264 
	`bb_t›_£tDpGtxRxMiscCålPd
(

265 
DP_GTX_GT0_SYS_LANE_SEL
, 
œ√Mask
.
bf
.
dp_gt0
 ? 
GTX_RXPD_P0
 : 
GTX_RXPD_P2
);

266 
	`bb_t›_£tDpGtxRxMiscCålPd
(

267 
DP_GTX_GT1_SYS_LANE_SEL
, 
œ√Mask
.
bf
.
dp_gt1
 ? 
GTX_RXPD_P0
 : 
GTX_RXPD_P2
);

268 
	`bb_t›_£tDpGtxRxMiscCålPd
(

269 
DP_GTX_GT2_SYS_LANE_SEL
, 
œ√Mask
.
bf
.
dp_gt2
 ? 
GTX_RXPD_P0
 : 
GTX_RXPD_P2
);

270 
	`bb_t›_£tDpGtxRxMiscCålPd
(

271 
DP_GTX_GT3_SYS_LANE_SEL
, 
œ√Mask
.
bf
.
dp_gt3
 ? 
GTX_RXPD_P0
 : 
GTX_RXPD_P2
);

273 
	`bb_t›_£tDpGtxRxMiscCålLpm
(
DP_GTX_GT0_SYS_LANE_SEL
, 
åue
);

274 
	`bb_t›_£tDpGtxRxMiscCålLpm
(
DP_GTX_GT1_SYS_LANE_SEL
, 
åue
);

275 
	`bb_t›_£tDpGtxRxMiscCålLpm
(
DP_GTX_GT2_SYS_LANE_SEL
, 
åue
);

276 
	`bb_t›_£tDpGtxRxMiscCålLpm
(
DP_GTX_GT3_SYS_LANE_SEL
, 
åue
);

280 
	`bb_t›_≠∂yDpRxSo·Re£t
(
Ál£
);

285 
	}
}

288 
	$bb_t›_dpRe£tDpTøns˚ivîLexK7
()

291 
	`bb_t›_£tDpGtxRxMiscCålPd
(
DP_GTX_GT0_SYS_LANE_SEL
, 
GTX_TXPD_P2
);

292 
	`bb_t›_£tDpGtxRxMiscCålPd
(
DP_GTX_GT1_SYS_LANE_SEL
, 
GTX_TXPD_P2
);

293 
	`bb_t›_£tDpGtxRxMiscCålPd
(
DP_GTX_GT2_SYS_LANE_SEL
, 
GTX_TXPD_P2
);

294 
	`bb_t›_£tDpGtxRxMiscCålPd
(
DP_GTX_GT3_SYS_LANE_SEL
, 
GTX_TXPD_P2
);

296 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT0_SYS_LANE_SEL
, 1);

297 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT1_SYS_LANE_SEL
, 1);

298 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT2_SYS_LANE_SEL
, 1);

299 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT3_SYS_LANE_SEL
, 1);

300 
	}
}

313 
	$bb_t›_dpC⁄figuªDpTøns˚ivîRexK7
(
MaöLökB™dwidth
 
bw
, 
L™eCou¡
 
lc
)

315 
	`üs£π_TOP_COMPONENT_2
(
bw
 =
BW_1_62_GBPS
 || bw =
BW_2_70_GBPS
 || bw =
BW_5_40_GBPS
,

316 
BB_TOP_DP_TRANSCEIVER_CONFIG_VALUE_ERROR
,

317 
bw
,

318 
__LINE__
);

319 
	`üs£π_TOP_COMPONENT_2
(
lc
 !
LANE_COUNT_INVALID
,

320 
BB_TOP_DP_TRANSCEIVER_CONFIG_VALUE_ERROR
,

321 
lc
,

322 
__LINE__
);

323 
	`ûog_TOP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
BB_TOP_DP_INITIALIZING_DP_TRANSCEIVERS
, 
bw
, 
lc
);

331 c⁄° 
bb_t›_dΩ_í_mask
 
œ√Mask
 = { .
bf
 = {

332 .
dp_gt0
 = 
lc
 =
LANE_COUNT_1
 ||Ü¯=
LANE_COUNT_2
 ||Ü¯=
LANE_COUNT_4
,

333 .
dp_gt1
 = 
lc
 =
LANE_COUNT_2
 ||Ü¯=
LANE_COUNT_4
,

334 .
dp_gt2
 = 
lc
 =
LANE_COUNT_4
,

335 .
dp_gt3
 = 
lc
 =
LANE_COUNT_4
,

339 
	`bb_t›_≠∂yDpTxSo·Re£t
(
åue
);

340 
	`c⁄figuªDpTøns˚ivîComm⁄K7
(
œ√Mask
);

341 c⁄° 
MmcmTxClkOutEncodög
 
íc
 = 
	`compuãMmcmTxClkOutEncodög
(
bw
);

343 
	`c⁄figuªC∂l
(
bw
, 
œ√Mask
);

344 
	`c⁄figuªComm⁄TxOutDiv
(
bw
, 
œ√Mask
);

345 
	`c⁄figuªGtTxOutClkMmcmGtx
(
íc
);

346 
	`c⁄figuªSour˚TxD©aWidth
(
œ√Mask
);

349 
	`bb_t›_£tDpGtxTxMiscCålPd
(

350 
DP_GTX_GT0_SYS_LANE_SEL
, 
œ√Mask
.
bf
.
dp_gt0
 ? 
GTX_TXPD_P0
 : 
GTX_TXPD_P2
);

351 
	`bb_t›_£tDpGtxTxMiscCålPd
(

352 
DP_GTX_GT1_SYS_LANE_SEL
, 
œ√Mask
.
bf
.
dp_gt1
 ? 
GTX_TXPD_P0
 : 
GTX_TXPD_P2
);

353 
	`bb_t›_£tDpGtxTxMiscCålPd
(

354 
DP_GTX_GT2_SYS_LANE_SEL
, 
œ√Mask
.
bf
.
dp_gt2
 ? 
GTX_TXPD_P0
 : 
GTX_TXPD_P2
);

355 
	`bb_t›_£tDpGtxTxMiscCålPd
(

356 
DP_GTX_GT3_SYS_LANE_SEL
, 
œ√Mask
.
bf
.
dp_gt3
 ? 
GTX_TXPD_P0
 : 
GTX_TXPD_P2
);

362 
	`bb_t›_≠∂yDpTxSo·Re£t
(
Ál£
);

367 
	}
}

370 
	$bb_t›_dpRe£tDpTøns˚ivîRexK7
()

373 
	`bb_t›_£tDpGtxTxMiscCålPd
(
DP_GTX_GT0_SYS_LANE_SEL
, 
GTX_TXPD_P2
);

374 
	`bb_t›_£tDpGtxTxMiscCålPd
(
DP_GTX_GT1_SYS_LANE_SEL
, 
GTX_TXPD_P2
);

375 
	`bb_t›_£tDpGtxTxMiscCålPd
(
DP_GTX_GT2_SYS_LANE_SEL
, 
GTX_TXPD_P2
);

376 
	`bb_t›_£tDpGtxTxMiscCålPd
(
DP_GTX_GT3_SYS_LANE_SEL
, 
GTX_TXPD_P2
);

378 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT0_SYS_LANE_SEL
, 1);

379 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT1_SYS_LANE_SEL
, 1);

380 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT2_SYS_LANE_SEL
, 1);

381 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT3_SYS_LANE_SEL
, 1);

382 
	}
}

392 
	$bb_t›_dpE«bÀDpSökK7
()

394 c⁄° 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

396 !
gtx
.
rx
->
rx_°©us
.
bf
.
gt0_rx_fsm_ª£t_d⁄e
)

398 
	`üs£π_TOP_COMPONENT_1
(

399 
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()Ë< 
GT_RESET_TIMEOUT_USEC
,

400 
BB_TOP_DP_GTX_RESET_TOO_SLOW
,

401 
GT_RESET_TIMEOUT_USEC
);

405 
	`bb_t›_AµlyRe£tDpSök
(
Ál£
);

406 
	}
}

416 
	$bb_t›_dpE«bÀDpSour˚K7
()

418 c⁄° 
LEON_TimîVÆueT
 
°¨tTime
 = 
	`LEON_TimîRód
();

420 !
gtx
.
tx
->
tx_°©us
.
bf
.
gt0_tx_fsm_ª£t_d⁄e
)

422 
	`üs£π_TOP_COMPONENT_1
(

423 
	`LEON_TimîCÆcU£cDiff
(
°¨tTime
, 
	`LEON_TimîRód
()Ë< 
GT_RESET_TIMEOUT_USEC
,

424 
BB_TOP_DP_GTX_RESET_TOO_SLOW
,

425 
GT_RESET_TIMEOUT_USEC
);

428 
	`bb_t›_AµlyRe£tDpSour˚
(
Ál£
);

429 
	}
}

439 
	$c⁄figuªDpTøns˚ivîComm⁄K7
(
bb_t›_dΩ_í_mask
 
œ√Mask
)

444 c⁄° 
uöt8_t
 
ªfClkSñ
 = (
	`bb_t›_GëHpcId
(Ë=1Ë&& (
	`bb_t›_IsDevi˚Lex
()) ?

445 
GTX_GTREFCLK1
 : 
GTX_GTREFCLK0
;

447 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT0_SYS_LANE_SEL
, !
œ√Mask
.
bf
.
dp_gt0
);

448 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT1_SYS_LANE_SEL
, !
œ√Mask
.
bf
.
dp_gt1
);

449 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT2_SYS_LANE_SEL
, !
œ√Mask
.
bf
.
dp_gt2
);

450 
	`bb_t›_≠∂yGtxC∂lPowîDown
(
DP_GTX_GT3_SYS_LANE_SEL
, !
œ√Mask
.
bf
.
dp_gt3
);

452 
	`bb_t›_£tDpGtxC∂lRefClkSñ
(
DP_GTX_GT0_SYS_LANE_SEL
, 
ªfClkSñ
);

453 
	`bb_t›_£tDpGtxC∂lRefClkSñ
(
DP_GTX_GT1_SYS_LANE_SEL
, 
ªfClkSñ
);

454 
	`bb_t›_£tDpGtxC∂lRefClkSñ
(
DP_GTX_GT2_SYS_LANE_SEL
, 
ªfClkSñ
);

455 
	`bb_t›_£tDpGtxC∂lRefClkSñ
(
DP_GTX_GT3_SYS_LANE_SEL
, 
ªfClkSñ
);

456 
	}
}

468 
	$c⁄figuªC∂l
(
MaöLökB™dwidth
 
bw
, 
bb_t›_dΩ_í_mask
 
œ√Mask
)

471 c⁄° 
uöt16_t
 
ªfClkDiv
 = 16 << 
GTX_DRP_OFFSET_CPLL_REFCLK_DIV
 ;

472 c⁄° 
uöt16_t
 
fbDiv45
 = (
bw
 =
BW_1_62_GBPS
 ? 0 :

473 
bw
 =
BW_2_70_GBPS
 ? 1 : 0xffË<< 
GTX_DRP_OFFSET_CPLL_FBDIV_45
;

474 c⁄° 
uöt16_t
 
fbDiv
 = (
bw
 =
BW_1_62_GBPS
 ? 1 :

475 
bw
 =
BW_2_70_GBPS
 ? 2 : 0xffË<< 
GTX_DRP_OFFSET_CPLL_FBDIV
;

476 
	`üs£π_TOP_COMPONENT_2
(
fbDiv45
 !(0xf‡<< 
GTX_DRP_OFFSET_CPLL_FBDIV_45
Ë&& 
fbDiv
 != 0xff,

477 
BB_TOP_DP_INVALID_BANDWIDTH
,

478 
bw
,

479 
__LINE__
);

480 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_CPLL_REFCLK_DIV
,

481 
ªfClkDiv
 | 
fbDiv45
 | 
fbDiv
,

482 
GTX_DRP_MASK_CPLL_REFCLK_DIV


483 | 
GTX_DRP_MASK_CPLL_FBDIV_45


484 | 
GTX_DRP_MASK_CPLL_FBDIV
,

485 
œ√Mask
);

486 
	}
}

498 
	$c⁄figuªComm⁄TxOutDiv
(
MaöLökB™dwidth
 
bw
, 
bb_t›_dΩ_í_mask
 
œ√Mask
)

501 c⁄° 
uöt16_t
 
txOutDiv
 = (
bw
 =
BW_5_40_GBPS
 ? 0 : 1Ë<< 
GTX_DRP_OFFSET_TXOUT_DIV
;

502 c⁄° 
uöt16_t
 
rxOutDiv
 = (
bw
 =
BW_5_40_GBPS
 ? 0 : 1Ë<< 
GTX_DRP_OFFSET_RXOUT_DIV
;

503 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_TXOUT_DIV
,

504 
txOutDiv
 | 
rxOutDiv
,

505 
GTX_DRP_MASK_TXOUT_DIV
 | 
GTX_DRP_MASK_RXOUT_DIV
,

506 
œ√Mask
);

507 
	}
}

518 
	$c⁄figuªSour˚TxD©aWidth
(
bb_t›_dΩ_í_mask
 
œ√Mask
)

524 c⁄° 
uöt16_t
 
txI¡D©awidth
 = 
GTX_DRP_VAL_TX_INT_DATAWIDTH_4_BYTE_INTERNAL_DATAPATH
;

525 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_TX_INT_DATAWIDTH
,

526 
txI¡D©awidth
,

527 
GTX_DRP_MASK_TX_INT_DATAWIDTH
,

528 
œ√Mask
);

532 c⁄° 
uöt16_t
 
txD©aWidth
 = 
GTX_DRP_VAL_TX_DATA_WIDTH_40_BIT_PORT
;

534 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_TX_DATA_WIDTH
,

535 
txD©aWidth
,

536 
GTX_DRP_MASK_TX_DATA_WIDTH
,

537 
œ√Mask
);

539 
	}
}

550 
	$c⁄figuªSökRxD©aWidth
(
bb_t›_dΩ_í_mask
 
œ√Mask
)

556 c⁄° 
uöt16_t
 
rxI¡D©awidth
 = 
GTX_DRP_VAL_RX_INT_DATAWIDTH_4_BYTE_INTERNAL_DATAPATH
;

557 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_RX_INT_DATAWIDTH
,

558 
rxI¡D©awidth
,

559 
GTX_DRP_MASK_RX_INT_DATAWIDTH
,

560 
œ√Mask
);

564 c⁄° 
uöt16_t
 
rxD©aWidth
 = 
GTX_DRP_VAL_RX_DATA_WIDTH_40_BIT_PORT
;

565 
	`bb_t›_dpDΩRódModWrôeK7
(
GTX_DRP_ADDR_RX_DATA_WIDTH
,

566 
rxD©aWidth
,

567 
GTX_DRP_MASK_RX_DATA_WIDTH
,

568 
œ√Mask
);

570 
	}
}

581 
	$c⁄figuªGtTxOutClkMmcmGtx
(
MmcmTxClkOutEncodög
 
ícodög
)

583 c⁄° 
bb_t›_dΩ_í_mask
 
mask
 = { .
bf
.
dp_gt0_txout˛k_mmcm
 = 1};

584 
uöt16_t
 
mmcmVÆue
 = 0;

585 
uöt8_t
 
mmcmWrôes
 = 0;

586 
mmcmWrôes
 = 0; mmcmWrôe†< 
numMmcmWrôesGtx
; mmcmWrites++)

588 
ícodög
)

590 
MMCM_TX_CLK_OUT_ENCODING_RBR_40B
:

591 
mmcmVÆue
 = 
mmcmGtx
[
mmcmWrôes
].
rbr_40b
;

593 
MMCM_TX_CLK_OUT_ENCODING_HBR_40B
:

594 
mmcmVÆue
 = 
mmcmGtx
[
mmcmWrôes
].
hbr_40b
;

596 
MMCM_TX_CLK_OUT_ENCODING_HBR2_40B
:

597 
mmcmVÆue
 = 
mmcmGtx
[
mmcmWrôes
].
hbr2_40b
;

603 
	`bb_t›_dpDΩRódModWrôeK7
(
mmcmGtx
[
mmcmWrôes
].
addr
,

604 
mmcmVÆue
,

605 
BB_TOP_DRP_DRP_READ_DATA_DRP_DO_MASK
,

606 
mask
);

608 
	}
}

619 
boﬁ
 
	$bb_t›_dpGŸClockRecovîyK7
()

621  
gtx
.
rx
->
rx_°©us
.
bf
.
gt0_rxout˛k_lock
;

622 
	}
}

633 
boﬁ
 
	$bb_t›_dpGŸSymbﬁLockK7
(
L™eCou¡
 
lc
)

636 c⁄° 
bb_t›_rx_byã_Æign_°©us
 
ÆignSètus
 = { .
dw
 = 
gtx
.
rx
->
rx_byã_Æign_°©us
.dw };

639  (
lc
 > 0 ? 
ÆignSètus
.
bf
.
gt0_rxbyãißlig√d
 : 
Ál£
)&&

640 (
lc
 > 1 ? 
ÆignSètus
.
bf
.
gt1_rxbyãißlig√d
 : 
åue
) &&

641 (
lc
 > 2 ? 
ÆignSètus
.
bf
.
gt2_rxbyãißlig√d
 : 
åue
) &&

642 (
lc
 > 3 ? 
ÆignSètus
.
bf
.
gt3_rxbyãißlig√d
 : 
åue
);

643 
	}
}

656 
	$bb_t›_dpSëVﬁègeSwögK7
(
VﬁègeSwög
 
vs
[4], 
uöt8_t
 
œ√Mask
)

661 c⁄° 
uöt8_t
 
dpToGtx
[] = { 0x2, 0x5, 0x8, 0xF };

664 
bb_t›_tx_diff_˘æ
 
txDiffCål
 = { .
dw
 = 
gtx
.
tx
->
tx_diff_˘æ
.dw };

666 i‡(
œ√Mask
 & (1 << 0))

668 
txDiffCål
.
bf
.
gt0_txdiff˘æ
 = 
dpToGtx
[
vs
[0]];

670 i‡(
œ√Mask
 & (1 << 1))

672 
txDiffCål
.
bf
.
gt1_txdiff˘æ
 = 
dpToGtx
[
vs
[1]];

674 i‡(
œ√Mask
 & (1 << 2))

676 
txDiffCål
.
bf
.
gt2_txdiff˘æ
 = 
dpToGtx
[
vs
[2]];

678 i‡(
œ√Mask
 & (1 << 3))

680 
txDiffCål
.
bf
.
gt3_txdiff˘æ
 = 
dpToGtx
[
vs
[3]];

683 
gtx
.
tx
->
tx_diff_˘æ
.
dw
 = 
txDiffCål
.dw;

684 
	`ûog_TOP_COMPONENT_2
(
ILOG_DEBUG
, 
BB_TOP_DP_SET_VOLTAGE_SWING
,

685 (
vs
[0] << 0) | (vs[1] << 8) | (vs[2] << 16) | (vs[3] << 24),

686 
txDiffCål
.
dw
);

687 
	}
}

701 
	$bb_t›_dpSëPªEmphasisK7
(
PªEmphasis
 
≥
[4], 
uöt8_t
 
œ√Mask
)

706 c⁄° 
uöt8_t
 
dpToGtx
[] = { 0x00, 0x0D, 0x14, 0x1B };

709 
bb_t›_tx_po°_curs‹
 
txPo°Curs‹
 = { .
dw
 = 
gtx
.
tx
->
tx_po°_curs‹
.dw };

711 i‡(
œ√Mask
 & (1 << 0))

713 
txPo°Curs‹
.
bf
.
gt0_txpo°curs‹
 = 
dpToGtx
[
≥
[0]];

715 i‡(
œ√Mask
 & (1 << 1))

717 
txPo°Curs‹
.
bf
.
gt1_txpo°curs‹
 = 
dpToGtx
[
≥
[1]];

719 i‡(
œ√Mask
 & (1 << 2))

721 
txPo°Curs‹
.
bf
.
gt2_txpo°curs‹
 = 
dpToGtx
[
≥
[2]];

723 i‡(
œ√Mask
 & (1 << 3))

725 
txPo°Curs‹
.
bf
.
gt3_txpo°curs‹
 = 
dpToGtx
[
≥
[3]];

728 
gtx
.
tx
->
tx_po°_curs‹
.
dw
 = 
txPo°Curs‹
.dw;

729 
	`ûog_TOP_COMPONENT_2
(
ILOG_DEBUG
, 
BB_TOP_DP_SET_PREEMPHASIS
,

730 (
≥
[0] << 0) | (pe[1] << 8) | (pe[2] << 16) | (pe[3] << 24),

731 
txPo°Curs‹
.
dw
);

732 
	}
}

745 
	$bb_t›_dpPªCh¨geMaöLökK7
(
boﬁ
 
ch¨ge
, 
L™eCou¡
 
lc
)

747 
	`ûog_TOP_COMPONENT_2
(
ILOG_MAJOR_EVENT
, 
BB_TOP_DP_PRECHARGE
, 
ch¨ge
, 
lc
);

749 
bb_t›_tx_misc_˘æ
 
miscCål
 = { .
dw
 = 
gtx
.
tx
->
tx_misc_˘æ
.dw };

752 i‡(
lc
 > 0)

754 
miscCål
.
bf
.
gt0_txöhibô
 = 
ch¨ge
;

756 i‡(
lc
 > 1)

758 
miscCål
.
bf
.
gt1_txöhibô
 = 
ch¨ge
;

760 i‡(
lc
 > 2)

762 
miscCål
.
bf
.
gt2_txöhibô
 = 
ch¨ge
;

764 i‡(
lc
 > 3)

766 
miscCål
.
bf
.
gt3_txöhibô
 = 
ch¨ge
;

769 
gtx
.
tx
->
tx_misc_˘æ
.
dw
 = 
miscCål
.dw;

770 
	}
}

782 
uöt16_t
 
	$bb_t›_dpDΩRódK7
(
uöt16_t
 
dΩAddr
, 
bb_t›_dΩ_í_mask
 
dΩEnMask
)

785 
	`üs£π_TOP_COMPONENT_1
(
dΩEnMask
.
dw
 =
BB_TOP_DRP_DRP_EN_MASK_DP_GT0
 ||

786 
dΩEnMask
.
dw
 =
BB_TOP_DRP_DRP_EN_MASK_DP_GT1
 ||

787 
dΩEnMask
.
dw
 =
BB_TOP_DRP_DRP_EN_MASK_DP_GT2
 ||

788 
dΩEnMask
.
dw
 =
BB_TOP_DRP_DRP_EN_MASK_DP_GT3
 ||

789 
dΩEnMask
.
dw
 =
BB_TOP_DRP_DRP_EN_MASK_DP_GT0_TXOUTCLK_MMCM
,

790 
BB_TOP_DP_INVALID_DRP_READ
,

791 
dΩEnMask
.
dw
);

794 c⁄° 
bb_t›_dΩ_˘æ
 
dΩCål
 = { .
bf
 = {

795 .
dΩ_addr
 = 
dΩAddr
,

796 .
dΩ_we
 = 0

798 
dΩ
->
dΩ_˘æ
.
dw
 = 
dΩCål
.dw;

801 (
dΩ
->
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_í_mask_READMASK
) != 0);

804 
dΩ
->
dΩ_í_mask
.
dw
 = 
dΩEnMask
.dw;

807 (
dΩ
->
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_í_mask_READMASK
) != 0);

810  
dΩ
->
dΩ_ªad_d©a
.
bf
.
dΩ_do
;

811 
	}
}

825 
	$bb_t›_dpDΩRódModWrôeK7
(
uöt16_t
 
dΩAddr
,

826 
uöt16_t
 
wrôeD©a
,

827 
uöt16_t
 
wrôeMask
,

828 
bb_t›_dΩ_í_mask
 
dΩEnMask
)

836 
	`COMPILE_TIME_ASSERT
(

837 
bb_t›_dΩ_í_mask_WRITEMASK
 == 0xFF &&

838 
BB_TOP_DRP_DRP_EN_MASK_DP_GT0
 == 0x01 &&

839 
BB_TOP_DRP_DRP_EN_MASK_DP_GT0_TXOUTCLK_MMCM
 == 0x10

841 
uöt32_t
 
i
 = 
BB_TOP_DRP_DRP_EN_MASK_DP_GT0
;

842 
i
 <
BB_TOP_DRP_DRP_EN_MASK_DP_GT0_TXOUTCLK_MMCM
;

843 
i
 <<= 1)

845 i‡(
dΩEnMask
.
dw
 & 
i
)

848 c⁄° 
bb_t›_dΩ_í_mask
 
ªadMask
 = { .
dw
 = 
i
 };

849 c⁄° 
uöt16_t
 
ªadVÆ
 = 
	`bb_t›_dpDΩRódK7
(
dΩAddr
, 
ªadMask
);

852 c⁄° 
bb_t›_dΩ_˘æ
 
dΩCål
 = { .
bf
 = {

853 .
dΩ_addr
 = 
dΩAddr
,

854 .
dΩ_we
 = 1,

855 .
dΩ_di
 = (
ªadVÆ
 & ~
wrôeMask
Ë| 
wrôeD©a


858 
dΩ
->
dΩ_˘æ
.
dw
 = 
dΩCål
.dw;

861 (
dΩ
->
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_í_mask_READMASK
) != 0);

864 
dΩ
->
dΩ_í_mask
.
dw
 = 
dΩEnMask
.dw;

867 
	}
}

	@components/top/src/bb_top_ge.c

24 
	~<bb_t›_ge.h
>

25 
	~<bb_t›_a7_ªgs.h
>

26 
	~<timög_timîs.h
>

27 
	~"bb_t›_log.h
"

28 
	~<moduÀ_addªs£s_ªgs.h
>

31 
	#GE_RESET_CHECK_TIME
 3000

32 
	#GE_ALIVE_CHECK_TIME
 3000

33 

	)

35 
	eGe_O≥øti⁄Mode


37 
	mGE_OPERATION_RESET
,

38 
	mGE_OPERATION_RUN
,

39 
	mGE_OPERATION_BOOTLOAD
,

43 
	$bb_t›_≠∂yGEBoŸSñProgøm
(
boﬁ
 
¥ogøm
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

44 
	$bb_t›_£tGeU¨tSœve
(
GeU¨tSœveSñ
 
£l
Ë
	`__©åibuã__
((
	`£˘i⁄
(".atext")));

45 
	`bb_t›_a7_C⁄åﬁGeD©aPhy
(
boﬁ
 
ª£t
);

46 
	`bb_t›_a7_≠∂yGEVbusDëe˘
(
boﬁ
 
£tVbus
);

47 
	$ª£tW©chdogH™dÀr
(Ë
	`__©åibuã__
 ((
	`£˘i⁄
(".atext")));

48 
	$runW©chdogH™dÀr
(Ë
	`__©åibuã__
 ((
	`£˘i⁄
(".atext")));

51 vﬁ©ûê
bb_t›_s
* 
bb_t›_ªgi°îs
;

52 
	sBB_TOP_GE_C⁄ãxt


54 
TIMING_TimîH™dÀrT
 
geW©chdogRe£tTimî
;

55 
TIMING_TimîH™dÀrT
 
geW©chdogRu¬ögTimî
;

56 
W©chdogCÆlback
 
ª£tW©chdogCÆlback
;

57 
W©chdogCÆlback
 
runW©chdogCÆlback
;

58 
Ge_O≥øti⁄Mode
 
geO≥øti⁄Mode
;

59 } 
bbT›GeC⁄ãxt
;

75 
	$bb_t›_ge_Inô
()

77 
bb_t›_ªgi°îs
 = (vﬁ©ûê
bb_t›_s
*Ë
bb_chù_bb_t›_s_ADDRESS
;

79 
bbT›GeC⁄ãxt
.
geW©chdogRe£tTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

80 
ª£tW©chdogH™dÀr
,

81 
Ál£
,

82 
GE_RESET_CHECK_TIME
);

84 
bbT›GeC⁄ãxt
.
geW©chdogRu¬ögTimî
 = 
	`TIMING_TimîRegi°îH™dÀr
(

85 
runW©chdogH™dÀr
,

86 
Ál£
,

87 
GE_ALIVE_CHECK_TIME
);

89 
	}
}

98 
	$bb_t›_AµlyGEI¡îru±
(
boﬁ
 
£tI¡
)

101 
bb_t›_ªgi°îs
->
ge_˘æ
.
bf
.
öt_n
 = !
£tI¡
;

102 
	}
}

111 
	$bb_t›_SëGEToRe£tMode
()

113 #i‚de‡
BB_ROM


114 
	`ûog_TOP_COMPONENT_0
(
ILOG_USER_LOG
, 
BB_TOP_HOLD_GE_RESET
);

116 
bbT›GeC⁄ãxt
.
geO≥øti⁄Mode
 = 
GE_OPERATION_RESET
;

118 
	`bb_t›_AµlyGERe£t
(
åue
);

119 
	`bb_t›_St›GEW©chdogRe£tTimî
();

120 
	`bb_t›_St›GEW©chdogRu¬ögTimî
();

121 
	}
}

130 
	$bb_t›_SëGEToRunMode
(
W©chdogCÆlback
 
ª£tH™dÀr
, W©chdogCÆlback 
runH™dÀr
)

132 #i‚de‡
BB_ROM


133 
	`üs£π_TOP_COMPONENT_0
(
bbT›GeC⁄ãxt
.
geO≥øti⁄Mode
 !
GE_OPERATION_RUN
, 
BB_TOP_GE_RUN_AGAIN
);

134 
	`ûog_TOP_COMPONENT_0
(
ILOG_USER_LOG
, 
BB_TOP_GE_RUN
);

137 
bbT›GeC⁄ãxt
.
geO≥øti⁄Mode
 = 
GE_OPERATION_RUN
;

139 
	`bb_t›_≠∂yGEBoŸSñProgøm
(
Ál£
);

140 
	`bb_t›_£tGeU¨tSœve
(
GE_UART_SLAVE_SEL_GE_UART
);

144 
	`bb_t›_AµlyGERe£t
(
Ál£
);

146 
bbT›GeC⁄ãxt
.
ª£tW©chdogCÆlback
 = 
ª£tH™dÀr
;

147 
bbT›GeC⁄ãxt
.
runW©chdogCÆlback
 = 
runH™dÀr
;

149 
	`TIMING_TimîSèπ
(
bbT›GeC⁄ãxt
.
geW©chdogRe£tTimî
);

150 
	}
}

159 
	$bb_t›_SëGEToBoŸlﬂdîMode
()

161 #i‚de‡
BB_ROM


162 
	`ûog_TOP_COMPONENT_0
(
ILOG_USER_LOG
, 
BB_TOP_GE_BOOTLOADER
);

163 
bbT›GeC⁄ãxt
.
geO≥øti⁄Mode
 = 
GE_OPERATION_BOOTLOAD
;

165 
	`bb_t›_≠∂yGEBoŸSñProgøm
(
åue
);

166 
	`bb_t›_£tGeU¨tSœve
(
GE_UART_SLAVE_SEL_GE_UART
);

168 
	`bb_t›_St›GEW©chdogRe£tTimî
();

169 
	`bb_t›_St›GEW©chdogRu¬ögTimî
();

173 
	`bb_t›_AµlyGERe£t
(
Ál£
);

174 
	}
}

183 
	$bb_t›_St›GEW©chdogRe£tTimî
()

185 
	`TIMING_TimîSt›
(
bbT›GeC⁄ãxt
.
geW©chdogRe£tTimî
);

186 
bbT›GeC⁄ãxt
.
ª£tW©chdogCÆlback
 = 
NULL
;

187 
	}
}

196 
	$bb_t›_St›GEW©chdogRu¬ögTimî
()

198 
	`TIMING_TimîSt›
(
bbT›GeC⁄ãxt
.
geW©chdogRu¬ögTimî
);

199 
bbT›GeC⁄ãxt
.
runW©chdogCÆlback
 = 
NULL
;

200 
	}
}

209 
	$bb_t›_SèπGEW©chdogRu¬ögTimî
()

212 if(
bbT›GeC⁄ãxt
.
geO≥øti⁄Mode
 =
GE_OPERATION_RUN
)

214 
	`TIMING_TimîSèπ
(
bbT›GeC⁄ãxt
.
geW©chdogRu¬ögTimî
);

216 
	}
}

226 
	$bb_t›_C⁄åﬁGeD©aPhy
(
boﬁ
 
íabÀ
)

228 #ifde‡
PLATFORM_A7


229 
	`bb_t›_a7_C⁄åﬁGeD©aPhy
(
íabÀ
);

231 #ifde‡
PLATFORM_K7


232 
	`bb_t›_k7_AµlyRe£tPhyRx
(
ª£t
);

234 
	}
}

243 
	$bb_t›_AµlyGEVbusDëe˘
(
boﬁ
 
£tVbus
)

245 #ifde‡
PLATFORM_A7


246 
	`bb_t›_a7_≠∂yGEVbusDëe˘
(
£tVbus
);

248 
	}
}

257 
	$bb_t›_AµlyGERe£t
(
boﬁ
 
ª£t
)

260 
bb_t›_ªgi°îs
->
ge_˘æ
.
bf
.
r°_b
 = !
ª£t
;

261 
	}
}

270 
boﬁ
 
	$bb_t›_isGERe£tOn
()

273  !(
bb_t›_ªgi°îs
->
ge_˘æ
.
bf
.
r°_b
);

274 
	}
}

287 
	$bb_t›_≠∂yGEBoŸSñProgøm
(
boﬁ
 
¥ogøm
)

290 
bb_t›_ªgi°îs
->
ge_˘æ
.
bf
.
boŸ_£l
 = !
¥ogøm
;

291 
	}
}

301 
	$bb_t›_£tGeU¨tSœve
(
GeU¨tSœveSñ
 
£l
)

303 
bb_t›_ªgi°îs
->
u¨t_˘æ
.
bf
.
ge_u¨t_£l
 = 
£l
;

304 
	}
}

314 
	$bb_t›_a7_C⁄åﬁGeD©aPhy
(
boﬁ
 
íabÀ
)

316 i‡(
íabÀ
)

319 
bb_t›_ªgi°îs
->
ge_˘æ
.
bf
.
˛m_tx_˛k_í
 = 1;

320 
bb_t›_ªgi°îs
->
ge_˘æ
.
bf
.
ªf_˛k_í
 = 1;

324 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
ge_˛m_rx_r°
 = 0;

325 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
ge_˛m_tx_r°
 = 0;

331 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
ge_˛m_tx_r°
 = 1;

332 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
ge_˛m_rx_r°
 = 1;

335 
bb_t›_ªgi°îs
->
ge_˘æ
.
bf
.
˛m_tx_˛k_í
 = 0;

336 
bb_t›_ªgi°îs
->
ge_˘æ
.
bf
.
ªf_˛k_í
 = 0;

338 
	}
}

347 
	$bb_t›_a7_≠∂yGEVbusDëe˘
(
boﬁ
 
£tVbus
)

349 
bb_t›_ªgi°îs
->
ge_˘æ
.
bf
.
vbus_dë
 = 
£tVbus
;

350 
	}
}

359 
	$ª£tW©chdogH™dÀr
()

361 #i‚de‡
BB_ROM


362 
	`üs£π_TOP_COMPONENT_0
(
bbT›GeC⁄ãxt
.
ª£tW©chdogCÆlback
 !
NULL
, 
BB_TOP_GE_NULL_RESET_WATCHDOG_CALLBACK
);

363 
bbT›GeC⁄ãxt
.
	`ª£tW©chdogCÆlback
();

365 
	}
}

374 
	$runW©chdogH™dÀr
()

376 #i‚de‡
BB_ROM


377 
	`üs£π_TOP_COMPONENT_0
(
bbT›GeC⁄ãxt
.
runW©chdogCÆlback
 !
NULL
, 
BB_TOP_GE_NULL_RUN_WATCHDOG_CALLBACK
);

378 
bbT›GeC⁄ãxt
.
	`runW©chdogCÆlback
();

380 
	}
}

	@components/top/src/bb_top_k7.c

23 #ifde‡
PLATFORM_K7


25 
	~<›ti⁄s.h
>

26 
	~<bb_t›.h
>

27 
	~<bb_t›_k7.h
>

28 
	~<bb_t›_k7_ªgs.h
>

29 
	~<bb_c‹e.h
>

30 
	~"bb_t›_log.h
"

31 
	~<moduÀ_addªs£s_ªgs.h
>

40 vﬁ©ûê
bb_t›_s
* 
	gbb_t›_ªgi°îs
;

55 
	$bb_t›_k7_Inô
()

57 
bb_t›_ªgi°îs
 = (vﬁ©ûê
bb_t›_s
*Ë
bb_chù_bb_t›_s_ADDRESS
;

58 
	}
}

68 
	$bb_t›_k7_n⁄CpuModuÀRe£t
()

70 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
phy_rx_r°
 = 1;

71 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
phy_gtx_r°
 = 1;

72 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
uÕ_phy_r°
 = 1;

73 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
uÕ_c‹e_r°
 = 1;

74 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dp_sök_r°
 = 1;

75 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dp_sour˚_r°
 = 1;

76 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
mˇ_rx_r°
 = 1;

77 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
mˇ_tx_r°
 = 1;

78 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
l3_rx_r°
 = 1;

79 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
l3_tx_r°
 = 1;

80 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dŒ_rx_r°
 = 1;

81 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
dŒ_tx_r°
 = 1;

82 
	}
}

93 
	$bb_t›_AµlyRe£tI2cSwôch
(
boﬁ
 
ª£t
)

96 
bb_t›_ªgi°îs
->
kc705
.
s
.
r°_˘æ
.
bf
.
i2c_mux_r°_n
 = 
ª£t
 ? 0 : 1;

97 
	}
}

108 
	$bb_t›_LökSñ
(
BbT›LökSñ
 
lök_£l
)

110 
bb_t›_ªgi°îs
->
lök_˘æ
.
bf
.
lök_£l
 =Üink_sel;

111 
	}
}

122 
boﬁ
 
	$bb_t›_k7_isLökSñRxaui
()

124  (
bb_t›_ªgi°îs
->
kc705
.
s
.
gpio_dù_sw11
.
bf
.
lök_£l
 == 1);

125 
	}
}

136 
boﬁ
 
	$bb_t›_k7_isBﬂrdRevZîo
()

138  (
bb_t›_ªgi°îs
->
kc705
.
s
.
gpio_dù_sw11
.
bf
.
bﬂrd_ªv
 == 0);

139 
	}
}

150 
	$bb_t›_k7_TriSèãI2cS˛
(
boﬁ
 
åiSèã
)

152 
bb_t›_ªgi°îs
->
i2c_˘æ
.
bf
.
s˛_åi
 = 
åiSèã
 ? 1 : 0;

153 
	}
}

164 
	$bb_t›_k7_SëMdioSœve
(
MdioMa°îSœveSñ
 
ma°îSœveSñ
)

166 
bb_t›_ªgi°îs
->
mdio_˘æ
.
bf
.
¶ave_£l
 = 
ma°îSœveSñ
;

167 
	}
}

179 
	$bb_t›_k7_F‹˚SëMdioSœve
(
uöt8_t
 
ma°îSœveSñ
)

181 
bb_t›_ªgi°îs
->
mdio_˘æ
.
bf
.
¶ave_£l
 = 
ma°îSœveSñ
;

182 
	}
}

194 
	$bb_t›_AµlyRe£tHpcI2cGpio
(
boﬁ
 
ª£t
)

196 
bb_t›_ªgi°îs
->
dev7_fmc_hpc
.
s
.
gpio
.
bf
.
i2c_r°_n
 = 
ª£t
 ? 0 : 1;

197 
	}
}

209 
	$bb_t›_AµlyRe£tLpcI2cGpio
(
boﬁ
 
ª£t
)

211 
bb_t›_ªgi°îs
->
usb32_fmc_Õc
.
s
.
gpio
.
bf
.
fmc_r°
 = 
ª£t
 ? 1 : 0;

212 
	}
}

223 
	$bb_t›_AµlyRe£tDejôãrChù
(
boﬁ
 
ª£t
)

225 
bb_t›_ªgi°îs
->
kc705
.
s
.
r°_˘æ
.
bf
.
si5326_r°_n
 = 
ª£t
 ? 0 : 1;

226 
	}
}

237 
	$bb_t›_k7_AµlyRe£tEthî√tPhy
(
boﬁ
 
ª£t
)

239 
bb_t›_ªgi°îs
->
kc705
.
s
.
r°_˘æ
.
bf
.
m88e1111_r°_n
 = 
ª£t
 ? 0 : 1;

240 
	}
}

251 
	$bb_t›_k7_AµlyRe£tPhyRx
(
boﬁ
 
ª£t
)

253 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
phy_rx_r°
 = 
ª£t
 ? 1 : 0;

254 
	}
}

265 
	$bb_t›_k7_AµlyRe£tPhyGtx
(
boﬁ
 
ª£t
)

267 
bb_t›_ªgi°îs
->
grm
.
s
.
so·_r°_˘æ
.
bf
.
phy_gtx_r°
 = 
ª£t
 ? 1 : 0;

268 
	}
}

278 
	$bb_t›_k7_SëRéI2cMuxP‹t
(
I2cP‹tSñ
 
ma°îSœveSñ
)

281 
bb_t›_ªgi°îs
->
i2c_˘æ
.
bf
.
¶ave_£l
 = 
ma°îSœveSñ
;

282 
	}
}

292 
uöt8_t
 
	$bb_t›_GëHpcId
()

294 
uöt8_t
 
id
 = 0xFF;

295 
id
 = 
bb_t›_ªgi°îs
->
kc705
.
s
.
fmc_hpc_id
.
bf
.id ;

296  
id
;

297 
	}
}

307 
uöt8_t
 
	$bb_t›_GëLpcId
()

309 
uöt8_t
 
id
 = 0xFF;

310 
id
 = 
bb_t›_ªgi°îs
->
kc705
.
s
.
fmc_Õc_id
.
bf
.id;

311  
id
;

312 
	}
}

322 
	$bb_t›_k7_AµlyE«bÀDp159
(
boﬁ
 
íabÀ
)

324 i‡(
íabÀ
)

326 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
¢65dp159_c⁄åﬁ
.
bf
.
íabÀ
 = 1;

330 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
¢65dp159_c⁄åﬁ
.
bf
.
íabÀ
 = 0;

332 
	}
}

342 
	$bb_t›_k7_AµlyE«bÀDp130
(
boﬁ
 
íabÀ
)

344 i‡(
íabÀ
)

346 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
¢75dp130_c⁄åﬁ
.
bf
.
íabÀ
 = 1;

350 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
¢75dp130_c⁄åﬁ
.
bf
.
íabÀ
 = 0;

352 
	}
}

362 
	$bb_t›_k7_AµlyRe£tDp130
(
boﬁ
 
ª£t
)

364 i‡(
ª£t
)

366 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
¢75dp130_c⁄åﬁ
.
bf
.
r°
 = 1;

370 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
¢75dp130_c⁄åﬁ
.
bf
.
r°
 = 0;

372 
	}
}

382 
	$bb_t›_AµlyE«bÀDejôãrI¡îru±
(
boﬁ
 
íabÀ
)

384 i‡(
íabÀ
)

386 
bb_t›_ªgi°îs
->
úq
.
s
.
íabÀ
.
bf
.
si5326_öt_Æm
 = 1;

390 
bb_t›_ªgi°îs
->
úq
.
s
.
íabÀ
.
bf
.
si5326_öt_Æm
 = 0;

392 
	}
}

402 
uöt16_t
 
	$bb_t›_k7_dΩRód
(
uöt16_t
 
dΩAddr
, 
uöt8_t
 
dΩEnMask
)

405 
	`üs£π_TOP_COMPONENT_1
(

406 
dΩEnMask
 =
BB_TOP_DRP_DRP_EN_MASK_DP_GT0
 ||

407 
dΩEnMask
 =
BB_TOP_DRP_DRP_EN_MASK_DP_GT1
 ||

408 
dΩEnMask
 =
BB_TOP_DRP_DRP_EN_MASK_DP_GT2
 ||

409 
dΩEnMask
 =
BB_TOP_DRP_DRP_EN_MASK_DP_GT3
 ||

410 
dΩEnMask
 =
BB_TOP_DRP_DRP_EN_MASK_DP_GT0_TXOUTCLK_MMCM
 ||

411 
dΩEnMask
 =
BB_TOP_DRP_DRP_EN_MASK_GT_COMMON_LINK
 ||

412 
dΩEnMask
 =
BB_TOP_DRP_DRP_EN_MASK_RXAUI_GT0
 ||

413 
dΩEnMask
 =
BB_TOP_DRP_DRP_EN_MASK_RXAUI_GT1
,

414 
BB_TOP_DRP_READ_INVALID_MASK
,

415 
dΩEnMask
);

418 c⁄° 
bb_t›_dΩ_˘æ
 
dΩCål
 = { .
bf
 = {

419 .
dΩ_addr
 = 
dΩAddr
,

420 .
dΩ_we
 = 0

422 
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_˘æ
.
dw
 = 
dΩCål
.dw;

425 (
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_í_mask_READMASK
) != 0);

428 
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_í_mask
.
dw
 = 
dΩEnMask
;

431 (
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_í_mask
.
dw
 & 
bb_t›_dΩ_í_mask_READMASK
) != 0);

434  
bb_t›_ªgi°îs
->
dΩ
.
s
.
dΩ_ªad_d©a
.
bf
.
dΩ_do
;

435 
	}
}

437 #ifde‡
PLATFORM_A7_K7


445 
	$bb_t›_£tDpGçRxClkCål
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçSysClkSñCfg
 
˛kCfg
)

447 
œ√Sñ
)

449 
DP_GTP_GT0_SYS_LANE_SEL
:

450 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt0_rxsys˛k£l
 = 
˛kCfg
;

452 
DP_GTP_GT1_SYS_LANE_SEL
:

453 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt1_rxsys˛k£l
 = 
˛kCfg
;

455 
DP_GTP_GT2_SYS_LANE_SEL
:

456 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt2_rxsys˛k£l
 = 
˛kCfg
;

458 
DP_GTP_GT3_SYS_LANE_SEL
:

459 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_˛k_˘æ
.
bf
.
gt3_rxsys˛k£l
 = 
˛kCfg
;

465 
	}
}

475 
	$bb_t›_£tDpGçTxClkCål
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçSysClkSñCfg
 
˛kCfg
)

477 
œ√Sñ
)

479 
DP_GTP_GT0_SYS_LANE_SEL
:

480 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt0_txsys˛k£l
 = 
˛kCfg
;

482 
DP_GTP_GT1_SYS_LANE_SEL
:

483 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt1_txsys˛k£l
 = 
˛kCfg
;

485 
DP_GTP_GT2_SYS_LANE_SEL
:

486 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt2_txsys˛k£l
 = 
˛kCfg
;

488 
DP_GTP_GT3_SYS_LANE_SEL
:

489 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_˛k_˘æ
.
bf
.
gt3_txsys˛k£l
 = 
˛kCfg
;

495 
	}
}

506 
	$bb_t›_£tDpGtxC∂lRefClkSñ
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
DpGtxC∂lRefSñ
 
ªfClkSñ
)

508 
œ√Sñ
)

510 
DP_GTX_GT0_SYS_LANE_SEL
:

511 
bb_t›_ªgi°îs
->
dp_gtx_comm⁄
.
s
.
˝Œ_˘æ
.
bf
.
gt0_˝Œªf˛k£l
 = 
ªfClkSñ
;

513 
DP_GTX_GT1_SYS_LANE_SEL
:

514 
bb_t›_ªgi°îs
->
dp_gtx_comm⁄
.
s
.
˝Œ_˘æ
.
bf
.
gt1_˝Œªf˛k£l
 = 
ªfClkSñ
;

516 
DP_GTX_GT2_SYS_LANE_SEL
:

517 
bb_t›_ªgi°îs
->
dp_gtx_comm⁄
.
s
.
˝Œ_˘æ
.
bf
.
gt2_˝Œªf˛k£l
 = 
ªfClkSñ
;

519 
DP_GTX_GT3_SYS_LANE_SEL
:

520 
bb_t›_ªgi°îs
->
dp_gtx_comm⁄
.
s
.
˝Œ_˘æ
.
bf
.
gt3_˝Œªf˛k£l
 = 
ªfClkSñ
;

526 
	}
}

536 
	$bb_t›_≠∂yGtxC∂lPowîDown
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
boﬁ
 
powîDn
)

538 
œ√Sñ
)

540 
DP_GTX_GT0_SYS_LANE_SEL
:

541 
bb_t›_ªgi°îs
->
dp_gtx_comm⁄
.
s
.
˝Œ_˘æ
.
bf
.
gt0_˝Œpd
 = 
powîDn
 ? 1 : 0;

543 
DP_GTX_GT1_SYS_LANE_SEL
:

544 
bb_t›_ªgi°îs
->
dp_gtx_comm⁄
.
s
.
˝Œ_˘æ
.
bf
.
gt1_˝Œpd
 = 
powîDn
 ? 1 : 0;

546 
DP_GTX_GT2_SYS_LANE_SEL
:

547 
bb_t›_ªgi°îs
->
dp_gtx_comm⁄
.
s
.
˝Œ_˘æ
.
bf
.
gt2_˝Œpd
 = 
powîDn
 ? 1 : 0;

549 
DP_GTX_GT3_SYS_LANE_SEL
:

550 
bb_t›_ªgi°îs
->
dp_gtx_comm⁄
.
s
.
˝Œ_˘æ
.
bf
.
gt3_˝Œpd
 = 
powîDn
 ? 1 : 0;

556 
	}
}

559 #ifde‡
PLATFORM_A7_K7


567 
boﬁ
 
	$bb_t›_isGçPŒRefClkLo°
(
DpGçPŒClkSñ
 
∂lClkSñ
)

569 i‡(
∂lClkSñ
 =
DP_GTP_PLL_CLK_SEL_PLL0
)

571  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l0ªf˛klo°
 == 1);

575  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l1ªf˛klo°
 == 1);

577 
	}
}

587 
boﬁ
 
	$bb_t›_isGçPŒLock
(
DpGçPŒClkSñ
 
∂lClkSñ
)

589 i‡(
∂lClkSñ
 =
DP_GTP_PLL_CLK_SEL_PLL0
)

591  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l0lock
 == 1);

595  (
bb_t›_ªgi°îs
->
dp_gç_comm⁄
.
s
.
∂l_°©us
.
bf
.
∂l1lock
 == 1);

597 
	}
}

608 
	$bb_t›_£tDpGtxRxMiscCålLpm
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
boﬁ
 
íLpm
)

610 
œ√Sñ
)

612 
DP_GTX_GT0_SYS_LANE_SEL
:

613 
bb_t›_ªgi°îs
->
dp_gtx_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt0_rxÕmí
 = 
íLpm
 ? 1 : 0;

615 
DP_GTX_GT1_SYS_LANE_SEL
:

616 
bb_t›_ªgi°îs
->
dp_gtx_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt1_rxÕmí
 = 
íLpm
 ? 1 : 0;

618 
DP_GTX_GT2_SYS_LANE_SEL
:

619 
bb_t›_ªgi°îs
->
dp_gtx_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt2_rxÕmí
 = 
íLpm
 ? 1 : 0;

621 
DP_GTX_GT3_SYS_LANE_SEL
:

622 
bb_t›_ªgi°îs
->
dp_gtx_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt3_rxÕmí
 = 
íLpm
 ? 1 : 0;

628 
	}
}

638 
	$bb_t›_£tDpGtxRxMiscCålPd
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
DpGtxTxRxPdMode
 
pdMode
)

640 
œ√Sñ
)

642 
DP_GTX_GT0_SYS_LANE_SEL
:

643 
bb_t›_ªgi°îs
->
dp_gtx_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt0_rxpd
 = 
pdMode
;

645 
DP_GTX_GT1_SYS_LANE_SEL
:

646 
bb_t›_ªgi°îs
->
dp_gtx_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt1_rxpd
 = 
pdMode
;

648 
DP_GTX_GT2_SYS_LANE_SEL
:

649 
bb_t›_ªgi°îs
->
dp_gtx_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt2_rxpd
 = 
pdMode
;

651 
DP_GTX_GT3_SYS_LANE_SEL
:

652 
bb_t›_ªgi°îs
->
dp_gtx_rx
.
s
.
rx_misc_˘æ
.
bf
.
gt3_rxpd
 = 
pdMode
;

658 
	}
}

668 
	$bb_t›_£tDpGtxTxMiscCålPd
(
DpGtxSysL™eSñ
 
œ√Sñ
, 
DpGtxTxRxPdMode
 
pdMode
)

670 
œ√Sñ
)

672 
DP_GTX_GT0_SYS_LANE_SEL
:

673 
bb_t›_ªgi°îs
->
dp_gtx_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt0_txpd
 = 
pdMode
;

675 
DP_GTX_GT1_SYS_LANE_SEL
:

676 
bb_t›_ªgi°îs
->
dp_gtx_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt1_txpd
 = 
pdMode
;

678 
DP_GTX_GT2_SYS_LANE_SEL
:

679 
bb_t›_ªgi°îs
->
dp_gtx_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt2_txpd
 = 
pdMode
;

681 
DP_GTX_GT3_SYS_LANE_SEL
:

682 
bb_t›_ªgi°îs
->
dp_gtx_tx
.
s
.
tx_misc_˘æ
.
bf
.
gt3_txpd
 = 
pdMode
;

688 
	}
}

691 #ifde‡
PLATFORM_A7_K7


699 
	$bb_t›_£tDpGçRxPrbsCålPrbsSñ
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPrbsSñ
 
¥bs
)

701 
œ√Sñ
)

703 
DP_GTP_GT0_SYS_LANE_SEL
:

704 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt0_rx¥bs£l
 = 
¥bs
;

706 
DP_GTP_GT1_SYS_LANE_SEL
:

707 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt1_rx¥bs£l
 = 
¥bs
;

709 
DP_GTP_GT2_SYS_LANE_SEL
:

710 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt2_rx¥bs£l
 = 
¥bs
;

712 
DP_GTP_GT3_SYS_LANE_SEL
:

713 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt3_rx¥bs£l
 = 
¥bs
;

719 
	}
}

729 
	$bb_t›_≠∂yDpGçRxPrbsCålPrbsC¡Re£t
(
DpGçSysL™eSñ
 
œ√Sñ
, 
boﬁ
 
ª£t
)

731 
œ√Sñ
)

733 
DP_GTP_GT0_SYS_LANE_SEL
:

734 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt0_rx¥bs˙åe£t
 = 
ª£t
 ? 1 : 0;

736 
DP_GTP_GT1_SYS_LANE_SEL
:

737 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt1_rx¥bs˙åe£t
 = 
ª£t
 ? 1 : 0;

739 
DP_GTP_GT2_SYS_LANE_SEL
:

740 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt2_rx¥bs˙åe£t
 = 
ª£t
 ? 1 : 0;

742 
DP_GTP_GT3_SYS_LANE_SEL
:

743 
bb_t›_ªgi°îs
->
dp_gç_rx
.
s
.
rx_¥bs_˘æ
.
bf
.
gt3_rx¥bs˙åe£t
 = 
ª£t
 ? 1 : 0;

749 
	}
}

759 
	$bb_t›_£tDpGçTxPrbsCålSñ
(
DpGçSysL™eSñ
 
œ√Sñ
, 
DpGçTxRxPrbsSñ
 
¥bs
)

761 
œ√Sñ
)

763 
DP_GTP_GT0_SYS_LANE_SEL
:

764 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_¥bs_˘æ
.
bf
.
gt0_tx¥bs£l
 = 
¥bs
;

766 
DP_GTP_GT1_SYS_LANE_SEL
:

767 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_¥bs_˘æ
.
bf
.
gt1_tx¥bs£l
 = 
¥bs
;

769 
DP_GTP_GT2_SYS_LANE_SEL
:

770 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_¥bs_˘æ
.
bf
.
gt2_tx¥bs£l
 = 
¥bs
;

772 
DP_GTP_GT3_SYS_LANE_SEL
:

773 
bb_t›_ªgi°îs
->
dp_gç_tx
.
s
.
tx_¥bs_˘æ
.
bf
.
gt3_tx¥bs£l
 = 
¥bs
;

779 
	}
}

790 
	$bb_t›_£t10GEthCålPcsPmaPmdTy≥
(
PcsPmaPmdTy≥
 
ty≥
)

792 
bb_t›_ªgi°îs
->
ãn_gig_ëh_pcs_pma
.
s
.
c⁄åﬁ
.
bf
.
pma_pmd_ty≥
 = 
ty≥
;

793 
	}
}

803 
	$bb_t›_≠∂y10GEthCålPcsPmaRe£t
(
boﬁ
 
ª£t
)

805 
bb_t›_ªgi°îs
->
ãn_gig_ëh_pcs_pma
.
s
.
c⁄åﬁ
.
bf
.
ª£t
 =Ñeset ? 1 : 0;

806 
	}
}

816 
	$bb_t›_övît10GEthCålPcsPmaGt0TxPﬁ¨ôy
(
boﬁ
 
övîãd
)

818 
bb_t›_ªgi°îs
->
ãn_gig_ëh_pcs_pma
.
s
.
gt0_c⁄åﬁ
.
bf
.
gt0_txpﬁ¨ôy
 = 
övîãd
 ? 1 : 0;

819 
	}
}

829 
	$bb_t›_övît10GEthCålPcsPmaGt0RxPﬁ¨ôy
(
boﬁ
 
övîãd
)

831 
bb_t›_ªgi°îs
->
ãn_gig_ëh_pcs_pma
.
s
.
gt0_c⁄åﬁ
.
bf
.
gt0_rxpﬁ¨ôy
 = 
övîãd
 ? 1 : 0;

832 
	}
}

843 
	$bb_t›_k7_≠∂yDpRxSo·Re£t
(
boﬁ
 
ª£t
)

845 
bb_t›_ªgi°îs
->
dp_gtx_rx
.
s
.
rx_r°_˘æ
.
bf
.
so·_ª£t_rx
 = 
ª£t
 ? 1 : 0;

846 
	}
}

857 
	$bb_t›_k7_≠∂yDpTxSo·Re£t
(
boﬁ
 
ª£t
)

859 
bb_t›_ªgi°îs
->
dp_gtx_tx
.
s
.
tx_r°_˘æ
.
bf
.
so·_ª£t_tx
 = 
ª£t
 ? 1 : 0;

860 
	}
}

	@components/top/src/bb_top_lmk04906.c

25 #ifde‡
PLATFORM_K7


27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<bb_t›_ªgs.h
>

30 
	~"bb_t›_lmk04906.h
"

39 vﬁ©ûê
bb_t›_s
 * 
	gbb_t›_ªgi°îs
;

42 
wrôeToReg
(
uöt8_t
 
addr
, 
uöt32_t
 
vÆue
);

56 
	$PLL_lmk04906Inô
()

58 
bb_t›_ªgi°îs
 = (vﬁ©ûê
bb_t›_s
 *Ë
bb_chù_bb_t›_s_ADDRESS
;

61 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
lmk04906_uwúe_c⁄åﬁ
.
bf
.
hÆf_≥riod_˛ks
 = 0x3;

67 c⁄° 
uöt32_t
 
öô
[23][2] =

94 
uöt8_t
 
i
;

96 
i
 = 0; i < 
	`ARRAYSIZE
(
öô
); i++)

98 
	`wrôeToReg
(
öô
[
i
][1], init[i][0]);

100 
	}
}

110 
	$wrôeToReg
(
uöt8_t
 
addr
, 
uöt32_t
 
vÆue
)

113 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
lmk04906_ªad
.
bf
.
busy
 == 1)

116 
bb_t›_lmk04906_wrôe
 
wrôe
 = { .
bf
.
addr
 =áddr, .bf.
d©a
 = 
vÆue
 };

117 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
lmk04906_wrôe
 = 
wrôe
;

119 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
lmk04906_ªad
.
bf
.
busy
 == 1)

121 
	}
}

131 
uöt32_t
 
	$PLL_lmk04906RódFromReg
(
uöt8_t
 
addr
)

134 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
lmk04906_ªad
.
bf
.
busy
 == 1)

138 
uöt32
 
ªgVÆ
 = 
addr
 << 11;

139 
	`wrôeToReg
(31, 
ªgVÆ
);

142 
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
lmk04906_ªad
.
bf
.
busy
 == 1)

144  (
bb_t›_ªgi°îs
->
tb_fmch_dp3
.
s
.
lmk04906_ªad
.
bf
.
d©a
);

145 
	}
}

	@components/top/src/bb_top_log.h

11 #i‚de‡
BB_TOP_LOG_H


12 
	#BB_TOP_LOG_H


	)

15 
	~<¥oje˘_comp⁄íts.h
>

16 
	~<ûog.h
>

19 
	$ILOG_CREATE
(
TOP_COMPONENT
)

21 
	`ILOG_ENTRY
(
BB_TOP_DRP_READ_INVALID_MASK
, "TriedÅoÑead from moreÅhan one DRP busátáÅime: drpEnMask = 0x%x\n")

22 
	`ILOG_ENTRY
(
BB_TOP_BAD_MUTEX_TOKEN
, "Wrong IMutexÅokenátÜine %d\n")

23 
	`ILOG_ENTRY
(
BB_TOP_DP_DRP_WRITE
, "Wrote DRPáddress 0x%x with drpEnMask = 0x%xánd write data = 0x%x\n")

24 
	`ILOG_ENTRY
(
BB_TOP_DP_DRP_READ
, "Read DRPáddress 0x%x with drpEnMask = 0x%x:Ñead data = 0x%x\n")

25 
	`ILOG_ENTRY
(
BB_TOP_DP_DRP_RMW1
, "RMWed DRPáddress 0x%x with drpEnMask = 0x%x,ÑmwMask = %d\n")

26 
	`ILOG_ENTRY
(
BB_TOP_DP_DRP_RMW2
, "ánd write data = 0x%x\n")

27 
	`ILOG_ENTRY
(
BB_TOP_DP_INVALID_DRP_READ
,

29 
	`ILOG_ENTRY
(
BB_TOP_DP_INVALID_BANDWIDTH
, "Invalid bandwidth setting %dátÜine %d\n")

30 
	`ILOG_ENTRY
(
BB_TOP_DP_INVALID_LANE_COUNT
, "InvalidÜane count setting %dátÜine %d\n")

31 
	`ILOG_ENTRY
(
BB_TOP_DP_TRANSCEIVER_CONFIG_VALUE_ERROR
,

33 
	`ILOG_ENTRY
(
BB_TOP_DP_INVALID_MMCM_OUTPUT_FREQ
,

35 
	`ILOG_ENTRY
(
BB_TOP_DP_INVALID_MMCM_OUTPUT_ENCODING
,

37 
	`ILOG_ENTRY
(
BB_TOP_DP_GTX_RESET_TOO_SLOW
, "GTXÅookÅooÜongÅo come out ofÑeset!\n")

38 
	`ILOG_ENTRY
(
BB_TOP_DP_GTP_RESET_TOO_SLOW
, "GTPÅookÅooÜongÅo come out ofÑeset! Waited for %d us\n")

39 
	`ILOG_ENTRY
(
BB_TOP_DP_SET_VOLTAGE_SWING
, "WritingÅxDiffCtrl with 0x%x -> 0x%x\n")

40 
	`ILOG_ENTRY
(
BB_TOP_DP_SET_PREEMPHASIS
, "WritingÅxPostCursor with 0x%x -> 0x%x\n")

41 
	`ILOG_ENTRY
(
BB_TOP_DP_PRECHARGE
, "Pre-charging mainÜink withÅxInhibit = %d,ÜaneCount = %d\n")

42 
	`ILOG_ENTRY
(
BB_TOP_DP_INITIALIZING_DP_TRANSCEIVERS
, "Initializing DPÅransceivers: bw = %d,Üc = %d\n")

43 
	`ILOG_ENTRY
(
BB_TOP_DBGXX
, "### DBG 0x%x, 0x%x\n")

44 
	`ILOG_ENTRY
(
BB_TOP_HOLD_GE_RESET
, "Placing GE inÑeset mode\n")

45 
	`ILOG_ENTRY
(
BB_TOP_GE_RUN
, "Placing GE inÑun mode\n")

46 
	`ILOG_ENTRY
(
BB_TOP_GE_BOOTLOADER
, "Placing GE in bootloader mode\n")

47 
	`ILOG_ENTRY
(
BB_TOP_GE_NULL_RUN_WATCHDOG_CALLBACK
, "GE Run Wathdog happen without Callback\n")

48 
	`ILOG_ENTRY
(
BB_TOP_GE_NULL_RESET_WATCHDOG_CALLBACK
, "GE Reset Wathdog happen without Callback\n")

49 
	`ILOG_ENTRY
(
BB_TOP_GE_RUN_AGAIN
, "Set GE Run modeágain while it'sálreay in Run mode\n")

50 
	`ILOG_ENTRY
(
BB_TOP_DRP_WRITE_WAIT_TIMEOUT
, "DRP Write wait for busses idleÅimeout\n")

51 
	`ILOG_ENTRY
(
BB_TOP_LINK_LOCK_WAIT_TIMEOUT
, "Link PLLÜock waitÅimeout\n")

52 
	`ILOG_ENTRY
(
BB_TOP_GTP_OUT_OF_RESET
, "GTP is out ofÑeset\n")

53 
	`ILOG_ENTRY
(
BB_TOP_DP_FRQ
, "DP FreqÅook %d usÅo measure count = %d\n")

54 
	`ILOG_ENTRY
(
BB_TOP_DP_MMCM_LOCK
, "DP MMCM Lock doneÅook %d usÅoÜock\n")

55 
	`ILOG_ENTRY
(
BB_TOP_DP_FRQ_TIMEOUT
, "DP Freq measureÅime out\n")

56 
	`ILOG_ENTRY
(
BB_TOP_SSC_DETECTION
, "***** SSC Detection = %d *****\n")

58 
	`ILOG_ENTRY
(
BB_TOP_READ_ICAP
, "Read Reg = %x Val = %x\n")

59 
	`ILOG_ENTRY
(
BB_TOP_WRITE_ICAP
, "Write Reg = %x Val = %x\n")

60 
	`ILOG_ENTRY
(
BB_TOP_READ_USER_REG
, "User Reg = %x\n")

61 
	`ILOG_ENTRY
(
BB_TOP_WRITE_USER_REG
, "Write User Reg = %x\n")

62 
	`ILOG_ENTRY
(
BB_TOP_FRQ_RUNNING
, " Frequency detection stillÑunning\n")

63 
	`ILOG_ENTRY
(
BB_TOP_DRP_WRITE_TIMER_OVER
, "DRP Set Timerover. drp_en_mask = 0x%x\n")

64 
	`ILOG_ENTRY
(
BB_TOP_DRP_READ_TIME_OVER
, "DRP Read Timerover. Lineát: %d\n")

65 
	`ILOG_ENTRY
(
BB_TOP_DP_SOURCE_RST
, "DP Source Reset :%d (1:ApplyÑeset, 0: ClearÑeset)\n")

66 
	`ILOG_ENTRY
(
BB_TOP_DP_NO_SYMBOL_LOCK
, "No symbolÜock.álign status: 0x%x\n")

67 
	`ILOG_ENTRY
(
BB_TOP_CORE_TYPE
, "The coreÅype is -%d\n")

70 
	$ILOG_END
(
TOP_COMPONENT
, 
ILOG_MINOR_EVENT
)

	@components/top/src/top_cmd.h

24 #i‚de‡
TOP_CMD_H


25 
	#TOP_CMD_H


	)

28 
	~<icmd.h
>

40 
	$ICMD_FUNCTIONS_CREATE
(
TOP_COMPONENT
)

41 #ifde‡
PLATFORM_A7


42 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_sy°emRe£t
, "Perform systemÑestart", )

43 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_åiggîFÆlbackFpgaIcmd
, "TriggerÅhe fallback", )

44 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_AµlyGERe£t
, "Re£àGE, 1ÅÿpuàGE i¿ª£à™d 0ÅÿpuàGE i¿run", 
boﬁ
)

45 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_GçRe£tIcmd
, "ResetsÅhe GTPÅranceiversándÅakeÅhem out ofÑesetáfter configuration", )

46 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_C⁄figuªDpTøns˚ivîLexIcmd
, "Configure DPÅransreceivers on LEX", )

47 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_IcmddpSëTxDiffCål
, "Së†®vÆuêf‹Åxdiff˘æ, Arg 2 = 1Åÿ¥esi° Arg 1, 0Åÿkì∞Arg 1 o∆y f‹ o√ÜökÅøöög", 
uöt8_t
, 
boﬁ
)

48 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_IcmddpSëTxPo°Curs‹
, "Së†®vÆuêf‹Åxpo°curs‹, Arg 2 = 1Åÿ¥esi° Arg 1, 0Åÿkì∞Arg 1 o∆y f‹ o√ÜökÅøöög", 
uöt8_t
, 
boﬁ
)

49 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_swôchFpgaImage
, "ChangeÅheÑunning image. NOTE doesÇot setÅhe fallback bit", )

50 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_CÆcFpgaImageCrc
, "CalculateÅhe FPGA 64bit CRC", )

51 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_CÆcT¨gëImageCrc
, "CalculateÅhe Target image CRC", )

53 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_wrôeU£rReg
, "WrôêthêFPGA u£∏ªgi°î", 
uöt32_t
)

54 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_ªadU£rReg
, "ReadÅhe FPGA userÑegister", )

55 
	`ICMD_FUNCTIONS_ENTRY_FLASH
(
bb_t›_c‹eTy≥Icmd
, "This icmd states ifÅhe coreÅype is -2 or -3", )

57 
	$ICMD_FUNCTIONS_END
(
TOP_COMPONENT
)

	@
1
.
1
/usr/include
56
1841
components/dp/inc/aux_api.h
components/dp/src/aux_common.c
components/dp/src/dp_cmd.h
components/dp/src/dp_icmds.c
components/dp/src/dp_loc.h
components/dp/src/dp_log.h
components/dp/src/dpcd.h
components/dp/src/edid.c
components/dp/src/edid.h
components/dp/src/edid_local.c
components/dp/src/lex_dpcd_reg.c
components/dp/src/lex_dpcd_reg.h
components/dp/src/lex_policy_maker.c
components/dp/src/lex_policy_maker.h
components/dp/src/lex_transaction_handlers.c
components/dp/src/mccs.c
components/dp/src/mccs.h
components/dp/src/rex_compliance.c
components/dp/src/rex_policy_maker.c
components/dp/src/rex_policy_maker.h
components/dp/src/rex_transaction_handlers.c
components/dp_aux/inc/dp_aux.h
components/dp_aux/src/aux_cmd.h
components/dp_aux/src/aux_hal.c
components/dp_aux/src/aux_hpd.c
components/dp_aux/src/aux_lexIsr.c
components/dp_aux/src/aux_loc.h
components/dp_aux/src/aux_log.h
components/dp_aux/src/aux_rexIsr.c
components/dp_aux/src/aux_rx.c
components/dp_aux/src/aux_tx.c
components/dp_stream/inc/dp_stream.h
components/dp_stream/src/dp_stream.c
components/dp_stream/src/dp_stream_cmd.h
components/dp_stream/src/dp_stream_lex.c
components/dp_stream/src/dp_stream_loc.h
components/dp_stream/src/dp_stream_log.h
components/dp_stream/src/dp_stream_rex.c
components/top/inc/bb_top.h
components/top/inc/bb_top_a7.h
components/top/inc/bb_top_dp.h
components/top/inc/bb_top_dp_a7.h
components/top/inc/bb_top_dp_k7.h
components/top/inc/bb_top_ge.h
components/top/inc/bb_top_k7.h
components/top/inc/bb_top_lmk04906.h
components/top/src/bb_top.c
components/top/src/bb_top_a7.c
components/top/src/bb_top_dp.c
components/top/src/bb_top_dp_a7.c
components/top/src/bb_top_dp_k7.c
components/top/src/bb_top_ge.c
components/top/src/bb_top_k7.c
components/top/src/bb_top_lmk04906.c
components/top/src/bb_top_log.h
components/top/src/top_cmd.h
